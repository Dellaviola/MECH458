
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003d0  00800100  00001fb6  0000204a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  008004d0  008004d0  0000241a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005822  00000000  00000000  000027e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b7e  00000000  00000000  0000800a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003599  00000000  00000000  00009b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  0000d124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009292  00000000  00000000  0000d9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b4a  00000000  00000000  00016c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00018790  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00018ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c6       	rjmp	.+3170   	; 0xc98 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e6 eb       	ldi	r30, 0xB6	; 182
      ac:	ff e1       	ldi	r31, 0x1F	; 31
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 3d       	cpi	r26, 0xD0	; 208
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	25 e0       	ldi	r18, 0x05	; 5
      c0:	a0 ed       	ldi	r26, 0xD0	; 208
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a1 36       	cpi	r26, 0x61	; 97
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	63 d4       	rcall	.+2246   	; 0x996 <main>
      d0:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <_exit>

000000d4 <__bad_interrupt>:
      d4:	1f c5       	rjmp	.+2622   	; 0xb14 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_ADCCount>
     120:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_ADCCount>
     12c:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 f4 04 	sts	0x04F4, r19	; 0x8004f4 <g_ADCCount+0x1>
     13a:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e1 52       	subi	r30, 0x21	; 33
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <g_ADCCount>
     162:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	23 c0       	rjmp	.+70     	; 0x1d8 <SERVER_Task+0x4e>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2385>
     196:	88 23       	and	r24, r24
     198:	e9 f0       	breq	.+58     	; 0x1d4 <SERVER_Task+0x4a>
     19a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     19e:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     1aa:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     1ae:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <STAGE1+0x1>
     1b2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <STAGE1>
     1b6:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     1ba:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     1be:	aa d3       	rcall	.+1876   	; 0x914 <LL_GetClass>
     1c0:	85 30       	cpi	r24, 0x05	; 5
     1c2:	31 f4       	brne	.+12     	; 0x1d0 <SERVER_Task+0x46>
     1c4:	64 e0       	ldi	r22, 0x04	; 4
     1c6:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     1ca:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     1ce:	c2 d3       	rcall	.+1924   	; 0x954 <LL_UpdateStatus>
     1d0:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <g_WDTimeout>
     1d4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2385>
     1d8:	66 99       	sbic	0x0c, 6	; 12
     1da:	0e c0       	rjmp	.+28     	; 0x1f8 <SERVER_Task+0x6e>
     1dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2386>
     1e0:	88 23       	and	r24, r24
     1e2:	41 f0       	breq	.+16     	; 0x1f4 <SERVER_Task+0x6a>
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     1ea:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     1ee:	b2 d3       	rcall	.+1892   	; 0x954 <LL_UpdateStatus>
     1f0:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <g_WDTimeout>
     1f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2386>
     1f8:	65 99       	sbic	0x0c, 5	; 12
     1fa:	0b c0       	rjmp	.+22     	; 0x212 <SERVER_Task+0x88>
     1fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2387>
     200:	88 23       	and	r24, r24
     202:	29 f0       	breq	.+10     	; 0x20e <SERVER_Task+0x84>
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <_timer+0x23>
     20a:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <g_WDTimeout>
     20e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2387>
     212:	67 9b       	sbis	0x0c, 7	; 12
     214:	17 c0       	rjmp	.+46     	; 0x244 <SERVER_Task+0xba>
     216:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2385>
     21a:	81 11       	cpse	r24, r1
     21c:	10 c0       	rjmp	.+32     	; 0x23e <SERVER_Task+0xb4>
     21e:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <g_Timer>
     222:	70 91 f8 04 	lds	r23, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     226:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     22a:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     22e:	9c d3       	rcall	.+1848   	; 0x968 <LL_UpdateTick>
     230:	ee ef       	ldi	r30, 0xFE	; 254
     232:	f4 e0       	ldi	r31, 0x04	; 4
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	82 8f       	std	Z+26, r24	; 0x1a
     238:	84 a7       	std	Z+44, r24	; 0x2c
     23a:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <_timer+0x47>
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2385>
     244:	66 9b       	sbis	0x0c, 6	; 12
     246:	5d c0       	rjmp	.+186    	; 0x302 <SERVER_Task+0x178>
     248:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2386>
     24c:	81 11       	cpse	r24, r1
     24e:	56 c0       	rjmp	.+172    	; 0x2fc <SERVER_Task+0x172>
     250:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     254:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	61 f5       	brne	.+88     	; 0x2b4 <SERVER_Task+0x12a>
     25c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     260:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     264:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <STAGE2+0x1>
     268:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <STAGE2>
     26c:	c0 91 f7 04 	lds	r28, 0x04F7	; 0x8004f7 <g_Timer>
     270:	d0 91 f8 04 	lds	r29, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     274:	7f d3       	rcall	.+1790   	; 0x974 <LL_GetTick>
     276:	c8 1b       	sub	r28, r24
     278:	d9 0b       	sbc	r29, r25
     27a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <STAGE1_STAGE2_TIME>
     27e:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <STAGE1_STAGE2_TIME+0x1>
     282:	8c 17       	cp	r24, r28
     284:	9d 07       	cpc	r25, r29
     286:	18 f4       	brcc	.+6      	; 0x28e <SERVER_Task+0x104>
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_MissingRequest>
     28e:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <g_Timer>
     292:	70 91 f8 04 	lds	r23, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     296:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     29a:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     29e:	64 d3       	rcall	.+1736   	; 0x968 <LL_UpdateTick>
     2a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <STAGE2_EXIT_TIME>
     2a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <STAGE2_EXIT_TIME+0x1>
     2a8:	c2 96       	adiw	r24, 0x32	; 50
     2aa:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <lastItemTick+0x1>
     2ae:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <lastItemTick>
     2b2:	1f c0       	rjmp	.+62     	; 0x2f2 <SERVER_Task+0x168>
     2b4:	09 d3       	rcall	.+1554   	; 0x8c8 <LL_Next>
     2b6:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <STAGE2+0x1>
     2ba:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <STAGE2>
     2be:	c0 91 f7 04 	lds	r28, 0x04F7	; 0x8004f7 <g_Timer>
     2c2:	d0 91 f8 04 	lds	r29, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     2c6:	56 d3       	rcall	.+1708   	; 0x974 <LL_GetTick>
     2c8:	c8 1b       	sub	r28, r24
     2ca:	d9 0b       	sbc	r29, r25
     2cc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <STAGE1_STAGE2_TIME>
     2d0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <STAGE1_STAGE2_TIME+0x1>
     2d4:	8c 17       	cp	r24, r28
     2d6:	9d 07       	cpc	r25, r29
     2d8:	18 f4       	brcc	.+6      	; 0x2e0 <SERVER_Task+0x156>
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_MissingRequest>
     2e0:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <g_Timer>
     2e4:	70 91 f8 04 	lds	r23, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     2e8:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     2ec:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     2f0:	3b d3       	rcall	.+1654   	; 0x968 <LL_UpdateTick>
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2386>
     302:	65 9b       	sbis	0x0c, 5	; 12
     304:	03 c0       	rjmp	.+6      	; 0x30c <SERVER_Task+0x182>
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2387>
     30c:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <g_Timer>
     310:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     314:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <EXIT_DELAY>
     318:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <EXIT_DELAY+0x1>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	82 17       	cp	r24, r18
     322:	93 07       	cpc	r25, r19
     324:	71 f4       	brne	.+28     	; 0x342 <SERVER_Task+0x1b8>
     326:	20 91 d8 04 	lds	r18, 0x04D8	; 0x8004d8 <HEAD>
     32a:	30 91 d9 04 	lds	r19, 0x04D9	; 0x8004d9 <HEAD+0x1>
     32e:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <FRONT>
     332:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <FRONT+0x1>
     336:	28 17       	cp	r18, r24
     338:	39 07       	cpc	r19, r25
     33a:	19 f4       	brne	.+6      	; 0x342 <SERVER_Task+0x1b8>
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_MissingRequest>
     342:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     346:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     34a:	e4 d2       	rcall	.+1480   	; 0x914 <LL_GetClass>
     34c:	84 30       	cpi	r24, 0x04	; 4
     34e:	c9 f4       	brne	.+50     	; 0x382 <SERVER_Task+0x1f8>
     350:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <stepper+0xe>
     354:	81 11       	cpse	r24, r1
     356:	15 c0       	rjmp	.+42     	; 0x382 <SERVER_Task+0x1f8>
     358:	c0 91 f7 04 	lds	r28, 0x04F7	; 0x8004f7 <g_Timer>
     35c:	d0 91 f8 04 	lds	r29, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     360:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     364:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     368:	05 d3       	rcall	.+1546   	; 0x974 <LL_GetTick>
     36a:	c8 1b       	sub	r28, r24
     36c:	d9 0b       	sbc	r29, r25
     36e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <STAGE2_EXIT_TIME>
     372:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <STAGE2_EXIT_TIME+0x1>
     376:	8c 17       	cp	r24, r28
     378:	9d 07       	cpc	r25, r29
     37a:	18 f4       	brcc	.+6      	; 0x382 <SERVER_Task+0x1f8>
     37c:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <memory.2388>
     380:	04 c0       	rjmp	.+8      	; 0x38a <SERVER_Task+0x200>
     382:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <memory.2388>
     386:	81 11       	cpse	r24, r1
     388:	47 c0       	rjmp	.+142    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     38a:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     38e:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     392:	c0 d2       	rcall	.+1408   	; 0x914 <LL_GetClass>
     394:	84 30       	cpi	r24, 0x04	; 4
     396:	09 f4       	brne	.+2      	; 0x39a <SERVER_Task+0x210>
     398:	3f c0       	rjmp	.+126    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     39a:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
     39e:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
     3a2:	82 81       	ldd	r24, Z+2	; 0x02
     3a4:	93 81       	ldd	r25, Z+3	; 0x03
     3a6:	b6 d2       	rcall	.+1388   	; 0x914 <LL_GetClass>
     3a8:	84 30       	cpi	r24, 0x04	; 4
     3aa:	91 f4       	brne	.+36     	; 0x3d0 <SERVER_Task+0x246>
     3ac:	c0 91 f7 04 	lds	r28, 0x04F7	; 0x8004f7 <g_Timer>
     3b0:	d0 91 f8 04 	lds	r29, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     3b4:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     3b8:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     3bc:	db d2       	rcall	.+1462   	; 0x974 <LL_GetTick>
     3be:	c8 1b       	sub	r28, r24
     3c0:	d9 0b       	sbc	r29, r25
     3c2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <STAGE2_EXIT_TIME>
     3c6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <STAGE2_EXIT_TIME+0x1>
     3ca:	8c 17       	cp	r24, r28
     3cc:	9d 07       	cpc	r25, r29
     3ce:	20 f5       	brcc	.+72     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3d0:	eb e4       	ldi	r30, 0x4B	; 75
     3d2:	f5 e0       	ldi	r31, 0x05	; 5
     3d4:	84 81       	ldd	r24, Z+4	; 0x04
     3d6:	22 81       	ldd	r18, Z+2	; 0x02
     3d8:	33 81       	ldd	r19, Z+3	; 0x03
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	82 17       	cp	r24, r18
     3de:	93 07       	cpc	r25, r19
     3e0:	d9 f4       	brne	.+54     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <memory.2388>
     3e8:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
     3ec:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	93 81       	ldd	r25, Z+3	; 0x03
     3f4:	8f d2       	rcall	.+1310   	; 0x914 <LL_GetClass>
     3f6:	e8 2f       	mov	r30, r24
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	e7 5f       	subi	r30, 0xF7	; 247
     3fc:	fe 4f       	sbci	r31, 0xFE	; 254
     3fe:	c0 81       	ld	r28, Z
     400:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     404:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     408:	85 d2       	rcall	.+1290   	; 0x914 <LL_GetClass>
     40a:	e8 2f       	mov	r30, r24
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	e7 5f       	subi	r30, 0xF7	; 247
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	80 81       	ld	r24, Z
     414:	6c 2f       	mov	r22, r28
     416:	20 d4       	rcall	.+2112   	; 0xc58 <STEPPER_SetRotation>
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <ADC_Task>:
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	cf 93       	push	r28
     428:	ef ed       	ldi	r30, 0xDF	; 223
     42a:	f4 e0       	ldi	r31, 0x04	; 4
     42c:	a0 81       	ld	r26, Z
     42e:	b1 81       	ldd	r27, Z+1	; 0x01
     430:	60 81       	ld	r22, Z
     432:	71 81       	ldd	r23, Z+1	; 0x01
     434:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <ticks.2396>
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <ticks.2396>
     43e:	c1 2c       	mov	r12, r1
     440:	d1 2c       	mov	r13, r1
     442:	76 01       	movw	r14, r12
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	4f b7       	in	r20, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	fc 01       	movw	r30, r24
     44e:	ee 0f       	add	r30, r30
     450:	ff 1f       	adc	r31, r31
     452:	e1 52       	subi	r30, 0x21	; 33
     454:	fb 4f       	sbci	r31, 0xFB	; 251
     456:	20 81       	ld	r18, Z
     458:	31 81       	ldd	r19, Z+1	; 0x01
     45a:	c2 0e       	add	r12, r18
     45c:	d3 1e       	adc	r13, r19
     45e:	e1 1c       	adc	r14, r1
     460:	f1 1c       	adc	r15, r1
     462:	20 81       	ld	r18, Z
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	26 17       	cp	r18, r22
     468:	37 07       	cpc	r19, r23
     46a:	38 f4       	brcc	.+14     	; 0x47a <ADC_Task+0x5c>
     46c:	fc 01       	movw	r30, r24
     46e:	ee 0f       	add	r30, r30
     470:	ff 1f       	adc	r31, r31
     472:	e1 52       	subi	r30, 0x21	; 33
     474:	fb 4f       	sbci	r31, 0xFB	; 251
     476:	60 81       	ld	r22, Z
     478:	71 81       	ldd	r23, Z+1	; 0x01
     47a:	fc 01       	movw	r30, r24
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	e1 52       	subi	r30, 0x21	; 33
     482:	fb 4f       	sbci	r31, 0xFB	; 251
     484:	20 81       	ld	r18, Z
     486:	31 81       	ldd	r19, Z+1	; 0x01
     488:	a2 17       	cp	r26, r18
     48a:	b3 07       	cpc	r27, r19
     48c:	08 f0       	brcs	.+2      	; 0x490 <ADC_Task+0x72>
     48e:	4d c0       	rjmp	.+154    	; 0x52a <ADC_Task+0x10c>
     490:	fc 01       	movw	r30, r24
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	e1 52       	subi	r30, 0x21	; 33
     498:	fb 4f       	sbci	r31, 0xFB	; 251
     49a:	a0 81       	ld	r26, Z
     49c:	b1 81       	ldd	r27, Z+1	; 0x01
     49e:	45 c0       	rjmp	.+138    	; 0x52a <ADC_Task+0x10c>
     4a0:	8f b7       	in	r24, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	ca 1a       	sub	r12, r26
     4a6:	db 0a       	sbc	r13, r27
     4a8:	e1 08       	sbc	r14, r1
     4aa:	f1 08       	sbc	r15, r1
     4ac:	c6 1a       	sub	r12, r22
     4ae:	d7 0a       	sbc	r13, r23
     4b0:	e1 08       	sbc	r14, r1
     4b2:	f1 08       	sbc	r15, r1
     4b4:	f6 94       	lsr	r15
     4b6:	e7 94       	ror	r14
     4b8:	d7 94       	ror	r13
     4ba:	c7 94       	ror	r12
     4bc:	f6 94       	lsr	r15
     4be:	e7 94       	ror	r14
     4c0:	d7 94       	ror	r13
     4c2:	c7 94       	ror	r12
     4c4:	8f bf       	out	0x3f, r24	; 63
     4c6:	cf b7       	in	r28, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	d7 01       	movw	r26, r14
     4cc:	c6 01       	movw	r24, r12
     4ce:	0b 97       	sbiw	r24, 0x0b	; 11
     4d0:	a1 09       	sbc	r26, r1
     4d2:	b1 09       	sbc	r27, r1
     4d4:	81 34       	cpi	r24, 0x41	; 65
     4d6:	94 40       	sbci	r25, 0x04	; 4
     4d8:	a1 05       	cpc	r26, r1
     4da:	b1 05       	cpc	r27, r1
     4dc:	a0 f4       	brcc	.+40     	; 0x506 <ADC_Task+0xe8>
     4de:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     4e2:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     4e6:	1b d2       	rcall	.+1078   	; 0x91e <LL_GetRefl>
     4e8:	a0 e0       	ldi	r26, 0x00	; 0
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	c8 16       	cp	r12, r24
     4ee:	d9 06       	cpc	r13, r25
     4f0:	ea 06       	cpc	r14, r26
     4f2:	fb 06       	cpc	r15, r27
     4f4:	40 f4       	brcc	.+16     	; 0x506 <ADC_Task+0xe8>
     4f6:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
     4fa:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
     4fe:	00 97       	sbiw	r24, 0x00	; 0
     500:	11 f0       	breq	.+4      	; 0x506 <ADC_Task+0xe8>
     502:	b6 01       	movw	r22, r12
     504:	17 d2       	rcall	.+1070   	; 0x934 <LL_UpdateRefl>
     506:	cf bf       	out	0x3f, r28	; 63
     508:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <g_ADCCount+0x1>
     50c:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <g_ADCCount>
     510:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <_timer+0x11>
     514:	66 9b       	sbis	0x0c, 6	; 12
     516:	06 c0       	rjmp	.+12     	; 0x524 <ADC_Task+0x106>
     518:	ea e7       	ldi	r30, 0x7A	; 122
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	80 64       	ori	r24, 0x40	; 64
     520:	80 83       	st	Z, r24
     522:	0a c0       	rjmp	.+20     	; 0x538 <ADC_Task+0x11a>
     524:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <ticks.2396>
     528:	07 c0       	rjmp	.+14     	; 0x538 <ADC_Task+0x11a>
     52a:	4f bf       	out	0x3f, r20	; 63
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	86 30       	cpi	r24, 0x06	; 6
     530:	91 05       	cpc	r25, r1
     532:	09 f0       	breq	.+2      	; 0x536 <ADC_Task+0x118>
     534:	89 cf       	rjmp	.-238    	; 0x448 <ADC_Task+0x2a>
     536:	b4 cf       	rjmp	.-152    	; 0x4a0 <ADC_Task+0x82>
     538:	cf 91       	pop	r28
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	08 95       	ret

00000544 <MAG_Task>:
     544:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_MotorOn>
     548:	88 23       	and	r24, r24
     54a:	29 f0       	breq	.+10     	; 0x556 <MAG_Task+0x12>
     54c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <tick.2418>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <tick.2418>
     556:	64 99       	sbic	0x0c, 4	; 12
     558:	1a c0       	rjmp	.+52     	; 0x58e <MAG_Task+0x4a>
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     560:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     564:	f7 d1       	rcall	.+1006   	; 0x954 <LL_UpdateStatus>
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     56c:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     570:	e7 d1       	rcall	.+974    	; 0x940 <LL_UpdateMag>
     572:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     576:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     57a:	a6 d1       	rcall	.+844    	; 0x8c8 <LL_Next>
     57c:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <STAGE1+0x1>
     580:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <STAGE1>
     584:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <tick.2418>
     588:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <_timer+0x1a>
     58c:	08 95       	ret
     58e:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <tick.2418>
     592:	83 33       	cpi	r24, 0x33	; 51
     594:	c8 f0       	brcs	.+50     	; 0x5c8 <MAG_Task+0x84>
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     59c:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     5a0:	d9 d1       	rcall	.+946    	; 0x954 <LL_UpdateStatus>
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     5a8:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     5ac:	c9 d1       	rcall	.+914    	; 0x940 <LL_UpdateMag>
     5ae:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
     5b2:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
     5b6:	88 d1       	rcall	.+784    	; 0x8c8 <LL_Next>
     5b8:	90 93 fb 04 	sts	0x04FB, r25	; 0x8004fb <STAGE1+0x1>
     5bc:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <STAGE1>
     5c0:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <tick.2418>
     5c4:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <_timer+0x1a>
     5c8:	08 95       	ret

000005ca <EXIT_Task>:
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
     5dc:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     5e0:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     5e4:	bc d1       	rcall	.+888    	; 0x95e <LL_GetStatus>
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	18 f4       	brcc	.+6      	; 0x5f0 <EXIT_Task+0x26>
     5ea:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     5ee:	fc c0       	rjmp	.+504    	; 0x7e8 <EXIT_Task+0x21e>
     5f0:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <g_Timer>
     5f4:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     5f8:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <EXIT_DELAY>
     5fc:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <EXIT_DELAY+0x1>
     600:	28 17       	cp	r18, r24
     602:	39 07       	cpc	r19, r25
     604:	18 f4       	brcc	.+6      	; 0x60c <EXIT_Task+0x42>
     606:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     60a:	ee c0       	rjmp	.+476    	; 0x7e8 <EXIT_Task+0x21e>
     60c:	00 91 f7 04 	lds	r16, 0x04F7	; 0x8004f7 <g_Timer>
     610:	10 91 f8 04 	lds	r17, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     614:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     618:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     61c:	ab d1       	rcall	.+854    	; 0x974 <LL_GetTick>
     61e:	08 1b       	sub	r16, r24
     620:	19 0b       	sbc	r17, r25
     622:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <STAGE2_EXIT_TIME>
     626:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <STAGE2_EXIT_TIME+0x1>
     62a:	08 17       	cp	r16, r24
     62c:	19 07       	cpc	r17, r25
     62e:	18 f4       	brcc	.+6      	; 0x636 <EXIT_Task+0x6c>
     630:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     634:	d9 c0       	rjmp	.+434    	; 0x7e8 <EXIT_Task+0x21e>
     636:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     63a:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     63e:	6a d1       	rcall	.+724    	; 0x914 <LL_GetClass>
     640:	84 30       	cpi	r24, 0x04	; 4
     642:	89 f5       	brne	.+98     	; 0x6a6 <EXIT_Task+0xdc>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <g_UnclassifiedRequest>
     64a:	63 e0       	ldi	r22, 0x03	; 3
     64c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     650:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     654:	7f d1       	rcall	.+766    	; 0x954 <LL_UpdateStatus>
     656:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_Timer>
     65a:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     65e:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <lastItemTick+0x1>
     662:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <lastItemTick>
     666:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     66a:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     66e:	2c d1       	rcall	.+600    	; 0x8c8 <LL_Next>
     670:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <HEAD+0x1>
     674:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <HEAD>
     678:	fc 01       	movw	r30, r24
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	93 81       	ldd	r25, Z+3	; 0x03
     67e:	4a d1       	rcall	.+660    	; 0x914 <LL_GetClass>
     680:	e8 2f       	mov	r30, r24
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	e7 5f       	subi	r30, 0xF7	; 247
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	10 81       	ld	r17, Z
     68a:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     68e:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     692:	40 d1       	rcall	.+640    	; 0x914 <LL_GetClass>
     694:	e8 2f       	mov	r30, r24
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	e7 5f       	subi	r30, 0xF7	; 247
     69a:	fe 4f       	sbci	r31, 0xFE	; 254
     69c:	80 81       	ld	r24, Z
     69e:	61 2f       	mov	r22, r17
     6a0:	db d2       	rcall	.+1462   	; 0xc58 <STEPPER_SetRotation>
     6a2:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     6a6:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     6aa:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     6ae:	57 d1       	rcall	.+686    	; 0x95e <LL_GetStatus>
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	31 f5       	brne	.+76     	; 0x700 <EXIT_Task+0x136>
     6b4:	00 91 f7 04 	lds	r16, 0x04F7	; 0x8004f7 <g_Timer>
     6b8:	10 91 f8 04 	lds	r17, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     6bc:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <lastItemTick>
     6c0:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <lastItemTick+0x1>
     6c4:	08 1b       	sub	r16, r24
     6c6:	19 0b       	sbc	r17, r25
     6c8:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     6cc:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     6d0:	51 d1       	rcall	.+674    	; 0x974 <LL_GetTick>
     6d2:	7c 01       	movw	r14, r24
     6d4:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <N_1>
     6d8:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <N_1+0x1>
     6dc:	4b d1       	rcall	.+662    	; 0x974 <LL_GetTick>
     6de:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <MISSING_DELAY>
     6e2:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <MISSING_DELAY+0x1>
     6e6:	2e 0d       	add	r18, r14
     6e8:	3f 1d       	adc	r19, r15
     6ea:	28 1b       	sub	r18, r24
     6ec:	39 0b       	sbc	r19, r25
     6ee:	02 17       	cp	r16, r18
     6f0:	13 07       	cpc	r17, r19
     6f2:	30 f0       	brcs	.+12     	; 0x700 <EXIT_Task+0x136>
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <g_MissingRequest>
     6fa:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     6fe:	74 c0       	rjmp	.+232    	; 0x7e8 <EXIT_Task+0x21e>
     700:	eb e4       	ldi	r30, 0x4B	; 75
     702:	f5 e0       	ldi	r31, 0x05	; 5
     704:	85 81       	ldd	r24, Z+5	; 0x05
     706:	96 81       	ldd	r25, Z+6	; 0x06
     708:	97 81       	ldd	r25, Z+7	; 0x07
     70a:	89 1b       	sub	r24, r25
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	99 81       	ldd	r25, Y+1	; 0x01
     710:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <STEPPER_RANGE>
     714:	98 17       	cp	r25, r24
     716:	08 f0       	brcs	.+2      	; 0x71a <EXIT_Task+0x150>
     718:	64 c0       	rjmp	.+200    	; 0x7e2 <EXIT_Task+0x218>
     71a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <stepper+0xe>
     71e:	81 11       	cpse	r24, r1
     720:	60 c0       	rjmp	.+192    	; 0x7e2 <EXIT_Task+0x218>
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	85 30       	cpi	r24, 0x05	; 5
     726:	e0 f4       	brcc	.+56     	; 0x760 <EXIT_Task+0x196>
     728:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <stepper+0xa>
     72c:	81 11       	cpse	r24, r1
     72e:	18 c0       	rjmp	.+48     	; 0x760 <EXIT_Task+0x196>
     730:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     734:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     738:	1d d1       	rcall	.+570    	; 0x974 <LL_GetTick>
     73a:	8c 01       	movw	r16, r24
     73c:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
     740:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
     744:	84 81       	ldd	r24, Z+4	; 0x04
     746:	95 81       	ldd	r25, Z+5	; 0x05
     748:	15 d1       	rcall	.+554    	; 0x974 <LL_GetTick>
     74a:	08 1b       	sub	r16, r24
     74c:	19 0b       	sbc	r17, r25
     74e:	0d 32       	cpi	r16, 0x2D	; 45
     750:	11 40       	sbci	r17, 0x01	; 1
     752:	30 f0       	brcs	.+12     	; 0x760 <EXIT_Task+0x196>
     754:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <STEPPER_SET>
     758:	eb e4       	ldi	r30, 0x4B	; 75
     75a:	f5 e0       	ldi	r31, 0x05	; 5
     75c:	82 87       	std	Z+10, r24	; 0x0a
     75e:	15 86       	std	Z+13, r1	; 0x0d
     760:	63 e0       	ldi	r22, 0x03	; 3
     762:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     766:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     76a:	f4 d0       	rcall	.+488    	; 0x954 <LL_UpdateStatus>
     76c:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_Timer>
     770:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     774:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <lastItemTick+0x1>
     778:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <lastItemTick>
     77c:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_Timer>
     780:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     784:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <g_TimerLast+0x1>
     788:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <g_TimerLast>
     78c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     790:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     794:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <N_1+0x1>
     798:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <N_1>
     79c:	95 d0       	rcall	.+298    	; 0x8c8 <LL_Next>
     79e:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <HEAD+0x1>
     7a2:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <HEAD>
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	c6 d1       	rcall	.+908    	; 0xb38 <PWM>
     7ac:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
     7b0:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
     7b4:	82 81       	ldd	r24, Z+2	; 0x02
     7b6:	93 81       	ldd	r25, Z+3	; 0x03
     7b8:	ad d0       	rcall	.+346    	; 0x914 <LL_GetClass>
     7ba:	e8 2f       	mov	r30, r24
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	e7 5f       	subi	r30, 0xF7	; 247
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	10 81       	ld	r17, Z
     7c4:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     7c8:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     7cc:	a3 d0       	rcall	.+326    	; 0x914 <LL_GetClass>
     7ce:	e8 2f       	mov	r30, r24
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	e7 5f       	subi	r30, 0xF7	; 247
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	80 81       	ld	r24, Z
     7d8:	61 2f       	mov	r22, r17
     7da:	3e d2       	rcall	.+1148   	; 0xc58 <STEPPER_SetRotation>
     7dc:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <_timer+0x23>
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <EXIT_Task+0x21e>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a8 d1       	rcall	.+848    	; 0xb38 <PWM>
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	08 95       	ret

000007f8 <BTN_Task>:
     7f8:	89 b1       	in	r24, 0x09	; 9
     7fa:	83 70       	andi	r24, 0x03	; 3
     7fc:	c1 f0       	breq	.+48     	; 0x82e <BTN_Task+0x36>
     7fe:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
     808:	8b 30       	cpi	r24, 0x0B	; 11
     80a:	98 f0       	brcs	.+38     	; 0x832 <BTN_Task+0x3a>
     80c:	89 b1       	in	r24, 0x09	; 9
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	81 f0       	breq	.+32     	; 0x832 <BTN_Task+0x3a>
     812:	89 b1       	in	r24, 0x09	; 9
     814:	83 70       	andi	r24, 0x03	; 3
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	19 f4       	brne	.+6      	; 0x820 <BTN_Task+0x28>
     81a:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <g_PauseRequest>
     81e:	08 95       	ret
     820:	89 b1       	in	r24, 0x09	; 9
     822:	83 70       	andi	r24, 0x03	; 3
     824:	82 30       	cpi	r24, 0x02	; 2
     826:	29 f4       	brne	.+10     	; 0x832 <BTN_Task+0x3a>
     828:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <_timer+0x2c>
     82c:	08 95       	ret
     82e:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <__data_end>
     832:	08 95       	ret

00000834 <WATCHDOG_Task>:
     834:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <g_WDTimeout>
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	18 f0       	brcs	.+6      	; 0x842 <WATCHDOG_Task+0xe>
     83c:	8e e2       	ldi	r24, 0x2E	; 46
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	df d3       	rcall	.+1982   	; 0x1000 <SYS_Pause>
     842:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <g_WDTimeout>
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <g_WDTimeout>
     84c:	08 95       	ret

0000084e <D_Blinky>:
     84e:	9b b1       	in	r25, 0x0b	; 11
     850:	80 ea       	ldi	r24, 0xA0	; 160
     852:	89 27       	eor	r24, r25
     854:	8b b9       	out	0x0b, r24	; 11
     856:	08 95       	ret

00000858 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     858:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <g_MotorOn>
     85c:	88 23       	and	r24, r24
     85e:	49 f0       	breq	.+18     	; 0x872 <ADD_Task+0x1a>
     860:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <g_Timer>
     864:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <g_Timer+0x1>
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <g_Timer+0x1>
     86e:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <g_Timer>
     872:	08 95       	ret

00000874 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	7c 01       	movw	r14, r24
     880:	16 2f       	mov	r17, r22
     882:	d4 2f       	mov	r29, r20
     884:	c2 2f       	mov	r28, r18
     886:	87 e0       	ldi	r24, 0x07	; 7
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	97 d7       	rcall	.+3886   	; 0x17ba <malloc>
     88c:	fc 01       	movw	r30, r24
     88e:	f1 82       	std	Z+1, r15	; 0x01
     890:	e0 82       	st	Z, r14
     892:	12 83       	std	Z+2, r17	; 0x02
     894:	d3 83       	std	Z+3, r29	; 0x03
     896:	c4 83       	std	Z+4, r28	; 0x04
     898:	16 82       	std	Z+6, r1	; 0x06
     89a:	15 82       	std	Z+5, r1	; 0x05
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	08 95       	ret

000008a8 <LL_ItemListInit>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
     8ae:	86 e0       	ldi	r24, 0x06	; 6
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	83 d7       	rcall	.+3846   	; 0x17ba <malloc>
     8b4:	fc 01       	movw	r30, r24
     8b6:	d1 83       	std	Z+1, r29	; 0x01
     8b8:	c0 83       	st	Z, r28
     8ba:	15 82       	std	Z+5, r1	; 0x05
     8bc:	14 82       	std	Z+4, r1	; 0x04
     8be:	13 82       	std	Z+3, r1	; 0x03
     8c0:	12 82       	std	Z+2, r1	; 0x02
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <LL_Next>:
     8c8:	fc 01       	movw	r30, r24
     8ca:	82 81       	ldd	r24, Z+2	; 0x02
     8cc:	93 81       	ldd	r25, Z+3	; 0x03
     8ce:	08 95       	ret

000008d0 <LL_AddBack>:
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	ec 01       	movw	r28, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <LL_AddBack+0xc>
     8da:	e9 01       	movw	r28, r18
     8dc:	2a 81       	ldd	r18, Y+2	; 0x02
     8de:	3b 81       	ldd	r19, Y+3	; 0x03
     8e0:	21 15       	cp	r18, r1
     8e2:	31 05       	cpc	r19, r1
     8e4:	d1 f7       	brne	.-12     	; 0x8da <LL_AddBack+0xa>
     8e6:	e0 df       	rcall	.-64     	; 0x8a8 <LL_ItemListInit>
     8e8:	9b 83       	std	Y+3, r25	; 0x03
     8ea:	8a 83       	std	Y+2, r24	; 0x02
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <LL_Size>:
     8f2:	dc 01       	movw	r26, r24
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	ed 91       	ld	r30, X+
     8f8:	fc 91       	ld	r31, X
     8fa:	13 97       	sbiw	r26, 0x03	; 3
     8fc:	30 97       	sbiw	r30, 0x00	; 0
     8fe:	41 f0       	breq	.+16     	; 0x910 <LL_Size+0x1e>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	8f 5f       	subi	r24, 0xFF	; 255
     904:	02 80       	ldd	r0, Z+2	; 0x02
     906:	f3 81       	ldd	r31, Z+3	; 0x03
     908:	e0 2d       	mov	r30, r0
     90a:	30 97       	sbiw	r30, 0x00	; 0
     90c:	d1 f7       	brne	.-12     	; 0x902 <LL_Size+0x10>
     90e:	08 95       	ret
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	08 95       	ret

00000914 <LL_GetClass>:
     914:	dc 01       	movw	r26, r24
     916:	ed 91       	ld	r30, X+
     918:	fc 91       	ld	r31, X
     91a:	83 81       	ldd	r24, Z+3	; 0x03
     91c:	08 95       	ret

0000091e <LL_GetRefl>:
     91e:	dc 01       	movw	r26, r24
     920:	ed 91       	ld	r30, X+
     922:	fc 91       	ld	r31, X
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	08 95       	ret

0000092a <LL_GetMag>:
     92a:	dc 01       	movw	r26, r24
     92c:	ed 91       	ld	r30, X+
     92e:	fc 91       	ld	r31, X
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	08 95       	ret

00000934 <LL_UpdateRefl>:
     934:	dc 01       	movw	r26, r24
     936:	ed 91       	ld	r30, X+
     938:	fc 91       	ld	r31, X
     93a:	71 83       	std	Z+1, r23	; 0x01
     93c:	60 83       	st	Z, r22
     93e:	08 95       	ret

00000940 <LL_UpdateMag>:
     940:	dc 01       	movw	r26, r24
     942:	ed 91       	ld	r30, X+
     944:	fc 91       	ld	r31, X
     946:	62 83       	std	Z+2, r22	; 0x02
     948:	08 95       	ret

0000094a <LL_UpdateClass>:
     94a:	dc 01       	movw	r26, r24
     94c:	ed 91       	ld	r30, X+
     94e:	fc 91       	ld	r31, X
     950:	63 83       	std	Z+3, r22	; 0x03
     952:	08 95       	ret

00000954 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     954:	dc 01       	movw	r26, r24
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	64 83       	std	Z+4, r22	; 0x04
     95c:	08 95       	ret

0000095e <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     95e:	dc 01       	movw	r26, r24
     960:	ed 91       	ld	r30, X+
     962:	fc 91       	ld	r31, X
}
     964:	84 81       	ldd	r24, Z+4	; 0x04
     966:	08 95       	ret

00000968 <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     968:	dc 01       	movw	r26, r24
     96a:	ed 91       	ld	r30, X+
     96c:	fc 91       	ld	r31, X
     96e:	76 83       	std	Z+6, r23	; 0x06
     970:	65 83       	std	Z+5, r22	; 0x05
     972:	08 95       	ret

00000974 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     974:	dc 01       	movw	r26, r24
     976:	ed 91       	ld	r30, X+
     978:	fc 91       	ld	r31, X
     97a:	85 81       	ldd	r24, Z+5	; 0x05
     97c:	96 81       	ldd	r25, Z+6	; 0x06
     97e:	08 95       	ret

00000980 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     984:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     986:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     988:	80 ef       	ldi	r24, 0xF0	; 240
     98a:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     98c:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     98e:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	08 95       	ret

00000996 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     996:	a0 d2       	rcall	.+1344   	; 0xed8 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     998:	89 b1       	in	r24, 0x09	; 9
     99a:	83 70       	andi	r24, 0x03	; 3
     99c:	e9 f7       	brne	.-6      	; 0x998 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     99e:	8c e3       	ldi	r24, 0x3C	; 60
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	fd d6       	rcall	.+3578   	; 0x179e <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9a4:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	45 ec       	ldi	r20, 0xC5	; 197
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	61 e0       	ldi	r22, 0x01	; 1
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	7a d6       	rcall	.+3316   	; 0x16ac <TIMER_Create>
		_timer[0].state = READY;
     9b8:	ce ef       	ldi	r28, 0xFE	; 254
     9ba:	d4 e0       	ldi	r29, 0x04	; 4
     9bc:	12 e0       	ldi	r17, 0x02	; 2
     9be:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	4f e0       	ldi	r20, 0x0F	; 15
     9c6:	52 e0       	ldi	r21, 0x02	; 2
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	6d d6       	rcall	.+3290   	; 0x16ac <TIMER_Create>
		_timer[1].state = BLOCKED;
     9d2:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	42 ea       	ldi	r20, 0xA2	; 162
     9da:	52 e0       	ldi	r21, 0x02	; 2
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	63 d6       	rcall	.+3270   	; 0x16ac <TIMER_Create>
		_timer[2].state = BLOCKED;
     9e6:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	45 ee       	ldi	r20, 0xE5	; 229
     9ee:	52 e0       	ldi	r21, 0x02	; 2
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	59 d6       	rcall	.+3250   	; 0x16ac <TIMER_Create>
		_timer[3].state = BLOCKED;
     9fa:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	4c e2       	ldi	r20, 0x2C	; 44
     a02:	54 e0       	ldi	r21, 0x04	; 4
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	4f d6       	rcall	.+3230   	; 0x16ac <TIMER_Create>
		_timer[4].state = BLOCKED;
     a0e:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	4c ef       	ldi	r20, 0xFC	; 252
     a16:	53 e0       	ldi	r21, 0x03	; 3
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	84 e6       	ldi	r24, 0x64	; 100
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	45 d6       	rcall	.+3210   	; 0x16ac <TIMER_Create>
		_timer[5].state = READY;
     a22:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	47 e2       	ldi	r20, 0x27	; 39
     a2a:	54 e0       	ldi	r21, 0x04	; 4
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 ed       	ldi	r24, 0xD0	; 208
     a32:	97 e0       	ldi	r25, 0x07	; 7
     a34:	3b d6       	rcall	.+3190   	; 0x16ac <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     a36:	1e af       	std	Y+62, r17	; 0x3e
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	4a e1       	ldi	r20, 0x1A	; 26
     a3e:	54 e0       	ldi	r21, 0x04	; 4
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     a46:	93 e1       	ldi	r25, 0x13	; 19
     a48:	31 d6       	rcall	.+3170   	; 0x16ac <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     a4a:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <_timer+0x47>
     a4e:	8f e4       	ldi	r24, 0x4F	; 79
		PWM(0x80);
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	a5 d6       	rcall	.+3402   	; 0x179e <UART_SendString>
     a54:	80 e8       	ldi	r24, 0x80	; 128
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     a56:	90 e0       	ldi	r25, 0x00	; 0
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Test("Pause Requested!\r\n");
     a58:	6f d0       	rcall	.+222    	; 0xb38 <PWM>
     a5a:	78 94       	sei
     a5c:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <g_PauseRequest>
     a60:	88 23       	and	r24, r24
     a62:	19 f0       	breq	.+6      	; 0xa6a <main+0xd4>
     a64:	81 e6       	ldi	r24, 0x61	; 97
		if(g_UnclassifiedRequest) SYS_Unclassified();
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	f1 d3       	rcall	.+2018   	; 0x124c <SYS_Test>
     a6a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <g_UnclassifiedRequest>
     a6e:	81 11       	cpse	r24, r1
		if(g_MissingRequest) SYS_Missing();
     a70:	d7 d4       	rcall	.+2478   	; 0x1420 <SYS_Unclassified>
     a72:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <g_MissingRequest>
     a76:	81 11       	cpse	r24, r1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     a78:	30 d5       	rcall	.+2656   	; 0x14da <SYS_Missing>
     a7a:	c0 91 d8 04 	lds	r28, 0x04D8	; 0x8004d8 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     a7e:	d0 91 d9 04 	lds	r29, 0x04D9	; 0x8004d9 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     a82:	20 97       	sbiw	r28, 0x00	; 0
     a84:	59 f3       	breq	.-42     	; 0xa5c <main+0xc6>
     a86:	20 97       	sbiw	r28, 0x00	; 0
     a88:	09 f4       	brne	.+2      	; 0xa8c <main+0xf6>
     a8a:	3d c0       	rjmp	.+122    	; 0xb06 <main+0x170>
     a8c:	ce 01       	movw	r24, r28
     a8e:	42 df       	rcall	.-380    	; 0x914 <LL_GetClass>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	09 f0       	breq	.+2      	; 0xa96 <main+0x100>
     a94:	38 c0       	rjmp	.+112    	; 0xb06 <main+0x170>
     a96:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     a98:	62 df       	rcall	.-316    	; 0x95e <LL_GetStatus>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	a1 f5       	brne	.+104    	; 0xb06 <main+0x170>
     a9e:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     aa0:	3e df       	rcall	.-388    	; 0x91e <LL_GetRefl>
     aa2:	8c 01       	movw	r16, r24
				
				if(magVal) // 
     aa4:	ce 01       	movw	r24, r28
     aa6:	41 df       	rcall	.-382    	; 0x92a <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     aa8:	88 23       	and	r24, r24
     aaa:	91 f0       	breq	.+36     	; 0xad0 <main+0x13a>
     aac:	c8 01       	movw	r24, r16
     aae:	0a 97       	sbiw	r24, 0x0a	; 10
     ab0:	8f 3b       	cpi	r24, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     ab2:	91 05       	cpc	r25, r1
     ab4:	20 f4       	brcc	.+8      	; 0xabe <main+0x128>
     ab6:	62 e0       	ldi	r22, 0x02	; 2
     ab8:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     aba:	47 df       	rcall	.-370    	; 0x94a <LL_UpdateClass>
     abc:	24 c0       	rjmp	.+72     	; 0xb06 <main+0x170>
     abe:	08 5c       	subi	r16, 0xC8	; 200
     ac0:	11 09       	sbc	r17, r1
     ac2:	0d 3b       	cpi	r16, 0xBD	; 189
					{
						LL_UpdateClass(temp, STEEL);
     ac4:	12 40       	sbci	r17, 0x02	; 2
     ac6:	f8 f4       	brcc	.+62     	; 0xb06 <main+0x170>
     ac8:	63 e0       	ldi	r22, 0x03	; 3
     aca:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     acc:	3e df       	rcall	.-388    	; 0x94a <LL_UpdateClass>
     ace:	1b c0       	rjmp	.+54     	; 0xb06 <main+0x170>
     ad0:	c8 01       	movw	r24, r16
     ad2:	89 58       	subi	r24, 0x89	; 137
     ad4:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     ad6:	0b 97       	sbiw	r24, 0x0b	; 11
     ad8:	20 f4       	brcc	.+8      	; 0xae2 <main+0x14c>
     ada:	60 e0       	ldi	r22, 0x00	; 0
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     adc:	ce 01       	movw	r24, r28
     ade:	35 df       	rcall	.-406    	; 0x94a <LL_UpdateClass>
     ae0:	12 c0       	rjmp	.+36     	; 0xb06 <main+0x170>
     ae2:	c8 01       	movw	r24, r16
     ae4:	80 52       	subi	r24, 0x20	; 32
     ae6:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     ae8:	8b 3a       	cpi	r24, 0xAB	; 171
     aea:	91 05       	cpc	r25, r1
     aec:	20 f4       	brcc	.+8      	; 0xaf6 <main+0x160>
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	ce 01       	movw	r24, r28
				}
				else
				{
					// Unknown non-magnetic object might be aluminum
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     af2:	2b df       	rcall	.-426    	; 0x94a <LL_UpdateClass>
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <main+0x170>
     af6:	0a 50       	subi	r16, 0x0A	; 10
     af8:	11 09       	sbc	r17, r1
     afa:	0f 3b       	cpi	r16, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     afc:	11 05       	cpc	r17, r1
     afe:	18 f4       	brcc	.+6      	; 0xb06 <main+0x170>
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	ce 01       	movw	r24, r28
					}
				}
			}
			temp = LL_Next(temp);
     b04:	22 df       	rcall	.-444    	; 0x94a <LL_UpdateClass>
     b06:	ce 01       	movw	r24, r28
     b08:	df de       	rcall	.-578    	; 0x8c8 <LL_Next>
     b0a:	ec 01       	movw	r28, r24
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     b0c:	89 2b       	or	r24, r25
     b0e:	09 f0       	breq	.+2      	; 0xb12 <main+0x17c>
     b10:	ba cf       	rjmp	.-140    	; 0xa86 <main+0xf0>
     b12:	a4 cf       	rjmp	.-184    	; 0xa5c <main+0xc6>

00000b14 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     b14:	1f 92       	push	r1
     b16:	0f 92       	push	r0
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	0f 92       	push	r0
     b1c:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     b1e:	8a ea       	ldi	r24, 0xAA	; 170
     b20:	88 b9       	out	0x08, r24	; 8
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <__vector_default+0xc>

00000b24 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     b24:	84 b5       	in	r24, 0x24	; 36
     b26:	83 68       	ori	r24, 0x83	; 131
     b28:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     b2a:	85 b5       	in	r24, 0x25	; 37
     b2c:	83 60       	ori	r24, 0x03	; 3
     b2e:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     b30:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     b34:	87 bd       	out	0x27, r24	; 39
     b36:	08 95       	ret

00000b38 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     b38:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     b3a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b3c:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     b3e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     b42:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     b44:	23 2b       	or	r18, r19
     b46:	31 f0       	breq	.+12     	; 0xb54 <PWM+0x1c>
		{
			g_MotorOn = 1;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <g_MotorOn>
			PORTB = ~0x0E;
     b4e:	81 ef       	ldi	r24, 0xF1	; 241
     b50:	85 b9       	out	0x05, r24	; 5
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     b54:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <g_MotorOn>
			PORTB = ~0x0F;
     b58:	80 ef       	ldi	r24, 0xF0	; 240
     b5a:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b5c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     b5e:	08 95       	ret

00000b60 <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     b60:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     b62:	eb e4       	ldi	r30, 0x4B	; 75
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	10 82       	st	Z, r1
	stepper.direction = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     b6c:	13 82       	std	Z+3, r1	; 0x03
     b6e:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     b70:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     b72:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     b74:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     b76:	11 86       	std	Z+9, r1	; 0x09
     b78:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     b7a:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     b7c:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     b7e:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     b80:	88 ec       	ldi	r24, 0xC8	; 200
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	96 83       	std	Z+6, r25	; 0x06
     b86:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     b88:	80 e3       	ldi	r24, 0x30	; 48
     b8a:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     b8c:	84 e9       	ldi	r24, 0x94	; 148
     b8e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     b92:	e0 eb       	ldi	r30, 0xB0	; 176
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     b9c:	e0 e7       	ldi	r30, 0x70	; 112
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	80 81       	ld	r24, Z
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     ba6:	e1 eb       	ldi	r30, 0xB1	; 177
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     bb0:	78 94       	sei
     bb2:	08 95       	ret

00000bb4 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	86 1b       	sub	r24, r22
     bb8:	91 09       	sbc	r25, r1
	if (steps >= 0)
     bba:	52 f0       	brmi	.+20     	; 0xbd0 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     bbc:	85 36       	cpi	r24, 0x65	; 101
     bbe:	91 05       	cpc	r25, r1
     bc0:	8c f0       	brlt	.+34     	; 0xbe4 <STEPPER_NumSteps+0x30>
     bc2:	24 e6       	ldi	r18, 0x64	; 100
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	a9 01       	movw	r20, r18
     bc8:	48 1b       	sub	r20, r24
     bca:	59 0b       	sbc	r21, r25
     bcc:	ca 01       	movw	r24, r20
     bce:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     bd0:	8c 39       	cpi	r24, 0x9C	; 156
     bd2:	5f ef       	ldi	r21, 0xFF	; 255
     bd4:	95 07       	cpc	r25, r21
     bd6:	34 f4       	brge	.+12     	; 0xbe4 <STEPPER_NumSteps+0x30>
     bd8:	2c e9       	ldi	r18, 0x9C	; 156
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	a9 01       	movw	r20, r18
     bde:	48 1b       	sub	r20, r24
     be0:	59 0b       	sbc	r21, r25
     be2:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     be4:	08 95       	ret

00000be6 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     bea:	cb e4       	ldi	r28, 0x4B	; 75
     bec:	d5 e0       	ldi	r29, 0x05	; 5
     bee:	6c 81       	ldd	r22, Y+4	; 0x04
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	df df       	rcall	.-66     	; 0xbb4 <STEPPER_NumSteps>
     bf6:	9e 83       	std	Y+6, r25	; 0x06
     bf8:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     bfa:	6a 81       	ldd	r22, Y+2	; 0x02
     bfc:	7b 81       	ldd	r23, Y+3	; 0x03
     bfe:	88 85       	ldd	r24, Y+8	; 0x08
     c00:	99 85       	ldd	r25, Y+9	; 0x09
     c02:	d8 df       	rcall	.-80     	; 0xbb4 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     c04:	2d 81       	ldd	r18, Y+5	; 0x05
     c06:	3e 81       	ldd	r19, Y+6	; 0x06
     c08:	33 23       	and	r19, r19
     c0a:	14 f4       	brge	.+4      	; 0xc10 <STEPPER_Rotate+0x2a>
     c0c:	28 e0       	ldi	r18, 0x08	; 8
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <STEPPER_Rotate+0x2c>
     c10:	24 e0       	ldi	r18, 0x04	; 4
     c12:	eb e4       	ldi	r30, 0x4B	; 75
     c14:	f5 e0       	ldi	r31, 0x05	; 5
     c16:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     c18:	45 81       	ldd	r20, Z+5	; 0x05
     c1a:	56 81       	ldd	r21, Z+6	; 0x06
     c1c:	84 9f       	mul	r24, r20
     c1e:	90 01       	movw	r18, r0
     c20:	85 9f       	mul	r24, r21
     c22:	30 0d       	add	r19, r0
     c24:	94 9f       	mul	r25, r20
     c26:	30 0d       	add	r19, r0
     c28:	11 24       	eor	r1, r1
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	12 16       	cp	r1, r18
     c2e:	13 06       	cpc	r1, r19
     c30:	0c f0       	brlt	.+2      	; 0xc34 <STEPPER_Rotate+0x4e>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	eb e4       	ldi	r30, 0x4B	; 75
     c36:	f5 e0       	ldi	r31, 0x05	; 5
     c38:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     c3a:	85 81       	ldd	r24, Z+5	; 0x05
     c3c:	96 81       	ldd	r25, Z+6	; 0x06
     c3e:	99 23       	and	r25, r25
     c40:	1c f4       	brge	.+6      	; 0xc48 <STEPPER_Rotate+0x62>
     c42:	91 95       	neg	r25
     c44:	81 95       	neg	r24
     c46:	91 09       	sbc	r25, r1
     c48:	eb e4       	ldi	r30, 0x4B	; 75
     c4a:	f5 e0       	ldi	r31, 0x05	; 5
     c4c:	96 83       	std	Z+6, r25	; 0x06
     c4e:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     c50:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     c58:	eb e4       	ldi	r30, 0x4B	; 75
     c5a:	f5 e0       	ldi	r31, 0x05	; 5
     c5c:	24 81       	ldd	r18, Z+4	; 0x04
     c5e:	42 81       	ldd	r20, Z+2	; 0x02
     c60:	53 81       	ldd	r21, Z+3	; 0x03
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	24 17       	cp	r18, r20
     c66:	35 07       	cpc	r19, r21
     c68:	29 f0       	breq	.+10     	; 0xc74 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     c6e:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     c70:	60 8b       	std	Z+16, r22	; 0x10
     c72:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	eb e4       	ldi	r30, 0x4B	; 75
     c7a:	f5 e0       	ldi	r31, 0x05	; 5
     c7c:	33 83       	std	Z+3, r19	; 0x03
     c7e:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	71 87       	std	Z+9, r23	; 0x09
     c84:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     c86:	94 81       	ldd	r25, Z+4	; 0x04
     c88:	89 13       	cpse	r24, r25
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <STEPPER_SetRotation+0x3c>
     c8c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <STEPPER_SAME>
     c90:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <stepper+0xa>
		STEPPER_Rotate();
     c94:	a8 cf       	rjmp	.-176    	; 0xbe6 <STEPPER_Rotate>
     c96:	08 95       	ret

00000c98 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	0b b6       	in	r0, 0x3b	; 59
     ca4:	0f 92       	push	r0
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <__vector_13+0x2c>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <__vector_13+0x2e>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     cca:	86 e3       	ldi	r24, 0x36	; 54
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	9e e2       	ldi	r25, 0x2E	; 46
     cd4:	ad e2       	ldi	r26, 0x2D	; 45
     cd6:	b5 e3       	ldi	r27, 0x35	; 53
     cd8:	89 83       	std	Y+1, r24	; 0x01
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	ab 83       	std	Y+3, r26	; 0x03
     cde:	bc 83       	std	Y+4, r27	; 0x04
	
	if(stepper.same) stepper.same--;
     ce0:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <stepper+0xa>
     ce4:	88 23       	and	r24, r24
     ce6:	29 f0       	breq	.+10     	; 0xcf2 <__vector_13+0x5a>
     ce8:	eb e4       	ldi	r30, 0x4B	; 75
     cea:	f5 e0       	ldi	r31, 0x05	; 5
     cec:	82 85       	ldd	r24, Z+10	; 0x0a
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	82 87       	std	Z+10, r24	; 0x0a
	
	if (stepper._currentStep == stepper._targetStep)
     cf2:	eb e4       	ldi	r30, 0x4B	; 75
     cf4:	f5 e0       	ldi	r31, 0x05	; 5
     cf6:	87 81       	ldd	r24, Z+7	; 0x07
     cf8:	25 81       	ldd	r18, Z+5	; 0x05
     cfa:	36 81       	ldd	r19, Z+6	; 0x06
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	82 17       	cp	r24, r18
     d00:	93 07       	cpc	r25, r19
     d02:	49 f5       	brne	.+82     	; 0xd56 <__vector_13+0xbe>
	{

		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     d0a:	86 85       	ldd	r24, Z+14	; 0x0e
     d0c:	88 23       	and	r24, r24
     d0e:	21 f0       	breq	.+8      	; 0xd18 <__vector_13+0x80>
		{
			stepper.early = 0;
     d10:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     d12:	60 89       	ldd	r22, Z+16	; 0x10
     d14:	87 85       	ldd	r24, Z+15	; 0x0f
     d16:	a0 df       	rcall	.-192    	; 0xc58 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     d18:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <stepper+0xb>
     d1c:	88 23       	and	r24, r24
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__vector_13+0x8e>
     d20:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <stepper+0xd>
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <__vector_13+0x90>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	eb e4       	ldi	r30, 0x4B	; 75
     d2a:	f5 e0       	ldi	r31, 0x05	; 5
     d2c:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     d2e:	a5 85       	ldd	r26, Z+13	; 0x0d
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	a9 5e       	subi	r26, 0xE9	; 233
     d34:	be 4f       	sbci	r27, 0xFE	; 254
     d36:	8c 91       	ld	r24, X
     d38:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		stepper._itemCount++;
     d3c:	81 89       	ldd	r24, Z+17	; 0x11
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	81 8b       	std	Z+17, r24	; 0x11
		
		//SET MAX ACCELL
		if(((stepper._itemCount%8)>=0)&&(MAX_ACCELL<8) ){
     d42:	81 89       	ldd	r24, Z+17	; 0x11
     d44:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MAX_ACCELL>
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	28 f4       	brcc	.+10     	; 0xd56 <__vector_13+0xbe>
			MAX_ACCELL++;
     d4c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MAX_ACCELL>
     d50:	8f 5f       	subi	r24, 0xFF	; 255
     d52:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <MAX_ACCELL>
		}
		
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     d56:	eb e4       	ldi	r30, 0x4B	; 75
     d58:	f5 e0       	ldi	r31, 0x05	; 5
     d5a:	87 81       	ldd	r24, Z+7	; 0x07
     d5c:	25 81       	ldd	r18, Z+5	; 0x05
     d5e:	36 81       	ldd	r19, Z+6	; 0x06
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	82 17       	cp	r24, r18
     d64:	93 07       	cpc	r25, r19
     d66:	0c f0       	brlt	.+2      	; 0xd6a <__vector_13+0xd2>
     d68:	74 c0       	rjmp	.+232    	; 0xe52 <__vector_13+0x1ba>
     d6a:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <stepper+0xa>
     d6e:	81 11       	cpse	r24, r1
     d70:	70 c0       	rjmp	.+224    	; 0xe52 <__vector_13+0x1ba>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     d72:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <stepper+0x1>
     d76:	84 30       	cpi	r24, 0x04	; 4
     d78:	51 f4       	brne	.+20     	; 0xd8e <__vector_13+0xf6>
     d7a:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <stepper>
     d7e:	e1 e0       	ldi	r30, 0x01	; 1
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	ec 0f       	add	r30, r28
     d84:	fd 1f       	adc	r31, r29
     d86:	e8 0f       	add	r30, r24
     d88:	f1 1d       	adc	r31, r1
     d8a:	80 81       	ld	r24, Z
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <__vector_13+0x110>
     d8e:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <stepper>
     d92:	e3 e0       	ldi	r30, 0x03	; 3
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	e8 1b       	sub	r30, r24
     d98:	f1 09       	sbc	r31, r1
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	8c 0f       	add	r24, r28
     da0:	9d 1f       	adc	r25, r29
     da2:	e8 0f       	add	r30, r24
     da4:	f9 1f       	adc	r31, r25
     da6:	80 81       	ld	r24, Z
     da8:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     daa:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <stepper>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	21 f0       	breq	.+8      	; 0xdba <__vector_13+0x122>
     db2:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <stepper>
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <__vector_13+0x124>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	eb e4       	ldi	r30, 0x4B	; 75
     dbe:	f5 e0       	ldi	r31, 0x05	; 5
     dc0:	80 83       	st	Z, r24

		stepper._currentStep++;
     dc2:	87 81       	ldd	r24, Z+7	; 0x07
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
     dc6:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 6) && (accell[stepper._accellStep] < 0x6E))
     dc8:	83 85       	ldd	r24, Z+11	; 0x0b
     dca:	81 11       	cpse	r24, r1
     dcc:	20 c0       	rjmp	.+64     	; 0xe0e <__vector_13+0x176>
     dce:	85 81       	ldd	r24, Z+5	; 0x05
     dd0:	96 81       	ldd	r25, Z+6	; 0x06
     dd2:	27 81       	ldd	r18, Z+7	; 0x07
     dd4:	82 1b       	sub	r24, r18
     dd6:	91 09       	sbc	r25, r1
     dd8:	07 97       	sbiw	r24, 0x07	; 7
     dda:	cc f4       	brge	.+50     	; 0xe0e <__vector_13+0x176>
     ddc:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <stepper+0xd>
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	e9 5e       	subi	r30, 0xE9	; 233
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	80 81       	ld	r24, Z
     de8:	8e 36       	cpi	r24, 0x6E	; 110
     dea:	88 f4       	brcc	.+34     	; 0xe0e <__vector_13+0x176>
		{
			stepper._accellStep = decell[stepper._targetStep - stepper._currentStep - 1];
     dec:	ab e4       	ldi	r26, 0x4B	; 75
     dee:	b5 e0       	ldi	r27, 0x05	; 5
     df0:	15 96       	adiw	r26, 0x05	; 5
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	16 97       	sbiw	r26, 0x06	; 6
     df8:	17 96       	adiw	r26, 0x07	; 7
     dfa:	8c 91       	ld	r24, X
     dfc:	17 97       	sbiw	r26, 0x07	; 7
     dfe:	e8 1b       	sub	r30, r24
     e00:	f1 09       	sbc	r31, r1
     e02:	e0 5f       	subi	r30, 0xF0	; 240
     e04:	fe 4f       	sbci	r31, 0xFE	; 254
     e06:	80 81       	ld	r24, Z
     e08:	1d 96       	adiw	r26, 0x0d	; 13
     e0a:	8c 93       	st	X, r24
     e0c:	1a c0       	rjmp	.+52     	; 0xe42 <__vector_13+0x1aa>
		}
		else if ((stepper._currentStep > 10) && (accell[stepper._accellStep] > accell[23-MAX_ACCELL]))
     e0e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <stepper+0x7>
     e12:	8b 30       	cpi	r24, 0x0B	; 11
     e14:	b0 f0       	brcs	.+44     	; 0xe42 <__vector_13+0x1aa>
     e16:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <stepper+0xd>
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	e9 5e       	subi	r30, 0xE9	; 233
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	90 81       	ld	r25, Z
     e22:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <MAX_ACCELL>
     e26:	e7 e1       	ldi	r30, 0x17	; 23
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	e8 1b       	sub	r30, r24
     e2c:	f1 09       	sbc	r31, r1
     e2e:	e9 5e       	subi	r30, 0xE9	; 233
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	80 81       	ld	r24, Z
     e34:	89 17       	cp	r24, r25
     e36:	28 f4       	brcc	.+10     	; 0xe42 <__vector_13+0x1aa>
		{
			stepper._accellStep++;
     e38:	eb e4       	ldi	r30, 0x4B	; 75
     e3a:	f5 e0       	ldi	r31, 0x05	; 5
     e3c:	85 85       	ldd	r24, Z+13	; 0x0d
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     e42:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <stepper+0xd>
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	e9 5e       	subi	r30, 0xE9	; 233
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 81       	ld	r24, Z
     e4e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     e52:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <stepper+0xc>
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	31 f1       	breq	.+76     	; 0xea6 <__vector_13+0x20e>
	{
		if ((PINE & 0x08) == 0)
     e5a:	63 99       	sbic	0x0c, 3	; 12
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <__vector_13+0x1ce>
		{
			stepper._isInitiated = STEPPER_OFFSET;
     e5e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <STEPPER_OFFSET>
     e62:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     e66:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <stepper+0xc>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	28 f0       	brcs	.+10     	; 0xe78 <__vector_13+0x1e0>
     e6e:	eb e4       	ldi	r30, 0x4B	; 75
     e70:	f5 e0       	ldi	r31, 0x05	; 5
     e72:	84 85       	ldd	r24, Z+12	; 0x0c
     e74:	81 50       	subi	r24, 0x01	; 1
     e76:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     e78:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <stepper+0xc>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	99 f4       	brne	.+38     	; 0xea6 <__vector_13+0x20e>
		{
			stepper._isInitiated = 1;
     e80:	eb e4       	ldi	r30, 0x4B	; 75
     e82:	f5 e0       	ldi	r31, 0x05	; 5
     e84:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     e86:	10 82       	st	Z, r1
			stepper.direction = 1;
     e88:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     e8a:	13 82       	std	Z+3, r1	; 0x03
     e8c:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     e8e:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     e90:	16 82       	std	Z+6, r1	; 0x06
     e92:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     e94:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     e96:	11 86       	std	Z+9, r1	; 0x09
     e98:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     e9a:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     e9c:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     e9e:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     ea0:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     ea2:	17 86       	std	Z+15, r1	; 0x0f
			stepper._itemCount = 0;
     ea4:	11 8a       	std	Z+17, r1	; 0x11
		}
	}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	bf 91       	pop	r27
     eb8:	af 91       	pop	r26
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	7f 91       	pop	r23
     ec0:	6f 91       	pop	r22
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0b be       	out	0x3b, r0	; 59
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <SYS_Init>:
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
	//SYS_Calibrate("Get Calibration Stats:");
}
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	f8 94       	cli
     ee0:	e1 e6       	ldi	r30, 0x61	; 97
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 e8       	ldi	r24, 0x80	; 128
     ee6:	80 83       	st	Z, r24
     ee8:	10 82       	st	Z, r1
     eea:	41 d4       	rcall	.+2178   	; 0x176e <UART_Init>
     eec:	49 dd       	rcall	.-1390   	; 0x980 <GPIO_Init>
     eee:	c4 d3       	rcall	.+1928   	; 0x1678 <TIMER_Init>
     ef0:	19 de       	rcall	.-974    	; 0xb24 <PWM_Init>
     ef2:	f1 d8       	rcall	.-3614   	; 0xd6 <ADC_Init>
     ef4:	35 de       	rcall	.-918    	; 0xb60 <STEPPER_Init>
     ef6:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <g_ADCCount+0x1>
     efa:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <g_ADCCount>
     efe:	84 e1       	ldi	r24, 0x14	; 20
     f00:	ef ed       	ldi	r30, 0xDF	; 223
     f02:	f4 e0       	ldi	r31, 0x04	; 4
     f04:	df 01       	movw	r26, r30
     f06:	1d 92       	st	X+, r1
     f08:	8a 95       	dec	r24
     f0a:	e9 f7       	brne	.-6      	; 0xf06 <SYS_Init+0x2e>
     f0c:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_PauseRequest>
     f10:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <g_WDTimeout>
     f14:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <g_Timer+0x1>
     f18:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <g_Timer>
     f1c:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_MissingRequest>
     f20:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <g_UnclassifiedRequest>
     f24:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <g_TimerLast+0x1>
     f28:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <g_TimerLast>
     f2c:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <HEAD+0x1>
     f30:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <HEAD>
     f34:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <TAIL+0x1>
     f38:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <TAIL>
     f3c:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <STAGE1+0x1>
     f40:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <STAGE1>
     f44:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <STAGE2+0x1>
     f48:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <STAGE2>
     f4c:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <FRONT+0x1>
     f50:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <FRONT>
     f54:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <N_1+0x1>
     f58:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <N_1>
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	44 e0       	ldi	r20, 0x04	; 4
     f60:	6f ef       	ldi	r22, 0xFF	; 255
     f62:	89 ee       	ldi	r24, 0xE9	; 233
     f64:	9d ef       	ldi	r25, 0xFD	; 253
     f66:	86 dc       	rcall	.-1780   	; 0x874 <LL_ItemInit>
     f68:	9f dc       	rcall	.-1730   	; 0x8a8 <LL_ItemListInit>
     f6a:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <HEAD+0x1>
     f6e:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <HEAD>
     f72:	90 93 db 04 	sts	0x04DB, r25	; 0x8004db <FRONT+0x1>
     f76:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <FRONT>
     f7a:	ca ef       	ldi	r28, 0xFA	; 250
     f7c:	08 ee       	ldi	r16, 0xE8	; 232
     f7e:	1d ef       	ldi	r17, 0xFD	; 253
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	44 e0       	ldi	r20, 0x04	; 4
     f84:	6c 2f       	mov	r22, r28
     f86:	c8 01       	movw	r24, r16
     f88:	75 dc       	rcall	.-1814   	; 0x874 <LL_ItemInit>
     f8a:	bc 01       	movw	r22, r24
     f8c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     f90:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     f94:	9d dc       	rcall	.-1734   	; 0x8d0 <LL_AddBack>
     f96:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <TAIL+0x1>
     f9a:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <TAIL>
     f9e:	01 50       	subi	r16, 0x01	; 1
     fa0:	11 09       	sbc	r17, r1
     fa2:	c1 50       	subi	r28, 0x01	; 1
     fa4:	cb 3c       	cpi	r28, 0xCB	; 203
     fa6:	61 f7       	brne	.-40     	; 0xf80 <SYS_Init+0xa8>
     fa8:	05 e0       	ldi	r16, 0x05	; 5
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	45 e0       	ldi	r20, 0x05	; 5
     fb0:	6a ef       	ldi	r22, 0xFA	; 250
     fb2:	88 ee       	ldi	r24, 0xE8	; 232
     fb4:	9d ef       	ldi	r25, 0xFD	; 253
     fb6:	5e dc       	rcall	.-1860   	; 0x874 <LL_ItemInit>
     fb8:	bc 01       	movw	r22, r24
     fba:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
     fbe:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
     fc2:	86 dc       	rcall	.-1780   	; 0x8d0 <LL_AddBack>
     fc4:	01 50       	subi	r16, 0x01	; 1
     fc6:	11 09       	sbc	r17, r1
     fc8:	89 f7       	brne	.-30     	; 0xfac <SYS_Init+0xd4>
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	44 e0       	ldi	r20, 0x04	; 4
     fce:	62 ed       	ldi	r22, 0xD2	; 210
     fd0:	88 e9       	ldi	r24, 0x98	; 152
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	4f dc       	rcall	.-1890   	; 0x874 <LL_ItemInit>
     fd6:	68 dc       	rcall	.-1840   	; 0x8a8 <LL_ItemListInit>
     fd8:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
     fdc:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
     fe0:	95 83       	std	Z+5, r25	; 0x05
     fe2:	84 83       	std	Z+4, r24	; 0x04
     fe4:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <N_1+0x1>
     fe8:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <N_1>
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	bb dc       	rcall	.-1674   	; 0x968 <LL_UpdateTick>
     ff2:	80 e8       	ldi	r24, 0x80	; 128
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	d3 d3       	rcall	.+1958   	; 0x179e <UART_SendString>
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <SYS_Pause>:
    1000:	3f 92       	push	r3
    1002:	4f 92       	push	r4
    1004:	5f 92       	push	r5
    1006:	6f 92       	push	r6
    1008:	7f 92       	push	r7
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	ca 5f       	subi	r28, 0xFA	; 250
    1028:	d1 09       	sbc	r29, r1
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	f8 2e       	mov	r15, r24
    1036:	e9 2e       	mov	r14, r25
    1038:	f8 94       	cli
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	7c dd       	rcall	.-1288   	; 0xb38 <PWM>
    1040:	00 91 da 04 	lds	r16, 0x04DA	; 0x8004da <FRONT>
    1044:	10 91 db 04 	lds	r17, 0x04DB	; 0x8004db <FRONT+0x1>
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	86 e9       	ldi	r24, 0x96	; 150
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	7c 01       	movw	r14, r24
    105a:	9f 93       	push	r25
    105c:	8f 93       	push	r24
    105e:	ce d4       	rcall	.+2460   	; 0x19fc <sprintf>
    1060:	c7 01       	movw	r24, r14
    1062:	9d d3       	rcall	.+1850   	; 0x179e <UART_SendString>
    1064:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
    1068:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
    106c:	83 dc       	rcall	.-1786   	; 0x974 <LL_GetTick>
    106e:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <g_Timer>
    1072:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <g_Timer+0x1>
    1076:	9f 93       	push	r25
    1078:	8f 93       	push	r24
    107a:	3f 93       	push	r19
    107c:	2f 93       	push	r18
    107e:	81 eb       	ldi	r24, 0xB1	; 177
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	9f 93       	push	r25
    1084:	8f 93       	push	r24
    1086:	ff 92       	push	r15
    1088:	ef 92       	push	r14
    108a:	b8 d4       	rcall	.+2416   	; 0x19fc <sprintf>
    108c:	c7 01       	movw	r24, r14
    108e:	87 d3       	rcall	.+1806   	; 0x179e <UART_SendString>
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	e1 2c       	mov	r14, r1
    109c:	f1 2c       	mov	r15, r1
    109e:	0f 2e       	mov	r0, r31
    10a0:	f0 ed       	ldi	r31, 0xD0	; 208
    10a2:	af 2e       	mov	r10, r31
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	bf 2e       	mov	r11, r31
    10a8:	f0 2d       	mov	r31, r0
    10aa:	6e 01       	movw	r12, r28
    10ac:	f7 e9       	ldi	r31, 0x97	; 151
    10ae:	cf 0e       	add	r12, r31
    10b0:	d1 1c       	adc	r13, r1
    10b2:	2d c0       	rjmp	.+90     	; 0x110e <SYS_Pause+0x10e>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	e8 1a       	sub	r14, r24
    10b8:	f8 0a       	sbc	r15, r24
    10ba:	c8 01       	movw	r24, r16
    10bc:	5b dc       	rcall	.-1866   	; 0x974 <LL_GetTick>
    10be:	68 2e       	mov	r6, r24
    10c0:	59 2e       	mov	r5, r25
    10c2:	c8 01       	movw	r24, r16
    10c4:	4c dc       	rcall	.-1896   	; 0x95e <LL_GetStatus>
    10c6:	78 2e       	mov	r7, r24
    10c8:	c8 01       	movw	r24, r16
    10ca:	24 dc       	rcall	.-1976   	; 0x914 <LL_GetClass>
    10cc:	88 2e       	mov	r8, r24
    10ce:	c8 01       	movw	r24, r16
    10d0:	2c dc       	rcall	.-1960   	; 0x92a <LL_GetMag>
    10d2:	98 2e       	mov	r9, r24
    10d4:	c8 01       	movw	r24, r16
    10d6:	23 dc       	rcall	.-1978   	; 0x91e <LL_GetRefl>
    10d8:	5f 92       	push	r5
    10da:	6f 92       	push	r6
    10dc:	1f 92       	push	r1
    10de:	7f 92       	push	r7
    10e0:	1f 92       	push	r1
    10e2:	8f 92       	push	r8
    10e4:	1f 92       	push	r1
    10e6:	9f 92       	push	r9
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	ff 92       	push	r15
    10ee:	ef 92       	push	r14
    10f0:	bf 92       	push	r11
    10f2:	af 92       	push	r10
    10f4:	df 92       	push	r13
    10f6:	cf 92       	push	r12
    10f8:	81 d4       	rcall	.+2306   	; 0x19fc <sprintf>
    10fa:	c6 01       	movw	r24, r12
    10fc:	50 d3       	rcall	.+1696   	; 0x179e <UART_SendString>
    10fe:	c8 01       	movw	r24, r16
    1100:	e3 db       	rcall	.-2106   	; 0x8c8 <LL_Next>
    1102:	8c 01       	movw	r16, r24
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	c8 01       	movw	r24, r16
    1110:	01 dc       	rcall	.-2046   	; 0x914 <LL_GetClass>
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	79 f6       	brne	.-98     	; 0x10b4 <SYS_Pause+0xb4>
    1116:	0f 2e       	mov	r0, r31
    1118:	fe ef       	ldi	r31, 0xFE	; 254
    111a:	cf 2e       	mov	r12, r31
    111c:	f4 e0       	ldi	r31, 0x04	; 4
    111e:	df 2e       	mov	r13, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	0f 2e       	mov	r0, r31
    1128:	fe e0       	ldi	r31, 0x0E	; 14
    112a:	af 2e       	mov	r10, r31
    112c:	f2 e0       	ldi	r31, 0x02	; 2
    112e:	bf 2e       	mov	r11, r31
    1130:	f0 2d       	mov	r31, r0
    1132:	7e 01       	movw	r14, r28
    1134:	f7 e9       	ldi	r31, 0x97	; 151
    1136:	ef 0e       	add	r14, r31
    1138:	f1 1c       	adc	r15, r1
    113a:	f6 01       	movw	r30, r12
    113c:	80 85       	ldd	r24, Z+8	; 0x08
    113e:	1f 92       	push	r1
    1140:	8f 93       	push	r24
    1142:	1f 93       	push	r17
    1144:	0f 93       	push	r16
    1146:	bf 92       	push	r11
    1148:	af 92       	push	r10
    114a:	ff 92       	push	r15
    114c:	ef 92       	push	r14
    114e:	56 d4       	rcall	.+2220   	; 0x19fc <sprintf>
    1150:	c7 01       	movw	r24, r14
    1152:	25 d3       	rcall	.+1610   	; 0x179e <UART_SendString>
    1154:	0f 5f       	subi	r16, 0xFF	; 255
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	f9 e0       	ldi	r31, 0x09	; 9
    115a:	cf 0e       	add	r12, r31
    115c:	d1 1c       	adc	r13, r1
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	07 30       	cpi	r16, 0x07	; 7
    116a:	11 05       	cpc	r17, r1
    116c:	31 f7       	brne	.-52     	; 0x113a <SYS_Pause+0x13a>
    116e:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <STAGE2>
    1172:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <STAGE2+0x1>
    1176:	d3 db       	rcall	.-2138   	; 0x91e <LL_GetRefl>
    1178:	48 2e       	mov	r4, r24
    117a:	39 2e       	mov	r3, r25
    117c:	60 90 48 05 	lds	r6, 0x0548	; 0x800548 <STAGE2>
    1180:	50 90 49 05 	lds	r5, 0x0549	; 0x800549 <STAGE2+0x1>
    1184:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <STAGE1>
    1188:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <STAGE1+0x1>
    118c:	ce db       	rcall	.-2148   	; 0x92a <LL_GetMag>
    118e:	78 2e       	mov	r7, r24
    1190:	90 90 fa 04 	lds	r9, 0x04FA	; 0x8004fa <STAGE1>
    1194:	80 90 fb 04 	lds	r8, 0x04FB	; 0x8004fb <STAGE1+0x1>
    1198:	00 91 dd 04 	lds	r16, 0x04DD	; 0x8004dd <TAIL>
    119c:	10 91 de 04 	lds	r17, 0x04DE	; 0x8004de <TAIL+0x1>
    11a0:	f8 01       	movw	r30, r16
    11a2:	b2 80       	ldd	r11, Z+2	; 0x02
    11a4:	a3 80       	ldd	r10, Z+3	; 0x03
    11a6:	d0 90 da 04 	lds	r13, 0x04DA	; 0x8004da <FRONT>
    11aa:	c0 90 db 04 	lds	r12, 0x04DB	; 0x8004db <FRONT+0x1>
    11ae:	f0 90 d8 04 	lds	r15, 0x04D8	; 0x8004d8 <HEAD>
    11b2:	e0 90 d9 04 	lds	r14, 0x04D9	; 0x8004d9 <HEAD+0x1>
    11b6:	8f 2d       	mov	r24, r15
    11b8:	9e 2d       	mov	r25, r14
    11ba:	9b db       	rcall	.-2250   	; 0x8f2 <LL_Size>
    11bc:	3f 92       	push	r3
    11be:	4f 92       	push	r4
    11c0:	5f 92       	push	r5
    11c2:	6f 92       	push	r6
    11c4:	1f 92       	push	r1
    11c6:	7f 92       	push	r7
    11c8:	8f 92       	push	r8
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	1f 93       	push	r17
    11d6:	0f 93       	push	r16
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	1f 92       	push	r1
    11de:	8f 93       	push	r24
    11e0:	85 e2       	ldi	r24, 0x25	; 37
    11e2:	92 e0       	ldi	r25, 0x02	; 2
    11e4:	9f 93       	push	r25
    11e6:	8f 93       	push	r24
    11e8:	8e 01       	movw	r16, r28
    11ea:	0b 59       	subi	r16, 0x9B	; 155
    11ec:	1f 4f       	sbci	r17, 0xFF	; 255
    11ee:	1f 93       	push	r17
    11f0:	0f 93       	push	r16
    11f2:	04 d4       	rcall	.+2056   	; 0x19fc <sprintf>
    11f4:	c8 01       	movw	r24, r16
    11f6:	d3 d2       	rcall	.+1446   	; 0x179e <UART_SendString>
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	89 b1       	in	r24, 0x09	; 9
    1204:	83 70       	andi	r24, 0x03	; 3
    1206:	e9 f7       	brne	.-6      	; 0x1202 <SYS_Pause+0x202>
    1208:	8c e3       	ldi	r24, 0x3C	; 60
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	c8 d2       	rcall	.+1424   	; 0x179e <UART_SendString>
    120e:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_PauseRequest>
    1212:	80 e8       	ldi	r24, 0x80	; 128
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	90 dc       	rcall	.-1760   	; 0xb38 <PWM>
    1218:	78 94       	sei
    121a:	c6 50       	subi	r28, 0x06	; 6
    121c:	df 4f       	sbci	r29, 0xFF	; 255
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	7f 90       	pop	r7
    1242:	6f 90       	pop	r6
    1244:	5f 90       	pop	r5
    1246:	4f 90       	pop	r4
    1248:	3f 90       	pop	r3
    124a:	08 95       	ret

0000124c <SYS_Test>:
void SYS_Test(char str[20])
{
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	ce 5c       	subi	r28, 0xCE	; 206
    1268:	d1 09       	sbc	r29, r1
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	7c 01       	movw	r14, r24
	//
	cli();
    1276:	f8 94       	cli
	PWM(0);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	5d dc       	rcall	.-1862   	; 0xb38 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
    127e:	00 91 da 04 	lds	r16, 0x04DA	; 0x8004da <FRONT>
    1282:	10 91 db 04 	lds	r17, 0x04DB	; 0x8004db <FRONT+0x1>
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1286:	fe 01       	movw	r30, r28
    1288:	eb 59       	subi	r30, 0x9B	; 155
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	86 e0       	ldi	r24, 0x06	; 6
    128e:	df 01       	movw	r26, r30
    1290:	1d 92       	st	X+, r1
    1292:	8a 95       	dec	r24
    1294:	e9 f7       	brne	.-6      	; 0x1290 <SYS_Test+0x44>
	uint8_t total = 0;

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
    1296:	c7 01       	movw	r24, r14
    1298:	82 d2       	rcall	.+1284   	; 0x179e <UART_SendString>
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    129a:	f1 2c       	mov	r15, r1

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <SYS_Test+0x70>
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
    129e:	f3 94       	inc	r15
    12a0:	c8 01       	movw	r24, r16
    12a2:	38 db       	rcall	.-2448   	; 0x914 <LL_GetClass>
    12a4:	e5 e6       	ldi	r30, 0x65	; 101
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	ec 0f       	add	r30, r28
    12aa:	fd 1f       	adc	r31, r29
    12ac:	e8 0f       	add	r30, r24
    12ae:	f1 1d       	adc	r31, r1
    12b0:	80 81       	ld	r24, Z
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    12b4:	80 83       	st	Z, r24
    12b6:	c8 01       	movw	r24, r16
    12b8:	07 db       	rcall	.-2546   	; 0x8c8 <LL_Next>

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    12ba:	8c 01       	movw	r16, r24
    12bc:	c8 01       	movw	r24, r16
    12be:	4f db       	rcall	.-2402   	; 0x95e <LL_GetStatus>
    12c0:	83 30       	cpi	r24, 0x03	; 3
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
		temp = LL_Next(temp);
	}
	UART_SendString("\r\nSorted items...\r\n\r\n");
    12c2:	69 f3       	breq	.-38     	; 0x129e <SYS_Test+0x52>
    12c4:	8f e2       	ldi	r24, 0x2F	; 47
    12c6:	93 e0       	ldi	r25, 0x03	; 3
    12c8:	6a d2       	rcall	.+1236   	; 0x179e <UART_SendString>
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    12ca:	aa 96       	adiw	r28, 0x2a	; 42
    12cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    12ce:	aa 97       	sbiw	r28, 0x2a	; 42
    12d0:	1f 92       	push	r1
    12d2:	8f 93       	push	r24
    12d4:	a8 96       	adiw	r28, 0x28	; 40
    12d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    12d8:	a8 97       	sbiw	r28, 0x28	; 40
    12da:	1f 92       	push	r1
    12dc:	8f 93       	push	r24
    12de:	a9 96       	adiw	r28, 0x29	; 41
    12e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    12e2:	a9 97       	sbiw	r28, 0x29	; 41
    12e4:	1f 92       	push	r1
    12e6:	8f 93       	push	r24
    12e8:	a6 96       	adiw	r28, 0x26	; 38
    12ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    12ec:	a6 97       	sbiw	r28, 0x26	; 38
    12ee:	1f 92       	push	r1
    12f0:	8f 93       	push	r24
    12f2:	a7 96       	adiw	r28, 0x27	; 39
    12f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    12f6:	a7 97       	sbiw	r28, 0x27	; 39
    12f8:	1f 92       	push	r1
    12fa:	8f 93       	push	r24
    12fc:	1f 92       	push	r1
    12fe:	ff 92       	push	r15
    1300:	80 ed       	ldi	r24, 0xD0	; 208
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	9f 93       	push	r25
    1306:	8f 93       	push	r24
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	7c 01       	movw	r14, r24
    130e:	9f 93       	push	r25
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
    1310:	8f 93       	push	r24
    1312:	74 d3       	rcall	.+1768   	; 0x19fc <sprintf>
    1314:	c7 01       	movw	r24, r14
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
    1316:	43 d2       	rcall	.+1158   	; 0x179e <UART_SendString>
    1318:	85 e4       	ldi	r24, 0x45	; 69
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	40 d2       	rcall	.+1152   	; 0x179e <UART_SendString>
	while (LL_GetStatus(temp) == SORTABLE)
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
    1328:	e1 2c       	mov	r14, r1
    132a:	f1 2c       	mov	r15, r1
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    132c:	0f 2e       	mov	r0, r31
    132e:	f9 e6       	ldi	r31, 0x69	; 105
    1330:	af 2e       	mov	r10, r31
    1332:	f3 e0       	ldi	r31, 0x03	; 3
    1334:	bf 2e       	mov	r11, r31
    1336:	f0 2d       	mov	r31, r0
    1338:	6e 01       	movw	r12, r28
    133a:	bb e6       	ldi	r27, 0x6B	; 107
    133c:	cb 0e       	add	r12, r27
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    133e:	d1 1c       	adc	r13, r1
	{
		char listbuff[100];
		c++;
    1340:	1d c0       	rjmp	.+58     	; 0x137c <SYS_Test+0x130>
    1342:	8f ef       	ldi	r24, 0xFF	; 255
    1344:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    1346:	f8 0a       	sbc	r15, r24
    1348:	c8 01       	movw	r24, r16
    134a:	ef da       	rcall	.-2594   	; 0x92a <LL_GetMag>
    134c:	98 2e       	mov	r9, r24
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    134e:	c8 01       	movw	r24, r16
    1350:	e6 da       	rcall	.-2612   	; 0x91e <LL_GetRefl>
    1352:	1f 92       	push	r1
    1354:	9f 92       	push	r9
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	ff 92       	push	r15
    135c:	ef 92       	push	r14
    135e:	bf 92       	push	r11
    1360:	af 92       	push	r10
    1362:	df 92       	push	r13
    1364:	cf 92       	push	r12
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    1366:	4a d3       	rcall	.+1684   	; 0x19fc <sprintf>
    1368:	c6 01       	movw	r24, r12
    136a:	19 d2       	rcall	.+1074   	; 0x179e <UART_SendString>
		temp = LL_Next(temp);
    136c:	c8 01       	movw	r24, r16
    136e:	ac da       	rcall	.-2728   	; 0x8c8 <LL_Next>
    1370:	8c 01       	movw	r16, r24
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    137c:	c8 01       	movw	r24, r16
    137e:	ef da       	rcall	.-2594   	; 0x95e <LL_GetStatus>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	f9 f2       	breq	.-66     	; 0x1342 <SYS_Test+0xf6>
    1384:	82 e9       	ldi	r24, 0x92	; 146
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	0a d2       	rcall	.+1044   	; 0x179e <UART_SendString>
    138a:	0f 2e       	mov	r0, r31
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    138c:	f9 e6       	ldi	r31, 0x69	; 105
    138e:	af 2e       	mov	r10, r31
    1390:	f3 e0       	ldi	r31, 0x03	; 3
    1392:	bf 2e       	mov	r11, r31
    1394:	f0 2d       	mov	r31, r0
    1396:	6e 01       	movw	r12, r28
    1398:	bb e6       	ldi	r27, 0x6B	; 107
    139a:	cb 0e       	add	r12, r27
    139c:	d1 1c       	adc	r13, r1
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    139e:	1d c0       	rjmp	.+58     	; 0x13da <SYS_Test+0x18e>
	{
		char listbuff[100];
		c++;
    13a0:	8f ef       	ldi	r24, 0xFF	; 255
    13a2:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    13a4:	f8 0a       	sbc	r15, r24
    13a6:	c8 01       	movw	r24, r16
    13a8:	c0 da       	rcall	.-2688   	; 0x92a <LL_GetMag>
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    13aa:	98 2e       	mov	r9, r24
    13ac:	c8 01       	movw	r24, r16
    13ae:	b7 da       	rcall	.-2706   	; 0x91e <LL_GetRefl>
    13b0:	1f 92       	push	r1
    13b2:	9f 92       	push	r9
    13b4:	9f 93       	push	r25
    13b6:	8f 93       	push	r24
    13b8:	ff 92       	push	r15
    13ba:	ef 92       	push	r14
    13bc:	bf 92       	push	r11
    13be:	af 92       	push	r10
    13c0:	df 92       	push	r13
    13c2:	cf 92       	push	r12
    13c4:	1b d3       	rcall	.+1590   	; 0x19fc <sprintf>
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    13c6:	c6 01       	movw	r24, r12
    13c8:	ea d1       	rcall	.+980    	; 0x179e <UART_SendString>
		temp = LL_Next(temp);
    13ca:	c8 01       	movw	r24, r16
    13cc:	7d da       	rcall	.-2822   	; 0x8c8 <LL_Next>
    13ce:	8c 01       	movw	r16, r24
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    13da:	c8 01       	movw	r24, r16
    13dc:	c0 da       	rcall	.-2688   	; 0x95e <LL_GetStatus>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	f9 f2       	breq	.-66     	; 0x13a0 <SYS_Test+0x154>
    13e2:	89 b1       	in	r24, 0x09	; 9
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    13e4:	83 70       	andi	r24, 0x03	; 3
    13e6:	e9 f7       	brne	.-6      	; 0x13e2 <SYS_Test+0x196>
    13e8:	8c e3       	ldi	r24, 0x3C	; 60
		{
			UART_SendString("Starting System!\r\n");
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	d8 d1       	rcall	.+944    	; 0x179e <UART_SendString>
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    13f2:	a2 db       	rcall	.-2236   	; 0xb38 <PWM>
    13f4:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <g_PauseRequest>
    13f8:	78 94       	sei
			g_PauseRequest = 0;
    13fa:	c2 53       	subi	r28, 0x32	; 50
    13fc:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    13fe:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
} // SYS_Test
    1400:	f8 94       	cli
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	cd bf       	out	0x3d, r28	; 61
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	08 95       	ret

00001420 <SYS_Unclassified>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
void SYS_Unclassified()
{
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	e2 97       	sbiw	r28, 0x32	; 50
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
	cli();
    1438:	f8 94       	cli
	PWM(0);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	7c db       	rcall	.-2312   	; 0xb38 <PWM>
	//UART_SendString("\r\n\r\n\r\nUNCLASSIFIED ITEM DETECTED\r\n\r\n\r\n");
	UART_SendString("\r\n\r\n\r\n!!!UNKNOWN ITEM IN BAGGING AREA!!!\r\n");
    1440:	86 eb       	ldi	r24, 0xB6	; 182
    1442:	93 e0       	ldi	r25, 0x03	; 3
    1444:	ac d1       	rcall	.+856    	; 0x179e <UART_SendString>
	UART_SendString("\r\n!!!UNKNOWN ITEM IN BAGGING AREA!!!\r\n");
    1446:	8a eb       	ldi	r24, 0xBA	; 186
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	a9 d1       	rcall	.+850    	; 0x179e <UART_SendString>
	UART_SendString("\r\n!!!UNKNOWN ITEM IN BAGGING AREA!!!\r\n");
    144c:	8a eb       	ldi	r24, 0xBA	; 186
    144e:	93 e0       	ldi	r25, 0x03	; 3
    1450:	a6 d1       	rcall	.+844    	; 0x179e <UART_SendString>
	UART_SendString("\r\n!!!UNKNOWN ITEM IN BAGGING AREA!!!\r\n");
    1452:	8a eb       	ldi	r24, 0xBA	; 186
    1454:	93 e0       	ldi	r25, 0x03	; 3
    1456:	a3 d1       	rcall	.+838    	; 0x179e <UART_SendString>
	UART_SendString("\r\n!!!UNKNOWN ITEM IN BAGGING AREA!!!\r\n");
    1458:	8a eb       	ldi	r24, 0xBA	; 186
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	a0 d1       	rcall	.+832    	; 0x179e <UART_SendString>
    145e:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
	char buffer[50];
	sprintf(buffer, "Item statistics:\r\nReflectance: %u, Magnetic: %u\r\n", LL_GetRefl(HEAD->prev), LL_GetMag(HEAD->prev));
    1462:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
    1466:	84 81       	ldd	r24, Z+4	; 0x04
    1468:	95 81       	ldd	r25, Z+5	; 0x05
    146a:	5f da       	rcall	.-2882   	; 0x92a <LL_GetMag>
    146c:	18 2f       	mov	r17, r24
    146e:	e0 91 d8 04 	lds	r30, 0x04D8	; 0x8004d8 <HEAD>
    1472:	f0 91 d9 04 	lds	r31, 0x04D9	; 0x8004d9 <HEAD+0x1>
    1476:	84 81       	ldd	r24, Z+4	; 0x04
    1478:	95 81       	ldd	r25, Z+5	; 0x05
    147a:	51 da       	rcall	.-2910   	; 0x91e <LL_GetRefl>
    147c:	1f 92       	push	r1
    147e:	1f 93       	push	r17
    1480:	9f 93       	push	r25
    1482:	8f 93       	push	r24
    1484:	81 ee       	ldi	r24, 0xE1	; 225
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	8e 01       	movw	r16, r28
    148e:	0f 5f       	subi	r16, 0xFF	; 255
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	1f 93       	push	r17
    1494:	0f 93       	push	r16
	UART_SendString(buffer);
    1496:	b2 d2       	rcall	.+1380   	; 0x19fc <sprintf>
    1498:	c8 01       	movw	r24, r16
    149a:	81 d1       	rcall	.+770    	; 0x179e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nPlease remove item and push both buttons to resume\r\n\r\n\r\n");
    149c:	83 e1       	ldi	r24, 0x13	; 19
    149e:	94 e0       	ldi	r25, 0x04	; 4
    14a0:	7e d1       	rcall	.+764    	; 0x179e <UART_SendString>
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	89 b1       	in	r24, 0x09	; 9
    14ae:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    14b0:	e9 f7       	brne	.-6      	; 0x14ac <SYS_Unclassified+0x8c>
    14b2:	8c e3       	ldi	r24, 0x3C	; 60
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	73 d1       	rcall	.+742    	; 0x179e <UART_SendString>
			PWM(0x80);
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	3d db       	rcall	.-2438   	; 0xb38 <PWM>
    14be:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <g_UnclassifiedRequest>
			g_UnclassifiedRequest = 0;
    14c2:	78 94       	sei
			sei();
    14c4:	e2 96       	adiw	r28, 0x32	; 50
			break;
		}
	}
	return;
}
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

000014da <SYS_Missing>:
    14da:	0f 93       	push	r16
void SYS_Missing()
{
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	c4 56       	subi	r28, 0x64	; 100
    14e8:	d1 09       	sbc	r29, r1
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
	cli();
    14f4:	f8 94       	cli
	PWM(0);
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	1e db       	rcall	.-2500   	; 0xb38 <PWM>
	char buffer[100];
	extern list* HEAD;
	extern list* N_1;
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    14fc:	82 e5       	ldi	r24, 0x52	; 82
    14fe:	94 e0       	ldi	r25, 0x04	; 4
    1500:	4e d1       	rcall	.+668    	; 0x179e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1502:	82 e5       	ldi	r24, 0x52	; 82
    1504:	94 e0       	ldi	r25, 0x04	; 4
    1506:	4b d1       	rcall	.+662    	; 0x179e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1508:	82 e5       	ldi	r24, 0x52	; 82
    150a:	94 e0       	ldi	r25, 0x04	; 4
    150c:	48 d1       	rcall	.+656    	; 0x179e <UART_SendString>
    150e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <N_1>
	sprintf(buffer, "System Tick: %u, Last Tick: %u, Head Tick: %u Prev Tick: %u\r\n\r\n\r\n",g_Timer, g_TimerLast, LL_GetTick(HEAD), LL_GetTick(N_1));
    1512:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <N_1+0x1>
    1516:	2e da       	rcall	.-2980   	; 0x974 <LL_GetTick>
    1518:	18 2f       	mov	r17, r24
    151a:	09 2f       	mov	r16, r25
    151c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <HEAD>
    1520:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <HEAD+0x1>
    1524:	27 da       	rcall	.-2994   	; 0x974 <LL_GetTick>
    1526:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <g_TimerLast>
    152a:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <g_TimerLast+0x1>
    152e:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <g_Timer>
    1532:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <g_Timer+0x1>
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	9f 93       	push	r25
    153c:	8f 93       	push	r24
    153e:	5f 93       	push	r21
    1540:	4f 93       	push	r20
    1542:	3f 93       	push	r19
    1544:	2f 93       	push	r18
    1546:	8b e6       	ldi	r24, 0x6B	; 107
    1548:	94 e0       	ldi	r25, 0x04	; 4
    154a:	9f 93       	push	r25
    154c:	8f 93       	push	r24
    154e:	8e 01       	movw	r16, r28
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	1f 93       	push	r17
    1556:	0f 93       	push	r16
    1558:	51 d2       	rcall	.+1186   	; 0x19fc <sprintf>
	UART_SendString(buffer);	
    155a:	c8 01       	movw	r24, r16
    155c:	20 d1       	rcall	.+576    	; 0x179e <UART_SendString>
    155e:	8d ea       	ldi	r24, 0xAD	; 173
	UART_SendString("Press both buttons to resume...\r\n");
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	1d d1       	rcall	.+570    	; 0x179e <UART_SendString>
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    1570:	83 70       	andi	r24, 0x03	; 3
    1572:	e9 f7       	brne	.-6      	; 0x156e <SYS_Missing+0x94>
    1574:	8c e3       	ldi	r24, 0x3C	; 60
		{
			UART_SendString("Starting System!\r\n");
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	12 d1       	rcall	.+548    	; 0x179e <UART_SendString>
    157a:	80 e8       	ldi	r24, 0x80	; 128
    157c:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    157e:	dc da       	rcall	.-2632   	; 0xb38 <PWM>
    1580:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <g_MissingRequest>
    1584:	78 94       	sei
			g_MissingRequest = 0;
    1586:	cc 59       	subi	r28, 0x9C	; 156
    1588:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    158a:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <__vector_17>:
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	0b b6       	in	r0, 0x3b	; 59
    15aa:	0f 92       	push	r0
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ef 93       	push	r30
    15ce:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    15d0:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_timer_tick>
    15d4:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <_timer_tick+0x1>
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <_timer_tick+0x1>
    15de:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_timer_tick>
    15e2:	ce ef       	ldi	r28, 0xFE	; 254
    15e4:	d4 e0       	ldi	r29, 0x04	; 4
    15e6:	0f 2e       	mov	r0, r31
    15e8:	f6 e4       	ldi	r31, 0x46	; 70
    15ea:	ef 2e       	mov	r14, r31
    15ec:	f5 e0       	ldi	r31, 0x05	; 5
    15ee:	ff 2e       	mov	r15, r31
    15f0:	f0 2d       	mov	r31, r0
    15f2:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    15f4:	ec 81       	ldd	r30, Y+4	; 0x04
    15f6:	fd 81       	ldd	r31, Y+5	; 0x05
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	09 f1       	breq	.+66     	; 0x163e <__vector_17+0xa0>
    15fc:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_timer_tick>
    1600:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <_timer_tick+0x1>
    1604:	28 81       	ld	r18, Y
    1606:	39 81       	ldd	r19, Y+1	; 0x01
    1608:	28 17       	cp	r18, r24
    160a:	39 07       	cpc	r19, r25
    160c:	c1 f4       	brne	.+48     	; 0x163e <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    160e:	88 85       	ldd	r24, Y+8	; 0x08
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	19 f4       	brne	.+6      	; 0x161a <__vector_17+0x7c>
    1614:	8e 81       	ldd	r24, Y+6	; 0x06
    1616:	9f 81       	ldd	r25, Y+7	; 0x07
    1618:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    161a:	d8 01       	movw	r26, r16
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	8d 91       	ld	r24, X+
    1620:	9c 91       	ld	r25, X
    1622:	13 97       	sbiw	r26, 0x03	; 3
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	41 f0       	breq	.+16     	; 0x1638 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1628:	2d 91       	ld	r18, X+
    162a:	3c 91       	ld	r19, X
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	82 0f       	add	r24, r18
    1630:	93 1f       	adc	r25, r19
    1632:	8d 93       	st	X+, r24
    1634:	9c 93       	st	X, r25
    1636:	03 c0       	rjmp	.+6      	; 0x163e <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1638:	f8 01       	movw	r30, r16
    163a:	15 82       	std	Z+5, r1	; 0x05
    163c:	14 82       	std	Z+4, r1	; 0x04
    163e:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    1640:	ce 15       	cp	r28, r14
    1642:	df 05       	cpc	r29, r15
    1644:	b1 f6       	brne	.-84     	; 0x15f2 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1646:	ff 91       	pop	r31
    1648:	ef 91       	pop	r30
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	bf 91       	pop	r27
    1650:	af 91       	pop	r26
    1652:	9f 91       	pop	r25
    1654:	8f 91       	pop	r24
    1656:	7f 91       	pop	r23
    1658:	6f 91       	pop	r22
    165a:	5f 91       	pop	r21
    165c:	4f 91       	pop	r20
    165e:	3f 91       	pop	r19
    1660:	2f 91       	pop	r18
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	0f 90       	pop	r0
    166c:	0b be       	out	0x3b, r0	; 59
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1678:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    167c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    1680:	88 e4       	ldi	r24, 0x48	; 72
    1682:	98 e0       	ldi	r25, 0x08	; 8
    1684:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1688:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    168c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1690:	89 e0       	ldi	r24, 0x09	; 9
    1692:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    169c:	88 e4       	ldi	r24, 0x48	; 72
    169e:	ee ef       	ldi	r30, 0xFE	; 254
    16a0:	f4 e0       	ldi	r31, 0x04	; 4
    16a2:	df 01       	movw	r26, r30
    16a4:	1d 92       	st	X+, r1
    16a6:	8a 95       	dec	r24
    16a8:	e9 f7       	brne	.-6      	; 0x16a4 <TIMER_Init+0x2c>
    16aa:	08 95       	ret

000016ac <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    16b6:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <_timer+0x4>
    16ba:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <_timer+0x5>
    16be:	67 2b       	or	r22, r23
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <TIMER_Create+0x18>
    16c2:	49 c0       	rjmp	.+146    	; 0x1756 <TIMER_Create+0xaa>
    16c4:	ee ef       	ldi	r30, 0xFE	; 254
    16c6:	f4 e0       	ldi	r31, 0x04	; 4
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    16c8:	a1 e0       	ldi	r26, 0x01	; 1
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    16cc:	c5 85       	ldd	r28, Z+13	; 0x0d
    16ce:	d6 85       	ldd	r29, Z+14	; 0x0e
    16d0:	cd 2b       	or	r28, r29
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <TIMER_Create+0x2a>
    16d4:	42 c0       	rjmp	.+132    	; 0x175a <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	39 96       	adiw	r30, 0x09	; 9
    16da:	a8 30       	cpi	r26, 0x08	; 8
    16dc:	b1 05       	cpc	r27, r1
    16de:	b1 f7       	brne	.-20     	; 0x16cc <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    16e6:	fd 01       	movw	r30, r26
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	ee 0f       	add	r30, r30
    16ee:	ff 1f       	adc	r31, r31
    16f0:	ee 0f       	add	r30, r30
    16f2:	ff 1f       	adc	r31, r31
    16f4:	ea 0f       	add	r30, r26
    16f6:	fb 1f       	adc	r31, r27
    16f8:	e2 50       	subi	r30, 0x02	; 2
    16fa:	fb 4f       	sbci	r31, 0xFB	; 251
    16fc:	93 83       	std	Z+3, r25	; 0x03
    16fe:	82 83       	std	Z+2, r24	; 0x02
    1700:	0d c0       	rjmp	.+26     	; 0x171c <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    1702:	fd 01       	movw	r30, r26
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	ea 0f       	add	r30, r26
    1712:	fb 1f       	adc	r31, r27
    1714:	e2 50       	subi	r30, 0x02	; 2
    1716:	fb 4f       	sbci	r31, 0xFB	; 251
    1718:	13 82       	std	Z+3, r1	; 0x03
    171a:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    171c:	fd 01       	movw	r30, r26
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ea 0f       	add	r30, r26
    172c:	fb 1f       	adc	r31, r27
    172e:	e2 50       	subi	r30, 0x02	; 2
    1730:	fb 4f       	sbci	r31, 0xFB	; 251
    1732:	55 83       	std	Z+5, r21	; 0x05
    1734:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1736:	37 83       	std	Z+7, r19	; 0x07
    1738:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    173a:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <_timer_tick>
    173e:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <_timer_tick+0x1>
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	91 83       	std	Z+1, r25	; 0x01
    1748:	80 83       	st	Z, r24
			_timer[i].state = READY;
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    174e:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    1750:	8a 2f       	mov	r24, r26
    1752:	9b 2f       	mov	r25, r27
    1754:	07 c0       	rjmp	.+14     	; 0x1764 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    175a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    175c:	f8 94       	cli
		{
			if (periodic != 0) 
    175e:	01 2b       	or	r16, r17
    1760:	11 f6       	brne	.-124    	; 0x16e6 <TIMER_Create+0x3a>
    1762:	cf cf       	rjmp	.-98     	; 0x1702 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    176e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1772:	83 e3       	ldi	r24, 0x33	; 51
    1774:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1778:	e9 ec       	ldi	r30, 0xC9	; 201
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	88 61       	ori	r24, 0x18	; 24
    1780:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1782:	ea ec       	ldi	r30, 0xCA	; 202
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	86 60       	ori	r24, 0x06	; 6
    178a:	80 83       	st	Z, r24
    178c:	08 95       	ret

0000178e <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    178e:	e8 ec       	ldi	r30, 0xC8	; 200
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	90 81       	ld	r25, Z
    1794:	95 ff       	sbrs	r25, 5
    1796:	fd cf       	rjmp	.-6      	; 0x1792 <UART_SendChar+0x4>
	UDR1 = c;
    1798:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    179c:	08 95       	ret

0000179e <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    17a4:	88 81       	ld	r24, Y
    17a6:	88 23       	and	r24, r24
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <UART_SendString+0x16>
    17aa:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    17ac:	f0 df       	rcall	.-32     	; 0x178e <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    17ae:	89 91       	ld	r24, Y+
    17b0:	81 11       	cpse	r24, r1
    17b2:	fc cf       	rjmp	.-8      	; 0x17ac <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	08 95       	ret

000017ba <malloc>:
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	91 05       	cpc	r25, r1
    17c6:	10 f4       	brcc	.+4      	; 0x17cc <malloc+0x12>
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	e0 91 5f 05 	lds	r30, 0x055F	; 0x80055f <__flp>
    17d0:	f0 91 60 05 	lds	r31, 0x0560	; 0x800560 <__flp+0x1>
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	a0 e0       	ldi	r26, 0x00	; 0
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	30 97       	sbiw	r30, 0x00	; 0
    17de:	19 f1       	breq	.+70     	; 0x1826 <malloc+0x6c>
    17e0:	40 81       	ld	r20, Z
    17e2:	51 81       	ldd	r21, Z+1	; 0x01
    17e4:	02 81       	ldd	r16, Z+2	; 0x02
    17e6:	13 81       	ldd	r17, Z+3	; 0x03
    17e8:	48 17       	cp	r20, r24
    17ea:	59 07       	cpc	r21, r25
    17ec:	c8 f0       	brcs	.+50     	; 0x1820 <malloc+0x66>
    17ee:	84 17       	cp	r24, r20
    17f0:	95 07       	cpc	r25, r21
    17f2:	69 f4       	brne	.+26     	; 0x180e <malloc+0x54>
    17f4:	10 97       	sbiw	r26, 0x00	; 0
    17f6:	31 f0       	breq	.+12     	; 0x1804 <malloc+0x4a>
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	0c 93       	st	X, r16
    17fc:	12 97       	sbiw	r26, 0x02	; 2
    17fe:	13 96       	adiw	r26, 0x03	; 3
    1800:	1c 93       	st	X, r17
    1802:	27 c0       	rjmp	.+78     	; 0x1852 <malloc+0x98>
    1804:	00 93 5f 05 	sts	0x055F, r16	; 0x80055f <__flp>
    1808:	10 93 60 05 	sts	0x0560, r17	; 0x800560 <__flp+0x1>
    180c:	22 c0       	rjmp	.+68     	; 0x1852 <malloc+0x98>
    180e:	21 15       	cp	r18, r1
    1810:	31 05       	cpc	r19, r1
    1812:	19 f0       	breq	.+6      	; 0x181a <malloc+0x60>
    1814:	42 17       	cp	r20, r18
    1816:	53 07       	cpc	r21, r19
    1818:	18 f4       	brcc	.+6      	; 0x1820 <malloc+0x66>
    181a:	9a 01       	movw	r18, r20
    181c:	bd 01       	movw	r22, r26
    181e:	ef 01       	movw	r28, r30
    1820:	df 01       	movw	r26, r30
    1822:	f8 01       	movw	r30, r16
    1824:	db cf       	rjmp	.-74     	; 0x17dc <malloc+0x22>
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	f9 f0       	breq	.+62     	; 0x186a <malloc+0xb0>
    182c:	28 1b       	sub	r18, r24
    182e:	39 0b       	sbc	r19, r25
    1830:	24 30       	cpi	r18, 0x04	; 4
    1832:	31 05       	cpc	r19, r1
    1834:	80 f4       	brcc	.+32     	; 0x1856 <malloc+0x9c>
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	9b 81       	ldd	r25, Y+3	; 0x03
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	21 f0       	breq	.+8      	; 0x1848 <malloc+0x8e>
    1840:	fb 01       	movw	r30, r22
    1842:	93 83       	std	Z+3, r25	; 0x03
    1844:	82 83       	std	Z+2, r24	; 0x02
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <malloc+0x96>
    1848:	90 93 60 05 	sts	0x0560, r25	; 0x800560 <__flp+0x1>
    184c:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <__flp>
    1850:	fe 01       	movw	r30, r28
    1852:	32 96       	adiw	r30, 0x02	; 2
    1854:	44 c0       	rjmp	.+136    	; 0x18de <malloc+0x124>
    1856:	fe 01       	movw	r30, r28
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	81 93       	st	Z+, r24
    185e:	91 93       	st	Z+, r25
    1860:	22 50       	subi	r18, 0x02	; 2
    1862:	31 09       	sbc	r19, r1
    1864:	39 83       	std	Y+1, r19	; 0x01
    1866:	28 83       	st	Y, r18
    1868:	3a c0       	rjmp	.+116    	; 0x18de <malloc+0x124>
    186a:	20 91 5d 05 	lds	r18, 0x055D	; 0x80055d <__brkval>
    186e:	30 91 5e 05 	lds	r19, 0x055E	; 0x80055e <__brkval+0x1>
    1872:	23 2b       	or	r18, r19
    1874:	41 f4       	brne	.+16     	; 0x1886 <malloc+0xcc>
    1876:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    187a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    187e:	30 93 5e 05 	sts	0x055E, r19	; 0x80055e <__brkval+0x1>
    1882:	20 93 5d 05 	sts	0x055D, r18	; 0x80055d <__brkval>
    1886:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    188a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    188e:	21 15       	cp	r18, r1
    1890:	31 05       	cpc	r19, r1
    1892:	41 f4       	brne	.+16     	; 0x18a4 <malloc+0xea>
    1894:	2d b7       	in	r18, 0x3d	; 61
    1896:	3e b7       	in	r19, 0x3e	; 62
    1898:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    189c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    18a0:	24 1b       	sub	r18, r20
    18a2:	35 0b       	sbc	r19, r21
    18a4:	e0 91 5d 05 	lds	r30, 0x055D	; 0x80055d <__brkval>
    18a8:	f0 91 5e 05 	lds	r31, 0x055E	; 0x80055e <__brkval+0x1>
    18ac:	e2 17       	cp	r30, r18
    18ae:	f3 07       	cpc	r31, r19
    18b0:	a0 f4       	brcc	.+40     	; 0x18da <malloc+0x120>
    18b2:	2e 1b       	sub	r18, r30
    18b4:	3f 0b       	sbc	r19, r31
    18b6:	28 17       	cp	r18, r24
    18b8:	39 07       	cpc	r19, r25
    18ba:	78 f0       	brcs	.+30     	; 0x18da <malloc+0x120>
    18bc:	ac 01       	movw	r20, r24
    18be:	4e 5f       	subi	r20, 0xFE	; 254
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	24 17       	cp	r18, r20
    18c4:	35 07       	cpc	r19, r21
    18c6:	48 f0       	brcs	.+18     	; 0x18da <malloc+0x120>
    18c8:	4e 0f       	add	r20, r30
    18ca:	5f 1f       	adc	r21, r31
    18cc:	50 93 5e 05 	sts	0x055E, r21	; 0x80055e <__brkval+0x1>
    18d0:	40 93 5d 05 	sts	0x055D, r20	; 0x80055d <__brkval>
    18d4:	81 93       	st	Z+, r24
    18d6:	91 93       	st	Z+, r25
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <malloc+0x124>
    18da:	e0 e0       	ldi	r30, 0x00	; 0
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	cf 01       	movw	r24, r30
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	08 95       	ret

000018ea <free>:
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <free+0xa>
    18f2:	81 c0       	rjmp	.+258    	; 0x19f6 <free+0x10c>
    18f4:	fc 01       	movw	r30, r24
    18f6:	32 97       	sbiw	r30, 0x02	; 2
    18f8:	13 82       	std	Z+3, r1	; 0x03
    18fa:	12 82       	std	Z+2, r1	; 0x02
    18fc:	a0 91 5f 05 	lds	r26, 0x055F	; 0x80055f <__flp>
    1900:	b0 91 60 05 	lds	r27, 0x0560	; 0x800560 <__flp+0x1>
    1904:	10 97       	sbiw	r26, 0x00	; 0
    1906:	81 f4       	brne	.+32     	; 0x1928 <free+0x3e>
    1908:	20 81       	ld	r18, Z
    190a:	31 81       	ldd	r19, Z+1	; 0x01
    190c:	82 0f       	add	r24, r18
    190e:	93 1f       	adc	r25, r19
    1910:	20 91 5d 05 	lds	r18, 0x055D	; 0x80055d <__brkval>
    1914:	30 91 5e 05 	lds	r19, 0x055E	; 0x80055e <__brkval+0x1>
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	51 f5       	brne	.+84     	; 0x1972 <free+0x88>
    191e:	f0 93 5e 05 	sts	0x055E, r31	; 0x80055e <__brkval+0x1>
    1922:	e0 93 5d 05 	sts	0x055D, r30	; 0x80055d <__brkval>
    1926:	67 c0       	rjmp	.+206    	; 0x19f6 <free+0x10c>
    1928:	ed 01       	movw	r28, r26
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	ce 17       	cp	r28, r30
    1930:	df 07       	cpc	r29, r31
    1932:	40 f4       	brcc	.+16     	; 0x1944 <free+0x5a>
    1934:	4a 81       	ldd	r20, Y+2	; 0x02
    1936:	5b 81       	ldd	r21, Y+3	; 0x03
    1938:	9e 01       	movw	r18, r28
    193a:	41 15       	cp	r20, r1
    193c:	51 05       	cpc	r21, r1
    193e:	f1 f0       	breq	.+60     	; 0x197c <free+0x92>
    1940:	ea 01       	movw	r28, r20
    1942:	f5 cf       	rjmp	.-22     	; 0x192e <free+0x44>
    1944:	d3 83       	std	Z+3, r29	; 0x03
    1946:	c2 83       	std	Z+2, r28	; 0x02
    1948:	40 81       	ld	r20, Z
    194a:	51 81       	ldd	r21, Z+1	; 0x01
    194c:	84 0f       	add	r24, r20
    194e:	95 1f       	adc	r25, r21
    1950:	c8 17       	cp	r28, r24
    1952:	d9 07       	cpc	r29, r25
    1954:	59 f4       	brne	.+22     	; 0x196c <free+0x82>
    1956:	88 81       	ld	r24, Y
    1958:	99 81       	ldd	r25, Y+1	; 0x01
    195a:	84 0f       	add	r24, r20
    195c:	95 1f       	adc	r25, r21
    195e:	02 96       	adiw	r24, 0x02	; 2
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	93 83       	std	Z+3, r25	; 0x03
    196a:	82 83       	std	Z+2, r24	; 0x02
    196c:	21 15       	cp	r18, r1
    196e:	31 05       	cpc	r19, r1
    1970:	29 f4       	brne	.+10     	; 0x197c <free+0x92>
    1972:	f0 93 60 05 	sts	0x0560, r31	; 0x800560 <__flp+0x1>
    1976:	e0 93 5f 05 	sts	0x055F, r30	; 0x80055f <__flp>
    197a:	3d c0       	rjmp	.+122    	; 0x19f6 <free+0x10c>
    197c:	e9 01       	movw	r28, r18
    197e:	fb 83       	std	Y+3, r31	; 0x03
    1980:	ea 83       	std	Y+2, r30	; 0x02
    1982:	49 91       	ld	r20, Y+
    1984:	59 91       	ld	r21, Y+
    1986:	c4 0f       	add	r28, r20
    1988:	d5 1f       	adc	r29, r21
    198a:	ec 17       	cp	r30, r28
    198c:	fd 07       	cpc	r31, r29
    198e:	61 f4       	brne	.+24     	; 0x19a8 <free+0xbe>
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	84 0f       	add	r24, r20
    1996:	95 1f       	adc	r25, r21
    1998:	02 96       	adiw	r24, 0x02	; 2
    199a:	e9 01       	movw	r28, r18
    199c:	99 83       	std	Y+1, r25	; 0x01
    199e:	88 83       	st	Y, r24
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	9b 83       	std	Y+3, r25	; 0x03
    19a6:	8a 83       	std	Y+2, r24	; 0x02
    19a8:	e0 e0       	ldi	r30, 0x00	; 0
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	12 96       	adiw	r26, 0x02	; 2
    19ae:	8d 91       	ld	r24, X+
    19b0:	9c 91       	ld	r25, X
    19b2:	13 97       	sbiw	r26, 0x03	; 3
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	19 f0       	breq	.+6      	; 0x19be <free+0xd4>
    19b8:	fd 01       	movw	r30, r26
    19ba:	dc 01       	movw	r26, r24
    19bc:	f7 cf       	rjmp	.-18     	; 0x19ac <free+0xc2>
    19be:	8d 91       	ld	r24, X+
    19c0:	9c 91       	ld	r25, X
    19c2:	11 97       	sbiw	r26, 0x01	; 1
    19c4:	9d 01       	movw	r18, r26
    19c6:	2e 5f       	subi	r18, 0xFE	; 254
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	82 0f       	add	r24, r18
    19cc:	93 1f       	adc	r25, r19
    19ce:	20 91 5d 05 	lds	r18, 0x055D	; 0x80055d <__brkval>
    19d2:	30 91 5e 05 	lds	r19, 0x055E	; 0x80055e <__brkval+0x1>
    19d6:	28 17       	cp	r18, r24
    19d8:	39 07       	cpc	r19, r25
    19da:	69 f4       	brne	.+26     	; 0x19f6 <free+0x10c>
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	29 f4       	brne	.+10     	; 0x19ea <free+0x100>
    19e0:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <__flp+0x1>
    19e4:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <__flp>
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <free+0x104>
    19ea:	13 82       	std	Z+3, r1	; 0x03
    19ec:	12 82       	std	Z+2, r1	; 0x02
    19ee:	b0 93 5e 05 	sts	0x055E, r27	; 0x80055e <__brkval+0x1>
    19f2:	a0 93 5d 05 	sts	0x055D, r26	; 0x80055d <__brkval>
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <sprintf>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	2e 97       	sbiw	r28, 0x0e	; 14
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	0d 89       	ldd	r16, Y+21	; 0x15
    1a16:	1e 89       	ldd	r17, Y+22	; 0x16
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	8c 83       	std	Y+4, r24	; 0x04
    1a1c:	1a 83       	std	Y+2, r17	; 0x02
    1a1e:	09 83       	std	Y+1, r16	; 0x01
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f e7       	ldi	r25, 0x7F	; 127
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	ae 01       	movw	r20, r28
    1a2a:	47 5e       	subi	r20, 0xE7	; 231
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a2e:	6f 89       	ldd	r22, Y+23	; 0x17
    1a30:	78 8d       	ldd	r23, Y+24	; 0x18
    1a32:	ce 01       	movw	r24, r28
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	10 d0       	rcall	.+32     	; 0x1a58 <vfprintf>
    1a38:	ef 81       	ldd	r30, Y+7	; 0x07
    1a3a:	f8 85       	ldd	r31, Y+8	; 0x08
    1a3c:	e0 0f       	add	r30, r16
    1a3e:	f1 1f       	adc	r31, r17
    1a40:	10 82       	st	Z, r1
    1a42:	2e 96       	adiw	r28, 0x0e	; 14
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <vfprintf>:
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	2b 97       	sbiw	r28, 0x0b	; 11
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	6c 01       	movw	r12, r24
    1a8e:	7b 01       	movw	r14, r22
    1a90:	8a 01       	movw	r16, r20
    1a92:	fc 01       	movw	r30, r24
    1a94:	17 82       	std	Z+7, r1	; 0x07
    1a96:	16 82       	std	Z+6, r1	; 0x06
    1a98:	83 81       	ldd	r24, Z+3	; 0x03
    1a9a:	81 ff       	sbrs	r24, 1
    1a9c:	bf c1       	rjmp	.+894    	; 0x1e1c <vfprintf+0x3c4>
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	3c 01       	movw	r6, r24
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	f7 01       	movw	r30, r14
    1aaa:	93 fd       	sbrc	r25, 3
    1aac:	85 91       	lpm	r24, Z+
    1aae:	93 ff       	sbrs	r25, 3
    1ab0:	81 91       	ld	r24, Z+
    1ab2:	7f 01       	movw	r14, r30
    1ab4:	88 23       	and	r24, r24
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <vfprintf+0x62>
    1ab8:	ad c1       	rjmp	.+858    	; 0x1e14 <vfprintf+0x3bc>
    1aba:	85 32       	cpi	r24, 0x25	; 37
    1abc:	39 f4       	brne	.+14     	; 0x1acc <vfprintf+0x74>
    1abe:	93 fd       	sbrc	r25, 3
    1ac0:	85 91       	lpm	r24, Z+
    1ac2:	93 ff       	sbrs	r25, 3
    1ac4:	81 91       	ld	r24, Z+
    1ac6:	7f 01       	movw	r14, r30
    1ac8:	85 32       	cpi	r24, 0x25	; 37
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <vfprintf+0x7c>
    1acc:	b6 01       	movw	r22, r12
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	d6 d1       	rcall	.+940    	; 0x1e7e <fputc>
    1ad2:	e8 cf       	rjmp	.-48     	; 0x1aa4 <vfprintf+0x4c>
    1ad4:	91 2c       	mov	r9, r1
    1ad6:	21 2c       	mov	r2, r1
    1ad8:	31 2c       	mov	r3, r1
    1ada:	ff e1       	ldi	r31, 0x1F	; 31
    1adc:	f3 15       	cp	r31, r3
    1ade:	d8 f0       	brcs	.+54     	; 0x1b16 <vfprintf+0xbe>
    1ae0:	8b 32       	cpi	r24, 0x2B	; 43
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <vfprintf+0xaa>
    1ae4:	38 f4       	brcc	.+14     	; 0x1af4 <vfprintf+0x9c>
    1ae6:	80 32       	cpi	r24, 0x20	; 32
    1ae8:	79 f0       	breq	.+30     	; 0x1b08 <vfprintf+0xb0>
    1aea:	83 32       	cpi	r24, 0x23	; 35
    1aec:	a1 f4       	brne	.+40     	; 0x1b16 <vfprintf+0xbe>
    1aee:	23 2d       	mov	r18, r3
    1af0:	20 61       	ori	r18, 0x10	; 16
    1af2:	1d c0       	rjmp	.+58     	; 0x1b2e <vfprintf+0xd6>
    1af4:	8d 32       	cpi	r24, 0x2D	; 45
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <vfprintf+0xb8>
    1af8:	80 33       	cpi	r24, 0x30	; 48
    1afa:	69 f4       	brne	.+26     	; 0x1b16 <vfprintf+0xbe>
    1afc:	23 2d       	mov	r18, r3
    1afe:	21 60       	ori	r18, 0x01	; 1
    1b00:	16 c0       	rjmp	.+44     	; 0x1b2e <vfprintf+0xd6>
    1b02:	83 2d       	mov	r24, r3
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	38 2e       	mov	r3, r24
    1b08:	e3 2d       	mov	r30, r3
    1b0a:	e4 60       	ori	r30, 0x04	; 4
    1b0c:	3e 2e       	mov	r3, r30
    1b0e:	2a c0       	rjmp	.+84     	; 0x1b64 <vfprintf+0x10c>
    1b10:	f3 2d       	mov	r31, r3
    1b12:	f8 60       	ori	r31, 0x08	; 8
    1b14:	1d c0       	rjmp	.+58     	; 0x1b50 <vfprintf+0xf8>
    1b16:	37 fc       	sbrc	r3, 7
    1b18:	2d c0       	rjmp	.+90     	; 0x1b74 <vfprintf+0x11c>
    1b1a:	20 ed       	ldi	r18, 0xD0	; 208
    1b1c:	28 0f       	add	r18, r24
    1b1e:	2a 30       	cpi	r18, 0x0A	; 10
    1b20:	40 f0       	brcs	.+16     	; 0x1b32 <vfprintf+0xda>
    1b22:	8e 32       	cpi	r24, 0x2E	; 46
    1b24:	b9 f4       	brne	.+46     	; 0x1b54 <vfprintf+0xfc>
    1b26:	36 fc       	sbrc	r3, 6
    1b28:	75 c1       	rjmp	.+746    	; 0x1e14 <vfprintf+0x3bc>
    1b2a:	23 2d       	mov	r18, r3
    1b2c:	20 64       	ori	r18, 0x40	; 64
    1b2e:	32 2e       	mov	r3, r18
    1b30:	19 c0       	rjmp	.+50     	; 0x1b64 <vfprintf+0x10c>
    1b32:	36 fe       	sbrs	r3, 6
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <vfprintf+0xea>
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	98 9e       	mul	r9, r24
    1b3a:	20 0d       	add	r18, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	92 2e       	mov	r9, r18
    1b40:	11 c0       	rjmp	.+34     	; 0x1b64 <vfprintf+0x10c>
    1b42:	ea e0       	ldi	r30, 0x0A	; 10
    1b44:	2e 9e       	mul	r2, r30
    1b46:	20 0d       	add	r18, r0
    1b48:	11 24       	eor	r1, r1
    1b4a:	22 2e       	mov	r2, r18
    1b4c:	f3 2d       	mov	r31, r3
    1b4e:	f0 62       	ori	r31, 0x20	; 32
    1b50:	3f 2e       	mov	r3, r31
    1b52:	08 c0       	rjmp	.+16     	; 0x1b64 <vfprintf+0x10c>
    1b54:	8c 36       	cpi	r24, 0x6C	; 108
    1b56:	21 f4       	brne	.+8      	; 0x1b60 <vfprintf+0x108>
    1b58:	83 2d       	mov	r24, r3
    1b5a:	80 68       	ori	r24, 0x80	; 128
    1b5c:	38 2e       	mov	r3, r24
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <vfprintf+0x10c>
    1b60:	88 36       	cpi	r24, 0x68	; 104
    1b62:	41 f4       	brne	.+16     	; 0x1b74 <vfprintf+0x11c>
    1b64:	f7 01       	movw	r30, r14
    1b66:	93 fd       	sbrc	r25, 3
    1b68:	85 91       	lpm	r24, Z+
    1b6a:	93 ff       	sbrs	r25, 3
    1b6c:	81 91       	ld	r24, Z+
    1b6e:	7f 01       	movw	r14, r30
    1b70:	81 11       	cpse	r24, r1
    1b72:	b3 cf       	rjmp	.-154    	; 0x1ada <vfprintf+0x82>
    1b74:	98 2f       	mov	r25, r24
    1b76:	9f 7d       	andi	r25, 0xDF	; 223
    1b78:	95 54       	subi	r25, 0x45	; 69
    1b7a:	93 30       	cpi	r25, 0x03	; 3
    1b7c:	28 f4       	brcc	.+10     	; 0x1b88 <vfprintf+0x130>
    1b7e:	0c 5f       	subi	r16, 0xFC	; 252
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	9f e3       	ldi	r25, 0x3F	; 63
    1b84:	99 83       	std	Y+1, r25	; 0x01
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <vfprintf+0x14a>
    1b88:	83 36       	cpi	r24, 0x63	; 99
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <vfprintf+0x140>
    1b8c:	83 37       	cpi	r24, 0x73	; 115
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <vfprintf+0x154>
    1b90:	83 35       	cpi	r24, 0x53	; 83
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <vfprintf+0x13e>
    1b94:	55 c0       	rjmp	.+170    	; 0x1c40 <vfprintf+0x1e8>
    1b96:	20 c0       	rjmp	.+64     	; 0x1bd8 <vfprintf+0x180>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 81       	ld	r24, Z
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	88 24       	eor	r8, r8
    1ba4:	83 94       	inc	r8
    1ba6:	91 2c       	mov	r9, r1
    1ba8:	53 01       	movw	r10, r6
    1baa:	12 c0       	rjmp	.+36     	; 0x1bd0 <vfprintf+0x178>
    1bac:	28 01       	movw	r4, r16
    1bae:	f2 e0       	ldi	r31, 0x02	; 2
    1bb0:	4f 0e       	add	r4, r31
    1bb2:	51 1c       	adc	r5, r1
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	a0 80       	ld	r10, Z
    1bb8:	b1 80       	ldd	r11, Z+1	; 0x01
    1bba:	36 fe       	sbrs	r3, 6
    1bbc:	03 c0       	rjmp	.+6      	; 0x1bc4 <vfprintf+0x16c>
    1bbe:	69 2d       	mov	r22, r9
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <vfprintf+0x170>
    1bc4:	6f ef       	ldi	r22, 0xFF	; 255
    1bc6:	7f ef       	ldi	r23, 0xFF	; 255
    1bc8:	c5 01       	movw	r24, r10
    1bca:	4e d1       	rcall	.+668    	; 0x1e68 <strnlen>
    1bcc:	4c 01       	movw	r8, r24
    1bce:	82 01       	movw	r16, r4
    1bd0:	f3 2d       	mov	r31, r3
    1bd2:	ff 77       	andi	r31, 0x7F	; 127
    1bd4:	3f 2e       	mov	r3, r31
    1bd6:	15 c0       	rjmp	.+42     	; 0x1c02 <vfprintf+0x1aa>
    1bd8:	28 01       	movw	r4, r16
    1bda:	22 e0       	ldi	r18, 0x02	; 2
    1bdc:	42 0e       	add	r4, r18
    1bde:	51 1c       	adc	r5, r1
    1be0:	f8 01       	movw	r30, r16
    1be2:	a0 80       	ld	r10, Z
    1be4:	b1 80       	ldd	r11, Z+1	; 0x01
    1be6:	36 fe       	sbrs	r3, 6
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <vfprintf+0x198>
    1bea:	69 2d       	mov	r22, r9
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <vfprintf+0x19c>
    1bf0:	6f ef       	ldi	r22, 0xFF	; 255
    1bf2:	7f ef       	ldi	r23, 0xFF	; 255
    1bf4:	c5 01       	movw	r24, r10
    1bf6:	2d d1       	rcall	.+602    	; 0x1e52 <strnlen_P>
    1bf8:	4c 01       	movw	r8, r24
    1bfa:	f3 2d       	mov	r31, r3
    1bfc:	f0 68       	ori	r31, 0x80	; 128
    1bfe:	3f 2e       	mov	r3, r31
    1c00:	82 01       	movw	r16, r4
    1c02:	33 fc       	sbrc	r3, 3
    1c04:	19 c0       	rjmp	.+50     	; 0x1c38 <vfprintf+0x1e0>
    1c06:	82 2d       	mov	r24, r2
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	88 16       	cp	r8, r24
    1c0c:	99 06       	cpc	r9, r25
    1c0e:	a0 f4       	brcc	.+40     	; 0x1c38 <vfprintf+0x1e0>
    1c10:	b6 01       	movw	r22, r12
    1c12:	80 e2       	ldi	r24, 0x20	; 32
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	33 d1       	rcall	.+614    	; 0x1e7e <fputc>
    1c18:	2a 94       	dec	r2
    1c1a:	f5 cf       	rjmp	.-22     	; 0x1c06 <vfprintf+0x1ae>
    1c1c:	f5 01       	movw	r30, r10
    1c1e:	37 fc       	sbrc	r3, 7
    1c20:	85 91       	lpm	r24, Z+
    1c22:	37 fe       	sbrs	r3, 7
    1c24:	81 91       	ld	r24, Z+
    1c26:	5f 01       	movw	r10, r30
    1c28:	b6 01       	movw	r22, r12
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	28 d1       	rcall	.+592    	; 0x1e7e <fputc>
    1c2e:	21 10       	cpse	r2, r1
    1c30:	2a 94       	dec	r2
    1c32:	21 e0       	ldi	r18, 0x01	; 1
    1c34:	82 1a       	sub	r8, r18
    1c36:	91 08       	sbc	r9, r1
    1c38:	81 14       	cp	r8, r1
    1c3a:	91 04       	cpc	r9, r1
    1c3c:	79 f7       	brne	.-34     	; 0x1c1c <vfprintf+0x1c4>
    1c3e:	e1 c0       	rjmp	.+450    	; 0x1e02 <vfprintf+0x3aa>
    1c40:	84 36       	cpi	r24, 0x64	; 100
    1c42:	11 f0       	breq	.+4      	; 0x1c48 <vfprintf+0x1f0>
    1c44:	89 36       	cpi	r24, 0x69	; 105
    1c46:	39 f5       	brne	.+78     	; 0x1c96 <vfprintf+0x23e>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	37 fe       	sbrs	r3, 7
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <vfprintf+0x204>
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	08 c0       	rjmp	.+16     	; 0x1c6c <vfprintf+0x214>
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	07 2e       	mov	r0, r23
    1c62:	00 0c       	add	r0, r0
    1c64:	88 0b       	sbc	r24, r24
    1c66:	99 0b       	sbc	r25, r25
    1c68:	0e 5f       	subi	r16, 0xFE	; 254
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	f3 2d       	mov	r31, r3
    1c6e:	ff 76       	andi	r31, 0x6F	; 111
    1c70:	3f 2e       	mov	r3, r31
    1c72:	97 ff       	sbrs	r25, 7
    1c74:	09 c0       	rjmp	.+18     	; 0x1c88 <vfprintf+0x230>
    1c76:	90 95       	com	r25
    1c78:	80 95       	com	r24
    1c7a:	70 95       	com	r23
    1c7c:	61 95       	neg	r22
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	8f 4f       	sbci	r24, 0xFF	; 255
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	f0 68       	ori	r31, 0x80	; 128
    1c86:	3f 2e       	mov	r3, r31
    1c88:	2a e0       	ldi	r18, 0x0A	; 10
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	a3 01       	movw	r20, r6
    1c8e:	33 d1       	rcall	.+614    	; 0x1ef6 <__ultoa_invert>
    1c90:	88 2e       	mov	r8, r24
    1c92:	86 18       	sub	r8, r6
    1c94:	44 c0       	rjmp	.+136    	; 0x1d1e <vfprintf+0x2c6>
    1c96:	85 37       	cpi	r24, 0x75	; 117
    1c98:	31 f4       	brne	.+12     	; 0x1ca6 <vfprintf+0x24e>
    1c9a:	23 2d       	mov	r18, r3
    1c9c:	2f 7e       	andi	r18, 0xEF	; 239
    1c9e:	b2 2e       	mov	r11, r18
    1ca0:	2a e0       	ldi	r18, 0x0A	; 10
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	25 c0       	rjmp	.+74     	; 0x1cf0 <vfprintf+0x298>
    1ca6:	93 2d       	mov	r25, r3
    1ca8:	99 7f       	andi	r25, 0xF9	; 249
    1caa:	b9 2e       	mov	r11, r25
    1cac:	8f 36       	cpi	r24, 0x6F	; 111
    1cae:	c1 f0       	breq	.+48     	; 0x1ce0 <vfprintf+0x288>
    1cb0:	18 f4       	brcc	.+6      	; 0x1cb8 <vfprintf+0x260>
    1cb2:	88 35       	cpi	r24, 0x58	; 88
    1cb4:	79 f0       	breq	.+30     	; 0x1cd4 <vfprintf+0x27c>
    1cb6:	ae c0       	rjmp	.+348    	; 0x1e14 <vfprintf+0x3bc>
    1cb8:	80 37       	cpi	r24, 0x70	; 112
    1cba:	19 f0       	breq	.+6      	; 0x1cc2 <vfprintf+0x26a>
    1cbc:	88 37       	cpi	r24, 0x78	; 120
    1cbe:	21 f0       	breq	.+8      	; 0x1cc8 <vfprintf+0x270>
    1cc0:	a9 c0       	rjmp	.+338    	; 0x1e14 <vfprintf+0x3bc>
    1cc2:	e9 2f       	mov	r30, r25
    1cc4:	e0 61       	ori	r30, 0x10	; 16
    1cc6:	be 2e       	mov	r11, r30
    1cc8:	b4 fe       	sbrs	r11, 4
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <vfprintf+0x28e>
    1ccc:	fb 2d       	mov	r31, r11
    1cce:	f4 60       	ori	r31, 0x04	; 4
    1cd0:	bf 2e       	mov	r11, r31
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <vfprintf+0x28e>
    1cd4:	34 fe       	sbrs	r3, 4
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <vfprintf+0x294>
    1cd8:	29 2f       	mov	r18, r25
    1cda:	26 60       	ori	r18, 0x06	; 6
    1cdc:	b2 2e       	mov	r11, r18
    1cde:	06 c0       	rjmp	.+12     	; 0x1cec <vfprintf+0x294>
    1ce0:	28 e0       	ldi	r18, 0x08	; 8
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	05 c0       	rjmp	.+10     	; 0x1cf0 <vfprintf+0x298>
    1ce6:	20 e1       	ldi	r18, 0x10	; 16
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <vfprintf+0x298>
    1cec:	20 e1       	ldi	r18, 0x10	; 16
    1cee:	32 e0       	ldi	r19, 0x02	; 2
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	b7 fe       	sbrs	r11, 7
    1cf4:	07 c0       	rjmp	.+14     	; 0x1d04 <vfprintf+0x2ac>
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	0c 5f       	subi	r16, 0xFC	; 252
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <vfprintf+0x2b8>
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 5f       	subi	r16, 0xFE	; 254
    1d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d10:	a3 01       	movw	r20, r6
    1d12:	f1 d0       	rcall	.+482    	; 0x1ef6 <__ultoa_invert>
    1d14:	88 2e       	mov	r8, r24
    1d16:	86 18       	sub	r8, r6
    1d18:	fb 2d       	mov	r31, r11
    1d1a:	ff 77       	andi	r31, 0x7F	; 127
    1d1c:	3f 2e       	mov	r3, r31
    1d1e:	36 fe       	sbrs	r3, 6
    1d20:	0d c0       	rjmp	.+26     	; 0x1d3c <vfprintf+0x2e4>
    1d22:	23 2d       	mov	r18, r3
    1d24:	2e 7f       	andi	r18, 0xFE	; 254
    1d26:	a2 2e       	mov	r10, r18
    1d28:	89 14       	cp	r8, r9
    1d2a:	58 f4       	brcc	.+22     	; 0x1d42 <vfprintf+0x2ea>
    1d2c:	34 fe       	sbrs	r3, 4
    1d2e:	0b c0       	rjmp	.+22     	; 0x1d46 <vfprintf+0x2ee>
    1d30:	32 fc       	sbrc	r3, 2
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <vfprintf+0x2ee>
    1d34:	83 2d       	mov	r24, r3
    1d36:	8e 7e       	andi	r24, 0xEE	; 238
    1d38:	a8 2e       	mov	r10, r24
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <vfprintf+0x2ee>
    1d3c:	b8 2c       	mov	r11, r8
    1d3e:	a3 2c       	mov	r10, r3
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <vfprintf+0x2f0>
    1d42:	b8 2c       	mov	r11, r8
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <vfprintf+0x2f0>
    1d46:	b9 2c       	mov	r11, r9
    1d48:	a4 fe       	sbrs	r10, 4
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <vfprintf+0x312>
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e8 0d       	add	r30, r8
    1d50:	f1 1d       	adc	r31, r1
    1d52:	80 81       	ld	r24, Z
    1d54:	80 33       	cpi	r24, 0x30	; 48
    1d56:	21 f4       	brne	.+8      	; 0x1d60 <vfprintf+0x308>
    1d58:	9a 2d       	mov	r25, r10
    1d5a:	99 7e       	andi	r25, 0xE9	; 233
    1d5c:	a9 2e       	mov	r10, r25
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <vfprintf+0x31a>
    1d60:	a2 fe       	sbrs	r10, 2
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <vfprintf+0x318>
    1d64:	b3 94       	inc	r11
    1d66:	b3 94       	inc	r11
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <vfprintf+0x31a>
    1d6a:	8a 2d       	mov	r24, r10
    1d6c:	86 78       	andi	r24, 0x86	; 134
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <vfprintf+0x31a>
    1d70:	b3 94       	inc	r11
    1d72:	a3 fc       	sbrc	r10, 3
    1d74:	10 c0       	rjmp	.+32     	; 0x1d96 <vfprintf+0x33e>
    1d76:	a0 fe       	sbrs	r10, 0
    1d78:	06 c0       	rjmp	.+12     	; 0x1d86 <vfprintf+0x32e>
    1d7a:	b2 14       	cp	r11, r2
    1d7c:	80 f4       	brcc	.+32     	; 0x1d9e <vfprintf+0x346>
    1d7e:	28 0c       	add	r2, r8
    1d80:	92 2c       	mov	r9, r2
    1d82:	9b 18       	sub	r9, r11
    1d84:	0d c0       	rjmp	.+26     	; 0x1da0 <vfprintf+0x348>
    1d86:	b2 14       	cp	r11, r2
    1d88:	58 f4       	brcc	.+22     	; 0x1da0 <vfprintf+0x348>
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	76 d0       	rcall	.+236    	; 0x1e7e <fputc>
    1d92:	b3 94       	inc	r11
    1d94:	f8 cf       	rjmp	.-16     	; 0x1d86 <vfprintf+0x32e>
    1d96:	b2 14       	cp	r11, r2
    1d98:	18 f4       	brcc	.+6      	; 0x1da0 <vfprintf+0x348>
    1d9a:	2b 18       	sub	r2, r11
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x34a>
    1d9e:	98 2c       	mov	r9, r8
    1da0:	21 2c       	mov	r2, r1
    1da2:	a4 fe       	sbrs	r10, 4
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <vfprintf+0x36c>
    1da6:	b6 01       	movw	r22, r12
    1da8:	80 e3       	ldi	r24, 0x30	; 48
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	68 d0       	rcall	.+208    	; 0x1e7e <fputc>
    1dae:	a2 fe       	sbrs	r10, 2
    1db0:	16 c0       	rjmp	.+44     	; 0x1dde <vfprintf+0x386>
    1db2:	a1 fc       	sbrc	r10, 1
    1db4:	03 c0       	rjmp	.+6      	; 0x1dbc <vfprintf+0x364>
    1db6:	88 e7       	ldi	r24, 0x78	; 120
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <vfprintf+0x368>
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <vfprintf+0x384>
    1dc4:	8a 2d       	mov	r24, r10
    1dc6:	86 78       	andi	r24, 0x86	; 134
    1dc8:	51 f0       	breq	.+20     	; 0x1dde <vfprintf+0x386>
    1dca:	a1 fe       	sbrs	r10, 1
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <vfprintf+0x37a>
    1dce:	8b e2       	ldi	r24, 0x2B	; 43
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <vfprintf+0x37c>
    1dd2:	80 e2       	ldi	r24, 0x20	; 32
    1dd4:	a7 fc       	sbrc	r10, 7
    1dd6:	8d e2       	ldi	r24, 0x2D	; 45
    1dd8:	b6 01       	movw	r22, r12
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	50 d0       	rcall	.+160    	; 0x1e7e <fputc>
    1dde:	89 14       	cp	r8, r9
    1de0:	30 f4       	brcc	.+12     	; 0x1dee <vfprintf+0x396>
    1de2:	b6 01       	movw	r22, r12
    1de4:	80 e3       	ldi	r24, 0x30	; 48
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	4a d0       	rcall	.+148    	; 0x1e7e <fputc>
    1dea:	9a 94       	dec	r9
    1dec:	f8 cf       	rjmp	.-16     	; 0x1dde <vfprintf+0x386>
    1dee:	8a 94       	dec	r8
    1df0:	f3 01       	movw	r30, r6
    1df2:	e8 0d       	add	r30, r8
    1df4:	f1 1d       	adc	r31, r1
    1df6:	80 81       	ld	r24, Z
    1df8:	b6 01       	movw	r22, r12
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	40 d0       	rcall	.+128    	; 0x1e7e <fputc>
    1dfe:	81 10       	cpse	r8, r1
    1e00:	f6 cf       	rjmp	.-20     	; 0x1dee <vfprintf+0x396>
    1e02:	22 20       	and	r2, r2
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <vfprintf+0x3b0>
    1e06:	4e ce       	rjmp	.-868    	; 0x1aa4 <vfprintf+0x4c>
    1e08:	b6 01       	movw	r22, r12
    1e0a:	80 e2       	ldi	r24, 0x20	; 32
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	37 d0       	rcall	.+110    	; 0x1e7e <fputc>
    1e10:	2a 94       	dec	r2
    1e12:	f7 cf       	rjmp	.-18     	; 0x1e02 <vfprintf+0x3aa>
    1e14:	f6 01       	movw	r30, r12
    1e16:	86 81       	ldd	r24, Z+6	; 0x06
    1e18:	97 81       	ldd	r25, Z+7	; 0x07
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <vfprintf+0x3c8>
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	9f ef       	ldi	r25, 0xFF	; 255
    1e20:	2b 96       	adiw	r28, 0x0b	; 11
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	f8 94       	cli
    1e26:	de bf       	out	0x3e, r29	; 62
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	ef 90       	pop	r14
    1e38:	df 90       	pop	r13
    1e3a:	cf 90       	pop	r12
    1e3c:	bf 90       	pop	r11
    1e3e:	af 90       	pop	r10
    1e40:	9f 90       	pop	r9
    1e42:	8f 90       	pop	r8
    1e44:	7f 90       	pop	r7
    1e46:	6f 90       	pop	r6
    1e48:	5f 90       	pop	r5
    1e4a:	4f 90       	pop	r4
    1e4c:	3f 90       	pop	r3
    1e4e:	2f 90       	pop	r2
    1e50:	08 95       	ret

00001e52 <strnlen_P>:
    1e52:	fc 01       	movw	r30, r24
    1e54:	05 90       	lpm	r0, Z+
    1e56:	61 50       	subi	r22, 0x01	; 1
    1e58:	70 40       	sbci	r23, 0x00	; 0
    1e5a:	01 10       	cpse	r0, r1
    1e5c:	d8 f7       	brcc	.-10     	; 0x1e54 <strnlen_P+0x2>
    1e5e:	80 95       	com	r24
    1e60:	90 95       	com	r25
    1e62:	8e 0f       	add	r24, r30
    1e64:	9f 1f       	adc	r25, r31
    1e66:	08 95       	ret

00001e68 <strnlen>:
    1e68:	fc 01       	movw	r30, r24
    1e6a:	61 50       	subi	r22, 0x01	; 1
    1e6c:	70 40       	sbci	r23, 0x00	; 0
    1e6e:	01 90       	ld	r0, Z+
    1e70:	01 10       	cpse	r0, r1
    1e72:	d8 f7       	brcc	.-10     	; 0x1e6a <strnlen+0x2>
    1e74:	80 95       	com	r24
    1e76:	90 95       	com	r25
    1e78:	8e 0f       	add	r24, r30
    1e7a:	9f 1f       	adc	r25, r31
    1e7c:	08 95       	ret

00001e7e <fputc>:
    1e7e:	0f 93       	push	r16
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	fb 01       	movw	r30, r22
    1e88:	23 81       	ldd	r18, Z+3	; 0x03
    1e8a:	21 fd       	sbrc	r18, 1
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <fputc+0x16>
    1e8e:	8f ef       	ldi	r24, 0xFF	; 255
    1e90:	9f ef       	ldi	r25, 0xFF	; 255
    1e92:	2c c0       	rjmp	.+88     	; 0x1eec <fputc+0x6e>
    1e94:	22 ff       	sbrs	r18, 2
    1e96:	16 c0       	rjmp	.+44     	; 0x1ec4 <fputc+0x46>
    1e98:	46 81       	ldd	r20, Z+6	; 0x06
    1e9a:	57 81       	ldd	r21, Z+7	; 0x07
    1e9c:	24 81       	ldd	r18, Z+4	; 0x04
    1e9e:	35 81       	ldd	r19, Z+5	; 0x05
    1ea0:	42 17       	cp	r20, r18
    1ea2:	53 07       	cpc	r21, r19
    1ea4:	44 f4       	brge	.+16     	; 0x1eb6 <fputc+0x38>
    1ea6:	a0 81       	ld	r26, Z
    1ea8:	b1 81       	ldd	r27, Z+1	; 0x01
    1eaa:	9d 01       	movw	r18, r26
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	31 83       	std	Z+1, r19	; 0x01
    1eb2:	20 83       	st	Z, r18
    1eb4:	8c 93       	st	X, r24
    1eb6:	26 81       	ldd	r18, Z+6	; 0x06
    1eb8:	37 81       	ldd	r19, Z+7	; 0x07
    1eba:	2f 5f       	subi	r18, 0xFF	; 255
    1ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ebe:	37 83       	std	Z+7, r19	; 0x07
    1ec0:	26 83       	std	Z+6, r18	; 0x06
    1ec2:	14 c0       	rjmp	.+40     	; 0x1eec <fputc+0x6e>
    1ec4:	8b 01       	movw	r16, r22
    1ec6:	ec 01       	movw	r28, r24
    1ec8:	fb 01       	movw	r30, r22
    1eca:	00 84       	ldd	r0, Z+8	; 0x08
    1ecc:	f1 85       	ldd	r31, Z+9	; 0x09
    1ece:	e0 2d       	mov	r30, r0
    1ed0:	09 95       	icall
    1ed2:	89 2b       	or	r24, r25
    1ed4:	e1 f6       	brne	.-72     	; 0x1e8e <fputc+0x10>
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	16 96       	adiw	r26, 0x06	; 6
    1eda:	8d 91       	ld	r24, X+
    1edc:	9c 91       	ld	r25, X
    1ede:	17 97       	sbiw	r26, 0x07	; 7
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	17 96       	adiw	r26, 0x07	; 7
    1ee4:	9c 93       	st	X, r25
    1ee6:	8e 93       	st	-X, r24
    1ee8:	16 97       	sbiw	r26, 0x06	; 6
    1eea:	ce 01       	movw	r24, r28
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	08 95       	ret

00001ef6 <__ultoa_invert>:
    1ef6:	fa 01       	movw	r30, r20
    1ef8:	aa 27       	eor	r26, r26
    1efa:	28 30       	cpi	r18, 0x08	; 8
    1efc:	51 f1       	breq	.+84     	; 0x1f52 <__ultoa_invert+0x5c>
    1efe:	20 31       	cpi	r18, 0x10	; 16
    1f00:	81 f1       	breq	.+96     	; 0x1f62 <__ultoa_invert+0x6c>
    1f02:	e8 94       	clt
    1f04:	6f 93       	push	r22
    1f06:	6e 7f       	andi	r22, 0xFE	; 254
    1f08:	6e 5f       	subi	r22, 0xFE	; 254
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	af 4f       	sbci	r26, 0xFF	; 255
    1f12:	b1 e0       	ldi	r27, 0x01	; 1
    1f14:	3e d0       	rcall	.+124    	; 0x1f92 <__ultoa_invert+0x9c>
    1f16:	b4 e0       	ldi	r27, 0x04	; 4
    1f18:	3c d0       	rcall	.+120    	; 0x1f92 <__ultoa_invert+0x9c>
    1f1a:	67 0f       	add	r22, r23
    1f1c:	78 1f       	adc	r23, r24
    1f1e:	89 1f       	adc	r24, r25
    1f20:	9a 1f       	adc	r25, r26
    1f22:	a1 1d       	adc	r26, r1
    1f24:	68 0f       	add	r22, r24
    1f26:	79 1f       	adc	r23, r25
    1f28:	8a 1f       	adc	r24, r26
    1f2a:	91 1d       	adc	r25, r1
    1f2c:	a1 1d       	adc	r26, r1
    1f2e:	6a 0f       	add	r22, r26
    1f30:	71 1d       	adc	r23, r1
    1f32:	81 1d       	adc	r24, r1
    1f34:	91 1d       	adc	r25, r1
    1f36:	a1 1d       	adc	r26, r1
    1f38:	20 d0       	rcall	.+64     	; 0x1f7a <__ultoa_invert+0x84>
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <__ultoa_invert+0x48>
    1f3c:	68 94       	set
    1f3e:	3f 91       	pop	r19
    1f40:	2a e0       	ldi	r18, 0x0A	; 10
    1f42:	26 9f       	mul	r18, r22
    1f44:	11 24       	eor	r1, r1
    1f46:	30 19       	sub	r19, r0
    1f48:	30 5d       	subi	r19, 0xD0	; 208
    1f4a:	31 93       	st	Z+, r19
    1f4c:	de f6       	brtc	.-74     	; 0x1f04 <__ultoa_invert+0xe>
    1f4e:	cf 01       	movw	r24, r30
    1f50:	08 95       	ret
    1f52:	46 2f       	mov	r20, r22
    1f54:	47 70       	andi	r20, 0x07	; 7
    1f56:	40 5d       	subi	r20, 0xD0	; 208
    1f58:	41 93       	st	Z+, r20
    1f5a:	b3 e0       	ldi	r27, 0x03	; 3
    1f5c:	0f d0       	rcall	.+30     	; 0x1f7c <__ultoa_invert+0x86>
    1f5e:	c9 f7       	brne	.-14     	; 0x1f52 <__ultoa_invert+0x5c>
    1f60:	f6 cf       	rjmp	.-20     	; 0x1f4e <__ultoa_invert+0x58>
    1f62:	46 2f       	mov	r20, r22
    1f64:	4f 70       	andi	r20, 0x0F	; 15
    1f66:	40 5d       	subi	r20, 0xD0	; 208
    1f68:	4a 33       	cpi	r20, 0x3A	; 58
    1f6a:	18 f0       	brcs	.+6      	; 0x1f72 <__ultoa_invert+0x7c>
    1f6c:	49 5d       	subi	r20, 0xD9	; 217
    1f6e:	31 fd       	sbrc	r19, 1
    1f70:	40 52       	subi	r20, 0x20	; 32
    1f72:	41 93       	st	Z+, r20
    1f74:	02 d0       	rcall	.+4      	; 0x1f7a <__ultoa_invert+0x84>
    1f76:	a9 f7       	brne	.-22     	; 0x1f62 <__ultoa_invert+0x6c>
    1f78:	ea cf       	rjmp	.-44     	; 0x1f4e <__ultoa_invert+0x58>
    1f7a:	b4 e0       	ldi	r27, 0x04	; 4
    1f7c:	a6 95       	lsr	r26
    1f7e:	97 95       	ror	r25
    1f80:	87 95       	ror	r24
    1f82:	77 95       	ror	r23
    1f84:	67 95       	ror	r22
    1f86:	ba 95       	dec	r27
    1f88:	c9 f7       	brne	.-14     	; 0x1f7c <__ultoa_invert+0x86>
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	71 05       	cpc	r23, r1
    1f90:	08 95       	ret
    1f92:	9b 01       	movw	r18, r22
    1f94:	ac 01       	movw	r20, r24
    1f96:	0a 2e       	mov	r0, r26
    1f98:	06 94       	lsr	r0
    1f9a:	57 95       	ror	r21
    1f9c:	47 95       	ror	r20
    1f9e:	37 95       	ror	r19
    1fa0:	27 95       	ror	r18
    1fa2:	ba 95       	dec	r27
    1fa4:	c9 f7       	brne	.-14     	; 0x1f98 <__ultoa_invert+0xa2>
    1fa6:	62 0f       	add	r22, r18
    1fa8:	73 1f       	adc	r23, r19
    1faa:	84 1f       	adc	r24, r20
    1fac:	95 1f       	adc	r25, r21
    1fae:	a0 1d       	adc	r26, r0
    1fb0:	08 95       	ret

00001fb2 <_exit>:
    1fb2:	f8 94       	cli

00001fb4 <__stop_program>:
    1fb4:	ff cf       	rjmp	.-2      	; 0x1fb4 <__stop_program>
