
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00001b00  00001b94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800300  00800300  00001d94  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000469b  00000000  00000000  00002138  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ac2  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003146  00000000  00000000  00008295  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000914f  00000000  00000000  0000bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d1  00000000  00000000  00014cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  000165ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  000168a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c4       	rjmp	.+2244   	; 0x8fa <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c7       	rjmp	.+3776   	; 0xf06 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 e0       	ldi	r30, 0x00	; 0
      ac:	fb e1       	ldi	r31, 0x1B	; 27
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 30       	cpi	r26, 0x00	; 0
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a2 38       	cpi	r26, 0x82	; 130
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	96 d2       	rcall	.+1324   	; 0x5fc <main>
      d0:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <_exit>

000000d4 <__bad_interrupt>:
      d4:	61 c3       	rjmp	.+1730   	; 0x798 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     120:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     12c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 20 03 	sts	0x0320, r19	; 0x800320 <g_ADCCount+0x1>
     13a:	20 93 1f 03 	sts	0x031F, r18	; 0x80031f <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e5 5f       	subi	r30, 0xF5	; 245
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     162:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     19a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     1a6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     1aa:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     1ae:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     1b2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2351>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     1cc:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     1d0:	00 d2       	rcall	.+1024   	; 0x5d2 <LL_UpdateStatus>
     1d2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2352>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_timer+0x23>
     1ec:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2353>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_timer+0x1a>
     206:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2351>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     220:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     22c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     230:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <STAGE2+0x1>
     234:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	85 d1       	rcall	.+778    	; 0x546 <LL_Next>
     23c:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <STAGE2+0x1>
     240:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2352>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	1a c0       	rjmp	.+52     	; 0x28c <SERVER_Task+0x102>
     258:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     25c:	81 11       	cpse	r24, r1
     25e:	13 c0       	rjmp	.+38     	; 0x286 <SERVER_Task+0xfc>
     260:	63 e0       	ldi	r22, 0x03	; 3
     262:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     266:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     26a:	b3 d1       	rcall	.+870    	; 0x5d2 <LL_UpdateStatus>
     26c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     270:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     274:	68 d1       	rcall	.+720    	; 0x546 <LL_Next>
     276:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <HEAD+0x1>
     27a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <HEAD>
     27e:	89 d1       	rcall	.+786    	; 0x592 <LL_GetClass>
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	09 f4       	brne	.+2      	; 0x286 <SERVER_Task+0xfc>
     284:	c1 d5       	rcall	.+2946   	; 0xe08 <SYS_Rampdown>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2353>
     28c:	08 95       	ret

0000028e <ADC_Task>:
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	cf 93       	push	r28
     298:	eb e0       	ldi	r30, 0x0B	; 11
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	a0 81       	ld	r26, Z
     29e:	b1 81       	ldd	r27, Z+1	; 0x01
     2a0:	60 81       	ld	r22, Z
     2a2:	71 81       	ldd	r23, Z+1	; 0x01
     2a4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <ticks.2361>
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <ticks.2361>
     2ae:	c1 2c       	mov	r12, r1
     2b0:	d1 2c       	mov	r13, r1
     2b2:	76 01       	movw	r14, r12
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	4f b7       	in	r20, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e5 5f       	subi	r30, 0xF5	; 245
     2c4:	fc 4f       	sbci	r31, 0xFC	; 252
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	c2 0e       	add	r12, r18
     2cc:	d3 1e       	adc	r13, r19
     2ce:	e1 1c       	adc	r14, r1
     2d0:	f1 1c       	adc	r15, r1
     2d2:	20 81       	ld	r18, Z
     2d4:	31 81       	ldd	r19, Z+1	; 0x01
     2d6:	26 17       	cp	r18, r22
     2d8:	37 07       	cpc	r19, r23
     2da:	38 f4       	brcc	.+14     	; 0x2ea <ADC_Task+0x5c>
     2dc:	fc 01       	movw	r30, r24
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	e5 5f       	subi	r30, 0xF5	; 245
     2e4:	fc 4f       	sbci	r31, 0xFC	; 252
     2e6:	60 81       	ld	r22, Z
     2e8:	71 81       	ldd	r23, Z+1	; 0x01
     2ea:	fc 01       	movw	r30, r24
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e5 5f       	subi	r30, 0xF5	; 245
     2f2:	fc 4f       	sbci	r31, 0xFC	; 252
     2f4:	20 81       	ld	r18, Z
     2f6:	31 81       	ldd	r19, Z+1	; 0x01
     2f8:	a2 17       	cp	r26, r18
     2fa:	b3 07       	cpc	r27, r19
     2fc:	08 f0       	brcs	.+2      	; 0x300 <ADC_Task+0x72>
     2fe:	4d c0       	rjmp	.+154    	; 0x39a <ADC_Task+0x10c>
     300:	fc 01       	movw	r30, r24
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	e5 5f       	subi	r30, 0xF5	; 245
     308:	fc 4f       	sbci	r31, 0xFC	; 252
     30a:	a0 81       	ld	r26, Z
     30c:	b1 81       	ldd	r27, Z+1	; 0x01
     30e:	45 c0       	rjmp	.+138    	; 0x39a <ADC_Task+0x10c>
     310:	8f b7       	in	r24, 0x3f	; 63
     312:	f8 94       	cli
     314:	ca 1a       	sub	r12, r26
     316:	db 0a       	sbc	r13, r27
     318:	e1 08       	sbc	r14, r1
     31a:	f1 08       	sbc	r15, r1
     31c:	c6 1a       	sub	r12, r22
     31e:	d7 0a       	sbc	r13, r23
     320:	e1 08       	sbc	r14, r1
     322:	f1 08       	sbc	r15, r1
     324:	f6 94       	lsr	r15
     326:	e7 94       	ror	r14
     328:	d7 94       	ror	r13
     32a:	c7 94       	ror	r12
     32c:	f6 94       	lsr	r15
     32e:	e7 94       	ror	r14
     330:	d7 94       	ror	r13
     332:	c7 94       	ror	r12
     334:	8f bf       	out	0x3f, r24	; 63
     336:	cf b7       	in	r28, 0x3f	; 63
     338:	f8 94       	cli
     33a:	d7 01       	movw	r26, r14
     33c:	c6 01       	movw	r24, r12
     33e:	0b 97       	sbiw	r24, 0x0b	; 11
     340:	a1 09       	sbc	r26, r1
     342:	b1 09       	sbc	r27, r1
     344:	8d 3d       	cpi	r24, 0xDD	; 221
     346:	93 40       	sbci	r25, 0x03	; 3
     348:	a1 05       	cpc	r26, r1
     34a:	b1 05       	cpc	r27, r1
     34c:	a0 f4       	brcc	.+40     	; 0x376 <ADC_Task+0xe8>
     34e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     352:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     356:	22 d1       	rcall	.+580    	; 0x59c <LL_GetRefl>
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	c8 16       	cp	r12, r24
     35e:	d9 06       	cpc	r13, r25
     360:	ea 06       	cpc	r14, r26
     362:	fb 06       	cpc	r15, r27
     364:	40 f4       	brcc	.+16     	; 0x376 <ADC_Task+0xe8>
     366:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     36a:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	11 f0       	breq	.+4      	; 0x376 <ADC_Task+0xe8>
     372:	b6 01       	movw	r22, r12
     374:	1e d1       	rcall	.+572    	; 0x5b2 <LL_UpdateRefl>
     376:	cf bf       	out	0x3f, r28	; 63
     378:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount+0x1>
     37c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_ADCCount>
     380:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_timer+0x11>
     384:	66 9b       	sbis	0x0c, 6	; 12
     386:	06 c0       	rjmp	.+12     	; 0x394 <ADC_Task+0x106>
     388:	ea e7       	ldi	r30, 0x7A	; 122
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	80 64       	ori	r24, 0x40	; 64
     390:	80 83       	st	Z, r24
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <ADC_Task+0x11a>
     394:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <ticks.2361>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <ADC_Task+0x11a>
     39a:	4f bf       	out	0x3f, r20	; 63
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	86 30       	cpi	r24, 0x06	; 6
     3a0:	91 05       	cpc	r25, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <ADC_Task+0x118>
     3a4:	89 cf       	rjmp	.-238    	; 0x2b8 <ADC_Task+0x2a>
     3a6:	b4 cf       	rjmp	.-152    	; 0x310 <ADC_Task+0x82>
     3a8:	cf 91       	pop	r28
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <MAG_Task>:
     3b4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2383>
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <tick.2383>
     3be:	64 99       	sbic	0x0c, 4	; 12
     3c0:	1a c0       	rjmp	.+52     	; 0x3f6 <MAG_Task+0x42>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3c8:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3cc:	02 d1       	rcall	.+516    	; 0x5d2 <LL_UpdateStatus>
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3d4:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3d8:	f2 d0       	rcall	.+484    	; 0x5be <LL_UpdateMag>
     3da:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3de:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3e2:	b1 d0       	rcall	.+354    	; 0x546 <LL_Next>
     3e4:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     3e8:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     3ec:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2383>
     3f0:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_timer+0x1a>
     3f4:	08 95       	ret
     3f6:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2383>
     3fa:	8d 33       	cpi	r24, 0x3D	; 61
     3fc:	c8 f0       	brcs	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     404:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     408:	e4 d0       	rcall	.+456    	; 0x5d2 <LL_UpdateStatus>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     410:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     414:	d4 d0       	rcall	.+424    	; 0x5be <LL_UpdateMag>
     416:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     41a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     41e:	93 d0       	rcall	.+294    	; 0x546 <LL_Next>
     420:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     424:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     428:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2383>
     42c:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_timer+0x1a>
     430:	08 95       	ret

00000432 <EXIT_Task>:
     432:	cf 93       	push	r28
     434:	c0 91 76 03 	lds	r28, 0x0376	; 0x800376 <stepper+0x4>
     438:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     43c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     440:	a8 d0       	rcall	.+336    	; 0x592 <LL_GetClass>
     442:	e8 2f       	mov	r30, r24
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	ea 5f       	subi	r30, 0xFA	; 250
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	80 81       	ld	r24, Z
     44c:	c8 17       	cp	r28, r24
     44e:	19 f0       	breq	.+6      	; 0x456 <EXIT_Task+0x24>
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_ExitBuffer>
     456:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <g_ExitBuffer>
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	b9 f0       	breq	.+46     	; 0x48c <EXIT_Task+0x5a>
     45e:	c0 91 76 03 	lds	r28, 0x0376	; 0x800376 <stepper+0x4>
     462:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     466:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     46a:	93 d0       	rcall	.+294    	; 0x592 <LL_GetClass>
     46c:	e8 2f       	mov	r30, r24
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	ea 5f       	subi	r30, 0xFA	; 250
     472:	fe 4f       	sbci	r31, 0xFE	; 254
     474:	80 81       	ld	r24, Z
     476:	c8 13       	cpse	r28, r24
     478:	06 c0       	rjmp	.+12     	; 0x486 <EXIT_Task+0x54>
     47a:	80 e8       	ldi	r24, 0x80	; 128
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	9e d1       	rcall	.+828    	; 0x7bc <PWM>
     480:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_timer+0x23>
     484:	03 c0       	rjmp	.+6      	; 0x48c <EXIT_Task+0x5a>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	98 d1       	rcall	.+816    	; 0x7bc <PWM>
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <BTN_Task>:
     490:	89 b1       	in	r24, 0x09	; 9
     492:	83 70       	andi	r24, 0x03	; 3
     494:	b9 f0       	breq	.+46     	; 0x4c4 <BTN_Task+0x34>
     496:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
     4a0:	83 30       	cpi	r24, 0x03	; 3
     4a2:	90 f0       	brcs	.+36     	; 0x4c8 <BTN_Task+0x38>
     4a4:	89 b1       	in	r24, 0x09	; 9
     4a6:	83 70       	andi	r24, 0x03	; 3
     4a8:	79 f0       	breq	.+30     	; 0x4c8 <BTN_Task+0x38>
     4aa:	89 b1       	in	r24, 0x09	; 9
     4ac:	83 70       	andi	r24, 0x03	; 3
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	19 f4       	brne	.+6      	; 0x4b8 <BTN_Task+0x28>
     4b2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <g_PauseRequest>
     4b6:	08 95       	ret
     4b8:	89 b1       	in	r24, 0x09	; 9
     4ba:	83 70       	andi	r24, 0x03	; 3
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	21 f4       	brne	.+8      	; 0x4c8 <BTN_Task+0x38>
     4c0:	a3 c4       	rjmp	.+2374   	; 0xe08 <SYS_Rampdown>
     4c2:	08 95       	ret
     4c4:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
     4c8:	08 95       	ret

000004ca <WATCHDOG_Task>:
     4ca:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <g_WDTimeout>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	08 f0       	brcs	.+2      	; 0x4d4 <WATCHDOG_Task+0xa>
     4d2:	9a d4       	rcall	.+2356   	; 0xe08 <SYS_Rampdown>
     4d4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <g_WDTimeout>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <g_WDTimeout>
     4de:	08 95       	ret

000004e0 <D_Blinky>:
     4e0:	9b b1       	in	r25, 0x0b	; 11
     4e2:	80 ea       	ldi	r24, 0xA0	; 160
     4e4:	89 27       	eor	r24, r25
     4e6:	8b b9       	out	0x0b, r24	; 11
     4e8:	08 95       	ret

000004ea <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	g_Timer++;
     4ea:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_Timer>
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <g_Timer>
     4f4:	08 95       	ret

000004f6 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	7c 01       	movw	r14, r24
     502:	16 2f       	mov	r17, r22
     504:	d4 2f       	mov	r29, r20
     506:	c2 2f       	mov	r28, r18
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	fb d6       	rcall	.+3574   	; 0x1304 <malloc>
     50e:	fc 01       	movw	r30, r24
     510:	f1 82       	std	Z+1, r15	; 0x01
     512:	e0 82       	st	Z, r14
     514:	12 83       	std	Z+2, r17	; 0x02
     516:	d3 83       	std	Z+3, r29	; 0x03
     518:	c4 83       	std	Z+4, r28	; 0x04
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	1f 91       	pop	r17
     520:	ff 90       	pop	r15
     522:	ef 90       	pop	r14
     524:	08 95       	ret

00000526 <LL_ItemListInit>:
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ec 01       	movw	r28, r24
     52c:	86 e0       	ldi	r24, 0x06	; 6
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	e9 d6       	rcall	.+3538   	; 0x1304 <malloc>
     532:	fc 01       	movw	r30, r24
     534:	d1 83       	std	Z+1, r29	; 0x01
     536:	c0 83       	st	Z, r28
     538:	15 82       	std	Z+5, r1	; 0x05
     53a:	14 82       	std	Z+4, r1	; 0x04
     53c:	13 82       	std	Z+3, r1	; 0x03
     53e:	12 82       	std	Z+2, r1	; 0x02
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <LL_Next>:
     546:	fc 01       	movw	r30, r24
     548:	82 81       	ldd	r24, Z+2	; 0x02
     54a:	93 81       	ldd	r25, Z+3	; 0x03
     54c:	08 95       	ret

0000054e <LL_AddBack>:
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
     554:	cb 01       	movw	r24, r22
     556:	01 c0       	rjmp	.+2      	; 0x55a <LL_AddBack+0xc>
     558:	e9 01       	movw	r28, r18
     55a:	2a 81       	ldd	r18, Y+2	; 0x02
     55c:	3b 81       	ldd	r19, Y+3	; 0x03
     55e:	21 15       	cp	r18, r1
     560:	31 05       	cpc	r19, r1
     562:	d1 f7       	brne	.-12     	; 0x558 <LL_AddBack+0xa>
     564:	e0 df       	rcall	.-64     	; 0x526 <LL_ItemListInit>
     566:	9b 83       	std	Y+3, r25	; 0x03
     568:	8a 83       	std	Y+2, r24	; 0x02
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <LL_Size>:
     570:	dc 01       	movw	r26, r24
     572:	12 96       	adiw	r26, 0x02	; 2
     574:	ed 91       	ld	r30, X+
     576:	fc 91       	ld	r31, X
     578:	13 97       	sbiw	r26, 0x03	; 3
     57a:	30 97       	sbiw	r30, 0x00	; 0
     57c:	41 f0       	breq	.+16     	; 0x58e <LL_Size+0x1e>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	02 80       	ldd	r0, Z+2	; 0x02
     584:	f3 81       	ldd	r31, Z+3	; 0x03
     586:	e0 2d       	mov	r30, r0
     588:	30 97       	sbiw	r30, 0x00	; 0
     58a:	d1 f7       	brne	.-12     	; 0x580 <LL_Size+0x10>
     58c:	08 95       	ret
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	08 95       	ret

00000592 <LL_GetClass>:
     592:	dc 01       	movw	r26, r24
     594:	ed 91       	ld	r30, X+
     596:	fc 91       	ld	r31, X
     598:	83 81       	ldd	r24, Z+3	; 0x03
     59a:	08 95       	ret

0000059c <LL_GetRefl>:
     59c:	dc 01       	movw	r26, r24
     59e:	ed 91       	ld	r30, X+
     5a0:	fc 91       	ld	r31, X
     5a2:	80 81       	ld	r24, Z
     5a4:	91 81       	ldd	r25, Z+1	; 0x01
     5a6:	08 95       	ret

000005a8 <LL_GetMag>:
     5a8:	dc 01       	movw	r26, r24
     5aa:	ed 91       	ld	r30, X+
     5ac:	fc 91       	ld	r31, X
     5ae:	82 81       	ldd	r24, Z+2	; 0x02
     5b0:	08 95       	ret

000005b2 <LL_UpdateRefl>:
     5b2:	dc 01       	movw	r26, r24
     5b4:	ed 91       	ld	r30, X+
     5b6:	fc 91       	ld	r31, X
     5b8:	71 83       	std	Z+1, r23	; 0x01
     5ba:	60 83       	st	Z, r22
     5bc:	08 95       	ret

000005be <LL_UpdateMag>:
     5be:	dc 01       	movw	r26, r24
     5c0:	ed 91       	ld	r30, X+
     5c2:	fc 91       	ld	r31, X
     5c4:	62 83       	std	Z+2, r22	; 0x02
     5c6:	08 95       	ret

000005c8 <LL_UpdateClass>:
     5c8:	dc 01       	movw	r26, r24
     5ca:	ed 91       	ld	r30, X+
     5cc:	fc 91       	ld	r31, X
     5ce:	63 83       	std	Z+3, r22	; 0x03
     5d0:	08 95       	ret

000005d2 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5d2:	dc 01       	movw	r26, r24
     5d4:	ed 91       	ld	r30, X+
     5d6:	fc 91       	ld	r31, X
     5d8:	64 83       	std	Z+4, r22	; 0x04
     5da:	08 95       	ret

000005dc <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5dc:	dc 01       	movw	r26, r24
     5de:	ed 91       	ld	r30, X+
     5e0:	fc 91       	ld	r31, X
     5e2:	84 81       	ldd	r24, Z+4	; 0x04
     5e4:	08 95       	ret

000005e6 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     5ea:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     5ec:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     5ee:	80 ef       	ldi	r24, 0xF0	; 240
     5f0:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     5f2:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     5f4:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	08 95       	ret

000005fc <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     5fc:	88 d2       	rcall	.+1296   	; 0xb0e <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     5fe:	89 b1       	in	r24, 0x09	; 9
     600:	83 70       	andi	r24, 0x03	; 3
     602:	e9 f7       	brne	.-6      	; 0x5fe <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     604:	8b e1       	ldi	r24, 0x1B	; 27
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	7e d5       	rcall	.+2812   	; 0x1106 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     60a:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	45 ec       	ldi	r20, 0xC5	; 197
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fb d4       	rcall	.+2550   	; 0x1014 <TIMER_Create>
		_timer[0].state = READY;
     61e:	c7 e2       	ldi	r28, 0x27	; 39
     620:	d3 e0       	ldi	r29, 0x03	; 3
     622:	12 e0       	ldi	r17, 0x02	; 2
     624:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	47 e4       	ldi	r20, 0x47	; 71
     62c:	51 e0       	ldi	r21, 0x01	; 1
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	ee d4       	rcall	.+2524   	; 0x1014 <TIMER_Create>
		_timer[1].state = BLOCKED;
     638:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	4a ed       	ldi	r20, 0xDA	; 218
     640:	51 e0       	ldi	r21, 0x01	; 1
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	e4 d4       	rcall	.+2504   	; 0x1014 <TIMER_Create>
		_timer[2].state = BLOCKED;
     64c:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	49 e1       	ldi	r20, 0x19	; 25
     654:	52 e0       	ldi	r21, 0x02	; 2
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	da d4       	rcall	.+2484   	; 0x1014 <TIMER_Create>
		_timer[3].state = BLOCKED;
     660:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(943, 1, ADD_Task, NULL);		// Item Enter Handling
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	45 e7       	ldi	r20, 0x75	; 117
     668:	52 e0       	ldi	r21, 0x02	; 2
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	8f ea       	ldi	r24, 0xAF	; 175
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	d0 d4       	rcall	.+2464   	; 0x1014 <TIMER_Create>
		_timer[4].state = BLOCKED;
     674:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	48 e4       	ldi	r20, 0x48	; 72
     67c:	52 e0       	ldi	r21, 0x02	; 2
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	84 e6       	ldi	r24, 0x64	; 100
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	c6 d4       	rcall	.+2444   	; 0x1014 <TIMER_Create>
		_timer[5].state = READY;
     688:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e7       	ldi	r20, 0x70	; 112
     690:	52 e0       	ldi	r21, 0x02	; 2
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 ed       	ldi	r24, 0xD0	; 208
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	bc d4       	rcall	.+2424   	; 0x1014 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     69c:	1e af       	std	Y+62, r17	; 0x3e
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	45 e6       	ldi	r20, 0x65	; 101
     6a4:	52 e0       	ldi	r21, 0x02	; 2
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     6ac:	93 e1       	ldi	r25, 0x13	; 19
     6ae:	b2 d4       	rcall	.+2404   	; 0x1014 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     6b0:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_timer+0x47>
     6b4:	8e e2       	ldi	r24, 0x2E	; 46
     6b6:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     6b8:	26 d5       	rcall	.+2636   	; 0x1106 <UART_SendString>
     6ba:	80 e8       	ldi	r24, 0x80	; 128
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	7e d0       	rcall	.+252    	; 0x7bc <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     6c0:	78 94       	sei
     6c2:	e1 2c       	mov	r14, r1
// 					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     6c4:	f1 2c       	mov	r15, r1
     6c6:	cc 24       	eor	r12, r12
     6c8:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6ca:	d1 2c       	mov	r13, r1
     6cc:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <g_PauseRequest>
     6d0:	88 23       	and	r24, r24
     6d2:	19 f0       	breq	.+6      	; 0x6da <main+0xde>
     6d4:	80 e4       	ldi	r24, 0x40	; 64
     6d6:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     6d8:	8e d2       	rcall	.+1308   	; 0xbf6 <SYS_Pause>
     6da:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     6de:	d0 91 06 03 	lds	r29, 0x0306	; 0x800306 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6e2:	20 97       	sbiw	r28, 0x00	; 0
     6e4:	99 f3       	breq	.-26     	; 0x6cc <main+0xd0>
     6e6:	20 97       	sbiw	r28, 0x00	; 0
     6e8:	09 f4       	brne	.+2      	; 0x6ec <main+0xf0>
     6ea:	4f c0       	rjmp	.+158    	; 0x78a <main+0x18e>
     6ec:	ce 01       	movw	r24, r28
     6ee:	51 df       	rcall	.-350    	; 0x592 <LL_GetClass>
     6f0:	84 30       	cpi	r24, 0x04	; 4
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <main+0xfa>
     6f4:	4a c0       	rjmp	.+148    	; 0x78a <main+0x18e>
     6f6:	ce 01       	movw	r24, r28
     6f8:	71 df       	rcall	.-286    	; 0x5dc <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	09 f0       	breq	.+2      	; 0x700 <main+0x104>
     6fe:	45 c0       	rjmp	.+138    	; 0x78a <main+0x18e>
     700:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     702:	4c df       	rcall	.-360    	; 0x59c <LL_GetRefl>
     704:	8c 01       	movw	r16, r24
     706:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     708:	4f df       	rcall	.-354    	; 0x5a8 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     70a:	88 23       	and	r24, r24
     70c:	91 f0       	breq	.+36     	; 0x732 <main+0x136>
     70e:	c8 01       	movw	r24, r16
     710:	44 97       	sbiw	r24, 0x14	; 20
     712:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     714:	91 05       	cpc	r25, r1
     716:	20 f4       	brcc	.+8      	; 0x720 <main+0x124>
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     71c:	55 df       	rcall	.-342    	; 0x5c8 <LL_UpdateClass>
     71e:	1a c0       	rjmp	.+52     	; 0x754 <main+0x158>
     720:	0c 52       	subi	r16, 0x2C	; 44
     722:	11 40       	sbci	r17, 0x01	; 1
     724:	0f 35       	cpi	r16, 0x5F	; 95
					{
						LL_UpdateClass(temp, STEEL);
     726:	11 40       	sbci	r17, 0x01	; 1
     728:	a8 f4       	brcc	.+42     	; 0x754 <main+0x158>
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     72e:	4c df       	rcall	.-360    	; 0x5c8 <LL_UpdateClass>
     730:	11 c0       	rjmp	.+34     	; 0x754 <main+0x158>
     732:	c8 01       	movw	r24, r16
     734:	89 58       	subi	r24, 0x89	; 137
     736:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     738:	0b 97       	sbiw	r24, 0x0b	; 11
     73a:	20 f4       	brcc	.+8      	; 0x744 <main+0x148>
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     740:	43 df       	rcall	.-378    	; 0x5c8 <LL_UpdateClass>
     742:	08 c0       	rjmp	.+16     	; 0x754 <main+0x158>
     744:	00 52       	subi	r16, 0x20	; 32
     746:	13 40       	sbci	r17, 0x03	; 3
     748:	07 39       	cpi	r16, 0x97	; 151
				{
					LL_UpdateClass(temp, BLACK);
     74a:	11 05       	cpc	r17, r1
     74c:	18 f4       	brcc	.+6      	; 0x754 <main+0x158>
     74e:	61 e0       	ldi	r22, 0x01	; 1
// 					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
				if(memory == 0)
     750:	ce 01       	movw	r24, r28
     752:	3a df       	rcall	.-396    	; 0x5c8 <LL_UpdateClass>
     754:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     756:	f1 04       	cpc	r15, r1
     758:	c1 f4       	brne	.+48     	; 0x78a <main+0x18e>
     75a:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     75e:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     762:	17 df       	rcall	.-466    	; 0x592 <LL_GetClass>
     764:	e8 2f       	mov	r30, r24
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	e1 5f       	subi	r30, 0xF1	; 241
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	10 81       	ld	r17, Z
     76e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     772:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     776:	0d df       	rcall	.-486    	; 0x592 <LL_GetClass>
     778:	e8 2f       	mov	r30, r24
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	e1 5f       	subi	r30, 0xF1	; 241
     77e:	fe 4f       	sbci	r31, 0xFE	; 254
     780:	80 81       	ld	r24, Z
     782:	61 2f       	mov	r22, r17
					memory = 1;
     784:	a5 d0       	rcall	.+330    	; 0x8d0 <STEPPER_SetRotation>
     786:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     788:	fd 2c       	mov	r15, r13
     78a:	ce 01       	movw	r24, r28
     78c:	dc de       	rcall	.-584    	; 0x546 <LL_Next>
     78e:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     790:	89 2b       	or	r24, r25
     792:	09 f0       	breq	.+2      	; 0x796 <main+0x19a>
     794:	a8 cf       	rjmp	.-176    	; 0x6e6 <main+0xea>
     796:	9a cf       	rjmp	.-204    	; 0x6cc <main+0xd0>

00000798 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     798:	1f 92       	push	r1
     79a:	0f 92       	push	r0
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	0f 92       	push	r0
     7a0:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     7a2:	8a ea       	ldi	r24, 0xAA	; 170
     7a4:	88 b9       	out	0x08, r24	; 8
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <__vector_default+0xc>

000007a8 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     7a8:	84 b5       	in	r24, 0x24	; 36
     7aa:	83 68       	ori	r24, 0x83	; 131
     7ac:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     7ae:	85 b5       	in	r24, 0x25	; 37
     7b0:	83 60       	ori	r24, 0x03	; 3
     7b2:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     7b4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     7b8:	87 bd       	out	0x27, r24	; 39
     7ba:	08 95       	ret

000007bc <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     7bc:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     7be:	9f b7       	in	r25, 0x3f	; 63
     7c0:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     7c2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     7c6:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     7c8:	23 2b       	or	r18, r19
     7ca:	31 f0       	breq	.+12     	; 0x7d8 <PWM+0x1c>
		{
			g_MotorOn = 1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <g_MotorOn>
			PORTB = ~0x0E;
     7d2:	81 ef       	ldi	r24, 0xF1	; 241
     7d4:	85 b9       	out	0x05, r24	; 5
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     7d8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <g_MotorOn>
			PORTB = ~0x0F;
     7dc:	80 ef       	ldi	r24, 0xF0	; 240
     7de:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7e0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     7e2:	08 95       	ret

000007e4 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     7e4:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     7e6:	e2 e7       	ldi	r30, 0x72	; 114
     7e8:	f3 e0       	ldi	r31, 0x03	; 3
     7ea:	10 82       	st	Z, r1
	stepper.direction = 1;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     7f0:	13 82       	std	Z+3, r1	; 0x03
     7f2:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     7f4:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     7f6:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     7f8:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     7fa:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     7fc:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     7fe:	88 ec       	ldi	r24, 0xC8	; 200
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	96 83       	std	Z+6, r25	; 0x06
     804:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     806:	80 e3       	ldi	r24, 0x30	; 48
     808:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     80a:	84 e9       	ldi	r24, 0x94	; 148
     80c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     810:	e0 eb       	ldi	r30, 0xB0	; 176
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	80 81       	ld	r24, Z
     816:	82 60       	ori	r24, 0x02	; 2
     818:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     81a:	e0 e7       	ldi	r30, 0x70	; 112
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	80 81       	ld	r24, Z
     820:	82 60       	ori	r24, 0x02	; 2
     822:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     824:	e1 eb       	ldi	r30, 0xB1	; 177
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	87 60       	ori	r24, 0x07	; 7
     82c:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     82e:	78 94       	sei
     830:	08 95       	ret

00000832 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	86 1b       	sub	r24, r22
     836:	91 09       	sbc	r25, r1
	if (steps >= 0)
     838:	52 f0       	brmi	.+20     	; 0x84e <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     83a:	85 36       	cpi	r24, 0x65	; 101
     83c:	91 05       	cpc	r25, r1
     83e:	8c f0       	brlt	.+34     	; 0x862 <STEPPER_NumSteps+0x30>
     840:	24 e6       	ldi	r18, 0x64	; 100
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	a9 01       	movw	r20, r18
     846:	48 1b       	sub	r20, r24
     848:	59 0b       	sbc	r21, r25
     84a:	ca 01       	movw	r24, r20
     84c:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     84e:	8c 39       	cpi	r24, 0x9C	; 156
     850:	5f ef       	ldi	r21, 0xFF	; 255
     852:	95 07       	cpc	r25, r21
     854:	34 f4       	brge	.+12     	; 0x862 <STEPPER_NumSteps+0x30>
     856:	2c e9       	ldi	r18, 0x9C	; 156
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	a9 01       	movw	r20, r18
     85c:	48 1b       	sub	r20, r24
     85e:	59 0b       	sbc	r21, r25
     860:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     862:	08 95       	ret

00000864 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     868:	c2 e7       	ldi	r28, 0x72	; 114
     86a:	d3 e0       	ldi	r29, 0x03	; 3
     86c:	6c 81       	ldd	r22, Y+4	; 0x04
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	9b 81       	ldd	r25, Y+3	; 0x03
     872:	df df       	rcall	.-66     	; 0x832 <STEPPER_NumSteps>
     874:	9e 83       	std	Y+6, r25	; 0x06
     876:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     878:	6a 81       	ldd	r22, Y+2	; 0x02
     87a:	7b 81       	ldd	r23, Y+3	; 0x03
     87c:	88 85       	ldd	r24, Y+8	; 0x08
     87e:	d9 df       	rcall	.-78     	; 0x832 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     880:	2d 81       	ldd	r18, Y+5	; 0x05
     882:	3e 81       	ldd	r19, Y+6	; 0x06
     884:	33 23       	and	r19, r19
     886:	14 f4       	brge	.+4      	; 0x88c <STEPPER_Rotate+0x28>
     888:	28 e0       	ldi	r18, 0x08	; 8
     88a:	01 c0       	rjmp	.+2      	; 0x88e <STEPPER_Rotate+0x2a>
     88c:	24 e0       	ldi	r18, 0x04	; 4
     88e:	e2 e7       	ldi	r30, 0x72	; 114
     890:	f3 e0       	ldi	r31, 0x03	; 3
     892:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     894:	45 81       	ldd	r20, Z+5	; 0x05
     896:	56 81       	ldd	r21, Z+6	; 0x06
     898:	84 9f       	mul	r24, r20
     89a:	90 01       	movw	r18, r0
     89c:	85 9f       	mul	r24, r21
     89e:	30 0d       	add	r19, r0
     8a0:	94 9f       	mul	r25, r20
     8a2:	30 0d       	add	r19, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	83 2f       	mov	r24, r19
     8a8:	80 95       	com	r24
     8aa:	88 1f       	adc	r24, r24
     8ac:	88 27       	eor	r24, r24
     8ae:	88 1f       	adc	r24, r24
     8b0:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     8b2:	85 81       	ldd	r24, Z+5	; 0x05
     8b4:	96 81       	ldd	r25, Z+6	; 0x06
     8b6:	99 23       	and	r25, r25
     8b8:	1c f4       	brge	.+6      	; 0x8c0 <STEPPER_Rotate+0x5c>
     8ba:	91 95       	neg	r25
     8bc:	81 95       	neg	r24
     8be:	91 09       	sbc	r25, r1
     8c0:	e2 e7       	ldi	r30, 0x72	; 114
     8c2:	f3 e0       	ldi	r31, 0x03	; 3
     8c4:	96 83       	std	Z+6, r25	; 0x06
     8c6:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     8c8:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
	cli();
     8d4:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	c2 e7       	ldi	r28, 0x72	; 114
     8da:	d3 e0       	ldi	r29, 0x03	; 3
     8dc:	9b 83       	std	Y+3, r25	; 0x03
     8de:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     8e0:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     8e2:	c0 df       	rcall	.-128    	; 0x864 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     8e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	eb 5e       	subi	r30, 0xEB	; 235
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	80 81       	ld	r24, Z
     8ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     8f2:	78 94       	sei
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	0b b6       	in	r0, 0x3b	; 59
     906:	0f 92       	push	r0
     908:	1f 93       	push	r17
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	00 d0       	rcall	.+0      	; 0x928 <__vector_13+0x2e>
     928:	00 d0       	rcall	.+0      	; 0x92a <__vector_13+0x30>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     92e:	86 e3       	ldi	r24, 0x36	; 54
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	9e e2       	ldi	r25, 0x2E	; 46
     938:	ad e2       	ldi	r26, 0x2D	; 45
     93a:	b5 e3       	ldi	r27, 0x35	; 53
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	9a 83       	std	Y+2, r25	; 0x02
     940:	ab 83       	std	Y+3, r26	; 0x03
     942:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     944:	e2 e7       	ldi	r30, 0x72	; 114
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	87 81       	ldd	r24, Z+7	; 0x07
     94a:	25 81       	ldd	r18, Z+5	; 0x05
     94c:	36 81       	ldd	r19, Z+6	; 0x06
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	0c f0       	brlt	.+2      	; 0x958 <__vector_13+0x5e>
     956:	66 c0       	rjmp	.+204    	; 0xa24 <__vector_13+0x12a>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     958:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <stepper+0x1>
     95c:	84 30       	cpi	r24, 0x04	; 4
     95e:	51 f4       	brne	.+20     	; 0x974 <__vector_13+0x7a>
     960:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     964:	e1 e0       	ldi	r30, 0x01	; 1
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	ec 0f       	add	r30, r28
     96a:	fd 1f       	adc	r31, r29
     96c:	e8 0f       	add	r30, r24
     96e:	f1 1d       	adc	r31, r1
     970:	80 81       	ld	r24, Z
     972:	0d c0       	rjmp	.+26     	; 0x98e <__vector_13+0x94>
     974:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     978:	e3 e0       	ldi	r30, 0x03	; 3
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	e8 1b       	sub	r30, r24
     97e:	f1 09       	sbc	r31, r1
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	8c 0f       	add	r24, r28
     986:	9d 1f       	adc	r25, r29
     988:	e8 0f       	add	r30, r24
     98a:	f9 1f       	adc	r31, r25
     98c:	80 81       	ld	r24, Z
     98e:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     990:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	21 f0       	breq	.+8      	; 0x9a0 <__vector_13+0xa6>
     998:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <__vector_13+0xa8>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	e2 e7       	ldi	r30, 0x72	; 114
     9a4:	f3 e0       	ldi	r31, 0x03	; 3
     9a6:	80 83       	st	Z, r24

		stepper._currentStep++;
     9a8:	87 81       	ldd	r24, Z+7	; 0x07
     9aa:	8f 5f       	subi	r24, 0xFF	; 255
     9ac:	87 83       	std	Z+7, r24	; 0x07
		if((stepper._targetStep - stepper._currentStep) < 15) PWM(1); 
     9ae:	85 81       	ldd	r24, Z+5	; 0x05
     9b0:	96 81       	ldd	r25, Z+6	; 0x06
     9b2:	27 81       	ldd	r18, Z+7	; 0x07
     9b4:	82 1b       	sub	r24, r18
     9b6:	91 09       	sbc	r25, r1
     9b8:	0f 97       	sbiw	r24, 0x0f	; 15
     9ba:	1c f4       	brge	.+6      	; 0x9c2 <__vector_13+0xc8>
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fd de       	rcall	.-518    	; 0x7bc <PWM>
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     9c2:	e2 e7       	ldi	r30, 0x72	; 114
     9c4:	f3 e0       	ldi	r31, 0x03	; 3
     9c6:	85 81       	ldd	r24, Z+5	; 0x05
     9c8:	96 81       	ldd	r25, Z+6	; 0x06
     9ca:	27 81       	ldd	r18, Z+7	; 0x07
     9cc:	82 1b       	sub	r24, r18
     9ce:	91 09       	sbc	r25, r1
     9d0:	06 97       	sbiw	r24, 0x06	; 6
     9d2:	74 f4       	brge	.+28     	; 0x9f0 <__vector_13+0xf6>
     9d4:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	eb 5e       	subi	r30, 0xEB	; 235
     9dc:	fe 4f       	sbci	r31, 0xFE	; 254
     9de:	80 81       	ld	r24, Z
     9e0:	84 39       	cpi	r24, 0x94	; 148
     9e2:	30 f4       	brcc	.+12     	; 0x9f0 <__vector_13+0xf6>
		{
			stepper._accellStep--;
     9e4:	e2 e7       	ldi	r30, 0x72	; 114
     9e6:	f3 e0       	ldi	r31, 0x03	; 3
     9e8:	83 85       	ldd	r24, Z+11	; 0x0b
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	83 87       	std	Z+11, r24	; 0x0b
     9ee:	11 c0       	rjmp	.+34     	; 0xa12 <__vector_13+0x118>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     9f0:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <stepper+0x7>
     9f4:	86 30       	cpi	r24, 0x06	; 6
     9f6:	68 f0       	brcs	.+26     	; 0xa12 <__vector_13+0x118>
     9f8:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	eb 5e       	subi	r30, 0xEB	; 235
     a00:	fe 4f       	sbci	r31, 0xFE	; 254
     a02:	80 81       	ld	r24, Z
     a04:	81 34       	cpi	r24, 0x41	; 65
     a06:	28 f0       	brcs	.+10     	; 0xa12 <__vector_13+0x118>
		{
			stepper._accellStep++;
     a08:	e2 e7       	ldi	r30, 0x72	; 114
     a0a:	f3 e0       	ldi	r31, 0x03	; 3
     a0c:	83 85       	ldd	r24, Z+11	; 0x0b
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a12:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	eb 5e       	subi	r30, 0xEB	; 235
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
     a1c:	80 81       	ld	r24, Z
     a1e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a22:	48 c0       	rjmp	.+144    	; 0xab4 <__vector_13+0x1ba>
	}
	else if (stepper._currentStep == stepper._targetStep)
     a24:	e2 e7       	ldi	r30, 0x72	; 114
     a26:	f3 e0       	ldi	r31, 0x03	; 3
     a28:	87 81       	ldd	r24, Z+7	; 0x07
     a2a:	25 81       	ldd	r18, Z+5	; 0x05
     a2c:	36 81       	ldd	r19, Z+6	; 0x06
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	09 f0       	breq	.+2      	; 0xa38 <__vector_13+0x13e>
     a36:	3e c0       	rjmp	.+124    	; 0xab4 <__vector_13+0x1ba>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	93 81       	ldd	r25, Z+3	; 0x03
     a3c:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a3e:	81 85       	ldd	r24, Z+9	; 0x09
     a40:	88 23       	and	r24, r24
     a42:	19 f0       	breq	.+6      	; 0xa4a <__vector_13+0x150>
     a44:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <stepper+0xb>
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <__vector_13+0x152>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	a2 e7       	ldi	r26, 0x72	; 114
     a4e:	b3 e0       	ldi	r27, 0x03	; 3
     a50:	1b 96       	adiw	r26, 0x0b	; 11
     a52:	8c 93       	st	X, r24
     a54:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a56:	1b 96       	adiw	r26, 0x0b	; 11
     a58:	ec 91       	ld	r30, X
     a5a:	1b 97       	sbiw	r26, 0x0b	; 11
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	eb 5e       	subi	r30, 0xEB	; 235
     a60:	fe 4f       	sbci	r31, 0xFE	; 254
     a62:	80 81       	ld	r24, Z
     a64:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     a68:	19 96       	adiw	r26, 0x09	; 9
     a6a:	8c 91       	ld	r24, X
     a6c:	81 11       	cpse	r24, r1
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__vector_13+0x17a>
     a70:	82 b1       	in	r24, 0x02	; 2
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__vector_13+0x17c>
     a74:	82 b1       	in	r24, 0x02	; 2
     a76:	82 b9       	out	0x02, r24	; 2
		g_ExitBuffer = 0;
     a78:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_ExitBuffer>
		STEPPER_SetRotation(step[LL_GetClass(HEAD->prev)], step[LL_GetClass(HEAD)]);
     a7c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     a80:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     a84:	86 dd       	rcall	.-1268   	; 0x592 <LL_GetClass>
     a86:	e1 e0       	ldi	r30, 0x01	; 1
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	e8 0f       	add	r30, r24
     a90:	f1 1d       	adc	r31, r1
     a92:	10 81       	ld	r17, Z
     a94:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <HEAD>
     a98:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <HEAD+0x1>
     a9c:	84 81       	ldd	r24, Z+4	; 0x04
     a9e:	95 81       	ldd	r25, Z+5	; 0x05
     aa0:	78 dd       	rcall	.-1296   	; 0x592 <LL_GetClass>
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	e8 0f       	add	r30, r24
     aac:	f1 1d       	adc	r31, r1
     aae:	80 81       	ld	r24, Z
     ab0:	61 2f       	mov	r22, r17
     ab2:	0e df       	rcall	.-484    	; 0x8d0 <STEPPER_SetRotation>
	}
	if (stepper._isInitiated == 0)
     ab4:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <stepper+0xa>
     ab8:	81 11       	cpse	r24, r1
     aba:	0f c0       	rjmp	.+30     	; 0xada <__vector_13+0x1e0>
	{
		if ((PINE & 0x08) == 0)
     abc:	63 99       	sbic	0x0c, 3	; 12
     abe:	0d c0       	rjmp	.+26     	; 0xada <__vector_13+0x1e0>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     ac0:	e2 e7       	ldi	r30, 0x72	; 114
     ac2:	f3 e0       	ldi	r31, 0x03	; 3
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     ac8:	10 82       	st	Z, r1
			stepper.direction = 1;
     aca:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     acc:	13 82       	std	Z+3, r1	; 0x03
     ace:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     ad0:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ad2:	16 82       	std	Z+6, r1	; 0x06
     ad4:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ad6:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     ad8:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	1f 91       	pop	r17
     b00:	0f 90       	pop	r0
     b02:	0b be       	out	0x3b, r0	; 59
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     b0e:	0f 93       	push	r16
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	f8 94       	cli
     b16:	e1 e6       	ldi	r30, 0x61	; 97
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	80 83       	st	Z, r24
     b1e:	10 82       	st	Z, r1
     b20:	da d2       	rcall	.+1460   	; 0x10d6 <UART_Init>
     b22:	61 dd       	rcall	.-1342   	; 0x5e6 <GPIO_Init>
     b24:	5d d2       	rcall	.+1210   	; 0xfe0 <TIMER_Init>
     b26:	40 de       	rcall	.-896    	; 0x7a8 <PWM_Init>
     b28:	d6 da       	rcall	.-2644   	; 0xd6 <ADC_Init>
     b2a:	5c de       	rcall	.-840    	; 0x7e4 <STEPPER_Init>
     b2c:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount+0x1>
     b30:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_ADCCount>
     b34:	84 e1       	ldi	r24, 0x14	; 20
     b36:	eb e0       	ldi	r30, 0x0B	; 11
     b38:	f3 e0       	ldi	r31, 0x03	; 3
     b3a:	df 01       	movw	r26, r30
     b3c:	1d 92       	st	X+, r1
     b3e:	8a 95       	dec	r24
     b40:	e9 f7       	brne	.-6      	; 0xb3c <SYS_Init+0x2e>
     b42:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <g_PauseRequest>
     b46:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     b4a:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <g_Timer>
     b4e:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_ExitBuffer>
     b52:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <HEAD+0x1>
     b56:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <HEAD>
     b5a:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <TAIL+0x1>
     b5e:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <TAIL>
     b62:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <STAGE1+0x1>
     b66:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <STAGE1>
     b6a:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <STAGE2+0x1>
     b6e:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <STAGE2>
     b72:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <FRONT+0x1>
     b76:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <FRONT>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	44 e0       	ldi	r20, 0x04	; 4
     b7e:	6f ef       	ldi	r22, 0xFF	; 255
     b80:	89 ee       	ldi	r24, 0xE9	; 233
     b82:	9d ef       	ldi	r25, 0xFD	; 253
     b84:	b8 dc       	rcall	.-1680   	; 0x4f6 <LL_ItemInit>
     b86:	cf dc       	rcall	.-1634   	; 0x526 <LL_ItemListInit>
     b88:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <HEAD+0x1>
     b8c:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <HEAD>
     b90:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <FRONT+0x1>
     b94:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <FRONT>
     b98:	ca ef       	ldi	r28, 0xFA	; 250
     b9a:	08 ee       	ldi	r16, 0xE8	; 232
     b9c:	1d ef       	ldi	r17, 0xFD	; 253
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	44 e0       	ldi	r20, 0x04	; 4
     ba2:	6c 2f       	mov	r22, r28
     ba4:	c8 01       	movw	r24, r16
     ba6:	a7 dc       	rcall	.-1714   	; 0x4f6 <LL_ItemInit>
     ba8:	bc 01       	movw	r22, r24
     baa:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     bae:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     bb2:	cd dc       	rcall	.-1638   	; 0x54e <LL_AddBack>
     bb4:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <TAIL+0x1>
     bb8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <TAIL>
     bbc:	01 50       	subi	r16, 0x01	; 1
     bbe:	11 09       	sbc	r17, r1
     bc0:	c1 50       	subi	r28, 0x01	; 1
     bc2:	cb 3c       	cpi	r28, 0xCB	; 203
     bc4:	61 f7       	brne	.-40     	; 0xb9e <SYS_Init+0x90>
     bc6:	05 e0       	ldi	r16, 0x05	; 5
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	45 e0       	ldi	r20, 0x05	; 5
     bce:	6a ef       	ldi	r22, 0xFA	; 250
     bd0:	88 ee       	ldi	r24, 0xE8	; 232
     bd2:	9d ef       	ldi	r25, 0xFD	; 253
     bd4:	90 dc       	rcall	.-1760   	; 0x4f6 <LL_ItemInit>
     bd6:	bc 01       	movw	r22, r24
     bd8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     bdc:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     be0:	b6 dc       	rcall	.-1684   	; 0x54e <LL_AddBack>
     be2:	01 50       	subi	r16, 0x01	; 1
     be4:	11 09       	sbc	r17, r1
     be6:	89 f7       	brne	.-30     	; 0xbca <SYS_Init+0xbc>
     be8:	86 e4       	ldi	r24, 0x46	; 70
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	8c d2       	rcall	.+1304   	; 0x1106 <UART_SendString>
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	08 95       	ret

00000bf6 <SYS_Pause>:
     bf6:	3f 92       	push	r3
     bf8:	4f 92       	push	r4
     bfa:	5f 92       	push	r5
     bfc:	6f 92       	push	r6
     bfe:	7f 92       	push	r7
     c00:	8f 92       	push	r8
     c02:	9f 92       	push	r9
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	ca 5f       	subi	r28, 0xFA	; 250
     c1e:	d1 09       	sbc	r29, r1
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	f8 2e       	mov	r15, r24
     c2c:	e9 2e       	mov	r14, r25
     c2e:	f8 94       	cli
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	c3 dd       	rcall	.-1146   	; 0x7bc <PWM>
     c36:	00 91 07 03 	lds	r16, 0x0307	; 0x800307 <FRONT>
     c3a:	10 91 08 03 	lds	r17, 0x0308	; 0x800308 <FRONT+0x1>
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	8c e5       	ldi	r24, 0x5C	; 92
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	7c 01       	movw	r14, r24
     c50:	9f 93       	push	r25
     c52:	8f 93       	push	r24
     c54:	78 d4       	rcall	.+2288   	; 0x1546 <sprintf>
     c56:	c7 01       	movw	r24, r14
     c58:	56 d2       	rcall	.+1196   	; 0x1106 <UART_SendString>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	e1 2c       	mov	r14, r1
     c68:	f1 2c       	mov	r15, r1
     c6a:	0f 2e       	mov	r0, r31
     c6c:	f7 e7       	ldi	r31, 0x77	; 119
     c6e:	af 2e       	mov	r10, r31
     c70:	f1 e0       	ldi	r31, 0x01	; 1
     c72:	bf 2e       	mov	r11, r31
     c74:	f0 2d       	mov	r31, r0
     c76:	6e 01       	movw	r12, r28
     c78:	97 e9       	ldi	r25, 0x97	; 151
     c7a:	c9 0e       	add	r12, r25
     c7c:	d1 1c       	adc	r13, r1
     c7e:	27 c0       	rjmp	.+78     	; 0xcce <SYS_Pause+0xd8>
     c80:	ef ef       	ldi	r30, 0xFF	; 255
     c82:	ee 1a       	sub	r14, r30
     c84:	fe 0a       	sbc	r15, r30
     c86:	c8 01       	movw	r24, r16
     c88:	a9 dc       	rcall	.-1710   	; 0x5dc <LL_GetStatus>
     c8a:	78 2e       	mov	r7, r24
     c8c:	c8 01       	movw	r24, r16
     c8e:	81 dc       	rcall	.-1790   	; 0x592 <LL_GetClass>
     c90:	88 2e       	mov	r8, r24
     c92:	c8 01       	movw	r24, r16
     c94:	89 dc       	rcall	.-1774   	; 0x5a8 <LL_GetMag>
     c96:	98 2e       	mov	r9, r24
     c98:	c8 01       	movw	r24, r16
     c9a:	80 dc       	rcall	.-1792   	; 0x59c <LL_GetRefl>
     c9c:	1f 92       	push	r1
     c9e:	7f 92       	push	r7
     ca0:	1f 92       	push	r1
     ca2:	8f 92       	push	r8
     ca4:	1f 92       	push	r1
     ca6:	9f 92       	push	r9
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	ff 92       	push	r15
     cae:	ef 92       	push	r14
     cb0:	bf 92       	push	r11
     cb2:	af 92       	push	r10
     cb4:	df 92       	push	r13
     cb6:	cf 92       	push	r12
     cb8:	46 d4       	rcall	.+2188   	; 0x1546 <sprintf>
     cba:	c6 01       	movw	r24, r12
     cbc:	24 d2       	rcall	.+1096   	; 0x1106 <UART_SendString>
     cbe:	c8 01       	movw	r24, r16
     cc0:	42 dc       	rcall	.-1916   	; 0x546 <LL_Next>
     cc2:	8c 01       	movw	r16, r24
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	c8 01       	movw	r24, r16
     cd0:	60 dc       	rcall	.-1856   	; 0x592 <LL_GetClass>
     cd2:	85 30       	cpi	r24, 0x05	; 5
     cd4:	a9 f6       	brne	.-86     	; 0xc80 <SYS_Pause+0x8a>
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f7 e2       	ldi	r31, 0x27	; 39
     cda:	cf 2e       	mov	r12, r31
     cdc:	f3 e0       	ldi	r31, 0x03	; 3
     cde:	df 2e       	mov	r13, r31
     ce0:	f0 2d       	mov	r31, r0
     ce2:	00 e0       	ldi	r16, 0x00	; 0
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	0f 2e       	mov	r0, r31
     ce8:	fb ea       	ldi	r31, 0xAB	; 171
     cea:	af 2e       	mov	r10, r31
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	bf 2e       	mov	r11, r31
     cf0:	f0 2d       	mov	r31, r0
     cf2:	7e 01       	movw	r14, r28
     cf4:	97 e9       	ldi	r25, 0x97	; 151
     cf6:	e9 0e       	add	r14, r25
     cf8:	f1 1c       	adc	r15, r1
     cfa:	f6 01       	movw	r30, r12
     cfc:	80 85       	ldd	r24, Z+8	; 0x08
     cfe:	1f 92       	push	r1
     d00:	8f 93       	push	r24
     d02:	1f 93       	push	r17
     d04:	0f 93       	push	r16
     d06:	bf 92       	push	r11
     d08:	af 92       	push	r10
     d0a:	ff 92       	push	r15
     d0c:	ef 92       	push	r14
     d0e:	1b d4       	rcall	.+2102   	; 0x1546 <sprintf>
     d10:	c7 01       	movw	r24, r14
     d12:	f9 d1       	rcall	.+1010   	; 0x1106 <UART_SendString>
     d14:	0f 5f       	subi	r16, 0xFF	; 255
     d16:	1f 4f       	sbci	r17, 0xFF	; 255
     d18:	f9 e0       	ldi	r31, 0x09	; 9
     d1a:	cf 0e       	add	r12, r31
     d1c:	d1 1c       	adc	r13, r1
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	07 30       	cpi	r16, 0x07	; 7
     d2a:	11 05       	cpc	r17, r1
     d2c:	31 f7       	brne	.-52     	; 0xcfa <SYS_Pause+0x104>
     d2e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     d32:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     d36:	32 dc       	rcall	.-1948   	; 0x59c <LL_GetRefl>
     d38:	48 2e       	mov	r4, r24
     d3a:	39 2e       	mov	r3, r25
     d3c:	60 90 6f 03 	lds	r6, 0x036F	; 0x80036f <STAGE2>
     d40:	50 90 70 03 	lds	r5, 0x0370	; 0x800370 <STAGE2+0x1>
     d44:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     d48:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     d4c:	2d dc       	rcall	.-1958   	; 0x5a8 <LL_GetMag>
     d4e:	78 2e       	mov	r7, r24
     d50:	90 90 25 03 	lds	r9, 0x0325	; 0x800325 <STAGE1>
     d54:	80 90 26 03 	lds	r8, 0x0326	; 0x800326 <STAGE1+0x1>
     d58:	00 91 09 03 	lds	r16, 0x0309	; 0x800309 <TAIL>
     d5c:	10 91 0a 03 	lds	r17, 0x030A	; 0x80030a <TAIL+0x1>
     d60:	f8 01       	movw	r30, r16
     d62:	b2 80       	ldd	r11, Z+2	; 0x02
     d64:	a3 80       	ldd	r10, Z+3	; 0x03
     d66:	d0 90 07 03 	lds	r13, 0x0307	; 0x800307 <FRONT>
     d6a:	c0 90 08 03 	lds	r12, 0x0308	; 0x800308 <FRONT+0x1>
     d6e:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <HEAD>
     d72:	e0 90 06 03 	lds	r14, 0x0306	; 0x800306 <HEAD+0x1>
     d76:	8f 2d       	mov	r24, r15
     d78:	9e 2d       	mov	r25, r14
     d7a:	fa db       	rcall	.-2060   	; 0x570 <LL_Size>
     d7c:	3f 92       	push	r3
     d7e:	4f 92       	push	r4
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	1f 92       	push	r1
     d86:	7f 92       	push	r7
     d88:	8f 92       	push	r8
     d8a:	9f 92       	push	r9
     d8c:	af 92       	push	r10
     d8e:	bf 92       	push	r11
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	1f 93       	push	r17
     d96:	0f 93       	push	r16
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	1f 92       	push	r1
     d9e:	8f 93       	push	r24
     da0:	82 ec       	ldi	r24, 0xC2	; 194
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	8e 01       	movw	r16, r28
     daa:	0b 59       	subi	r16, 0x9B	; 155
     dac:	1f 4f       	sbci	r17, 0xFF	; 255
     dae:	1f 93       	push	r17
     db0:	0f 93       	push	r16
     db2:	c9 d3       	rcall	.+1938   	; 0x1546 <sprintf>
     db4:	c8 01       	movw	r24, r16
     db6:	a7 d1       	rcall	.+846    	; 0x1106 <UART_SendString>
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	89 b1       	in	r24, 0x09	; 9
     dc4:	83 70       	andi	r24, 0x03	; 3
     dc6:	e9 f7       	brne	.-6      	; 0xdc2 <SYS_Pause+0x1cc>
     dc8:	8b e1       	ldi	r24, 0x1B	; 27
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c d1       	rcall	.+824    	; 0x1106 <UART_SendString>
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	f4 dc       	rcall	.-1560   	; 0x7bc <PWM>
     dd4:	78 94       	sei
     dd6:	c6 50       	subi	r28, 0x06	; 6
     dd8:	df 4f       	sbci	r29, 0xFF	; 255
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	7f 90       	pop	r7
     dfe:	6f 90       	pop	r6
     e00:	5f 90       	pop	r5
     e02:	4f 90       	pop	r4
     e04:	3f 90       	pop	r3
     e06:	08 95       	ret

00000e08 <SYS_Rampdown>:

void SYS_Rampdown()
{
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	e7 97       	sbiw	r28, 0x37	; 55
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[5] = {0,0,0,0,0};
     e22:	fe 01       	movw	r30, r28
     e24:	31 96       	adiw	r30, 0x01	; 1
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	df 01       	movw	r26, r30
     e2a:	1d 92       	st	X+, r1
     e2c:	8a 95       	dec	r24
     e2e:	e9 f7       	brne	.-6      	; 0xe2a <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
     e30:	00 91 07 03 	lds	r16, 0x0307	; 0x800307 <FRONT>
     e34:	10 91 08 03 	lds	r17, 0x0308	; 0x800308 <FRONT+0x1>
	
	cli();
     e38:	f8 94       	cli
	PORTD = 0;
     e3a:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
     e3c:	18 b8       	out	0x08, r1	; 8
	PWM(0);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	bc dc       	rcall	.-1672   	; 0x7bc <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
     e44:	87 e3       	ldi	r24, 0x37	; 55
     e46:	92 e0       	ldi	r25, 0x02	; 2
     e48:	5e d1       	rcall	.+700    	; 0x1106 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[5] = {0,0,0,0,0};
	uint8_t total = 0;
     e4a:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
     e4e:	f3 94       	inc	r15
     e50:	c8 01       	movw	r24, r16
     e52:	9f db       	rcall	.-2242   	; 0x592 <LL_GetClass>
     e54:	e1 e0       	ldi	r30, 0x01	; 1
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	ec 0f       	add	r30, r28
     e5a:	fd 1f       	adc	r31, r29
     e5c:	e8 0f       	add	r30, r24
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
     e64:	80 83       	st	Z, r24
     e66:	c8 01       	movw	r24, r16
     e68:	6e db       	rcall	.-2340   	; 0x546 <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e6a:	8c 01       	movw	r16, r24
     e6c:	c8 01       	movw	r24, r16
     e6e:	b6 db       	rcall	.-2196   	; 0x5dc <LL_GetStatus>
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	69 f3       	breq	.-38     	; 0xe4e <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n\r\n\r\n",
     e74:	8d 81       	ldd	r24, Y+5	; 0x05
     e76:	1f 92       	push	r1
     e78:	8f 93       	push	r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	1f 92       	push	r1
     e7e:	8f 93       	push	r24
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	1f 92       	push	r1
     e84:	8f 93       	push	r24
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	1f 92       	push	r1
     e8a:	8f 93       	push	r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	1f 92       	push	r1
     e90:	8f 93       	push	r24
     e92:	1f 92       	push	r1
     e94:	ff 92       	push	r15
     e96:	8c e5       	ldi	r24, 0x5C	; 92
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	8e 01       	movw	r16, r28
     ea0:	0a 5f       	subi	r16, 0xFA	; 250
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	1f 93       	push	r17
     ea6:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
     ea8:	4e d3       	rcall	.+1692   	; 0x1546 <sprintf>
     eaa:	c8 01       	movw	r24, r16
     eac:	2c d1       	rcall	.+600    	; 0x1106 <UART_SendString>
	UART_SendString("Total time elapsed since item entered the first stage: ");
     eae:	8f eb       	ldi	r24, 0xBF	; 191
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	29 d1       	rcall	.+594    	; 0x1106 <UART_SendString>
	sprintf(str,"%.2f s\r\n",(double)g_Timer*.25);
     eb4:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <g_Timer>
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	31 d1       	rcall	.+610    	; 0x1122 <__floatunsisf>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e8       	ldi	r20, 0x80	; 128
     ec6:	5e e3       	ldi	r21, 0x3E	; 62
     ec8:	69 d1       	rcall	.+722    	; 0x119c <__mulsf3>
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	7f 93       	push	r23
     ed0:	6f 93       	push	r22
     ed2:	87 ef       	ldi	r24, 0xF7	; 247
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	9f 93       	push	r25
     ed8:	8f 93       	push	r24
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
     ede:	33 d3       	rcall	.+1638   	; 0x1546 <sprintf>
	UART_SendString(str);
     ee0:	c8 01       	movw	r24, r16
     ee2:	11 d1       	rcall	.+546    	; 0x1106 <UART_SendString>
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	e7 96       	adiw	r28, 0x37	; 55
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	08 95       	ret

00000f06 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	0b b6       	in	r0, 0x3b	; 59
     f12:	0f 92       	push	r0
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     f38:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_timer_tick>
     f3c:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_timer_tick+0x1>
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_timer_tick+0x1>
     f46:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_timer_tick>
     f4a:	c7 e2       	ldi	r28, 0x27	; 39
     f4c:	d3 e0       	ldi	r29, 0x03	; 3
     f4e:	0f 2e       	mov	r0, r31
     f50:	ff e6       	ldi	r31, 0x6F	; 111
     f52:	ef 2e       	mov	r14, r31
     f54:	f3 e0       	ldi	r31, 0x03	; 3
     f56:	ff 2e       	mov	r15, r31
     f58:	f0 2d       	mov	r31, r0
     f5a:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     f5c:	ec 81       	ldd	r30, Y+4	; 0x04
     f5e:	fd 81       	ldd	r31, Y+5	; 0x05
     f60:	30 97       	sbiw	r30, 0x00	; 0
     f62:	09 f1       	breq	.+66     	; 0xfa6 <__vector_17+0xa0>
     f64:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_timer_tick>
     f68:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_timer_tick+0x1>
     f6c:	28 81       	ld	r18, Y
     f6e:	39 81       	ldd	r19, Y+1	; 0x01
     f70:	28 17       	cp	r18, r24
     f72:	39 07       	cpc	r19, r25
     f74:	c1 f4       	brne	.+48     	; 0xfa6 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     f76:	88 85       	ldd	r24, Y+8	; 0x08
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	19 f4       	brne	.+6      	; 0xf82 <__vector_17+0x7c>
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     f82:	d8 01       	movw	r26, r16
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	8d 91       	ld	r24, X+
     f88:	9c 91       	ld	r25, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	41 f0       	breq	.+16     	; 0xfa0 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     f90:	2d 91       	ld	r18, X+
     f92:	3c 91       	ld	r19, X
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	82 0f       	add	r24, r18
     f98:	93 1f       	adc	r25, r19
     f9a:	8d 93       	st	X+, r24
     f9c:	9c 93       	st	X, r25
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     fa0:	f8 01       	movw	r30, r16
     fa2:	15 82       	std	Z+5, r1	; 0x05
     fa4:	14 82       	std	Z+4, r1	; 0x04
     fa6:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     fa8:	ce 15       	cp	r28, r14
     faa:	df 05       	cpc	r29, r15
     fac:	b1 f6       	brne	.-84     	; 0xf5a <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     fae:	ff 91       	pop	r31
     fb0:	ef 91       	pop	r30
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	0f 90       	pop	r0
     fd4:	0b be       	out	0x3b, r0	; 59
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
     fe0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fe4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
     fe8:	88 e4       	ldi	r24, 0x48	; 72
     fea:	98 e0       	ldi	r25, 0x08	; 8
     fec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ff0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     ff4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     ff8:	89 e0       	ldi	r24, 0x09	; 9
     ffa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1004:	88 e4       	ldi	r24, 0x48	; 72
    1006:	e7 e2       	ldi	r30, 0x27	; 39
    1008:	f3 e0       	ldi	r31, 0x03	; 3
    100a:	df 01       	movw	r26, r30
    100c:	1d 92       	st	X+, r1
    100e:	8a 95       	dec	r24
    1010:	e9 f7       	brne	.-6      	; 0x100c <TIMER_Init+0x2c>
    1012:	08 95       	ret

00001014 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    101e:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <_timer+0x4>
    1022:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <_timer+0x5>
    1026:	67 2b       	or	r22, r23
    1028:	09 f4       	brne	.+2      	; 0x102c <TIMER_Create+0x18>
    102a:	49 c0       	rjmp	.+146    	; 0x10be <TIMER_Create+0xaa>
    102c:	e7 e2       	ldi	r30, 0x27	; 39
    102e:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1030:	a1 e0       	ldi	r26, 0x01	; 1
    1032:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1034:	c5 85       	ldd	r28, Z+13	; 0x0d
    1036:	d6 85       	ldd	r29, Z+14	; 0x0e
    1038:	cd 2b       	or	r28, r29
    103a:	09 f4       	brne	.+2      	; 0x103e <TIMER_Create+0x2a>
    103c:	42 c0       	rjmp	.+132    	; 0x10c2 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	39 96       	adiw	r30, 0x09	; 9
    1042:	a8 30       	cpi	r26, 0x08	; 8
    1044:	b1 05       	cpc	r27, r1
    1046:	b1 f7       	brne	.-20     	; 0x1034 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    104e:	fd 01       	movw	r30, r26
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	ee 0f       	add	r30, r30
    1056:	ff 1f       	adc	r31, r31
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ea 0f       	add	r30, r26
    105e:	fb 1f       	adc	r31, r27
    1060:	e9 5d       	subi	r30, 0xD9	; 217
    1062:	fc 4f       	sbci	r31, 0xFC	; 252
    1064:	93 83       	std	Z+3, r25	; 0x03
    1066:	82 83       	std	Z+2, r24	; 0x02
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    106a:	fd 01       	movw	r30, r26
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ea 0f       	add	r30, r26
    107a:	fb 1f       	adc	r31, r27
    107c:	e9 5d       	subi	r30, 0xD9	; 217
    107e:	fc 4f       	sbci	r31, 0xFC	; 252
    1080:	13 82       	std	Z+3, r1	; 0x03
    1082:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1084:	fd 01       	movw	r30, r26
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	ea 0f       	add	r30, r26
    1094:	fb 1f       	adc	r31, r27
    1096:	e9 5d       	subi	r30, 0xD9	; 217
    1098:	fc 4f       	sbci	r31, 0xFC	; 252
    109a:	55 83       	std	Z+5, r21	; 0x05
    109c:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    109e:	37 83       	std	Z+7, r19	; 0x07
    10a0:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    10a2:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_timer_tick>
    10a6:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <_timer_tick+0x1>
    10aa:	82 0f       	add	r24, r18
    10ac:	93 1f       	adc	r25, r19
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	80 83       	st	Z, r24
			_timer[i].state = READY;
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10b6:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    10b8:	8a 2f       	mov	r24, r26
    10ba:	9b 2f       	mov	r25, r27
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    10c2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10c4:	f8 94       	cli
		{
			if (periodic != 0) 
    10c6:	01 2b       	or	r16, r17
    10c8:	11 f6       	brne	.-124    	; 0x104e <TIMER_Create+0x3a>
    10ca:	cf cf       	rjmp	.-98     	; 0x106a <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	08 95       	ret

000010d6 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    10d6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    10da:	83 e3       	ldi	r24, 0x33	; 51
    10dc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    10e0:	e9 ec       	ldi	r30, 0xC9	; 201
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 61       	ori	r24, 0x18	; 24
    10e8:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    10ea:	ea ec       	ldi	r30, 0xCA	; 202
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	86 60       	ori	r24, 0x06	; 6
    10f2:	80 83       	st	Z, r24
    10f4:	08 95       	ret

000010f6 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    10f6:	e8 ec       	ldi	r30, 0xC8	; 200
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	90 81       	ld	r25, Z
    10fc:	95 ff       	sbrs	r25, 5
    10fe:	fd cf       	rjmp	.-6      	; 0x10fa <UART_SendChar+0x4>
	UDR1 = c;
    1100:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1104:	08 95       	ret

00001106 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    110c:	88 81       	ld	r24, Y
    110e:	88 23       	and	r24, r24
    1110:	29 f0       	breq	.+10     	; 0x111c <UART_SendString+0x16>
    1112:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1114:	f0 df       	rcall	.-32     	; 0x10f6 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1116:	89 91       	ld	r24, Y+
    1118:	81 11       	cpse	r24, r1
    111a:	fc cf       	rjmp	.-8      	; 0x1114 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <__floatunsisf>:
    1122:	e8 94       	clt
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <__floatsisf+0x12>

00001126 <__floatsisf>:
    1126:	97 fb       	bst	r25, 7
    1128:	3e f4       	brtc	.+14     	; 0x1138 <__floatsisf+0x12>
    112a:	90 95       	com	r25
    112c:	80 95       	com	r24
    112e:	70 95       	com	r23
    1130:	61 95       	neg	r22
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	99 23       	and	r25, r25
    113a:	a9 f0       	breq	.+42     	; 0x1166 <__floatsisf+0x40>
    113c:	f9 2f       	mov	r31, r25
    113e:	96 e9       	ldi	r25, 0x96	; 150
    1140:	bb 27       	eor	r27, r27
    1142:	93 95       	inc	r25
    1144:	f6 95       	lsr	r31
    1146:	87 95       	ror	r24
    1148:	77 95       	ror	r23
    114a:	67 95       	ror	r22
    114c:	b7 95       	ror	r27
    114e:	f1 11       	cpse	r31, r1
    1150:	f8 cf       	rjmp	.-16     	; 0x1142 <__floatsisf+0x1c>
    1152:	fa f4       	brpl	.+62     	; 0x1192 <__floatsisf+0x6c>
    1154:	bb 0f       	add	r27, r27
    1156:	11 f4       	brne	.+4      	; 0x115c <__floatsisf+0x36>
    1158:	60 ff       	sbrs	r22, 0
    115a:	1b c0       	rjmp	.+54     	; 0x1192 <__floatsisf+0x6c>
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	16 c0       	rjmp	.+44     	; 0x1192 <__floatsisf+0x6c>
    1166:	88 23       	and	r24, r24
    1168:	11 f0       	breq	.+4      	; 0x116e <__floatsisf+0x48>
    116a:	96 e9       	ldi	r25, 0x96	; 150
    116c:	11 c0       	rjmp	.+34     	; 0x1190 <__floatsisf+0x6a>
    116e:	77 23       	and	r23, r23
    1170:	21 f0       	breq	.+8      	; 0x117a <__floatsisf+0x54>
    1172:	9e e8       	ldi	r25, 0x8E	; 142
    1174:	87 2f       	mov	r24, r23
    1176:	76 2f       	mov	r23, r22
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__floatsisf+0x5e>
    117a:	66 23       	and	r22, r22
    117c:	71 f0       	breq	.+28     	; 0x119a <__floatsisf+0x74>
    117e:	96 e8       	ldi	r25, 0x86	; 134
    1180:	86 2f       	mov	r24, r22
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	2a f0       	brmi	.+10     	; 0x1192 <__floatsisf+0x6c>
    1188:	9a 95       	dec	r25
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	da f7       	brpl	.-10     	; 0x1188 <__floatsisf+0x62>
    1192:	88 0f       	add	r24, r24
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret

0000119c <__mulsf3>:
    119c:	0b d0       	rcall	.+22     	; 0x11b4 <__mulsf3x>
    119e:	78 c0       	rjmp	.+240    	; 0x1290 <__fp_round>
    11a0:	69 d0       	rcall	.+210    	; 0x1274 <__fp_pscA>
    11a2:	28 f0       	brcs	.+10     	; 0x11ae <__mulsf3+0x12>
    11a4:	6e d0       	rcall	.+220    	; 0x1282 <__fp_pscB>
    11a6:	18 f0       	brcs	.+6      	; 0x11ae <__mulsf3+0x12>
    11a8:	95 23       	and	r25, r21
    11aa:	09 f0       	breq	.+2      	; 0x11ae <__mulsf3+0x12>
    11ac:	5a c0       	rjmp	.+180    	; 0x1262 <__fp_inf>
    11ae:	5f c0       	rjmp	.+190    	; 0x126e <__fp_nan>
    11b0:	11 24       	eor	r1, r1
    11b2:	a2 c0       	rjmp	.+324    	; 0x12f8 <__fp_szero>

000011b4 <__mulsf3x>:
    11b4:	7e d0       	rcall	.+252    	; 0x12b2 <__fp_split3>
    11b6:	a0 f3       	brcs	.-24     	; 0x11a0 <__mulsf3+0x4>

000011b8 <__mulsf3_pse>:
    11b8:	95 9f       	mul	r25, r21
    11ba:	d1 f3       	breq	.-12     	; 0x11b0 <__mulsf3+0x14>
    11bc:	95 0f       	add	r25, r21
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	55 1f       	adc	r21, r21
    11c2:	62 9f       	mul	r22, r18
    11c4:	f0 01       	movw	r30, r0
    11c6:	72 9f       	mul	r23, r18
    11c8:	bb 27       	eor	r27, r27
    11ca:	f0 0d       	add	r31, r0
    11cc:	b1 1d       	adc	r27, r1
    11ce:	63 9f       	mul	r22, r19
    11d0:	aa 27       	eor	r26, r26
    11d2:	f0 0d       	add	r31, r0
    11d4:	b1 1d       	adc	r27, r1
    11d6:	aa 1f       	adc	r26, r26
    11d8:	64 9f       	mul	r22, r20
    11da:	66 27       	eor	r22, r22
    11dc:	b0 0d       	add	r27, r0
    11de:	a1 1d       	adc	r26, r1
    11e0:	66 1f       	adc	r22, r22
    11e2:	82 9f       	mul	r24, r18
    11e4:	22 27       	eor	r18, r18
    11e6:	b0 0d       	add	r27, r0
    11e8:	a1 1d       	adc	r26, r1
    11ea:	62 1f       	adc	r22, r18
    11ec:	73 9f       	mul	r23, r19
    11ee:	b0 0d       	add	r27, r0
    11f0:	a1 1d       	adc	r26, r1
    11f2:	62 1f       	adc	r22, r18
    11f4:	83 9f       	mul	r24, r19
    11f6:	a0 0d       	add	r26, r0
    11f8:	61 1d       	adc	r22, r1
    11fa:	22 1f       	adc	r18, r18
    11fc:	74 9f       	mul	r23, r20
    11fe:	33 27       	eor	r19, r19
    1200:	a0 0d       	add	r26, r0
    1202:	61 1d       	adc	r22, r1
    1204:	23 1f       	adc	r18, r19
    1206:	84 9f       	mul	r24, r20
    1208:	60 0d       	add	r22, r0
    120a:	21 1d       	adc	r18, r1
    120c:	82 2f       	mov	r24, r18
    120e:	76 2f       	mov	r23, r22
    1210:	6a 2f       	mov	r22, r26
    1212:	11 24       	eor	r1, r1
    1214:	9f 57       	subi	r25, 0x7F	; 127
    1216:	50 40       	sbci	r21, 0x00	; 0
    1218:	8a f0       	brmi	.+34     	; 0x123c <__mulsf3_pse+0x84>
    121a:	e1 f0       	breq	.+56     	; 0x1254 <__mulsf3_pse+0x9c>
    121c:	88 23       	and	r24, r24
    121e:	4a f0       	brmi	.+18     	; 0x1232 <__mulsf3_pse+0x7a>
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	bb 1f       	adc	r27, r27
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	91 50       	subi	r25, 0x01	; 1
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	a9 f7       	brne	.-22     	; 0x121c <__mulsf3_pse+0x64>
    1232:	9e 3f       	cpi	r25, 0xFE	; 254
    1234:	51 05       	cpc	r21, r1
    1236:	70 f0       	brcs	.+28     	; 0x1254 <__mulsf3_pse+0x9c>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <__fp_inf>
    123a:	5e c0       	rjmp	.+188    	; 0x12f8 <__fp_szero>
    123c:	5f 3f       	cpi	r21, 0xFF	; 255
    123e:	ec f3       	brlt	.-6      	; 0x123a <__mulsf3_pse+0x82>
    1240:	98 3e       	cpi	r25, 0xE8	; 232
    1242:	dc f3       	brlt	.-10     	; 0x123a <__mulsf3_pse+0x82>
    1244:	86 95       	lsr	r24
    1246:	77 95       	ror	r23
    1248:	67 95       	ror	r22
    124a:	b7 95       	ror	r27
    124c:	f7 95       	ror	r31
    124e:	e7 95       	ror	r30
    1250:	9f 5f       	subi	r25, 0xFF	; 255
    1252:	c1 f7       	brne	.-16     	; 0x1244 <__mulsf3_pse+0x8c>
    1254:	fe 2b       	or	r31, r30
    1256:	88 0f       	add	r24, r24
    1258:	91 1d       	adc	r25, r1
    125a:	96 95       	lsr	r25
    125c:	87 95       	ror	r24
    125e:	97 f9       	bld	r25, 7
    1260:	08 95       	ret

00001262 <__fp_inf>:
    1262:	97 f9       	bld	r25, 7
    1264:	9f 67       	ori	r25, 0x7F	; 127
    1266:	80 e8       	ldi	r24, 0x80	; 128
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	08 95       	ret

0000126e <__fp_nan>:
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	80 ec       	ldi	r24, 0xC0	; 192
    1272:	08 95       	ret

00001274 <__fp_pscA>:
    1274:	00 24       	eor	r0, r0
    1276:	0a 94       	dec	r0
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	09 06       	cpc	r0, r25
    1280:	08 95       	ret

00001282 <__fp_pscB>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	12 16       	cp	r1, r18
    1288:	13 06       	cpc	r1, r19
    128a:	14 06       	cpc	r1, r20
    128c:	05 06       	cpc	r0, r21
    128e:	08 95       	ret

00001290 <__fp_round>:
    1290:	09 2e       	mov	r0, r25
    1292:	03 94       	inc	r0
    1294:	00 0c       	add	r0, r0
    1296:	11 f4       	brne	.+4      	; 0x129c <__fp_round+0xc>
    1298:	88 23       	and	r24, r24
    129a:	52 f0       	brmi	.+20     	; 0x12b0 <__fp_round+0x20>
    129c:	bb 0f       	add	r27, r27
    129e:	40 f4       	brcc	.+16     	; 0x12b0 <__fp_round+0x20>
    12a0:	bf 2b       	or	r27, r31
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <__fp_round+0x18>
    12a4:	60 ff       	sbrs	r22, 0
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__fp_round+0x20>
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	08 95       	ret

000012b2 <__fp_split3>:
    12b2:	57 fd       	sbrc	r21, 7
    12b4:	90 58       	subi	r25, 0x80	; 128
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <__fp_splitA+0x10>
    12bc:	5f 3f       	cpi	r21, 0xFF	; 255
    12be:	71 f0       	breq	.+28     	; 0x12dc <__fp_splitA+0x1a>
    12c0:	47 95       	ror	r20

000012c2 <__fp_splitA>:
    12c2:	88 0f       	add	r24, r24
    12c4:	97 fb       	bst	r25, 7
    12c6:	99 1f       	adc	r25, r25
    12c8:	61 f0       	breq	.+24     	; 0x12e2 <__fp_splitA+0x20>
    12ca:	9f 3f       	cpi	r25, 0xFF	; 255
    12cc:	79 f0       	breq	.+30     	; 0x12ec <__fp_splitA+0x2a>
    12ce:	87 95       	ror	r24
    12d0:	08 95       	ret
    12d2:	12 16       	cp	r1, r18
    12d4:	13 06       	cpc	r1, r19
    12d6:	14 06       	cpc	r1, r20
    12d8:	55 1f       	adc	r21, r21
    12da:	f2 cf       	rjmp	.-28     	; 0x12c0 <__fp_split3+0xe>
    12dc:	46 95       	lsr	r20
    12de:	f1 df       	rcall	.-30     	; 0x12c2 <__fp_splitA>
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__fp_splitA+0x30>
    12e2:	16 16       	cp	r1, r22
    12e4:	17 06       	cpc	r1, r23
    12e6:	18 06       	cpc	r1, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	f1 cf       	rjmp	.-30     	; 0x12ce <__fp_splitA+0xc>
    12ec:	86 95       	lsr	r24
    12ee:	71 05       	cpc	r23, r1
    12f0:	61 05       	cpc	r22, r1
    12f2:	08 94       	sec
    12f4:	08 95       	ret

000012f6 <__fp_zero>:
    12f6:	e8 94       	clt

000012f8 <__fp_szero>:
    12f8:	bb 27       	eor	r27, r27
    12fa:	66 27       	eor	r22, r22
    12fc:	77 27       	eor	r23, r23
    12fe:	cb 01       	movw	r24, r22
    1300:	97 f9       	bld	r25, 7
    1302:	08 95       	ret

00001304 <malloc>:
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	91 05       	cpc	r25, r1
    1310:	10 f4       	brcc	.+4      	; 0x1316 <malloc+0x12>
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__flp>
    131a:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__flp+0x1>
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	30 97       	sbiw	r30, 0x00	; 0
    1328:	19 f1       	breq	.+70     	; 0x1370 <malloc+0x6c>
    132a:	40 81       	ld	r20, Z
    132c:	51 81       	ldd	r21, Z+1	; 0x01
    132e:	02 81       	ldd	r16, Z+2	; 0x02
    1330:	13 81       	ldd	r17, Z+3	; 0x03
    1332:	48 17       	cp	r20, r24
    1334:	59 07       	cpc	r21, r25
    1336:	c8 f0       	brcs	.+50     	; 0x136a <malloc+0x66>
    1338:	84 17       	cp	r24, r20
    133a:	95 07       	cpc	r25, r21
    133c:	69 f4       	brne	.+26     	; 0x1358 <malloc+0x54>
    133e:	10 97       	sbiw	r26, 0x00	; 0
    1340:	31 f0       	breq	.+12     	; 0x134e <malloc+0x4a>
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	0c 93       	st	X, r16
    1346:	12 97       	sbiw	r26, 0x02	; 2
    1348:	13 96       	adiw	r26, 0x03	; 3
    134a:	1c 93       	st	X, r17
    134c:	27 c0       	rjmp	.+78     	; 0x139c <malloc+0x98>
    134e:	00 93 80 03 	sts	0x0380, r16	; 0x800380 <__flp>
    1352:	10 93 81 03 	sts	0x0381, r17	; 0x800381 <__flp+0x1>
    1356:	22 c0       	rjmp	.+68     	; 0x139c <malloc+0x98>
    1358:	21 15       	cp	r18, r1
    135a:	31 05       	cpc	r19, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <malloc+0x60>
    135e:	42 17       	cp	r20, r18
    1360:	53 07       	cpc	r21, r19
    1362:	18 f4       	brcc	.+6      	; 0x136a <malloc+0x66>
    1364:	9a 01       	movw	r18, r20
    1366:	bd 01       	movw	r22, r26
    1368:	ef 01       	movw	r28, r30
    136a:	df 01       	movw	r26, r30
    136c:	f8 01       	movw	r30, r16
    136e:	db cf       	rjmp	.-74     	; 0x1326 <malloc+0x22>
    1370:	21 15       	cp	r18, r1
    1372:	31 05       	cpc	r19, r1
    1374:	f9 f0       	breq	.+62     	; 0x13b4 <malloc+0xb0>
    1376:	28 1b       	sub	r18, r24
    1378:	39 0b       	sbc	r19, r25
    137a:	24 30       	cpi	r18, 0x04	; 4
    137c:	31 05       	cpc	r19, r1
    137e:	80 f4       	brcc	.+32     	; 0x13a0 <malloc+0x9c>
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	9b 81       	ldd	r25, Y+3	; 0x03
    1384:	61 15       	cp	r22, r1
    1386:	71 05       	cpc	r23, r1
    1388:	21 f0       	breq	.+8      	; 0x1392 <malloc+0x8e>
    138a:	fb 01       	movw	r30, r22
    138c:	93 83       	std	Z+3, r25	; 0x03
    138e:	82 83       	std	Z+2, r24	; 0x02
    1390:	04 c0       	rjmp	.+8      	; 0x139a <malloc+0x96>
    1392:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__flp+0x1>
    1396:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__flp>
    139a:	fe 01       	movw	r30, r28
    139c:	32 96       	adiw	r30, 0x02	; 2
    139e:	44 c0       	rjmp	.+136    	; 0x1428 <malloc+0x124>
    13a0:	fe 01       	movw	r30, r28
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	81 93       	st	Z+, r24
    13a8:	91 93       	st	Z+, r25
    13aa:	22 50       	subi	r18, 0x02	; 2
    13ac:	31 09       	sbc	r19, r1
    13ae:	39 83       	std	Y+1, r19	; 0x01
    13b0:	28 83       	st	Y, r18
    13b2:	3a c0       	rjmp	.+116    	; 0x1428 <malloc+0x124>
    13b4:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    13b8:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    13bc:	23 2b       	or	r18, r19
    13be:	41 f4       	brne	.+16     	; 0x13d0 <malloc+0xcc>
    13c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13c4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13c8:	30 93 7f 03 	sts	0x037F, r19	; 0x80037f <__brkval+0x1>
    13cc:	20 93 7e 03 	sts	0x037E, r18	; 0x80037e <__brkval>
    13d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	41 f4       	brne	.+16     	; 0x13ee <malloc+0xea>
    13de:	2d b7       	in	r18, 0x3d	; 61
    13e0:	3e b7       	in	r19, 0x3e	; 62
    13e2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13e6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13ea:	24 1b       	sub	r18, r20
    13ec:	35 0b       	sbc	r19, r21
    13ee:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <__brkval>
    13f2:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <__brkval+0x1>
    13f6:	e2 17       	cp	r30, r18
    13f8:	f3 07       	cpc	r31, r19
    13fa:	a0 f4       	brcc	.+40     	; 0x1424 <malloc+0x120>
    13fc:	2e 1b       	sub	r18, r30
    13fe:	3f 0b       	sbc	r19, r31
    1400:	28 17       	cp	r18, r24
    1402:	39 07       	cpc	r19, r25
    1404:	78 f0       	brcs	.+30     	; 0x1424 <malloc+0x120>
    1406:	ac 01       	movw	r20, r24
    1408:	4e 5f       	subi	r20, 0xFE	; 254
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	24 17       	cp	r18, r20
    140e:	35 07       	cpc	r19, r21
    1410:	48 f0       	brcs	.+18     	; 0x1424 <malloc+0x120>
    1412:	4e 0f       	add	r20, r30
    1414:	5f 1f       	adc	r21, r31
    1416:	50 93 7f 03 	sts	0x037F, r21	; 0x80037f <__brkval+0x1>
    141a:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <__brkval>
    141e:	81 93       	st	Z+, r24
    1420:	91 93       	st	Z+, r25
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <malloc+0x124>
    1424:	e0 e0       	ldi	r30, 0x00	; 0
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	cf 01       	movw	r24, r30
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <free>:
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	09 f4       	brne	.+2      	; 0x143e <free+0xa>
    143c:	81 c0       	rjmp	.+258    	; 0x1540 <free+0x10c>
    143e:	fc 01       	movw	r30, r24
    1440:	32 97       	sbiw	r30, 0x02	; 2
    1442:	13 82       	std	Z+3, r1	; 0x03
    1444:	12 82       	std	Z+2, r1	; 0x02
    1446:	a0 91 80 03 	lds	r26, 0x0380	; 0x800380 <__flp>
    144a:	b0 91 81 03 	lds	r27, 0x0381	; 0x800381 <__flp+0x1>
    144e:	10 97       	sbiw	r26, 0x00	; 0
    1450:	81 f4       	brne	.+32     	; 0x1472 <free+0x3e>
    1452:	20 81       	ld	r18, Z
    1454:	31 81       	ldd	r19, Z+1	; 0x01
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    145e:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	51 f5       	brne	.+84     	; 0x14bc <free+0x88>
    1468:	f0 93 7f 03 	sts	0x037F, r31	; 0x80037f <__brkval+0x1>
    146c:	e0 93 7e 03 	sts	0x037E, r30	; 0x80037e <__brkval>
    1470:	67 c0       	rjmp	.+206    	; 0x1540 <free+0x10c>
    1472:	ed 01       	movw	r28, r26
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	ce 17       	cp	r28, r30
    147a:	df 07       	cpc	r29, r31
    147c:	40 f4       	brcc	.+16     	; 0x148e <free+0x5a>
    147e:	4a 81       	ldd	r20, Y+2	; 0x02
    1480:	5b 81       	ldd	r21, Y+3	; 0x03
    1482:	9e 01       	movw	r18, r28
    1484:	41 15       	cp	r20, r1
    1486:	51 05       	cpc	r21, r1
    1488:	f1 f0       	breq	.+60     	; 0x14c6 <free+0x92>
    148a:	ea 01       	movw	r28, r20
    148c:	f5 cf       	rjmp	.-22     	; 0x1478 <free+0x44>
    148e:	d3 83       	std	Z+3, r29	; 0x03
    1490:	c2 83       	std	Z+2, r28	; 0x02
    1492:	40 81       	ld	r20, Z
    1494:	51 81       	ldd	r21, Z+1	; 0x01
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	c8 17       	cp	r28, r24
    149c:	d9 07       	cpc	r29, r25
    149e:	59 f4       	brne	.+22     	; 0x14b6 <free+0x82>
    14a0:	88 81       	ld	r24, Y
    14a2:	99 81       	ldd	r25, Y+1	; 0x01
    14a4:	84 0f       	add	r24, r20
    14a6:	95 1f       	adc	r25, r21
    14a8:	02 96       	adiw	r24, 0x02	; 2
    14aa:	91 83       	std	Z+1, r25	; 0x01
    14ac:	80 83       	st	Z, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	93 83       	std	Z+3, r25	; 0x03
    14b4:	82 83       	std	Z+2, r24	; 0x02
    14b6:	21 15       	cp	r18, r1
    14b8:	31 05       	cpc	r19, r1
    14ba:	29 f4       	brne	.+10     	; 0x14c6 <free+0x92>
    14bc:	f0 93 81 03 	sts	0x0381, r31	; 0x800381 <__flp+0x1>
    14c0:	e0 93 80 03 	sts	0x0380, r30	; 0x800380 <__flp>
    14c4:	3d c0       	rjmp	.+122    	; 0x1540 <free+0x10c>
    14c6:	e9 01       	movw	r28, r18
    14c8:	fb 83       	std	Y+3, r31	; 0x03
    14ca:	ea 83       	std	Y+2, r30	; 0x02
    14cc:	49 91       	ld	r20, Y+
    14ce:	59 91       	ld	r21, Y+
    14d0:	c4 0f       	add	r28, r20
    14d2:	d5 1f       	adc	r29, r21
    14d4:	ec 17       	cp	r30, r28
    14d6:	fd 07       	cpc	r31, r29
    14d8:	61 f4       	brne	.+24     	; 0x14f2 <free+0xbe>
    14da:	80 81       	ld	r24, Z
    14dc:	91 81       	ldd	r25, Z+1	; 0x01
    14de:	84 0f       	add	r24, r20
    14e0:	95 1f       	adc	r25, r21
    14e2:	02 96       	adiw	r24, 0x02	; 2
    14e4:	e9 01       	movw	r28, r18
    14e6:	99 83       	std	Y+1, r25	; 0x01
    14e8:	88 83       	st	Y, r24
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	9b 83       	std	Y+3, r25	; 0x03
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	e0 e0       	ldi	r30, 0x00	; 0
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	12 96       	adiw	r26, 0x02	; 2
    14f8:	8d 91       	ld	r24, X+
    14fa:	9c 91       	ld	r25, X
    14fc:	13 97       	sbiw	r26, 0x03	; 3
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	19 f0       	breq	.+6      	; 0x1508 <free+0xd4>
    1502:	fd 01       	movw	r30, r26
    1504:	dc 01       	movw	r26, r24
    1506:	f7 cf       	rjmp	.-18     	; 0x14f6 <free+0xc2>
    1508:	8d 91       	ld	r24, X+
    150a:	9c 91       	ld	r25, X
    150c:	11 97       	sbiw	r26, 0x01	; 1
    150e:	9d 01       	movw	r18, r26
    1510:	2e 5f       	subi	r18, 0xFE	; 254
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	82 0f       	add	r24, r18
    1516:	93 1f       	adc	r25, r19
    1518:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    151c:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    1520:	28 17       	cp	r18, r24
    1522:	39 07       	cpc	r19, r25
    1524:	69 f4       	brne	.+26     	; 0x1540 <free+0x10c>
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	29 f4       	brne	.+10     	; 0x1534 <free+0x100>
    152a:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <__flp+0x1>
    152e:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <__flp>
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <free+0x104>
    1534:	13 82       	std	Z+3, r1	; 0x03
    1536:	12 82       	std	Z+2, r1	; 0x02
    1538:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <__brkval+0x1>
    153c:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <__brkval>
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <sprintf>:
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2e 97       	sbiw	r28, 0x0e	; 14
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	0d 89       	ldd	r16, Y+21	; 0x15
    1560:	1e 89       	ldd	r17, Y+22	; 0x16
    1562:	86 e0       	ldi	r24, 0x06	; 6
    1564:	8c 83       	std	Y+4, r24	; 0x04
    1566:	1a 83       	std	Y+2, r17	; 0x02
    1568:	09 83       	std	Y+1, r16	; 0x01
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f e7       	ldi	r25, 0x7F	; 127
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	ae 01       	movw	r20, r28
    1574:	47 5e       	subi	r20, 0xE7	; 231
    1576:	5f 4f       	sbci	r21, 0xFF	; 255
    1578:	6f 89       	ldd	r22, Y+23	; 0x17
    157a:	78 8d       	ldd	r23, Y+24	; 0x18
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	10 d0       	rcall	.+32     	; 0x15a2 <vfprintf>
    1582:	ef 81       	ldd	r30, Y+7	; 0x07
    1584:	f8 85       	ldd	r31, Y+8	; 0x08
    1586:	e0 0f       	add	r30, r16
    1588:	f1 1f       	adc	r31, r17
    158a:	10 82       	st	Z, r1
    158c:	2e 96       	adiw	r28, 0x0e	; 14
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <vfprintf>:
    15a2:	2f 92       	push	r2
    15a4:	3f 92       	push	r3
    15a6:	4f 92       	push	r4
    15a8:	5f 92       	push	r5
    15aa:	6f 92       	push	r6
    15ac:	7f 92       	push	r7
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	2b 97       	sbiw	r28, 0x0b	; 11
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	6c 01       	movw	r12, r24
    15d8:	7b 01       	movw	r14, r22
    15da:	8a 01       	movw	r16, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	17 82       	std	Z+7, r1	; 0x07
    15e0:	16 82       	std	Z+6, r1	; 0x06
    15e2:	83 81       	ldd	r24, Z+3	; 0x03
    15e4:	81 ff       	sbrs	r24, 1
    15e6:	bf c1       	rjmp	.+894    	; 0x1966 <vfprintf+0x3c4>
    15e8:	ce 01       	movw	r24, r28
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	3c 01       	movw	r6, r24
    15ee:	f6 01       	movw	r30, r12
    15f0:	93 81       	ldd	r25, Z+3	; 0x03
    15f2:	f7 01       	movw	r30, r14
    15f4:	93 fd       	sbrc	r25, 3
    15f6:	85 91       	lpm	r24, Z+
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	81 91       	ld	r24, Z+
    15fc:	7f 01       	movw	r14, r30
    15fe:	88 23       	and	r24, r24
    1600:	09 f4       	brne	.+2      	; 0x1604 <vfprintf+0x62>
    1602:	ad c1       	rjmp	.+858    	; 0x195e <vfprintf+0x3bc>
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	39 f4       	brne	.+14     	; 0x1616 <vfprintf+0x74>
    1608:	93 fd       	sbrc	r25, 3
    160a:	85 91       	lpm	r24, Z+
    160c:	93 ff       	sbrs	r25, 3
    160e:	81 91       	ld	r24, Z+
    1610:	7f 01       	movw	r14, r30
    1612:	85 32       	cpi	r24, 0x25	; 37
    1614:	21 f4       	brne	.+8      	; 0x161e <vfprintf+0x7c>
    1616:	b6 01       	movw	r22, r12
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	d6 d1       	rcall	.+940    	; 0x19c8 <fputc>
    161c:	e8 cf       	rjmp	.-48     	; 0x15ee <vfprintf+0x4c>
    161e:	91 2c       	mov	r9, r1
    1620:	21 2c       	mov	r2, r1
    1622:	31 2c       	mov	r3, r1
    1624:	ff e1       	ldi	r31, 0x1F	; 31
    1626:	f3 15       	cp	r31, r3
    1628:	d8 f0       	brcs	.+54     	; 0x1660 <vfprintf+0xbe>
    162a:	8b 32       	cpi	r24, 0x2B	; 43
    162c:	79 f0       	breq	.+30     	; 0x164c <vfprintf+0xaa>
    162e:	38 f4       	brcc	.+14     	; 0x163e <vfprintf+0x9c>
    1630:	80 32       	cpi	r24, 0x20	; 32
    1632:	79 f0       	breq	.+30     	; 0x1652 <vfprintf+0xb0>
    1634:	83 32       	cpi	r24, 0x23	; 35
    1636:	a1 f4       	brne	.+40     	; 0x1660 <vfprintf+0xbe>
    1638:	23 2d       	mov	r18, r3
    163a:	20 61       	ori	r18, 0x10	; 16
    163c:	1d c0       	rjmp	.+58     	; 0x1678 <vfprintf+0xd6>
    163e:	8d 32       	cpi	r24, 0x2D	; 45
    1640:	61 f0       	breq	.+24     	; 0x165a <vfprintf+0xb8>
    1642:	80 33       	cpi	r24, 0x30	; 48
    1644:	69 f4       	brne	.+26     	; 0x1660 <vfprintf+0xbe>
    1646:	23 2d       	mov	r18, r3
    1648:	21 60       	ori	r18, 0x01	; 1
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <vfprintf+0xd6>
    164c:	83 2d       	mov	r24, r3
    164e:	82 60       	ori	r24, 0x02	; 2
    1650:	38 2e       	mov	r3, r24
    1652:	e3 2d       	mov	r30, r3
    1654:	e4 60       	ori	r30, 0x04	; 4
    1656:	3e 2e       	mov	r3, r30
    1658:	2a c0       	rjmp	.+84     	; 0x16ae <vfprintf+0x10c>
    165a:	f3 2d       	mov	r31, r3
    165c:	f8 60       	ori	r31, 0x08	; 8
    165e:	1d c0       	rjmp	.+58     	; 0x169a <vfprintf+0xf8>
    1660:	37 fc       	sbrc	r3, 7
    1662:	2d c0       	rjmp	.+90     	; 0x16be <vfprintf+0x11c>
    1664:	20 ed       	ldi	r18, 0xD0	; 208
    1666:	28 0f       	add	r18, r24
    1668:	2a 30       	cpi	r18, 0x0A	; 10
    166a:	40 f0       	brcs	.+16     	; 0x167c <vfprintf+0xda>
    166c:	8e 32       	cpi	r24, 0x2E	; 46
    166e:	b9 f4       	brne	.+46     	; 0x169e <vfprintf+0xfc>
    1670:	36 fc       	sbrc	r3, 6
    1672:	75 c1       	rjmp	.+746    	; 0x195e <vfprintf+0x3bc>
    1674:	23 2d       	mov	r18, r3
    1676:	20 64       	ori	r18, 0x40	; 64
    1678:	32 2e       	mov	r3, r18
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <vfprintf+0x10c>
    167c:	36 fe       	sbrs	r3, 6
    167e:	06 c0       	rjmp	.+12     	; 0x168c <vfprintf+0xea>
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	98 9e       	mul	r9, r24
    1684:	20 0d       	add	r18, r0
    1686:	11 24       	eor	r1, r1
    1688:	92 2e       	mov	r9, r18
    168a:	11 c0       	rjmp	.+34     	; 0x16ae <vfprintf+0x10c>
    168c:	ea e0       	ldi	r30, 0x0A	; 10
    168e:	2e 9e       	mul	r2, r30
    1690:	20 0d       	add	r18, r0
    1692:	11 24       	eor	r1, r1
    1694:	22 2e       	mov	r2, r18
    1696:	f3 2d       	mov	r31, r3
    1698:	f0 62       	ori	r31, 0x20	; 32
    169a:	3f 2e       	mov	r3, r31
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <vfprintf+0x10c>
    169e:	8c 36       	cpi	r24, 0x6C	; 108
    16a0:	21 f4       	brne	.+8      	; 0x16aa <vfprintf+0x108>
    16a2:	83 2d       	mov	r24, r3
    16a4:	80 68       	ori	r24, 0x80	; 128
    16a6:	38 2e       	mov	r3, r24
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x10c>
    16aa:	88 36       	cpi	r24, 0x68	; 104
    16ac:	41 f4       	brne	.+16     	; 0x16be <vfprintf+0x11c>
    16ae:	f7 01       	movw	r30, r14
    16b0:	93 fd       	sbrc	r25, 3
    16b2:	85 91       	lpm	r24, Z+
    16b4:	93 ff       	sbrs	r25, 3
    16b6:	81 91       	ld	r24, Z+
    16b8:	7f 01       	movw	r14, r30
    16ba:	81 11       	cpse	r24, r1
    16bc:	b3 cf       	rjmp	.-154    	; 0x1624 <vfprintf+0x82>
    16be:	98 2f       	mov	r25, r24
    16c0:	9f 7d       	andi	r25, 0xDF	; 223
    16c2:	95 54       	subi	r25, 0x45	; 69
    16c4:	93 30       	cpi	r25, 0x03	; 3
    16c6:	28 f4       	brcc	.+10     	; 0x16d2 <vfprintf+0x130>
    16c8:	0c 5f       	subi	r16, 0xFC	; 252
    16ca:	1f 4f       	sbci	r17, 0xFF	; 255
    16cc:	9f e3       	ldi	r25, 0x3F	; 63
    16ce:	99 83       	std	Y+1, r25	; 0x01
    16d0:	0d c0       	rjmp	.+26     	; 0x16ec <vfprintf+0x14a>
    16d2:	83 36       	cpi	r24, 0x63	; 99
    16d4:	31 f0       	breq	.+12     	; 0x16e2 <vfprintf+0x140>
    16d6:	83 37       	cpi	r24, 0x73	; 115
    16d8:	71 f0       	breq	.+28     	; 0x16f6 <vfprintf+0x154>
    16da:	83 35       	cpi	r24, 0x53	; 83
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <vfprintf+0x13e>
    16de:	55 c0       	rjmp	.+170    	; 0x178a <vfprintf+0x1e8>
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <vfprintf+0x180>
    16e2:	f8 01       	movw	r30, r16
    16e4:	80 81       	ld	r24, Z
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	0e 5f       	subi	r16, 0xFE	; 254
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	88 24       	eor	r8, r8
    16ee:	83 94       	inc	r8
    16f0:	91 2c       	mov	r9, r1
    16f2:	53 01       	movw	r10, r6
    16f4:	12 c0       	rjmp	.+36     	; 0x171a <vfprintf+0x178>
    16f6:	28 01       	movw	r4, r16
    16f8:	f2 e0       	ldi	r31, 0x02	; 2
    16fa:	4f 0e       	add	r4, r31
    16fc:	51 1c       	adc	r5, r1
    16fe:	f8 01       	movw	r30, r16
    1700:	a0 80       	ld	r10, Z
    1702:	b1 80       	ldd	r11, Z+1	; 0x01
    1704:	36 fe       	sbrs	r3, 6
    1706:	03 c0       	rjmp	.+6      	; 0x170e <vfprintf+0x16c>
    1708:	69 2d       	mov	r22, r9
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x170>
    170e:	6f ef       	ldi	r22, 0xFF	; 255
    1710:	7f ef       	ldi	r23, 0xFF	; 255
    1712:	c5 01       	movw	r24, r10
    1714:	4e d1       	rcall	.+668    	; 0x19b2 <strnlen>
    1716:	4c 01       	movw	r8, r24
    1718:	82 01       	movw	r16, r4
    171a:	f3 2d       	mov	r31, r3
    171c:	ff 77       	andi	r31, 0x7F	; 127
    171e:	3f 2e       	mov	r3, r31
    1720:	15 c0       	rjmp	.+42     	; 0x174c <vfprintf+0x1aa>
    1722:	28 01       	movw	r4, r16
    1724:	22 e0       	ldi	r18, 0x02	; 2
    1726:	42 0e       	add	r4, r18
    1728:	51 1c       	adc	r5, r1
    172a:	f8 01       	movw	r30, r16
    172c:	a0 80       	ld	r10, Z
    172e:	b1 80       	ldd	r11, Z+1	; 0x01
    1730:	36 fe       	sbrs	r3, 6
    1732:	03 c0       	rjmp	.+6      	; 0x173a <vfprintf+0x198>
    1734:	69 2d       	mov	r22, r9
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	02 c0       	rjmp	.+4      	; 0x173e <vfprintf+0x19c>
    173a:	6f ef       	ldi	r22, 0xFF	; 255
    173c:	7f ef       	ldi	r23, 0xFF	; 255
    173e:	c5 01       	movw	r24, r10
    1740:	2d d1       	rcall	.+602    	; 0x199c <strnlen_P>
    1742:	4c 01       	movw	r8, r24
    1744:	f3 2d       	mov	r31, r3
    1746:	f0 68       	ori	r31, 0x80	; 128
    1748:	3f 2e       	mov	r3, r31
    174a:	82 01       	movw	r16, r4
    174c:	33 fc       	sbrc	r3, 3
    174e:	19 c0       	rjmp	.+50     	; 0x1782 <vfprintf+0x1e0>
    1750:	82 2d       	mov	r24, r2
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	88 16       	cp	r8, r24
    1756:	99 06       	cpc	r9, r25
    1758:	a0 f4       	brcc	.+40     	; 0x1782 <vfprintf+0x1e0>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	33 d1       	rcall	.+614    	; 0x19c8 <fputc>
    1762:	2a 94       	dec	r2
    1764:	f5 cf       	rjmp	.-22     	; 0x1750 <vfprintf+0x1ae>
    1766:	f5 01       	movw	r30, r10
    1768:	37 fc       	sbrc	r3, 7
    176a:	85 91       	lpm	r24, Z+
    176c:	37 fe       	sbrs	r3, 7
    176e:	81 91       	ld	r24, Z+
    1770:	5f 01       	movw	r10, r30
    1772:	b6 01       	movw	r22, r12
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	28 d1       	rcall	.+592    	; 0x19c8 <fputc>
    1778:	21 10       	cpse	r2, r1
    177a:	2a 94       	dec	r2
    177c:	21 e0       	ldi	r18, 0x01	; 1
    177e:	82 1a       	sub	r8, r18
    1780:	91 08       	sbc	r9, r1
    1782:	81 14       	cp	r8, r1
    1784:	91 04       	cpc	r9, r1
    1786:	79 f7       	brne	.-34     	; 0x1766 <vfprintf+0x1c4>
    1788:	e1 c0       	rjmp	.+450    	; 0x194c <vfprintf+0x3aa>
    178a:	84 36       	cpi	r24, 0x64	; 100
    178c:	11 f0       	breq	.+4      	; 0x1792 <vfprintf+0x1f0>
    178e:	89 36       	cpi	r24, 0x69	; 105
    1790:	39 f5       	brne	.+78     	; 0x17e0 <vfprintf+0x23e>
    1792:	f8 01       	movw	r30, r16
    1794:	37 fe       	sbrs	r3, 7
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <vfprintf+0x204>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	0c 5f       	subi	r16, 0xFC	; 252
    17a2:	1f 4f       	sbci	r17, 0xFF	; 255
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <vfprintf+0x214>
    17a6:	60 81       	ld	r22, Z
    17a8:	71 81       	ldd	r23, Z+1	; 0x01
    17aa:	07 2e       	mov	r0, r23
    17ac:	00 0c       	add	r0, r0
    17ae:	88 0b       	sbc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	0e 5f       	subi	r16, 0xFE	; 254
    17b4:	1f 4f       	sbci	r17, 0xFF	; 255
    17b6:	f3 2d       	mov	r31, r3
    17b8:	ff 76       	andi	r31, 0x6F	; 111
    17ba:	3f 2e       	mov	r3, r31
    17bc:	97 ff       	sbrs	r25, 7
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <vfprintf+0x230>
    17c0:	90 95       	com	r25
    17c2:	80 95       	com	r24
    17c4:	70 95       	com	r23
    17c6:	61 95       	neg	r22
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	f0 68       	ori	r31, 0x80	; 128
    17d0:	3f 2e       	mov	r3, r31
    17d2:	2a e0       	ldi	r18, 0x0A	; 10
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	a3 01       	movw	r20, r6
    17d8:	33 d1       	rcall	.+614    	; 0x1a40 <__ultoa_invert>
    17da:	88 2e       	mov	r8, r24
    17dc:	86 18       	sub	r8, r6
    17de:	44 c0       	rjmp	.+136    	; 0x1868 <vfprintf+0x2c6>
    17e0:	85 37       	cpi	r24, 0x75	; 117
    17e2:	31 f4       	brne	.+12     	; 0x17f0 <vfprintf+0x24e>
    17e4:	23 2d       	mov	r18, r3
    17e6:	2f 7e       	andi	r18, 0xEF	; 239
    17e8:	b2 2e       	mov	r11, r18
    17ea:	2a e0       	ldi	r18, 0x0A	; 10
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	25 c0       	rjmp	.+74     	; 0x183a <vfprintf+0x298>
    17f0:	93 2d       	mov	r25, r3
    17f2:	99 7f       	andi	r25, 0xF9	; 249
    17f4:	b9 2e       	mov	r11, r25
    17f6:	8f 36       	cpi	r24, 0x6F	; 111
    17f8:	c1 f0       	breq	.+48     	; 0x182a <vfprintf+0x288>
    17fa:	18 f4       	brcc	.+6      	; 0x1802 <vfprintf+0x260>
    17fc:	88 35       	cpi	r24, 0x58	; 88
    17fe:	79 f0       	breq	.+30     	; 0x181e <vfprintf+0x27c>
    1800:	ae c0       	rjmp	.+348    	; 0x195e <vfprintf+0x3bc>
    1802:	80 37       	cpi	r24, 0x70	; 112
    1804:	19 f0       	breq	.+6      	; 0x180c <vfprintf+0x26a>
    1806:	88 37       	cpi	r24, 0x78	; 120
    1808:	21 f0       	breq	.+8      	; 0x1812 <vfprintf+0x270>
    180a:	a9 c0       	rjmp	.+338    	; 0x195e <vfprintf+0x3bc>
    180c:	e9 2f       	mov	r30, r25
    180e:	e0 61       	ori	r30, 0x10	; 16
    1810:	be 2e       	mov	r11, r30
    1812:	b4 fe       	sbrs	r11, 4
    1814:	0d c0       	rjmp	.+26     	; 0x1830 <vfprintf+0x28e>
    1816:	fb 2d       	mov	r31, r11
    1818:	f4 60       	ori	r31, 0x04	; 4
    181a:	bf 2e       	mov	r11, r31
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <vfprintf+0x28e>
    181e:	34 fe       	sbrs	r3, 4
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <vfprintf+0x294>
    1822:	29 2f       	mov	r18, r25
    1824:	26 60       	ori	r18, 0x06	; 6
    1826:	b2 2e       	mov	r11, r18
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <vfprintf+0x294>
    182a:	28 e0       	ldi	r18, 0x08	; 8
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	05 c0       	rjmp	.+10     	; 0x183a <vfprintf+0x298>
    1830:	20 e1       	ldi	r18, 0x10	; 16
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x298>
    1836:	20 e1       	ldi	r18, 0x10	; 16
    1838:	32 e0       	ldi	r19, 0x02	; 2
    183a:	f8 01       	movw	r30, r16
    183c:	b7 fe       	sbrs	r11, 7
    183e:	07 c0       	rjmp	.+14     	; 0x184e <vfprintf+0x2ac>
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	0c 5f       	subi	r16, 0xFC	; 252
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	06 c0       	rjmp	.+12     	; 0x185a <vfprintf+0x2b8>
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 5f       	subi	r16, 0xFE	; 254
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	a3 01       	movw	r20, r6
    185c:	f1 d0       	rcall	.+482    	; 0x1a40 <__ultoa_invert>
    185e:	88 2e       	mov	r8, r24
    1860:	86 18       	sub	r8, r6
    1862:	fb 2d       	mov	r31, r11
    1864:	ff 77       	andi	r31, 0x7F	; 127
    1866:	3f 2e       	mov	r3, r31
    1868:	36 fe       	sbrs	r3, 6
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <vfprintf+0x2e4>
    186c:	23 2d       	mov	r18, r3
    186e:	2e 7f       	andi	r18, 0xFE	; 254
    1870:	a2 2e       	mov	r10, r18
    1872:	89 14       	cp	r8, r9
    1874:	58 f4       	brcc	.+22     	; 0x188c <vfprintf+0x2ea>
    1876:	34 fe       	sbrs	r3, 4
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <vfprintf+0x2ee>
    187a:	32 fc       	sbrc	r3, 2
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <vfprintf+0x2ee>
    187e:	83 2d       	mov	r24, r3
    1880:	8e 7e       	andi	r24, 0xEE	; 238
    1882:	a8 2e       	mov	r10, r24
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <vfprintf+0x2ee>
    1886:	b8 2c       	mov	r11, r8
    1888:	a3 2c       	mov	r10, r3
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <vfprintf+0x2f0>
    188c:	b8 2c       	mov	r11, r8
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <vfprintf+0x2f0>
    1890:	b9 2c       	mov	r11, r9
    1892:	a4 fe       	sbrs	r10, 4
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <vfprintf+0x312>
    1896:	fe 01       	movw	r30, r28
    1898:	e8 0d       	add	r30, r8
    189a:	f1 1d       	adc	r31, r1
    189c:	80 81       	ld	r24, Z
    189e:	80 33       	cpi	r24, 0x30	; 48
    18a0:	21 f4       	brne	.+8      	; 0x18aa <vfprintf+0x308>
    18a2:	9a 2d       	mov	r25, r10
    18a4:	99 7e       	andi	r25, 0xE9	; 233
    18a6:	a9 2e       	mov	r10, r25
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <vfprintf+0x31a>
    18aa:	a2 fe       	sbrs	r10, 2
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <vfprintf+0x318>
    18ae:	b3 94       	inc	r11
    18b0:	b3 94       	inc	r11
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <vfprintf+0x31a>
    18b4:	8a 2d       	mov	r24, r10
    18b6:	86 78       	andi	r24, 0x86	; 134
    18b8:	09 f0       	breq	.+2      	; 0x18bc <vfprintf+0x31a>
    18ba:	b3 94       	inc	r11
    18bc:	a3 fc       	sbrc	r10, 3
    18be:	10 c0       	rjmp	.+32     	; 0x18e0 <vfprintf+0x33e>
    18c0:	a0 fe       	sbrs	r10, 0
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x32e>
    18c4:	b2 14       	cp	r11, r2
    18c6:	80 f4       	brcc	.+32     	; 0x18e8 <vfprintf+0x346>
    18c8:	28 0c       	add	r2, r8
    18ca:	92 2c       	mov	r9, r2
    18cc:	9b 18       	sub	r9, r11
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <vfprintf+0x348>
    18d0:	b2 14       	cp	r11, r2
    18d2:	58 f4       	brcc	.+22     	; 0x18ea <vfprintf+0x348>
    18d4:	b6 01       	movw	r22, r12
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	76 d0       	rcall	.+236    	; 0x19c8 <fputc>
    18dc:	b3 94       	inc	r11
    18de:	f8 cf       	rjmp	.-16     	; 0x18d0 <vfprintf+0x32e>
    18e0:	b2 14       	cp	r11, r2
    18e2:	18 f4       	brcc	.+6      	; 0x18ea <vfprintf+0x348>
    18e4:	2b 18       	sub	r2, r11
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x34a>
    18e8:	98 2c       	mov	r9, r8
    18ea:	21 2c       	mov	r2, r1
    18ec:	a4 fe       	sbrs	r10, 4
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <vfprintf+0x36c>
    18f0:	b6 01       	movw	r22, r12
    18f2:	80 e3       	ldi	r24, 0x30	; 48
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	68 d0       	rcall	.+208    	; 0x19c8 <fputc>
    18f8:	a2 fe       	sbrs	r10, 2
    18fa:	16 c0       	rjmp	.+44     	; 0x1928 <vfprintf+0x386>
    18fc:	a1 fc       	sbrc	r10, 1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <vfprintf+0x364>
    1900:	88 e7       	ldi	r24, 0x78	; 120
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x368>
    1906:	88 e5       	ldi	r24, 0x58	; 88
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	b6 01       	movw	r22, r12
    190c:	0c c0       	rjmp	.+24     	; 0x1926 <vfprintf+0x384>
    190e:	8a 2d       	mov	r24, r10
    1910:	86 78       	andi	r24, 0x86	; 134
    1912:	51 f0       	breq	.+20     	; 0x1928 <vfprintf+0x386>
    1914:	a1 fe       	sbrs	r10, 1
    1916:	02 c0       	rjmp	.+4      	; 0x191c <vfprintf+0x37a>
    1918:	8b e2       	ldi	r24, 0x2B	; 43
    191a:	01 c0       	rjmp	.+2      	; 0x191e <vfprintf+0x37c>
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	a7 fc       	sbrc	r10, 7
    1920:	8d e2       	ldi	r24, 0x2D	; 45
    1922:	b6 01       	movw	r22, r12
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	50 d0       	rcall	.+160    	; 0x19c8 <fputc>
    1928:	89 14       	cp	r8, r9
    192a:	30 f4       	brcc	.+12     	; 0x1938 <vfprintf+0x396>
    192c:	b6 01       	movw	r22, r12
    192e:	80 e3       	ldi	r24, 0x30	; 48
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	4a d0       	rcall	.+148    	; 0x19c8 <fputc>
    1934:	9a 94       	dec	r9
    1936:	f8 cf       	rjmp	.-16     	; 0x1928 <vfprintf+0x386>
    1938:	8a 94       	dec	r8
    193a:	f3 01       	movw	r30, r6
    193c:	e8 0d       	add	r30, r8
    193e:	f1 1d       	adc	r31, r1
    1940:	80 81       	ld	r24, Z
    1942:	b6 01       	movw	r22, r12
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	40 d0       	rcall	.+128    	; 0x19c8 <fputc>
    1948:	81 10       	cpse	r8, r1
    194a:	f6 cf       	rjmp	.-20     	; 0x1938 <vfprintf+0x396>
    194c:	22 20       	and	r2, r2
    194e:	09 f4       	brne	.+2      	; 0x1952 <vfprintf+0x3b0>
    1950:	4e ce       	rjmp	.-868    	; 0x15ee <vfprintf+0x4c>
    1952:	b6 01       	movw	r22, r12
    1954:	80 e2       	ldi	r24, 0x20	; 32
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	37 d0       	rcall	.+110    	; 0x19c8 <fputc>
    195a:	2a 94       	dec	r2
    195c:	f7 cf       	rjmp	.-18     	; 0x194c <vfprintf+0x3aa>
    195e:	f6 01       	movw	r30, r12
    1960:	86 81       	ldd	r24, Z+6	; 0x06
    1962:	97 81       	ldd	r25, Z+7	; 0x07
    1964:	02 c0       	rjmp	.+4      	; 0x196a <vfprintf+0x3c8>
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	9f ef       	ldi	r25, 0xFF	; 255
    196a:	2b 96       	adiw	r28, 0x0b	; 11
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	df 90       	pop	r13
    1984:	cf 90       	pop	r12
    1986:	bf 90       	pop	r11
    1988:	af 90       	pop	r10
    198a:	9f 90       	pop	r9
    198c:	8f 90       	pop	r8
    198e:	7f 90       	pop	r7
    1990:	6f 90       	pop	r6
    1992:	5f 90       	pop	r5
    1994:	4f 90       	pop	r4
    1996:	3f 90       	pop	r3
    1998:	2f 90       	pop	r2
    199a:	08 95       	ret

0000199c <strnlen_P>:
    199c:	fc 01       	movw	r30, r24
    199e:	05 90       	lpm	r0, Z+
    19a0:	61 50       	subi	r22, 0x01	; 1
    19a2:	70 40       	sbci	r23, 0x00	; 0
    19a4:	01 10       	cpse	r0, r1
    19a6:	d8 f7       	brcc	.-10     	; 0x199e <strnlen_P+0x2>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	8e 0f       	add	r24, r30
    19ae:	9f 1f       	adc	r25, r31
    19b0:	08 95       	ret

000019b2 <strnlen>:
    19b2:	fc 01       	movw	r30, r24
    19b4:	61 50       	subi	r22, 0x01	; 1
    19b6:	70 40       	sbci	r23, 0x00	; 0
    19b8:	01 90       	ld	r0, Z+
    19ba:	01 10       	cpse	r0, r1
    19bc:	d8 f7       	brcc	.-10     	; 0x19b4 <strnlen+0x2>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	8e 0f       	add	r24, r30
    19c4:	9f 1f       	adc	r25, r31
    19c6:	08 95       	ret

000019c8 <fputc>:
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	fb 01       	movw	r30, r22
    19d2:	23 81       	ldd	r18, Z+3	; 0x03
    19d4:	21 fd       	sbrc	r18, 1
    19d6:	03 c0       	rjmp	.+6      	; 0x19de <fputc+0x16>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	9f ef       	ldi	r25, 0xFF	; 255
    19dc:	2c c0       	rjmp	.+88     	; 0x1a36 <fputc+0x6e>
    19de:	22 ff       	sbrs	r18, 2
    19e0:	16 c0       	rjmp	.+44     	; 0x1a0e <fputc+0x46>
    19e2:	46 81       	ldd	r20, Z+6	; 0x06
    19e4:	57 81       	ldd	r21, Z+7	; 0x07
    19e6:	24 81       	ldd	r18, Z+4	; 0x04
    19e8:	35 81       	ldd	r19, Z+5	; 0x05
    19ea:	42 17       	cp	r20, r18
    19ec:	53 07       	cpc	r21, r19
    19ee:	44 f4       	brge	.+16     	; 0x1a00 <fputc+0x38>
    19f0:	a0 81       	ld	r26, Z
    19f2:	b1 81       	ldd	r27, Z+1	; 0x01
    19f4:	9d 01       	movw	r18, r26
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	31 83       	std	Z+1, r19	; 0x01
    19fc:	20 83       	st	Z, r18
    19fe:	8c 93       	st	X, r24
    1a00:	26 81       	ldd	r18, Z+6	; 0x06
    1a02:	37 81       	ldd	r19, Z+7	; 0x07
    1a04:	2f 5f       	subi	r18, 0xFF	; 255
    1a06:	3f 4f       	sbci	r19, 0xFF	; 255
    1a08:	37 83       	std	Z+7, r19	; 0x07
    1a0a:	26 83       	std	Z+6, r18	; 0x06
    1a0c:	14 c0       	rjmp	.+40     	; 0x1a36 <fputc+0x6e>
    1a0e:	8b 01       	movw	r16, r22
    1a10:	ec 01       	movw	r28, r24
    1a12:	fb 01       	movw	r30, r22
    1a14:	00 84       	ldd	r0, Z+8	; 0x08
    1a16:	f1 85       	ldd	r31, Z+9	; 0x09
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	09 95       	icall
    1a1c:	89 2b       	or	r24, r25
    1a1e:	e1 f6       	brne	.-72     	; 0x19d8 <fputc+0x10>
    1a20:	d8 01       	movw	r26, r16
    1a22:	16 96       	adiw	r26, 0x06	; 6
    1a24:	8d 91       	ld	r24, X+
    1a26:	9c 91       	ld	r25, X
    1a28:	17 97       	sbiw	r26, 0x07	; 7
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	17 96       	adiw	r26, 0x07	; 7
    1a2e:	9c 93       	st	X, r25
    1a30:	8e 93       	st	-X, r24
    1a32:	16 97       	sbiw	r26, 0x06	; 6
    1a34:	ce 01       	movw	r24, r28
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <__ultoa_invert>:
    1a40:	fa 01       	movw	r30, r20
    1a42:	aa 27       	eor	r26, r26
    1a44:	28 30       	cpi	r18, 0x08	; 8
    1a46:	51 f1       	breq	.+84     	; 0x1a9c <__ultoa_invert+0x5c>
    1a48:	20 31       	cpi	r18, 0x10	; 16
    1a4a:	81 f1       	breq	.+96     	; 0x1aac <__ultoa_invert+0x6c>
    1a4c:	e8 94       	clt
    1a4e:	6f 93       	push	r22
    1a50:	6e 7f       	andi	r22, 0xFE	; 254
    1a52:	6e 5f       	subi	r22, 0xFE	; 254
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	8f 4f       	sbci	r24, 0xFF	; 255
    1a58:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5a:	af 4f       	sbci	r26, 0xFF	; 255
    1a5c:	b1 e0       	ldi	r27, 0x01	; 1
    1a5e:	3e d0       	rcall	.+124    	; 0x1adc <__ultoa_invert+0x9c>
    1a60:	b4 e0       	ldi	r27, 0x04	; 4
    1a62:	3c d0       	rcall	.+120    	; 0x1adc <__ultoa_invert+0x9c>
    1a64:	67 0f       	add	r22, r23
    1a66:	78 1f       	adc	r23, r24
    1a68:	89 1f       	adc	r24, r25
    1a6a:	9a 1f       	adc	r25, r26
    1a6c:	a1 1d       	adc	r26, r1
    1a6e:	68 0f       	add	r22, r24
    1a70:	79 1f       	adc	r23, r25
    1a72:	8a 1f       	adc	r24, r26
    1a74:	91 1d       	adc	r25, r1
    1a76:	a1 1d       	adc	r26, r1
    1a78:	6a 0f       	add	r22, r26
    1a7a:	71 1d       	adc	r23, r1
    1a7c:	81 1d       	adc	r24, r1
    1a7e:	91 1d       	adc	r25, r1
    1a80:	a1 1d       	adc	r26, r1
    1a82:	20 d0       	rcall	.+64     	; 0x1ac4 <__ultoa_invert+0x84>
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <__ultoa_invert+0x48>
    1a86:	68 94       	set
    1a88:	3f 91       	pop	r19
    1a8a:	2a e0       	ldi	r18, 0x0A	; 10
    1a8c:	26 9f       	mul	r18, r22
    1a8e:	11 24       	eor	r1, r1
    1a90:	30 19       	sub	r19, r0
    1a92:	30 5d       	subi	r19, 0xD0	; 208
    1a94:	31 93       	st	Z+, r19
    1a96:	de f6       	brtc	.-74     	; 0x1a4e <__ultoa_invert+0xe>
    1a98:	cf 01       	movw	r24, r30
    1a9a:	08 95       	ret
    1a9c:	46 2f       	mov	r20, r22
    1a9e:	47 70       	andi	r20, 0x07	; 7
    1aa0:	40 5d       	subi	r20, 0xD0	; 208
    1aa2:	41 93       	st	Z+, r20
    1aa4:	b3 e0       	ldi	r27, 0x03	; 3
    1aa6:	0f d0       	rcall	.+30     	; 0x1ac6 <__ultoa_invert+0x86>
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <__ultoa_invert+0x5c>
    1aaa:	f6 cf       	rjmp	.-20     	; 0x1a98 <__ultoa_invert+0x58>
    1aac:	46 2f       	mov	r20, r22
    1aae:	4f 70       	andi	r20, 0x0F	; 15
    1ab0:	40 5d       	subi	r20, 0xD0	; 208
    1ab2:	4a 33       	cpi	r20, 0x3A	; 58
    1ab4:	18 f0       	brcs	.+6      	; 0x1abc <__ultoa_invert+0x7c>
    1ab6:	49 5d       	subi	r20, 0xD9	; 217
    1ab8:	31 fd       	sbrc	r19, 1
    1aba:	40 52       	subi	r20, 0x20	; 32
    1abc:	41 93       	st	Z+, r20
    1abe:	02 d0       	rcall	.+4      	; 0x1ac4 <__ultoa_invert+0x84>
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__ultoa_invert+0x6c>
    1ac2:	ea cf       	rjmp	.-44     	; 0x1a98 <__ultoa_invert+0x58>
    1ac4:	b4 e0       	ldi	r27, 0x04	; 4
    1ac6:	a6 95       	lsr	r26
    1ac8:	97 95       	ror	r25
    1aca:	87 95       	ror	r24
    1acc:	77 95       	ror	r23
    1ace:	67 95       	ror	r22
    1ad0:	ba 95       	dec	r27
    1ad2:	c9 f7       	brne	.-14     	; 0x1ac6 <__ultoa_invert+0x86>
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	61 05       	cpc	r22, r1
    1ad8:	71 05       	cpc	r23, r1
    1ada:	08 95       	ret
    1adc:	9b 01       	movw	r18, r22
    1ade:	ac 01       	movw	r20, r24
    1ae0:	0a 2e       	mov	r0, r26
    1ae2:	06 94       	lsr	r0
    1ae4:	57 95       	ror	r21
    1ae6:	47 95       	ror	r20
    1ae8:	37 95       	ror	r19
    1aea:	27 95       	ror	r18
    1aec:	ba 95       	dec	r27
    1aee:	c9 f7       	brne	.-14     	; 0x1ae2 <__ultoa_invert+0xa2>
    1af0:	62 0f       	add	r22, r18
    1af2:	73 1f       	adc	r23, r19
    1af4:	84 1f       	adc	r24, r20
    1af6:	95 1f       	adc	r25, r21
    1af8:	a0 1d       	adc	r26, r0
    1afa:	08 95       	ret

00001afc <_exit>:
    1afc:	f8 94       	cli

00001afe <__stop_program>:
    1afe:	ff cf       	rjmp	.-2      	; 0x1afe <__stop_program>
