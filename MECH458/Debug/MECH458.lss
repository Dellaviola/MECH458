
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000e78  00000f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  0080015c  0080015c  00000f68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002925  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001587  00000000  00000000  00003b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002740  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  00007848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a669  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f2a  00000000  00000000  000123d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000132fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000479f  00000000  00000000  000134f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	09 c2       	rjmp	.+1042   	; 0x458 <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e7       	ldi	r30, 0x78	; 120
  ac:	fe e0       	ldi	r31, 0x0E	; 14
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 35       	cpi	r26, 0x5C	; 92
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ac e5       	ldi	r26, 0x5C	; 92
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a5 3b       	cpi	r26, 0xB5	; 181
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	a7 d1       	rcall	.+846    	; 0x41e <main>
  d0:	d1 c6       	rjmp	.+3490   	; 0xe74 <_exit>

000000d2 <__bad_interrupt>:
  d2:	a9 c1       	rjmp	.+850    	; 0x426 <__vector_default>

000000d4 <ADC_Init>:
#include "string.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  d6:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
  d8:	eb e7       	ldi	r30, 0x7B	; 123
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
  f2:	ac e7       	ldi	r26, 0x7C	; 124
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	81 64       	ori	r24, 0x41	; 65
  fa:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 102:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 104:	08 95       	ret

00000106 <__vector_29>:
	}
}

ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	    g_ADCResultl = ADCL;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <g_ADCResultl+0x1>
 11e:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <g_ADCResultl>
		g_ADCResulth = ADCH;
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <g_ADCResulth+0x1>
 12c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_ADCResulth>
	    g_ADCFlag = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <g_ADCFlag>
	
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <C_Blinky>:
	PORTC = arg;
}
void Do_Nothing(void *arg)
{
	(void) arg;
	delay_flag = -1;
 144:	88 b1       	in	r24, 0x08	; 8
 146:	80 95       	com	r24
 148:	88 b9       	out	0x08, r24	; 8
 14a:	08 95       	ret

0000014c <Say_Hello>:
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	87 c2       	rjmp	.+1294   	; 0x660 <UART_SendString>
 152:	08 95       	ret

00000154 <LL_ItemInit>:

void* LL_GetArg(list* ref)
{
	//
	return ((timerNode*)ref->node)->arg;
}
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	d6 2f       	mov	r29, r22
 160:	c4 2f       	mov	r28, r20
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	8a d2       	rcall	.+1300   	; 0x67c <malloc>
 168:	fc 01       	movw	r30, r24
 16a:	11 83       	std	Z+1, r17	; 0x01
 16c:	00 83       	st	Z, r16
 16e:	d2 83       	std	Z+2, r29	; 0x02
 170:	c3 83       	std	Z+3, r28	; 0x03
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <LL_TimerInit>:
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	7c 01       	movw	r14, r24
 190:	eb 01       	movw	r28, r22
 192:	5a 01       	movw	r10, r20
 194:	69 01       	movw	r12, r18
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	70 d2       	rcall	.+1248   	; 0x67c <malloc>
 19c:	fc 01       	movw	r30, r24
 19e:	d0 86       	std	Z+8, r13	; 0x08
 1a0:	c7 82       	std	Z+7, r12	; 0x07
 1a2:	b6 82       	std	Z+6, r11	; 0x06
 1a4:	a5 82       	std	Z+5, r10	; 0x05
 1a6:	f2 82       	std	Z+2, r15	; 0x02
 1a8:	e1 82       	std	Z+1, r14	; 0x01
 1aa:	d4 83       	std	Z+4, r29	; 0x04
 1ac:	c3 83       	std	Z+3, r28	; 0x03
 1ae:	00 83       	st	Z, r16
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	08 95       	ret

000001c4 <LL_ItemListInit>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	56 d2       	rcall	.+1196   	; 0x67c <malloc>
 1d0:	fc 01       	movw	r30, r24
 1d2:	d1 83       	std	Z+1, r29	; 0x01
 1d4:	c0 83       	st	Z, r28
 1d6:	15 82       	std	Z+5, r1	; 0x05
 1d8:	14 82       	std	Z+4, r1	; 0x04
 1da:	13 82       	std	Z+3, r1	; 0x03
 1dc:	12 82       	std	Z+2, r1	; 0x02
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LL_TimerListInit>:
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	46 d2       	rcall	.+1164   	; 0x67c <malloc>
 1f0:	fc 01       	movw	r30, r24
 1f2:	d1 83       	std	Z+1, r29	; 0x01
 1f4:	c0 83       	st	Z, r28
 1f6:	15 82       	std	Z+5, r1	; 0x05
 1f8:	14 82       	std	Z+4, r1	; 0x04
 1fa:	13 82       	std	Z+3, r1	; 0x03
 1fc:	12 82       	std	Z+2, r1	; 0x02
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LL_AddBack>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	cb 01       	movw	r24, r22
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LL_AddBack+0xc>
 20e:	e9 01       	movw	r28, r18
 210:	2a 81       	ldd	r18, Y+2	; 0x02
 212:	3b 81       	ldd	r19, Y+3	; 0x03
 214:	21 15       	cp	r18, r1
 216:	31 05       	cpc	r19, r1
 218:	d1 f7       	brne	.-12     	; 0x20e <LL_AddBack+0xa>
 21a:	d4 df       	rcall	.-88     	; 0x1c4 <LL_ItemListInit>
 21c:	9b 83       	std	Y+3, r25	; 0x03
 21e:	8a 83       	std	Y+2, r24	; 0x02
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LL_Remove>:
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ec 01       	movw	r28, r24
 234:	0a 81       	ldd	r16, Y+2	; 0x02
 236:	1b 81       	ldd	r17, Y+3	; 0x03
 238:	ec 80       	ldd	r14, Y+4	; 0x04
 23a:	fd 80       	ldd	r15, Y+5	; 0x05
 23c:	88 81       	ld	r24, Y
 23e:	99 81       	ldd	r25, Y+1	; 0x01
 240:	b5 d2       	rcall	.+1386   	; 0x7ac <free>
 242:	ce 01       	movw	r24, r28
 244:	b3 d2       	rcall	.+1382   	; 0x7ac <free>
 246:	01 15       	cp	r16, r1
 248:	11 05       	cpc	r17, r1
 24a:	19 f0       	breq	.+6      	; 0x252 <LL_Remove+0x2c>
 24c:	f8 01       	movw	r30, r16
 24e:	f5 82       	std	Z+5, r15	; 0x05
 250:	e4 82       	std	Z+4, r14	; 0x04
 252:	e1 14       	cp	r14, r1
 254:	f1 04       	cpc	r15, r1
 256:	19 f0       	breq	.+6      	; 0x25e <LL_Remove+0x38>
 258:	f7 01       	movw	r30, r14
 25a:	13 83       	std	Z+3, r17	; 0x03
 25c:	02 83       	std	Z+2, r16	; 0x02
 25e:	c8 01       	movw	r24, r16
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <LL_Head>:
 26e:	fc 01       	movw	r30, r24
 270:	01 c0       	rjmp	.+2      	; 0x274 <LL_Head+0x6>
 272:	f9 01       	movw	r30, r18
 274:	24 81       	ldd	r18, Z+4	; 0x04
 276:	35 81       	ldd	r19, Z+5	; 0x05
 278:	21 15       	cp	r18, r1
 27a:	31 05       	cpc	r19, r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <LL_Head+0x4>
 27e:	cf 01       	movw	r24, r30
 280:	08 95       	ret

00000282 <LL_Size>:
 282:	dc 01       	movw	r26, r24
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	ed 91       	ld	r30, X+
 288:	fc 91       	ld	r31, X
 28a:	13 97       	sbiw	r26, 0x03	; 3
 28c:	30 97       	sbiw	r30, 0x00	; 0
 28e:	41 f0       	breq	.+16     	; 0x2a0 <LL_Size+0x1e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	02 80       	ldd	r0, Z+2	; 0x02
 296:	f3 81       	ldd	r31, Z+3	; 0x03
 298:	e0 2d       	mov	r30, r0
 29a:	30 97       	sbiw	r30, 0x00	; 0
 29c:	d1 f7       	brne	.-12     	; 0x292 <LL_Size+0x10>
 29e:	08 95       	ret
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret

000002a4 <LL_GetClass>:
 2a4:	dc 01       	movw	r26, r24
 2a6:	ed 91       	ld	r30, X+
 2a8:	fc 91       	ld	r31, X
 2aa:	83 81       	ldd	r24, Z+3	; 0x03
 2ac:	08 95       	ret

000002ae <LL_GetRefl>:
 2ae:	dc 01       	movw	r26, r24
 2b0:	ed 91       	ld	r30, X+
 2b2:	fc 91       	ld	r31, X
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	08 95       	ret

000002ba <LL_CallCallback>:
 2ba:	fc 01       	movw	r30, r24
 2bc:	a0 81       	ld	r26, Z
 2be:	b1 81       	ldd	r27, Z+1	; 0x01
 2c0:	15 96       	adiw	r26, 0x05	; 5
 2c2:	ed 91       	ld	r30, X+
 2c4:	fc 91       	ld	r31, X
 2c6:	16 97       	sbiw	r26, 0x06	; 6
 2c8:	17 96       	adiw	r26, 0x07	; 7
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	18 97       	sbiw	r26, 0x08	; 8
 2d0:	09 95       	icall
 2d2:	08 95       	ret

000002d4 <LL_UpdateRefl>:

void LL_UpdateRefl(list* ref, uint16_t newRefl)
{
	//
	((itemNode*)ref->node)->reflect = newRefl;
 2d4:	dc 01       	movw	r26, r24
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	71 83       	std	Z+1, r23	; 0x01
 2dc:	60 83       	st	Z, r22
 2de:	08 95       	ret

000002e0 <GPIO_Init>:
#include "gpio.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
 2e4:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
 2e6:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
 2e8:	80 ef       	ldi	r24, 0xF0	; 240
 2ea:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 2ec:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
 2ee:	10 ba       	out	0x10, r1	; 16



    return 0;
}
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <LISTTEST>:
 */ 

#include "LISTTEST.h"

void LISTTEST()
{
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	a0 97       	sbiw	r28, 0x20	; 32
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	
	cli();
 314:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
 316:	e1 e6       	ldi	r30, 0x61	; 97
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	80 83       	st	Z, r24
	CLKPR = 0;
 31e:	10 82       	st	Z, r1
	UART_Init();
 320:	87 d1       	rcall	.+782    	; 0x630 <UART_Init>
	GPIO_Init();
 322:	de df       	rcall	.-68     	; 0x2e0 <GPIO_Init>
 324:	8f ef       	ldi	r24, 0xFF	; 255
	stepper_handle = -1;
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <stepper_handle+0x1>
 32c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <stepper_handle>
 330:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <timer_handle+0x1>
	timer_handle = -1;
 334:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <timer_handle>
 338:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <delay_flag+0x1>
	delay_flag = -1;
 33c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <delay_flag>
	if (Timer_Init() != 0) UART_SendString("TIMER DID NOT INITIALIZE"); //red leds error
 340:	ef d0       	rcall	.+478    	; 0x520 <Timer_Init>
 342:	89 2b       	or	r24, r25
 344:	19 f0       	breq	.+6      	; 0x34c <LISTTEST+0x56>
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	91 e0       	ldi	r25, 0x01	; 1
	//Stepper_Setup();
	PWM_Init();
 34a:	8a d1       	rcall	.+788    	; 0x660 <UART_SendString>
	ADC_Init();
 34c:	7c d0       	rcall	.+248    	; 0x446 <PWM_Init>
 34e:	c2 de       	rcall	.-636    	; 0xd4 <ADC_Init>
	
	
	sei();
 350:	78 94       	sei
	
	
	UART_SendString("Testing List\r\n");
 352:	88 e2       	ldi	r24, 0x28	; 40
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	84 d1       	rcall	.+776    	; 0x660 <UART_SendString>
	PORTC = 0xF0;
 358:	80 ef       	ldi	r24, 0xF0	; 240
	itemNode* newItem = LL_ItemInit(100,100,WHITE);
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	64 e6       	ldi	r22, 0x64	; 100
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	90 e0       	ldi	r25, 0x00	; 0
	list* listIndex = LL_ItemListInit(newItem);
 364:	f7 de       	rcall	.-530    	; 0x154 <LL_ItemInit>
 366:	2e df       	rcall	.-420    	; 0x1c4 <LL_ItemListInit>
	list* timerList = NULL;
	list* head = listIndex;
	
	newItem = LL_ItemInit(100,100,BLACK);
 368:	7c 01       	movw	r14, r24
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	64 e6       	ldi	r22, 0x64	; 100
 36e:	84 e6       	ldi	r24, 0x64	; 100
 370:	90 e0       	ldi	r25, 0x00	; 0
	LL_AddBack(listIndex, newItem);
 372:	f0 de       	rcall	.-544    	; 0x154 <LL_ItemInit>
 374:	bc 01       	movw	r22, r24
 376:	c7 01       	movw	r24, r14
	newItem = LL_ItemInit(100,100,ALUMINUM);
 378:	45 df       	rcall	.-374    	; 0x204 <LL_AddBack>
 37a:	42 e0       	ldi	r20, 0x02	; 2
 37c:	64 e6       	ldi	r22, 0x64	; 100
 37e:	84 e6       	ldi	r24, 0x64	; 100
	LL_AddBack(listIndex, newItem);
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	e8 de       	rcall	.-560    	; 0x154 <LL_ItemInit>
	newItem = LL_ItemInit(100,100,STEEL);
 384:	bc 01       	movw	r22, r24
 386:	c7 01       	movw	r24, r14
 388:	3d df       	rcall	.-390    	; 0x204 <LL_AddBack>
 38a:	43 e0       	ldi	r20, 0x03	; 3
 38c:	64 e6       	ldi	r22, 0x64	; 100
 38e:	84 e6       	ldi	r24, 0x64	; 100
	LL_AddBack(listIndex, newItem);
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	e0 de       	rcall	.-576    	; 0x154 <LL_ItemInit>
 394:	bc 01       	movw	r22, r24
	
	head = LL_Remove(LL_Head(listIndex));
 396:	c7 01       	movw	r24, r14
 398:	35 df       	rcall	.-406    	; 0x204 <LL_AddBack>
 39a:	c7 01       	movw	r24, r14
 39c:	68 df       	rcall	.-304    	; 0x26e <LL_Head>
	
	timerNode* newTimer = LL_TimerInit(100,100,Say_Hello, NULL, 0);
 39e:	43 df       	rcall	.-378    	; 0x226 <LL_Remove>
 3a0:	7c 01       	movw	r14, r24
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	46 ea       	ldi	r20, 0xA6	; 166
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	64 e6       	ldi	r22, 0x64	; 100
	timerList = LL_TimerListInit(newTimer);
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	84 e6       	ldi	r24, 0x64	; 100

	//((timerNode*)timerList->node)->callback(NULL);
	LL_CallCallback(timerList);
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	e3 de       	rcall	.-570    	; 0x17c <LL_TimerInit>
	LL_UpdateRefl(head,200);
 3b6:	16 df       	rcall	.-468    	; 0x1e4 <LL_TimerListInit>
 3b8:	80 df       	rcall	.-256    	; 0x2ba <LL_CallCallback>
 3ba:	68 ec       	ldi	r22, 0xC8	; 200
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	c7 01       	movw	r24, r14
	
	
	char send[32];
//	UART_SendString("Expecting Size 3, Class Black (1)\r\n");
	
	sprintf(send,"Size: %d\r\nClass: %d\r\nReflect: %d \r\n",LL_Size(head),LL_GetClass(head), LL_GetRefl(head));
 3c0:	89 df       	rcall	.-238    	; 0x2d4 <LL_UpdateRefl>
 3c2:	c7 01       	movw	r24, r14
 3c4:	74 df       	rcall	.-280    	; 0x2ae <LL_GetRefl>
 3c6:	08 2f       	mov	r16, r24
 3c8:	d9 2e       	mov	r13, r25
 3ca:	c7 01       	movw	r24, r14
 3cc:	6b df       	rcall	.-298    	; 0x2a4 <LL_GetClass>
 3ce:	18 2f       	mov	r17, r24
 3d0:	c7 01       	movw	r24, r14
 3d2:	57 df       	rcall	.-338    	; 0x282 <LL_Size>
 3d4:	df 92       	push	r13
 3d6:	0f 93       	push	r16
 3d8:	1f 92       	push	r1
 3da:	1f 93       	push	r17
 3dc:	1f 92       	push	r1
 3de:	8f 93       	push	r24
 3e0:	87 e3       	ldi	r24, 0x37	; 55
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	8e 01       	movw	r16, r28
 3ea:	0f 5f       	subi	r16, 0xFF	; 255
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255
 3ee:	1f 93       	push	r17
 3f0:	0f 93       	push	r16
 3f2:	65 d2       	rcall	.+1226   	; 0x8be <sprintf>
 3f4:	c8 01       	movw	r24, r16
	UART_SendString(send);
 3f6:	34 d1       	rcall	.+616    	; 0x660 <UART_SendString>
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
	
	
	return;
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	a0 96       	adiw	r28, 0x20	; 32
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	08 95       	ret

0000041e <main>:
	DATAACQ();
	return 0;
#endif
#if LISTUNITTEST == 1
	#include "LISTTEST.h"
	LISTTEST();
 41e:	6b df       	rcall	.-298    	; 0x2f6 <LISTTEST>

	}
	Delay_Create(8000);
	UART_SendString("end\r\n");
	return 0;
}
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	08 95       	ret

00000426 <__vector_default>:

ISR(BADISR_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
	while(1)
	{
		Timer_Create(4000, 1, C_Blinky, NULL,0);
 430:	00 e0       	ldi	r16, 0x00	; 0
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	42 ea       	ldi	r20, 0xA2	; 162
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 ea       	ldi	r24, 0xA0	; 160
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	8a d0       	rcall	.+276    	; 0x558 <Timer_Create>
 444:	f5 cf       	rjmp	.-22     	; 0x430 <__vector_default+0xa>

00000446 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
 446:	84 b5       	in	r24, 0x24	; 36
 448:	83 68       	ori	r24, 0x83	; 131
 44a:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	83 60       	ori	r24, 0x03	; 3
 450:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	87 bd       	out	0x27, r24	; 39
 456:	08 95       	ret

00000458 <__vector_17>:

static struct timerNode_s _timer[MAX_TIMERS];
static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	0b b6       	in	r0, 0x3b	; 59
 464:	0f 92       	push	r0
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	_timer_tick++;
 48a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 48e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <__data_end+0x1>
 498:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
 49c:	ce e5       	ldi	r28, 0x5E	; 94
 49e:	d1 e0       	ldi	r29, 0x01	; 1
 4a0:	0f 2e       	mov	r0, r31
 4a2:	f6 ea       	ldi	r31, 0xA6	; 166
 4a4:	ef 2e       	mov	r14, r31
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	ff 2e       	mov	r15, r31
 4aa:	f0 2d       	mov	r31, r0
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
 4ac:	ed 81       	ldd	r30, Y+5	; 0x05
 4ae:	fe 81       	ldd	r31, Y+6	; 0x06
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	c9 f0       	breq	.+50     	; 0x4e6 <__vector_17+0x8e>
 4b4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4b8:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4bc:	29 81       	ldd	r18, Y+1	; 0x01
 4be:	3a 81       	ldd	r19, Y+2	; 0x02
 4c0:	28 17       	cp	r18, r24
 4c2:	39 07       	cpc	r19, r25
 4c4:	81 f4       	brne	.+32     	; 0x4e6 <__vector_17+0x8e>
			_timer[i].callback(_timer[i].arg);
 4c6:	8f 81       	ldd	r24, Y+7	; 0x07
 4c8:	98 85       	ldd	r25, Y+8	; 0x08
 4ca:	09 95       	icall
			//_timer_tick = 0;
			//PORTD = 0xF0;
			if (_timer[i].periodic > 0) {
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	9c 81       	ldd	r25, Y+4	; 0x04
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__vector_17+0x8a>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
 4d4:	29 81       	ldd	r18, Y+1	; 0x01
 4d6:	3a 81       	ldd	r19, Y+2	; 0x02
 4d8:	82 0f       	add	r24, r18
 4da:	93 1f       	adc	r25, r19
 4dc:	9a 83       	std	Y+2, r25	; 0x02
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__vector_17+0x8e>
				} else {
				/* If timer is not periodic, clear the callback to disable */
				_timer[i].callback = NULL;
 4e2:	1e 82       	std	Y+6, r1	; 0x06
 4e4:	1d 82       	std	Y+5, r1	; 0x05
 4e6:	29 96       	adiw	r28, 0x09	; 9
{
	_timer_tick++;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
 4e8:	ce 15       	cp	r28, r14
 4ea:	df 05       	cpc	r29, r15
 4ec:	f9 f6       	brne	.-66     	; 0x4ac <__vector_17+0x54>
			}
		}
	}
	//PORTD = 0xF0;
	//TCNT1 = 0x0000;   // for 1 sec at 16 MHz
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	0f 90       	pop	r0
 514:	0b be       	out	0x3b, r0	; 59
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <Timer_Init>:


int Timer_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
 520:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 524:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x03E8;   // for 1 msec at 1 MHz
 528:	88 ee       	ldi	r24, 0xE8	; 232
 52a:	93 e0       	ldi	r25, 0x03	; 3
 52c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 530:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
 534:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
 538:	89 e0       	ldi	r24, 0x09	; 9
 53a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
 544:	88 e4       	ldi	r24, 0x48	; 72
 546:	ee e5       	ldi	r30, 0x5E	; 94
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	df 01       	movw	r26, r30
 54c:	1d 92       	st	X+, r1
 54e:	8a 95       	dec	r24
 550:	e9 f7       	brne	.-6      	; 0x54c <Timer_Init+0x2c>

	return 0;
}
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	08 95       	ret

00000558 <Timer_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int Timer_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg, uint8_t priority)
{
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
 562:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <_timer+0x5>
 566:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <_timer+0x6>
 56a:	67 2b       	or	r22, r23
 56c:	09 f4       	brne	.+2      	; 0x570 <Timer_Create+0x18>
 56e:	53 c0       	rjmp	.+166    	; 0x616 <Timer_Create+0xbe>
 570:	ae e5       	ldi	r26, 0x5E	; 94
 572:	b1 e0       	ldi	r27, 0x01	; 1
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 574:	e1 e0       	ldi	r30, 0x01	; 1
 576:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
 578:	1e 96       	adiw	r26, 0x0e	; 14
 57a:	cd 91       	ld	r28, X+
 57c:	dc 91       	ld	r29, X
 57e:	1f 97       	sbiw	r26, 0x0f	; 15
 580:	cd 2b       	or	r28, r29
 582:	09 f4       	brne	.+2      	; 0x586 <Timer_Create+0x2e>
 584:	4a c0       	rjmp	.+148    	; 0x61a <Timer_Create+0xc2>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 586:	31 96       	adiw	r30, 0x01	; 1
 588:	19 96       	adiw	r26, 0x09	; 9
 58a:	e8 30       	cpi	r30, 0x08	; 8
 58c:	f1 05       	cpc	r31, r1
 58e:	a1 f7       	brne	.-24     	; 0x578 <Timer_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	48 c0       	rjmp	.+144    	; 0x626 <Timer_Create+0xce>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
 596:	df 01       	movw	r26, r30
 598:	aa 0f       	add	r26, r26
 59a:	bb 1f       	adc	r27, r27
 59c:	aa 0f       	add	r26, r26
 59e:	bb 1f       	adc	r27, r27
 5a0:	aa 0f       	add	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	ae 0f       	add	r26, r30
 5a6:	bf 1f       	adc	r27, r31
 5a8:	a2 5a       	subi	r26, 0xA2	; 162
 5aa:	be 4f       	sbci	r27, 0xFE	; 254
 5ac:	14 96       	adiw	r26, 0x04	; 4
 5ae:	9c 93       	st	X, r25
 5b0:	8e 93       	st	-X, r24
 5b2:	13 97       	sbiw	r26, 0x03	; 3
 5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <Timer_Create+0x7c>
			} 
			else 
			{
				_timer[i].periodic = 0;
 5b6:	df 01       	movw	r26, r30
 5b8:	aa 0f       	add	r26, r26
 5ba:	bb 1f       	adc	r27, r27
 5bc:	aa 0f       	add	r26, r26
 5be:	bb 1f       	adc	r27, r27
 5c0:	aa 0f       	add	r26, r26
 5c2:	bb 1f       	adc	r27, r27
 5c4:	ae 0f       	add	r26, r30
 5c6:	bf 1f       	adc	r27, r31
 5c8:	a2 5a       	subi	r26, 0xA2	; 162
 5ca:	be 4f       	sbci	r27, 0xFE	; 254
 5cc:	14 96       	adiw	r26, 0x04	; 4
 5ce:	1c 92       	st	X, r1
 5d0:	1e 92       	st	-X, r1
 5d2:	13 97       	sbiw	r26, 0x03	; 3
			}
			
			_timer[i].callback = callback;
 5d4:	df 01       	movw	r26, r30
 5d6:	aa 0f       	add	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	aa 0f       	add	r26, r26
 5dc:	bb 1f       	adc	r27, r27
 5de:	aa 0f       	add	r26, r26
 5e0:	bb 1f       	adc	r27, r27
 5e2:	ae 0f       	add	r26, r30
 5e4:	bf 1f       	adc	r27, r31
 5e6:	a2 5a       	subi	r26, 0xA2	; 162
 5e8:	be 4f       	sbci	r27, 0xFE	; 254
 5ea:	16 96       	adiw	r26, 0x06	; 6
 5ec:	5c 93       	st	X, r21
 5ee:	4e 93       	st	-X, r20
 5f0:	15 97       	sbiw	r26, 0x05	; 5
			_timer[i].arg = arg;
 5f2:	18 96       	adiw	r26, 0x08	; 8
 5f4:	3c 93       	st	X, r19
 5f6:	2e 93       	st	-X, r18
 5f8:	17 97       	sbiw	r26, 0x07	; 7
			_timer[i].expiry = timeout_ms + _timer_tick;
 5fa:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <__data_end>
 5fe:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <__data_end+0x1>
 602:	82 0f       	add	r24, r18
 604:	93 1f       	adc	r25, r19
 606:	12 96       	adiw	r26, 0x02	; 2
 608:	9c 93       	st	X, r25
 60a:	8e 93       	st	-X, r24
 60c:	11 97       	sbiw	r26, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 60e:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
 610:	8e 2f       	mov	r24, r30
 612:	9f 2f       	mov	r25, r31
 614:	08 c0       	rjmp	.+16     	; 0x626 <Timer_Create+0xce>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 616:	e0 e0       	ldi	r30, 0x00	; 0
 618:	f0 e0       	ldi	r31, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 61a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 61c:	f8 94       	cli
		{
			
			if (periodic != 0) 
 61e:	01 2b       	or	r16, r17
 620:	09 f0       	breq	.+2      	; 0x624 <Timer_Create+0xcc>
 622:	b9 cf       	rjmp	.-142    	; 0x596 <Timer_Create+0x3e>
 624:	c8 cf       	rjmp	.-112    	; 0x5b6 <Timer_Create+0x5e>
	return handle;
	}
	
	
    return 0;
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	08 95       	ret

00000630 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
 630:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
 634:	83 e3       	ldi	r24, 0x33	; 51
 636:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 63a:	e9 ec       	ldi	r30, 0xC9	; 201
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	88 61       	ori	r24, 0x18	; 24
 642:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 644:	ea ec       	ldi	r30, 0xCA	; 202
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	86 60       	ori	r24, 0x06	; 6
 64c:	80 83       	st	Z, r24
 64e:	08 95       	ret

00000650 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
 650:	e8 ec       	ldi	r30, 0xC8	; 200
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	90 81       	ld	r25, Z
 656:	95 ff       	sbrs	r25, 5
 658:	fd cf       	rjmp	.-6      	; 0x654 <UART_SendChar+0x4>
	UDR1 = c;
 65a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 65e:	08 95       	ret

00000660 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 666:	88 81       	ld	r24, Y
 668:	88 23       	and	r24, r24
 66a:	29 f0       	breq	.+10     	; 0x676 <UART_SendString+0x16>
 66c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
 66e:	f0 df       	rcall	.-32     	; 0x650 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 670:	89 91       	ld	r24, Y+
 672:	81 11       	cpse	r24, r1
 674:	fc cf       	rjmp	.-8      	; 0x66e <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <malloc>:
 67c:	0f 93       	push	r16
 67e:	1f 93       	push	r17
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	82 30       	cpi	r24, 0x02	; 2
 686:	91 05       	cpc	r25, r1
 688:	10 f4       	brcc	.+4      	; 0x68e <malloc+0x12>
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	e0 91 b3 01 	lds	r30, 0x01B3	; 0x8001b3 <__flp>
 692:	f0 91 b4 01 	lds	r31, 0x01B4	; 0x8001b4 <__flp+0x1>
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	a0 e0       	ldi	r26, 0x00	; 0
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	30 97       	sbiw	r30, 0x00	; 0
 6a0:	19 f1       	breq	.+70     	; 0x6e8 <malloc+0x6c>
 6a2:	40 81       	ld	r20, Z
 6a4:	51 81       	ldd	r21, Z+1	; 0x01
 6a6:	02 81       	ldd	r16, Z+2	; 0x02
 6a8:	13 81       	ldd	r17, Z+3	; 0x03
 6aa:	48 17       	cp	r20, r24
 6ac:	59 07       	cpc	r21, r25
 6ae:	c8 f0       	brcs	.+50     	; 0x6e2 <malloc+0x66>
 6b0:	84 17       	cp	r24, r20
 6b2:	95 07       	cpc	r25, r21
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <malloc+0x54>
 6b6:	10 97       	sbiw	r26, 0x00	; 0
 6b8:	31 f0       	breq	.+12     	; 0x6c6 <malloc+0x4a>
 6ba:	12 96       	adiw	r26, 0x02	; 2
 6bc:	0c 93       	st	X, r16
 6be:	12 97       	sbiw	r26, 0x02	; 2
 6c0:	13 96       	adiw	r26, 0x03	; 3
 6c2:	1c 93       	st	X, r17
 6c4:	27 c0       	rjmp	.+78     	; 0x714 <malloc+0x98>
 6c6:	00 93 b3 01 	sts	0x01B3, r16	; 0x8001b3 <__flp>
 6ca:	10 93 b4 01 	sts	0x01B4, r17	; 0x8001b4 <__flp+0x1>
 6ce:	22 c0       	rjmp	.+68     	; 0x714 <malloc+0x98>
 6d0:	21 15       	cp	r18, r1
 6d2:	31 05       	cpc	r19, r1
 6d4:	19 f0       	breq	.+6      	; 0x6dc <malloc+0x60>
 6d6:	42 17       	cp	r20, r18
 6d8:	53 07       	cpc	r21, r19
 6da:	18 f4       	brcc	.+6      	; 0x6e2 <malloc+0x66>
 6dc:	9a 01       	movw	r18, r20
 6de:	bd 01       	movw	r22, r26
 6e0:	ef 01       	movw	r28, r30
 6e2:	df 01       	movw	r26, r30
 6e4:	f8 01       	movw	r30, r16
 6e6:	db cf       	rjmp	.-74     	; 0x69e <malloc+0x22>
 6e8:	21 15       	cp	r18, r1
 6ea:	31 05       	cpc	r19, r1
 6ec:	f9 f0       	breq	.+62     	; 0x72c <malloc+0xb0>
 6ee:	28 1b       	sub	r18, r24
 6f0:	39 0b       	sbc	r19, r25
 6f2:	24 30       	cpi	r18, 0x04	; 4
 6f4:	31 05       	cpc	r19, r1
 6f6:	80 f4       	brcc	.+32     	; 0x718 <malloc+0x9c>
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	9b 81       	ldd	r25, Y+3	; 0x03
 6fc:	61 15       	cp	r22, r1
 6fe:	71 05       	cpc	r23, r1
 700:	21 f0       	breq	.+8      	; 0x70a <malloc+0x8e>
 702:	fb 01       	movw	r30, r22
 704:	93 83       	std	Z+3, r25	; 0x03
 706:	82 83       	std	Z+2, r24	; 0x02
 708:	04 c0       	rjmp	.+8      	; 0x712 <malloc+0x96>
 70a:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <__flp+0x1>
 70e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <__flp>
 712:	fe 01       	movw	r30, r28
 714:	32 96       	adiw	r30, 0x02	; 2
 716:	44 c0       	rjmp	.+136    	; 0x7a0 <malloc+0x124>
 718:	fe 01       	movw	r30, r28
 71a:	e2 0f       	add	r30, r18
 71c:	f3 1f       	adc	r31, r19
 71e:	81 93       	st	Z+, r24
 720:	91 93       	st	Z+, r25
 722:	22 50       	subi	r18, 0x02	; 2
 724:	31 09       	sbc	r19, r1
 726:	39 83       	std	Y+1, r19	; 0x01
 728:	28 83       	st	Y, r18
 72a:	3a c0       	rjmp	.+116    	; 0x7a0 <malloc+0x124>
 72c:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <__brkval>
 730:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <__brkval+0x1>
 734:	23 2b       	or	r18, r19
 736:	41 f4       	brne	.+16     	; 0x748 <malloc+0xcc>
 738:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 73c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 740:	30 93 b2 01 	sts	0x01B2, r19	; 0x8001b2 <__brkval+0x1>
 744:	20 93 b1 01 	sts	0x01B1, r18	; 0x8001b1 <__brkval>
 748:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 74c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 750:	21 15       	cp	r18, r1
 752:	31 05       	cpc	r19, r1
 754:	41 f4       	brne	.+16     	; 0x766 <malloc+0xea>
 756:	2d b7       	in	r18, 0x3d	; 61
 758:	3e b7       	in	r19, 0x3e	; 62
 75a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 75e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 762:	24 1b       	sub	r18, r20
 764:	35 0b       	sbc	r19, r21
 766:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <__brkval>
 76a:	f0 91 b2 01 	lds	r31, 0x01B2	; 0x8001b2 <__brkval+0x1>
 76e:	e2 17       	cp	r30, r18
 770:	f3 07       	cpc	r31, r19
 772:	a0 f4       	brcc	.+40     	; 0x79c <malloc+0x120>
 774:	2e 1b       	sub	r18, r30
 776:	3f 0b       	sbc	r19, r31
 778:	28 17       	cp	r18, r24
 77a:	39 07       	cpc	r19, r25
 77c:	78 f0       	brcs	.+30     	; 0x79c <malloc+0x120>
 77e:	ac 01       	movw	r20, r24
 780:	4e 5f       	subi	r20, 0xFE	; 254
 782:	5f 4f       	sbci	r21, 0xFF	; 255
 784:	24 17       	cp	r18, r20
 786:	35 07       	cpc	r19, r21
 788:	48 f0       	brcs	.+18     	; 0x79c <malloc+0x120>
 78a:	4e 0f       	add	r20, r30
 78c:	5f 1f       	adc	r21, r31
 78e:	50 93 b2 01 	sts	0x01B2, r21	; 0x8001b2 <__brkval+0x1>
 792:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <__brkval>
 796:	81 93       	st	Z+, r24
 798:	91 93       	st	Z+, r25
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <malloc+0x124>
 79c:	e0 e0       	ldi	r30, 0x00	; 0
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	cf 01       	movw	r24, r30
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	08 95       	ret

000007ac <free>:
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	09 f4       	brne	.+2      	; 0x7b6 <free+0xa>
 7b4:	81 c0       	rjmp	.+258    	; 0x8b8 <free+0x10c>
 7b6:	fc 01       	movw	r30, r24
 7b8:	32 97       	sbiw	r30, 0x02	; 2
 7ba:	13 82       	std	Z+3, r1	; 0x03
 7bc:	12 82       	std	Z+2, r1	; 0x02
 7be:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <__flp>
 7c2:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <__flp+0x1>
 7c6:	10 97       	sbiw	r26, 0x00	; 0
 7c8:	81 f4       	brne	.+32     	; 0x7ea <free+0x3e>
 7ca:	20 81       	ld	r18, Z
 7cc:	31 81       	ldd	r19, Z+1	; 0x01
 7ce:	82 0f       	add	r24, r18
 7d0:	93 1f       	adc	r25, r19
 7d2:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <__brkval>
 7d6:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <__brkval+0x1>
 7da:	28 17       	cp	r18, r24
 7dc:	39 07       	cpc	r19, r25
 7de:	51 f5       	brne	.+84     	; 0x834 <free+0x88>
 7e0:	f0 93 b2 01 	sts	0x01B2, r31	; 0x8001b2 <__brkval+0x1>
 7e4:	e0 93 b1 01 	sts	0x01B1, r30	; 0x8001b1 <__brkval>
 7e8:	67 c0       	rjmp	.+206    	; 0x8b8 <free+0x10c>
 7ea:	ed 01       	movw	r28, r26
 7ec:	20 e0       	ldi	r18, 0x00	; 0
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	ce 17       	cp	r28, r30
 7f2:	df 07       	cpc	r29, r31
 7f4:	40 f4       	brcc	.+16     	; 0x806 <free+0x5a>
 7f6:	4a 81       	ldd	r20, Y+2	; 0x02
 7f8:	5b 81       	ldd	r21, Y+3	; 0x03
 7fa:	9e 01       	movw	r18, r28
 7fc:	41 15       	cp	r20, r1
 7fe:	51 05       	cpc	r21, r1
 800:	f1 f0       	breq	.+60     	; 0x83e <free+0x92>
 802:	ea 01       	movw	r28, r20
 804:	f5 cf       	rjmp	.-22     	; 0x7f0 <free+0x44>
 806:	d3 83       	std	Z+3, r29	; 0x03
 808:	c2 83       	std	Z+2, r28	; 0x02
 80a:	40 81       	ld	r20, Z
 80c:	51 81       	ldd	r21, Z+1	; 0x01
 80e:	84 0f       	add	r24, r20
 810:	95 1f       	adc	r25, r21
 812:	c8 17       	cp	r28, r24
 814:	d9 07       	cpc	r29, r25
 816:	59 f4       	brne	.+22     	; 0x82e <free+0x82>
 818:	88 81       	ld	r24, Y
 81a:	99 81       	ldd	r25, Y+1	; 0x01
 81c:	84 0f       	add	r24, r20
 81e:	95 1f       	adc	r25, r21
 820:	02 96       	adiw	r24, 0x02	; 2
 822:	91 83       	std	Z+1, r25	; 0x01
 824:	80 83       	st	Z, r24
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	9b 81       	ldd	r25, Y+3	; 0x03
 82a:	93 83       	std	Z+3, r25	; 0x03
 82c:	82 83       	std	Z+2, r24	; 0x02
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	29 f4       	brne	.+10     	; 0x83e <free+0x92>
 834:	f0 93 b4 01 	sts	0x01B4, r31	; 0x8001b4 <__flp+0x1>
 838:	e0 93 b3 01 	sts	0x01B3, r30	; 0x8001b3 <__flp>
 83c:	3d c0       	rjmp	.+122    	; 0x8b8 <free+0x10c>
 83e:	e9 01       	movw	r28, r18
 840:	fb 83       	std	Y+3, r31	; 0x03
 842:	ea 83       	std	Y+2, r30	; 0x02
 844:	49 91       	ld	r20, Y+
 846:	59 91       	ld	r21, Y+
 848:	c4 0f       	add	r28, r20
 84a:	d5 1f       	adc	r29, r21
 84c:	ec 17       	cp	r30, r28
 84e:	fd 07       	cpc	r31, r29
 850:	61 f4       	brne	.+24     	; 0x86a <free+0xbe>
 852:	80 81       	ld	r24, Z
 854:	91 81       	ldd	r25, Z+1	; 0x01
 856:	84 0f       	add	r24, r20
 858:	95 1f       	adc	r25, r21
 85a:	02 96       	adiw	r24, 0x02	; 2
 85c:	e9 01       	movw	r28, r18
 85e:	99 83       	std	Y+1, r25	; 0x01
 860:	88 83       	st	Y, r24
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	93 81       	ldd	r25, Z+3	; 0x03
 866:	9b 83       	std	Y+3, r25	; 0x03
 868:	8a 83       	std	Y+2, r24	; 0x02
 86a:	e0 e0       	ldi	r30, 0x00	; 0
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	12 96       	adiw	r26, 0x02	; 2
 870:	8d 91       	ld	r24, X+
 872:	9c 91       	ld	r25, X
 874:	13 97       	sbiw	r26, 0x03	; 3
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	19 f0       	breq	.+6      	; 0x880 <free+0xd4>
 87a:	fd 01       	movw	r30, r26
 87c:	dc 01       	movw	r26, r24
 87e:	f7 cf       	rjmp	.-18     	; 0x86e <free+0xc2>
 880:	8d 91       	ld	r24, X+
 882:	9c 91       	ld	r25, X
 884:	11 97       	sbiw	r26, 0x01	; 1
 886:	9d 01       	movw	r18, r26
 888:	2e 5f       	subi	r18, 0xFE	; 254
 88a:	3f 4f       	sbci	r19, 0xFF	; 255
 88c:	82 0f       	add	r24, r18
 88e:	93 1f       	adc	r25, r19
 890:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <__brkval>
 894:	30 91 b2 01 	lds	r19, 0x01B2	; 0x8001b2 <__brkval+0x1>
 898:	28 17       	cp	r18, r24
 89a:	39 07       	cpc	r19, r25
 89c:	69 f4       	brne	.+26     	; 0x8b8 <free+0x10c>
 89e:	30 97       	sbiw	r30, 0x00	; 0
 8a0:	29 f4       	brne	.+10     	; 0x8ac <free+0x100>
 8a2:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <__flp+0x1>
 8a6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <__flp>
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <free+0x104>
 8ac:	13 82       	std	Z+3, r1	; 0x03
 8ae:	12 82       	std	Z+2, r1	; 0x02
 8b0:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <__brkval+0x1>
 8b4:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <__brkval>
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	08 95       	ret

000008be <sprintf>:
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	cd b7       	in	r28, 0x3d	; 61
 8c8:	de b7       	in	r29, 0x3e	; 62
 8ca:	2e 97       	sbiw	r28, 0x0e	; 14
 8cc:	0f b6       	in	r0, 0x3f	; 63
 8ce:	f8 94       	cli
 8d0:	de bf       	out	0x3e, r29	; 62
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	cd bf       	out	0x3d, r28	; 61
 8d6:	0d 89       	ldd	r16, Y+21	; 0x15
 8d8:	1e 89       	ldd	r17, Y+22	; 0x16
 8da:	86 e0       	ldi	r24, 0x06	; 6
 8dc:	8c 83       	std	Y+4, r24	; 0x04
 8de:	1a 83       	std	Y+2, r17	; 0x02
 8e0:	09 83       	std	Y+1, r16	; 0x01
 8e2:	8f ef       	ldi	r24, 0xFF	; 255
 8e4:	9f e7       	ldi	r25, 0x7F	; 127
 8e6:	9e 83       	std	Y+6, r25	; 0x06
 8e8:	8d 83       	std	Y+5, r24	; 0x05
 8ea:	ae 01       	movw	r20, r28
 8ec:	47 5e       	subi	r20, 0xE7	; 231
 8ee:	5f 4f       	sbci	r21, 0xFF	; 255
 8f0:	6f 89       	ldd	r22, Y+23	; 0x17
 8f2:	78 8d       	ldd	r23, Y+24	; 0x18
 8f4:	ce 01       	movw	r24, r28
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	10 d0       	rcall	.+32     	; 0x91a <vfprintf>
 8fa:	ef 81       	ldd	r30, Y+7	; 0x07
 8fc:	f8 85       	ldd	r31, Y+8	; 0x08
 8fe:	e0 0f       	add	r30, r16
 900:	f1 1f       	adc	r31, r17
 902:	10 82       	st	Z, r1
 904:	2e 96       	adiw	r28, 0x0e	; 14
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	08 95       	ret

0000091a <vfprintf>:
 91a:	2f 92       	push	r2
 91c:	3f 92       	push	r3
 91e:	4f 92       	push	r4
 920:	5f 92       	push	r5
 922:	6f 92       	push	r6
 924:	7f 92       	push	r7
 926:	8f 92       	push	r8
 928:	9f 92       	push	r9
 92a:	af 92       	push	r10
 92c:	bf 92       	push	r11
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
 942:	2b 97       	sbiw	r28, 0x0b	; 11
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	6c 01       	movw	r12, r24
 950:	7b 01       	movw	r14, r22
 952:	8a 01       	movw	r16, r20
 954:	fc 01       	movw	r30, r24
 956:	17 82       	std	Z+7, r1	; 0x07
 958:	16 82       	std	Z+6, r1	; 0x06
 95a:	83 81       	ldd	r24, Z+3	; 0x03
 95c:	81 ff       	sbrs	r24, 1
 95e:	bf c1       	rjmp	.+894    	; 0xcde <vfprintf+0x3c4>
 960:	ce 01       	movw	r24, r28
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	3c 01       	movw	r6, r24
 966:	f6 01       	movw	r30, r12
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	f7 01       	movw	r30, r14
 96c:	93 fd       	sbrc	r25, 3
 96e:	85 91       	lpm	r24, Z+
 970:	93 ff       	sbrs	r25, 3
 972:	81 91       	ld	r24, Z+
 974:	7f 01       	movw	r14, r30
 976:	88 23       	and	r24, r24
 978:	09 f4       	brne	.+2      	; 0x97c <vfprintf+0x62>
 97a:	ad c1       	rjmp	.+858    	; 0xcd6 <vfprintf+0x3bc>
 97c:	85 32       	cpi	r24, 0x25	; 37
 97e:	39 f4       	brne	.+14     	; 0x98e <vfprintf+0x74>
 980:	93 fd       	sbrc	r25, 3
 982:	85 91       	lpm	r24, Z+
 984:	93 ff       	sbrs	r25, 3
 986:	81 91       	ld	r24, Z+
 988:	7f 01       	movw	r14, r30
 98a:	85 32       	cpi	r24, 0x25	; 37
 98c:	21 f4       	brne	.+8      	; 0x996 <vfprintf+0x7c>
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	d6 d1       	rcall	.+940    	; 0xd40 <fputc>
 994:	e8 cf       	rjmp	.-48     	; 0x966 <vfprintf+0x4c>
 996:	91 2c       	mov	r9, r1
 998:	21 2c       	mov	r2, r1
 99a:	31 2c       	mov	r3, r1
 99c:	ff e1       	ldi	r31, 0x1F	; 31
 99e:	f3 15       	cp	r31, r3
 9a0:	d8 f0       	brcs	.+54     	; 0x9d8 <vfprintf+0xbe>
 9a2:	8b 32       	cpi	r24, 0x2B	; 43
 9a4:	79 f0       	breq	.+30     	; 0x9c4 <vfprintf+0xaa>
 9a6:	38 f4       	brcc	.+14     	; 0x9b6 <vfprintf+0x9c>
 9a8:	80 32       	cpi	r24, 0x20	; 32
 9aa:	79 f0       	breq	.+30     	; 0x9ca <vfprintf+0xb0>
 9ac:	83 32       	cpi	r24, 0x23	; 35
 9ae:	a1 f4       	brne	.+40     	; 0x9d8 <vfprintf+0xbe>
 9b0:	23 2d       	mov	r18, r3
 9b2:	20 61       	ori	r18, 0x10	; 16
 9b4:	1d c0       	rjmp	.+58     	; 0x9f0 <vfprintf+0xd6>
 9b6:	8d 32       	cpi	r24, 0x2D	; 45
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <vfprintf+0xb8>
 9ba:	80 33       	cpi	r24, 0x30	; 48
 9bc:	69 f4       	brne	.+26     	; 0x9d8 <vfprintf+0xbe>
 9be:	23 2d       	mov	r18, r3
 9c0:	21 60       	ori	r18, 0x01	; 1
 9c2:	16 c0       	rjmp	.+44     	; 0x9f0 <vfprintf+0xd6>
 9c4:	83 2d       	mov	r24, r3
 9c6:	82 60       	ori	r24, 0x02	; 2
 9c8:	38 2e       	mov	r3, r24
 9ca:	e3 2d       	mov	r30, r3
 9cc:	e4 60       	ori	r30, 0x04	; 4
 9ce:	3e 2e       	mov	r3, r30
 9d0:	2a c0       	rjmp	.+84     	; 0xa26 <vfprintf+0x10c>
 9d2:	f3 2d       	mov	r31, r3
 9d4:	f8 60       	ori	r31, 0x08	; 8
 9d6:	1d c0       	rjmp	.+58     	; 0xa12 <vfprintf+0xf8>
 9d8:	37 fc       	sbrc	r3, 7
 9da:	2d c0       	rjmp	.+90     	; 0xa36 <vfprintf+0x11c>
 9dc:	20 ed       	ldi	r18, 0xD0	; 208
 9de:	28 0f       	add	r18, r24
 9e0:	2a 30       	cpi	r18, 0x0A	; 10
 9e2:	40 f0       	brcs	.+16     	; 0x9f4 <vfprintf+0xda>
 9e4:	8e 32       	cpi	r24, 0x2E	; 46
 9e6:	b9 f4       	brne	.+46     	; 0xa16 <vfprintf+0xfc>
 9e8:	36 fc       	sbrc	r3, 6
 9ea:	75 c1       	rjmp	.+746    	; 0xcd6 <vfprintf+0x3bc>
 9ec:	23 2d       	mov	r18, r3
 9ee:	20 64       	ori	r18, 0x40	; 64
 9f0:	32 2e       	mov	r3, r18
 9f2:	19 c0       	rjmp	.+50     	; 0xa26 <vfprintf+0x10c>
 9f4:	36 fe       	sbrs	r3, 6
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0xea>
 9f8:	8a e0       	ldi	r24, 0x0A	; 10
 9fa:	98 9e       	mul	r9, r24
 9fc:	20 0d       	add	r18, r0
 9fe:	11 24       	eor	r1, r1
 a00:	92 2e       	mov	r9, r18
 a02:	11 c0       	rjmp	.+34     	; 0xa26 <vfprintf+0x10c>
 a04:	ea e0       	ldi	r30, 0x0A	; 10
 a06:	2e 9e       	mul	r2, r30
 a08:	20 0d       	add	r18, r0
 a0a:	11 24       	eor	r1, r1
 a0c:	22 2e       	mov	r2, r18
 a0e:	f3 2d       	mov	r31, r3
 a10:	f0 62       	ori	r31, 0x20	; 32
 a12:	3f 2e       	mov	r3, r31
 a14:	08 c0       	rjmp	.+16     	; 0xa26 <vfprintf+0x10c>
 a16:	8c 36       	cpi	r24, 0x6C	; 108
 a18:	21 f4       	brne	.+8      	; 0xa22 <vfprintf+0x108>
 a1a:	83 2d       	mov	r24, r3
 a1c:	80 68       	ori	r24, 0x80	; 128
 a1e:	38 2e       	mov	r3, r24
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <vfprintf+0x10c>
 a22:	88 36       	cpi	r24, 0x68	; 104
 a24:	41 f4       	brne	.+16     	; 0xa36 <vfprintf+0x11c>
 a26:	f7 01       	movw	r30, r14
 a28:	93 fd       	sbrc	r25, 3
 a2a:	85 91       	lpm	r24, Z+
 a2c:	93 ff       	sbrs	r25, 3
 a2e:	81 91       	ld	r24, Z+
 a30:	7f 01       	movw	r14, r30
 a32:	81 11       	cpse	r24, r1
 a34:	b3 cf       	rjmp	.-154    	; 0x99c <vfprintf+0x82>
 a36:	98 2f       	mov	r25, r24
 a38:	9f 7d       	andi	r25, 0xDF	; 223
 a3a:	95 54       	subi	r25, 0x45	; 69
 a3c:	93 30       	cpi	r25, 0x03	; 3
 a3e:	28 f4       	brcc	.+10     	; 0xa4a <vfprintf+0x130>
 a40:	0c 5f       	subi	r16, 0xFC	; 252
 a42:	1f 4f       	sbci	r17, 0xFF	; 255
 a44:	9f e3       	ldi	r25, 0x3F	; 63
 a46:	99 83       	std	Y+1, r25	; 0x01
 a48:	0d c0       	rjmp	.+26     	; 0xa64 <vfprintf+0x14a>
 a4a:	83 36       	cpi	r24, 0x63	; 99
 a4c:	31 f0       	breq	.+12     	; 0xa5a <vfprintf+0x140>
 a4e:	83 37       	cpi	r24, 0x73	; 115
 a50:	71 f0       	breq	.+28     	; 0xa6e <vfprintf+0x154>
 a52:	83 35       	cpi	r24, 0x53	; 83
 a54:	09 f0       	breq	.+2      	; 0xa58 <vfprintf+0x13e>
 a56:	55 c0       	rjmp	.+170    	; 0xb02 <vfprintf+0x1e8>
 a58:	20 c0       	rjmp	.+64     	; 0xa9a <vfprintf+0x180>
 a5a:	f8 01       	movw	r30, r16
 a5c:	80 81       	ld	r24, Z
 a5e:	89 83       	std	Y+1, r24	; 0x01
 a60:	0e 5f       	subi	r16, 0xFE	; 254
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	88 24       	eor	r8, r8
 a66:	83 94       	inc	r8
 a68:	91 2c       	mov	r9, r1
 a6a:	53 01       	movw	r10, r6
 a6c:	12 c0       	rjmp	.+36     	; 0xa92 <vfprintf+0x178>
 a6e:	28 01       	movw	r4, r16
 a70:	f2 e0       	ldi	r31, 0x02	; 2
 a72:	4f 0e       	add	r4, r31
 a74:	51 1c       	adc	r5, r1
 a76:	f8 01       	movw	r30, r16
 a78:	a0 80       	ld	r10, Z
 a7a:	b1 80       	ldd	r11, Z+1	; 0x01
 a7c:	36 fe       	sbrs	r3, 6
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <vfprintf+0x16c>
 a80:	69 2d       	mov	r22, r9
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <vfprintf+0x170>
 a86:	6f ef       	ldi	r22, 0xFF	; 255
 a88:	7f ef       	ldi	r23, 0xFF	; 255
 a8a:	c5 01       	movw	r24, r10
 a8c:	4e d1       	rcall	.+668    	; 0xd2a <strnlen>
 a8e:	4c 01       	movw	r8, r24
 a90:	82 01       	movw	r16, r4
 a92:	f3 2d       	mov	r31, r3
 a94:	ff 77       	andi	r31, 0x7F	; 127
 a96:	3f 2e       	mov	r3, r31
 a98:	15 c0       	rjmp	.+42     	; 0xac4 <vfprintf+0x1aa>
 a9a:	28 01       	movw	r4, r16
 a9c:	22 e0       	ldi	r18, 0x02	; 2
 a9e:	42 0e       	add	r4, r18
 aa0:	51 1c       	adc	r5, r1
 aa2:	f8 01       	movw	r30, r16
 aa4:	a0 80       	ld	r10, Z
 aa6:	b1 80       	ldd	r11, Z+1	; 0x01
 aa8:	36 fe       	sbrs	r3, 6
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <vfprintf+0x198>
 aac:	69 2d       	mov	r22, r9
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <vfprintf+0x19c>
 ab2:	6f ef       	ldi	r22, 0xFF	; 255
 ab4:	7f ef       	ldi	r23, 0xFF	; 255
 ab6:	c5 01       	movw	r24, r10
 ab8:	2d d1       	rcall	.+602    	; 0xd14 <strnlen_P>
 aba:	4c 01       	movw	r8, r24
 abc:	f3 2d       	mov	r31, r3
 abe:	f0 68       	ori	r31, 0x80	; 128
 ac0:	3f 2e       	mov	r3, r31
 ac2:	82 01       	movw	r16, r4
 ac4:	33 fc       	sbrc	r3, 3
 ac6:	19 c0       	rjmp	.+50     	; 0xafa <vfprintf+0x1e0>
 ac8:	82 2d       	mov	r24, r2
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	88 16       	cp	r8, r24
 ace:	99 06       	cpc	r9, r25
 ad0:	a0 f4       	brcc	.+40     	; 0xafa <vfprintf+0x1e0>
 ad2:	b6 01       	movw	r22, r12
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	33 d1       	rcall	.+614    	; 0xd40 <fputc>
 ada:	2a 94       	dec	r2
 adc:	f5 cf       	rjmp	.-22     	; 0xac8 <vfprintf+0x1ae>
 ade:	f5 01       	movw	r30, r10
 ae0:	37 fc       	sbrc	r3, 7
 ae2:	85 91       	lpm	r24, Z+
 ae4:	37 fe       	sbrs	r3, 7
 ae6:	81 91       	ld	r24, Z+
 ae8:	5f 01       	movw	r10, r30
 aea:	b6 01       	movw	r22, r12
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	28 d1       	rcall	.+592    	; 0xd40 <fputc>
 af0:	21 10       	cpse	r2, r1
 af2:	2a 94       	dec	r2
 af4:	21 e0       	ldi	r18, 0x01	; 1
 af6:	82 1a       	sub	r8, r18
 af8:	91 08       	sbc	r9, r1
 afa:	81 14       	cp	r8, r1
 afc:	91 04       	cpc	r9, r1
 afe:	79 f7       	brne	.-34     	; 0xade <vfprintf+0x1c4>
 b00:	e1 c0       	rjmp	.+450    	; 0xcc4 <vfprintf+0x3aa>
 b02:	84 36       	cpi	r24, 0x64	; 100
 b04:	11 f0       	breq	.+4      	; 0xb0a <vfprintf+0x1f0>
 b06:	89 36       	cpi	r24, 0x69	; 105
 b08:	39 f5       	brne	.+78     	; 0xb58 <vfprintf+0x23e>
 b0a:	f8 01       	movw	r30, r16
 b0c:	37 fe       	sbrs	r3, 7
 b0e:	07 c0       	rjmp	.+14     	; 0xb1e <vfprintf+0x204>
 b10:	60 81       	ld	r22, Z
 b12:	71 81       	ldd	r23, Z+1	; 0x01
 b14:	82 81       	ldd	r24, Z+2	; 0x02
 b16:	93 81       	ldd	r25, Z+3	; 0x03
 b18:	0c 5f       	subi	r16, 0xFC	; 252
 b1a:	1f 4f       	sbci	r17, 0xFF	; 255
 b1c:	08 c0       	rjmp	.+16     	; 0xb2e <vfprintf+0x214>
 b1e:	60 81       	ld	r22, Z
 b20:	71 81       	ldd	r23, Z+1	; 0x01
 b22:	07 2e       	mov	r0, r23
 b24:	00 0c       	add	r0, r0
 b26:	88 0b       	sbc	r24, r24
 b28:	99 0b       	sbc	r25, r25
 b2a:	0e 5f       	subi	r16, 0xFE	; 254
 b2c:	1f 4f       	sbci	r17, 0xFF	; 255
 b2e:	f3 2d       	mov	r31, r3
 b30:	ff 76       	andi	r31, 0x6F	; 111
 b32:	3f 2e       	mov	r3, r31
 b34:	97 ff       	sbrs	r25, 7
 b36:	09 c0       	rjmp	.+18     	; 0xb4a <vfprintf+0x230>
 b38:	90 95       	com	r25
 b3a:	80 95       	com	r24
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	f0 68       	ori	r31, 0x80	; 128
 b48:	3f 2e       	mov	r3, r31
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	30 e0       	ldi	r19, 0x00	; 0
 b4e:	a3 01       	movw	r20, r6
 b50:	33 d1       	rcall	.+614    	; 0xdb8 <__ultoa_invert>
 b52:	88 2e       	mov	r8, r24
 b54:	86 18       	sub	r8, r6
 b56:	44 c0       	rjmp	.+136    	; 0xbe0 <vfprintf+0x2c6>
 b58:	85 37       	cpi	r24, 0x75	; 117
 b5a:	31 f4       	brne	.+12     	; 0xb68 <vfprintf+0x24e>
 b5c:	23 2d       	mov	r18, r3
 b5e:	2f 7e       	andi	r18, 0xEF	; 239
 b60:	b2 2e       	mov	r11, r18
 b62:	2a e0       	ldi	r18, 0x0A	; 10
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	25 c0       	rjmp	.+74     	; 0xbb2 <vfprintf+0x298>
 b68:	93 2d       	mov	r25, r3
 b6a:	99 7f       	andi	r25, 0xF9	; 249
 b6c:	b9 2e       	mov	r11, r25
 b6e:	8f 36       	cpi	r24, 0x6F	; 111
 b70:	c1 f0       	breq	.+48     	; 0xba2 <vfprintf+0x288>
 b72:	18 f4       	brcc	.+6      	; 0xb7a <vfprintf+0x260>
 b74:	88 35       	cpi	r24, 0x58	; 88
 b76:	79 f0       	breq	.+30     	; 0xb96 <vfprintf+0x27c>
 b78:	ae c0       	rjmp	.+348    	; 0xcd6 <vfprintf+0x3bc>
 b7a:	80 37       	cpi	r24, 0x70	; 112
 b7c:	19 f0       	breq	.+6      	; 0xb84 <vfprintf+0x26a>
 b7e:	88 37       	cpi	r24, 0x78	; 120
 b80:	21 f0       	breq	.+8      	; 0xb8a <vfprintf+0x270>
 b82:	a9 c0       	rjmp	.+338    	; 0xcd6 <vfprintf+0x3bc>
 b84:	e9 2f       	mov	r30, r25
 b86:	e0 61       	ori	r30, 0x10	; 16
 b88:	be 2e       	mov	r11, r30
 b8a:	b4 fe       	sbrs	r11, 4
 b8c:	0d c0       	rjmp	.+26     	; 0xba8 <vfprintf+0x28e>
 b8e:	fb 2d       	mov	r31, r11
 b90:	f4 60       	ori	r31, 0x04	; 4
 b92:	bf 2e       	mov	r11, r31
 b94:	09 c0       	rjmp	.+18     	; 0xba8 <vfprintf+0x28e>
 b96:	34 fe       	sbrs	r3, 4
 b98:	0a c0       	rjmp	.+20     	; 0xbae <vfprintf+0x294>
 b9a:	29 2f       	mov	r18, r25
 b9c:	26 60       	ori	r18, 0x06	; 6
 b9e:	b2 2e       	mov	r11, r18
 ba0:	06 c0       	rjmp	.+12     	; 0xbae <vfprintf+0x294>
 ba2:	28 e0       	ldi	r18, 0x08	; 8
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <vfprintf+0x298>
 ba8:	20 e1       	ldi	r18, 0x10	; 16
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x298>
 bae:	20 e1       	ldi	r18, 0x10	; 16
 bb0:	32 e0       	ldi	r19, 0x02	; 2
 bb2:	f8 01       	movw	r30, r16
 bb4:	b7 fe       	sbrs	r11, 7
 bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <vfprintf+0x2ac>
 bb8:	60 81       	ld	r22, Z
 bba:	71 81       	ldd	r23, Z+1	; 0x01
 bbc:	82 81       	ldd	r24, Z+2	; 0x02
 bbe:	93 81       	ldd	r25, Z+3	; 0x03
 bc0:	0c 5f       	subi	r16, 0xFC	; 252
 bc2:	1f 4f       	sbci	r17, 0xFF	; 255
 bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <vfprintf+0x2b8>
 bc6:	60 81       	ld	r22, Z
 bc8:	71 81       	ldd	r23, Z+1	; 0x01
 bca:	80 e0       	ldi	r24, 0x00	; 0
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 5f       	subi	r16, 0xFE	; 254
 bd0:	1f 4f       	sbci	r17, 0xFF	; 255
 bd2:	a3 01       	movw	r20, r6
 bd4:	f1 d0       	rcall	.+482    	; 0xdb8 <__ultoa_invert>
 bd6:	88 2e       	mov	r8, r24
 bd8:	86 18       	sub	r8, r6
 bda:	fb 2d       	mov	r31, r11
 bdc:	ff 77       	andi	r31, 0x7F	; 127
 bde:	3f 2e       	mov	r3, r31
 be0:	36 fe       	sbrs	r3, 6
 be2:	0d c0       	rjmp	.+26     	; 0xbfe <vfprintf+0x2e4>
 be4:	23 2d       	mov	r18, r3
 be6:	2e 7f       	andi	r18, 0xFE	; 254
 be8:	a2 2e       	mov	r10, r18
 bea:	89 14       	cp	r8, r9
 bec:	58 f4       	brcc	.+22     	; 0xc04 <vfprintf+0x2ea>
 bee:	34 fe       	sbrs	r3, 4
 bf0:	0b c0       	rjmp	.+22     	; 0xc08 <vfprintf+0x2ee>
 bf2:	32 fc       	sbrc	r3, 2
 bf4:	09 c0       	rjmp	.+18     	; 0xc08 <vfprintf+0x2ee>
 bf6:	83 2d       	mov	r24, r3
 bf8:	8e 7e       	andi	r24, 0xEE	; 238
 bfa:	a8 2e       	mov	r10, r24
 bfc:	05 c0       	rjmp	.+10     	; 0xc08 <vfprintf+0x2ee>
 bfe:	b8 2c       	mov	r11, r8
 c00:	a3 2c       	mov	r10, r3
 c02:	03 c0       	rjmp	.+6      	; 0xc0a <vfprintf+0x2f0>
 c04:	b8 2c       	mov	r11, r8
 c06:	01 c0       	rjmp	.+2      	; 0xc0a <vfprintf+0x2f0>
 c08:	b9 2c       	mov	r11, r9
 c0a:	a4 fe       	sbrs	r10, 4
 c0c:	0f c0       	rjmp	.+30     	; 0xc2c <vfprintf+0x312>
 c0e:	fe 01       	movw	r30, r28
 c10:	e8 0d       	add	r30, r8
 c12:	f1 1d       	adc	r31, r1
 c14:	80 81       	ld	r24, Z
 c16:	80 33       	cpi	r24, 0x30	; 48
 c18:	21 f4       	brne	.+8      	; 0xc22 <vfprintf+0x308>
 c1a:	9a 2d       	mov	r25, r10
 c1c:	99 7e       	andi	r25, 0xE9	; 233
 c1e:	a9 2e       	mov	r10, r25
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <vfprintf+0x31a>
 c22:	a2 fe       	sbrs	r10, 2
 c24:	06 c0       	rjmp	.+12     	; 0xc32 <vfprintf+0x318>
 c26:	b3 94       	inc	r11
 c28:	b3 94       	inc	r11
 c2a:	04 c0       	rjmp	.+8      	; 0xc34 <vfprintf+0x31a>
 c2c:	8a 2d       	mov	r24, r10
 c2e:	86 78       	andi	r24, 0x86	; 134
 c30:	09 f0       	breq	.+2      	; 0xc34 <vfprintf+0x31a>
 c32:	b3 94       	inc	r11
 c34:	a3 fc       	sbrc	r10, 3
 c36:	10 c0       	rjmp	.+32     	; 0xc58 <vfprintf+0x33e>
 c38:	a0 fe       	sbrs	r10, 0
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x32e>
 c3c:	b2 14       	cp	r11, r2
 c3e:	80 f4       	brcc	.+32     	; 0xc60 <vfprintf+0x346>
 c40:	28 0c       	add	r2, r8
 c42:	92 2c       	mov	r9, r2
 c44:	9b 18       	sub	r9, r11
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x348>
 c48:	b2 14       	cp	r11, r2
 c4a:	58 f4       	brcc	.+22     	; 0xc62 <vfprintf+0x348>
 c4c:	b6 01       	movw	r22, r12
 c4e:	80 e2       	ldi	r24, 0x20	; 32
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	76 d0       	rcall	.+236    	; 0xd40 <fputc>
 c54:	b3 94       	inc	r11
 c56:	f8 cf       	rjmp	.-16     	; 0xc48 <vfprintf+0x32e>
 c58:	b2 14       	cp	r11, r2
 c5a:	18 f4       	brcc	.+6      	; 0xc62 <vfprintf+0x348>
 c5c:	2b 18       	sub	r2, r11
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <vfprintf+0x34a>
 c60:	98 2c       	mov	r9, r8
 c62:	21 2c       	mov	r2, r1
 c64:	a4 fe       	sbrs	r10, 4
 c66:	0f c0       	rjmp	.+30     	; 0xc86 <vfprintf+0x36c>
 c68:	b6 01       	movw	r22, r12
 c6a:	80 e3       	ldi	r24, 0x30	; 48
 c6c:	90 e0       	ldi	r25, 0x00	; 0
 c6e:	68 d0       	rcall	.+208    	; 0xd40 <fputc>
 c70:	a2 fe       	sbrs	r10, 2
 c72:	16 c0       	rjmp	.+44     	; 0xca0 <vfprintf+0x386>
 c74:	a1 fc       	sbrc	r10, 1
 c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x364>
 c78:	88 e7       	ldi	r24, 0x78	; 120
 c7a:	90 e0       	ldi	r25, 0x00	; 0
 c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x368>
 c7e:	88 e5       	ldi	r24, 0x58	; 88
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	b6 01       	movw	r22, r12
 c84:	0c c0       	rjmp	.+24     	; 0xc9e <vfprintf+0x384>
 c86:	8a 2d       	mov	r24, r10
 c88:	86 78       	andi	r24, 0x86	; 134
 c8a:	51 f0       	breq	.+20     	; 0xca0 <vfprintf+0x386>
 c8c:	a1 fe       	sbrs	r10, 1
 c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x37a>
 c90:	8b e2       	ldi	r24, 0x2B	; 43
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <vfprintf+0x37c>
 c94:	80 e2       	ldi	r24, 0x20	; 32
 c96:	a7 fc       	sbrc	r10, 7
 c98:	8d e2       	ldi	r24, 0x2D	; 45
 c9a:	b6 01       	movw	r22, r12
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	50 d0       	rcall	.+160    	; 0xd40 <fputc>
 ca0:	89 14       	cp	r8, r9
 ca2:	30 f4       	brcc	.+12     	; 0xcb0 <vfprintf+0x396>
 ca4:	b6 01       	movw	r22, r12
 ca6:	80 e3       	ldi	r24, 0x30	; 48
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	4a d0       	rcall	.+148    	; 0xd40 <fputc>
 cac:	9a 94       	dec	r9
 cae:	f8 cf       	rjmp	.-16     	; 0xca0 <vfprintf+0x386>
 cb0:	8a 94       	dec	r8
 cb2:	f3 01       	movw	r30, r6
 cb4:	e8 0d       	add	r30, r8
 cb6:	f1 1d       	adc	r31, r1
 cb8:	80 81       	ld	r24, Z
 cba:	b6 01       	movw	r22, r12
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	40 d0       	rcall	.+128    	; 0xd40 <fputc>
 cc0:	81 10       	cpse	r8, r1
 cc2:	f6 cf       	rjmp	.-20     	; 0xcb0 <vfprintf+0x396>
 cc4:	22 20       	and	r2, r2
 cc6:	09 f4       	brne	.+2      	; 0xcca <vfprintf+0x3b0>
 cc8:	4e ce       	rjmp	.-868    	; 0x966 <vfprintf+0x4c>
 cca:	b6 01       	movw	r22, r12
 ccc:	80 e2       	ldi	r24, 0x20	; 32
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	37 d0       	rcall	.+110    	; 0xd40 <fputc>
 cd2:	2a 94       	dec	r2
 cd4:	f7 cf       	rjmp	.-18     	; 0xcc4 <vfprintf+0x3aa>
 cd6:	f6 01       	movw	r30, r12
 cd8:	86 81       	ldd	r24, Z+6	; 0x06
 cda:	97 81       	ldd	r25, Z+7	; 0x07
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x3c8>
 cde:	8f ef       	ldi	r24, 0xFF	; 255
 ce0:	9f ef       	ldi	r25, 0xFF	; 255
 ce2:	2b 96       	adiw	r28, 0x0b	; 11
 ce4:	0f b6       	in	r0, 0x3f	; 63
 ce6:	f8 94       	cli
 ce8:	de bf       	out	0x3e, r29	; 62
 cea:	0f be       	out	0x3f, r0	; 63
 cec:	cd bf       	out	0x3d, r28	; 61
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	1f 91       	pop	r17
 cf4:	0f 91       	pop	r16
 cf6:	ff 90       	pop	r15
 cf8:	ef 90       	pop	r14
 cfa:	df 90       	pop	r13
 cfc:	cf 90       	pop	r12
 cfe:	bf 90       	pop	r11
 d00:	af 90       	pop	r10
 d02:	9f 90       	pop	r9
 d04:	8f 90       	pop	r8
 d06:	7f 90       	pop	r7
 d08:	6f 90       	pop	r6
 d0a:	5f 90       	pop	r5
 d0c:	4f 90       	pop	r4
 d0e:	3f 90       	pop	r3
 d10:	2f 90       	pop	r2
 d12:	08 95       	ret

00000d14 <strnlen_P>:
 d14:	fc 01       	movw	r30, r24
 d16:	05 90       	lpm	r0, Z+
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 10       	cpse	r0, r1
 d1e:	d8 f7       	brcc	.-10     	; 0xd16 <strnlen_P+0x2>
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	8e 0f       	add	r24, r30
 d26:	9f 1f       	adc	r25, r31
 d28:	08 95       	ret

00000d2a <strnlen>:
 d2a:	fc 01       	movw	r30, r24
 d2c:	61 50       	subi	r22, 0x01	; 1
 d2e:	70 40       	sbci	r23, 0x00	; 0
 d30:	01 90       	ld	r0, Z+
 d32:	01 10       	cpse	r0, r1
 d34:	d8 f7       	brcc	.-10     	; 0xd2c <strnlen+0x2>
 d36:	80 95       	com	r24
 d38:	90 95       	com	r25
 d3a:	8e 0f       	add	r24, r30
 d3c:	9f 1f       	adc	r25, r31
 d3e:	08 95       	ret

00000d40 <fputc>:
 d40:	0f 93       	push	r16
 d42:	1f 93       	push	r17
 d44:	cf 93       	push	r28
 d46:	df 93       	push	r29
 d48:	fb 01       	movw	r30, r22
 d4a:	23 81       	ldd	r18, Z+3	; 0x03
 d4c:	21 fd       	sbrc	r18, 1
 d4e:	03 c0       	rjmp	.+6      	; 0xd56 <fputc+0x16>
 d50:	8f ef       	ldi	r24, 0xFF	; 255
 d52:	9f ef       	ldi	r25, 0xFF	; 255
 d54:	2c c0       	rjmp	.+88     	; 0xdae <fputc+0x6e>
 d56:	22 ff       	sbrs	r18, 2
 d58:	16 c0       	rjmp	.+44     	; 0xd86 <fputc+0x46>
 d5a:	46 81       	ldd	r20, Z+6	; 0x06
 d5c:	57 81       	ldd	r21, Z+7	; 0x07
 d5e:	24 81       	ldd	r18, Z+4	; 0x04
 d60:	35 81       	ldd	r19, Z+5	; 0x05
 d62:	42 17       	cp	r20, r18
 d64:	53 07       	cpc	r21, r19
 d66:	44 f4       	brge	.+16     	; 0xd78 <fputc+0x38>
 d68:	a0 81       	ld	r26, Z
 d6a:	b1 81       	ldd	r27, Z+1	; 0x01
 d6c:	9d 01       	movw	r18, r26
 d6e:	2f 5f       	subi	r18, 0xFF	; 255
 d70:	3f 4f       	sbci	r19, 0xFF	; 255
 d72:	31 83       	std	Z+1, r19	; 0x01
 d74:	20 83       	st	Z, r18
 d76:	8c 93       	st	X, r24
 d78:	26 81       	ldd	r18, Z+6	; 0x06
 d7a:	37 81       	ldd	r19, Z+7	; 0x07
 d7c:	2f 5f       	subi	r18, 0xFF	; 255
 d7e:	3f 4f       	sbci	r19, 0xFF	; 255
 d80:	37 83       	std	Z+7, r19	; 0x07
 d82:	26 83       	std	Z+6, r18	; 0x06
 d84:	14 c0       	rjmp	.+40     	; 0xdae <fputc+0x6e>
 d86:	8b 01       	movw	r16, r22
 d88:	ec 01       	movw	r28, r24
 d8a:	fb 01       	movw	r30, r22
 d8c:	00 84       	ldd	r0, Z+8	; 0x08
 d8e:	f1 85       	ldd	r31, Z+9	; 0x09
 d90:	e0 2d       	mov	r30, r0
 d92:	09 95       	icall
 d94:	89 2b       	or	r24, r25
 d96:	e1 f6       	brne	.-72     	; 0xd50 <fputc+0x10>
 d98:	d8 01       	movw	r26, r16
 d9a:	16 96       	adiw	r26, 0x06	; 6
 d9c:	8d 91       	ld	r24, X+
 d9e:	9c 91       	ld	r25, X
 da0:	17 97       	sbiw	r26, 0x07	; 7
 da2:	01 96       	adiw	r24, 0x01	; 1
 da4:	17 96       	adiw	r26, 0x07	; 7
 da6:	9c 93       	st	X, r25
 da8:	8e 93       	st	-X, r24
 daa:	16 97       	sbiw	r26, 0x06	; 6
 dac:	ce 01       	movw	r24, r28
 dae:	df 91       	pop	r29
 db0:	cf 91       	pop	r28
 db2:	1f 91       	pop	r17
 db4:	0f 91       	pop	r16
 db6:	08 95       	ret

00000db8 <__ultoa_invert>:
 db8:	fa 01       	movw	r30, r20
 dba:	aa 27       	eor	r26, r26
 dbc:	28 30       	cpi	r18, 0x08	; 8
 dbe:	51 f1       	breq	.+84     	; 0xe14 <__ultoa_invert+0x5c>
 dc0:	20 31       	cpi	r18, 0x10	; 16
 dc2:	81 f1       	breq	.+96     	; 0xe24 <__ultoa_invert+0x6c>
 dc4:	e8 94       	clt
 dc6:	6f 93       	push	r22
 dc8:	6e 7f       	andi	r22, 0xFE	; 254
 dca:	6e 5f       	subi	r22, 0xFE	; 254
 dcc:	7f 4f       	sbci	r23, 0xFF	; 255
 dce:	8f 4f       	sbci	r24, 0xFF	; 255
 dd0:	9f 4f       	sbci	r25, 0xFF	; 255
 dd2:	af 4f       	sbci	r26, 0xFF	; 255
 dd4:	b1 e0       	ldi	r27, 0x01	; 1
 dd6:	3e d0       	rcall	.+124    	; 0xe54 <__ultoa_invert+0x9c>
 dd8:	b4 e0       	ldi	r27, 0x04	; 4
 dda:	3c d0       	rcall	.+120    	; 0xe54 <__ultoa_invert+0x9c>
 ddc:	67 0f       	add	r22, r23
 dde:	78 1f       	adc	r23, r24
 de0:	89 1f       	adc	r24, r25
 de2:	9a 1f       	adc	r25, r26
 de4:	a1 1d       	adc	r26, r1
 de6:	68 0f       	add	r22, r24
 de8:	79 1f       	adc	r23, r25
 dea:	8a 1f       	adc	r24, r26
 dec:	91 1d       	adc	r25, r1
 dee:	a1 1d       	adc	r26, r1
 df0:	6a 0f       	add	r22, r26
 df2:	71 1d       	adc	r23, r1
 df4:	81 1d       	adc	r24, r1
 df6:	91 1d       	adc	r25, r1
 df8:	a1 1d       	adc	r26, r1
 dfa:	20 d0       	rcall	.+64     	; 0xe3c <__ultoa_invert+0x84>
 dfc:	09 f4       	brne	.+2      	; 0xe00 <__ultoa_invert+0x48>
 dfe:	68 94       	set
 e00:	3f 91       	pop	r19
 e02:	2a e0       	ldi	r18, 0x0A	; 10
 e04:	26 9f       	mul	r18, r22
 e06:	11 24       	eor	r1, r1
 e08:	30 19       	sub	r19, r0
 e0a:	30 5d       	subi	r19, 0xD0	; 208
 e0c:	31 93       	st	Z+, r19
 e0e:	de f6       	brtc	.-74     	; 0xdc6 <__ultoa_invert+0xe>
 e10:	cf 01       	movw	r24, r30
 e12:	08 95       	ret
 e14:	46 2f       	mov	r20, r22
 e16:	47 70       	andi	r20, 0x07	; 7
 e18:	40 5d       	subi	r20, 0xD0	; 208
 e1a:	41 93       	st	Z+, r20
 e1c:	b3 e0       	ldi	r27, 0x03	; 3
 e1e:	0f d0       	rcall	.+30     	; 0xe3e <__ultoa_invert+0x86>
 e20:	c9 f7       	brne	.-14     	; 0xe14 <__ultoa_invert+0x5c>
 e22:	f6 cf       	rjmp	.-20     	; 0xe10 <__ultoa_invert+0x58>
 e24:	46 2f       	mov	r20, r22
 e26:	4f 70       	andi	r20, 0x0F	; 15
 e28:	40 5d       	subi	r20, 0xD0	; 208
 e2a:	4a 33       	cpi	r20, 0x3A	; 58
 e2c:	18 f0       	brcs	.+6      	; 0xe34 <__ultoa_invert+0x7c>
 e2e:	49 5d       	subi	r20, 0xD9	; 217
 e30:	31 fd       	sbrc	r19, 1
 e32:	40 52       	subi	r20, 0x20	; 32
 e34:	41 93       	st	Z+, r20
 e36:	02 d0       	rcall	.+4      	; 0xe3c <__ultoa_invert+0x84>
 e38:	a9 f7       	brne	.-22     	; 0xe24 <__ultoa_invert+0x6c>
 e3a:	ea cf       	rjmp	.-44     	; 0xe10 <__ultoa_invert+0x58>
 e3c:	b4 e0       	ldi	r27, 0x04	; 4
 e3e:	a6 95       	lsr	r26
 e40:	97 95       	ror	r25
 e42:	87 95       	ror	r24
 e44:	77 95       	ror	r23
 e46:	67 95       	ror	r22
 e48:	ba 95       	dec	r27
 e4a:	c9 f7       	brne	.-14     	; 0xe3e <__ultoa_invert+0x86>
 e4c:	00 97       	sbiw	r24, 0x00	; 0
 e4e:	61 05       	cpc	r22, r1
 e50:	71 05       	cpc	r23, r1
 e52:	08 95       	ret
 e54:	9b 01       	movw	r18, r22
 e56:	ac 01       	movw	r20, r24
 e58:	0a 2e       	mov	r0, r26
 e5a:	06 94       	lsr	r0
 e5c:	57 95       	ror	r21
 e5e:	47 95       	ror	r20
 e60:	37 95       	ror	r19
 e62:	27 95       	ror	r18
 e64:	ba 95       	dec	r27
 e66:	c9 f7       	brne	.-14     	; 0xe5a <__ultoa_invert+0xa2>
 e68:	62 0f       	add	r22, r18
 e6a:	73 1f       	adc	r23, r19
 e6c:	84 1f       	adc	r24, r20
 e6e:	95 1f       	adc	r25, r21
 e70:	a0 1d       	adc	r26, r0
 e72:	08 95       	ret

00000e74 <_exit>:
 e74:	f8 94       	cli

00000e76 <__stop_program>:
 e76:	ff cf       	rjmp	.-2      	; 0xe76 <__stop_program>
