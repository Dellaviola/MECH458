
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  00001808  0000189c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001808  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800230  00800230  000019cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004465  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a5e  00000000  00000000  000061cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030b2  00000000  00000000  00007c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  0000ace0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009127  00000000  00000000  0000b450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001805  00000000  00000000  00014577  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00015d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  0001606c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c4       	rjmp	.+2338   	; 0x958 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	d5 c6       	rjmp	.+3498   	; 0xdf0 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e0       	ldi	r30, 0x08	; 8
      ac:	f8 e1       	ldi	r31, 0x18	; 24
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 33       	cpi	r26, 0x30	; 48
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a0 e3       	ldi	r26, 0x30	; 48
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a1 3b       	cpi	r26, 0xB1	; 177
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	c6 d2       	rcall	.+1420   	; 0x65c <main>
      d0:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <_exit>

000000d4 <__bad_interrupt>:
      d4:	91 c3       	rjmp	.+1826   	; 0x7f8 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     120:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	20 f5       	brcc	.+72     	; 0x170 <__vector_29+0x6e>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     12c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <g_ADCCount+0x1>
     13a:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e4 5c       	subi	r30, 0xC4	; 196
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
			if (g_ADCCount == 10) _timer[1].state = READY;	 
     15e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     162:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     166:	0a 97       	sbiw	r24, 0x0a	; 10
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_timer+0x11>
	}
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     19a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     1a6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     1aa:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     1ae:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     1b2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2347>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     1cc:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     1d0:	30 d2       	rcall	.+1120   	; 0x632 <LL_UpdateStatus>
     1d2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2348>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2349>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <_timer+0x23>
     1ec:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2349>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_timer+0x1a>
     206:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2347>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     220:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     22c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     230:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     234:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	b5 d1       	rcall	.+874    	; 0x5a6 <LL_Next>
     23c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     240:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2348>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	03 c0       	rjmp	.+6      	; 0x25e <SERVER_Task+0xd4>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2349>
     25e:	08 95       	ret

00000260 <ADC_Task>:
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	6f ef       	ldi	r22, 0xFF	; 255
     26c:	73 e0       	ldi	r23, 0x03	; 3
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	c1 2c       	mov	r12, r1
     274:	d1 2c       	mov	r13, r1
     276:	76 01       	movw	r14, r12
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	4f b7       	in	r20, 0x3f	; 63
     27e:	f8 94       	cli
     280:	fc 01       	movw	r30, r24
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e4 5c       	subi	r30, 0xC4	; 196
     288:	fd 4f       	sbci	r31, 0xFD	; 253
     28a:	20 81       	ld	r18, Z
     28c:	31 81       	ldd	r19, Z+1	; 0x01
     28e:	c2 0e       	add	r12, r18
     290:	d3 1e       	adc	r13, r19
     292:	e1 1c       	adc	r14, r1
     294:	f1 1c       	adc	r15, r1
     296:	20 81       	ld	r18, Z
     298:	31 81       	ldd	r19, Z+1	; 0x01
     29a:	26 17       	cp	r18, r22
     29c:	37 07       	cpc	r19, r23
     29e:	38 f4       	brcc	.+14     	; 0x2ae <ADC_Task+0x4e>
     2a0:	fc 01       	movw	r30, r24
     2a2:	ee 0f       	add	r30, r30
     2a4:	ff 1f       	adc	r31, r31
     2a6:	e4 5c       	subi	r30, 0xC4	; 196
     2a8:	fd 4f       	sbci	r31, 0xFD	; 253
     2aa:	60 81       	ld	r22, Z
     2ac:	71 81       	ldd	r23, Z+1	; 0x01
     2ae:	fc 01       	movw	r30, r24
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	e4 5c       	subi	r30, 0xC4	; 196
     2b6:	fd 4f       	sbci	r31, 0xFD	; 253
     2b8:	20 81       	ld	r18, Z
     2ba:	31 81       	ldd	r19, Z+1	; 0x01
     2bc:	a2 17       	cp	r26, r18
     2be:	b3 07       	cpc	r27, r19
     2c0:	08 f0       	brcs	.+2      	; 0x2c4 <ADC_Task+0x64>
     2c2:	4a c0       	rjmp	.+148    	; 0x358 <ADC_Task+0xf8>
     2c4:	fc 01       	movw	r30, r24
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	e4 5c       	subi	r30, 0xC4	; 196
     2cc:	fd 4f       	sbci	r31, 0xFD	; 253
     2ce:	a0 81       	ld	r26, Z
     2d0:	b1 81       	ldd	r27, Z+1	; 0x01
     2d2:	42 c0       	rjmp	.+132    	; 0x358 <ADC_Task+0xf8>
     2d4:	8f b7       	in	r24, 0x3f	; 63
     2d6:	f8 94       	cli
     2d8:	ca 1a       	sub	r12, r26
     2da:	db 0a       	sbc	r13, r27
     2dc:	e1 08       	sbc	r14, r1
     2de:	f1 08       	sbc	r15, r1
     2e0:	c6 1a       	sub	r12, r22
     2e2:	d7 0a       	sbc	r13, r23
     2e4:	e1 08       	sbc	r14, r1
     2e6:	f1 08       	sbc	r15, r1
     2e8:	f6 94       	lsr	r15
     2ea:	e7 94       	ror	r14
     2ec:	d7 94       	ror	r13
     2ee:	c7 94       	ror	r12
     2f0:	f6 94       	lsr	r15
     2f2:	e7 94       	ror	r14
     2f4:	d7 94       	ror	r13
     2f6:	c7 94       	ror	r12
     2f8:	8f bf       	out	0x3f, r24	; 63
     2fa:	cf b7       	in	r28, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	d7 01       	movw	r26, r14
     300:	c6 01       	movw	r24, r12
     302:	0b 97       	sbiw	r24, 0x0b	; 11
     304:	a1 09       	sbc	r26, r1
     306:	b1 09       	sbc	r27, r1
     308:	89 37       	cpi	r24, 0x79	; 121
     30a:	93 40       	sbci	r25, 0x03	; 3
     30c:	a1 05       	cpc	r26, r1
     30e:	b1 05       	cpc	r27, r1
     310:	a0 f4       	brcc	.+40     	; 0x33a <ADC_Task+0xda>
     312:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     316:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     31a:	70 d1       	rcall	.+736    	; 0x5fc <LL_GetRefl>
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	c8 16       	cp	r12, r24
     322:	d9 06       	cpc	r13, r25
     324:	ea 06       	cpc	r14, r26
     326:	fb 06       	cpc	r15, r27
     328:	40 f4       	brcc	.+16     	; 0x33a <ADC_Task+0xda>
     32a:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     32e:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     332:	00 97       	sbiw	r24, 0x00	; 0
     334:	11 f0       	breq	.+4      	; 0x33a <ADC_Task+0xda>
     336:	b6 01       	movw	r22, r12
     338:	6c d1       	rcall	.+728    	; 0x612 <LL_UpdateRefl>
     33a:	cf bf       	out	0x3f, r28	; 63
     33c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
     340:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
     344:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_timer+0x11>
     348:	66 9b       	sbis	0x0c, 6	; 12
     34a:	0d c0       	rjmp	.+26     	; 0x366 <ADC_Task+0x106>
     34c:	ea e7       	ldi	r30, 0x7A	; 122
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	80 64       	ori	r24, 0x40	; 64
     354:	80 83       	st	Z, r24
     356:	07 c0       	rjmp	.+14     	; 0x366 <ADC_Task+0x106>
     358:	4f bf       	out	0x3f, r20	; 63
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	86 30       	cpi	r24, 0x06	; 6
     35e:	91 05       	cpc	r25, r1
     360:	09 f0       	breq	.+2      	; 0x364 <ADC_Task+0x104>
     362:	8c cf       	rjmp	.-232    	; 0x27c <ADC_Task+0x1c>
     364:	b7 cf       	rjmp	.-146    	; 0x2d4 <ADC_Task+0x74>
     366:	cf 91       	pop	r28
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	08 95       	ret

00000372 <MAG_Task>:
     372:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <g_MotorOn>
     376:	88 23       	and	r24, r24
     378:	29 f0       	breq	.+10     	; 0x384 <MAG_Task+0x12>
     37a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2378>
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <tick.2378>
     384:	64 99       	sbic	0x0c, 4	; 12
     386:	1a c0       	rjmp	.+52     	; 0x3bc <MAG_Task+0x4a>
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     38e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     392:	4f d1       	rcall	.+670    	; 0x632 <LL_UpdateStatus>
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     39a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     39e:	3f d1       	rcall	.+638    	; 0x61e <LL_UpdateMag>
     3a0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3a4:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3a8:	fe d0       	rcall	.+508    	; 0x5a6 <LL_Next>
     3aa:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     3ae:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     3b2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     3b6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2378>
     3ba:	08 95       	ret
     3bc:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2378>
     3c0:	8f 31       	cpi	r24, 0x1F	; 31
     3c2:	c8 f0       	brcs	.+50     	; 0x3f6 <MAG_Task+0x84>
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3ca:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3ce:	31 d1       	rcall	.+610    	; 0x632 <LL_UpdateStatus>
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3d6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3da:	21 d1       	rcall	.+578    	; 0x61e <LL_UpdateMag>
     3dc:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3e0:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3e4:	e0 d0       	rcall	.+448    	; 0x5a6 <LL_Next>
     3e6:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     3ea:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     3ee:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     3f2:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2378>
     3f6:	08 95       	ret

000003f8 <EXIT_Task>:
     3f8:	cf 93       	push	r28
     3fa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2384>
     3fe:	81 11       	cpse	r24, r1
     400:	6e c0       	rjmp	.+220    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     402:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2385>
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <delay.2385>
     40c:	e1 ea       	ldi	r30, 0xA1	; 161
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	85 81       	ldd	r24, Z+5	; 0x05
     412:	96 81       	ldd	r25, Z+6	; 0x06
     414:	87 81       	ldd	r24, Z+7	; 0x07
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	80 e8       	ldi	r24, 0x80	; 128
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fe d1       	rcall	.+1020   	; 0x81a <PWM>
     41e:	c0 91 a5 02 	lds	r28, 0x02A5	; 0x8002a5 <stepper+0x4>
     422:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     426:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     42a:	e3 d0       	rcall	.+454    	; 0x5f2 <LL_GetClass>
     42c:	e8 2f       	mov	r30, r24
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	ea 5f       	subi	r30, 0xFA	; 250
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	80 81       	ld	r24, Z
     436:	c8 13       	cpse	r28, r24
     438:	49 c0       	rjmp	.+146    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     43a:	80 e8       	ldi	r24, 0x80	; 128
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	ed d1       	rcall	.+986    	; 0x81a <PWM>
     440:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2385>
     444:	85 31       	cpi	r24, 0x15	; 21
     446:	28 f4       	brcc	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     448:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2384>
     44c:	88 23       	and	r24, r24
     44e:	09 f4       	brne	.+2      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     450:	40 c0       	rjmp	.+128    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <memory.2384>
     458:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <delay.2385>
     45c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     460:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     464:	c6 d0       	rcall	.+396    	; 0x5f2 <LL_GetClass>
     466:	c8 2f       	mov	r28, r24
     468:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <HEAD>
     46c:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <HEAD+0x1>
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	93 81       	ldd	r25, Z+3	; 0x03
     474:	be d0       	rcall	.+380    	; 0x5f2 <LL_GetClass>
     476:	c8 13       	cpse	r28, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47a:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <memory.2384>
     47e:	63 e0       	ldi	r22, 0x03	; 3
     480:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     484:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     488:	d4 d0       	rcall	.+424    	; 0x632 <LL_UpdateStatus>
     48a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     48e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     492:	89 d0       	rcall	.+274    	; 0x5a6 <LL_Next>
     494:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
     498:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     49c:	fc 01       	movw	r30, r24
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	a7 d0       	rcall	.+334    	; 0x5f2 <LL_GetClass>
     4a4:	e8 2f       	mov	r30, r24
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	ea 5f       	subi	r30, 0xFA	; 250
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	c0 81       	ld	r28, Z
     4ae:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     4b2:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     4b6:	9d d0       	rcall	.+314    	; 0x5f2 <LL_GetClass>
     4b8:	e8 2f       	mov	r30, r24
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	ea 5f       	subi	r30, 0xFA	; 250
     4be:	fe 4f       	sbci	r31, 0xFE	; 254
     4c0:	80 81       	ld	r24, Z
     4c2:	6c 2f       	mov	r22, r28
     4c4:	34 d2       	rcall	.+1128   	; 0x92e <STEPPER_SetRotation>
     4c6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_timer+0x23>
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	a4 d1       	rcall	.+840    	; 0x81a <PWM>
     4d2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     4d6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     4da:	8b d0       	rcall	.+278    	; 0x5f2 <LL_GetClass>
     4dc:	0a c0       	rjmp	.+20     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4de:	e1 ea       	ldi	r30, 0xA1	; 161
     4e0:	f2 e0       	ldi	r31, 0x02	; 2
     4e2:	85 81       	ldd	r24, Z+5	; 0x05
     4e4:	96 81       	ldd	r25, Z+6	; 0x06
     4e6:	97 81       	ldd	r25, Z+7	; 0x07
     4e8:	89 1b       	sub	r24, r25
     4ea:	8f 30       	cpi	r24, 0x0F	; 15
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ee:	97 cf       	rjmp	.-210    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     4f0:	93 cf       	rjmp	.-218    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <BTN_Task>:
     4f6:	89 b1       	in	r24, 0x09	; 9
     4f8:	83 70       	andi	r24, 0x03	; 3
     4fa:	c9 f0       	breq	.+50     	; 0x52e <BTN_Task+0x38>
     4fc:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
     506:	83 30       	cpi	r24, 0x03	; 3
     508:	90 f0       	brcs	.+36     	; 0x52e <BTN_Task+0x38>
     50a:	89 b1       	in	r24, 0x09	; 9
     50c:	83 70       	andi	r24, 0x03	; 3
     50e:	19 f4       	brne	.+6      	; 0x516 <BTN_Task+0x20>
     510:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     514:	08 95       	ret
     516:	89 b1       	in	r24, 0x09	; 9
     518:	83 70       	andi	r24, 0x03	; 3
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	29 f4       	brne	.+10     	; 0x528 <BTN_Task+0x32>
     51e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <g_PauseRequest>
     522:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     526:	08 95       	ret
     528:	89 b1       	in	r24, 0x09	; 9
     52a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     52e:	08 95       	ret

00000530 <WATCHDOG_Task>:
     530:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     534:	82 30       	cpi	r24, 0x02	; 2
     536:	18 f0       	brcs	.+6      	; 0x53e <WATCHDOG_Task+0xe>
     538:	8b e1       	ldi	r24, 0x1B	; 27
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	4e d3       	rcall	.+1692   	; 0xbda <SYS_Pause>
     53e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <g_WDTimeout>
     548:	08 95       	ret

0000054a <D_Blinky>:
     54a:	9b b1       	in	r25, 0x0b	; 11
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	89 27       	eor	r24, r25
     550:	8b b9       	out	0x0b, r24	; 11
     552:	08 95       	ret

00000554 <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
     554:	08 95       	ret

00000556 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	7c 01       	movw	r14, r24
     562:	16 2f       	mov	r17, r22
     564:	d4 2f       	mov	r29, r20
     566:	c2 2f       	mov	r28, r18
     568:	85 e0       	ldi	r24, 0x05	; 5
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	4f d5       	rcall	.+2718   	; 0x100c <malloc>
     56e:	fc 01       	movw	r30, r24
     570:	f1 82       	std	Z+1, r15	; 0x01
     572:	e0 82       	st	Z, r14
     574:	12 83       	std	Z+2, r17	; 0x02
     576:	d3 83       	std	Z+3, r29	; 0x03
     578:	c4 83       	std	Z+4, r28	; 0x04
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <LL_ItemListInit>:
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	3d d5       	rcall	.+2682   	; 0x100c <malloc>
     592:	fc 01       	movw	r30, r24
     594:	d1 83       	std	Z+1, r29	; 0x01
     596:	c0 83       	st	Z, r28
     598:	15 82       	std	Z+5, r1	; 0x05
     59a:	14 82       	std	Z+4, r1	; 0x04
     59c:	13 82       	std	Z+3, r1	; 0x03
     59e:	12 82       	std	Z+2, r1	; 0x02
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <LL_Next>:
     5a6:	fc 01       	movw	r30, r24
     5a8:	82 81       	ldd	r24, Z+2	; 0x02
     5aa:	93 81       	ldd	r25, Z+3	; 0x03
     5ac:	08 95       	ret

000005ae <LL_AddBack>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	ec 01       	movw	r28, r24
     5b4:	cb 01       	movw	r24, r22
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <LL_AddBack+0xc>
     5b8:	e9 01       	movw	r28, r18
     5ba:	2a 81       	ldd	r18, Y+2	; 0x02
     5bc:	3b 81       	ldd	r19, Y+3	; 0x03
     5be:	21 15       	cp	r18, r1
     5c0:	31 05       	cpc	r19, r1
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <LL_AddBack+0xa>
     5c4:	e0 df       	rcall	.-64     	; 0x586 <LL_ItemListInit>
     5c6:	9b 83       	std	Y+3, r25	; 0x03
     5c8:	8a 83       	std	Y+2, r24	; 0x02
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <LL_Size>:
     5d0:	dc 01       	movw	r26, r24
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	ed 91       	ld	r30, X+
     5d6:	fc 91       	ld	r31, X
     5d8:	13 97       	sbiw	r26, 0x03	; 3
     5da:	30 97       	sbiw	r30, 0x00	; 0
     5dc:	41 f0       	breq	.+16     	; 0x5ee <LL_Size+0x1e>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	02 80       	ldd	r0, Z+2	; 0x02
     5e4:	f3 81       	ldd	r31, Z+3	; 0x03
     5e6:	e0 2d       	mov	r30, r0
     5e8:	30 97       	sbiw	r30, 0x00	; 0
     5ea:	d1 f7       	brne	.-12     	; 0x5e0 <LL_Size+0x10>
     5ec:	08 95       	ret
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	08 95       	ret

000005f2 <LL_GetClass>:
     5f2:	dc 01       	movw	r26, r24
     5f4:	ed 91       	ld	r30, X+
     5f6:	fc 91       	ld	r31, X
     5f8:	83 81       	ldd	r24, Z+3	; 0x03
     5fa:	08 95       	ret

000005fc <LL_GetRefl>:
     5fc:	dc 01       	movw	r26, r24
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	80 81       	ld	r24, Z
     604:	91 81       	ldd	r25, Z+1	; 0x01
     606:	08 95       	ret

00000608 <LL_GetMag>:
     608:	dc 01       	movw	r26, r24
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	08 95       	ret

00000612 <LL_UpdateRefl>:
     612:	dc 01       	movw	r26, r24
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	71 83       	std	Z+1, r23	; 0x01
     61a:	60 83       	st	Z, r22
     61c:	08 95       	ret

0000061e <LL_UpdateMag>:
     61e:	dc 01       	movw	r26, r24
     620:	ed 91       	ld	r30, X+
     622:	fc 91       	ld	r31, X
     624:	62 83       	std	Z+2, r22	; 0x02
     626:	08 95       	ret

00000628 <LL_UpdateClass>:
     628:	dc 01       	movw	r26, r24
     62a:	ed 91       	ld	r30, X+
     62c:	fc 91       	ld	r31, X
     62e:	63 83       	std	Z+3, r22	; 0x03
     630:	08 95       	ret

00000632 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     632:	dc 01       	movw	r26, r24
     634:	ed 91       	ld	r30, X+
     636:	fc 91       	ld	r31, X
     638:	64 83       	std	Z+4, r22	; 0x04
     63a:	08 95       	ret

0000063c <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     63c:	dc 01       	movw	r26, r24
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	84 81       	ldd	r24, Z+4	; 0x04
     644:	08 95       	ret

00000646 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     646:	8f ef       	ldi	r24, 0xFF	; 255
     648:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     64a:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     64c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     64e:	80 ef       	ldi	r24, 0xF0	; 240
     650:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     652:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     654:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	08 95       	ret

0000065c <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     65c:	52 d2       	rcall	.+1188   	; 0xb02 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     65e:	89 b1       	in	r24, 0x09	; 9
     660:	83 70       	andi	r24, 0x03	; 3
     662:	e9 f7       	brne	.-6      	; 0x65e <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     664:	89 e2       	ldi	r24, 0x29	; 41
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	c3 d4       	rcall	.+2438   	; 0xff0 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66a:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	45 ec       	ldi	r20, 0xC5	; 197
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	40 d4       	rcall	.+2176   	; 0xefe <TIMER_Create>
		_timer[0].state = READY;
     67e:	c6 e5       	ldi	r28, 0x56	; 86
     680:	d2 e0       	ldi	r29, 0x02	; 2
     682:	12 e0       	ldi	r17, 0x02	; 2
     684:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e3       	ldi	r20, 0x30	; 48
     68c:	51 e0       	ldi	r21, 0x01	; 1
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	33 d4       	rcall	.+2150   	; 0xefe <TIMER_Create>
		_timer[1].state = BLOCKED;
     698:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	49 eb       	ldi	r20, 0xB9	; 185
     6a0:	51 e0       	ldi	r21, 0x01	; 1
     6a2:	61 e0       	ldi	r22, 0x01	; 1
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	29 d4       	rcall	.+2130   	; 0xefe <TIMER_Create>
		_timer[2].state = BLOCKED;
     6ac:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	4c ef       	ldi	r20, 0xFC	; 252
     6b4:	51 e0       	ldi	r21, 0x01	; 1
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	1f d4       	rcall	.+2110   	; 0xefe <TIMER_Create>
		_timer[3].state = BLOCKED;
     6c0:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(1, 0, ADD_Task, NULL);		// Item Enter Handling
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	4a ea       	ldi	r20, 0xAA	; 170
     6c8:	52 e0       	ldi	r21, 0x02	; 2
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	15 d4       	rcall	.+2090   	; 0xefe <TIMER_Create>
		_timer[4].state = BLOCKED;
     6d4:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	4b e7       	ldi	r20, 0x7B	; 123
     6dc:	52 e0       	ldi	r21, 0x02	; 2
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	84 e6       	ldi	r24, 0x64	; 100
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0b d4       	rcall	.+2070   	; 0xefe <TIMER_Create>
		_timer[5].state = READY;
     6e8:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	45 ea       	ldi	r20, 0xA5	; 165
     6f0:	52 e0       	ldi	r21, 0x02	; 2
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	80 ed       	ldi	r24, 0xD0	; 208
     6f8:	97 e0       	ldi	r25, 0x07	; 7
     6fa:	01 d4       	rcall	.+2050   	; 0xefe <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]

		TIMER_Create(9000, 1, WATCHDOG_Task, NULL);
     6fc:	1e af       	std	Y+62, r17	; 0x3e
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	48 e9       	ldi	r20, 0x98	; 152
     704:	52 e0       	ldi	r21, 0x02	; 2
     706:	61 e0       	ldi	r22, 0x01	; 1
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	88 e2       	ldi	r24, 0x28	; 40
		_timer[7].state = BLOCKED;
     70c:	93 e2       	ldi	r25, 0x23	; 35
     70e:	f7 d3       	rcall	.+2030   	; 0xefe <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     710:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_timer+0x47>
     714:	8c e3       	ldi	r24, 0x3C	; 60
     716:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     718:	6b d4       	rcall	.+2262   	; 0xff0 <UART_SendString>
     71a:	80 e8       	ldi	r24, 0x80	; 128
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	7d d0       	rcall	.+250    	; 0x81a <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     720:	78 94       	sei
     722:	e1 2c       	mov	r14, r1
					// Unknown non-magnetic object
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     724:	f1 2c       	mov	r15, r1
     726:	cc 24       	eor	r12, r12
     728:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     72a:	d1 2c       	mov	r13, r1
     72c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <g_PauseRequest>
     730:	88 23       	and	r24, r24
     732:	19 f0       	breq	.+6      	; 0x73a <main+0xde>
     734:	8e e4       	ldi	r24, 0x4E	; 78
     736:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     738:	50 d2       	rcall	.+1184   	; 0xbda <SYS_Pause>
     73a:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     73e:	d0 91 37 02 	lds	r29, 0x0237	; 0x800237 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     742:	20 97       	sbiw	r28, 0x00	; 0
     744:	99 f3       	breq	.-26     	; 0x72c <main+0xd0>
     746:	20 97       	sbiw	r28, 0x00	; 0
     748:	09 f4       	brne	.+2      	; 0x74c <main+0xf0>
     74a:	4f c0       	rjmp	.+158    	; 0x7ea <main+0x18e>
     74c:	ce 01       	movw	r24, r28
     74e:	51 df       	rcall	.-350    	; 0x5f2 <LL_GetClass>
     750:	84 30       	cpi	r24, 0x04	; 4
     752:	09 f0       	breq	.+2      	; 0x756 <main+0xfa>
     754:	4a c0       	rjmp	.+148    	; 0x7ea <main+0x18e>
     756:	ce 01       	movw	r24, r28
     758:	71 df       	rcall	.-286    	; 0x63c <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	09 f0       	breq	.+2      	; 0x760 <main+0x104>
     75e:	45 c0       	rjmp	.+138    	; 0x7ea <main+0x18e>
     760:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     762:	4c df       	rcall	.-360    	; 0x5fc <LL_GetRefl>
     764:	8c 01       	movw	r16, r24
     766:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     768:	4f df       	rcall	.-354    	; 0x608 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     76a:	88 23       	and	r24, r24
     76c:	91 f0       	breq	.+36     	; 0x792 <main+0x136>
     76e:	c8 01       	movw	r24, r16
     770:	44 97       	sbiw	r24, 0x14	; 20
     772:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     774:	91 05       	cpc	r25, r1
     776:	20 f4       	brcc	.+8      	; 0x780 <main+0x124>
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     77c:	55 df       	rcall	.-342    	; 0x628 <LL_UpdateClass>
     77e:	1a c0       	rjmp	.+52     	; 0x7b4 <main+0x158>
     780:	0b 52       	subi	r16, 0x2B	; 43
     782:	11 40       	sbci	r17, 0x01	; 1
     784:	00 36       	cpi	r16, 0x60	; 96
					{
						LL_UpdateClass(temp, STEEL);
     786:	11 40       	sbci	r17, 0x01	; 1
     788:	a8 f4       	brcc	.+42     	; 0x7b4 <main+0x158>
     78a:	63 e0       	ldi	r22, 0x03	; 3
     78c:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     78e:	4c df       	rcall	.-360    	; 0x628 <LL_UpdateClass>
     790:	11 c0       	rjmp	.+34     	; 0x7b4 <main+0x158>
     792:	c8 01       	movw	r24, r16
     794:	86 57       	subi	r24, 0x76	; 118
     796:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     798:	8e 97       	sbiw	r24, 0x2e	; 46
     79a:	20 f4       	brcc	.+8      	; 0x7a4 <main+0x148>
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7a0:	43 df       	rcall	.-378    	; 0x628 <LL_UpdateClass>
     7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <main+0x158>
     7a4:	0b 53       	subi	r16, 0x3B	; 59
     7a6:	13 40       	sbci	r17, 0x03	; 3
     7a8:	00 33       	cpi	r16, 0x30	; 48
				{
					LL_UpdateClass(temp, WHITE);
     7aa:	11 05       	cpc	r17, r1
     7ac:	18 f4       	brcc	.+6      	; 0x7b4 <main+0x158>
     7ae:	60 e0       	ldi	r22, 0x00	; 0
				}
				else
				{
					// Unknown non-magnetic object
				}
				if(memory == 0)
     7b0:	ce 01       	movw	r24, r28
     7b2:	3a df       	rcall	.-396    	; 0x628 <LL_UpdateClass>
     7b4:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     7b6:	f1 04       	cpc	r15, r1
     7b8:	c1 f4       	brne	.+48     	; 0x7ea <main+0x18e>
     7ba:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     7be:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     7c2:	17 df       	rcall	.-466    	; 0x5f2 <LL_GetClass>
     7c4:	e8 2f       	mov	r30, r24
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	e1 5f       	subi	r30, 0xF1	; 241
     7ca:	fe 4f       	sbci	r31, 0xFE	; 254
     7cc:	10 81       	ld	r17, Z
     7ce:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     7d2:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     7d6:	0d df       	rcall	.-486    	; 0x5f2 <LL_GetClass>
     7d8:	e8 2f       	mov	r30, r24
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	e1 5f       	subi	r30, 0xF1	; 241
     7de:	fe 4f       	sbci	r31, 0xFE	; 254
     7e0:	80 81       	ld	r24, Z
     7e2:	61 2f       	mov	r22, r17
					memory = 1;
     7e4:	a4 d0       	rcall	.+328    	; 0x92e <STEPPER_SetRotation>
     7e6:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     7e8:	fd 2c       	mov	r15, r13
     7ea:	ce 01       	movw	r24, r28
     7ec:	dc de       	rcall	.-584    	; 0x5a6 <LL_Next>
     7ee:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     7f0:	89 2b       	or	r24, r25
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <main+0x19a>
     7f4:	a8 cf       	rjmp	.-176    	; 0x746 <main+0xea>
     7f6:	9a cf       	rjmp	.-204    	; 0x72c <main+0xd0>

000007f8 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     802:	8a ea       	ldi	r24, 0xAA	; 170
     804:	88 b9       	out	0x08, r24	; 8
     806:	fe cf       	rjmp	.-4      	; 0x804 <__vector_default+0xc>

00000808 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     808:	84 b5       	in	r24, 0x24	; 36
     80a:	83 68       	ori	r24, 0x83	; 131
     80c:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     80e:	85 b5       	in	r24, 0x25	; 37
     810:	83 60       	ori	r24, 0x03	; 3
     812:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     814:	80 e8       	ldi	r24, 0x80	; 128
     816:	87 bd       	out	0x27, r24	; 39
     818:	08 95       	ret

0000081a <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     81a:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     81c:	9f b7       	in	r25, 0x3f	; 63
     81e:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     820:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <BELT_SPEED>
     824:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     826:	23 2b       	or	r18, r19
     828:	31 f0       	breq	.+12     	; 0x836 <PWM+0x1c>
		{
			g_MotorOn = 1;
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <g_MotorOn>
			PORTB = ~0x0E;
     830:	81 ef       	ldi	r24, 0xF1	; 241
     832:	85 b9       	out	0x05, r24	; 5
     834:	04 c0       	rjmp	.+8      	; 0x83e <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     836:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <g_MotorOn>
			PORTB = ~0x0F;
     83a:	80 ef       	ldi	r24, 0xF0	; 240
     83c:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     83e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     840:	08 95       	ret

00000842 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     842:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     844:	e1 ea       	ldi	r30, 0xA1	; 161
     846:	f2 e0       	ldi	r31, 0x02	; 2
     848:	10 82       	st	Z, r1
	stepper.direction = 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     84e:	13 82       	std	Z+3, r1	; 0x03
     850:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     852:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     854:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     856:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     858:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     85a:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     85c:	88 ec       	ldi	r24, 0xC8	; 200
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	96 83       	std	Z+6, r25	; 0x06
     862:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     864:	80 e3       	ldi	r24, 0x30	; 48
     866:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     868:	84 e9       	ldi	r24, 0x94	; 148
     86a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     86e:	e0 eb       	ldi	r30, 0xB0	; 176
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	80 81       	ld	r24, Z
     874:	82 60       	ori	r24, 0x02	; 2
     876:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     878:	e0 e7       	ldi	r30, 0x70	; 112
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	82 60       	ori	r24, 0x02	; 2
     880:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     882:	e1 eb       	ldi	r30, 0xB1	; 177
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	87 60       	ori	r24, 0x07	; 7
     88a:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     88c:	78 94       	sei
     88e:	08 95       	ret

00000890 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	86 1b       	sub	r24, r22
     894:	91 09       	sbc	r25, r1
	if (steps >= 0)
     896:	52 f0       	brmi	.+20     	; 0x8ac <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     898:	85 36       	cpi	r24, 0x65	; 101
     89a:	91 05       	cpc	r25, r1
     89c:	8c f0       	brlt	.+34     	; 0x8c0 <STEPPER_NumSteps+0x30>
     89e:	24 e6       	ldi	r18, 0x64	; 100
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	48 1b       	sub	r20, r24
     8a6:	59 0b       	sbc	r21, r25
     8a8:	ca 01       	movw	r24, r20
     8aa:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     8ac:	8c 39       	cpi	r24, 0x9C	; 156
     8ae:	5f ef       	ldi	r21, 0xFF	; 255
     8b0:	95 07       	cpc	r25, r21
     8b2:	34 f4       	brge	.+12     	; 0x8c0 <STEPPER_NumSteps+0x30>
     8b4:	2c e9       	ldi	r18, 0x9C	; 156
     8b6:	3f ef       	ldi	r19, 0xFF	; 255
     8b8:	a9 01       	movw	r20, r18
     8ba:	48 1b       	sub	r20, r24
     8bc:	59 0b       	sbc	r21, r25
     8be:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     8c0:	08 95       	ret

000008c2 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     8c6:	c1 ea       	ldi	r28, 0xA1	; 161
     8c8:	d2 e0       	ldi	r29, 0x02	; 2
     8ca:	6c 81       	ldd	r22, Y+4	; 0x04
     8cc:	8a 81       	ldd	r24, Y+2	; 0x02
     8ce:	9b 81       	ldd	r25, Y+3	; 0x03
     8d0:	df df       	rcall	.-66     	; 0x890 <STEPPER_NumSteps>
     8d2:	9e 83       	std	Y+6, r25	; 0x06
     8d4:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     8d6:	6a 81       	ldd	r22, Y+2	; 0x02
     8d8:	7b 81       	ldd	r23, Y+3	; 0x03
     8da:	88 85       	ldd	r24, Y+8	; 0x08
     8dc:	d9 df       	rcall	.-78     	; 0x890 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     8de:	2d 81       	ldd	r18, Y+5	; 0x05
     8e0:	3e 81       	ldd	r19, Y+6	; 0x06
     8e2:	33 23       	and	r19, r19
     8e4:	14 f4       	brge	.+4      	; 0x8ea <STEPPER_Rotate+0x28>
     8e6:	28 e0       	ldi	r18, 0x08	; 8
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <STEPPER_Rotate+0x2a>
     8ea:	24 e0       	ldi	r18, 0x04	; 4
     8ec:	e1 ea       	ldi	r30, 0xA1	; 161
     8ee:	f2 e0       	ldi	r31, 0x02	; 2
     8f0:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     8f2:	45 81       	ldd	r20, Z+5	; 0x05
     8f4:	56 81       	ldd	r21, Z+6	; 0x06
     8f6:	84 9f       	mul	r24, r20
     8f8:	90 01       	movw	r18, r0
     8fa:	85 9f       	mul	r24, r21
     8fc:	30 0d       	add	r19, r0
     8fe:	94 9f       	mul	r25, r20
     900:	30 0d       	add	r19, r0
     902:	11 24       	eor	r1, r1
     904:	83 2f       	mov	r24, r19
     906:	80 95       	com	r24
     908:	88 1f       	adc	r24, r24
     90a:	88 27       	eor	r24, r24
     90c:	88 1f       	adc	r24, r24
     90e:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     910:	85 81       	ldd	r24, Z+5	; 0x05
     912:	96 81       	ldd	r25, Z+6	; 0x06
     914:	99 23       	and	r25, r25
     916:	1c f4       	brge	.+6      	; 0x91e <STEPPER_Rotate+0x5c>
     918:	91 95       	neg	r25
     91a:	81 95       	neg	r24
     91c:	91 09       	sbc	r25, r1
     91e:	e1 ea       	ldi	r30, 0xA1	; 161
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	96 83       	std	Z+6, r25	; 0x06
     924:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     926:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
	cli();
     932:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	c1 ea       	ldi	r28, 0xA1	; 161
     938:	d2 e0       	ldi	r29, 0x02	; 2
     93a:	9b 83       	std	Y+3, r25	; 0x03
     93c:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     93e:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     940:	c0 df       	rcall	.-128    	; 0x8c2 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     942:	eb 85       	ldd	r30, Y+11	; 0x0b
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	eb 5e       	subi	r30, 0xEB	; 235
     948:	fe 4f       	sbci	r31, 0xFE	; 254
     94a:	80 81       	ld	r24, Z
     94c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     950:	78 94       	sei
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	0b b6       	in	r0, 0x3b	; 59
     964:	0f 92       	push	r0
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <__vector_13+0x24>
     97c:	00 d0       	rcall	.+0      	; 0x97e <__vector_13+0x26>
     97e:	cd b7       	in	r28, 0x3d	; 61
     980:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     982:	86 e3       	ldi	r24, 0x36	; 54
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	9e e2       	ldi	r25, 0x2E	; 46
     98c:	ad e2       	ldi	r26, 0x2D	; 45
     98e:	b5 e3       	ldi	r27, 0x35	; 53
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	ab 83       	std	Y+3, r26	; 0x03
     996:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     998:	e1 ea       	ldi	r30, 0xA1	; 161
     99a:	f2 e0       	ldi	r31, 0x02	; 2
     99c:	87 81       	ldd	r24, Z+7	; 0x07
     99e:	25 81       	ldd	r18, Z+5	; 0x05
     9a0:	36 81       	ldd	r19, Z+6	; 0x06
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	82 17       	cp	r24, r18
     9a6:	93 07       	cpc	r25, r19
     9a8:	0c f0       	brlt	.+2      	; 0x9ac <__vector_13+0x54>
     9aa:	5a c0       	rjmp	.+180    	; 0xa60 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     9ac:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <stepper+0x1>
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	51 f4       	brne	.+20     	; 0x9c8 <__vector_13+0x70>
     9b4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9b8:	e1 e0       	ldi	r30, 0x01	; 1
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ec 0f       	add	r30, r28
     9be:	fd 1f       	adc	r31, r29
     9c0:	e8 0f       	add	r30, r24
     9c2:	f1 1d       	adc	r31, r1
     9c4:	80 81       	ld	r24, Z
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__vector_13+0x8a>
     9c8:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9cc:	e3 e0       	ldi	r30, 0x03	; 3
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	e8 1b       	sub	r30, r24
     9d2:	f1 09       	sbc	r31, r1
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	8c 0f       	add	r24, r28
     9da:	9d 1f       	adc	r25, r29
     9dc:	e8 0f       	add	r30, r24
     9de:	f9 1f       	adc	r31, r25
     9e0:	80 81       	ld	r24, Z
     9e2:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     9e4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	21 f0       	breq	.+8      	; 0x9f4 <__vector_13+0x9c>
     9ec:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <__vector_13+0x9e>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	e1 ea       	ldi	r30, 0xA1	; 161
     9f8:	f2 e0       	ldi	r31, 0x02	; 2
     9fa:	80 83       	st	Z, r24

		stepper._currentStep++;
     9fc:	87 81       	ldd	r24, Z+7	; 0x07
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     a02:	85 81       	ldd	r24, Z+5	; 0x05
     a04:	96 81       	ldd	r25, Z+6	; 0x06
     a06:	27 81       	ldd	r18, Z+7	; 0x07
     a08:	82 1b       	sub	r24, r18
     a0a:	91 09       	sbc	r25, r1
     a0c:	06 97       	sbiw	r24, 0x06	; 6
     a0e:	74 f4       	brge	.+28     	; 0xa2c <__vector_13+0xd4>
     a10:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	eb 5e       	subi	r30, 0xEB	; 235
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	80 81       	ld	r24, Z
     a1c:	84 39       	cpi	r24, 0x94	; 148
     a1e:	30 f4       	brcc	.+12     	; 0xa2c <__vector_13+0xd4>
		{
			stepper._accellStep--;
     a20:	e1 ea       	ldi	r30, 0xA1	; 161
     a22:	f2 e0       	ldi	r31, 0x02	; 2
     a24:	83 85       	ldd	r24, Z+11	; 0x0b
     a26:	81 50       	subi	r24, 0x01	; 1
     a28:	83 87       	std	Z+11, r24	; 0x0b
     a2a:	11 c0       	rjmp	.+34     	; 0xa4e <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a2c:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <stepper+0x7>
     a30:	86 30       	cpi	r24, 0x06	; 6
     a32:	68 f0       	brcs	.+26     	; 0xa4e <__vector_13+0xf6>
     a34:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	eb 5e       	subi	r30, 0xEB	; 235
     a3c:	fe 4f       	sbci	r31, 0xFE	; 254
     a3e:	80 81       	ld	r24, Z
     a40:	81 34       	cpi	r24, 0x41	; 65
     a42:	28 f0       	brcs	.+10     	; 0xa4e <__vector_13+0xf6>
		{
			stepper._accellStep++;
     a44:	e1 ea       	ldi	r30, 0xA1	; 161
     a46:	f2 e0       	ldi	r31, 0x02	; 2
     a48:	83 85       	ldd	r24, Z+11	; 0x0b
     a4a:	8f 5f       	subi	r24, 0xFF	; 255
     a4c:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a4e:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	eb 5e       	subi	r30, 0xEB	; 235
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	80 81       	ld	r24, Z
     a5a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a5e:	29 c0       	rjmp	.+82     	; 0xab2 <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     a60:	e1 ea       	ldi	r30, 0xA1	; 161
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	87 81       	ldd	r24, Z+7	; 0x07
     a66:	25 81       	ldd	r18, Z+5	; 0x05
     a68:	36 81       	ldd	r19, Z+6	; 0x06
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	82 17       	cp	r24, r18
     a6e:	93 07       	cpc	r25, r19
     a70:	01 f5       	brne	.+64     	; 0xab2 <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	93 81       	ldd	r25, Z+3	; 0x03
     a76:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a78:	81 85       	ldd	r24, Z+9	; 0x09
     a7a:	88 23       	and	r24, r24
     a7c:	19 f0       	breq	.+6      	; 0xa84 <__vector_13+0x12c>
     a7e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepper+0xb>
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <__vector_13+0x12e>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	a1 ea       	ldi	r26, 0xA1	; 161
     a88:	b2 e0       	ldi	r27, 0x02	; 2
     a8a:	1b 96       	adiw	r26, 0x0b	; 11
     a8c:	8c 93       	st	X, r24
     a8e:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a90:	1b 96       	adiw	r26, 0x0b	; 11
     a92:	ec 91       	ld	r30, X
     a94:	1b 97       	sbiw	r26, 0x0b	; 11
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	eb 5e       	subi	r30, 0xEB	; 235
     a9a:	fe 4f       	sbci	r31, 0xFE	; 254
     a9c:	80 81       	ld	r24, Z
     a9e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     aa2:	19 96       	adiw	r26, 0x09	; 9
     aa4:	8c 91       	ld	r24, X
     aa6:	81 11       	cpse	r24, r1
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <__vector_13+0x156>
     aaa:	82 b1       	in	r24, 0x02	; 2
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <__vector_13+0x158>
     aae:	82 b1       	in	r24, 0x02	; 2
     ab0:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     ab2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <stepper+0xa>
     ab6:	81 11       	cpse	r24, r1
     ab8:	0f c0       	rjmp	.+30     	; 0xad8 <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     aba:	63 99       	sbic	0x0c, 3	; 12
     abc:	0d c0       	rjmp	.+26     	; 0xad8 <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     abe:	e1 ea       	ldi	r30, 0xA1	; 161
     ac0:	f2 e0       	ldi	r31, 0x02	; 2
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     ac6:	10 82       	st	Z, r1
			stepper.direction = 1;
     ac8:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     aca:	13 82       	std	Z+3, r1	; 0x03
     acc:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     ace:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ad0:	16 82       	std	Z+6, r1	; 0x06
     ad2:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ad4:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     ad6:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	0f 90       	pop	r0
     af6:	0b be       	out	0x3b, r0	; 59
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	1f 90       	pop	r1
     b00:	18 95       	reti

00000b02 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     b08:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     b0a:	e1 e6       	ldi	r30, 0x61	; 97
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 e8       	ldi	r24, 0x80	; 128
     b10:	80 83       	st	Z, r24
	CLKPR = 0;
     b12:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     b14:	55 d2       	rcall	.+1194   	; 0xfc0 <UART_Init>
	GPIO_Init();
     b16:	97 dd       	rcall	.-1234   	; 0x646 <GPIO_Init>
	TIMER_Init();
     b18:	d8 d1       	rcall	.+944    	; 0xeca <TIMER_Init>
	PWM_Init();
     b1a:	76 de       	rcall	.-788    	; 0x808 <PWM_Init>
     b1c:	dc da       	rcall	.-2632   	; 0xd6 <ADC_Init>
	ADC_Init();
     b1e:	91 de       	rcall	.-734    	; 0x842 <STEPPER_Init>
     b20:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
	STEPPER_Init();
     b24:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     b28:	84 e1       	ldi	r24, 0x14	; 20
     b2a:	ec e3       	ldi	r30, 0x3C	; 60
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     b2e:	df 01       	movw	r26, r30
     b30:	1d 92       	st	X+, r1
     b32:	8a 95       	dec	r24
     b34:	e9 f7       	brne	.-6      	; 0xb30 <SYS_Init+0x2e>
     b36:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <HEAD+0x1>
     b3a:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <HEAD>

	HEAD = NULL;
     b3e:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TAIL+0x1>
     b42:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <TAIL>
	TAIL = NULL;
     b46:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <STAGE1+0x1>
     b4a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STAGE1>
	STAGE1 = NULL;
     b4e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <STAGE2+0x1>
     b52:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <STAGE2>
	STAGE2 = NULL;
     b56:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <FRONT+0x1>
     b5a:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <FRONT>
	FRONT = NULL;
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	89 ee       	ldi	r24, 0xE9	; 233
     b66:	9d ef       	ldi	r25, 0xFD	; 253
     b68:	f6 dc       	rcall	.-1556   	; 0x556 <LL_ItemInit>
     b6a:	0d dd       	rcall	.-1510   	; 0x586 <LL_ItemListInit>
     b6c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     b70:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     b74:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <FRONT+0x1>
     b78:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <FRONT>
	FRONT = HEAD;
     b7c:	ca ef       	ldi	r28, 0xFA	; 250
     b7e:	08 ee       	ldi	r16, 0xE8	; 232
     b80:	1d ef       	ldi	r17, 0xFD	; 253
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     b86:	6c 2f       	mov	r22, r28
     b88:	c8 01       	movw	r24, r16
     b8a:	e5 dc       	rcall	.-1590   	; 0x556 <LL_ItemInit>
     b8c:	bc 01       	movw	r22, r24
     b8e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     b92:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     b96:	0b dd       	rcall	.-1514   	; 0x5ae <LL_AddBack>
     b98:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TAIL+0x1>
     b9c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TAIL>
     ba0:	01 50       	subi	r16, 0x01	; 1
     ba2:	11 09       	sbc	r17, r1
     ba4:	c1 50       	subi	r28, 0x01	; 1
     ba6:	cb 3c       	cpi	r28, 0xCB	; 203
     ba8:	61 f7       	brne	.-40     	; 0xb82 <SYS_Init+0x80>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     baa:	05 e0       	ldi	r16, 0x05	; 5
     bac:	10 e0       	ldi	r17, 0x00	; 0
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     bb2:	6a ef       	ldi	r22, 0xFA	; 250
     bb4:	88 ee       	ldi	r24, 0xE8	; 232
     bb6:	9d ef       	ldi	r25, 0xFD	; 253
     bb8:	ce dc       	rcall	.-1636   	; 0x556 <LL_ItemInit>
     bba:	bc 01       	movw	r22, r24
     bbc:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		LL_AddBack(HEAD,initNode);
     bc0:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     bc4:	f4 dc       	rcall	.-1560   	; 0x5ae <LL_AddBack>
     bc6:	01 50       	subi	r16, 0x01	; 1
     bc8:	11 09       	sbc	r17, r1
     bca:	89 f7       	brne	.-30     	; 0xbae <SYS_Init+0xac>
     bcc:	84 e5       	ldi	r24, 0x54	; 84
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     bce:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     bd0:	0f d2       	rcall	.+1054   	; 0xff0 <UART_SendString>
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16

} // SYS_Init
     bd8:	08 95       	ret

00000bda <SYS_Pause>:
     bda:	3f 92       	push	r3
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	df 92       	push	r13
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	c8 5c       	subi	r28, 0xC8	; 200
     c02:	d1 09       	sbc	r29, r1
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	98 2e       	mov	r9, r24
     c10:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     c12:	f8 94       	cli

	// Turn off motor
	PWM(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	00 de       	rcall	.-1024   	; 0x81a <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     c1a:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <FRONT>
     c1e:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     c22:	8f 92       	push	r8
     c24:	9f 92       	push	r9
     c26:	8a e6       	ldi	r24, 0x6A	; 106
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	7c 01       	movw	r14, r24
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	0a d3       	rcall	.+1556   	; 0x124e <sprintf>
	UART_SendString(buffer);
     c3a:	c7 01       	movw	r24, r14
     c3c:	d9 d1       	rcall	.+946    	; 0xff0 <UART_SendString>
     c3e:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     c4c:	f1 2c       	mov	r15, r1
     c4e:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c50:	f5 e8       	ldi	r31, 0x85	; 133
     c52:	af 2e       	mov	r10, r31
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	bf 2e       	mov	r11, r31
     c58:	f0 2d       	mov	r31, r0
     c5a:	6e 01       	movw	r12, r28
     c5c:	97 e9       	ldi	r25, 0x97	; 151
     c5e:	c9 0e       	add	r12, r25
     c60:	d1 1c       	adc	r13, r1
     c62:	27 c0       	rjmp	.+78     	; 0xcb2 <SYS_Pause+0xd8>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c64:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     c66:	ee 1a       	sub	r14, r30
     c68:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c6a:	c8 01       	movw	r24, r16
     c6c:	e7 dc       	rcall	.-1586   	; 0x63c <LL_GetStatus>
     c6e:	58 2e       	mov	r5, r24
     c70:	c8 01       	movw	r24, r16
     c72:	bf dc       	rcall	.-1666   	; 0x5f2 <LL_GetClass>
     c74:	68 2e       	mov	r6, r24
     c76:	c8 01       	movw	r24, r16
     c78:	c7 dc       	rcall	.-1650   	; 0x608 <LL_GetMag>
     c7a:	78 2e       	mov	r7, r24
     c7c:	c8 01       	movw	r24, r16
     c7e:	be dc       	rcall	.-1668   	; 0x5fc <LL_GetRefl>
     c80:	1f 92       	push	r1
     c82:	5f 92       	push	r5
     c84:	1f 92       	push	r1
     c86:	6f 92       	push	r6
     c88:	1f 92       	push	r1
     c8a:	7f 92       	push	r7
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	ff 92       	push	r15
     c92:	ef 92       	push	r14
     c94:	bf 92       	push	r11
     c96:	af 92       	push	r10
     c98:	df 92       	push	r13
     c9a:	cf 92       	push	r12
     c9c:	d8 d2       	rcall	.+1456   	; 0x124e <sprintf>
		UART_SendString(listbuff);
     c9e:	c6 01       	movw	r24, r12
     ca0:	a7 d1       	rcall	.+846    	; 0xff0 <UART_SendString>
     ca2:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     ca4:	80 dc       	rcall	.-1792   	; 0x5a6 <LL_Next>
     ca6:	8c 01       	movw	r16, r24
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	c8 01       	movw	r24, r16
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     cb4:	9e dc       	rcall	.-1732   	; 0x5f2 <LL_GetClass>
     cb6:	85 30       	cpi	r24, 0x05	; 5
     cb8:	a9 f6       	brne	.-86     	; 0xc64 <SYS_Pause+0x8a>
     cba:	0f 2e       	mov	r0, r31
     cbc:	f6 e5       	ldi	r31, 0x56	; 86
     cbe:	cf 2e       	mov	r12, r31
     cc0:	f2 e0       	ldi	r31, 0x02	; 2
     cc2:	df 2e       	mov	r13, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	00 e0       	ldi	r16, 0x00	; 0
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	0f 2e       	mov	r0, r31
     ccc:	f9 eb       	ldi	r31, 0xB9	; 185
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     cce:	af 2e       	mov	r10, r31
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	bf 2e       	mov	r11, r31
     cd4:	f0 2d       	mov	r31, r0
     cd6:	7e 01       	movw	r14, r28
     cd8:	97 e9       	ldi	r25, 0x97	; 151
     cda:	e9 0e       	add	r14, r25
     cdc:	f1 1c       	adc	r15, r1
     cde:	f6 01       	movw	r30, r12
     ce0:	80 85       	ldd	r24, Z+8	; 0x08
     ce2:	1f 92       	push	r1
     ce4:	8f 93       	push	r24
     ce6:	1f 93       	push	r17
     ce8:	0f 93       	push	r16
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	bf 92       	push	r11
     cf0:	af 92       	push	r10
     cf2:	ff 92       	push	r15
     cf4:	ef 92       	push	r14
     cf6:	ab d2       	rcall	.+1366   	; 0x124e <sprintf>
     cf8:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     cfa:	7a d1       	rcall	.+756    	; 0xff0 <UART_SendString>
     cfc:	0f 5f       	subi	r16, 0xFF	; 255
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     d00:	f9 e0       	ldi	r31, 0x09	; 9
     d02:	cf 0e       	add	r12, r31
     d04:	d1 1c       	adc	r13, r1
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	07 30       	cpi	r16, 0x07	; 7
     d12:	11 05       	cpc	r17, r1
     d14:	21 f7       	brne	.-56     	; 0xcde <SYS_Pause+0x104>
     d16:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     d1a:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     d1e:	6e dc       	rcall	.-1828   	; 0x5fc <LL_GetRefl>
     d20:	48 2e       	mov	r4, r24
     d22:	39 2e       	mov	r3, r25
     d24:	60 90 9e 02 	lds	r6, 0x029E	; 0x80029e <STAGE2>
     d28:	50 90 9f 02 	lds	r5, 0x029F	; 0x80029f <STAGE2+0x1>
     d2c:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     d30:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     d34:	69 dc       	rcall	.-1838   	; 0x608 <LL_GetMag>
     d36:	78 2e       	mov	r7, r24
     d38:	90 90 54 02 	lds	r9, 0x0254	; 0x800254 <STAGE1>
     d3c:	80 90 55 02 	lds	r8, 0x0255	; 0x800255 <STAGE1+0x1>
     d40:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <TAIL>
     d44:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <TAIL+0x1>
     d48:	f8 01       	movw	r30, r16
     d4a:	b2 80       	ldd	r11, Z+2	; 0x02
     d4c:	a3 80       	ldd	r10, Z+3	; 0x03
     d4e:	d0 90 38 02 	lds	r13, 0x0238	; 0x800238 <FRONT>
     d52:	c0 90 39 02 	lds	r12, 0x0239	; 0x800239 <FRONT+0x1>
     d56:	f0 90 36 02 	lds	r15, 0x0236	; 0x800236 <HEAD>
     d5a:	e0 90 37 02 	lds	r14, 0x0237	; 0x800237 <HEAD+0x1>
     d5e:	8f 2d       	mov	r24, r15
     d60:	9e 2d       	mov	r25, r14
     d62:	36 dc       	rcall	.-1940   	; 0x5d0 <LL_Size>
     d64:	3f 92       	push	r3
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5
     d6a:	6f 92       	push	r6
     d6c:	1f 92       	push	r1
     d6e:	7f 92       	push	r7
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	cf 92       	push	r12
     d7a:	df 92       	push	r13
     d7c:	1f 93       	push	r17
     d7e:	0f 93       	push	r16
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	1f 92       	push	r1
     d86:	8f 93       	push	r24
     d88:	88 ed       	ldi	r24, 0xD8	; 216
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	8e 01       	movw	r16, r28
     d92:	0b 59       	subi	r16, 0x9B	; 155
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	1f 93       	push	r17
     d98:	0f 93       	push	r16
     d9a:	59 d2       	rcall	.+1202   	; 0x124e <sprintf>
	UART_SendString(anotherbuff);
     d9c:	c8 01       	movw	r24, r16
     d9e:	28 d1       	rcall	.+592    	; 0xff0 <UART_SendString>
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	89 b1       	in	r24, 0x09	; 9

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     dac:	83 70       	andi	r24, 0x03	; 3
     dae:	e9 f7       	brne	.-6      	; 0xdaa <SYS_Pause+0x1d0>
     db0:	89 e2       	ldi	r24, 0x29	; 41
		{
			UART_SendString("Starting System!\r\n");
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	1d d1       	rcall	.+570    	; 0xff0 <UART_SendString>
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     dba:	2f dd       	rcall	.-1442   	; 0x81a <PWM>
     dbc:	78 94       	sei
     dbe:	c8 53       	subi	r28, 0x38	; 56
     dc0:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     dc2:	0f b6       	in	r0, 0x3f	; 63
			return;
		}
	}
} // SYS_Pause
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	bf 90       	pop	r11
     dde:	af 90       	pop	r10
     de0:	9f 90       	pop	r9
     de2:	8f 90       	pop	r8
     de4:	7f 90       	pop	r7
     de6:	6f 90       	pop	r6
     de8:	5f 90       	pop	r5
     dea:	4f 90       	pop	r4
     dec:	3f 90       	pop	r3
     dee:	08 95       	ret

00000df0 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	0b b6       	in	r0, 0x3b	; 59
     dfc:	0f 92       	push	r0
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     e22:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     e26:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <_timer_tick+0x1>
     e30:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <_timer_tick>
     e34:	c6 e5       	ldi	r28, 0x56	; 86
     e36:	d2 e0       	ldi	r29, 0x02	; 2
     e38:	0f 2e       	mov	r0, r31
     e3a:	fe e9       	ldi	r31, 0x9E	; 158
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f2 e0       	ldi	r31, 0x02	; 2
     e40:	ff 2e       	mov	r15, r31
     e42:	f0 2d       	mov	r31, r0
     e44:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     e46:	ec 81       	ldd	r30, Y+4	; 0x04
     e48:	fd 81       	ldd	r31, Y+5	; 0x05
     e4a:	30 97       	sbiw	r30, 0x00	; 0
     e4c:	09 f1       	breq	.+66     	; 0xe90 <__vector_17+0xa0>
     e4e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     e52:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     e56:	28 81       	ld	r18, Y
     e58:	39 81       	ldd	r19, Y+1	; 0x01
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	c1 f4       	brne	.+48     	; 0xe90 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     e60:	88 85       	ldd	r24, Y+8	; 0x08
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	19 f4       	brne	.+6      	; 0xe6c <__vector_17+0x7c>
     e66:	8e 81       	ldd	r24, Y+6	; 0x06
     e68:	9f 81       	ldd	r25, Y+7	; 0x07
     e6a:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     e6c:	d8 01       	movw	r26, r16
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	8d 91       	ld	r24, X+
     e72:	9c 91       	ld	r25, X
     e74:	13 97       	sbiw	r26, 0x03	; 3
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	41 f0       	breq	.+16     	; 0xe8a <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     e7a:	2d 91       	ld	r18, X+
     e7c:	3c 91       	ld	r19, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	8d 93       	st	X+, r24
     e86:	9c 93       	st	X, r25
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     e8a:	f8 01       	movw	r30, r16
     e8c:	15 82       	std	Z+5, r1	; 0x05
     e8e:	14 82       	std	Z+4, r1	; 0x04
     e90:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     e92:	ce 15       	cp	r28, r14
     e94:	df 05       	cpc	r29, r15
     e96:	b1 f6       	brne	.-84     	; 0xe44 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     e98:	ff 91       	pop	r31
     e9a:	ef 91       	pop	r30
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
     eca:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ece:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
     ed2:	88 e4       	ldi	r24, 0x48	; 72
     ed4:	98 e0       	ldi	r25, 0x08	; 8
     ed6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eda:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     ede:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     ee2:	89 e0       	ldi	r24, 0x09	; 9
     ee4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     eee:	88 e4       	ldi	r24, 0x48	; 72
     ef0:	e6 e5       	ldi	r30, 0x56	; 86
     ef2:	f2 e0       	ldi	r31, 0x02	; 2
     ef4:	df 01       	movw	r26, r30
     ef6:	1d 92       	st	X+, r1
     ef8:	8a 95       	dec	r24
     efa:	e9 f7       	brne	.-6      	; 0xef6 <TIMER_Init+0x2c>
     efc:	08 95       	ret

00000efe <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     f08:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <_timer+0x4>
     f0c:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <_timer+0x5>
     f10:	67 2b       	or	r22, r23
     f12:	09 f4       	brne	.+2      	; 0xf16 <TIMER_Create+0x18>
     f14:	49 c0       	rjmp	.+146    	; 0xfa8 <TIMER_Create+0xaa>
     f16:	e6 e5       	ldi	r30, 0x56	; 86
     f18:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     f1a:	a1 e0       	ldi	r26, 0x01	; 1
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     f1e:	c5 85       	ldd	r28, Z+13	; 0x0d
     f20:	d6 85       	ldd	r29, Z+14	; 0x0e
     f22:	cd 2b       	or	r28, r29
     f24:	09 f4       	brne	.+2      	; 0xf28 <TIMER_Create+0x2a>
     f26:	42 c0       	rjmp	.+132    	; 0xfac <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     f28:	11 96       	adiw	r26, 0x01	; 1
     f2a:	39 96       	adiw	r30, 0x09	; 9
     f2c:	a8 30       	cpi	r26, 0x08	; 8
     f2e:	b1 05       	cpc	r27, r1
     f30:	b1 f7       	brne	.-20     	; 0xf1e <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	3f c0       	rjmp	.+126    	; 0xfb6 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
     f38:	fd 01       	movw	r30, r26
     f3a:	ee 0f       	add	r30, r30
     f3c:	ff 1f       	adc	r31, r31
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	ea 0f       	add	r30, r26
     f48:	fb 1f       	adc	r31, r27
     f4a:	ea 5a       	subi	r30, 0xAA	; 170
     f4c:	fd 4f       	sbci	r31, 0xFD	; 253
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	82 83       	std	Z+2, r24	; 0x02
     f52:	0d c0       	rjmp	.+26     	; 0xf6e <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     f54:	fd 01       	movw	r30, r26
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	ee 0f       	add	r30, r30
     f5c:	ff 1f       	adc	r31, r31
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	ea 0f       	add	r30, r26
     f64:	fb 1f       	adc	r31, r27
     f66:	ea 5a       	subi	r30, 0xAA	; 170
     f68:	fd 4f       	sbci	r31, 0xFD	; 253
     f6a:	13 82       	std	Z+3, r1	; 0x03
     f6c:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     f6e:	fd 01       	movw	r30, r26
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ea 0f       	add	r30, r26
     f7e:	fb 1f       	adc	r31, r27
     f80:	ea 5a       	subi	r30, 0xAA	; 170
     f82:	fd 4f       	sbci	r31, 0xFD	; 253
     f84:	55 83       	std	Z+5, r21	; 0x05
     f86:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     f88:	37 83       	std	Z+7, r19	; 0x07
     f8a:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
     f8c:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <_timer_tick>
     f90:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <_timer_tick+0x1>
     f94:	82 0f       	add	r24, r18
     f96:	93 1f       	adc	r25, r19
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
			_timer[i].state = READY;
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa0:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     fa2:	8a 2f       	mov	r24, r26
     fa4:	9b 2f       	mov	r25, r27
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     fa8:	a0 e0       	ldi	r26, 0x00	; 0
     faa:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fac:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fae:	f8 94       	cli
		{
			if (periodic != 0) 
     fb0:	01 2b       	or	r16, r17
     fb2:	11 f6       	brne	.-124    	; 0xf38 <TIMER_Create+0x3a>
     fb4:	cf cf       	rjmp	.-98     	; 0xf54 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	08 95       	ret

00000fc0 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     fc0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     fc4:	83 e3       	ldi	r24, 0x33	; 51
     fc6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     fca:	e9 ec       	ldi	r30, 0xC9	; 201
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 61       	ori	r24, 0x18	; 24
     fd2:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     fd4:	ea ec       	ldi	r30, 0xCA	; 202
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	86 60       	ori	r24, 0x06	; 6
     fdc:	80 83       	st	Z, r24
     fde:	08 95       	ret

00000fe0 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     fe0:	e8 ec       	ldi	r30, 0xC8	; 200
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	90 81       	ld	r25, Z
     fe6:	95 ff       	sbrs	r25, 5
     fe8:	fd cf       	rjmp	.-6      	; 0xfe4 <UART_SendChar+0x4>
	UDR1 = c;
     fea:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     fee:	08 95       	ret

00000ff0 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     ff6:	88 81       	ld	r24, Y
     ff8:	88 23       	and	r24, r24
     ffa:	29 f0       	breq	.+10     	; 0x1006 <UART_SendString+0x16>
     ffc:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
     ffe:	f0 df       	rcall	.-32     	; 0xfe0 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1000:	89 91       	ld	r24, Y+
    1002:	81 11       	cpse	r24, r1
    1004:	fc cf       	rjmp	.-8      	; 0xffe <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <malloc>:
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	91 05       	cpc	r25, r1
    1018:	10 f4       	brcc	.+4      	; 0x101e <malloc+0x12>
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <__flp>
    1022:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <__flp+0x1>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	a0 e0       	ldi	r26, 0x00	; 0
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	19 f1       	breq	.+70     	; 0x1078 <malloc+0x6c>
    1032:	40 81       	ld	r20, Z
    1034:	51 81       	ldd	r21, Z+1	; 0x01
    1036:	02 81       	ldd	r16, Z+2	; 0x02
    1038:	13 81       	ldd	r17, Z+3	; 0x03
    103a:	48 17       	cp	r20, r24
    103c:	59 07       	cpc	r21, r25
    103e:	c8 f0       	brcs	.+50     	; 0x1072 <malloc+0x66>
    1040:	84 17       	cp	r24, r20
    1042:	95 07       	cpc	r25, r21
    1044:	69 f4       	brne	.+26     	; 0x1060 <malloc+0x54>
    1046:	10 97       	sbiw	r26, 0x00	; 0
    1048:	31 f0       	breq	.+12     	; 0x1056 <malloc+0x4a>
    104a:	12 96       	adiw	r26, 0x02	; 2
    104c:	0c 93       	st	X, r16
    104e:	12 97       	sbiw	r26, 0x02	; 2
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	1c 93       	st	X, r17
    1054:	27 c0       	rjmp	.+78     	; 0x10a4 <malloc+0x98>
    1056:	00 93 af 02 	sts	0x02AF, r16	; 0x8002af <__flp>
    105a:	10 93 b0 02 	sts	0x02B0, r17	; 0x8002b0 <__flp+0x1>
    105e:	22 c0       	rjmp	.+68     	; 0x10a4 <malloc+0x98>
    1060:	21 15       	cp	r18, r1
    1062:	31 05       	cpc	r19, r1
    1064:	19 f0       	breq	.+6      	; 0x106c <malloc+0x60>
    1066:	42 17       	cp	r20, r18
    1068:	53 07       	cpc	r21, r19
    106a:	18 f4       	brcc	.+6      	; 0x1072 <malloc+0x66>
    106c:	9a 01       	movw	r18, r20
    106e:	bd 01       	movw	r22, r26
    1070:	ef 01       	movw	r28, r30
    1072:	df 01       	movw	r26, r30
    1074:	f8 01       	movw	r30, r16
    1076:	db cf       	rjmp	.-74     	; 0x102e <malloc+0x22>
    1078:	21 15       	cp	r18, r1
    107a:	31 05       	cpc	r19, r1
    107c:	f9 f0       	breq	.+62     	; 0x10bc <malloc+0xb0>
    107e:	28 1b       	sub	r18, r24
    1080:	39 0b       	sbc	r19, r25
    1082:	24 30       	cpi	r18, 0x04	; 4
    1084:	31 05       	cpc	r19, r1
    1086:	80 f4       	brcc	.+32     	; 0x10a8 <malloc+0x9c>
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	61 15       	cp	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	21 f0       	breq	.+8      	; 0x109a <malloc+0x8e>
    1092:	fb 01       	movw	r30, r22
    1094:	93 83       	std	Z+3, r25	; 0x03
    1096:	82 83       	std	Z+2, r24	; 0x02
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <malloc+0x96>
    109a:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <__flp+0x1>
    109e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <__flp>
    10a2:	fe 01       	movw	r30, r28
    10a4:	32 96       	adiw	r30, 0x02	; 2
    10a6:	44 c0       	rjmp	.+136    	; 0x1130 <malloc+0x124>
    10a8:	fe 01       	movw	r30, r28
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	81 93       	st	Z+, r24
    10b0:	91 93       	st	Z+, r25
    10b2:	22 50       	subi	r18, 0x02	; 2
    10b4:	31 09       	sbc	r19, r1
    10b6:	39 83       	std	Y+1, r19	; 0x01
    10b8:	28 83       	st	Y, r18
    10ba:	3a c0       	rjmp	.+116    	; 0x1130 <malloc+0x124>
    10bc:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    10c0:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    10c4:	23 2b       	or	r18, r19
    10c6:	41 f4       	brne	.+16     	; 0x10d8 <malloc+0xcc>
    10c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10d0:	30 93 ae 02 	sts	0x02AE, r19	; 0x8002ae <__brkval+0x1>
    10d4:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <__brkval>
    10d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10e0:	21 15       	cp	r18, r1
    10e2:	31 05       	cpc	r19, r1
    10e4:	41 f4       	brne	.+16     	; 0x10f6 <malloc+0xea>
    10e6:	2d b7       	in	r18, 0x3d	; 61
    10e8:	3e b7       	in	r19, 0x3e	; 62
    10ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10f2:	24 1b       	sub	r18, r20
    10f4:	35 0b       	sbc	r19, r21
    10f6:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <__brkval>
    10fa:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <__brkval+0x1>
    10fe:	e2 17       	cp	r30, r18
    1100:	f3 07       	cpc	r31, r19
    1102:	a0 f4       	brcc	.+40     	; 0x112c <malloc+0x120>
    1104:	2e 1b       	sub	r18, r30
    1106:	3f 0b       	sbc	r19, r31
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	78 f0       	brcs	.+30     	; 0x112c <malloc+0x120>
    110e:	ac 01       	movw	r20, r24
    1110:	4e 5f       	subi	r20, 0xFE	; 254
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	24 17       	cp	r18, r20
    1116:	35 07       	cpc	r19, r21
    1118:	48 f0       	brcs	.+18     	; 0x112c <malloc+0x120>
    111a:	4e 0f       	add	r20, r30
    111c:	5f 1f       	adc	r21, r31
    111e:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <__brkval+0x1>
    1122:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <__brkval>
    1126:	81 93       	st	Z+, r24
    1128:	91 93       	st	Z+, r25
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <malloc+0x124>
    112c:	e0 e0       	ldi	r30, 0x00	; 0
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	cf 01       	movw	r24, r30
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <free>:
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	09 f4       	brne	.+2      	; 0x1146 <free+0xa>
    1144:	81 c0       	rjmp	.+258    	; 0x1248 <free+0x10c>
    1146:	fc 01       	movw	r30, r24
    1148:	32 97       	sbiw	r30, 0x02	; 2
    114a:	13 82       	std	Z+3, r1	; 0x03
    114c:	12 82       	std	Z+2, r1	; 0x02
    114e:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <__flp>
    1152:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <__flp+0x1>
    1156:	10 97       	sbiw	r26, 0x00	; 0
    1158:	81 f4       	brne	.+32     	; 0x117a <free+0x3e>
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	82 0f       	add	r24, r18
    1160:	93 1f       	adc	r25, r19
    1162:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    1166:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    116a:	28 17       	cp	r18, r24
    116c:	39 07       	cpc	r19, r25
    116e:	51 f5       	brne	.+84     	; 0x11c4 <free+0x88>
    1170:	f0 93 ae 02 	sts	0x02AE, r31	; 0x8002ae <__brkval+0x1>
    1174:	e0 93 ad 02 	sts	0x02AD, r30	; 0x8002ad <__brkval>
    1178:	67 c0       	rjmp	.+206    	; 0x1248 <free+0x10c>
    117a:	ed 01       	movw	r28, r26
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	ce 17       	cp	r28, r30
    1182:	df 07       	cpc	r29, r31
    1184:	40 f4       	brcc	.+16     	; 0x1196 <free+0x5a>
    1186:	4a 81       	ldd	r20, Y+2	; 0x02
    1188:	5b 81       	ldd	r21, Y+3	; 0x03
    118a:	9e 01       	movw	r18, r28
    118c:	41 15       	cp	r20, r1
    118e:	51 05       	cpc	r21, r1
    1190:	f1 f0       	breq	.+60     	; 0x11ce <free+0x92>
    1192:	ea 01       	movw	r28, r20
    1194:	f5 cf       	rjmp	.-22     	; 0x1180 <free+0x44>
    1196:	d3 83       	std	Z+3, r29	; 0x03
    1198:	c2 83       	std	Z+2, r28	; 0x02
    119a:	40 81       	ld	r20, Z
    119c:	51 81       	ldd	r21, Z+1	; 0x01
    119e:	84 0f       	add	r24, r20
    11a0:	95 1f       	adc	r25, r21
    11a2:	c8 17       	cp	r28, r24
    11a4:	d9 07       	cpc	r29, r25
    11a6:	59 f4       	brne	.+22     	; 0x11be <free+0x82>
    11a8:	88 81       	ld	r24, Y
    11aa:	99 81       	ldd	r25, Y+1	; 0x01
    11ac:	84 0f       	add	r24, r20
    11ae:	95 1f       	adc	r25, r21
    11b0:	02 96       	adiw	r24, 0x02	; 2
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	93 83       	std	Z+3, r25	; 0x03
    11bc:	82 83       	std	Z+2, r24	; 0x02
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	29 f4       	brne	.+10     	; 0x11ce <free+0x92>
    11c4:	f0 93 b0 02 	sts	0x02B0, r31	; 0x8002b0 <__flp+0x1>
    11c8:	e0 93 af 02 	sts	0x02AF, r30	; 0x8002af <__flp>
    11cc:	3d c0       	rjmp	.+122    	; 0x1248 <free+0x10c>
    11ce:	e9 01       	movw	r28, r18
    11d0:	fb 83       	std	Y+3, r31	; 0x03
    11d2:	ea 83       	std	Y+2, r30	; 0x02
    11d4:	49 91       	ld	r20, Y+
    11d6:	59 91       	ld	r21, Y+
    11d8:	c4 0f       	add	r28, r20
    11da:	d5 1f       	adc	r29, r21
    11dc:	ec 17       	cp	r30, r28
    11de:	fd 07       	cpc	r31, r29
    11e0:	61 f4       	brne	.+24     	; 0x11fa <free+0xbe>
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	84 0f       	add	r24, r20
    11e8:	95 1f       	adc	r25, r21
    11ea:	02 96       	adiw	r24, 0x02	; 2
    11ec:	e9 01       	movw	r28, r18
    11ee:	99 83       	std	Y+1, r25	; 0x01
    11f0:	88 83       	st	Y, r24
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	9b 83       	std	Y+3, r25	; 0x03
    11f8:	8a 83       	std	Y+2, r24	; 0x02
    11fa:	e0 e0       	ldi	r30, 0x00	; 0
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	12 96       	adiw	r26, 0x02	; 2
    1200:	8d 91       	ld	r24, X+
    1202:	9c 91       	ld	r25, X
    1204:	13 97       	sbiw	r26, 0x03	; 3
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	19 f0       	breq	.+6      	; 0x1210 <free+0xd4>
    120a:	fd 01       	movw	r30, r26
    120c:	dc 01       	movw	r26, r24
    120e:	f7 cf       	rjmp	.-18     	; 0x11fe <free+0xc2>
    1210:	8d 91       	ld	r24, X+
    1212:	9c 91       	ld	r25, X
    1214:	11 97       	sbiw	r26, 0x01	; 1
    1216:	9d 01       	movw	r18, r26
    1218:	2e 5f       	subi	r18, 0xFE	; 254
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    1224:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    1228:	28 17       	cp	r18, r24
    122a:	39 07       	cpc	r19, r25
    122c:	69 f4       	brne	.+26     	; 0x1248 <free+0x10c>
    122e:	30 97       	sbiw	r30, 0x00	; 0
    1230:	29 f4       	brne	.+10     	; 0x123c <free+0x100>
    1232:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__flp+0x1>
    1236:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <__flp>
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <free+0x104>
    123c:	13 82       	std	Z+3, r1	; 0x03
    123e:	12 82       	std	Z+2, r1	; 0x02
    1240:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <__brkval+0x1>
    1244:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <__brkval>
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <sprintf>:
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2e 97       	sbiw	r28, 0x0e	; 14
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	0d 89       	ldd	r16, Y+21	; 0x15
    1268:	1e 89       	ldd	r17, Y+22	; 0x16
    126a:	86 e0       	ldi	r24, 0x06	; 6
    126c:	8c 83       	std	Y+4, r24	; 0x04
    126e:	1a 83       	std	Y+2, r17	; 0x02
    1270:	09 83       	std	Y+1, r16	; 0x01
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	9f e7       	ldi	r25, 0x7F	; 127
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	ae 01       	movw	r20, r28
    127c:	47 5e       	subi	r20, 0xE7	; 231
    127e:	5f 4f       	sbci	r21, 0xFF	; 255
    1280:	6f 89       	ldd	r22, Y+23	; 0x17
    1282:	78 8d       	ldd	r23, Y+24	; 0x18
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	10 d0       	rcall	.+32     	; 0x12aa <vfprintf>
    128a:	ef 81       	ldd	r30, Y+7	; 0x07
    128c:	f8 85       	ldd	r31, Y+8	; 0x08
    128e:	e0 0f       	add	r30, r16
    1290:	f1 1f       	adc	r31, r17
    1292:	10 82       	st	Z, r1
    1294:	2e 96       	adiw	r28, 0x0e	; 14
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <vfprintf>:
    12aa:	2f 92       	push	r2
    12ac:	3f 92       	push	r3
    12ae:	4f 92       	push	r4
    12b0:	5f 92       	push	r5
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	2b 97       	sbiw	r28, 0x0b	; 11
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	6c 01       	movw	r12, r24
    12e0:	7b 01       	movw	r14, r22
    12e2:	8a 01       	movw	r16, r20
    12e4:	fc 01       	movw	r30, r24
    12e6:	17 82       	std	Z+7, r1	; 0x07
    12e8:	16 82       	std	Z+6, r1	; 0x06
    12ea:	83 81       	ldd	r24, Z+3	; 0x03
    12ec:	81 ff       	sbrs	r24, 1
    12ee:	bf c1       	rjmp	.+894    	; 0x166e <vfprintf+0x3c4>
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	3c 01       	movw	r6, r24
    12f6:	f6 01       	movw	r30, r12
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	f7 01       	movw	r30, r14
    12fc:	93 fd       	sbrc	r25, 3
    12fe:	85 91       	lpm	r24, Z+
    1300:	93 ff       	sbrs	r25, 3
    1302:	81 91       	ld	r24, Z+
    1304:	7f 01       	movw	r14, r30
    1306:	88 23       	and	r24, r24
    1308:	09 f4       	brne	.+2      	; 0x130c <vfprintf+0x62>
    130a:	ad c1       	rjmp	.+858    	; 0x1666 <vfprintf+0x3bc>
    130c:	85 32       	cpi	r24, 0x25	; 37
    130e:	39 f4       	brne	.+14     	; 0x131e <vfprintf+0x74>
    1310:	93 fd       	sbrc	r25, 3
    1312:	85 91       	lpm	r24, Z+
    1314:	93 ff       	sbrs	r25, 3
    1316:	81 91       	ld	r24, Z+
    1318:	7f 01       	movw	r14, r30
    131a:	85 32       	cpi	r24, 0x25	; 37
    131c:	21 f4       	brne	.+8      	; 0x1326 <vfprintf+0x7c>
    131e:	b6 01       	movw	r22, r12
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	d6 d1       	rcall	.+940    	; 0x16d0 <fputc>
    1324:	e8 cf       	rjmp	.-48     	; 0x12f6 <vfprintf+0x4c>
    1326:	91 2c       	mov	r9, r1
    1328:	21 2c       	mov	r2, r1
    132a:	31 2c       	mov	r3, r1
    132c:	ff e1       	ldi	r31, 0x1F	; 31
    132e:	f3 15       	cp	r31, r3
    1330:	d8 f0       	brcs	.+54     	; 0x1368 <vfprintf+0xbe>
    1332:	8b 32       	cpi	r24, 0x2B	; 43
    1334:	79 f0       	breq	.+30     	; 0x1354 <vfprintf+0xaa>
    1336:	38 f4       	brcc	.+14     	; 0x1346 <vfprintf+0x9c>
    1338:	80 32       	cpi	r24, 0x20	; 32
    133a:	79 f0       	breq	.+30     	; 0x135a <vfprintf+0xb0>
    133c:	83 32       	cpi	r24, 0x23	; 35
    133e:	a1 f4       	brne	.+40     	; 0x1368 <vfprintf+0xbe>
    1340:	23 2d       	mov	r18, r3
    1342:	20 61       	ori	r18, 0x10	; 16
    1344:	1d c0       	rjmp	.+58     	; 0x1380 <vfprintf+0xd6>
    1346:	8d 32       	cpi	r24, 0x2D	; 45
    1348:	61 f0       	breq	.+24     	; 0x1362 <vfprintf+0xb8>
    134a:	80 33       	cpi	r24, 0x30	; 48
    134c:	69 f4       	brne	.+26     	; 0x1368 <vfprintf+0xbe>
    134e:	23 2d       	mov	r18, r3
    1350:	21 60       	ori	r18, 0x01	; 1
    1352:	16 c0       	rjmp	.+44     	; 0x1380 <vfprintf+0xd6>
    1354:	83 2d       	mov	r24, r3
    1356:	82 60       	ori	r24, 0x02	; 2
    1358:	38 2e       	mov	r3, r24
    135a:	e3 2d       	mov	r30, r3
    135c:	e4 60       	ori	r30, 0x04	; 4
    135e:	3e 2e       	mov	r3, r30
    1360:	2a c0       	rjmp	.+84     	; 0x13b6 <vfprintf+0x10c>
    1362:	f3 2d       	mov	r31, r3
    1364:	f8 60       	ori	r31, 0x08	; 8
    1366:	1d c0       	rjmp	.+58     	; 0x13a2 <vfprintf+0xf8>
    1368:	37 fc       	sbrc	r3, 7
    136a:	2d c0       	rjmp	.+90     	; 0x13c6 <vfprintf+0x11c>
    136c:	20 ed       	ldi	r18, 0xD0	; 208
    136e:	28 0f       	add	r18, r24
    1370:	2a 30       	cpi	r18, 0x0A	; 10
    1372:	40 f0       	brcs	.+16     	; 0x1384 <vfprintf+0xda>
    1374:	8e 32       	cpi	r24, 0x2E	; 46
    1376:	b9 f4       	brne	.+46     	; 0x13a6 <vfprintf+0xfc>
    1378:	36 fc       	sbrc	r3, 6
    137a:	75 c1       	rjmp	.+746    	; 0x1666 <vfprintf+0x3bc>
    137c:	23 2d       	mov	r18, r3
    137e:	20 64       	ori	r18, 0x40	; 64
    1380:	32 2e       	mov	r3, r18
    1382:	19 c0       	rjmp	.+50     	; 0x13b6 <vfprintf+0x10c>
    1384:	36 fe       	sbrs	r3, 6
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0xea>
    1388:	8a e0       	ldi	r24, 0x0A	; 10
    138a:	98 9e       	mul	r9, r24
    138c:	20 0d       	add	r18, r0
    138e:	11 24       	eor	r1, r1
    1390:	92 2e       	mov	r9, r18
    1392:	11 c0       	rjmp	.+34     	; 0x13b6 <vfprintf+0x10c>
    1394:	ea e0       	ldi	r30, 0x0A	; 10
    1396:	2e 9e       	mul	r2, r30
    1398:	20 0d       	add	r18, r0
    139a:	11 24       	eor	r1, r1
    139c:	22 2e       	mov	r2, r18
    139e:	f3 2d       	mov	r31, r3
    13a0:	f0 62       	ori	r31, 0x20	; 32
    13a2:	3f 2e       	mov	r3, r31
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <vfprintf+0x10c>
    13a6:	8c 36       	cpi	r24, 0x6C	; 108
    13a8:	21 f4       	brne	.+8      	; 0x13b2 <vfprintf+0x108>
    13aa:	83 2d       	mov	r24, r3
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	38 2e       	mov	r3, r24
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x10c>
    13b2:	88 36       	cpi	r24, 0x68	; 104
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <vfprintf+0x11c>
    13b6:	f7 01       	movw	r30, r14
    13b8:	93 fd       	sbrc	r25, 3
    13ba:	85 91       	lpm	r24, Z+
    13bc:	93 ff       	sbrs	r25, 3
    13be:	81 91       	ld	r24, Z+
    13c0:	7f 01       	movw	r14, r30
    13c2:	81 11       	cpse	r24, r1
    13c4:	b3 cf       	rjmp	.-154    	; 0x132c <vfprintf+0x82>
    13c6:	98 2f       	mov	r25, r24
    13c8:	9f 7d       	andi	r25, 0xDF	; 223
    13ca:	95 54       	subi	r25, 0x45	; 69
    13cc:	93 30       	cpi	r25, 0x03	; 3
    13ce:	28 f4       	brcc	.+10     	; 0x13da <vfprintf+0x130>
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	9f e3       	ldi	r25, 0x3F	; 63
    13d6:	99 83       	std	Y+1, r25	; 0x01
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <vfprintf+0x14a>
    13da:	83 36       	cpi	r24, 0x63	; 99
    13dc:	31 f0       	breq	.+12     	; 0x13ea <vfprintf+0x140>
    13de:	83 37       	cpi	r24, 0x73	; 115
    13e0:	71 f0       	breq	.+28     	; 0x13fe <vfprintf+0x154>
    13e2:	83 35       	cpi	r24, 0x53	; 83
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <vfprintf+0x13e>
    13e6:	55 c0       	rjmp	.+170    	; 0x1492 <vfprintf+0x1e8>
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <vfprintf+0x180>
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 81       	ld	r24, Z
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	0e 5f       	subi	r16, 0xFE	; 254
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	88 24       	eor	r8, r8
    13f6:	83 94       	inc	r8
    13f8:	91 2c       	mov	r9, r1
    13fa:	53 01       	movw	r10, r6
    13fc:	12 c0       	rjmp	.+36     	; 0x1422 <vfprintf+0x178>
    13fe:	28 01       	movw	r4, r16
    1400:	f2 e0       	ldi	r31, 0x02	; 2
    1402:	4f 0e       	add	r4, r31
    1404:	51 1c       	adc	r5, r1
    1406:	f8 01       	movw	r30, r16
    1408:	a0 80       	ld	r10, Z
    140a:	b1 80       	ldd	r11, Z+1	; 0x01
    140c:	36 fe       	sbrs	r3, 6
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x16c>
    1410:	69 2d       	mov	r22, r9
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x170>
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	7f ef       	ldi	r23, 0xFF	; 255
    141a:	c5 01       	movw	r24, r10
    141c:	4e d1       	rcall	.+668    	; 0x16ba <strnlen>
    141e:	4c 01       	movw	r8, r24
    1420:	82 01       	movw	r16, r4
    1422:	f3 2d       	mov	r31, r3
    1424:	ff 77       	andi	r31, 0x7F	; 127
    1426:	3f 2e       	mov	r3, r31
    1428:	15 c0       	rjmp	.+42     	; 0x1454 <vfprintf+0x1aa>
    142a:	28 01       	movw	r4, r16
    142c:	22 e0       	ldi	r18, 0x02	; 2
    142e:	42 0e       	add	r4, r18
    1430:	51 1c       	adc	r5, r1
    1432:	f8 01       	movw	r30, r16
    1434:	a0 80       	ld	r10, Z
    1436:	b1 80       	ldd	r11, Z+1	; 0x01
    1438:	36 fe       	sbrs	r3, 6
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <vfprintf+0x198>
    143c:	69 2d       	mov	r22, r9
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x19c>
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f ef       	ldi	r23, 0xFF	; 255
    1446:	c5 01       	movw	r24, r10
    1448:	2d d1       	rcall	.+602    	; 0x16a4 <strnlen_P>
    144a:	4c 01       	movw	r8, r24
    144c:	f3 2d       	mov	r31, r3
    144e:	f0 68       	ori	r31, 0x80	; 128
    1450:	3f 2e       	mov	r3, r31
    1452:	82 01       	movw	r16, r4
    1454:	33 fc       	sbrc	r3, 3
    1456:	19 c0       	rjmp	.+50     	; 0x148a <vfprintf+0x1e0>
    1458:	82 2d       	mov	r24, r2
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	88 16       	cp	r8, r24
    145e:	99 06       	cpc	r9, r25
    1460:	a0 f4       	brcc	.+40     	; 0x148a <vfprintf+0x1e0>
    1462:	b6 01       	movw	r22, r12
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	33 d1       	rcall	.+614    	; 0x16d0 <fputc>
    146a:	2a 94       	dec	r2
    146c:	f5 cf       	rjmp	.-22     	; 0x1458 <vfprintf+0x1ae>
    146e:	f5 01       	movw	r30, r10
    1470:	37 fc       	sbrc	r3, 7
    1472:	85 91       	lpm	r24, Z+
    1474:	37 fe       	sbrs	r3, 7
    1476:	81 91       	ld	r24, Z+
    1478:	5f 01       	movw	r10, r30
    147a:	b6 01       	movw	r22, r12
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	28 d1       	rcall	.+592    	; 0x16d0 <fputc>
    1480:	21 10       	cpse	r2, r1
    1482:	2a 94       	dec	r2
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	82 1a       	sub	r8, r18
    1488:	91 08       	sbc	r9, r1
    148a:	81 14       	cp	r8, r1
    148c:	91 04       	cpc	r9, r1
    148e:	79 f7       	brne	.-34     	; 0x146e <vfprintf+0x1c4>
    1490:	e1 c0       	rjmp	.+450    	; 0x1654 <vfprintf+0x3aa>
    1492:	84 36       	cpi	r24, 0x64	; 100
    1494:	11 f0       	breq	.+4      	; 0x149a <vfprintf+0x1f0>
    1496:	89 36       	cpi	r24, 0x69	; 105
    1498:	39 f5       	brne	.+78     	; 0x14e8 <vfprintf+0x23e>
    149a:	f8 01       	movw	r30, r16
    149c:	37 fe       	sbrs	r3, 7
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <vfprintf+0x204>
    14a0:	60 81       	ld	r22, Z
    14a2:	71 81       	ldd	r23, Z+1	; 0x01
    14a4:	82 81       	ldd	r24, Z+2	; 0x02
    14a6:	93 81       	ldd	r25, Z+3	; 0x03
    14a8:	0c 5f       	subi	r16, 0xFC	; 252
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <vfprintf+0x214>
    14ae:	60 81       	ld	r22, Z
    14b0:	71 81       	ldd	r23, Z+1	; 0x01
    14b2:	07 2e       	mov	r0, r23
    14b4:	00 0c       	add	r0, r0
    14b6:	88 0b       	sbc	r24, r24
    14b8:	99 0b       	sbc	r25, r25
    14ba:	0e 5f       	subi	r16, 0xFE	; 254
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	f3 2d       	mov	r31, r3
    14c0:	ff 76       	andi	r31, 0x6F	; 111
    14c2:	3f 2e       	mov	r3, r31
    14c4:	97 ff       	sbrs	r25, 7
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <vfprintf+0x230>
    14c8:	90 95       	com	r25
    14ca:	80 95       	com	r24
    14cc:	70 95       	com	r23
    14ce:	61 95       	neg	r22
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	f0 68       	ori	r31, 0x80	; 128
    14d8:	3f 2e       	mov	r3, r31
    14da:	2a e0       	ldi	r18, 0x0A	; 10
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	a3 01       	movw	r20, r6
    14e0:	33 d1       	rcall	.+614    	; 0x1748 <__ultoa_invert>
    14e2:	88 2e       	mov	r8, r24
    14e4:	86 18       	sub	r8, r6
    14e6:	44 c0       	rjmp	.+136    	; 0x1570 <vfprintf+0x2c6>
    14e8:	85 37       	cpi	r24, 0x75	; 117
    14ea:	31 f4       	brne	.+12     	; 0x14f8 <vfprintf+0x24e>
    14ec:	23 2d       	mov	r18, r3
    14ee:	2f 7e       	andi	r18, 0xEF	; 239
    14f0:	b2 2e       	mov	r11, r18
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	25 c0       	rjmp	.+74     	; 0x1542 <vfprintf+0x298>
    14f8:	93 2d       	mov	r25, r3
    14fa:	99 7f       	andi	r25, 0xF9	; 249
    14fc:	b9 2e       	mov	r11, r25
    14fe:	8f 36       	cpi	r24, 0x6F	; 111
    1500:	c1 f0       	breq	.+48     	; 0x1532 <vfprintf+0x288>
    1502:	18 f4       	brcc	.+6      	; 0x150a <vfprintf+0x260>
    1504:	88 35       	cpi	r24, 0x58	; 88
    1506:	79 f0       	breq	.+30     	; 0x1526 <vfprintf+0x27c>
    1508:	ae c0       	rjmp	.+348    	; 0x1666 <vfprintf+0x3bc>
    150a:	80 37       	cpi	r24, 0x70	; 112
    150c:	19 f0       	breq	.+6      	; 0x1514 <vfprintf+0x26a>
    150e:	88 37       	cpi	r24, 0x78	; 120
    1510:	21 f0       	breq	.+8      	; 0x151a <vfprintf+0x270>
    1512:	a9 c0       	rjmp	.+338    	; 0x1666 <vfprintf+0x3bc>
    1514:	e9 2f       	mov	r30, r25
    1516:	e0 61       	ori	r30, 0x10	; 16
    1518:	be 2e       	mov	r11, r30
    151a:	b4 fe       	sbrs	r11, 4
    151c:	0d c0       	rjmp	.+26     	; 0x1538 <vfprintf+0x28e>
    151e:	fb 2d       	mov	r31, r11
    1520:	f4 60       	ori	r31, 0x04	; 4
    1522:	bf 2e       	mov	r11, r31
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <vfprintf+0x28e>
    1526:	34 fe       	sbrs	r3, 4
    1528:	0a c0       	rjmp	.+20     	; 0x153e <vfprintf+0x294>
    152a:	29 2f       	mov	r18, r25
    152c:	26 60       	ori	r18, 0x06	; 6
    152e:	b2 2e       	mov	r11, r18
    1530:	06 c0       	rjmp	.+12     	; 0x153e <vfprintf+0x294>
    1532:	28 e0       	ldi	r18, 0x08	; 8
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <vfprintf+0x298>
    1538:	20 e1       	ldi	r18, 0x10	; 16
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <vfprintf+0x298>
    153e:	20 e1       	ldi	r18, 0x10	; 16
    1540:	32 e0       	ldi	r19, 0x02	; 2
    1542:	f8 01       	movw	r30, r16
    1544:	b7 fe       	sbrs	r11, 7
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <vfprintf+0x2ac>
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	0c 5f       	subi	r16, 0xFC	; 252
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0x2b8>
    1556:	60 81       	ld	r22, Z
    1558:	71 81       	ldd	r23, Z+1	; 0x01
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 5f       	subi	r16, 0xFE	; 254
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	a3 01       	movw	r20, r6
    1564:	f1 d0       	rcall	.+482    	; 0x1748 <__ultoa_invert>
    1566:	88 2e       	mov	r8, r24
    1568:	86 18       	sub	r8, r6
    156a:	fb 2d       	mov	r31, r11
    156c:	ff 77       	andi	r31, 0x7F	; 127
    156e:	3f 2e       	mov	r3, r31
    1570:	36 fe       	sbrs	r3, 6
    1572:	0d c0       	rjmp	.+26     	; 0x158e <vfprintf+0x2e4>
    1574:	23 2d       	mov	r18, r3
    1576:	2e 7f       	andi	r18, 0xFE	; 254
    1578:	a2 2e       	mov	r10, r18
    157a:	89 14       	cp	r8, r9
    157c:	58 f4       	brcc	.+22     	; 0x1594 <vfprintf+0x2ea>
    157e:	34 fe       	sbrs	r3, 4
    1580:	0b c0       	rjmp	.+22     	; 0x1598 <vfprintf+0x2ee>
    1582:	32 fc       	sbrc	r3, 2
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <vfprintf+0x2ee>
    1586:	83 2d       	mov	r24, r3
    1588:	8e 7e       	andi	r24, 0xEE	; 238
    158a:	a8 2e       	mov	r10, r24
    158c:	05 c0       	rjmp	.+10     	; 0x1598 <vfprintf+0x2ee>
    158e:	b8 2c       	mov	r11, r8
    1590:	a3 2c       	mov	r10, r3
    1592:	03 c0       	rjmp	.+6      	; 0x159a <vfprintf+0x2f0>
    1594:	b8 2c       	mov	r11, r8
    1596:	01 c0       	rjmp	.+2      	; 0x159a <vfprintf+0x2f0>
    1598:	b9 2c       	mov	r11, r9
    159a:	a4 fe       	sbrs	r10, 4
    159c:	0f c0       	rjmp	.+30     	; 0x15bc <vfprintf+0x312>
    159e:	fe 01       	movw	r30, r28
    15a0:	e8 0d       	add	r30, r8
    15a2:	f1 1d       	adc	r31, r1
    15a4:	80 81       	ld	r24, Z
    15a6:	80 33       	cpi	r24, 0x30	; 48
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <vfprintf+0x308>
    15aa:	9a 2d       	mov	r25, r10
    15ac:	99 7e       	andi	r25, 0xE9	; 233
    15ae:	a9 2e       	mov	r10, r25
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <vfprintf+0x31a>
    15b2:	a2 fe       	sbrs	r10, 2
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x318>
    15b6:	b3 94       	inc	r11
    15b8:	b3 94       	inc	r11
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <vfprintf+0x31a>
    15bc:	8a 2d       	mov	r24, r10
    15be:	86 78       	andi	r24, 0x86	; 134
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <vfprintf+0x31a>
    15c2:	b3 94       	inc	r11
    15c4:	a3 fc       	sbrc	r10, 3
    15c6:	10 c0       	rjmp	.+32     	; 0x15e8 <vfprintf+0x33e>
    15c8:	a0 fe       	sbrs	r10, 0
    15ca:	06 c0       	rjmp	.+12     	; 0x15d8 <vfprintf+0x32e>
    15cc:	b2 14       	cp	r11, r2
    15ce:	80 f4       	brcc	.+32     	; 0x15f0 <vfprintf+0x346>
    15d0:	28 0c       	add	r2, r8
    15d2:	92 2c       	mov	r9, r2
    15d4:	9b 18       	sub	r9, r11
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <vfprintf+0x348>
    15d8:	b2 14       	cp	r11, r2
    15da:	58 f4       	brcc	.+22     	; 0x15f2 <vfprintf+0x348>
    15dc:	b6 01       	movw	r22, r12
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	76 d0       	rcall	.+236    	; 0x16d0 <fputc>
    15e4:	b3 94       	inc	r11
    15e6:	f8 cf       	rjmp	.-16     	; 0x15d8 <vfprintf+0x32e>
    15e8:	b2 14       	cp	r11, r2
    15ea:	18 f4       	brcc	.+6      	; 0x15f2 <vfprintf+0x348>
    15ec:	2b 18       	sub	r2, r11
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x34a>
    15f0:	98 2c       	mov	r9, r8
    15f2:	21 2c       	mov	r2, r1
    15f4:	a4 fe       	sbrs	r10, 4
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <vfprintf+0x36c>
    15f8:	b6 01       	movw	r22, r12
    15fa:	80 e3       	ldi	r24, 0x30	; 48
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	68 d0       	rcall	.+208    	; 0x16d0 <fputc>
    1600:	a2 fe       	sbrs	r10, 2
    1602:	16 c0       	rjmp	.+44     	; 0x1630 <vfprintf+0x386>
    1604:	a1 fc       	sbrc	r10, 1
    1606:	03 c0       	rjmp	.+6      	; 0x160e <vfprintf+0x364>
    1608:	88 e7       	ldi	r24, 0x78	; 120
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <vfprintf+0x368>
    160e:	88 e5       	ldi	r24, 0x58	; 88
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	b6 01       	movw	r22, r12
    1614:	0c c0       	rjmp	.+24     	; 0x162e <vfprintf+0x384>
    1616:	8a 2d       	mov	r24, r10
    1618:	86 78       	andi	r24, 0x86	; 134
    161a:	51 f0       	breq	.+20     	; 0x1630 <vfprintf+0x386>
    161c:	a1 fe       	sbrs	r10, 1
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x37a>
    1620:	8b e2       	ldi	r24, 0x2B	; 43
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <vfprintf+0x37c>
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	a7 fc       	sbrc	r10, 7
    1628:	8d e2       	ldi	r24, 0x2D	; 45
    162a:	b6 01       	movw	r22, r12
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	50 d0       	rcall	.+160    	; 0x16d0 <fputc>
    1630:	89 14       	cp	r8, r9
    1632:	30 f4       	brcc	.+12     	; 0x1640 <vfprintf+0x396>
    1634:	b6 01       	movw	r22, r12
    1636:	80 e3       	ldi	r24, 0x30	; 48
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	4a d0       	rcall	.+148    	; 0x16d0 <fputc>
    163c:	9a 94       	dec	r9
    163e:	f8 cf       	rjmp	.-16     	; 0x1630 <vfprintf+0x386>
    1640:	8a 94       	dec	r8
    1642:	f3 01       	movw	r30, r6
    1644:	e8 0d       	add	r30, r8
    1646:	f1 1d       	adc	r31, r1
    1648:	80 81       	ld	r24, Z
    164a:	b6 01       	movw	r22, r12
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	40 d0       	rcall	.+128    	; 0x16d0 <fputc>
    1650:	81 10       	cpse	r8, r1
    1652:	f6 cf       	rjmp	.-20     	; 0x1640 <vfprintf+0x396>
    1654:	22 20       	and	r2, r2
    1656:	09 f4       	brne	.+2      	; 0x165a <vfprintf+0x3b0>
    1658:	4e ce       	rjmp	.-868    	; 0x12f6 <vfprintf+0x4c>
    165a:	b6 01       	movw	r22, r12
    165c:	80 e2       	ldi	r24, 0x20	; 32
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	37 d0       	rcall	.+110    	; 0x16d0 <fputc>
    1662:	2a 94       	dec	r2
    1664:	f7 cf       	rjmp	.-18     	; 0x1654 <vfprintf+0x3aa>
    1666:	f6 01       	movw	r30, r12
    1668:	86 81       	ldd	r24, Z+6	; 0x06
    166a:	97 81       	ldd	r25, Z+7	; 0x07
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x3c8>
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	9f ef       	ldi	r25, 0xFF	; 255
    1672:	2b 96       	adiw	r28, 0x0b	; 11
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	9f 90       	pop	r9
    1694:	8f 90       	pop	r8
    1696:	7f 90       	pop	r7
    1698:	6f 90       	pop	r6
    169a:	5f 90       	pop	r5
    169c:	4f 90       	pop	r4
    169e:	3f 90       	pop	r3
    16a0:	2f 90       	pop	r2
    16a2:	08 95       	ret

000016a4 <strnlen_P>:
    16a4:	fc 01       	movw	r30, r24
    16a6:	05 90       	lpm	r0, Z+
    16a8:	61 50       	subi	r22, 0x01	; 1
    16aa:	70 40       	sbci	r23, 0x00	; 0
    16ac:	01 10       	cpse	r0, r1
    16ae:	d8 f7       	brcc	.-10     	; 0x16a6 <strnlen_P+0x2>
    16b0:	80 95       	com	r24
    16b2:	90 95       	com	r25
    16b4:	8e 0f       	add	r24, r30
    16b6:	9f 1f       	adc	r25, r31
    16b8:	08 95       	ret

000016ba <strnlen>:
    16ba:	fc 01       	movw	r30, r24
    16bc:	61 50       	subi	r22, 0x01	; 1
    16be:	70 40       	sbci	r23, 0x00	; 0
    16c0:	01 90       	ld	r0, Z+
    16c2:	01 10       	cpse	r0, r1
    16c4:	d8 f7       	brcc	.-10     	; 0x16bc <strnlen+0x2>
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	8e 0f       	add	r24, r30
    16cc:	9f 1f       	adc	r25, r31
    16ce:	08 95       	ret

000016d0 <fputc>:
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	fb 01       	movw	r30, r22
    16da:	23 81       	ldd	r18, Z+3	; 0x03
    16dc:	21 fd       	sbrc	r18, 1
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <fputc+0x16>
    16e0:	8f ef       	ldi	r24, 0xFF	; 255
    16e2:	9f ef       	ldi	r25, 0xFF	; 255
    16e4:	2c c0       	rjmp	.+88     	; 0x173e <fputc+0x6e>
    16e6:	22 ff       	sbrs	r18, 2
    16e8:	16 c0       	rjmp	.+44     	; 0x1716 <fputc+0x46>
    16ea:	46 81       	ldd	r20, Z+6	; 0x06
    16ec:	57 81       	ldd	r21, Z+7	; 0x07
    16ee:	24 81       	ldd	r18, Z+4	; 0x04
    16f0:	35 81       	ldd	r19, Z+5	; 0x05
    16f2:	42 17       	cp	r20, r18
    16f4:	53 07       	cpc	r21, r19
    16f6:	44 f4       	brge	.+16     	; 0x1708 <fputc+0x38>
    16f8:	a0 81       	ld	r26, Z
    16fa:	b1 81       	ldd	r27, Z+1	; 0x01
    16fc:	9d 01       	movw	r18, r26
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	31 83       	std	Z+1, r19	; 0x01
    1704:	20 83       	st	Z, r18
    1706:	8c 93       	st	X, r24
    1708:	26 81       	ldd	r18, Z+6	; 0x06
    170a:	37 81       	ldd	r19, Z+7	; 0x07
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	37 83       	std	Z+7, r19	; 0x07
    1712:	26 83       	std	Z+6, r18	; 0x06
    1714:	14 c0       	rjmp	.+40     	; 0x173e <fputc+0x6e>
    1716:	8b 01       	movw	r16, r22
    1718:	ec 01       	movw	r28, r24
    171a:	fb 01       	movw	r30, r22
    171c:	00 84       	ldd	r0, Z+8	; 0x08
    171e:	f1 85       	ldd	r31, Z+9	; 0x09
    1720:	e0 2d       	mov	r30, r0
    1722:	09 95       	icall
    1724:	89 2b       	or	r24, r25
    1726:	e1 f6       	brne	.-72     	; 0x16e0 <fputc+0x10>
    1728:	d8 01       	movw	r26, r16
    172a:	16 96       	adiw	r26, 0x06	; 6
    172c:	8d 91       	ld	r24, X+
    172e:	9c 91       	ld	r25, X
    1730:	17 97       	sbiw	r26, 0x07	; 7
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	17 96       	adiw	r26, 0x07	; 7
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24
    173a:	16 97       	sbiw	r26, 0x06	; 6
    173c:	ce 01       	movw	r24, r28
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	08 95       	ret

00001748 <__ultoa_invert>:
    1748:	fa 01       	movw	r30, r20
    174a:	aa 27       	eor	r26, r26
    174c:	28 30       	cpi	r18, 0x08	; 8
    174e:	51 f1       	breq	.+84     	; 0x17a4 <__ultoa_invert+0x5c>
    1750:	20 31       	cpi	r18, 0x10	; 16
    1752:	81 f1       	breq	.+96     	; 0x17b4 <__ultoa_invert+0x6c>
    1754:	e8 94       	clt
    1756:	6f 93       	push	r22
    1758:	6e 7f       	andi	r22, 0xFE	; 254
    175a:	6e 5f       	subi	r22, 0xFE	; 254
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	af 4f       	sbci	r26, 0xFF	; 255
    1764:	b1 e0       	ldi	r27, 0x01	; 1
    1766:	3e d0       	rcall	.+124    	; 0x17e4 <__ultoa_invert+0x9c>
    1768:	b4 e0       	ldi	r27, 0x04	; 4
    176a:	3c d0       	rcall	.+120    	; 0x17e4 <__ultoa_invert+0x9c>
    176c:	67 0f       	add	r22, r23
    176e:	78 1f       	adc	r23, r24
    1770:	89 1f       	adc	r24, r25
    1772:	9a 1f       	adc	r25, r26
    1774:	a1 1d       	adc	r26, r1
    1776:	68 0f       	add	r22, r24
    1778:	79 1f       	adc	r23, r25
    177a:	8a 1f       	adc	r24, r26
    177c:	91 1d       	adc	r25, r1
    177e:	a1 1d       	adc	r26, r1
    1780:	6a 0f       	add	r22, r26
    1782:	71 1d       	adc	r23, r1
    1784:	81 1d       	adc	r24, r1
    1786:	91 1d       	adc	r25, r1
    1788:	a1 1d       	adc	r26, r1
    178a:	20 d0       	rcall	.+64     	; 0x17cc <__ultoa_invert+0x84>
    178c:	09 f4       	brne	.+2      	; 0x1790 <__ultoa_invert+0x48>
    178e:	68 94       	set
    1790:	3f 91       	pop	r19
    1792:	2a e0       	ldi	r18, 0x0A	; 10
    1794:	26 9f       	mul	r18, r22
    1796:	11 24       	eor	r1, r1
    1798:	30 19       	sub	r19, r0
    179a:	30 5d       	subi	r19, 0xD0	; 208
    179c:	31 93       	st	Z+, r19
    179e:	de f6       	brtc	.-74     	; 0x1756 <__ultoa_invert+0xe>
    17a0:	cf 01       	movw	r24, r30
    17a2:	08 95       	ret
    17a4:	46 2f       	mov	r20, r22
    17a6:	47 70       	andi	r20, 0x07	; 7
    17a8:	40 5d       	subi	r20, 0xD0	; 208
    17aa:	41 93       	st	Z+, r20
    17ac:	b3 e0       	ldi	r27, 0x03	; 3
    17ae:	0f d0       	rcall	.+30     	; 0x17ce <__ultoa_invert+0x86>
    17b0:	c9 f7       	brne	.-14     	; 0x17a4 <__ultoa_invert+0x5c>
    17b2:	f6 cf       	rjmp	.-20     	; 0x17a0 <__ultoa_invert+0x58>
    17b4:	46 2f       	mov	r20, r22
    17b6:	4f 70       	andi	r20, 0x0F	; 15
    17b8:	40 5d       	subi	r20, 0xD0	; 208
    17ba:	4a 33       	cpi	r20, 0x3A	; 58
    17bc:	18 f0       	brcs	.+6      	; 0x17c4 <__ultoa_invert+0x7c>
    17be:	49 5d       	subi	r20, 0xD9	; 217
    17c0:	31 fd       	sbrc	r19, 1
    17c2:	40 52       	subi	r20, 0x20	; 32
    17c4:	41 93       	st	Z+, r20
    17c6:	02 d0       	rcall	.+4      	; 0x17cc <__ultoa_invert+0x84>
    17c8:	a9 f7       	brne	.-22     	; 0x17b4 <__ultoa_invert+0x6c>
    17ca:	ea cf       	rjmp	.-44     	; 0x17a0 <__ultoa_invert+0x58>
    17cc:	b4 e0       	ldi	r27, 0x04	; 4
    17ce:	a6 95       	lsr	r26
    17d0:	97 95       	ror	r25
    17d2:	87 95       	ror	r24
    17d4:	77 95       	ror	r23
    17d6:	67 95       	ror	r22
    17d8:	ba 95       	dec	r27
    17da:	c9 f7       	brne	.-14     	; 0x17ce <__ultoa_invert+0x86>
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 05       	cpc	r22, r1
    17e0:	71 05       	cpc	r23, r1
    17e2:	08 95       	ret
    17e4:	9b 01       	movw	r18, r22
    17e6:	ac 01       	movw	r20, r24
    17e8:	0a 2e       	mov	r0, r26
    17ea:	06 94       	lsr	r0
    17ec:	57 95       	ror	r21
    17ee:	47 95       	ror	r20
    17f0:	37 95       	ror	r19
    17f2:	27 95       	ror	r18
    17f4:	ba 95       	dec	r27
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <__ultoa_invert+0xa2>
    17f8:	62 0f       	add	r22, r18
    17fa:	73 1f       	adc	r23, r19
    17fc:	84 1f       	adc	r24, r20
    17fe:	95 1f       	adc	r25, r21
    1800:	a0 1d       	adc	r26, r0
    1802:	08 95       	ret

00001804 <_exit>:
    1804:	f8 94       	cli

00001806 <__stop_program>:
    1806:	ff cf       	rjmp	.-2      	; 0x1806 <__stop_program>
