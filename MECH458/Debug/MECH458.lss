
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000017e0  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d0  00800298  00800298  00001a0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005280  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001af5  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034be  00000000  00000000  00008b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000bfdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa31  00000000  00000000  0000c78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000186b  00000000  00000000  000171bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00018a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b06  00000000  00000000  00018ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c4       	rjmp	.+2114   	; 0x878 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c6       	rjmp	.+3378   	; 0xd78 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 ee       	ldi	r30, 0xE0	; 224
      ac:	f7 e1       	ldi	r31, 0x17	; 23
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 39       	cpi	r26, 0x98	; 152
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a8 e9       	ldi	r26, 0x98	; 152
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a8 36       	cpi	r26, 0x68	; 104
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	85 d2       	rcall	.+1290   	; 0x5da <main>
      d0:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <_exit>

000000d4 <__bad_interrupt>:
      d4:	3e c3       	rjmp	.+1660   	; 0x752 <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		//PORTC ^= 0xFE;
		if (g_ADCCount < 10)
     122:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <g_ADCCount>
     126:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	d8 f4       	brcc	.+54     	; 0x164 <__vector_29+0x5c>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     12e:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <g_ADCCount>
     132:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 d3 02 	sts	0x02D3, r19	; 0x8002d3 <g_ADCCount+0x1>
     140:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	e2 54       	subi	r30, 0x42	; 66
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);	 
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <g_ADCCount>
     168:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_timer+0x11>
		//ADCSRA &= 0x01111111;
		//PORTC ^= 0xFE;
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	80 ea       	ldi	r24, 0xA0	; 160
     194:	89 27       	eor	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret

0000019a <ADC_Task>:
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	cf 93       	push	r28
     1ac:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <j.2508>
     1b0:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <j.2508+0x1>
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <j.2508+0x1>
     1ba:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <j.2508>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	ba 01       	movw	r22, r20
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2f b7       	in	r18, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	fc 01       	movw	r30, r24
     1ce:	ee 0f       	add	r30, r30
     1d0:	ff 1f       	adc	r31, r31
     1d2:	e2 54       	subi	r30, 0x42	; 66
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	01 90       	ld	r0, Z+
     1d8:	f0 81       	ld	r31, Z
     1da:	e0 2d       	mov	r30, r0
     1dc:	4e 0f       	add	r20, r30
     1de:	5f 1f       	adc	r21, r31
     1e0:	61 1d       	adc	r22, r1
     1e2:	71 1d       	adc	r23, r1
     1e4:	2f bf       	out	0x3f, r18	; 63
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
     1ea:	91 05       	cpc	r25, r1
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <ADC_Task+0x2e>
     1ee:	cf b7       	in	r28, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	cb 01       	movw	r24, r22
     1f4:	ba 01       	movw	r22, r20
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	d0 d6       	rcall	.+3488   	; 0xfa0 <__udivmodsi4>
     200:	69 01       	movw	r12, r18
     202:	7a 01       	movw	r14, r20
     204:	cf bf       	out	0x3f, r28	; 63
     206:	cf b7       	in	r28, 0x3f	; 63
     208:	f8 94       	cli
     20a:	da 01       	movw	r26, r20
     20c:	c9 01       	movw	r24, r18
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	a1 09       	sbc	r26, r1
     212:	b1 09       	sbc	r27, r1
     214:	8f 3c       	cpi	r24, 0xCF	; 207
     216:	97 40       	sbci	r25, 0x07	; 7
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	a0 f4       	brcc	.+40     	; 0x246 <ADC_Task+0xac>
     21e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <STAGE2>
     222:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <STAGE2+0x1>
     226:	a9 d1       	rcall	.+850    	; 0x57a <LL_GetRefl>
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	40 f4       	brcc	.+16     	; 0x246 <ADC_Task+0xac>
     236:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <STAGE2>
     23a:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <STAGE2+0x1>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f0       	breq	.+4      	; 0x246 <ADC_Task+0xac>
     242:	b6 01       	movw	r22, r12
     244:	a5 d1       	rcall	.+842    	; 0x590 <LL_UpdateRefl>
     246:	cf bf       	out	0x3f, r28	; 63
     248:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <g_ADCCount+0x1>
     24c:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <g_ADCCount>
     250:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_timer+0x11>
     254:	66 9b       	sbis	0x0c, 6	; 12
     256:	05 c0       	rjmp	.+10     	; 0x262 <ADC_Task+0xc8>
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 64       	ori	r24, 0x40	; 64
     260:	80 83       	st	Z, r24
     262:	cf 91       	pop	r28
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	bf 90       	pop	r11
     26e:	af 90       	pop	r10
     270:	9f 90       	pop	r9
     272:	8f 90       	pop	r8
     274:	08 95       	ret

00000276 <MAG_Task>:
     276:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <gMotorOn>
     27a:	88 23       	and	r24, r24
     27c:	49 f0       	breq	.+18     	; 0x290 <MAG_Task+0x1a>
     27e:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <tick.2530>
     282:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <tick.2530+0x1>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <tick.2530+0x1>
     28c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <tick.2530>
     290:	64 99       	sbic	0x0c, 4	; 12
     292:	1c c0       	rjmp	.+56     	; 0x2cc <MAG_Task+0x56>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     29a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     29e:	88 d1       	rcall	.+784    	; 0x5b0 <LL_UpdateStatus>
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     2a6:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     2aa:	78 d1       	rcall	.+752    	; 0x59c <LL_UpdateMag>
     2ac:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     2b0:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     2b4:	37 d1       	rcall	.+622    	; 0x524 <LL_Next>
     2b6:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <STAGE1+0x1>
     2ba:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <STAGE1>
     2be:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <_timer+0x1a>
     2c2:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <tick.2530+0x1>
     2c6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <tick.2530>
     2ca:	08 95       	ret
     2cc:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <tick.2530>
     2d0:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <tick.2530+0x1>
     2d4:	4f 97       	sbiw	r24, 0x1f	; 31
     2d6:	d8 f0       	brcs	.+54     	; 0x30e <MAG_Task+0x98>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     2de:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     2e2:	66 d1       	rcall	.+716    	; 0x5b0 <LL_UpdateStatus>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     2ea:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     2ee:	56 d1       	rcall	.+684    	; 0x59c <LL_UpdateMag>
     2f0:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     2f4:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     2f8:	15 d1       	rcall	.+554    	; 0x524 <LL_Next>
     2fa:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <STAGE1+0x1>
     2fe:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <STAGE1>
     302:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <_timer+0x1a>
     306:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <tick.2530+0x1>
     30a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <tick.2530>
     30e:	08 95       	ret

00000310 <EXIT_Task>:
     310:	cf 93       	push	r28
     312:	c0 91 5d 03 	lds	r28, 0x035D	; 0x80035d <stepper+0x3>
     316:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     31a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     31e:	28 d1       	rcall	.+592    	; 0x570 <LL_GetClass>
     320:	c8 13       	cpse	r28, r24
     322:	1d c0       	rjmp	.+58     	; 0x35e <EXIT_Task+0x4e>
     324:	63 e0       	ldi	r22, 0x03	; 3
     326:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     32a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     32e:	40 d1       	rcall	.+640    	; 0x5b0 <LL_UpdateStatus>
     330:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     334:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     338:	f5 d0       	rcall	.+490    	; 0x524 <LL_Next>
     33a:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <HEAD+0x1>
     33e:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <HEAD>
     342:	fc 01       	movw	r30, r24
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	93 81       	ldd	r25, Z+3	; 0x03
     348:	13 d1       	rcall	.+550    	; 0x570 <LL_GetClass>
     34a:	c8 2f       	mov	r28, r24
     34c:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     350:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     354:	0d d1       	rcall	.+538    	; 0x570 <LL_GetClass>
     356:	6c 2f       	mov	r22, r28
     358:	7c d2       	rcall	.+1272   	; 0x852 <STEPPER_SetRotation>
     35a:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <_timer+0x23>
     35e:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     362:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     366:	04 d1       	rcall	.+520    	; 0x570 <LL_GetClass>
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <BTN_Task>:
     36c:	89 b1       	in	r24, 0x09	; 9
     36e:	83 70       	andi	r24, 0x03	; 3
     370:	69 f1       	breq	.+90     	; 0x3cc <BTN_Task+0x60>
     372:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <debounce.2541>
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <debounce.2541>
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	30 f1       	brcs	.+76     	; 0x3cc <BTN_Task+0x60>
     380:	89 b1       	in	r24, 0x09	; 9
     382:	83 70       	andi	r24, 0x03	; 3
     384:	31 f4       	brne	.+12     	; 0x392 <BTN_Task+0x26>
     386:	87 e1       	ldi	r24, 0x17	; 23
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	fc d5       	rcall	.+3064   	; 0xf84 <UART_SendString>
     38c:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <debounce.2541>
     390:	08 95       	ret
     392:	89 b1       	in	r24, 0x09	; 9
     394:	83 70       	andi	r24, 0x03	; 3
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	69 f4       	brne	.+26     	; 0x3b4 <BTN_Task+0x48>
     39a:	8f e2       	ldi	r24, 0x2F	; 47
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	f2 d5       	rcall	.+3044   	; 0xf84 <UART_SendString>
     3a0:	85 e5       	ldi	r24, 0x55	; 85
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	e0 d3       	rcall	.+1984   	; 0xb66 <SYS_Pause>
     3a6:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <g_IdleStartTime+0x1>
     3aa:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <g_IdleStartTime>
     3ae:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <debounce.2541>
     3b2:	08 95       	ret
     3b4:	89 b1       	in	r24, 0x09	; 9
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	31 f4       	brne	.+12     	; 0x3c8 <BTN_Task+0x5c>
     3bc:	85 e6       	ldi	r24, 0x65	; 101
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	e1 d5       	rcall	.+3010   	; 0xf84 <UART_SendString>
     3c2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <debounce.2541>
     3c6:	08 95       	ret
     3c8:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <debounce.2541>
     3cc:	08 95       	ret

000003ce <ADD_Task>:
     3ce:	08 95       	ret

000003d0 <SERVER_Task>:
	static uint8_t pin7state = 0;
	static uint8_t pin6state = 1;
	static uint8_t pin5state = 1;
//	static uint8_t temp = 0;
	
	if((PINE & 0x80) == 0) // E7
     3d0:	67 99       	sbic	0x0c, 7	; 12
     3d2:	19 c0       	rjmp	.+50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		if(pin7state)
     3d4:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     3d8:	88 23       	and	r24, r24
     3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			// Transition Detected O1 High -> Low : Item Enters		
			// Just signal the start of the system by placing the first node into stage 1
			// And enable the watchdog timer
			
			if(STAGE1 == NULL) STAGE1 = HEAD;
     3dc:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     3e0:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     3e4:	89 2b       	or	r24, r25
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <SERVER_Task+0x28>
     3e8:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     3ec:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     3f0:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <STAGE1+0x1>
     3f4:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <STAGE1>
			_timer[7].state = READY;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <_timer+0x47>
			g_WDTimeout = 0;
     3fe:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
		}
		pin7state = 0;
     402:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
	}
	
	if((PINE & 0x40) == 0) // E6
     406:	66 99       	sbic	0x0c, 6	; 12
     408:	07 c0       	rjmp	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		if(pin6state)
     40a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2552>
     40e:	81 11       	cpse	r24, r1
				// The ADC is started on the Low -> High edge
				// Once the ADC finishes ten conversions it enables the ADC handling task
				// The ADC handling task restarts conversions as long as this pin is high
				// If the pin goes High -> Low, the ADC task will finish and wont restart the ADC
				// So nothing happens here.
				g_WDTimeout = 0;
     410:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
		}
		pin6state = 0;
     414:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2552>
	}
	
	if((PINE & 0x20) == 0) // E5
     418:	65 99       	sbic	0x0c, 5	; 12
     41a:	0b c0       	rjmp	.+22     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		if(pin5state)
     41c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2553>
     420:	88 23       	and	r24, r24
     422:	29 f0       	breq	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <_timer+0x23>
			//g_PauseRequest = 1;
			g_WDTimeout = 0;
     42a:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
		}
		pin5state = 0;
     42e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2553>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     432:	67 9b       	sbis	0x0c, 7	; 12
     434:	0c c0       	rjmp	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		if(!pin7state)
     436:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
     43a:	81 11       	cpse	r24, r1
     43c:	05 c0       	rjmp	.+10     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		{
			// Transition Detected O2 Low -> High : Item Exits O1
			// Unblock the magnetic sensor when the item leaves O1
			// The magnetic sensor blocks once the magnetism of the piece is inferred
			_timer[2].state = READY;	
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <_timer+0x1a>
			g_WDTimeout = 0;
     444:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
		}
		pin7state = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     44e:	66 9b       	sbis	0x0c, 6	; 12
     450:	28 c0       	rjmp	.+80     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
	{
		if(!pin6state)
     452:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2552>
     456:	81 11       	cpse	r24, r1
     458:	21 c0       	rjmp	.+66     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			if(STAGE2 == NULL)
     45a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <STAGE2>
     45e:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <STAGE2+0x1>
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	49 f4       	brne	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			{
				STAGE2 = HEAD; // First Item enters stage 2
     466:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
     46a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     46e:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <STAGE2+0x1>
     472:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <STAGE2>
     476:	0b c0       	rjmp	.+22     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
			}
			else
			{
				LL_UpdateStatus(STAGE2, SORTABLE);
     478:	62 e0       	ldi	r22, 0x02	; 2
     47a:	9a d0       	rcall	.+308    	; 0x5b0 <LL_UpdateStatus>
				STAGE2 = LL_Next(STAGE2); // Increment stage 2
     47c:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <STAGE2>
     480:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <STAGE2+0x1>
     484:	4f d0       	rcall	.+158    	; 0x524 <LL_Next>
     486:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <STAGE2+0x1>
     48a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <STAGE2>
			}
			g_WDTimeout = 0;
     48e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
			ADCSRA |= (1 << ADSC);
     492:	ea e7       	ldi	r30, 0x7A	; 122
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	80 64       	ori	r24, 0x40	; 64
     49a:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2552>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     4a2:	65 9b       	sbis	0x0c, 5	; 12
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
	{
		if(!pin5state)
     4a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2553>
     4aa:	81 11       	cpse	r24, r1
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			// Transition Detected O3 Low -> High : Item Exits System
			g_WDTimeout = 0;
     4ae:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <g_WDTimeout>
		}
		pin5state = 1;			
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2553>
     4b8:	08 95       	ret

000004ba <WATCHDOG_Task>:
}

void WATCHDOG_Task(void* arg)
{
	// If this function runs twice then then no item has triggered an optical sensor for 4 seconds.
	if(g_WDTimeout) SYS_Pause(__FUNCTION__); 
     4ba:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <g_WDTimeout>
     4be:	88 23       	and	r24, r24
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <WATCHDOG_Task+0xe>
     4c2:	88 e7       	ldi	r24, 0x78	; 120
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	4f d3       	rcall	.+1694   	; 0xb66 <SYS_Pause>
	g_WDTimeout++;
     4c8:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <g_WDTimeout>
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <g_WDTimeout>
     4d2:	08 95       	ret

000004d4 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	7c 01       	movw	r14, r24
     4e0:	16 2f       	mov	r17, r22
     4e2:	d4 2f       	mov	r29, r20
     4e4:	c2 2f       	mov	r28, r18
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	7c d5       	rcall	.+2808   	; 0xfe4 <malloc>
     4ec:	fc 01       	movw	r30, r24
     4ee:	f1 82       	std	Z+1, r15	; 0x01
     4f0:	e0 82       	st	Z, r14
     4f2:	12 83       	std	Z+2, r17	; 0x02
     4f4:	d3 83       	std	Z+3, r29	; 0x03
     4f6:	c4 83       	std	Z+4, r28	; 0x04
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	08 95       	ret

00000504 <LL_ItemListInit>:
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	6a d5       	rcall	.+2772   	; 0xfe4 <malloc>
     510:	fc 01       	movw	r30, r24
     512:	d1 83       	std	Z+1, r29	; 0x01
     514:	c0 83       	st	Z, r28
     516:	15 82       	std	Z+5, r1	; 0x05
     518:	14 82       	std	Z+4, r1	; 0x04
     51a:	13 82       	std	Z+3, r1	; 0x03
     51c:	12 82       	std	Z+2, r1	; 0x02
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <LL_Next>:
     524:	fc 01       	movw	r30, r24
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	08 95       	ret

0000052c <LL_AddBack>:
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
     532:	cb 01       	movw	r24, r22
     534:	01 c0       	rjmp	.+2      	; 0x538 <LL_AddBack+0xc>
     536:	e9 01       	movw	r28, r18
     538:	2a 81       	ldd	r18, Y+2	; 0x02
     53a:	3b 81       	ldd	r19, Y+3	; 0x03
     53c:	21 15       	cp	r18, r1
     53e:	31 05       	cpc	r19, r1
     540:	d1 f7       	brne	.-12     	; 0x536 <LL_AddBack+0xa>
     542:	e0 df       	rcall	.-64     	; 0x504 <LL_ItemListInit>
     544:	9b 83       	std	Y+3, r25	; 0x03
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <LL_Size>:
     54e:	dc 01       	movw	r26, r24
     550:	12 96       	adiw	r26, 0x02	; 2
     552:	ed 91       	ld	r30, X+
     554:	fc 91       	ld	r31, X
     556:	13 97       	sbiw	r26, 0x03	; 3
     558:	30 97       	sbiw	r30, 0x00	; 0
     55a:	41 f0       	breq	.+16     	; 0x56c <LL_Size+0x1e>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	02 80       	ldd	r0, Z+2	; 0x02
     562:	f3 81       	ldd	r31, Z+3	; 0x03
     564:	e0 2d       	mov	r30, r0
     566:	30 97       	sbiw	r30, 0x00	; 0
     568:	d1 f7       	brne	.-12     	; 0x55e <LL_Size+0x10>
     56a:	08 95       	ret
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret

00000570 <LL_GetClass>:
     570:	dc 01       	movw	r26, r24
     572:	ed 91       	ld	r30, X+
     574:	fc 91       	ld	r31, X
     576:	83 81       	ldd	r24, Z+3	; 0x03
     578:	08 95       	ret

0000057a <LL_GetRefl>:
     57a:	dc 01       	movw	r26, r24
     57c:	ed 91       	ld	r30, X+
     57e:	fc 91       	ld	r31, X
     580:	80 81       	ld	r24, Z
     582:	91 81       	ldd	r25, Z+1	; 0x01
     584:	08 95       	ret

00000586 <LL_GetMag>:
     586:	dc 01       	movw	r26, r24
     588:	ed 91       	ld	r30, X+
     58a:	fc 91       	ld	r31, X
     58c:	82 81       	ldd	r24, Z+2	; 0x02
     58e:	08 95       	ret

00000590 <LL_UpdateRefl>:
     590:	dc 01       	movw	r26, r24
     592:	ed 91       	ld	r30, X+
     594:	fc 91       	ld	r31, X
     596:	71 83       	std	Z+1, r23	; 0x01
     598:	60 83       	st	Z, r22
     59a:	08 95       	ret

0000059c <LL_UpdateMag>:
     59c:	dc 01       	movw	r26, r24
     59e:	ed 91       	ld	r30, X+
     5a0:	fc 91       	ld	r31, X
     5a2:	62 83       	std	Z+2, r22	; 0x02
     5a4:	08 95       	ret

000005a6 <LL_UpdateClass>:
     5a6:	dc 01       	movw	r26, r24
     5a8:	ed 91       	ld	r30, X+
     5aa:	fc 91       	ld	r31, X
     5ac:	63 83       	std	Z+3, r22	; 0x03
     5ae:	08 95       	ret

000005b0 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5b0:	dc 01       	movw	r26, r24
     5b2:	ed 91       	ld	r30, X+
     5b4:	fc 91       	ld	r31, X
     5b6:	64 83       	std	Z+4, r22	; 0x04
     5b8:	08 95       	ret

000005ba <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5ba:	dc 01       	movw	r26, r24
     5bc:	ed 91       	ld	r30, X+
     5be:	fc 91       	ld	r31, X
     5c0:	84 81       	ldd	r24, Z+4	; 0x04
     5c2:	08 95       	ret

000005c4 <GPIO_Init>:
extern list* TAIL;
extern list* FRONT;

int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     5c8:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     5ca:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     5cc:	80 ef       	ldi	r24, 0xF0	; 240
     5ce:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     5d0:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     5d2:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
}
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	08 95       	ret

000005da <main>:
#include "CALIBRATE.h"
CALIBRATE();
return 0;
#endif
	
	SYS_Init();
     5da:	0a d2       	rcall	.+1044   	; 0x9f0 <SYS_Init>

	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     5dc:	89 b1       	in	r24, 0x09	; 9
     5de:	83 70       	andi	r24, 0x03	; 3
     5e0:	e9 f7       	brne	.-6      	; 0x5dc <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     5e2:	86 e8       	ldi	r24, 0x86	; 134
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	ce d4       	rcall	.+2460   	; 0xf84 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5e8:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	48 ee       	ldi	r20, 0xE8	; 232
     5f0:	51 e0       	ldi	r21, 0x01	; 1
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	4b d4       	rcall	.+2198   	; 0xe92 <TIMER_Create>
		_timer[0].state = READY;
     5fc:	c6 e0       	ldi	r28, 0x06	; 6
     5fe:	d3 e0       	ldi	r29, 0x03	; 3
     600:	12 e0       	ldi	r17, 0x02	; 2
     602:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	4d ec       	ldi	r20, 0xCD	; 205
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	3e d4       	rcall	.+2172   	; 0xe92 <TIMER_Create>
		_timer[1].state = BLOCKED;
     616:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	4b e3       	ldi	r20, 0x3B	; 59
     61e:	51 e0       	ldi	r21, 0x01	; 1
     620:	61 e0       	ldi	r22, 0x01	; 1
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	34 d4       	rcall	.+2152   	; 0xe92 <TIMER_Create>
		_timer[2].state = BLOCKED;
     62a:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	48 e8       	ldi	r20, 0x88	; 136
     632:	51 e0       	ldi	r21, 0x01	; 1
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	2a d4       	rcall	.+2132   	; 0xe92 <TIMER_Create>
		_timer[3].state = BLOCKED;
     63e:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(180, 1, ADD_Task, NULL);		// Item Enter Handling
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	47 ee       	ldi	r20, 0xE7	; 231
     646:	51 e0       	ldi	r21, 0x01	; 1
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	84 eb       	ldi	r24, 0xB4	; 180
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	20 d4       	rcall	.+2112   	; 0xe92 <TIMER_Create>
		_timer[4].state = BLOCKED;
     652:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	46 eb       	ldi	r20, 0xB6	; 182
     65a:	51 e0       	ldi	r21, 0x01	; 1
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	82 e3       	ldi	r24, 0x32	; 50
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	16 d4       	rcall	.+2092   	; 0xe92 <TIMER_Create>
		_timer[5].state = READY;
     666:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	48 ec       	ldi	r20, 0xC8	; 200
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	88 ee       	ldi	r24, 0xE8	; 232
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	0c d4       	rcall	.+2072   	; 0xe92 <TIMER_Create>
		_timer[6].state = READY;				
		
		TIMER_Create(4505,1, WATCHDOG_Task, NULL); // Software watchdog (2 seconds)
     67a:	1e af       	std	Y+62, r17	; 0x3e
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	4d e5       	ldi	r20, 0x5D	; 93
     682:	52 e0       	ldi	r21, 0x02	; 2
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	89 e9       	ldi	r24, 0x99	; 153
		_timer[7].state = BLOCKED;
     68a:	91 e1       	ldi	r25, 0x11	; 17
     68c:	02 d4       	rcall	.+2052   	; 0xe92 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     68e:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <_timer+0x47>
     692:	89 e9       	ldi	r24, 0x99	; 153
		PWM(0x80);
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	76 d4       	rcall	.+2284   	; 0xf84 <UART_SendString>
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     69c:	6b d0       	rcall	.+214    	; 0x774 <PWM>
	// Put IDLE operations in infinite loop
	while (1)
	{		
		// Check for a pause request
		// Only pause during idle time to properly restart the scheduler on unpause
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     69e:	78 94       	sei
     6a0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <g_PauseRequest>
     6a4:	88 23       	and	r24, r24
     6a6:	19 f0       	breq	.+6      	; 0x6ae <main+0xd4>
     6a8:	8b ea       	ldi	r24, 0xAB	; 171

		list* temp = HEAD;
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	5c d2       	rcall	.+1208   	; 0xb66 <SYS_Pause>
     6ae:	c0 91 b6 02 	lds	r28, 0x02B6	; 0x8002b6 <HEAD>
		
		LL_UpdateClass(temp, STEEL);
     6b2:	d0 91 b7 02 	lds	r29, 0x02B7	; 0x8002b7 <HEAD+0x1>
     6b6:	63 e0       	ldi	r22, 0x03	; 3
		temp = LL_Next(temp);
     6b8:	ce 01       	movw	r24, r28
     6ba:	75 df       	rcall	.-278    	; 0x5a6 <LL_UpdateClass>
     6bc:	ce 01       	movw	r24, r28
		LL_UpdateClass(temp, ALUMINUM);
     6be:	32 df       	rcall	.-412    	; 0x524 <LL_Next>
     6c0:	ec 01       	movw	r28, r24
     6c2:	62 e0       	ldi	r22, 0x02	; 2
		uint16_t reflVal; 

		while(temp)
     6c4:	70 df       	rcall	.-288    	; 0x5a6 <LL_UpdateClass>
		{
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6c6:	20 97       	sbiw	r28, 0x00	; 0
     6c8:	59 f3       	breq	.-42     	; 0x6a0 <main+0xc6>
     6ca:	20 97       	sbiw	r28, 0x00	; 0
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <main+0xf6>
     6ce:	3a c0       	rjmp	.+116    	; 0x744 <main+0x16a>
     6d0:	ce 01       	movw	r24, r28
     6d2:	4e df       	rcall	.-356    	; 0x570 <LL_GetClass>
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	b1 f5       	brne	.+108    	; 0x744 <main+0x16a>
     6d8:	ce 01       	movw	r24, r28
     6da:	6f df       	rcall	.-290    	; 0x5ba <LL_GetStatus>
			{
				//classify temp
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     6dc:	82 30       	cpi	r24, 0x02	; 2
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6de:	91 f5       	brne	.+100    	; 0x744 <main+0x16a>
				{
					reflVal = LL_GetRefl(temp);				
     6e0:	1f b7       	in	r17, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	ce 01       	movw	r24, r28
     6e6:	49 df       	rcall	.-366    	; 0x57a <LL_GetRefl>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6e8:	7c 01       	movw	r14, r24
				}
				uint8_t magVal = LL_GetMag(temp);
     6ea:	1f bf       	out	0x3f, r17	; 63
     6ec:	ce 01       	movw	r24, r28
     6ee:	4b df       	rcall	.-362    	; 0x586 <LL_GetMag>
				
				if(magVal) // 
     6f0:	88 23       	and	r24, r24
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     6f2:	a1 f0       	breq	.+40     	; 0x71c <main+0x142>
     6f4:	c7 01       	movw	r24, r14
     6f6:	83 97       	sbiw	r24, 0x23	; 35
     6f8:	8a 97       	sbiw	r24, 0x2a	; 42
					{
						LL_UpdateClass(temp, ALUMINUM);
     6fa:	20 f4       	brcc	.+8      	; 0x704 <main+0x12a>
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	ce 01       	movw	r24, r28
     700:	52 df       	rcall	.-348    	; 0x5a6 <LL_UpdateClass>
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     702:	20 c0       	rjmp	.+64     	; 0x744 <main+0x16a>
     704:	8b e2       	ldi	r24, 0x2B	; 43
     706:	e8 1a       	sub	r14, r24
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	f8 0a       	sbc	r15, r24
     70c:	82 ee       	ldi	r24, 0xE2	; 226
     70e:	e8 16       	cp	r14, r24
     710:	f1 04       	cpc	r15, r1
					{
						LL_UpdateClass(temp, STEEL);
     712:	c0 f4       	brcc	.+48     	; 0x744 <main+0x16a>
     714:	63 e0       	ldi	r22, 0x03	; 3
     716:	ce 01       	movw	r24, r28
     718:	46 df       	rcall	.-372    	; 0x5a6 <LL_UpdateClass>
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     71a:	14 c0       	rjmp	.+40     	; 0x744 <main+0x16a>
     71c:	c7 01       	movw	r24, r14
     71e:	86 57       	subi	r24, 0x76	; 118
     720:	93 40       	sbci	r25, 0x03	; 3
     722:	8e 97       	sbiw	r24, 0x2e	; 46
				{
					LL_UpdateClass(temp, BLACK);
     724:	20 f4       	brcc	.+8      	; 0x72e <main+0x154>
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	ce 01       	movw	r24, r28
     72a:	3d df       	rcall	.-390    	; 0x5a6 <LL_UpdateClass>
     72c:	0b c0       	rjmp	.+22     	; 0x744 <main+0x16a>
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     72e:	8b e3       	ldi	r24, 0x3B	; 59
     730:	e8 1a       	sub	r14, r24
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	f8 0a       	sbc	r15, r24
     736:	80 e3       	ldi	r24, 0x30	; 48
     738:	e8 16       	cp	r14, r24
     73a:	f1 04       	cpc	r15, r1
     73c:	18 f4       	brcc	.+6      	; 0x744 <main+0x16a>
				{
					LL_UpdateClass(temp, WHITE);
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	ce 01       	movw	r24, r28
     742:	31 df       	rcall	.-414    	; 0x5a6 <LL_UpdateClass>
     744:	ce 01       	movw	r24, r28
				else
				{
					// Unknown non-magnetic object
				}
			}
			temp = LL_Next(temp);
     746:	ee de       	rcall	.-548    	; 0x524 <LL_Next>
     748:	ec 01       	movw	r28, r24
     74a:	89 2b       	or	r24, r25
     74c:	09 f0       	breq	.+2      	; 0x750 <main+0x176>
		LL_UpdateClass(temp, STEEL);
		temp = LL_Next(temp);
		LL_UpdateClass(temp, ALUMINUM);
		uint16_t reflVal; 

		while(temp)
     74e:	bd cf       	rjmp	.-134    	; 0x6ca <main+0xf0>
     750:	a7 cf       	rjmp	.-178    	; 0x6a0 <main+0xc6>

00000752 <__vector_default>:
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
  	}
	return 0;
}

ISR(BADISR_vect)
{
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     75c:	8a ea       	ldi	r24, 0xAA	; 170
     75e:	88 b9       	out	0x08, r24	; 8
     760:	fe cf       	rjmp	.-4      	; 0x75e <__vector_default+0xc>

00000762 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     762:	84 b5       	in	r24, 0x24	; 36
     764:	83 68       	ori	r24, 0x83	; 131
     766:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     768:	85 b5       	in	r24, 0x25	; 37
     76a:	83 60       	ori	r24, 0x03	; 3
     76c:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     76e:	80 e8       	ldi	r24, 0x80	; 128
     770:	87 bd       	out	0x27, r24	; 39
     772:	08 95       	ret

00000774 <PWM>:
}

void PWM(const int dutyCycle)
{
    //OCR0A = 90;
	OCR0A = 0x80;
     774:	20 e8       	ldi	r18, 0x80	; 128
     776:	27 bd       	out	0x27, r18	; 39
	if (dutyCycle) 
     778:	89 2b       	or	r24, r25
     77a:	31 f0       	breq	.+12     	; 0x788 <PWM+0x14>
	{
		gMotorOn = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <gMotorOn>
		PORTB = ~0x0E;
     782:	81 ef       	ldi	r24, 0xF1	; 241
     784:	85 b9       	out	0x05, r24	; 5
     786:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     788:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <gMotorOn>
		PORTB = ~0x0F;
     78c:	80 ef       	ldi	r24, 0xF0	; 240
     78e:	85 b9       	out	0x05, r24	; 5
     790:	08 95       	ret

00000792 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	stepper._stepNum = 0;
     792:	ea e5       	ldi	r30, 0x5A	; 90
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	10 82       	st	Z, r1
	stepper.direction = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     79c:	12 82       	std	Z+2, r1	; 0x02
	//Rotate 200 Steps to find the hall sensor
	stepper.current = 200;
     79e:	88 ec       	ldi	r24, 0xC8	; 200
     7a0:	83 83       	std	Z+3, r24	; 0x03
	stepper._targetStep = 0;
     7a2:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     7a4:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
     7a6:	16 82       	std	Z+6, r1	; 0x06
	stepper._isInitiated = 0;
     7a8:	10 86       	std	Z+8, r1	; 0x08
	stepper._accellStep = 0;
     7aa:	11 86       	std	Z+9, r1	; 0x09
	PORTA = 0x30;
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	82 b9       	out	0x02, r24	; 2
	cli();
     7b0:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x94;
     7b2:	84 e9       	ldi	r24, 0x94	; 148
     7b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     7b8:	e0 eb       	ldi	r30, 0xB0	; 176
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     7c2:	e0 e7       	ldi	r30, 0x70	; 112
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	82 60       	ori	r24, 0x02	; 2
     7ca:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     7cc:	e1 eb       	ldi	r30, 0xB1	; 177
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	87 60       	ori	r24, 0x07	; 7
     7d4:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	sei();
     7d6:	78 94       	sei
     7d8:	08 95       	ret

000007da <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	86 1b       	sub	r24, r22
     7de:	91 09       	sbc	r25, r1
	if (steps >= 0)
     7e0:	52 f0       	brmi	.+20     	; 0x7f6 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     7e2:	85 36       	cpi	r24, 0x65	; 101
     7e4:	91 05       	cpc	r25, r1
     7e6:	8c f0       	brlt	.+34     	; 0x80a <STEPPER_NumSteps+0x30>
     7e8:	24 e6       	ldi	r18, 0x64	; 100
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	48 1b       	sub	r20, r24
     7f0:	59 0b       	sbc	r21, r25
     7f2:	ca 01       	movw	r24, r20
     7f4:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     7f6:	8c 39       	cpi	r24, 0x9C	; 156
     7f8:	5f ef       	ldi	r21, 0xFF	; 255
     7fa:	95 07       	cpc	r25, r21
     7fc:	34 f0       	brlt	.+12     	; 0x80a <STEPPER_NumSteps+0x30>
     7fe:	2c e9       	ldi	r18, 0x9C	; 156
     800:	3f ef       	ldi	r19, 0xFF	; 255
     802:	a9 01       	movw	r20, r18
     804:	48 1b       	sub	r20, r24
     806:	59 0b       	sbc	r21, r25
     808:	ca 01       	movw	r24, r20
	}
	return steps;
}
     80a:	08 95       	ret

0000080c <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     814:	ca e5       	ldi	r28, 0x5A	; 90
     816:	d3 e0       	ldi	r29, 0x03	; 3
     818:	0a 81       	ldd	r16, Y+2	; 0x02
     81a:	6b 81       	ldd	r22, Y+3	; 0x03
     81c:	80 2f       	mov	r24, r16
     81e:	dd df       	rcall	.-70     	; 0x7da <STEPPER_NumSteps>
     820:	18 2f       	mov	r17, r24
     822:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     824:	60 2f       	mov	r22, r16
     826:	8e 81       	ldd	r24, Y+6	; 0x06
     828:	d8 df       	rcall	.-80     	; 0x7da <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     82a:	24 e0       	ldi	r18, 0x04	; 4
     82c:	29 83       	std	Y+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     82e:	9c 01       	movw	r18, r24
     830:	12 9f       	mul	r17, r18
     832:	c0 01       	movw	r24, r0
     834:	13 9f       	mul	r17, r19
     836:	90 0d       	add	r25, r0
     838:	11 24       	eor	r1, r1
     83a:	89 2f       	mov	r24, r25
     83c:	80 95       	com	r24
     83e:	88 1f       	adc	r24, r24
     840:	88 27       	eor	r24, r24
     842:	88 1f       	adc	r24, r24
     844:	8f 83       	std	Y+7, r24	; 0x07

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
     846:	1d 82       	std	Y+5, r1	; 0x05
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
	cli();
     856:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     858:	ca e5       	ldi	r28, 0x5A	; 90
     85a:	d3 e0       	ldi	r29, 0x03	; 3
     85c:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     85e:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
     860:	d5 df       	rcall	.-86     	; 0x80c <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     862:	e9 85       	ldd	r30, Y+9	; 0x09
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	e8 5f       	subi	r30, 0xF8	; 248
     868:	fe 4f       	sbci	r31, 0xFE	; 254
     86a:	80 81       	ld	r24, Z
     86c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     870:	78 94       	sei
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	08 95       	ret

00000878 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	0b b6       	in	r0, 0x3b	; 59
     884:	0f 92       	push	r0
     886:	2f 93       	push	r18
     888:	8f 93       	push	r24
     88a:	9f 93       	push	r25
     88c:	af 93       	push	r26
     88e:	bf 93       	push	r27
     890:	ef 93       	push	r30
     892:	ff 93       	push	r31
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	00 d0       	rcall	.+0      	; 0x89a <__vector_13+0x22>
     89a:	00 d0       	rcall	.+0      	; 0x89c <__vector_13+0x24>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     8a0:	86 e3       	ldi	r24, 0x36	; 54
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9e e2       	ldi	r25, 0x2E	; 46
     8aa:	ad e2       	ldi	r26, 0x2D	; 45
     8ac:	b5 e3       	ldi	r27, 0x35	; 53
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	ab 83       	std	Y+3, r26	; 0x03
     8b4:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._isInitiated == 0)
     8b6:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <stepper+0x8>
     8ba:	81 11       	cpse	r24, r1
     8bc:	0e c0       	rjmp	.+28     	; 0x8da <__vector_13+0x62>
	{
		if ((PINE && 0x04) == 0)
     8be:	8c b1       	in	r24, 0x0c	; 12
     8c0:	81 11       	cpse	r24, r1
     8c2:	0b c0       	rjmp	.+22     	; 0x8da <__vector_13+0x62>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     8c4:	ea e5       	ldi	r30, 0x5A	; 90
     8c6:	f3 e0       	ldi	r31, 0x03	; 3
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 87       	std	Z+8, r24	; 0x08
			stepper._stepNum = 0;
     8cc:	10 82       	st	Z, r1
			stepper.direction = 1;
     8ce:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     8d0:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
			stepper._targetStep = 0;
     8d2:	14 82       	std	Z+4, r1	; 0x04
			stepper._currentStep = 0;
     8d4:	15 82       	std	Z+5, r1	; 0x05
			stepper.next = 0;
     8d6:	16 82       	std	Z+6, r1	; 0x06
     8d8:	5c c0       	rjmp	.+184    	; 0x992 <__vector_13+0x11a>
		}
	}

	if (stepper._currentStep < stepper._targetStep)
     8da:	ea e5       	ldi	r30, 0x5A	; 90
     8dc:	f3 e0       	ldi	r31, 0x03	; 3
     8de:	95 81       	ldd	r25, Z+5	; 0x05
     8e0:	84 81       	ldd	r24, Z+4	; 0x04
     8e2:	98 17       	cp	r25, r24
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__vector_13+0x70>
     8e6:	53 c0       	rjmp	.+166    	; 0x98e <__vector_13+0x116>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     8e8:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <stepper+0x1>
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	51 f4       	brne	.+20     	; 0x904 <__vector_13+0x8c>
     8f0:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <stepper>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	ec 0f       	add	r30, r28
     8fa:	fd 1f       	adc	r31, r29
     8fc:	e8 0f       	add	r30, r24
     8fe:	f1 1d       	adc	r31, r1
     900:	80 81       	ld	r24, Z
     902:	0d c0       	rjmp	.+26     	; 0x91e <__vector_13+0xa6>
     904:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <stepper>
     908:	e3 e0       	ldi	r30, 0x03	; 3
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	e8 1b       	sub	r30, r24
     90e:	f1 09       	sbc	r31, r1
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	8c 0f       	add	r24, r28
     916:	9d 1f       	adc	r25, r29
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
     91c:	80 81       	ld	r24, Z
     91e:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     920:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <stepper>
     924:	83 30       	cpi	r24, 0x03	; 3
     926:	11 f0       	breq	.+4      	; 0x92c <__vector_13+0xb4>
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	01 c0       	rjmp	.+2      	; 0x92e <__vector_13+0xb6>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	ea e5       	ldi	r30, 0x5A	; 90
     930:	f3 e0       	ldi	r31, 0x03	; 3
     932:	80 83       	st	Z, r24

		stepper._currentStep++;
     934:	25 81       	ldd	r18, Z+5	; 0x05
     936:	2f 5f       	subi	r18, 0xFF	; 255
     938:	25 83       	std	Z+5, r18	; 0x05

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     93a:	84 81       	ldd	r24, Z+4	; 0x04
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	82 1b       	sub	r24, r18
     940:	91 09       	sbc	r25, r1
     942:	06 97       	sbiw	r24, 0x06	; 6
     944:	6c f4       	brge	.+26     	; 0x960 <__vector_13+0xe8>
     946:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <stepper+0x9>
     94a:	e8 2f       	mov	r30, r24
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	e8 5f       	subi	r30, 0xF8	; 248
     950:	fe 4f       	sbci	r31, 0xFE	; 254
     952:	90 81       	ld	r25, Z
     954:	94 39       	cpi	r25, 0x94	; 148
     956:	20 f4       	brcc	.+8      	; 0x960 <__vector_13+0xe8>
		{
			stepper._accellStep--;
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <stepper+0x9>
     95e:	0e c0       	rjmp	.+28     	; 0x97c <__vector_13+0x104>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     960:	26 30       	cpi	r18, 0x06	; 6
     962:	60 f0       	brcs	.+24     	; 0x97c <__vector_13+0x104>
     964:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <stepper+0x9>
     968:	e8 2f       	mov	r30, r24
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	e8 5f       	subi	r30, 0xF8	; 248
     96e:	fe 4f       	sbci	r31, 0xFE	; 254
     970:	90 81       	ld	r25, Z
     972:	91 34       	cpi	r25, 0x41	; 65
     974:	18 f0       	brcs	.+6      	; 0x97c <__vector_13+0x104>
		{
			stepper._accellStep++;
     976:	8f 5f       	subi	r24, 0xFF	; 255
     978:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <stepper+0x9>
		}
		OCR2A = accell[stepper._accellStep];
     97c:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <stepper+0x9>
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e8 5f       	subi	r30, 0xF8	; 248
     984:	fe 4f       	sbci	r31, 0xFE	; 254
     986:	80 81       	ld	r24, Z
     988:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     98c:	1d c0       	rjmp	.+58     	; 0x9c8 <__vector_13+0x150>
	}

	else if (stepper._currentStep == stepper._targetStep)
     98e:	98 13       	cpse	r25, r24
     990:	1b c0       	rjmp	.+54     	; 0x9c8 <__vector_13+0x150>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     992:	ea e5       	ldi	r30, 0x5A	; 90
     994:	f3 e0       	ldi	r31, 0x03	; 3
     996:	82 81       	ldd	r24, Z+2	; 0x02
     998:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     99a:	e7 81       	ldd	r30, Z+7	; 0x07
     99c:	e1 11       	cpse	r30, r1
     99e:	e0 91 63 03 	lds	r30, 0x0363	; 0x800363 <stepper+0x9>
     9a2:	aa e5       	ldi	r26, 0x5A	; 90
     9a4:	b3 e0       	ldi	r27, 0x03	; 3
     9a6:	19 96       	adiw	r26, 0x09	; 9
     9a8:	ec 93       	st	X, r30
     9aa:	19 97       	sbiw	r26, 0x09	; 9
		OCR2A = accell[stepper._accellStep];
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e8 5f       	subi	r30, 0xF8	; 248
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	80 81       	ld	r24, Z
     9b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     9b8:	17 96       	adiw	r26, 0x07	; 7
     9ba:	8c 91       	ld	r24, X
     9bc:	88 23       	and	r24, r24
     9be:	11 f0       	breq	.+4      	; 0x9c4 <__vector_13+0x14c>
     9c0:	82 b1       	in	r24, 0x02	; 2
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <__vector_13+0x14e>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	82 b9       	out	0x02, r24	; 2
	}
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0b be       	out	0x3b, r0	; 59
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <SYS_Init>:

#include "sys.h"
#include "timer.h"

void SYS_Init()
{
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	e2 97       	sbiw	r28, 0x32	; 50
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
	// Initialize system
	
	cli();
     a14:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
     a16:	e1 e6       	ldi	r30, 0x61	; 97
     a18:	f0 e0       	ldi	r31, 0x00	; 0
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	80 83       	st	Z, r24
	CLKPR = 0;
     a1e:	10 82       	st	Z, r1
	
	UART_Init();
     a20:	99 d2       	rcall	.+1330   	; 0xf54 <UART_Init>
	GPIO_Init();
     a22:	d0 dd       	rcall	.-1120   	; 0x5c4 <GPIO_Init>
	TIMER_Init();
     a24:	1a d2       	rcall	.+1076   	; 0xe5a <TIMER_Init>
	PWM_Init();
     a26:	9d de       	rcall	.-710    	; 0x762 <PWM_Init>
     a28:	56 db       	rcall	.-2388   	; 0xd6 <ADC_Init>
	ADC_Init();
     a2a:	b3 de       	rcall	.-666    	; 0x792 <STEPPER_Init>
     a2c:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <g_ADCCount+0x1>
	STEPPER_Init();	
     a30:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <g_ADCCount>
	g_ADCCount = 0;
     a34:	84 e1       	ldi	r24, 0x14	; 20
     a36:	ee eb       	ldi	r30, 0xBE	; 190
     a38:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     a3a:	df 01       	movw	r26, r30
     a3c:	1d 92       	st	X+, r1
     a3e:	8a 95       	dec	r24
     a40:	e9 f7       	brne	.-6      	; 0xa3c <SYS_Init+0x4c>
     a42:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <g_ADCFlag>
     a46:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <g_PauseRequest>
	g_ADCFlag = 0;
     a4a:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <HEAD+0x1>
	g_PauseRequest = 0;
     a4e:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <HEAD>
// 	extern list* STAGE2;
// 	extern list* TAIL;
//	extern list* FRONT;	
	itemNode* initNode = NULL;
	
	HEAD = NULL;
     a52:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TAIL+0x1>
     a56:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TAIL>
	TAIL = NULL;
     a5a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <STAGE1+0x1>
     a5e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <STAGE1>
	STAGE1 = NULL;
     a62:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <STAGE2+0x1>
     a66:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <STAGE2>
	STAGE2 = NULL;
     a6a:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <FRONT+0x1>
     a6e:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <FRONT>
	FRONT = NULL;
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	44 e0       	ldi	r20, 0x04	; 4
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	89 ee       	ldi	r24, 0xE9	; 233
     a7a:	9d ef       	ldi	r25, 0xFD	; 253
     a7c:	2b dd       	rcall	.-1450   	; 0x4d4 <LL_ItemInit>
     a7e:	42 dd       	rcall	.-1404   	; 0x504 <LL_ItemListInit>
     a80:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     a84:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <HEAD>
     a88:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <FRONT+0x1>
     a8c:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <FRONT>
	FRONT = HEAD;
     a90:	1a ef       	ldi	r17, 0xFA	; 250
     a92:	0f 2e       	mov	r0, r31
     a94:	f8 ee       	ldi	r31, 0xE8	; 232
     a96:	ef 2e       	mov	r14, r31
     a98:	fd ef       	ldi	r31, 0xFD	; 253
     a9a:	ff 2e       	mov	r15, r31
     a9c:	f0 2d       	mov	r31, r0
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	44 e0       	ldi	r20, 0x04	; 4
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     aa2:	61 2f       	mov	r22, r17
     aa4:	c7 01       	movw	r24, r14
     aa6:	16 dd       	rcall	.-1492   	; 0x4d4 <LL_ItemInit>
     aa8:	bc 01       	movw	r22, r24
     aaa:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     aae:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     ab2:	3c dd       	rcall	.-1416   	; 0x52c <LL_AddBack>
     ab4:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <TAIL+0x1>
     ab8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <TAIL>
     abc:	b1 e0       	ldi	r27, 0x01	; 1
     abe:	eb 1a       	sub	r14, r27
     ac0:	f1 08       	sbc	r15, r1
     ac2:	11 50       	subi	r17, 0x01	; 1
     ac4:	1a 3c       	cpi	r17, 0xCA	; 202
     ac6:	59 f7       	brne	.-42     	; 0xa9e <SYS_Init+0xae>
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;
	for(int i = 0; i < 48; i++)
     ac8:	05 e0       	ldi	r16, 0x05	; 5
     aca:	10 e0       	ldi	r17, 0x00	; 0
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	45 e0       	ldi	r20, 0x05	; 5
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     ad0:	6a ef       	ldi	r22, 0xFA	; 250
     ad2:	88 ee       	ldi	r24, 0xE8	; 232
     ad4:	9d ef       	ldi	r25, 0xFD	; 253
     ad6:	fe dc       	rcall	.-1540   	; 0x4d4 <LL_ItemInit>
     ad8:	bc 01       	movw	r22, r24
     ada:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <HEAD>
		LL_AddBack(HEAD,initNode);
     ade:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <HEAD+0x1>
     ae2:	24 dd       	rcall	.-1464   	; 0x52c <LL_AddBack>
     ae4:	01 50       	subi	r16, 0x01	; 1
     ae6:	11 09       	sbc	r17, r1
     ae8:	89 f7       	brne	.-30     	; 0xacc <SYS_Init+0xdc>
     aea:	00 91 bc 02 	lds	r16, 0x02BC	; 0x8002bc <TAIL>
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
     aee:	10 91 bd 02 	lds	r17, 0x02BD	; 0x8002bd <TAIL+0x1>
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}
	
	char temp[50];
	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
     af2:	f8 01       	movw	r30, r16
     af4:	b2 80       	ldd	r11, Z+2	; 0x02
     af6:	a3 80       	ldd	r10, Z+3	; 0x03
     af8:	d0 90 b8 02 	lds	r13, 0x02B8	; 0x8002b8 <FRONT>
     afc:	c0 90 b9 02 	lds	r12, 0x02B9	; 0x8002b9 <FRONT+0x1>
     b00:	f0 90 b6 02 	lds	r15, 0x02B6	; 0x8002b6 <HEAD>
     b04:	e0 90 b7 02 	lds	r14, 0x02B7	; 0x8002b7 <HEAD+0x1>
     b08:	8f 2d       	mov	r24, r15
     b0a:	9e 2d       	mov	r25, r14
     b0c:	20 dd       	rcall	.-1472   	; 0x54e <LL_Size>
     b0e:	af 92       	push	r10
     b10:	bf 92       	push	r11
     b12:	cf 92       	push	r12
     b14:	df 92       	push	r13
     b16:	1f 93       	push	r17
     b18:	0f 93       	push	r16
     b1a:	ef 92       	push	r14
     b1c:	ff 92       	push	r15
     b1e:	1f 92       	push	r1
     b20:	8f 93       	push	r24
     b22:	80 eb       	ldi	r24, 0xB0	; 176
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	8e 01       	movw	r16, r28
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	1f 93       	push	r17
     b32:	0f 93       	push	r16
     b34:	78 d3       	rcall	.+1776   	; 0x1226 <sprintf>
     b36:	c8 01       	movw	r24, r16
     b38:	25 d2       	rcall	.+1098   	; 0xf84 <UART_SendString>
	UART_SendString(temp);
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
	

}
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	e2 96       	adiw	r28, 0x32	; 50
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	08 95       	ret

00000b66 <SYS_Pause>:
     b66:	3f 92       	push	r3
     b68:	4f 92       	push	r4
     b6a:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     b6c:	6f 92       	push	r6
     b6e:	7f 92       	push	r7
     b70:	8f 92       	push	r8
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	c8 5c       	subi	r28, 0xC8	; 200
     b8e:	d1 09       	sbc	r29, r1
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	f8 2e       	mov	r15, r24
     b9c:	e9 2e       	mov	r14, r25
	cli();
     b9e:	f8 94       	cli
	PWM(0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	e7 dd       	rcall	.-1074   	; 0x774 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     ba6:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <FRONT>
     baa:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <FRONT+0x1>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	8d ed       	ldi	r24, 0xDD	; 221
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	7c 01       	movw	r14, r24
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	30 d3       	rcall	.+1632   	; 0x1226 <sprintf>
	UART_SendString(buffer);
     bc6:	c7 01       	movw	r24, r14
     bc8:	dd d1       	rcall	.+954    	; 0xf84 <UART_SendString>
     bca:	0f 90       	pop	r0
	
	while (LL_GetClass(temp) != END_OF_LIST)
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     bd8:	f1 2c       	mov	r15, r1
     bda:	0f 2e       	mov	r0, r31
	
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     bdc:	f8 ef       	ldi	r31, 0xF8	; 248
     bde:	af 2e       	mov	r10, r31
     be0:	f1 e0       	ldi	r31, 0x01	; 1
     be2:	bf 2e       	mov	r11, r31
     be4:	f0 2d       	mov	r31, r0
     be6:	6e 01       	movw	r12, r28
     be8:	97 e9       	ldi	r25, 0x97	; 151
     bea:	c9 0e       	add	r12, r25
     bec:	d1 1c       	adc	r13, r1
     bee:	27 c0       	rjmp	.+78     	; 0xc3e <SYS_Pause+0xd8>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     bf0:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     bf2:	ee 1a       	sub	r14, r30
     bf4:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     bf6:	c8 01       	movw	r24, r16
     bf8:	e0 dc       	rcall	.-1600   	; 0x5ba <LL_GetStatus>
     bfa:	78 2e       	mov	r7, r24
     bfc:	c8 01       	movw	r24, r16
     bfe:	b8 dc       	rcall	.-1680   	; 0x570 <LL_GetClass>
     c00:	88 2e       	mov	r8, r24
     c02:	c8 01       	movw	r24, r16
     c04:	c0 dc       	rcall	.-1664   	; 0x586 <LL_GetMag>
     c06:	98 2e       	mov	r9, r24
     c08:	c8 01       	movw	r24, r16
     c0a:	b7 dc       	rcall	.-1682   	; 0x57a <LL_GetRefl>
     c0c:	1f 92       	push	r1
     c0e:	7f 92       	push	r7
     c10:	1f 92       	push	r1
     c12:	8f 92       	push	r8
     c14:	1f 92       	push	r1
     c16:	9f 92       	push	r9
     c18:	9f 93       	push	r25
     c1a:	8f 93       	push	r24
     c1c:	ff 92       	push	r15
     c1e:	ef 92       	push	r14
     c20:	bf 92       	push	r11
     c22:	af 92       	push	r10
     c24:	df 92       	push	r13
     c26:	cf 92       	push	r12
     c28:	fe d2       	rcall	.+1532   	; 0x1226 <sprintf>
		UART_SendString(listbuff);
     c2a:	c6 01       	movw	r24, r12
     c2c:	ab d1       	rcall	.+854    	; 0xf84 <UART_SendString>
     c2e:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     c30:	79 dc       	rcall	.-1806   	; 0x524 <LL_Next>
     c32:	8c 01       	movw	r16, r24
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	c8 01       	movw	r24, r16
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     c40:	97 dc       	rcall	.-1746   	; 0x570 <LL_GetClass>
     c42:	85 30       	cpi	r24, 0x05	; 5
     c44:	a9 f6       	brne	.-86     	; 0xbf0 <SYS_Pause+0x8a>
     c46:	0f 2e       	mov	r0, r31
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	cf 2e       	mov	r12, r31
     c4c:	f3 e0       	ldi	r31, 0x03	; 3
     c4e:	df 2e       	mov	r13, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	00 e0       	ldi	r16, 0x00	; 0
     c54:	10 e0       	ldi	r17, 0x00	; 0
     c56:	0f 2e       	mov	r0, r31
     c58:	fc e2       	ldi	r31, 0x2C	; 44
	}
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     c5a:	af 2e       	mov	r10, r31
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	bf 2e       	mov	r11, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	7e 01       	movw	r14, r28
     c64:	97 e9       	ldi	r25, 0x97	; 151
     c66:	e9 0e       	add	r14, r25
     c68:	f1 1c       	adc	r15, r1
     c6a:	f6 01       	movw	r30, r12
     c6c:	80 85       	ldd	r24, Z+8	; 0x08
     c6e:	1f 92       	push	r1
     c70:	8f 93       	push	r24
     c72:	1f 93       	push	r17
     c74:	0f 93       	push	r16
     c76:	bf 92       	push	r11
     c78:	af 92       	push	r10
     c7a:	ff 92       	push	r15
     c7c:	ef 92       	push	r14
     c7e:	d3 d2       	rcall	.+1446   	; 0x1226 <sprintf>
     c80:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     c82:	80 d1       	rcall	.+768    	; 0xf84 <UART_SendString>
     c84:	0f 5f       	subi	r16, 0xFF	; 255
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	for(int i = 0; i < 7; i++)
     c88:	f9 e0       	ldi	r31, 0x09	; 9
     c8a:	cf 0e       	add	r12, r31
     c8c:	d1 1c       	adc	r13, r1
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	07 30       	cpi	r16, 0x07	; 7
     c9a:	11 05       	cpc	r17, r1
     c9c:	31 f7       	brne	.-52     	; 0xc6a <SYS_Pause+0x104>
     c9e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <STAGE2>
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     ca2:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <STAGE2+0x1>
     ca6:	69 dc       	rcall	.-1838   	; 0x57a <LL_GetRefl>
     ca8:	48 2e       	mov	r4, r24
     caa:	39 2e       	mov	r3, r25
     cac:	60 90 4e 03 	lds	r6, 0x034E	; 0x80034e <STAGE2>
     cb0:	50 90 4f 03 	lds	r5, 0x034F	; 0x80034f <STAGE2+0x1>
     cb4:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <STAGE1>
     cb8:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <STAGE1+0x1>
     cbc:	64 dc       	rcall	.-1848   	; 0x586 <LL_GetMag>
     cbe:	78 2e       	mov	r7, r24
     cc0:	90 90 04 03 	lds	r9, 0x0304	; 0x800304 <STAGE1>
     cc4:	80 90 05 03 	lds	r8, 0x0305	; 0x800305 <STAGE1+0x1>
     cc8:	00 91 bc 02 	lds	r16, 0x02BC	; 0x8002bc <TAIL>
     ccc:	10 91 bd 02 	lds	r17, 0x02BD	; 0x8002bd <TAIL+0x1>
     cd0:	f8 01       	movw	r30, r16
     cd2:	b2 80       	ldd	r11, Z+2	; 0x02
     cd4:	a3 80       	ldd	r10, Z+3	; 0x03
     cd6:	d0 90 b8 02 	lds	r13, 0x02B8	; 0x8002b8 <FRONT>
     cda:	c0 90 b9 02 	lds	r12, 0x02B9	; 0x8002b9 <FRONT+0x1>
     cde:	f0 90 b6 02 	lds	r15, 0x02B6	; 0x8002b6 <HEAD>
     ce2:	e0 90 b7 02 	lds	r14, 0x02B7	; 0x8002b7 <HEAD+0x1>
     ce6:	8f 2d       	mov	r24, r15
     ce8:	9e 2d       	mov	r25, r14
     cea:	31 dc       	rcall	.-1950   	; 0x54e <LL_Size>
     cec:	3f 92       	push	r3
     cee:	4f 92       	push	r4
     cf0:	5f 92       	push	r5
     cf2:	6f 92       	push	r6
     cf4:	1f 92       	push	r1
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	1f 93       	push	r17
     d06:	0f 93       	push	r16
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	1f 92       	push	r1
     d0e:	8f 93       	push	r24
     d10:	81 e4       	ldi	r24, 0x41	; 65
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	8e 01       	movw	r16, r28
     d1a:	0b 59       	subi	r16, 0x9B	; 155
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	1f 93       	push	r17
     d20:	0f 93       	push	r16
     d22:	81 d2       	rcall	.+1282   	; 0x1226 <sprintf>
	UART_SendString(anotherbuff);
     d24:	c8 01       	movw	r24, r16
     d26:	2e d1       	rcall	.+604    	; 0xf84 <UART_SendString>
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     d34:	83 70       	andi	r24, 0x03	; 3
     d36:	e9 f7       	brne	.-6      	; 0xd32 <SYS_Pause+0x1cc>
     d38:	86 e8       	ldi	r24, 0x86	; 134
		{
			UART_SendString("Starting System!\r\n");
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	23 d1       	rcall	.+582    	; 0xf84 <UART_SendString>
     d3e:	80 e8       	ldi	r24, 0x80	; 128
     d40:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     d42:	18 dd       	rcall	.-1488   	; 0x774 <PWM>
     d44:	78 94       	sei
     d46:	c8 53       	subi	r28, 0x38	; 56
     d48:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     d4a:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
}
     d4c:	f8 94       	cli
     d4e:	de bf       	out	0x3e, r29	; 62
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	cd bf       	out	0x3d, r28	; 61
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	df 90       	pop	r13
     d62:	cf 90       	pop	r12
     d64:	bf 90       	pop	r11
     d66:	af 90       	pop	r10
     d68:	9f 90       	pop	r9
     d6a:	8f 90       	pop	r8
     d6c:	7f 90       	pop	r7
     d6e:	6f 90       	pop	r6
     d70:	5f 90       	pop	r5
     d72:	4f 90       	pop	r4
     d74:	3f 90       	pop	r3
     d76:	08 95       	ret

00000d78 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	0b b6       	in	r0, 0x3b	; 59
     d84:	0f 92       	push	r0
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
	PORTC ^= 0xFE;
     daa:	98 b1       	in	r25, 0x08	; 8
     dac:	8e ef       	ldi	r24, 0xFE	; 254
     dae:	89 27       	eor	r24, r25
     db0:	88 b9       	out	0x08, r24	; 8
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     db2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_timer_tick>
     db6:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <_timer_tick+0x1>
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <_timer_tick+0x1>
     dc0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_timer_tick>
     dc4:	c6 e0       	ldi	r28, 0x06	; 6
     dc6:	d3 e0       	ldi	r29, 0x03	; 3
     dc8:	0f 2e       	mov	r0, r31
     dca:	fe e4       	ldi	r31, 0x4E	; 78
     dcc:	ef 2e       	mov	r14, r31
     dce:	f3 e0       	ldi	r31, 0x03	; 3
     dd0:	ff 2e       	mov	r15, r31
     dd2:	f0 2d       	mov	r31, r0
     dd4:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     dd6:	ec 81       	ldd	r30, Y+4	; 0x04
     dd8:	fd 81       	ldd	r31, Y+5	; 0x05
     dda:	30 97       	sbiw	r30, 0x00	; 0
     ddc:	e9 f0       	breq	.+58     	; 0xe18 <__vector_17+0xa0>
     dde:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <_timer_tick>
     de2:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <_timer_tick+0x1>
     de6:	28 81       	ld	r18, Y
     de8:	39 81       	ldd	r19, Y+1	; 0x01
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	a1 f4       	brne	.+40     	; 0xe18 <__vector_17+0xa0>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     df0:	88 85       	ldd	r24, Y+8	; 0x08
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	19 f4       	brne	.+6      	; 0xdfc <__vector_17+0x84>
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	9f 81       	ldd	r25, Y+7	; 0x07
     dfa:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     dfc:	d8 01       	movw	r26, r16
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	13 97       	sbiw	r26, 0x03	; 3
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	39 f0       	breq	.+14     	; 0xe18 <__vector_17+0xa0>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     e0a:	2d 91       	ld	r18, X+
     e0c:	3c 91       	ld	r19, X
     e0e:	11 97       	sbiw	r26, 0x01	; 1
     e10:	82 0f       	add	r24, r18
     e12:	93 1f       	adc	r25, r19
     e14:	8d 93       	st	X+, r24
     e16:	9c 93       	st	X, r25
     e18:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     e1a:	ce 15       	cp	r28, r14
     e1c:	df 05       	cpc	r29, r15
     e1e:	d1 f6       	brne	.-76     	; 0xdd4 <__vector_17+0x5c>
	 * sprintf(buf,"%u\r\n", total);
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	PORTC ^= 0xFE;
     e20:	98 b1       	in	r25, 0x08	; 8
     e22:	8e ef       	ldi	r24, 0xFE	; 254
     e24:	89 27       	eor	r24, r25
     e26:	88 b9       	out	0x08, r24	; 8
}
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	0f 90       	pop	r0
     e4e:	0b be       	out	0x3b, r0	; 59
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     e5a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e5e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     e62:	80 ee       	ldi	r24, 0xE0	; 224
     e64:	9d e0       	ldi	r25, 0x0D	; 13
     e66:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e6a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     e6e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     e72:	89 e0       	ldi	r24, 0x09	; 9
     e74:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     e7e:	88 e4       	ldi	r24, 0x48	; 72
     e80:	e6 e0       	ldi	r30, 0x06	; 6
     e82:	f3 e0       	ldi	r31, 0x03	; 3
     e84:	df 01       	movw	r26, r30
     e86:	1d 92       	st	X+, r1
     e88:	8a 95       	dec	r24
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <TIMER_Init+0x2c>

	return 0;
}
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	08 95       	ret

00000e92 <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     e9c:	60 91 0a 03 	lds	r22, 0x030A	; 0x80030a <_timer+0x4>
     ea0:	70 91 0b 03 	lds	r23, 0x030B	; 0x80030b <_timer+0x5>
     ea4:	67 2b       	or	r22, r23
     ea6:	09 f4       	brne	.+2      	; 0xeaa <TIMER_Create+0x18>
     ea8:	49 c0       	rjmp	.+146    	; 0xf3c <TIMER_Create+0xaa>
     eaa:	e6 e0       	ldi	r30, 0x06	; 6
     eac:	f3 e0       	ldi	r31, 0x03	; 3
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     eae:	a1 e0       	ldi	r26, 0x01	; 1
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     eb2:	c5 85       	ldd	r28, Z+13	; 0x0d
     eb4:	d6 85       	ldd	r29, Z+14	; 0x0e
     eb6:	cd 2b       	or	r28, r29
     eb8:	09 f4       	brne	.+2      	; 0xebc <TIMER_Create+0x2a>
     eba:	42 c0       	rjmp	.+132    	; 0xf40 <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	39 96       	adiw	r30, 0x09	; 9
     ec0:	a8 30       	cpi	r26, 0x08	; 8
     ec2:	b1 05       	cpc	r27, r1
     ec4:	b1 f7       	brne	.-20     	; 0xeb2 <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	3f c0       	rjmp	.+126    	; 0xf4a <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     ecc:	fd 01       	movw	r30, r26
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	ee 0f       	add	r30, r30
     ed8:	ff 1f       	adc	r31, r31
     eda:	ea 0f       	add	r30, r26
     edc:	fb 1f       	adc	r31, r27
     ede:	ea 5f       	subi	r30, 0xFA	; 250
     ee0:	fc 4f       	sbci	r31, 0xFC	; 252
     ee2:	93 83       	std	Z+3, r25	; 0x03
     ee4:	82 83       	std	Z+2, r24	; 0x02
     ee6:	0d c0       	rjmp	.+26     	; 0xf02 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     ee8:	fd 01       	movw	r30, r26
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	ea 0f       	add	r30, r26
     ef8:	fb 1f       	adc	r31, r27
     efa:	ea 5f       	subi	r30, 0xFA	; 250
     efc:	fc 4f       	sbci	r31, 0xFC	; 252
     efe:	13 82       	std	Z+3, r1	; 0x03
     f00:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     f02:	fd 01       	movw	r30, r26
     f04:	ee 0f       	add	r30, r30
     f06:	ff 1f       	adc	r31, r31
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ea 0f       	add	r30, r26
     f12:	fb 1f       	adc	r31, r27
     f14:	ea 5f       	subi	r30, 0xFA	; 250
     f16:	fc 4f       	sbci	r31, 0xFC	; 252
     f18:	55 83       	std	Z+5, r21	; 0x05
     f1a:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     f1c:	37 83       	std	Z+7, r19	; 0x07
     f1e:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     f20:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_timer_tick>
     f24:	30 91 9f 02 	lds	r19, 0x029F	; 0x80029f <_timer_tick+0x1>
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
			_timer[i].state = READY;
     f30:	82 e0       	ldi	r24, 0x02	; 2
     f32:	80 87       	std	Z+8, r24	; 0x08
     f34:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     f36:	8a 2f       	mov	r24, r26
     f38:	9b 2f       	mov	r25, r27
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     f40:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f42:	f8 94       	cli
		{
			
			if (periodic != 0) 
     f44:	01 2b       	or	r16, r17
     f46:	11 f6       	brne	.-124    	; 0xecc <TIMER_Create+0x3a>
     f48:	cf cf       	rjmp	.-98     	; 0xee8 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	08 95       	ret

00000f54 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     f54:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     f58:	83 e3       	ldi	r24, 0x33	; 51
     f5a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     f5e:	e9 ec       	ldi	r30, 0xC9	; 201
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	88 61       	ori	r24, 0x18	; 24
     f66:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     f68:	ea ec       	ldi	r30, 0xCA	; 202
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	86 60       	ori	r24, 0x06	; 6
     f70:	80 83       	st	Z, r24
     f72:	08 95       	ret

00000f74 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     f74:	e8 ec       	ldi	r30, 0xC8	; 200
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	90 81       	ld	r25, Z
     f7a:	95 ff       	sbrs	r25, 5
     f7c:	fd cf       	rjmp	.-6      	; 0xf78 <UART_SendChar+0x4>
	UDR1 = c;
     f7e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     f82:	08 95       	ret

00000f84 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     f8a:	88 81       	ld	r24, Y
     f8c:	88 23       	and	r24, r24
     f8e:	29 f0       	breq	.+10     	; 0xf9a <UART_SendString+0x16>
     f90:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
     f92:	f0 df       	rcall	.-32     	; 0xf74 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     f94:	89 91       	ld	r24, Y+
     f96:	81 11       	cpse	r24, r1
     f98:	fc cf       	rjmp	.-8      	; 0xf92 <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <__udivmodsi4>:
     fa0:	a1 e2       	ldi	r26, 0x21	; 33
     fa2:	1a 2e       	mov	r1, r26
     fa4:	aa 1b       	sub	r26, r26
     fa6:	bb 1b       	sub	r27, r27
     fa8:	fd 01       	movw	r30, r26
     faa:	0d c0       	rjmp	.+26     	; 0xfc6 <__udivmodsi4_ep>

00000fac <__udivmodsi4_loop>:
     fac:	aa 1f       	adc	r26, r26
     fae:	bb 1f       	adc	r27, r27
     fb0:	ee 1f       	adc	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	a2 17       	cp	r26, r18
     fb6:	b3 07       	cpc	r27, r19
     fb8:	e4 07       	cpc	r30, r20
     fba:	f5 07       	cpc	r31, r21
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <__udivmodsi4_ep>
     fbe:	a2 1b       	sub	r26, r18
     fc0:	b3 0b       	sbc	r27, r19
     fc2:	e4 0b       	sbc	r30, r20
     fc4:	f5 0b       	sbc	r31, r21

00000fc6 <__udivmodsi4_ep>:
     fc6:	66 1f       	adc	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	88 1f       	adc	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	1a 94       	dec	r1
     fd0:	69 f7       	brne	.-38     	; 0xfac <__udivmodsi4_loop>
     fd2:	60 95       	com	r22
     fd4:	70 95       	com	r23
     fd6:	80 95       	com	r24
     fd8:	90 95       	com	r25
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	bd 01       	movw	r22, r26
     fe0:	cf 01       	movw	r24, r30
     fe2:	08 95       	ret

00000fe4 <malloc>:
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	82 30       	cpi	r24, 0x02	; 2
     fee:	91 05       	cpc	r25, r1
     ff0:	10 f4       	brcc	.+4      	; 0xff6 <malloc+0x12>
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__flp>
     ffa:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <__flp+0x1>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	30 97       	sbiw	r30, 0x00	; 0
    1008:	19 f1       	breq	.+70     	; 0x1050 <malloc+0x6c>
    100a:	40 81       	ld	r20, Z
    100c:	51 81       	ldd	r21, Z+1	; 0x01
    100e:	02 81       	ldd	r16, Z+2	; 0x02
    1010:	13 81       	ldd	r17, Z+3	; 0x03
    1012:	48 17       	cp	r20, r24
    1014:	59 07       	cpc	r21, r25
    1016:	c8 f0       	brcs	.+50     	; 0x104a <malloc+0x66>
    1018:	84 17       	cp	r24, r20
    101a:	95 07       	cpc	r25, r21
    101c:	69 f4       	brne	.+26     	; 0x1038 <malloc+0x54>
    101e:	10 97       	sbiw	r26, 0x00	; 0
    1020:	31 f0       	breq	.+12     	; 0x102e <malloc+0x4a>
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	0c 93       	st	X, r16
    1026:	12 97       	sbiw	r26, 0x02	; 2
    1028:	13 96       	adiw	r26, 0x03	; 3
    102a:	1c 93       	st	X, r17
    102c:	27 c0       	rjmp	.+78     	; 0x107c <malloc+0x98>
    102e:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <__flp>
    1032:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <__flp+0x1>
    1036:	22 c0       	rjmp	.+68     	; 0x107c <malloc+0x98>
    1038:	21 15       	cp	r18, r1
    103a:	31 05       	cpc	r19, r1
    103c:	19 f0       	breq	.+6      	; 0x1044 <malloc+0x60>
    103e:	42 17       	cp	r20, r18
    1040:	53 07       	cpc	r21, r19
    1042:	18 f4       	brcc	.+6      	; 0x104a <malloc+0x66>
    1044:	9a 01       	movw	r18, r20
    1046:	bd 01       	movw	r22, r26
    1048:	ef 01       	movw	r28, r30
    104a:	df 01       	movw	r26, r30
    104c:	f8 01       	movw	r30, r16
    104e:	db cf       	rjmp	.-74     	; 0x1006 <malloc+0x22>
    1050:	21 15       	cp	r18, r1
    1052:	31 05       	cpc	r19, r1
    1054:	f9 f0       	breq	.+62     	; 0x1094 <malloc+0xb0>
    1056:	28 1b       	sub	r18, r24
    1058:	39 0b       	sbc	r19, r25
    105a:	24 30       	cpi	r18, 0x04	; 4
    105c:	31 05       	cpc	r19, r1
    105e:	80 f4       	brcc	.+32     	; 0x1080 <malloc+0x9c>
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	61 15       	cp	r22, r1
    1066:	71 05       	cpc	r23, r1
    1068:	21 f0       	breq	.+8      	; 0x1072 <malloc+0x8e>
    106a:	fb 01       	movw	r30, r22
    106c:	93 83       	std	Z+3, r25	; 0x03
    106e:	82 83       	std	Z+2, r24	; 0x02
    1070:	04 c0       	rjmp	.+8      	; 0x107a <malloc+0x96>
    1072:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <__flp+0x1>
    1076:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <__flp>
    107a:	fe 01       	movw	r30, r28
    107c:	32 96       	adiw	r30, 0x02	; 2
    107e:	44 c0       	rjmp	.+136    	; 0x1108 <malloc+0x124>
    1080:	fe 01       	movw	r30, r28
    1082:	e2 0f       	add	r30, r18
    1084:	f3 1f       	adc	r31, r19
    1086:	81 93       	st	Z+, r24
    1088:	91 93       	st	Z+, r25
    108a:	22 50       	subi	r18, 0x02	; 2
    108c:	31 09       	sbc	r19, r1
    108e:	39 83       	std	Y+1, r19	; 0x01
    1090:	28 83       	st	Y, r18
    1092:	3a c0       	rjmp	.+116    	; 0x1108 <malloc+0x124>
    1094:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    1098:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    109c:	23 2b       	or	r18, r19
    109e:	41 f4       	brne	.+16     	; 0x10b0 <malloc+0xcc>
    10a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10a4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10a8:	30 93 65 03 	sts	0x0365, r19	; 0x800365 <__brkval+0x1>
    10ac:	20 93 64 03 	sts	0x0364, r18	; 0x800364 <__brkval>
    10b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10b8:	21 15       	cp	r18, r1
    10ba:	31 05       	cpc	r19, r1
    10bc:	41 f4       	brne	.+16     	; 0x10ce <malloc+0xea>
    10be:	2d b7       	in	r18, 0x3d	; 61
    10c0:	3e b7       	in	r19, 0x3e	; 62
    10c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10ca:	24 1b       	sub	r18, r20
    10cc:	35 0b       	sbc	r19, r21
    10ce:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <__brkval>
    10d2:	f0 91 65 03 	lds	r31, 0x0365	; 0x800365 <__brkval+0x1>
    10d6:	e2 17       	cp	r30, r18
    10d8:	f3 07       	cpc	r31, r19
    10da:	a0 f4       	brcc	.+40     	; 0x1104 <malloc+0x120>
    10dc:	2e 1b       	sub	r18, r30
    10de:	3f 0b       	sbc	r19, r31
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	78 f0       	brcs	.+30     	; 0x1104 <malloc+0x120>
    10e6:	ac 01       	movw	r20, r24
    10e8:	4e 5f       	subi	r20, 0xFE	; 254
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	24 17       	cp	r18, r20
    10ee:	35 07       	cpc	r19, r21
    10f0:	48 f0       	brcs	.+18     	; 0x1104 <malloc+0x120>
    10f2:	4e 0f       	add	r20, r30
    10f4:	5f 1f       	adc	r21, r31
    10f6:	50 93 65 03 	sts	0x0365, r21	; 0x800365 <__brkval+0x1>
    10fa:	40 93 64 03 	sts	0x0364, r20	; 0x800364 <__brkval>
    10fe:	81 93       	st	Z+, r24
    1100:	91 93       	st	Z+, r25
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <malloc+0x124>
    1104:	e0 e0       	ldi	r30, 0x00	; 0
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	cf 01       	movw	r24, r30
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <free>:
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <free+0xa>
    111c:	81 c0       	rjmp	.+258    	; 0x1220 <free+0x10c>
    111e:	fc 01       	movw	r30, r24
    1120:	32 97       	sbiw	r30, 0x02	; 2
    1122:	13 82       	std	Z+3, r1	; 0x03
    1124:	12 82       	std	Z+2, r1	; 0x02
    1126:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <__flp>
    112a:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <__flp+0x1>
    112e:	10 97       	sbiw	r26, 0x00	; 0
    1130:	81 f4       	brne	.+32     	; 0x1152 <free+0x3e>
    1132:	20 81       	ld	r18, Z
    1134:	31 81       	ldd	r19, Z+1	; 0x01
    1136:	82 0f       	add	r24, r18
    1138:	93 1f       	adc	r25, r19
    113a:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    113e:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1142:	28 17       	cp	r18, r24
    1144:	39 07       	cpc	r19, r25
    1146:	51 f5       	brne	.+84     	; 0x119c <free+0x88>
    1148:	f0 93 65 03 	sts	0x0365, r31	; 0x800365 <__brkval+0x1>
    114c:	e0 93 64 03 	sts	0x0364, r30	; 0x800364 <__brkval>
    1150:	67 c0       	rjmp	.+206    	; 0x1220 <free+0x10c>
    1152:	ed 01       	movw	r28, r26
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	ce 17       	cp	r28, r30
    115a:	df 07       	cpc	r29, r31
    115c:	40 f4       	brcc	.+16     	; 0x116e <free+0x5a>
    115e:	4a 81       	ldd	r20, Y+2	; 0x02
    1160:	5b 81       	ldd	r21, Y+3	; 0x03
    1162:	9e 01       	movw	r18, r28
    1164:	41 15       	cp	r20, r1
    1166:	51 05       	cpc	r21, r1
    1168:	f1 f0       	breq	.+60     	; 0x11a6 <free+0x92>
    116a:	ea 01       	movw	r28, r20
    116c:	f5 cf       	rjmp	.-22     	; 0x1158 <free+0x44>
    116e:	d3 83       	std	Z+3, r29	; 0x03
    1170:	c2 83       	std	Z+2, r28	; 0x02
    1172:	40 81       	ld	r20, Z
    1174:	51 81       	ldd	r21, Z+1	; 0x01
    1176:	84 0f       	add	r24, r20
    1178:	95 1f       	adc	r25, r21
    117a:	c8 17       	cp	r28, r24
    117c:	d9 07       	cpc	r29, r25
    117e:	59 f4       	brne	.+22     	; 0x1196 <free+0x82>
    1180:	88 81       	ld	r24, Y
    1182:	99 81       	ldd	r25, Y+1	; 0x01
    1184:	84 0f       	add	r24, r20
    1186:	95 1f       	adc	r25, r21
    1188:	02 96       	adiw	r24, 0x02	; 2
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	93 83       	std	Z+3, r25	; 0x03
    1194:	82 83       	std	Z+2, r24	; 0x02
    1196:	21 15       	cp	r18, r1
    1198:	31 05       	cpc	r19, r1
    119a:	29 f4       	brne	.+10     	; 0x11a6 <free+0x92>
    119c:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__flp+0x1>
    11a0:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__flp>
    11a4:	3d c0       	rjmp	.+122    	; 0x1220 <free+0x10c>
    11a6:	e9 01       	movw	r28, r18
    11a8:	fb 83       	std	Y+3, r31	; 0x03
    11aa:	ea 83       	std	Y+2, r30	; 0x02
    11ac:	49 91       	ld	r20, Y+
    11ae:	59 91       	ld	r21, Y+
    11b0:	c4 0f       	add	r28, r20
    11b2:	d5 1f       	adc	r29, r21
    11b4:	ec 17       	cp	r30, r28
    11b6:	fd 07       	cpc	r31, r29
    11b8:	61 f4       	brne	.+24     	; 0x11d2 <free+0xbe>
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	84 0f       	add	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	02 96       	adiw	r24, 0x02	; 2
    11c4:	e9 01       	movw	r28, r18
    11c6:	99 83       	std	Y+1, r25	; 0x01
    11c8:	88 83       	st	Y, r24
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	e0 e0       	ldi	r30, 0x00	; 0
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	8d 91       	ld	r24, X+
    11da:	9c 91       	ld	r25, X
    11dc:	13 97       	sbiw	r26, 0x03	; 3
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <free+0xd4>
    11e2:	fd 01       	movw	r30, r26
    11e4:	dc 01       	movw	r26, r24
    11e6:	f7 cf       	rjmp	.-18     	; 0x11d6 <free+0xc2>
    11e8:	8d 91       	ld	r24, X+
    11ea:	9c 91       	ld	r25, X
    11ec:	11 97       	sbiw	r26, 0x01	; 1
    11ee:	9d 01       	movw	r18, r26
    11f0:	2e 5f       	subi	r18, 0xFE	; 254
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	82 0f       	add	r24, r18
    11f6:	93 1f       	adc	r25, r19
    11f8:	20 91 64 03 	lds	r18, 0x0364	; 0x800364 <__brkval>
    11fc:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <__brkval+0x1>
    1200:	28 17       	cp	r18, r24
    1202:	39 07       	cpc	r19, r25
    1204:	69 f4       	brne	.+26     	; 0x1220 <free+0x10c>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	29 f4       	brne	.+10     	; 0x1214 <free+0x100>
    120a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <__flp+0x1>
    120e:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <__flp>
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <free+0x104>
    1214:	13 82       	std	Z+3, r1	; 0x03
    1216:	12 82       	std	Z+2, r1	; 0x02
    1218:	b0 93 65 03 	sts	0x0365, r27	; 0x800365 <__brkval+0x1>
    121c:	a0 93 64 03 	sts	0x0364, r26	; 0x800364 <__brkval>
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	08 95       	ret

00001226 <sprintf>:
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	2e 97       	sbiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	0d 89       	ldd	r16, Y+21	; 0x15
    1240:	1e 89       	ldd	r17, Y+22	; 0x16
    1242:	86 e0       	ldi	r24, 0x06	; 6
    1244:	8c 83       	std	Y+4, r24	; 0x04
    1246:	1a 83       	std	Y+2, r17	; 0x02
    1248:	09 83       	std	Y+1, r16	; 0x01
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f e7       	ldi	r25, 0x7F	; 127
    124e:	9e 83       	std	Y+6, r25	; 0x06
    1250:	8d 83       	std	Y+5, r24	; 0x05
    1252:	ae 01       	movw	r20, r28
    1254:	47 5e       	subi	r20, 0xE7	; 231
    1256:	5f 4f       	sbci	r21, 0xFF	; 255
    1258:	6f 89       	ldd	r22, Y+23	; 0x17
    125a:	78 8d       	ldd	r23, Y+24	; 0x18
    125c:	ce 01       	movw	r24, r28
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	10 d0       	rcall	.+32     	; 0x1282 <vfprintf>
    1262:	ef 81       	ldd	r30, Y+7	; 0x07
    1264:	f8 85       	ldd	r31, Y+8	; 0x08
    1266:	e0 0f       	add	r30, r16
    1268:	f1 1f       	adc	r31, r17
    126a:	10 82       	st	Z, r1
    126c:	2e 96       	adiw	r28, 0x0e	; 14
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <vfprintf>:
    1282:	2f 92       	push	r2
    1284:	3f 92       	push	r3
    1286:	4f 92       	push	r4
    1288:	5f 92       	push	r5
    128a:	6f 92       	push	r6
    128c:	7f 92       	push	r7
    128e:	8f 92       	push	r8
    1290:	9f 92       	push	r9
    1292:	af 92       	push	r10
    1294:	bf 92       	push	r11
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	2b 97       	sbiw	r28, 0x0b	; 11
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	6c 01       	movw	r12, r24
    12b8:	7b 01       	movw	r14, r22
    12ba:	8a 01       	movw	r16, r20
    12bc:	fc 01       	movw	r30, r24
    12be:	17 82       	std	Z+7, r1	; 0x07
    12c0:	16 82       	std	Z+6, r1	; 0x06
    12c2:	83 81       	ldd	r24, Z+3	; 0x03
    12c4:	81 ff       	sbrs	r24, 1
    12c6:	bf c1       	rjmp	.+894    	; 0x1646 <vfprintf+0x3c4>
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	3c 01       	movw	r6, r24
    12ce:	f6 01       	movw	r30, r12
    12d0:	93 81       	ldd	r25, Z+3	; 0x03
    12d2:	f7 01       	movw	r30, r14
    12d4:	93 fd       	sbrc	r25, 3
    12d6:	85 91       	lpm	r24, Z+
    12d8:	93 ff       	sbrs	r25, 3
    12da:	81 91       	ld	r24, Z+
    12dc:	7f 01       	movw	r14, r30
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <vfprintf+0x62>
    12e2:	ad c1       	rjmp	.+858    	; 0x163e <vfprintf+0x3bc>
    12e4:	85 32       	cpi	r24, 0x25	; 37
    12e6:	39 f4       	brne	.+14     	; 0x12f6 <vfprintf+0x74>
    12e8:	93 fd       	sbrc	r25, 3
    12ea:	85 91       	lpm	r24, Z+
    12ec:	93 ff       	sbrs	r25, 3
    12ee:	81 91       	ld	r24, Z+
    12f0:	7f 01       	movw	r14, r30
    12f2:	85 32       	cpi	r24, 0x25	; 37
    12f4:	21 f4       	brne	.+8      	; 0x12fe <vfprintf+0x7c>
    12f6:	b6 01       	movw	r22, r12
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	d6 d1       	rcall	.+940    	; 0x16a8 <fputc>
    12fc:	e8 cf       	rjmp	.-48     	; 0x12ce <vfprintf+0x4c>
    12fe:	91 2c       	mov	r9, r1
    1300:	21 2c       	mov	r2, r1
    1302:	31 2c       	mov	r3, r1
    1304:	ff e1       	ldi	r31, 0x1F	; 31
    1306:	f3 15       	cp	r31, r3
    1308:	d8 f0       	brcs	.+54     	; 0x1340 <vfprintf+0xbe>
    130a:	8b 32       	cpi	r24, 0x2B	; 43
    130c:	79 f0       	breq	.+30     	; 0x132c <vfprintf+0xaa>
    130e:	38 f4       	brcc	.+14     	; 0x131e <vfprintf+0x9c>
    1310:	80 32       	cpi	r24, 0x20	; 32
    1312:	79 f0       	breq	.+30     	; 0x1332 <vfprintf+0xb0>
    1314:	83 32       	cpi	r24, 0x23	; 35
    1316:	a1 f4       	brne	.+40     	; 0x1340 <vfprintf+0xbe>
    1318:	23 2d       	mov	r18, r3
    131a:	20 61       	ori	r18, 0x10	; 16
    131c:	1d c0       	rjmp	.+58     	; 0x1358 <vfprintf+0xd6>
    131e:	8d 32       	cpi	r24, 0x2D	; 45
    1320:	61 f0       	breq	.+24     	; 0x133a <vfprintf+0xb8>
    1322:	80 33       	cpi	r24, 0x30	; 48
    1324:	69 f4       	brne	.+26     	; 0x1340 <vfprintf+0xbe>
    1326:	23 2d       	mov	r18, r3
    1328:	21 60       	ori	r18, 0x01	; 1
    132a:	16 c0       	rjmp	.+44     	; 0x1358 <vfprintf+0xd6>
    132c:	83 2d       	mov	r24, r3
    132e:	82 60       	ori	r24, 0x02	; 2
    1330:	38 2e       	mov	r3, r24
    1332:	e3 2d       	mov	r30, r3
    1334:	e4 60       	ori	r30, 0x04	; 4
    1336:	3e 2e       	mov	r3, r30
    1338:	2a c0       	rjmp	.+84     	; 0x138e <vfprintf+0x10c>
    133a:	f3 2d       	mov	r31, r3
    133c:	f8 60       	ori	r31, 0x08	; 8
    133e:	1d c0       	rjmp	.+58     	; 0x137a <vfprintf+0xf8>
    1340:	37 fc       	sbrc	r3, 7
    1342:	2d c0       	rjmp	.+90     	; 0x139e <vfprintf+0x11c>
    1344:	20 ed       	ldi	r18, 0xD0	; 208
    1346:	28 0f       	add	r18, r24
    1348:	2a 30       	cpi	r18, 0x0A	; 10
    134a:	40 f0       	brcs	.+16     	; 0x135c <vfprintf+0xda>
    134c:	8e 32       	cpi	r24, 0x2E	; 46
    134e:	b9 f4       	brne	.+46     	; 0x137e <vfprintf+0xfc>
    1350:	36 fc       	sbrc	r3, 6
    1352:	75 c1       	rjmp	.+746    	; 0x163e <vfprintf+0x3bc>
    1354:	23 2d       	mov	r18, r3
    1356:	20 64       	ori	r18, 0x40	; 64
    1358:	32 2e       	mov	r3, r18
    135a:	19 c0       	rjmp	.+50     	; 0x138e <vfprintf+0x10c>
    135c:	36 fe       	sbrs	r3, 6
    135e:	06 c0       	rjmp	.+12     	; 0x136c <vfprintf+0xea>
    1360:	8a e0       	ldi	r24, 0x0A	; 10
    1362:	98 9e       	mul	r9, r24
    1364:	20 0d       	add	r18, r0
    1366:	11 24       	eor	r1, r1
    1368:	92 2e       	mov	r9, r18
    136a:	11 c0       	rjmp	.+34     	; 0x138e <vfprintf+0x10c>
    136c:	ea e0       	ldi	r30, 0x0A	; 10
    136e:	2e 9e       	mul	r2, r30
    1370:	20 0d       	add	r18, r0
    1372:	11 24       	eor	r1, r1
    1374:	22 2e       	mov	r2, r18
    1376:	f3 2d       	mov	r31, r3
    1378:	f0 62       	ori	r31, 0x20	; 32
    137a:	3f 2e       	mov	r3, r31
    137c:	08 c0       	rjmp	.+16     	; 0x138e <vfprintf+0x10c>
    137e:	8c 36       	cpi	r24, 0x6C	; 108
    1380:	21 f4       	brne	.+8      	; 0x138a <vfprintf+0x108>
    1382:	83 2d       	mov	r24, r3
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	38 2e       	mov	r3, r24
    1388:	02 c0       	rjmp	.+4      	; 0x138e <vfprintf+0x10c>
    138a:	88 36       	cpi	r24, 0x68	; 104
    138c:	41 f4       	brne	.+16     	; 0x139e <vfprintf+0x11c>
    138e:	f7 01       	movw	r30, r14
    1390:	93 fd       	sbrc	r25, 3
    1392:	85 91       	lpm	r24, Z+
    1394:	93 ff       	sbrs	r25, 3
    1396:	81 91       	ld	r24, Z+
    1398:	7f 01       	movw	r14, r30
    139a:	81 11       	cpse	r24, r1
    139c:	b3 cf       	rjmp	.-154    	; 0x1304 <vfprintf+0x82>
    139e:	98 2f       	mov	r25, r24
    13a0:	9f 7d       	andi	r25, 0xDF	; 223
    13a2:	95 54       	subi	r25, 0x45	; 69
    13a4:	93 30       	cpi	r25, 0x03	; 3
    13a6:	28 f4       	brcc	.+10     	; 0x13b2 <vfprintf+0x130>
    13a8:	0c 5f       	subi	r16, 0xFC	; 252
    13aa:	1f 4f       	sbci	r17, 0xFF	; 255
    13ac:	9f e3       	ldi	r25, 0x3F	; 63
    13ae:	99 83       	std	Y+1, r25	; 0x01
    13b0:	0d c0       	rjmp	.+26     	; 0x13cc <vfprintf+0x14a>
    13b2:	83 36       	cpi	r24, 0x63	; 99
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <vfprintf+0x140>
    13b6:	83 37       	cpi	r24, 0x73	; 115
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <vfprintf+0x154>
    13ba:	83 35       	cpi	r24, 0x53	; 83
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <vfprintf+0x13e>
    13be:	55 c0       	rjmp	.+170    	; 0x146a <vfprintf+0x1e8>
    13c0:	20 c0       	rjmp	.+64     	; 0x1402 <vfprintf+0x180>
    13c2:	f8 01       	movw	r30, r16
    13c4:	80 81       	ld	r24, Z
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	0e 5f       	subi	r16, 0xFE	; 254
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	88 24       	eor	r8, r8
    13ce:	83 94       	inc	r8
    13d0:	91 2c       	mov	r9, r1
    13d2:	53 01       	movw	r10, r6
    13d4:	12 c0       	rjmp	.+36     	; 0x13fa <vfprintf+0x178>
    13d6:	28 01       	movw	r4, r16
    13d8:	f2 e0       	ldi	r31, 0x02	; 2
    13da:	4f 0e       	add	r4, r31
    13dc:	51 1c       	adc	r5, r1
    13de:	f8 01       	movw	r30, r16
    13e0:	a0 80       	ld	r10, Z
    13e2:	b1 80       	ldd	r11, Z+1	; 0x01
    13e4:	36 fe       	sbrs	r3, 6
    13e6:	03 c0       	rjmp	.+6      	; 0x13ee <vfprintf+0x16c>
    13e8:	69 2d       	mov	r22, r9
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <vfprintf+0x170>
    13ee:	6f ef       	ldi	r22, 0xFF	; 255
    13f0:	7f ef       	ldi	r23, 0xFF	; 255
    13f2:	c5 01       	movw	r24, r10
    13f4:	4e d1       	rcall	.+668    	; 0x1692 <strnlen>
    13f6:	4c 01       	movw	r8, r24
    13f8:	82 01       	movw	r16, r4
    13fa:	f3 2d       	mov	r31, r3
    13fc:	ff 77       	andi	r31, 0x7F	; 127
    13fe:	3f 2e       	mov	r3, r31
    1400:	15 c0       	rjmp	.+42     	; 0x142c <vfprintf+0x1aa>
    1402:	28 01       	movw	r4, r16
    1404:	22 e0       	ldi	r18, 0x02	; 2
    1406:	42 0e       	add	r4, r18
    1408:	51 1c       	adc	r5, r1
    140a:	f8 01       	movw	r30, r16
    140c:	a0 80       	ld	r10, Z
    140e:	b1 80       	ldd	r11, Z+1	; 0x01
    1410:	36 fe       	sbrs	r3, 6
    1412:	03 c0       	rjmp	.+6      	; 0x141a <vfprintf+0x198>
    1414:	69 2d       	mov	r22, r9
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	02 c0       	rjmp	.+4      	; 0x141e <vfprintf+0x19c>
    141a:	6f ef       	ldi	r22, 0xFF	; 255
    141c:	7f ef       	ldi	r23, 0xFF	; 255
    141e:	c5 01       	movw	r24, r10
    1420:	2d d1       	rcall	.+602    	; 0x167c <strnlen_P>
    1422:	4c 01       	movw	r8, r24
    1424:	f3 2d       	mov	r31, r3
    1426:	f0 68       	ori	r31, 0x80	; 128
    1428:	3f 2e       	mov	r3, r31
    142a:	82 01       	movw	r16, r4
    142c:	33 fc       	sbrc	r3, 3
    142e:	19 c0       	rjmp	.+50     	; 0x1462 <vfprintf+0x1e0>
    1430:	82 2d       	mov	r24, r2
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	88 16       	cp	r8, r24
    1436:	99 06       	cpc	r9, r25
    1438:	a0 f4       	brcc	.+40     	; 0x1462 <vfprintf+0x1e0>
    143a:	b6 01       	movw	r22, r12
    143c:	80 e2       	ldi	r24, 0x20	; 32
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	33 d1       	rcall	.+614    	; 0x16a8 <fputc>
    1442:	2a 94       	dec	r2
    1444:	f5 cf       	rjmp	.-22     	; 0x1430 <vfprintf+0x1ae>
    1446:	f5 01       	movw	r30, r10
    1448:	37 fc       	sbrc	r3, 7
    144a:	85 91       	lpm	r24, Z+
    144c:	37 fe       	sbrs	r3, 7
    144e:	81 91       	ld	r24, Z+
    1450:	5f 01       	movw	r10, r30
    1452:	b6 01       	movw	r22, r12
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	28 d1       	rcall	.+592    	; 0x16a8 <fputc>
    1458:	21 10       	cpse	r2, r1
    145a:	2a 94       	dec	r2
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	82 1a       	sub	r8, r18
    1460:	91 08       	sbc	r9, r1
    1462:	81 14       	cp	r8, r1
    1464:	91 04       	cpc	r9, r1
    1466:	79 f7       	brne	.-34     	; 0x1446 <vfprintf+0x1c4>
    1468:	e1 c0       	rjmp	.+450    	; 0x162c <vfprintf+0x3aa>
    146a:	84 36       	cpi	r24, 0x64	; 100
    146c:	11 f0       	breq	.+4      	; 0x1472 <vfprintf+0x1f0>
    146e:	89 36       	cpi	r24, 0x69	; 105
    1470:	39 f5       	brne	.+78     	; 0x14c0 <vfprintf+0x23e>
    1472:	f8 01       	movw	r30, r16
    1474:	37 fe       	sbrs	r3, 7
    1476:	07 c0       	rjmp	.+14     	; 0x1486 <vfprintf+0x204>
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	0c 5f       	subi	r16, 0xFC	; 252
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <vfprintf+0x214>
    1486:	60 81       	ld	r22, Z
    1488:	71 81       	ldd	r23, Z+1	; 0x01
    148a:	07 2e       	mov	r0, r23
    148c:	00 0c       	add	r0, r0
    148e:	88 0b       	sbc	r24, r24
    1490:	99 0b       	sbc	r25, r25
    1492:	0e 5f       	subi	r16, 0xFE	; 254
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	f3 2d       	mov	r31, r3
    1498:	ff 76       	andi	r31, 0x6F	; 111
    149a:	3f 2e       	mov	r3, r31
    149c:	97 ff       	sbrs	r25, 7
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <vfprintf+0x230>
    14a0:	90 95       	com	r25
    14a2:	80 95       	com	r24
    14a4:	70 95       	com	r23
    14a6:	61 95       	neg	r22
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	8f 4f       	sbci	r24, 0xFF	; 255
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	f0 68       	ori	r31, 0x80	; 128
    14b0:	3f 2e       	mov	r3, r31
    14b2:	2a e0       	ldi	r18, 0x0A	; 10
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	a3 01       	movw	r20, r6
    14b8:	33 d1       	rcall	.+614    	; 0x1720 <__ultoa_invert>
    14ba:	88 2e       	mov	r8, r24
    14bc:	86 18       	sub	r8, r6
    14be:	44 c0       	rjmp	.+136    	; 0x1548 <vfprintf+0x2c6>
    14c0:	85 37       	cpi	r24, 0x75	; 117
    14c2:	31 f4       	brne	.+12     	; 0x14d0 <vfprintf+0x24e>
    14c4:	23 2d       	mov	r18, r3
    14c6:	2f 7e       	andi	r18, 0xEF	; 239
    14c8:	b2 2e       	mov	r11, r18
    14ca:	2a e0       	ldi	r18, 0x0A	; 10
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	25 c0       	rjmp	.+74     	; 0x151a <vfprintf+0x298>
    14d0:	93 2d       	mov	r25, r3
    14d2:	99 7f       	andi	r25, 0xF9	; 249
    14d4:	b9 2e       	mov	r11, r25
    14d6:	8f 36       	cpi	r24, 0x6F	; 111
    14d8:	c1 f0       	breq	.+48     	; 0x150a <vfprintf+0x288>
    14da:	18 f4       	brcc	.+6      	; 0x14e2 <vfprintf+0x260>
    14dc:	88 35       	cpi	r24, 0x58	; 88
    14de:	79 f0       	breq	.+30     	; 0x14fe <vfprintf+0x27c>
    14e0:	ae c0       	rjmp	.+348    	; 0x163e <vfprintf+0x3bc>
    14e2:	80 37       	cpi	r24, 0x70	; 112
    14e4:	19 f0       	breq	.+6      	; 0x14ec <vfprintf+0x26a>
    14e6:	88 37       	cpi	r24, 0x78	; 120
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <vfprintf+0x270>
    14ea:	a9 c0       	rjmp	.+338    	; 0x163e <vfprintf+0x3bc>
    14ec:	e9 2f       	mov	r30, r25
    14ee:	e0 61       	ori	r30, 0x10	; 16
    14f0:	be 2e       	mov	r11, r30
    14f2:	b4 fe       	sbrs	r11, 4
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <vfprintf+0x28e>
    14f6:	fb 2d       	mov	r31, r11
    14f8:	f4 60       	ori	r31, 0x04	; 4
    14fa:	bf 2e       	mov	r11, r31
    14fc:	09 c0       	rjmp	.+18     	; 0x1510 <vfprintf+0x28e>
    14fe:	34 fe       	sbrs	r3, 4
    1500:	0a c0       	rjmp	.+20     	; 0x1516 <vfprintf+0x294>
    1502:	29 2f       	mov	r18, r25
    1504:	26 60       	ori	r18, 0x06	; 6
    1506:	b2 2e       	mov	r11, r18
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0x294>
    150a:	28 e0       	ldi	r18, 0x08	; 8
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	05 c0       	rjmp	.+10     	; 0x151a <vfprintf+0x298>
    1510:	20 e1       	ldi	r18, 0x10	; 16
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x298>
    1516:	20 e1       	ldi	r18, 0x10	; 16
    1518:	32 e0       	ldi	r19, 0x02	; 2
    151a:	f8 01       	movw	r30, r16
    151c:	b7 fe       	sbrs	r11, 7
    151e:	07 c0       	rjmp	.+14     	; 0x152e <vfprintf+0x2ac>
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	82 81       	ldd	r24, Z+2	; 0x02
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	0c 5f       	subi	r16, 0xFC	; 252
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	06 c0       	rjmp	.+12     	; 0x153a <vfprintf+0x2b8>
    152e:	60 81       	ld	r22, Z
    1530:	71 81       	ldd	r23, Z+1	; 0x01
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 5f       	subi	r16, 0xFE	; 254
    1538:	1f 4f       	sbci	r17, 0xFF	; 255
    153a:	a3 01       	movw	r20, r6
    153c:	f1 d0       	rcall	.+482    	; 0x1720 <__ultoa_invert>
    153e:	88 2e       	mov	r8, r24
    1540:	86 18       	sub	r8, r6
    1542:	fb 2d       	mov	r31, r11
    1544:	ff 77       	andi	r31, 0x7F	; 127
    1546:	3f 2e       	mov	r3, r31
    1548:	36 fe       	sbrs	r3, 6
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x2e4>
    154c:	23 2d       	mov	r18, r3
    154e:	2e 7f       	andi	r18, 0xFE	; 254
    1550:	a2 2e       	mov	r10, r18
    1552:	89 14       	cp	r8, r9
    1554:	58 f4       	brcc	.+22     	; 0x156c <vfprintf+0x2ea>
    1556:	34 fe       	sbrs	r3, 4
    1558:	0b c0       	rjmp	.+22     	; 0x1570 <vfprintf+0x2ee>
    155a:	32 fc       	sbrc	r3, 2
    155c:	09 c0       	rjmp	.+18     	; 0x1570 <vfprintf+0x2ee>
    155e:	83 2d       	mov	r24, r3
    1560:	8e 7e       	andi	r24, 0xEE	; 238
    1562:	a8 2e       	mov	r10, r24
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <vfprintf+0x2ee>
    1566:	b8 2c       	mov	r11, r8
    1568:	a3 2c       	mov	r10, r3
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <vfprintf+0x2f0>
    156c:	b8 2c       	mov	r11, r8
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <vfprintf+0x2f0>
    1570:	b9 2c       	mov	r11, r9
    1572:	a4 fe       	sbrs	r10, 4
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <vfprintf+0x312>
    1576:	fe 01       	movw	r30, r28
    1578:	e8 0d       	add	r30, r8
    157a:	f1 1d       	adc	r31, r1
    157c:	80 81       	ld	r24, Z
    157e:	80 33       	cpi	r24, 0x30	; 48
    1580:	21 f4       	brne	.+8      	; 0x158a <vfprintf+0x308>
    1582:	9a 2d       	mov	r25, r10
    1584:	99 7e       	andi	r25, 0xE9	; 233
    1586:	a9 2e       	mov	r10, r25
    1588:	09 c0       	rjmp	.+18     	; 0x159c <vfprintf+0x31a>
    158a:	a2 fe       	sbrs	r10, 2
    158c:	06 c0       	rjmp	.+12     	; 0x159a <vfprintf+0x318>
    158e:	b3 94       	inc	r11
    1590:	b3 94       	inc	r11
    1592:	04 c0       	rjmp	.+8      	; 0x159c <vfprintf+0x31a>
    1594:	8a 2d       	mov	r24, r10
    1596:	86 78       	andi	r24, 0x86	; 134
    1598:	09 f0       	breq	.+2      	; 0x159c <vfprintf+0x31a>
    159a:	b3 94       	inc	r11
    159c:	a3 fc       	sbrc	r10, 3
    159e:	10 c0       	rjmp	.+32     	; 0x15c0 <vfprintf+0x33e>
    15a0:	a0 fe       	sbrs	r10, 0
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x32e>
    15a4:	b2 14       	cp	r11, r2
    15a6:	80 f4       	brcc	.+32     	; 0x15c8 <vfprintf+0x346>
    15a8:	28 0c       	add	r2, r8
    15aa:	92 2c       	mov	r9, r2
    15ac:	9b 18       	sub	r9, r11
    15ae:	0d c0       	rjmp	.+26     	; 0x15ca <vfprintf+0x348>
    15b0:	b2 14       	cp	r11, r2
    15b2:	58 f4       	brcc	.+22     	; 0x15ca <vfprintf+0x348>
    15b4:	b6 01       	movw	r22, r12
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	76 d0       	rcall	.+236    	; 0x16a8 <fputc>
    15bc:	b3 94       	inc	r11
    15be:	f8 cf       	rjmp	.-16     	; 0x15b0 <vfprintf+0x32e>
    15c0:	b2 14       	cp	r11, r2
    15c2:	18 f4       	brcc	.+6      	; 0x15ca <vfprintf+0x348>
    15c4:	2b 18       	sub	r2, r11
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <vfprintf+0x34a>
    15c8:	98 2c       	mov	r9, r8
    15ca:	21 2c       	mov	r2, r1
    15cc:	a4 fe       	sbrs	r10, 4
    15ce:	0f c0       	rjmp	.+30     	; 0x15ee <vfprintf+0x36c>
    15d0:	b6 01       	movw	r22, r12
    15d2:	80 e3       	ldi	r24, 0x30	; 48
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	68 d0       	rcall	.+208    	; 0x16a8 <fputc>
    15d8:	a2 fe       	sbrs	r10, 2
    15da:	16 c0       	rjmp	.+44     	; 0x1608 <vfprintf+0x386>
    15dc:	a1 fc       	sbrc	r10, 1
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <vfprintf+0x364>
    15e0:	88 e7       	ldi	r24, 0x78	; 120
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x368>
    15e6:	88 e5       	ldi	r24, 0x58	; 88
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b6 01       	movw	r22, r12
    15ec:	0c c0       	rjmp	.+24     	; 0x1606 <vfprintf+0x384>
    15ee:	8a 2d       	mov	r24, r10
    15f0:	86 78       	andi	r24, 0x86	; 134
    15f2:	51 f0       	breq	.+20     	; 0x1608 <vfprintf+0x386>
    15f4:	a1 fe       	sbrs	r10, 1
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x37a>
    15f8:	8b e2       	ldi	r24, 0x2B	; 43
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <vfprintf+0x37c>
    15fc:	80 e2       	ldi	r24, 0x20	; 32
    15fe:	a7 fc       	sbrc	r10, 7
    1600:	8d e2       	ldi	r24, 0x2D	; 45
    1602:	b6 01       	movw	r22, r12
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	50 d0       	rcall	.+160    	; 0x16a8 <fputc>
    1608:	89 14       	cp	r8, r9
    160a:	30 f4       	brcc	.+12     	; 0x1618 <vfprintf+0x396>
    160c:	b6 01       	movw	r22, r12
    160e:	80 e3       	ldi	r24, 0x30	; 48
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	4a d0       	rcall	.+148    	; 0x16a8 <fputc>
    1614:	9a 94       	dec	r9
    1616:	f8 cf       	rjmp	.-16     	; 0x1608 <vfprintf+0x386>
    1618:	8a 94       	dec	r8
    161a:	f3 01       	movw	r30, r6
    161c:	e8 0d       	add	r30, r8
    161e:	f1 1d       	adc	r31, r1
    1620:	80 81       	ld	r24, Z
    1622:	b6 01       	movw	r22, r12
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	40 d0       	rcall	.+128    	; 0x16a8 <fputc>
    1628:	81 10       	cpse	r8, r1
    162a:	f6 cf       	rjmp	.-20     	; 0x1618 <vfprintf+0x396>
    162c:	22 20       	and	r2, r2
    162e:	09 f4       	brne	.+2      	; 0x1632 <vfprintf+0x3b0>
    1630:	4e ce       	rjmp	.-868    	; 0x12ce <vfprintf+0x4c>
    1632:	b6 01       	movw	r22, r12
    1634:	80 e2       	ldi	r24, 0x20	; 32
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	37 d0       	rcall	.+110    	; 0x16a8 <fputc>
    163a:	2a 94       	dec	r2
    163c:	f7 cf       	rjmp	.-18     	; 0x162c <vfprintf+0x3aa>
    163e:	f6 01       	movw	r30, r12
    1640:	86 81       	ldd	r24, Z+6	; 0x06
    1642:	97 81       	ldd	r25, Z+7	; 0x07
    1644:	02 c0       	rjmp	.+4      	; 0x164a <vfprintf+0x3c8>
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	2b 96       	adiw	r28, 0x0b	; 11
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	cf 90       	pop	r12
    1666:	bf 90       	pop	r11
    1668:	af 90       	pop	r10
    166a:	9f 90       	pop	r9
    166c:	8f 90       	pop	r8
    166e:	7f 90       	pop	r7
    1670:	6f 90       	pop	r6
    1672:	5f 90       	pop	r5
    1674:	4f 90       	pop	r4
    1676:	3f 90       	pop	r3
    1678:	2f 90       	pop	r2
    167a:	08 95       	ret

0000167c <strnlen_P>:
    167c:	fc 01       	movw	r30, r24
    167e:	05 90       	lpm	r0, Z+
    1680:	61 50       	subi	r22, 0x01	; 1
    1682:	70 40       	sbci	r23, 0x00	; 0
    1684:	01 10       	cpse	r0, r1
    1686:	d8 f7       	brcc	.-10     	; 0x167e <strnlen_P+0x2>
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	08 95       	ret

00001692 <strnlen>:
    1692:	fc 01       	movw	r30, r24
    1694:	61 50       	subi	r22, 0x01	; 1
    1696:	70 40       	sbci	r23, 0x00	; 0
    1698:	01 90       	ld	r0, Z+
    169a:	01 10       	cpse	r0, r1
    169c:	d8 f7       	brcc	.-10     	; 0x1694 <strnlen+0x2>
    169e:	80 95       	com	r24
    16a0:	90 95       	com	r25
    16a2:	8e 0f       	add	r24, r30
    16a4:	9f 1f       	adc	r25, r31
    16a6:	08 95       	ret

000016a8 <fputc>:
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	fb 01       	movw	r30, r22
    16b2:	23 81       	ldd	r18, Z+3	; 0x03
    16b4:	21 fd       	sbrc	r18, 1
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <fputc+0x16>
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	9f ef       	ldi	r25, 0xFF	; 255
    16bc:	2c c0       	rjmp	.+88     	; 0x1716 <fputc+0x6e>
    16be:	22 ff       	sbrs	r18, 2
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <fputc+0x46>
    16c2:	46 81       	ldd	r20, Z+6	; 0x06
    16c4:	57 81       	ldd	r21, Z+7	; 0x07
    16c6:	24 81       	ldd	r18, Z+4	; 0x04
    16c8:	35 81       	ldd	r19, Z+5	; 0x05
    16ca:	42 17       	cp	r20, r18
    16cc:	53 07       	cpc	r21, r19
    16ce:	44 f4       	brge	.+16     	; 0x16e0 <fputc+0x38>
    16d0:	a0 81       	ld	r26, Z
    16d2:	b1 81       	ldd	r27, Z+1	; 0x01
    16d4:	9d 01       	movw	r18, r26
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	31 83       	std	Z+1, r19	; 0x01
    16dc:	20 83       	st	Z, r18
    16de:	8c 93       	st	X, r24
    16e0:	26 81       	ldd	r18, Z+6	; 0x06
    16e2:	37 81       	ldd	r19, Z+7	; 0x07
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	37 83       	std	Z+7, r19	; 0x07
    16ea:	26 83       	std	Z+6, r18	; 0x06
    16ec:	14 c0       	rjmp	.+40     	; 0x1716 <fputc+0x6e>
    16ee:	8b 01       	movw	r16, r22
    16f0:	ec 01       	movw	r28, r24
    16f2:	fb 01       	movw	r30, r22
    16f4:	00 84       	ldd	r0, Z+8	; 0x08
    16f6:	f1 85       	ldd	r31, Z+9	; 0x09
    16f8:	e0 2d       	mov	r30, r0
    16fa:	09 95       	icall
    16fc:	89 2b       	or	r24, r25
    16fe:	e1 f6       	brne	.-72     	; 0x16b8 <fputc+0x10>
    1700:	d8 01       	movw	r26, r16
    1702:	16 96       	adiw	r26, 0x06	; 6
    1704:	8d 91       	ld	r24, X+
    1706:	9c 91       	ld	r25, X
    1708:	17 97       	sbiw	r26, 0x07	; 7
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	17 96       	adiw	r26, 0x07	; 7
    170e:	9c 93       	st	X, r25
    1710:	8e 93       	st	-X, r24
    1712:	16 97       	sbiw	r26, 0x06	; 6
    1714:	ce 01       	movw	r24, r28
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <__ultoa_invert>:
    1720:	fa 01       	movw	r30, r20
    1722:	aa 27       	eor	r26, r26
    1724:	28 30       	cpi	r18, 0x08	; 8
    1726:	51 f1       	breq	.+84     	; 0x177c <__ultoa_invert+0x5c>
    1728:	20 31       	cpi	r18, 0x10	; 16
    172a:	81 f1       	breq	.+96     	; 0x178c <__ultoa_invert+0x6c>
    172c:	e8 94       	clt
    172e:	6f 93       	push	r22
    1730:	6e 7f       	andi	r22, 0xFE	; 254
    1732:	6e 5f       	subi	r22, 0xFE	; 254
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	af 4f       	sbci	r26, 0xFF	; 255
    173c:	b1 e0       	ldi	r27, 0x01	; 1
    173e:	3e d0       	rcall	.+124    	; 0x17bc <__ultoa_invert+0x9c>
    1740:	b4 e0       	ldi	r27, 0x04	; 4
    1742:	3c d0       	rcall	.+120    	; 0x17bc <__ultoa_invert+0x9c>
    1744:	67 0f       	add	r22, r23
    1746:	78 1f       	adc	r23, r24
    1748:	89 1f       	adc	r24, r25
    174a:	9a 1f       	adc	r25, r26
    174c:	a1 1d       	adc	r26, r1
    174e:	68 0f       	add	r22, r24
    1750:	79 1f       	adc	r23, r25
    1752:	8a 1f       	adc	r24, r26
    1754:	91 1d       	adc	r25, r1
    1756:	a1 1d       	adc	r26, r1
    1758:	6a 0f       	add	r22, r26
    175a:	71 1d       	adc	r23, r1
    175c:	81 1d       	adc	r24, r1
    175e:	91 1d       	adc	r25, r1
    1760:	a1 1d       	adc	r26, r1
    1762:	20 d0       	rcall	.+64     	; 0x17a4 <__ultoa_invert+0x84>
    1764:	09 f4       	brne	.+2      	; 0x1768 <__ultoa_invert+0x48>
    1766:	68 94       	set
    1768:	3f 91       	pop	r19
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	26 9f       	mul	r18, r22
    176e:	11 24       	eor	r1, r1
    1770:	30 19       	sub	r19, r0
    1772:	30 5d       	subi	r19, 0xD0	; 208
    1774:	31 93       	st	Z+, r19
    1776:	de f6       	brtc	.-74     	; 0x172e <__ultoa_invert+0xe>
    1778:	cf 01       	movw	r24, r30
    177a:	08 95       	ret
    177c:	46 2f       	mov	r20, r22
    177e:	47 70       	andi	r20, 0x07	; 7
    1780:	40 5d       	subi	r20, 0xD0	; 208
    1782:	41 93       	st	Z+, r20
    1784:	b3 e0       	ldi	r27, 0x03	; 3
    1786:	0f d0       	rcall	.+30     	; 0x17a6 <__ultoa_invert+0x86>
    1788:	c9 f7       	brne	.-14     	; 0x177c <__ultoa_invert+0x5c>
    178a:	f6 cf       	rjmp	.-20     	; 0x1778 <__ultoa_invert+0x58>
    178c:	46 2f       	mov	r20, r22
    178e:	4f 70       	andi	r20, 0x0F	; 15
    1790:	40 5d       	subi	r20, 0xD0	; 208
    1792:	4a 33       	cpi	r20, 0x3A	; 58
    1794:	18 f0       	brcs	.+6      	; 0x179c <__ultoa_invert+0x7c>
    1796:	49 5d       	subi	r20, 0xD9	; 217
    1798:	31 fd       	sbrc	r19, 1
    179a:	40 52       	subi	r20, 0x20	; 32
    179c:	41 93       	st	Z+, r20
    179e:	02 d0       	rcall	.+4      	; 0x17a4 <__ultoa_invert+0x84>
    17a0:	a9 f7       	brne	.-22     	; 0x178c <__ultoa_invert+0x6c>
    17a2:	ea cf       	rjmp	.-44     	; 0x1778 <__ultoa_invert+0x58>
    17a4:	b4 e0       	ldi	r27, 0x04	; 4
    17a6:	a6 95       	lsr	r26
    17a8:	97 95       	ror	r25
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	ba 95       	dec	r27
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0x86>
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 05       	cpc	r22, r1
    17b8:	71 05       	cpc	r23, r1
    17ba:	08 95       	ret
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	0a 2e       	mov	r0, r26
    17c2:	06 94       	lsr	r0
    17c4:	57 95       	ror	r21
    17c6:	47 95       	ror	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	ba 95       	dec	r27
    17ce:	c9 f7       	brne	.-14     	; 0x17c2 <__ultoa_invert+0xa2>
    17d0:	62 0f       	add	r22, r18
    17d2:	73 1f       	adc	r23, r19
    17d4:	84 1f       	adc	r24, r20
    17d6:	95 1f       	adc	r25, r21
    17d8:	a0 1d       	adc	r26, r0
    17da:	08 95       	ret

000017dc <_exit>:
    17dc:	f8 94       	cli

000017de <__stop_program>:
    17de:	ff cf       	rjmp	.-2      	; 0x17de <__stop_program>
