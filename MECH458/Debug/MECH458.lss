
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b2  00800100  00001d22  00001db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008004b2  008004b2  00002168  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005682  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b64  00000000  00000000  00007bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003535  00000000  00000000  0000971a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  0000cc50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009262  00000000  00000000  0000d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b4a  00000000  00000000  00016742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0001828c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  000185c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	ff c5       	rjmp	.+3070   	; 0xc34 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e2 e2       	ldi	r30, 0x22	; 34
      ac:	fd e1       	ldi	r31, 0x1D	; 29
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 3b       	cpi	r26, 0xB2	; 178
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	25 e0       	ldi	r18, 0x05	; 5
      c0:	a2 eb       	ldi	r26, 0xB2	; 178
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a2 34       	cpi	r26, 0x42	; 66
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	31 d4       	rcall	.+2146   	; 0x932 <main>
      d0:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <_exit>

000000d4 <__bad_interrupt>:
      d4:	ed c4       	rjmp	.+2522   	; 0xab0 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     120:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     12c:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 d6 04 	sts	0x04D6, r19	; 0x8004d6 <g_ADCCount+0x1>
     13a:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	ef 53       	subi	r30, 0x3F	; 63
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     162:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	23 c0       	rjmp	.+70     	; 0x1d8 <SERVER_Task+0x4e>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2383>
     196:	88 23       	and	r24, r24
     198:	e9 f0       	breq	.+58     	; 0x1d4 <SERVER_Task+0x4a>
     19a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     19e:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     1aa:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     1ae:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     1b2:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     1b6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     1ba:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     1be:	78 d3       	rcall	.+1776   	; 0x8b0 <LL_GetClass>
     1c0:	85 30       	cpi	r24, 0x05	; 5
     1c2:	31 f4       	brne	.+12     	; 0x1d0 <SERVER_Task+0x46>
     1c4:	64 e0       	ldi	r22, 0x04	; 4
     1c6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     1ca:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     1ce:	90 d3       	rcall	.+1824   	; 0x8f0 <LL_UpdateStatus>
     1d0:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     1d4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2383>
     1d8:	66 99       	sbic	0x0c, 6	; 12
     1da:	0e c0       	rjmp	.+28     	; 0x1f8 <SERVER_Task+0x6e>
     1dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2384>
     1e0:	88 23       	and	r24, r24
     1e2:	41 f0       	breq	.+16     	; 0x1f4 <SERVER_Task+0x6a>
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     1ea:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     1ee:	80 d3       	rcall	.+1792   	; 0x8f0 <LL_UpdateStatus>
     1f0:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     1f4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2384>
     1f8:	65 99       	sbic	0x0c, 5	; 12
     1fa:	0b c0       	rjmp	.+22     	; 0x212 <SERVER_Task+0x88>
     1fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2385>
     200:	88 23       	and	r24, r24
     202:	29 f0       	breq	.+10     	; 0x20e <SERVER_Task+0x84>
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_timer+0x23>
     20a:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     20e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2385>
     212:	67 9b       	sbis	0x0c, 7	; 12
     214:	0e c0       	rjmp	.+28     	; 0x232 <SERVER_Task+0xa8>
     216:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2383>
     21a:	81 11       	cpse	r24, r1
     21c:	07 c0       	rjmp	.+14     	; 0x22c <SERVER_Task+0xa2>
     21e:	e0 ee       	ldi	r30, 0xE0	; 224
     220:	f4 e0       	ldi	r31, 0x04	; 4
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	82 8f       	std	Z+26, r24	; 0x1a
     226:	84 a7       	std	Z+44, r24	; 0x2c
     228:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <_timer+0x47>
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2383>
     232:	66 9b       	sbis	0x0c, 6	; 12
     234:	34 c0       	rjmp	.+104    	; 0x29e <SERVER_Task+0x114>
     236:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2384>
     23a:	81 11       	cpse	r24, r1
     23c:	2d c0       	rjmp	.+90     	; 0x298 <SERVER_Task+0x10e>
     23e:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     242:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     246:	00 97       	sbiw	r24, 0x00	; 0
     248:	c1 f4       	brne	.+48     	; 0x27a <SERVER_Task+0xf0>
     24a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     24e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     252:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <STAGE2+0x1>
     256:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <STAGE2>
     25a:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <g_Timer>
     25e:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <g_Timer+0x1>
     262:	50 d3       	rcall	.+1696   	; 0x904 <LL_UpdateTick>
     264:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     268:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     26c:	85 5b       	subi	r24, 0xB5	; 181
     26e:	9f 4f       	sbci	r25, 0xFF	; 255
     270:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     274:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     278:	0a c0       	rjmp	.+20     	; 0x28e <SERVER_Task+0x104>
     27a:	f4 d2       	rcall	.+1512   	; 0x864 <LL_Next>
     27c:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <STAGE2+0x1>
     280:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <STAGE2>
     284:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <g_Timer>
     288:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <g_Timer+0x1>
     28c:	3b d3       	rcall	.+1654   	; 0x904 <LL_UpdateTick>
     28e:	ea e7       	ldi	r30, 0x7A	; 122
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	80 64       	ori	r24, 0x40	; 64
     296:	80 83       	st	Z, r24
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2384>
     29e:	65 9b       	sbis	0x0c, 5	; 12
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <SERVER_Task+0x11e>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2385>
     2a8:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
     2ac:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
     2b0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <EXIT_DELAY>
     2b4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <EXIT_DELAY+0x1>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	82 17       	cp	r24, r18
     2be:	93 07       	cpc	r25, r19
     2c0:	71 f4       	brne	.+28     	; 0x2de <SERVER_Task+0x154>
     2c2:	20 91 ba 04 	lds	r18, 0x04BA	; 0x8004ba <HEAD>
     2c6:	30 91 bb 04 	lds	r19, 0x04BB	; 0x8004bb <HEAD+0x1>
     2ca:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <FRONT>
     2ce:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <FRONT+0x1>
     2d2:	28 17       	cp	r18, r24
     2d4:	39 07       	cpc	r19, r25
     2d6:	19 f4       	brne	.+6      	; 0x2de <SERVER_Task+0x154>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_MissingRequest>
     2de:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     2e2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     2e6:	e4 d2       	rcall	.+1480   	; 0x8b0 <LL_GetClass>
     2e8:	84 30       	cpi	r24, 0x04	; 4
     2ea:	c9 f4       	brne	.+50     	; 0x31e <SERVER_Task+0x194>
     2ec:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <stepper+0xe>
     2f0:	81 11       	cpse	r24, r1
     2f2:	15 c0       	rjmp	.+42     	; 0x31e <SERVER_Task+0x194>
     2f4:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <g_Timer>
     2f8:	d0 91 da 04 	lds	r29, 0x04DA	; 0x8004da <g_Timer+0x1>
     2fc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     300:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     304:	05 d3       	rcall	.+1546   	; 0x910 <LL_GetTick>
     306:	c8 1b       	sub	r28, r24
     308:	d9 0b       	sbc	r29, r25
     30a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     30e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     312:	8c 17       	cp	r24, r28
     314:	9d 07       	cpc	r25, r29
     316:	18 f4       	brcc	.+6      	; 0x31e <SERVER_Task+0x194>
     318:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <memory.2386>
     31c:	04 c0       	rjmp	.+8      	; 0x326 <SERVER_Task+0x19c>
     31e:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <memory.2386>
     322:	81 11       	cpse	r24, r1
     324:	47 c0       	rjmp	.+142    	; 0x3b4 <SERVER_Task+0x22a>
     326:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     32a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     32e:	c0 d2       	rcall	.+1408   	; 0x8b0 <LL_GetClass>
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	09 f4       	brne	.+2      	; 0x336 <SERVER_Task+0x1ac>
     334:	3f c0       	rjmp	.+126    	; 0x3b4 <SERVER_Task+0x22a>
     336:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     33a:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     33e:	82 81       	ldd	r24, Z+2	; 0x02
     340:	93 81       	ldd	r25, Z+3	; 0x03
     342:	b6 d2       	rcall	.+1388   	; 0x8b0 <LL_GetClass>
     344:	84 30       	cpi	r24, 0x04	; 4
     346:	91 f4       	brne	.+36     	; 0x36c <SERVER_Task+0x1e2>
     348:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <g_Timer>
     34c:	d0 91 da 04 	lds	r29, 0x04DA	; 0x8004da <g_Timer+0x1>
     350:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     354:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     358:	db d2       	rcall	.+1462   	; 0x910 <LL_GetTick>
     35a:	c8 1b       	sub	r28, r24
     35c:	d9 0b       	sbc	r29, r25
     35e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     362:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     366:	8c 17       	cp	r24, r28
     368:	9d 07       	cpc	r25, r29
     36a:	20 f5       	brcc	.+72     	; 0x3b4 <SERVER_Task+0x22a>
     36c:	ed e2       	ldi	r30, 0x2D	; 45
     36e:	f5 e0       	ldi	r31, 0x05	; 5
     370:	84 81       	ldd	r24, Z+4	; 0x04
     372:	22 81       	ldd	r18, Z+2	; 0x02
     374:	33 81       	ldd	r19, Z+3	; 0x03
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	82 17       	cp	r24, r18
     37a:	93 07       	cpc	r25, r19
     37c:	d9 f4       	brne	.+54     	; 0x3b4 <SERVER_Task+0x22a>
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <memory.2386>
     384:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     388:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	8f d2       	rcall	.+1310   	; 0x8b0 <LL_GetClass>
     392:	e8 2f       	mov	r30, r24
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	e7 5f       	subi	r30, 0xF7	; 247
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	c0 81       	ld	r28, Z
     39c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     3a0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     3a4:	85 d2       	rcall	.+1290   	; 0x8b0 <LL_GetClass>
     3a6:	e8 2f       	mov	r30, r24
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	e7 5f       	subi	r30, 0xF7	; 247
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	80 81       	ld	r24, Z
     3b0:	6c 2f       	mov	r22, r28
     3b2:	20 d4       	rcall	.+2112   	; 0xbf4 <STEPPER_SetRotation>
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <ADC_Task>:
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	cf 93       	push	r28
     3c4:	e1 ec       	ldi	r30, 0xC1	; 193
     3c6:	f4 e0       	ldi	r31, 0x04	; 4
     3c8:	a0 81       	ld	r26, Z
     3ca:	b1 81       	ldd	r27, Z+1	; 0x01
     3cc:	60 81       	ld	r22, Z
     3ce:	71 81       	ldd	r23, Z+1	; 0x01
     3d0:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <ticks.2394>
     3d4:	8f 5f       	subi	r24, 0xFF	; 255
     3d6:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <ticks.2394>
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	76 01       	movw	r14, r12
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	4f b7       	in	r20, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	fc 01       	movw	r30, r24
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ef 53       	subi	r30, 0x3F	; 63
     3f0:	fb 4f       	sbci	r31, 0xFB	; 251
     3f2:	20 81       	ld	r18, Z
     3f4:	31 81       	ldd	r19, Z+1	; 0x01
     3f6:	c2 0e       	add	r12, r18
     3f8:	d3 1e       	adc	r13, r19
     3fa:	e1 1c       	adc	r14, r1
     3fc:	f1 1c       	adc	r15, r1
     3fe:	20 81       	ld	r18, Z
     400:	31 81       	ldd	r19, Z+1	; 0x01
     402:	26 17       	cp	r18, r22
     404:	37 07       	cpc	r19, r23
     406:	38 f4       	brcc	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     408:	fc 01       	movw	r30, r24
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	ef 53       	subi	r30, 0x3F	; 63
     410:	fb 4f       	sbci	r31, 0xFB	; 251
     412:	60 81       	ld	r22, Z
     414:	71 81       	ldd	r23, Z+1	; 0x01
     416:	fc 01       	movw	r30, r24
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ef 53       	subi	r30, 0x3F	; 63
     41e:	fb 4f       	sbci	r31, 0xFB	; 251
     420:	20 81       	ld	r18, Z
     422:	31 81       	ldd	r19, Z+1	; 0x01
     424:	a2 17       	cp	r26, r18
     426:	b3 07       	cpc	r27, r19
     428:	08 f0       	brcs	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42a:	4d c0       	rjmp	.+154    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     42c:	fc 01       	movw	r30, r24
     42e:	ee 0f       	add	r30, r30
     430:	ff 1f       	adc	r31, r31
     432:	ef 53       	subi	r30, 0x3F	; 63
     434:	fb 4f       	sbci	r31, 0xFB	; 251
     436:	a0 81       	ld	r26, Z
     438:	b1 81       	ldd	r27, Z+1	; 0x01
     43a:	45 c0       	rjmp	.+138    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     43c:	8f b7       	in	r24, 0x3f	; 63
     43e:	f8 94       	cli
     440:	ca 1a       	sub	r12, r26
     442:	db 0a       	sbc	r13, r27
     444:	e1 08       	sbc	r14, r1
     446:	f1 08       	sbc	r15, r1
     448:	c6 1a       	sub	r12, r22
     44a:	d7 0a       	sbc	r13, r23
     44c:	e1 08       	sbc	r14, r1
     44e:	f1 08       	sbc	r15, r1
     450:	f6 94       	lsr	r15
     452:	e7 94       	ror	r14
     454:	d7 94       	ror	r13
     456:	c7 94       	ror	r12
     458:	f6 94       	lsr	r15
     45a:	e7 94       	ror	r14
     45c:	d7 94       	ror	r13
     45e:	c7 94       	ror	r12
     460:	8f bf       	out	0x3f, r24	; 63
     462:	cf b7       	in	r28, 0x3f	; 63
     464:	f8 94       	cli
     466:	d7 01       	movw	r26, r14
     468:	c6 01       	movw	r24, r12
     46a:	0b 97       	sbiw	r24, 0x0b	; 11
     46c:	a1 09       	sbc	r26, r1
     46e:	b1 09       	sbc	r27, r1
     470:	8d 3d       	cpi	r24, 0xDD	; 221
     472:	93 40       	sbci	r25, 0x03	; 3
     474:	a1 05       	cpc	r26, r1
     476:	b1 05       	cpc	r27, r1
     478:	a0 f4       	brcc	.+40     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     47a:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     47e:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     482:	1b d2       	rcall	.+1078   	; 0x8ba <LL_GetRefl>
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	c8 16       	cp	r12, r24
     48a:	d9 06       	cpc	r13, r25
     48c:	ea 06       	cpc	r14, r26
     48e:	fb 06       	cpc	r15, r27
     490:	40 f4       	brcc	.+16     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     492:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     496:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     49a:	00 97       	sbiw	r24, 0x00	; 0
     49c:	11 f0       	breq	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	b6 01       	movw	r22, r12
     4a0:	17 d2       	rcall	.+1070   	; 0x8d0 <LL_UpdateRefl>
     4a2:	cf bf       	out	0x3f, r28	; 63
     4a4:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_ADCCount+0x1>
     4a8:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_ADCCount>
     4ac:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_timer+0x11>
     4b0:	66 9b       	sbis	0x0c, 6	; 12
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4b4:	ea e7       	ldi	r30, 0x7A	; 122
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	80 64       	ori	r24, 0x40	; 64
     4bc:	80 83       	st	Z, r24
     4be:	0a c0       	rjmp	.+20     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4c0:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <ticks.2394>
     4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4c6:	4f bf       	out	0x3f, r20	; 63
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	86 30       	cpi	r24, 0x06	; 6
     4cc:	91 05       	cpc	r25, r1
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d0:	89 cf       	rjmp	.-238    	; 0x3e4 <ADC_Task+0x2a>
     4d2:	b4 cf       	rjmp	.-152    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     4d4:	cf 91       	pop	r28
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	df 90       	pop	r13
     4dc:	cf 90       	pop	r12
     4de:	08 95       	ret

000004e0 <MAG_Task>:
     4e0:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_MotorOn>
     4e4:	88 23       	and	r24, r24
     4e6:	29 f0       	breq	.+10     	; 0x4f2 <MAG_Task+0x12>
     4e8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <tick.2416>
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <tick.2416>
     4f2:	64 99       	sbic	0x0c, 4	; 12
     4f4:	1a c0       	rjmp	.+52     	; 0x52a <MAG_Task+0x4a>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4fc:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     500:	f7 d1       	rcall	.+1006   	; 0x8f0 <LL_UpdateStatus>
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     508:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     50c:	e7 d1       	rcall	.+974    	; 0x8dc <LL_UpdateMag>
     50e:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     512:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     516:	a6 d1       	rcall	.+844    	; 0x864 <LL_Next>
     518:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     51c:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     520:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <tick.2416>
     524:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_timer+0x1a>
     528:	08 95       	ret
     52a:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <tick.2416>
     52e:	83 33       	cpi	r24, 0x33	; 51
     530:	c8 f0       	brcs	.+50     	; 0x564 <MAG_Task+0x84>
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     538:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     53c:	d9 d1       	rcall	.+946    	; 0x8f0 <LL_UpdateStatus>
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     544:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     548:	c9 d1       	rcall	.+914    	; 0x8dc <LL_UpdateMag>
     54a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     54e:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     552:	88 d1       	rcall	.+784    	; 0x864 <LL_Next>
     554:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     558:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     55c:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <tick.2416>
     560:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_timer+0x1a>
     564:	08 95       	ret

00000566 <EXIT_Task>:
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	1f 92       	push	r1
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     57c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     580:	bc d1       	rcall	.+888    	; 0x8fa <LL_GetStatus>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	18 f4       	brcc	.+6      	; 0x58c <EXIT_Task+0x26>
     586:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     58a:	fc c0       	rjmp	.+504    	; 0x784 <EXIT_Task+0x21e>
     58c:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
     590:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
     594:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <EXIT_DELAY>
     598:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <EXIT_DELAY+0x1>
     59c:	28 17       	cp	r18, r24
     59e:	39 07       	cpc	r19, r25
     5a0:	18 f4       	brcc	.+6      	; 0x5a8 <EXIT_Task+0x42>
     5a2:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     5a6:	ee c0       	rjmp	.+476    	; 0x784 <EXIT_Task+0x21e>
     5a8:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <g_Timer>
     5ac:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <g_Timer+0x1>
     5b0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5b4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5b8:	ab d1       	rcall	.+854    	; 0x910 <LL_GetTick>
     5ba:	08 1b       	sub	r16, r24
     5bc:	19 0b       	sbc	r17, r25
     5be:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     5c2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     5c6:	08 17       	cp	r16, r24
     5c8:	19 07       	cpc	r17, r25
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <EXIT_Task+0x6c>
     5cc:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     5d0:	d9 c0       	rjmp	.+434    	; 0x784 <EXIT_Task+0x21e>
     5d2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5d6:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5da:	6a d1       	rcall	.+724    	; 0x8b0 <LL_GetClass>
     5dc:	84 30       	cpi	r24, 0x04	; 4
     5de:	89 f5       	brne	.+98     	; 0x642 <EXIT_Task+0xdc>
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <g_UnclassifiedRequest>
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5ec:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5f0:	7f d1       	rcall	.+766    	; 0x8f0 <LL_UpdateStatus>
     5f2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     5f6:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     5fa:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     5fe:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     602:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     606:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     60a:	2c d1       	rcall	.+600    	; 0x864 <LL_Next>
     60c:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     610:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     614:	fc 01       	movw	r30, r24
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	4a d1       	rcall	.+660    	; 0x8b0 <LL_GetClass>
     61c:	e8 2f       	mov	r30, r24
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	e7 5f       	subi	r30, 0xF7	; 247
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	10 81       	ld	r17, Z
     626:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     62a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     62e:	40 d1       	rcall	.+640    	; 0x8b0 <LL_GetClass>
     630:	e8 2f       	mov	r30, r24
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e7 5f       	subi	r30, 0xF7	; 247
     636:	fe 4f       	sbci	r31, 0xFE	; 254
     638:	80 81       	ld	r24, Z
     63a:	61 2f       	mov	r22, r17
     63c:	db d2       	rcall	.+1462   	; 0xbf4 <STEPPER_SetRotation>
     63e:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     642:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     646:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     64a:	57 d1       	rcall	.+686    	; 0x8fa <LL_GetStatus>
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	31 f5       	brne	.+76     	; 0x69c <EXIT_Task+0x136>
     650:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <g_Timer>
     654:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <g_Timer+0x1>
     658:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <lastItemTick>
     65c:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <lastItemTick+0x1>
     660:	08 1b       	sub	r16, r24
     662:	19 0b       	sbc	r17, r25
     664:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     668:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     66c:	51 d1       	rcall	.+674    	; 0x910 <LL_GetTick>
     66e:	7c 01       	movw	r14, r24
     670:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <N_1>
     674:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <N_1+0x1>
     678:	4b d1       	rcall	.+662    	; 0x910 <LL_GetTick>
     67a:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <MISSING_DELAY>
     67e:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <MISSING_DELAY+0x1>
     682:	2e 0d       	add	r18, r14
     684:	3f 1d       	adc	r19, r15
     686:	28 1b       	sub	r18, r24
     688:	39 0b       	sbc	r19, r25
     68a:	02 17       	cp	r16, r18
     68c:	13 07       	cpc	r17, r19
     68e:	30 f0       	brcs	.+12     	; 0x69c <EXIT_Task+0x136>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_MissingRequest>
     696:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     69a:	74 c0       	rjmp	.+232    	; 0x784 <EXIT_Task+0x21e>
     69c:	ed e2       	ldi	r30, 0x2D	; 45
     69e:	f5 e0       	ldi	r31, 0x05	; 5
     6a0:	85 81       	ldd	r24, Z+5	; 0x05
     6a2:	96 81       	ldd	r25, Z+6	; 0x06
     6a4:	97 81       	ldd	r25, Z+7	; 0x07
     6a6:	89 1b       	sub	r24, r25
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	99 81       	ldd	r25, Y+1	; 0x01
     6ac:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <STEPPER_RANGE>
     6b0:	98 17       	cp	r25, r24
     6b2:	08 f0       	brcs	.+2      	; 0x6b6 <EXIT_Task+0x150>
     6b4:	64 c0       	rjmp	.+200    	; 0x77e <EXIT_Task+0x218>
     6b6:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <stepper+0xe>
     6ba:	81 11       	cpse	r24, r1
     6bc:	60 c0       	rjmp	.+192    	; 0x77e <EXIT_Task+0x218>
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	85 30       	cpi	r24, 0x05	; 5
     6c2:	e0 f4       	brcc	.+56     	; 0x6fc <EXIT_Task+0x196>
     6c4:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     6c8:	81 11       	cpse	r24, r1
     6ca:	18 c0       	rjmp	.+48     	; 0x6fc <EXIT_Task+0x196>
     6cc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     6d0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     6d4:	1d d1       	rcall	.+570    	; 0x910 <LL_GetTick>
     6d6:	8c 01       	movw	r16, r24
     6d8:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     6dc:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	15 d1       	rcall	.+554    	; 0x910 <LL_GetTick>
     6e6:	08 1b       	sub	r16, r24
     6e8:	19 0b       	sbc	r17, r25
     6ea:	0d 32       	cpi	r16, 0x2D	; 45
     6ec:	11 40       	sbci	r17, 0x01	; 1
     6ee:	30 f0       	brcs	.+12     	; 0x6fc <EXIT_Task+0x196>
     6f0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STEPPER_SET>
     6f4:	ed e2       	ldi	r30, 0x2D	; 45
     6f6:	f5 e0       	ldi	r31, 0x05	; 5
     6f8:	82 87       	std	Z+10, r24	; 0x0a
     6fa:	15 86       	std	Z+13, r1	; 0x0d
     6fc:	63 e0       	ldi	r22, 0x03	; 3
     6fe:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     702:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     706:	f4 d0       	rcall	.+488    	; 0x8f0 <LL_UpdateStatus>
     708:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     70c:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     710:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     714:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     718:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     71c:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     720:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_TimerLast+0x1>
     724:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_TimerLast>
     728:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     72c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     730:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <N_1+0x1>
     734:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <N_1>
     738:	95 d0       	rcall	.+298    	; 0x864 <LL_Next>
     73a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     73e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	c6 d1       	rcall	.+908    	; 0xad4 <PWM>
     748:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     74c:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	ad d0       	rcall	.+346    	; 0x8b0 <LL_GetClass>
     756:	e8 2f       	mov	r30, r24
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	e7 5f       	subi	r30, 0xF7	; 247
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	10 81       	ld	r17, Z
     760:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     764:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     768:	a3 d0       	rcall	.+326    	; 0x8b0 <LL_GetClass>
     76a:	e8 2f       	mov	r30, r24
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	e7 5f       	subi	r30, 0xF7	; 247
     770:	fe 4f       	sbci	r31, 0xFE	; 254
     772:	80 81       	ld	r24, Z
     774:	61 2f       	mov	r22, r17
     776:	3e d2       	rcall	.+1148   	; 0xbf4 <STEPPER_SetRotation>
     778:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     77c:	03 c0       	rjmp	.+6      	; 0x784 <EXIT_Task+0x21e>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	a8 d1       	rcall	.+848    	; 0xad4 <PWM>
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret

00000794 <BTN_Task>:
     794:	89 b1       	in	r24, 0x09	; 9
     796:	83 70       	andi	r24, 0x03	; 3
     798:	c1 f0       	breq	.+48     	; 0x7ca <BTN_Task+0x36>
     79a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <__data_end>
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
     7a4:	8b 30       	cpi	r24, 0x0B	; 11
     7a6:	98 f0       	brcs	.+38     	; 0x7ce <BTN_Task+0x3a>
     7a8:	89 b1       	in	r24, 0x09	; 9
     7aa:	83 70       	andi	r24, 0x03	; 3
     7ac:	81 f0       	breq	.+32     	; 0x7ce <BTN_Task+0x3a>
     7ae:	89 b1       	in	r24, 0x09	; 9
     7b0:	83 70       	andi	r24, 0x03	; 3
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	19 f4       	brne	.+6      	; 0x7bc <BTN_Task+0x28>
     7b6:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_PauseRequest>
     7ba:	08 95       	ret
     7bc:	89 b1       	in	r24, 0x09	; 9
     7be:	83 70       	andi	r24, 0x03	; 3
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	29 f4       	brne	.+10     	; 0x7ce <BTN_Task+0x3a>
     7c4:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <_timer+0x2c>
     7c8:	08 95       	ret
     7ca:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <__data_end>
     7ce:	08 95       	ret

000007d0 <WATCHDOG_Task>:
     7d0:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_WDTimeout>
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	18 f0       	brcs	.+6      	; 0x7de <WATCHDOG_Task+0xe>
     7d8:	86 e1       	ldi	r24, 0x16	; 22
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	bd d3       	rcall	.+1914   	; 0xf58 <SYS_Pause>
     7de:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_WDTimeout>
     7e2:	8f 5f       	subi	r24, 0xFF	; 255
     7e4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <g_WDTimeout>
     7e8:	08 95       	ret

000007ea <D_Blinky>:
     7ea:	9b b1       	in	r25, 0x0b	; 11
     7ec:	80 ea       	ldi	r24, 0xA0	; 160
     7ee:	89 27       	eor	r24, r25
     7f0:	8b b9       	out	0x0b, r24	; 11
     7f2:	08 95       	ret

000007f4 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     7f4:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_MotorOn>
     7f8:	88 23       	and	r24, r24
     7fa:	49 f0       	breq	.+18     	; 0x80e <ADD_Task+0x1a>
     7fc:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     800:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <g_Timer+0x1>
     80a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <g_Timer>
     80e:	08 95       	ret

00000810 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	7c 01       	movw	r14, r24
     81c:	16 2f       	mov	r17, r22
     81e:	d4 2f       	mov	r29, r20
     820:	c2 2f       	mov	r28, r18
     822:	87 e0       	ldi	r24, 0x07	; 7
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	7f d6       	rcall	.+3326   	; 0x1526 <malloc>
     828:	fc 01       	movw	r30, r24
     82a:	f1 82       	std	Z+1, r15	; 0x01
     82c:	e0 82       	st	Z, r14
     82e:	12 83       	std	Z+2, r17	; 0x02
     830:	d3 83       	std	Z+3, r29	; 0x03
     832:	c4 83       	std	Z+4, r28	; 0x04
     834:	16 82       	std	Z+6, r1	; 0x06
     836:	15 82       	std	Z+5, r1	; 0x05
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	08 95       	ret

00000844 <LL_ItemListInit>:
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	ec 01       	movw	r28, r24
     84a:	86 e0       	ldi	r24, 0x06	; 6
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	6b d6       	rcall	.+3286   	; 0x1526 <malloc>
     850:	fc 01       	movw	r30, r24
     852:	d1 83       	std	Z+1, r29	; 0x01
     854:	c0 83       	st	Z, r28
     856:	15 82       	std	Z+5, r1	; 0x05
     858:	14 82       	std	Z+4, r1	; 0x04
     85a:	13 82       	std	Z+3, r1	; 0x03
     85c:	12 82       	std	Z+2, r1	; 0x02
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <LL_Next>:
     864:	fc 01       	movw	r30, r24
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	93 81       	ldd	r25, Z+3	; 0x03
     86a:	08 95       	ret

0000086c <LL_AddBack>:
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
     872:	cb 01       	movw	r24, r22
     874:	01 c0       	rjmp	.+2      	; 0x878 <LL_AddBack+0xc>
     876:	e9 01       	movw	r28, r18
     878:	2a 81       	ldd	r18, Y+2	; 0x02
     87a:	3b 81       	ldd	r19, Y+3	; 0x03
     87c:	21 15       	cp	r18, r1
     87e:	31 05       	cpc	r19, r1
     880:	d1 f7       	brne	.-12     	; 0x876 <LL_AddBack+0xa>
     882:	e0 df       	rcall	.-64     	; 0x844 <LL_ItemListInit>
     884:	9b 83       	std	Y+3, r25	; 0x03
     886:	8a 83       	std	Y+2, r24	; 0x02
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <LL_Size>:
     88e:	dc 01       	movw	r26, r24
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	13 97       	sbiw	r26, 0x03	; 3
     898:	30 97       	sbiw	r30, 0x00	; 0
     89a:	41 f0       	breq	.+16     	; 0x8ac <LL_Size+0x1e>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	02 80       	ldd	r0, Z+2	; 0x02
     8a2:	f3 81       	ldd	r31, Z+3	; 0x03
     8a4:	e0 2d       	mov	r30, r0
     8a6:	30 97       	sbiw	r30, 0x00	; 0
     8a8:	d1 f7       	brne	.-12     	; 0x89e <LL_Size+0x10>
     8aa:	08 95       	ret
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	08 95       	ret

000008b0 <LL_GetClass>:
     8b0:	dc 01       	movw	r26, r24
     8b2:	ed 91       	ld	r30, X+
     8b4:	fc 91       	ld	r31, X
     8b6:	83 81       	ldd	r24, Z+3	; 0x03
     8b8:	08 95       	ret

000008ba <LL_GetRefl>:
     8ba:	dc 01       	movw	r26, r24
     8bc:	ed 91       	ld	r30, X+
     8be:	fc 91       	ld	r31, X
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	08 95       	ret

000008c6 <LL_GetMag>:
     8c6:	dc 01       	movw	r26, r24
     8c8:	ed 91       	ld	r30, X+
     8ca:	fc 91       	ld	r31, X
     8cc:	82 81       	ldd	r24, Z+2	; 0x02
     8ce:	08 95       	ret

000008d0 <LL_UpdateRefl>:
     8d0:	dc 01       	movw	r26, r24
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	71 83       	std	Z+1, r23	; 0x01
     8d8:	60 83       	st	Z, r22
     8da:	08 95       	ret

000008dc <LL_UpdateMag>:
     8dc:	dc 01       	movw	r26, r24
     8de:	ed 91       	ld	r30, X+
     8e0:	fc 91       	ld	r31, X
     8e2:	62 83       	std	Z+2, r22	; 0x02
     8e4:	08 95       	ret

000008e6 <LL_UpdateClass>:
     8e6:	dc 01       	movw	r26, r24
     8e8:	ed 91       	ld	r30, X+
     8ea:	fc 91       	ld	r31, X
     8ec:	63 83       	std	Z+3, r22	; 0x03
     8ee:	08 95       	ret

000008f0 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     8f0:	dc 01       	movw	r26, r24
     8f2:	ed 91       	ld	r30, X+
     8f4:	fc 91       	ld	r31, X
     8f6:	64 83       	std	Z+4, r22	; 0x04
     8f8:	08 95       	ret

000008fa <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     8fa:	dc 01       	movw	r26, r24
     8fc:	ed 91       	ld	r30, X+
     8fe:	fc 91       	ld	r31, X
}
     900:	84 81       	ldd	r24, Z+4	; 0x04
     902:	08 95       	ret

00000904 <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     904:	dc 01       	movw	r26, r24
     906:	ed 91       	ld	r30, X+
     908:	fc 91       	ld	r31, X
     90a:	76 83       	std	Z+6, r23	; 0x06
     90c:	65 83       	std	Z+5, r22	; 0x05
     90e:	08 95       	ret

00000910 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     910:	dc 01       	movw	r26, r24
     912:	ed 91       	ld	r30, X+
     914:	fc 91       	ld	r31, X
     916:	85 81       	ldd	r24, Z+5	; 0x05
     918:	96 81       	ldd	r25, Z+6	; 0x06
     91a:	08 95       	ret

0000091c <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     920:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     922:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     924:	80 ef       	ldi	r24, 0xF0	; 240
     926:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     928:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     92a:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	08 95       	ret

00000932 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     932:	7e d2       	rcall	.+1276   	; 0xe30 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     934:	89 b1       	in	r24, 0x09	; 9
     936:	83 70       	andi	r24, 0x03	; 3
     938:	e9 f7       	brne	.-6      	; 0x934 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     93a:	84 e2       	ldi	r24, 0x24	; 36
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	e5 d5       	rcall	.+3018   	; 0x150a <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     940:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	45 ec       	ldi	r20, 0xC5	; 197
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	62 d5       	rcall	.+2756   	; 0x1418 <TIMER_Create>
		_timer[0].state = READY;
     954:	c0 ee       	ldi	r28, 0xE0	; 224
     956:	d4 e0       	ldi	r29, 0x04	; 4
     958:	12 e0       	ldi	r17, 0x02	; 2
     95a:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	4d ed       	ldi	r20, 0xDD	; 221
     962:	51 e0       	ldi	r21, 0x01	; 1
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	55 d5       	rcall	.+2730   	; 0x1418 <TIMER_Create>
		_timer[1].state = BLOCKED;
     96e:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e7       	ldi	r20, 0x70	; 112
     976:	52 e0       	ldi	r21, 0x02	; 2
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	4b d5       	rcall	.+2710   	; 0x1418 <TIMER_Create>
		_timer[2].state = BLOCKED;
     982:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	43 eb       	ldi	r20, 0xB3	; 179
     98a:	52 e0       	ldi	r21, 0x02	; 2
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	41 d5       	rcall	.+2690   	; 0x1418 <TIMER_Create>
		_timer[3].state = BLOCKED;
     996:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	4a ef       	ldi	r20, 0xFA	; 250
     99e:	53 e0       	ldi	r21, 0x03	; 3
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	37 d5       	rcall	.+2670   	; 0x1418 <TIMER_Create>
		_timer[4].state = BLOCKED;
     9aa:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4a ec       	ldi	r20, 0xCA	; 202
     9b2:	53 e0       	ldi	r21, 0x03	; 3
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	84 e6       	ldi	r24, 0x64	; 100
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	2d d5       	rcall	.+2650   	; 0x1418 <TIMER_Create>
		_timer[5].state = READY;
     9be:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	45 ef       	ldi	r20, 0xF5	; 245
     9c6:	53 e0       	ldi	r21, 0x03	; 3
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 ed       	ldi	r24, 0xD0	; 208
     9ce:	97 e0       	ldi	r25, 0x07	; 7
     9d0:	23 d5       	rcall	.+2630   	; 0x1418 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     9d2:	1e af       	std	Y+62, r17	; 0x3e
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	48 ee       	ldi	r20, 0xE8	; 232
     9da:	53 e0       	ldi	r21, 0x03	; 3
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     9e2:	93 e1       	ldi	r25, 0x13	; 19
     9e4:	19 d5       	rcall	.+2610   	; 0x1418 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     9e6:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_timer+0x47>
     9ea:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	8d d5       	rcall	.+2842   	; 0x150a <UART_SendString>
     9f0:	80 e8       	ldi	r24, 0x80	; 128
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     9f2:	90 e0       	ldi	r25, 0x00	; 0
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause("Pause Requested!\r\n");
     9f4:	6f d0       	rcall	.+222    	; 0xad4 <PWM>
     9f6:	78 94       	sei
     9f8:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <g_PauseRequest>
     9fc:	88 23       	and	r24, r24
     9fe:	19 f0       	breq	.+6      	; 0xa06 <main+0xd4>
     a00:	89 e4       	ldi	r24, 0x49	; 73
		if(g_UnclassifiedRequest) SYS_Unclassified();
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	a9 d2       	rcall	.+1362   	; 0xf58 <SYS_Pause>
     a06:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <g_UnclassifiedRequest>
     a0a:	81 11       	cpse	r24, r1
		if(g_MissingRequest) SYS_Missing();
     a0c:	cb d3       	rcall	.+1942   	; 0x11a4 <SYS_Unclassified>
     a0e:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <g_MissingRequest>
     a12:	81 11       	cpse	r24, r1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     a14:	18 d4       	rcall	.+2096   	; 0x1246 <SYS_Missing>
     a16:	c0 91 ba 04 	lds	r28, 0x04BA	; 0x8004ba <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     a1a:	d0 91 bb 04 	lds	r29, 0x04BB	; 0x8004bb <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     a1e:	20 97       	sbiw	r28, 0x00	; 0
     a20:	59 f3       	breq	.-42     	; 0x9f8 <main+0xc6>
     a22:	20 97       	sbiw	r28, 0x00	; 0
     a24:	09 f4       	brne	.+2      	; 0xa28 <main+0xf6>
     a26:	3d c0       	rjmp	.+122    	; 0xaa2 <main+0x170>
     a28:	ce 01       	movw	r24, r28
     a2a:	42 df       	rcall	.-380    	; 0x8b0 <LL_GetClass>
     a2c:	84 30       	cpi	r24, 0x04	; 4
     a2e:	09 f0       	breq	.+2      	; 0xa32 <main+0x100>
     a30:	38 c0       	rjmp	.+112    	; 0xaa2 <main+0x170>
     a32:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     a34:	62 df       	rcall	.-316    	; 0x8fa <LL_GetStatus>
     a36:	82 30       	cpi	r24, 0x02	; 2
     a38:	a1 f5       	brne	.+104    	; 0xaa2 <main+0x170>
     a3a:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     a3c:	3e df       	rcall	.-388    	; 0x8ba <LL_GetRefl>
     a3e:	8c 01       	movw	r16, r24
				
				if(magVal) // 
     a40:	ce 01       	movw	r24, r28
     a42:	41 df       	rcall	.-382    	; 0x8c6 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     a44:	88 23       	and	r24, r24
     a46:	91 f0       	breq	.+36     	; 0xa6c <main+0x13a>
     a48:	c8 01       	movw	r24, r16
     a4a:	0a 97       	sbiw	r24, 0x0a	; 10
     a4c:	8f 3b       	cpi	r24, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     a4e:	91 05       	cpc	r25, r1
     a50:	20 f4       	brcc	.+8      	; 0xa5a <main+0x128>
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     a56:	47 df       	rcall	.-370    	; 0x8e6 <LL_UpdateClass>
     a58:	24 c0       	rjmp	.+72     	; 0xaa2 <main+0x170>
     a5a:	08 5c       	subi	r16, 0xC8	; 200
     a5c:	11 09       	sbc	r17, r1
     a5e:	0d 3b       	cpi	r16, 0xBD	; 189
					{
						LL_UpdateClass(temp, STEEL);
     a60:	12 40       	sbci	r17, 0x02	; 2
     a62:	f8 f4       	brcc	.+62     	; 0xaa2 <main+0x170>
     a64:	63 e0       	ldi	r22, 0x03	; 3
     a66:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     a68:	3e df       	rcall	.-388    	; 0x8e6 <LL_UpdateClass>
     a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <main+0x170>
     a6c:	c8 01       	movw	r24, r16
     a6e:	89 58       	subi	r24, 0x89	; 137
     a70:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     a72:	0b 97       	sbiw	r24, 0x0b	; 11
     a74:	20 f4       	brcc	.+8      	; 0xa7e <main+0x14c>
     a76:	60 e0       	ldi	r22, 0x00	; 0
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     a78:	ce 01       	movw	r24, r28
     a7a:	35 df       	rcall	.-406    	; 0x8e6 <LL_UpdateClass>
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <main+0x170>
     a7e:	c8 01       	movw	r24, r16
     a80:	80 52       	subi	r24, 0x20	; 32
     a82:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     a84:	8b 3a       	cpi	r24, 0xAB	; 171
     a86:	91 05       	cpc	r25, r1
     a88:	20 f4       	brcc	.+8      	; 0xa92 <main+0x160>
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	ce 01       	movw	r24, r28
				}
				else
				{
					// Unknown non-magnetic object might be aluminum
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     a8e:	2b df       	rcall	.-426    	; 0x8e6 <LL_UpdateClass>
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <main+0x170>
     a92:	0a 50       	subi	r16, 0x0A	; 10
     a94:	11 09       	sbc	r17, r1
     a96:	0f 3b       	cpi	r16, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     a98:	11 05       	cpc	r17, r1
     a9a:	18 f4       	brcc	.+6      	; 0xaa2 <main+0x170>
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	ce 01       	movw	r24, r28
					}
				}
			}
			temp = LL_Next(temp);
     aa0:	22 df       	rcall	.-444    	; 0x8e6 <LL_UpdateClass>
     aa2:	ce 01       	movw	r24, r28
     aa4:	df de       	rcall	.-578    	; 0x864 <LL_Next>
     aa6:	ec 01       	movw	r28, r24
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f0       	breq	.+2      	; 0xaae <main+0x17c>
     aac:	ba cf       	rjmp	.-140    	; 0xa22 <main+0xf0>
     aae:	a4 cf       	rjmp	.-184    	; 0x9f8 <main+0xc6>

00000ab0 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     aba:	8a ea       	ldi	r24, 0xAA	; 170
     abc:	88 b9       	out	0x08, r24	; 8
     abe:	fe cf       	rjmp	.-4      	; 0xabc <__vector_default+0xc>

00000ac0 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     ac0:	84 b5       	in	r24, 0x24	; 36
     ac2:	83 68       	ori	r24, 0x83	; 131
     ac4:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     ac6:	85 b5       	in	r24, 0x25	; 37
     ac8:	83 60       	ori	r24, 0x03	; 3
     aca:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     acc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     ad0:	87 bd       	out	0x27, r24	; 39
     ad2:	08 95       	ret

00000ad4 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     ad4:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     ad6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ad8:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     ada:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     ade:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     ae0:	23 2b       	or	r18, r19
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <PWM+0x1c>
		{
			g_MotorOn = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <g_MotorOn>
			PORTB = ~0x0E;
     aea:	81 ef       	ldi	r24, 0xF1	; 241
     aec:	85 b9       	out	0x05, r24	; 5
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     af0:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <g_MotorOn>
			PORTB = ~0x0F;
     af4:	80 ef       	ldi	r24, 0xF0	; 240
     af6:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     af8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     afa:	08 95       	ret

00000afc <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     afc:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     afe:	ed e2       	ldi	r30, 0x2D	; 45
     b00:	f5 e0       	ldi	r31, 0x05	; 5
     b02:	10 82       	st	Z, r1
	stepper.direction = 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     b08:	13 82       	std	Z+3, r1	; 0x03
     b0a:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     b0c:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     b0e:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     b10:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     b12:	11 86       	std	Z+9, r1	; 0x09
     b14:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     b16:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     b18:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     b1a:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     b1c:	88 ec       	ldi	r24, 0xC8	; 200
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	96 83       	std	Z+6, r25	; 0x06
     b22:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     b24:	80 e3       	ldi	r24, 0x30	; 48
     b26:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     b28:	84 e9       	ldi	r24, 0x94	; 148
     b2a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     b2e:	e0 eb       	ldi	r30, 0xB0	; 176
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     b38:	e0 e7       	ldi	r30, 0x70	; 112
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	82 60       	ori	r24, 0x02	; 2
     b40:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     b42:	e1 eb       	ldi	r30, 0xB1	; 177
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	87 60       	ori	r24, 0x07	; 7
     b4a:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     b4c:	78 94       	sei
     b4e:	08 95       	ret

00000b50 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	86 1b       	sub	r24, r22
     b54:	91 09       	sbc	r25, r1
	if (steps >= 0)
     b56:	52 f0       	brmi	.+20     	; 0xb6c <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     b58:	85 36       	cpi	r24, 0x65	; 101
     b5a:	91 05       	cpc	r25, r1
     b5c:	8c f0       	brlt	.+34     	; 0xb80 <STEPPER_NumSteps+0x30>
     b5e:	24 e6       	ldi	r18, 0x64	; 100
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	a9 01       	movw	r20, r18
     b64:	48 1b       	sub	r20, r24
     b66:	59 0b       	sbc	r21, r25
     b68:	ca 01       	movw	r24, r20
     b6a:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     b6c:	8c 39       	cpi	r24, 0x9C	; 156
     b6e:	5f ef       	ldi	r21, 0xFF	; 255
     b70:	95 07       	cpc	r25, r21
     b72:	34 f4       	brge	.+12     	; 0xb80 <STEPPER_NumSteps+0x30>
     b74:	2c e9       	ldi	r18, 0x9C	; 156
     b76:	3f ef       	ldi	r19, 0xFF	; 255
     b78:	a9 01       	movw	r20, r18
     b7a:	48 1b       	sub	r20, r24
     b7c:	59 0b       	sbc	r21, r25
     b7e:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     b80:	08 95       	ret

00000b82 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     b86:	cd e2       	ldi	r28, 0x2D	; 45
     b88:	d5 e0       	ldi	r29, 0x05	; 5
     b8a:	6c 81       	ldd	r22, Y+4	; 0x04
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	9b 81       	ldd	r25, Y+3	; 0x03
     b90:	df df       	rcall	.-66     	; 0xb50 <STEPPER_NumSteps>
     b92:	9e 83       	std	Y+6, r25	; 0x06
     b94:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     b96:	6a 81       	ldd	r22, Y+2	; 0x02
     b98:	7b 81       	ldd	r23, Y+3	; 0x03
     b9a:	88 85       	ldd	r24, Y+8	; 0x08
     b9c:	99 85       	ldd	r25, Y+9	; 0x09
     b9e:	d8 df       	rcall	.-80     	; 0xb50 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	33 23       	and	r19, r19
     ba6:	14 f4       	brge	.+4      	; 0xbac <STEPPER_Rotate+0x2a>
     ba8:	28 e0       	ldi	r18, 0x08	; 8
     baa:	01 c0       	rjmp	.+2      	; 0xbae <STEPPER_Rotate+0x2c>
     bac:	24 e0       	ldi	r18, 0x04	; 4
     bae:	ed e2       	ldi	r30, 0x2D	; 45
     bb0:	f5 e0       	ldi	r31, 0x05	; 5
     bb2:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     bb4:	45 81       	ldd	r20, Z+5	; 0x05
     bb6:	56 81       	ldd	r21, Z+6	; 0x06
     bb8:	84 9f       	mul	r24, r20
     bba:	90 01       	movw	r18, r0
     bbc:	85 9f       	mul	r24, r21
     bbe:	30 0d       	add	r19, r0
     bc0:	94 9f       	mul	r25, r20
     bc2:	30 0d       	add	r19, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	12 16       	cp	r1, r18
     bca:	13 06       	cpc	r1, r19
     bcc:	0c f0       	brlt	.+2      	; 0xbd0 <STEPPER_Rotate+0x4e>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	ed e2       	ldi	r30, 0x2D	; 45
     bd2:	f5 e0       	ldi	r31, 0x05	; 5
     bd4:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     bd6:	85 81       	ldd	r24, Z+5	; 0x05
     bd8:	96 81       	ldd	r25, Z+6	; 0x06
     bda:	99 23       	and	r25, r25
     bdc:	1c f4       	brge	.+6      	; 0xbe4 <STEPPER_Rotate+0x62>
     bde:	91 95       	neg	r25
     be0:	81 95       	neg	r24
     be2:	91 09       	sbc	r25, r1
     be4:	ed e2       	ldi	r30, 0x2D	; 45
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	96 83       	std	Z+6, r25	; 0x06
     bea:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     bec:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     bf4:	ed e2       	ldi	r30, 0x2D	; 45
     bf6:	f5 e0       	ldi	r31, 0x05	; 5
     bf8:	24 81       	ldd	r18, Z+4	; 0x04
     bfa:	42 81       	ldd	r20, Z+2	; 0x02
     bfc:	53 81       	ldd	r21, Z+3	; 0x03
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	24 17       	cp	r18, r20
     c02:	35 07       	cpc	r19, r21
     c04:	29 f0       	breq	.+10     	; 0xc10 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     c0a:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     c0c:	60 8b       	std	Z+16, r22	; 0x10
     c0e:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	ed e2       	ldi	r30, 0x2D	; 45
     c16:	f5 e0       	ldi	r31, 0x05	; 5
     c18:	33 83       	std	Z+3, r19	; 0x03
     c1a:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	71 87       	std	Z+9, r23	; 0x09
     c20:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     c22:	94 81       	ldd	r25, Z+4	; 0x04
     c24:	89 13       	cpse	r24, r25
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <STEPPER_SetRotation+0x3c>
     c28:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <STEPPER_SAME>
     c2c:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <stepper+0xa>
		STEPPER_Rotate();
     c30:	a8 cf       	rjmp	.-176    	; 0xb82 <STEPPER_Rotate>
     c32:	08 95       	ret

00000c34 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	0b b6       	in	r0, 0x3b	; 59
     c40:	0f 92       	push	r0
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <__vector_13+0x2c>
     c60:	00 d0       	rcall	.+0      	; 0xc62 <__vector_13+0x2e>
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     c66:	86 e3       	ldi	r24, 0x36	; 54
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	9e e2       	ldi	r25, 0x2E	; 46
     c70:	ad e2       	ldi	r26, 0x2D	; 45
     c72:	b5 e3       	ldi	r27, 0x35	; 53
     c74:	89 83       	std	Y+1, r24	; 0x01
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	ab 83       	std	Y+3, r26	; 0x03
     c7a:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     c7c:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     c80:	88 23       	and	r24, r24
     c82:	29 f0       	breq	.+10     	; 0xc8e <__vector_13+0x5a>
     c84:	ed e2       	ldi	r30, 0x2D	; 45
     c86:	f5 e0       	ldi	r31, 0x05	; 5
     c88:	82 85       	ldd	r24, Z+10	; 0x0a
     c8a:	81 50       	subi	r24, 0x01	; 1
     c8c:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     c8e:	ed e2       	ldi	r30, 0x2D	; 45
     c90:	f5 e0       	ldi	r31, 0x05	; 5
     c92:	87 81       	ldd	r24, Z+7	; 0x07
     c94:	25 81       	ldd	r18, Z+5	; 0x05
     c96:	36 81       	ldd	r19, Z+6	; 0x06
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	82 17       	cp	r24, r18
     c9c:	93 07       	cpc	r25, r19
     c9e:	e1 f4       	brne	.+56     	; 0xcd8 <__vector_13+0xa4>
	{

		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     ca6:	86 85       	ldd	r24, Z+14	; 0x0e
     ca8:	88 23       	and	r24, r24
     caa:	21 f0       	breq	.+8      	; 0xcb4 <__vector_13+0x80>
		{
			stepper.early = 0;
     cac:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     cae:	60 89       	ldd	r22, Z+16	; 0x10
     cb0:	87 85       	ldd	r24, Z+15	; 0x0f
     cb2:	a0 df       	rcall	.-192    	; 0xbf4 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     cb4:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <stepper+0xb>
     cb8:	88 23       	and	r24, r24
     cba:	19 f0       	breq	.+6      	; 0xcc2 <__vector_13+0x8e>
     cbc:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <stepper+0xd>
     cc0:	01 c0       	rjmp	.+2      	; 0xcc4 <__vector_13+0x90>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	ed e2       	ldi	r30, 0x2D	; 45
     cc6:	f5 e0       	ldi	r31, 0x05	; 5
     cc8:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     cca:	e5 85       	ldd	r30, Z+13	; 0x0d
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	e0 5f       	subi	r30, 0xF0	; 240
     cd0:	fe 4f       	sbci	r31, 0xFE	; 254
     cd2:	80 81       	ld	r24, Z
     cd4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     cd8:	ed e2       	ldi	r30, 0x2D	; 45
     cda:	f5 e0       	ldi	r31, 0x05	; 5
     cdc:	87 81       	ldd	r24, Z+7	; 0x07
     cde:	25 81       	ldd	r18, Z+5	; 0x05
     ce0:	36 81       	ldd	r19, Z+6	; 0x06
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	0c f0       	brlt	.+2      	; 0xcec <__vector_13+0xb8>
     cea:	60 c0       	rjmp	.+192    	; 0xdac <__vector_13+0x178>
     cec:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     cf0:	81 11       	cpse	r24, r1
     cf2:	5c c0       	rjmp	.+184    	; 0xdac <__vector_13+0x178>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     cf4:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <stepper+0x1>
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	51 f4       	brne	.+20     	; 0xd10 <__vector_13+0xdc>
     cfc:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     d00:	e1 e0       	ldi	r30, 0x01	; 1
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	ec 0f       	add	r30, r28
     d06:	fd 1f       	adc	r31, r29
     d08:	e8 0f       	add	r30, r24
     d0a:	f1 1d       	adc	r31, r1
     d0c:	80 81       	ld	r24, Z
     d0e:	0d c0       	rjmp	.+26     	; 0xd2a <__vector_13+0xf6>
     d10:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     d14:	e3 e0       	ldi	r30, 0x03	; 3
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	e8 1b       	sub	r30, r24
     d1a:	f1 09       	sbc	r31, r1
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	8c 0f       	add	r24, r28
     d22:	9d 1f       	adc	r25, r29
     d24:	e8 0f       	add	r30, r24
     d26:	f9 1f       	adc	r31, r25
     d28:	80 81       	ld	r24, Z
     d2a:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     d2c:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     d30:	83 30       	cpi	r24, 0x03	; 3
     d32:	21 f0       	breq	.+8      	; 0xd3c <__vector_13+0x108>
     d34:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <__vector_13+0x10a>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	ed e2       	ldi	r30, 0x2D	; 45
     d40:	f5 e0       	ldi	r31, 0x05	; 5
     d42:	80 83       	st	Z, r24

		stepper._currentStep++;
     d44:	87 81       	ldd	r24, Z+7	; 0x07
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     d4a:	83 85       	ldd	r24, Z+11	; 0x0b
     d4c:	81 11       	cpse	r24, r1
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <__vector_13+0x146>
     d50:	85 81       	ldd	r24, Z+5	; 0x05
     d52:	96 81       	ldd	r25, Z+6	; 0x06
     d54:	27 81       	ldd	r18, Z+7	; 0x07
     d56:	82 1b       	sub	r24, r18
     d58:	91 09       	sbc	r25, r1
     d5a:	06 97       	sbiw	r24, 0x06	; 6
     d5c:	74 f4       	brge	.+28     	; 0xd7a <__vector_13+0x146>
     d5e:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	e0 5f       	subi	r30, 0xF0	; 240
     d66:	fe 4f       	sbci	r31, 0xFE	; 254
     d68:	80 81       	ld	r24, Z
     d6a:	84 39       	cpi	r24, 0x94	; 148
     d6c:	30 f4       	brcc	.+12     	; 0xd7a <__vector_13+0x146>
		{
			stepper._accellStep--;
     d6e:	ed e2       	ldi	r30, 0x2D	; 45
     d70:	f5 e0       	ldi	r31, 0x05	; 5
     d72:	85 85       	ldd	r24, Z+13	; 0x0d
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	85 87       	std	Z+13, r24	; 0x0d
     d78:	11 c0       	rjmp	.+34     	; 0xd9c <__vector_13+0x168>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     d7a:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <stepper+0x7>
     d7e:	86 30       	cpi	r24, 0x06	; 6
     d80:	68 f0       	brcs	.+26     	; 0xd9c <__vector_13+0x168>
     d82:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	e0 5f       	subi	r30, 0xF0	; 240
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	81 34       	cpi	r24, 0x41	; 65
     d90:	28 f0       	brcs	.+10     	; 0xd9c <__vector_13+0x168>
		{
			stepper._accellStep++;
     d92:	ed e2       	ldi	r30, 0x2D	; 45
     d94:	f5 e0       	ldi	r31, 0x05	; 5
     d96:	85 85       	ldd	r24, Z+13	; 0x0d
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     d9c:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	e0 5f       	subi	r30, 0xF0	; 240
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	80 81       	ld	r24, Z
     da8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     dac:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	29 f1       	breq	.+74     	; 0xdfe <__vector_13+0x1ca>
	{
		if ((PINE & 0x08) == 0)
     db4:	63 99       	sbic	0x0c, 3	; 12
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <__vector_13+0x18c>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     db8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <STEPPER_OFFSET>
     dbc:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     dc0:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	28 f0       	brcs	.+10     	; 0xdd2 <__vector_13+0x19e>
     dc8:	ed e2       	ldi	r30, 0x2D	; 45
     dca:	f5 e0       	ldi	r31, 0x05	; 5
     dcc:	84 85       	ldd	r24, Z+12	; 0x0c
     dce:	81 50       	subi	r24, 0x01	; 1
     dd0:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     dd2:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	91 f4       	brne	.+36     	; 0xdfe <__vector_13+0x1ca>
		{
			stepper._isInitiated = 1;
     dda:	ed e2       	ldi	r30, 0x2D	; 45
     ddc:	f5 e0       	ldi	r31, 0x05	; 5
     dde:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     de0:	10 82       	st	Z, r1
			stepper.direction = 1;
     de2:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     de4:	13 82       	std	Z+3, r1	; 0x03
     de6:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     de8:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     dea:	16 82       	std	Z+6, r1	; 0x06
     dec:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     dee:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     df0:	11 86       	std	Z+9, r1	; 0x09
     df2:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     df4:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     df6:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     df8:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     dfa:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     dfc:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0b be       	out	0x3b, r0	; 59
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Test
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	f8 94       	cli
     e38:	e1 e6       	ldi	r30, 0x61	; 97
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24
     e40:	10 82       	st	Z, r1
     e42:	4b d3       	rcall	.+1686   	; 0x14da <UART_Init>
     e44:	6b dd       	rcall	.-1322   	; 0x91c <GPIO_Init>
     e46:	ce d2       	rcall	.+1436   	; 0x13e4 <TIMER_Init>
     e48:	3b de       	rcall	.-906    	; 0xac0 <PWM_Init>
     e4a:	45 d9       	rcall	.-3446   	; 0xd6 <ADC_Init>
     e4c:	57 de       	rcall	.-850    	; 0xafc <STEPPER_Init>
     e4e:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_ADCCount+0x1>
     e52:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_ADCCount>
     e56:	84 e1       	ldi	r24, 0x14	; 20
     e58:	e1 ec       	ldi	r30, 0xC1	; 193
     e5a:	f4 e0       	ldi	r31, 0x04	; 4
     e5c:	df 01       	movw	r26, r30
     e5e:	1d 92       	st	X+, r1
     e60:	8a 95       	dec	r24
     e62:	e9 f7       	brne	.-6      	; 0xe5e <SYS_Init+0x2e>
     e64:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <g_PauseRequest>
     e68:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     e6c:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <g_Timer+0x1>
     e70:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <g_Timer>
     e74:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_MissingRequest>
     e78:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_UnclassifiedRequest>
     e7c:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <g_TimerLast+0x1>
     e80:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <g_TimerLast>
     e84:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <HEAD+0x1>
     e88:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <HEAD>
     e8c:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <TAIL+0x1>
     e90:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <TAIL>
     e94:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <STAGE1+0x1>
     e98:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <STAGE1>
     e9c:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <STAGE2+0x1>
     ea0:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <STAGE2>
     ea4:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <FRONT+0x1>
     ea8:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <FRONT>
     eac:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <N_1+0x1>
     eb0:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <N_1>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	44 e0       	ldi	r20, 0x04	; 4
     eb8:	6f ef       	ldi	r22, 0xFF	; 255
     eba:	89 ee       	ldi	r24, 0xE9	; 233
     ebc:	9d ef       	ldi	r25, 0xFD	; 253
     ebe:	a8 dc       	rcall	.-1712   	; 0x810 <LL_ItemInit>
     ec0:	c1 dc       	rcall	.-1662   	; 0x844 <LL_ItemListInit>
     ec2:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     ec6:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     eca:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <FRONT+0x1>
     ece:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <FRONT>
     ed2:	ca ef       	ldi	r28, 0xFA	; 250
     ed4:	08 ee       	ldi	r16, 0xE8	; 232
     ed6:	1d ef       	ldi	r17, 0xFD	; 253
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	44 e0       	ldi	r20, 0x04	; 4
     edc:	6c 2f       	mov	r22, r28
     ede:	c8 01       	movw	r24, r16
     ee0:	97 dc       	rcall	.-1746   	; 0x810 <LL_ItemInit>
     ee2:	bc 01       	movw	r22, r24
     ee4:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     ee8:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     eec:	bf dc       	rcall	.-1666   	; 0x86c <LL_AddBack>
     eee:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <TAIL+0x1>
     ef2:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <TAIL>
     ef6:	01 50       	subi	r16, 0x01	; 1
     ef8:	11 09       	sbc	r17, r1
     efa:	c1 50       	subi	r28, 0x01	; 1
     efc:	cb 3c       	cpi	r28, 0xCB	; 203
     efe:	61 f7       	brne	.-40     	; 0xed8 <SYS_Init+0xa8>
     f00:	05 e0       	ldi	r16, 0x05	; 5
     f02:	10 e0       	ldi	r17, 0x00	; 0
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	45 e0       	ldi	r20, 0x05	; 5
     f08:	6a ef       	ldi	r22, 0xFA	; 250
     f0a:	88 ee       	ldi	r24, 0xE8	; 232
     f0c:	9d ef       	ldi	r25, 0xFD	; 253
     f0e:	80 dc       	rcall	.-1792   	; 0x810 <LL_ItemInit>
     f10:	bc 01       	movw	r22, r24
     f12:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     f16:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     f1a:	a8 dc       	rcall	.-1712   	; 0x86c <LL_AddBack>
     f1c:	01 50       	subi	r16, 0x01	; 1
     f1e:	11 09       	sbc	r17, r1
     f20:	89 f7       	brne	.-30     	; 0xf04 <SYS_Init+0xd4>
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	44 e0       	ldi	r20, 0x04	; 4
     f26:	62 ed       	ldi	r22, 0xD2	; 210
     f28:	88 e9       	ldi	r24, 0x98	; 152
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	71 dc       	rcall	.-1822   	; 0x810 <LL_ItemInit>
     f2e:	8a dc       	rcall	.-1772   	; 0x844 <LL_ItemListInit>
     f30:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     f34:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     f38:	95 83       	std	Z+5, r25	; 0x05
     f3a:	84 83       	std	Z+4, r24	; 0x04
     f3c:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <N_1+0x1>
     f40:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <N_1>
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	dd dc       	rcall	.-1606   	; 0x904 <LL_UpdateTick>
     f4a:	86 e6       	ldi	r24, 0x66	; 102
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	dd d2       	rcall	.+1466   	; 0x150a <UART_SendString>
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <SYS_Pause>:
     f58:	3f 92       	push	r3
     f5a:	4f 92       	push	r4
     f5c:	5f 92       	push	r5
     f5e:	6f 92       	push	r6
     f60:	7f 92       	push	r7
     f62:	8f 92       	push	r8
     f64:	9f 92       	push	r9
     f66:	af 92       	push	r10
     f68:	bf 92       	push	r11
     f6a:	cf 92       	push	r12
     f6c:	df 92       	push	r13
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	ca 5f       	subi	r28, 0xFA	; 250
     f80:	d1 09       	sbc	r29, r1
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	f8 2e       	mov	r15, r24
     f8e:	e9 2e       	mov	r14, r25
     f90:	f8 94       	cli
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9e dd       	rcall	.-1220   	; 0xad4 <PWM>
     f98:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <FRONT>
     f9c:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <FRONT+0x1>
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	8c e7       	ldi	r24, 0x7C	; 124
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	7c 01       	movw	r14, r24
     fb2:	9f 93       	push	r25
     fb4:	8f 93       	push	r24
     fb6:	d8 d3       	rcall	.+1968   	; 0x1768 <sprintf>
     fb8:	c7 01       	movw	r24, r14
     fba:	a7 d2       	rcall	.+1358   	; 0x150a <UART_SendString>
     fbc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     fc0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     fc4:	a5 dc       	rcall	.-1718   	; 0x910 <LL_GetTick>
     fc6:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
     fca:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	3f 93       	push	r19
     fd4:	2f 93       	push	r18
     fd6:	87 e9       	ldi	r24, 0x97	; 151
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	9f 93       	push	r25
     fdc:	8f 93       	push	r24
     fde:	ff 92       	push	r15
     fe0:	ef 92       	push	r14
     fe2:	c2 d3       	rcall	.+1924   	; 0x1768 <sprintf>
     fe4:	c7 01       	movw	r24, r14
     fe6:	91 d2       	rcall	.+1314   	; 0x150a <UART_SendString>
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	e1 2c       	mov	r14, r1
     ff4:	f1 2c       	mov	r15, r1
     ff6:	0f 2e       	mov	r0, r31
     ff8:	f6 eb       	ldi	r31, 0xB6	; 182
     ffa:	af 2e       	mov	r10, r31
     ffc:	f1 e0       	ldi	r31, 0x01	; 1
     ffe:	bf 2e       	mov	r11, r31
    1000:	f0 2d       	mov	r31, r0
    1002:	6e 01       	movw	r12, r28
    1004:	f7 e9       	ldi	r31, 0x97	; 151
    1006:	cf 0e       	add	r12, r31
    1008:	d1 1c       	adc	r13, r1
    100a:	2d c0       	rjmp	.+90     	; 0x1066 <SYS_Pause+0x10e>
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	e8 1a       	sub	r14, r24
    1010:	f8 0a       	sbc	r15, r24
    1012:	c8 01       	movw	r24, r16
    1014:	7d dc       	rcall	.-1798   	; 0x910 <LL_GetTick>
    1016:	68 2e       	mov	r6, r24
    1018:	59 2e       	mov	r5, r25
    101a:	c8 01       	movw	r24, r16
    101c:	6e dc       	rcall	.-1828   	; 0x8fa <LL_GetStatus>
    101e:	78 2e       	mov	r7, r24
    1020:	c8 01       	movw	r24, r16
    1022:	46 dc       	rcall	.-1908   	; 0x8b0 <LL_GetClass>
    1024:	88 2e       	mov	r8, r24
    1026:	c8 01       	movw	r24, r16
    1028:	4e dc       	rcall	.-1892   	; 0x8c6 <LL_GetMag>
    102a:	98 2e       	mov	r9, r24
    102c:	c8 01       	movw	r24, r16
    102e:	45 dc       	rcall	.-1910   	; 0x8ba <LL_GetRefl>
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	1f 92       	push	r1
    1036:	7f 92       	push	r7
    1038:	1f 92       	push	r1
    103a:	8f 92       	push	r8
    103c:	1f 92       	push	r1
    103e:	9f 92       	push	r9
    1040:	9f 93       	push	r25
    1042:	8f 93       	push	r24
    1044:	ff 92       	push	r15
    1046:	ef 92       	push	r14
    1048:	bf 92       	push	r11
    104a:	af 92       	push	r10
    104c:	df 92       	push	r13
    104e:	cf 92       	push	r12
    1050:	8b d3       	rcall	.+1814   	; 0x1768 <sprintf>
    1052:	c6 01       	movw	r24, r12
    1054:	5a d2       	rcall	.+1204   	; 0x150a <UART_SendString>
    1056:	c8 01       	movw	r24, r16
    1058:	05 dc       	rcall	.-2038   	; 0x864 <LL_Next>
    105a:	8c 01       	movw	r16, r24
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	c8 01       	movw	r24, r16
    1068:	23 dc       	rcall	.-1978   	; 0x8b0 <LL_GetClass>
    106a:	85 30       	cpi	r24, 0x05	; 5
    106c:	79 f6       	brne	.-98     	; 0x100c <SYS_Pause+0xb4>
    106e:	0f 2e       	mov	r0, r31
    1070:	f0 ee       	ldi	r31, 0xE0	; 224
    1072:	cf 2e       	mov	r12, r31
    1074:	f4 e0       	ldi	r31, 0x04	; 4
    1076:	df 2e       	mov	r13, r31
    1078:	f0 2d       	mov	r31, r0
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	0f 2e       	mov	r0, r31
    1080:	f4 ef       	ldi	r31, 0xF4	; 244
    1082:	af 2e       	mov	r10, r31
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	bf 2e       	mov	r11, r31
    1088:	f0 2d       	mov	r31, r0
    108a:	7e 01       	movw	r14, r28
    108c:	f7 e9       	ldi	r31, 0x97	; 151
    108e:	ef 0e       	add	r14, r31
    1090:	f1 1c       	adc	r15, r1
    1092:	f6 01       	movw	r30, r12
    1094:	80 85       	ldd	r24, Z+8	; 0x08
    1096:	1f 92       	push	r1
    1098:	8f 93       	push	r24
    109a:	1f 93       	push	r17
    109c:	0f 93       	push	r16
    109e:	bf 92       	push	r11
    10a0:	af 92       	push	r10
    10a2:	ff 92       	push	r15
    10a4:	ef 92       	push	r14
    10a6:	60 d3       	rcall	.+1728   	; 0x1768 <sprintf>
    10a8:	c7 01       	movw	r24, r14
    10aa:	2f d2       	rcall	.+1118   	; 0x150a <UART_SendString>
    10ac:	0f 5f       	subi	r16, 0xFF	; 255
    10ae:	1f 4f       	sbci	r17, 0xFF	; 255
    10b0:	f9 e0       	ldi	r31, 0x09	; 9
    10b2:	cf 0e       	add	r12, r31
    10b4:	d1 1c       	adc	r13, r1
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	07 30       	cpi	r16, 0x07	; 7
    10c2:	11 05       	cpc	r17, r1
    10c4:	31 f7       	brne	.-52     	; 0x1092 <SYS_Pause+0x13a>
    10c6:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
    10ca:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
    10ce:	f5 db       	rcall	.-2070   	; 0x8ba <LL_GetRefl>
    10d0:	48 2e       	mov	r4, r24
    10d2:	39 2e       	mov	r3, r25
    10d4:	60 90 2a 05 	lds	r6, 0x052A	; 0x80052a <STAGE2>
    10d8:	50 90 2b 05 	lds	r5, 0x052B	; 0x80052b <STAGE2+0x1>
    10dc:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
    10e0:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
    10e4:	f0 db       	rcall	.-2080   	; 0x8c6 <LL_GetMag>
    10e6:	78 2e       	mov	r7, r24
    10e8:	90 90 dc 04 	lds	r9, 0x04DC	; 0x8004dc <STAGE1>
    10ec:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <STAGE1+0x1>
    10f0:	00 91 bf 04 	lds	r16, 0x04BF	; 0x8004bf <TAIL>
    10f4:	10 91 c0 04 	lds	r17, 0x04C0	; 0x8004c0 <TAIL+0x1>
    10f8:	f8 01       	movw	r30, r16
    10fa:	b2 80       	ldd	r11, Z+2	; 0x02
    10fc:	a3 80       	ldd	r10, Z+3	; 0x03
    10fe:	d0 90 bc 04 	lds	r13, 0x04BC	; 0x8004bc <FRONT>
    1102:	c0 90 bd 04 	lds	r12, 0x04BD	; 0x8004bd <FRONT+0x1>
    1106:	f0 90 ba 04 	lds	r15, 0x04BA	; 0x8004ba <HEAD>
    110a:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <HEAD+0x1>
    110e:	8f 2d       	mov	r24, r15
    1110:	9e 2d       	mov	r25, r14
    1112:	bd db       	rcall	.-2182   	; 0x88e <LL_Size>
    1114:	3f 92       	push	r3
    1116:	4f 92       	push	r4
    1118:	5f 92       	push	r5
    111a:	6f 92       	push	r6
    111c:	1f 92       	push	r1
    111e:	7f 92       	push	r7
    1120:	8f 92       	push	r8
    1122:	9f 92       	push	r9
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	1f 93       	push	r17
    112e:	0f 93       	push	r16
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	1f 92       	push	r1
    1136:	8f 93       	push	r24
    1138:	8b e0       	ldi	r24, 0x0B	; 11
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	8e 01       	movw	r16, r28
    1142:	0b 59       	subi	r16, 0x9B	; 155
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	1f 93       	push	r17
    1148:	0f 93       	push	r16
    114a:	0e d3       	rcall	.+1564   	; 0x1768 <sprintf>
    114c:	c8 01       	movw	r24, r16
    114e:	dd d1       	rcall	.+954    	; 0x150a <UART_SendString>
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	89 b1       	in	r24, 0x09	; 9
    115c:	83 70       	andi	r24, 0x03	; 3
    115e:	e9 f7       	brne	.-6      	; 0x115a <SYS_Pause+0x202>
    1160:	84 e2       	ldi	r24, 0x24	; 36
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	d2 d1       	rcall	.+932    	; 0x150a <UART_SendString>
    1166:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <g_PauseRequest>
    116a:	80 e8       	ldi	r24, 0x80	; 128
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	b2 dc       	rcall	.-1692   	; 0xad4 <PWM>
    1170:	78 94       	sei
    1172:	c6 50       	subi	r28, 0x06	; 6
    1174:	df 4f       	sbci	r29, 0xFF	; 255
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	7f 90       	pop	r7
    119a:	6f 90       	pop	r6
    119c:	5f 90       	pop	r5
    119e:	4f 90       	pop	r4
    11a0:	3f 90       	pop	r3
    11a2:	08 95       	ret

000011a4 <SYS_Unclassified>:
void SYS_Unclassified()
{
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	e2 97       	sbiw	r28, 0x32	; 50
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
	cli();
    11bc:	f8 94       	cli
	PWM(0);
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	88 dc       	rcall	.-1776   	; 0xad4 <PWM>
	UART_SendString("\r\n\r\n\r\nUNCLASSIFIED ITEM DETECTED\r\n\r\n\r\n");
    11c4:	8c e9       	ldi	r24, 0x9C	; 156
    11c6:	93 e0       	ldi	r25, 0x03	; 3
    11c8:	a0 d1       	rcall	.+832    	; 0x150a <UART_SendString>
	char buffer[50];
	sprintf(buffer, "Item statistics:\r\nReflectance: %u, Magnetic: %u\r\n", LL_GetRefl(HEAD->prev), LL_GetMag(HEAD->prev));
    11ca:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
    11ce:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
    11d2:	84 81       	ldd	r24, Z+4	; 0x04
    11d4:	95 81       	ldd	r25, Z+5	; 0x05
    11d6:	77 db       	rcall	.-2322   	; 0x8c6 <LL_GetMag>
    11d8:	18 2f       	mov	r17, r24
    11da:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
    11de:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
    11e2:	84 81       	ldd	r24, Z+4	; 0x04
    11e4:	95 81       	ldd	r25, Z+5	; 0x05
    11e6:	69 db       	rcall	.-2350   	; 0x8ba <LL_GetRefl>
    11e8:	1f 92       	push	r1
    11ea:	1f 93       	push	r17
    11ec:	9f 93       	push	r25
    11ee:	8f 93       	push	r24
    11f0:	83 ec       	ldi	r24, 0xC3	; 195
    11f2:	93 e0       	ldi	r25, 0x03	; 3
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	8e 01       	movw	r16, r28
    11fa:	0f 5f       	subi	r16, 0xFF	; 255
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	1f 93       	push	r17
    1200:	0f 93       	push	r16
	UART_SendString(buffer);
    1202:	b2 d2       	rcall	.+1380   	; 0x1768 <sprintf>
    1204:	c8 01       	movw	r24, r16
    1206:	81 d1       	rcall	.+770    	; 0x150a <UART_SendString>
	UART_SendString("\r\n\r\n\r\nPlease remove item and push both buttons to resume\r\n\r\n\r\n");
    1208:	85 ef       	ldi	r24, 0xF5	; 245
    120a:	93 e0       	ldi	r25, 0x03	; 3
    120c:	7e d1       	rcall	.+764    	; 0x150a <UART_SendString>
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    1218:	89 b1       	in	r24, 0x09	; 9
    121a:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    121c:	e9 f7       	brne	.-6      	; 0x1218 <SYS_Unclassified+0x74>
    121e:	84 e2       	ldi	r24, 0x24	; 36
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	73 d1       	rcall	.+742    	; 0x150a <UART_SendString>
			PWM(0x80);
    1224:	80 e8       	ldi	r24, 0x80	; 128
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	55 dc       	rcall	.-1878   	; 0xad4 <PWM>
    122a:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_UnclassifiedRequest>
			g_UnclassifiedRequest = 0;
    122e:	78 94       	sei
			sei();
    1230:	e2 96       	adiw	r28, 0x32	; 50
			break;
		}
	}
	return;
}
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	08 95       	ret

00001246 <SYS_Missing>:
    1246:	0f 93       	push	r16
void SYS_Missing()
{
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	c4 56       	subi	r28, 0x64	; 100
    1254:	d1 09       	sbc	r29, r1
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
	cli();
    1260:	f8 94       	cli
	PWM(0);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	36 dc       	rcall	.-1940   	; 0xad4 <PWM>
	char buffer[100];
	extern list* HEAD;
	extern list* N_1;
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1268:	84 e3       	ldi	r24, 0x34	; 52
    126a:	94 e0       	ldi	r25, 0x04	; 4
    126c:	4e d1       	rcall	.+668    	; 0x150a <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    126e:	84 e3       	ldi	r24, 0x34	; 52
    1270:	94 e0       	ldi	r25, 0x04	; 4
    1272:	4b d1       	rcall	.+662    	; 0x150a <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1274:	84 e3       	ldi	r24, 0x34	; 52
    1276:	94 e0       	ldi	r25, 0x04	; 4
    1278:	48 d1       	rcall	.+656    	; 0x150a <UART_SendString>
    127a:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <N_1>
	sprintf(buffer, "System Tick: %u, Last Tick: %u, Head Tick: %u Prev Tick: %u\r\n\r\n\r\n",g_Timer, g_TimerLast, LL_GetTick(HEAD), LL_GetTick(N_1));
    127e:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <N_1+0x1>
    1282:	46 db       	rcall	.-2420   	; 0x910 <LL_GetTick>
    1284:	18 2f       	mov	r17, r24
    1286:	09 2f       	mov	r16, r25
    1288:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
    128c:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
    1290:	3f db       	rcall	.-2434   	; 0x910 <LL_GetTick>
    1292:	40 91 28 05 	lds	r20, 0x0528	; 0x800528 <g_TimerLast>
    1296:	50 91 29 05 	lds	r21, 0x0529	; 0x800529 <g_TimerLast+0x1>
    129a:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
    129e:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	5f 93       	push	r21
    12ac:	4f 93       	push	r20
    12ae:	3f 93       	push	r19
    12b0:	2f 93       	push	r18
    12b2:	8d e4       	ldi	r24, 0x4D	; 77
    12b4:	94 e0       	ldi	r25, 0x04	; 4
    12b6:	9f 93       	push	r25
    12b8:	8f 93       	push	r24
    12ba:	8e 01       	movw	r16, r28
    12bc:	0f 5f       	subi	r16, 0xFF	; 255
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	1f 93       	push	r17
    12c2:	0f 93       	push	r16
    12c4:	51 d2       	rcall	.+1186   	; 0x1768 <sprintf>
	UART_SendString(buffer);	
    12c6:	c8 01       	movw	r24, r16
    12c8:	20 d1       	rcall	.+576    	; 0x150a <UART_SendString>
    12ca:	8f e8       	ldi	r24, 0x8F	; 143
	UART_SendString("Press both buttons to resume...\r\n");
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	1d d1       	rcall	.+570    	; 0x150a <UART_SendString>
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    12dc:	83 70       	andi	r24, 0x03	; 3
    12de:	e9 f7       	brne	.-6      	; 0x12da <SYS_Missing+0x94>
    12e0:	84 e2       	ldi	r24, 0x24	; 36
		{
			UART_SendString("Starting System!\r\n");
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	12 d1       	rcall	.+548    	; 0x150a <UART_SendString>
    12e6:	80 e8       	ldi	r24, 0x80	; 128
    12e8:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    12ea:	f4 db       	rcall	.-2072   	; 0xad4 <PWM>
    12ec:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_MissingRequest>
    12f0:	78 94       	sei
			g_MissingRequest = 0;
    12f2:	cc 59       	subi	r28, 0x9C	; 156
    12f4:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    12f6:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	08 95       	ret

0000130a <__vector_17>:
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	0b b6       	in	r0, 0x3b	; 59
    1316:	0f 92       	push	r0
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    133c:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_timer_tick>
    1340:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <_timer_tick+0x1>
    134a:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <_timer_tick>
    134e:	c0 ee       	ldi	r28, 0xE0	; 224
    1350:	d4 e0       	ldi	r29, 0x04	; 4
    1352:	0f 2e       	mov	r0, r31
    1354:	f8 e2       	ldi	r31, 0x28	; 40
    1356:	ef 2e       	mov	r14, r31
    1358:	f5 e0       	ldi	r31, 0x05	; 5
    135a:	ff 2e       	mov	r15, r31
    135c:	f0 2d       	mov	r31, r0
    135e:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    1360:	ec 81       	ldd	r30, Y+4	; 0x04
    1362:	fd 81       	ldd	r31, Y+5	; 0x05
    1364:	30 97       	sbiw	r30, 0x00	; 0
    1366:	09 f1       	breq	.+66     	; 0x13aa <__vector_17+0xa0>
    1368:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_timer_tick>
    136c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    1370:	28 81       	ld	r18, Y
    1372:	39 81       	ldd	r19, Y+1	; 0x01
    1374:	28 17       	cp	r18, r24
    1376:	39 07       	cpc	r19, r25
    1378:	c1 f4       	brne	.+48     	; 0x13aa <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    137a:	88 85       	ldd	r24, Y+8	; 0x08
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	19 f4       	brne	.+6      	; 0x1386 <__vector_17+0x7c>
    1380:	8e 81       	ldd	r24, Y+6	; 0x06
    1382:	9f 81       	ldd	r25, Y+7	; 0x07
    1384:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1386:	d8 01       	movw	r26, r16
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	41 f0       	breq	.+16     	; 0x13a4 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1394:	2d 91       	ld	r18, X+
    1396:	3c 91       	ld	r19, X
    1398:	11 97       	sbiw	r26, 0x01	; 1
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	8d 93       	st	X+, r24
    13a0:	9c 93       	st	X, r25
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    13a4:	f8 01       	movw	r30, r16
    13a6:	15 82       	std	Z+5, r1	; 0x05
    13a8:	14 82       	std	Z+4, r1	; 0x04
    13aa:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    13ac:	ce 15       	cp	r28, r14
    13ae:	df 05       	cpc	r29, r15
    13b0:	b1 f6       	brne	.-84     	; 0x135e <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    13b2:	ff 91       	pop	r31
    13b4:	ef 91       	pop	r30
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    13e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    13ec:	88 e4       	ldi	r24, 0x48	; 72
    13ee:	98 e0       	ldi	r25, 0x08	; 8
    13f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    13f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    13f8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1408:	88 e4       	ldi	r24, 0x48	; 72
    140a:	e0 ee       	ldi	r30, 0xE0	; 224
    140c:	f4 e0       	ldi	r31, 0x04	; 4
    140e:	df 01       	movw	r26, r30
    1410:	1d 92       	st	X+, r1
    1412:	8a 95       	dec	r24
    1414:	e9 f7       	brne	.-6      	; 0x1410 <TIMER_Init+0x2c>
    1416:	08 95       	ret

00001418 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1422:	60 91 e4 04 	lds	r22, 0x04E4	; 0x8004e4 <_timer+0x4>
    1426:	70 91 e5 04 	lds	r23, 0x04E5	; 0x8004e5 <_timer+0x5>
    142a:	67 2b       	or	r22, r23
    142c:	09 f4       	brne	.+2      	; 0x1430 <TIMER_Create+0x18>
    142e:	49 c0       	rjmp	.+146    	; 0x14c2 <TIMER_Create+0xaa>
    1430:	e0 ee       	ldi	r30, 0xE0	; 224
    1432:	f4 e0       	ldi	r31, 0x04	; 4
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1434:	a1 e0       	ldi	r26, 0x01	; 1
    1436:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1438:	c5 85       	ldd	r28, Z+13	; 0x0d
    143a:	d6 85       	ldd	r29, Z+14	; 0x0e
    143c:	cd 2b       	or	r28, r29
    143e:	09 f4       	brne	.+2      	; 0x1442 <TIMER_Create+0x2a>
    1440:	42 c0       	rjmp	.+132    	; 0x14c6 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1442:	11 96       	adiw	r26, 0x01	; 1
    1444:	39 96       	adiw	r30, 0x09	; 9
    1446:	a8 30       	cpi	r26, 0x08	; 8
    1448:	b1 05       	cpc	r27, r1
    144a:	b1 f7       	brne	.-20     	; 0x1438 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1452:	fd 01       	movw	r30, r26
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	ea 0f       	add	r30, r26
    1462:	fb 1f       	adc	r31, r27
    1464:	e0 52       	subi	r30, 0x20	; 32
    1466:	fb 4f       	sbci	r31, 0xFB	; 251
    1468:	93 83       	std	Z+3, r25	; 0x03
    146a:	82 83       	std	Z+2, r24	; 0x02
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    146e:	fd 01       	movw	r30, r26
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	ea 0f       	add	r30, r26
    147e:	fb 1f       	adc	r31, r27
    1480:	e0 52       	subi	r30, 0x20	; 32
    1482:	fb 4f       	sbci	r31, 0xFB	; 251
    1484:	13 82       	std	Z+3, r1	; 0x03
    1486:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1488:	fd 01       	movw	r30, r26
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ea 0f       	add	r30, r26
    1498:	fb 1f       	adc	r31, r27
    149a:	e0 52       	subi	r30, 0x20	; 32
    149c:	fb 4f       	sbci	r31, 0xFB	; 251
    149e:	55 83       	std	Z+5, r21	; 0x05
    14a0:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    14a2:	37 83       	std	Z+7, r19	; 0x07
    14a4:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    14a6:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <_timer_tick>
    14aa:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
			_timer[i].state = READY;
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14ba:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    14bc:	8a 2f       	mov	r24, r26
    14be:	9b 2f       	mov	r25, r27
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    14c6:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14c8:	f8 94       	cli
		{
			if (periodic != 0) 
    14ca:	01 2b       	or	r16, r17
    14cc:	11 f6       	brne	.-124    	; 0x1452 <TIMER_Create+0x3a>
    14ce:	cf cf       	rjmp	.-98     	; 0x146e <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

000014da <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    14da:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    14de:	83 e3       	ldi	r24, 0x33	; 51
    14e0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    14e4:	e9 ec       	ldi	r30, 0xC9	; 201
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	88 61       	ori	r24, 0x18	; 24
    14ec:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    14ee:	ea ec       	ldi	r30, 0xCA	; 202
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	86 60       	ori	r24, 0x06	; 6
    14f6:	80 83       	st	Z, r24
    14f8:	08 95       	ret

000014fa <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    14fa:	e8 ec       	ldi	r30, 0xC8	; 200
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	90 81       	ld	r25, Z
    1500:	95 ff       	sbrs	r25, 5
    1502:	fd cf       	rjmp	.-6      	; 0x14fe <UART_SendChar+0x4>
	UDR1 = c;
    1504:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1508:	08 95       	ret

0000150a <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1510:	88 81       	ld	r24, Y
    1512:	88 23       	and	r24, r24
    1514:	29 f0       	breq	.+10     	; 0x1520 <UART_SendString+0x16>
    1516:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1518:	f0 df       	rcall	.-32     	; 0x14fa <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    151a:	89 91       	ld	r24, Y+
    151c:	81 11       	cpse	r24, r1
    151e:	fc cf       	rjmp	.-8      	; 0x1518 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <malloc>:
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	82 30       	cpi	r24, 0x02	; 2
    1530:	91 05       	cpc	r25, r1
    1532:	10 f4       	brcc	.+4      	; 0x1538 <malloc+0x12>
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <__flp>
    153c:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <__flp+0x1>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	30 97       	sbiw	r30, 0x00	; 0
    154a:	19 f1       	breq	.+70     	; 0x1592 <malloc+0x6c>
    154c:	40 81       	ld	r20, Z
    154e:	51 81       	ldd	r21, Z+1	; 0x01
    1550:	02 81       	ldd	r16, Z+2	; 0x02
    1552:	13 81       	ldd	r17, Z+3	; 0x03
    1554:	48 17       	cp	r20, r24
    1556:	59 07       	cpc	r21, r25
    1558:	c8 f0       	brcs	.+50     	; 0x158c <malloc+0x66>
    155a:	84 17       	cp	r24, r20
    155c:	95 07       	cpc	r25, r21
    155e:	69 f4       	brne	.+26     	; 0x157a <malloc+0x54>
    1560:	10 97       	sbiw	r26, 0x00	; 0
    1562:	31 f0       	breq	.+12     	; 0x1570 <malloc+0x4a>
    1564:	12 96       	adiw	r26, 0x02	; 2
    1566:	0c 93       	st	X, r16
    1568:	12 97       	sbiw	r26, 0x02	; 2
    156a:	13 96       	adiw	r26, 0x03	; 3
    156c:	1c 93       	st	X, r17
    156e:	27 c0       	rjmp	.+78     	; 0x15be <malloc+0x98>
    1570:	00 93 40 05 	sts	0x0540, r16	; 0x800540 <__flp>
    1574:	10 93 41 05 	sts	0x0541, r17	; 0x800541 <__flp+0x1>
    1578:	22 c0       	rjmp	.+68     	; 0x15be <malloc+0x98>
    157a:	21 15       	cp	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	19 f0       	breq	.+6      	; 0x1586 <malloc+0x60>
    1580:	42 17       	cp	r20, r18
    1582:	53 07       	cpc	r21, r19
    1584:	18 f4       	brcc	.+6      	; 0x158c <malloc+0x66>
    1586:	9a 01       	movw	r18, r20
    1588:	bd 01       	movw	r22, r26
    158a:	ef 01       	movw	r28, r30
    158c:	df 01       	movw	r26, r30
    158e:	f8 01       	movw	r30, r16
    1590:	db cf       	rjmp	.-74     	; 0x1548 <malloc+0x22>
    1592:	21 15       	cp	r18, r1
    1594:	31 05       	cpc	r19, r1
    1596:	f9 f0       	breq	.+62     	; 0x15d6 <malloc+0xb0>
    1598:	28 1b       	sub	r18, r24
    159a:	39 0b       	sbc	r19, r25
    159c:	24 30       	cpi	r18, 0x04	; 4
    159e:	31 05       	cpc	r19, r1
    15a0:	80 f4       	brcc	.+32     	; 0x15c2 <malloc+0x9c>
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	9b 81       	ldd	r25, Y+3	; 0x03
    15a6:	61 15       	cp	r22, r1
    15a8:	71 05       	cpc	r23, r1
    15aa:	21 f0       	breq	.+8      	; 0x15b4 <malloc+0x8e>
    15ac:	fb 01       	movw	r30, r22
    15ae:	93 83       	std	Z+3, r25	; 0x03
    15b0:	82 83       	std	Z+2, r24	; 0x02
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <malloc+0x96>
    15b4:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <__flp+0x1>
    15b8:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <__flp>
    15bc:	fe 01       	movw	r30, r28
    15be:	32 96       	adiw	r30, 0x02	; 2
    15c0:	44 c0       	rjmp	.+136    	; 0x164a <malloc+0x124>
    15c2:	fe 01       	movw	r30, r28
    15c4:	e2 0f       	add	r30, r18
    15c6:	f3 1f       	adc	r31, r19
    15c8:	81 93       	st	Z+, r24
    15ca:	91 93       	st	Z+, r25
    15cc:	22 50       	subi	r18, 0x02	; 2
    15ce:	31 09       	sbc	r19, r1
    15d0:	39 83       	std	Y+1, r19	; 0x01
    15d2:	28 83       	st	Y, r18
    15d4:	3a c0       	rjmp	.+116    	; 0x164a <malloc+0x124>
    15d6:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    15da:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    15de:	23 2b       	or	r18, r19
    15e0:	41 f4       	brne	.+16     	; 0x15f2 <malloc+0xcc>
    15e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    15e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    15ea:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <__brkval+0x1>
    15ee:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <__brkval>
    15f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    15f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    15fa:	21 15       	cp	r18, r1
    15fc:	31 05       	cpc	r19, r1
    15fe:	41 f4       	brne	.+16     	; 0x1610 <malloc+0xea>
    1600:	2d b7       	in	r18, 0x3d	; 61
    1602:	3e b7       	in	r19, 0x3e	; 62
    1604:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1608:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    160c:	24 1b       	sub	r18, r20
    160e:	35 0b       	sbc	r19, r21
    1610:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <__brkval>
    1614:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <__brkval+0x1>
    1618:	e2 17       	cp	r30, r18
    161a:	f3 07       	cpc	r31, r19
    161c:	a0 f4       	brcc	.+40     	; 0x1646 <malloc+0x120>
    161e:	2e 1b       	sub	r18, r30
    1620:	3f 0b       	sbc	r19, r31
    1622:	28 17       	cp	r18, r24
    1624:	39 07       	cpc	r19, r25
    1626:	78 f0       	brcs	.+30     	; 0x1646 <malloc+0x120>
    1628:	ac 01       	movw	r20, r24
    162a:	4e 5f       	subi	r20, 0xFE	; 254
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	24 17       	cp	r18, r20
    1630:	35 07       	cpc	r19, r21
    1632:	48 f0       	brcs	.+18     	; 0x1646 <malloc+0x120>
    1634:	4e 0f       	add	r20, r30
    1636:	5f 1f       	adc	r21, r31
    1638:	50 93 3f 05 	sts	0x053F, r21	; 0x80053f <__brkval+0x1>
    163c:	40 93 3e 05 	sts	0x053E, r20	; 0x80053e <__brkval>
    1640:	81 93       	st	Z+, r24
    1642:	91 93       	st	Z+, r25
    1644:	02 c0       	rjmp	.+4      	; 0x164a <malloc+0x124>
    1646:	e0 e0       	ldi	r30, 0x00	; 0
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	cf 01       	movw	r24, r30
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <free>:
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	09 f4       	brne	.+2      	; 0x1660 <free+0xa>
    165e:	81 c0       	rjmp	.+258    	; 0x1762 <free+0x10c>
    1660:	fc 01       	movw	r30, r24
    1662:	32 97       	sbiw	r30, 0x02	; 2
    1664:	13 82       	std	Z+3, r1	; 0x03
    1666:	12 82       	std	Z+2, r1	; 0x02
    1668:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <__flp>
    166c:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <__flp+0x1>
    1670:	10 97       	sbiw	r26, 0x00	; 0
    1672:	81 f4       	brne	.+32     	; 0x1694 <free+0x3e>
    1674:	20 81       	ld	r18, Z
    1676:	31 81       	ldd	r19, Z+1	; 0x01
    1678:	82 0f       	add	r24, r18
    167a:	93 1f       	adc	r25, r19
    167c:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    1680:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    1684:	28 17       	cp	r18, r24
    1686:	39 07       	cpc	r19, r25
    1688:	51 f5       	brne	.+84     	; 0x16de <free+0x88>
    168a:	f0 93 3f 05 	sts	0x053F, r31	; 0x80053f <__brkval+0x1>
    168e:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <__brkval>
    1692:	67 c0       	rjmp	.+206    	; 0x1762 <free+0x10c>
    1694:	ed 01       	movw	r28, r26
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	ce 17       	cp	r28, r30
    169c:	df 07       	cpc	r29, r31
    169e:	40 f4       	brcc	.+16     	; 0x16b0 <free+0x5a>
    16a0:	4a 81       	ldd	r20, Y+2	; 0x02
    16a2:	5b 81       	ldd	r21, Y+3	; 0x03
    16a4:	9e 01       	movw	r18, r28
    16a6:	41 15       	cp	r20, r1
    16a8:	51 05       	cpc	r21, r1
    16aa:	f1 f0       	breq	.+60     	; 0x16e8 <free+0x92>
    16ac:	ea 01       	movw	r28, r20
    16ae:	f5 cf       	rjmp	.-22     	; 0x169a <free+0x44>
    16b0:	d3 83       	std	Z+3, r29	; 0x03
    16b2:	c2 83       	std	Z+2, r28	; 0x02
    16b4:	40 81       	ld	r20, Z
    16b6:	51 81       	ldd	r21, Z+1	; 0x01
    16b8:	84 0f       	add	r24, r20
    16ba:	95 1f       	adc	r25, r21
    16bc:	c8 17       	cp	r28, r24
    16be:	d9 07       	cpc	r29, r25
    16c0:	59 f4       	brne	.+22     	; 0x16d8 <free+0x82>
    16c2:	88 81       	ld	r24, Y
    16c4:	99 81       	ldd	r25, Y+1	; 0x01
    16c6:	84 0f       	add	r24, r20
    16c8:	95 1f       	adc	r25, r21
    16ca:	02 96       	adiw	r24, 0x02	; 2
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	9b 81       	ldd	r25, Y+3	; 0x03
    16d4:	93 83       	std	Z+3, r25	; 0x03
    16d6:	82 83       	std	Z+2, r24	; 0x02
    16d8:	21 15       	cp	r18, r1
    16da:	31 05       	cpc	r19, r1
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <free+0x92>
    16de:	f0 93 41 05 	sts	0x0541, r31	; 0x800541 <__flp+0x1>
    16e2:	e0 93 40 05 	sts	0x0540, r30	; 0x800540 <__flp>
    16e6:	3d c0       	rjmp	.+122    	; 0x1762 <free+0x10c>
    16e8:	e9 01       	movw	r28, r18
    16ea:	fb 83       	std	Y+3, r31	; 0x03
    16ec:	ea 83       	std	Y+2, r30	; 0x02
    16ee:	49 91       	ld	r20, Y+
    16f0:	59 91       	ld	r21, Y+
    16f2:	c4 0f       	add	r28, r20
    16f4:	d5 1f       	adc	r29, r21
    16f6:	ec 17       	cp	r30, r28
    16f8:	fd 07       	cpc	r31, r29
    16fa:	61 f4       	brne	.+24     	; 0x1714 <free+0xbe>
    16fc:	80 81       	ld	r24, Z
    16fe:	91 81       	ldd	r25, Z+1	; 0x01
    1700:	84 0f       	add	r24, r20
    1702:	95 1f       	adc	r25, r21
    1704:	02 96       	adiw	r24, 0x02	; 2
    1706:	e9 01       	movw	r28, r18
    1708:	99 83       	std	Y+1, r25	; 0x01
    170a:	88 83       	st	Y, r24
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	9b 83       	std	Y+3, r25	; 0x03
    1712:	8a 83       	std	Y+2, r24	; 0x02
    1714:	e0 e0       	ldi	r30, 0x00	; 0
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	8d 91       	ld	r24, X+
    171c:	9c 91       	ld	r25, X
    171e:	13 97       	sbiw	r26, 0x03	; 3
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	19 f0       	breq	.+6      	; 0x172a <free+0xd4>
    1724:	fd 01       	movw	r30, r26
    1726:	dc 01       	movw	r26, r24
    1728:	f7 cf       	rjmp	.-18     	; 0x1718 <free+0xc2>
    172a:	8d 91       	ld	r24, X+
    172c:	9c 91       	ld	r25, X
    172e:	11 97       	sbiw	r26, 0x01	; 1
    1730:	9d 01       	movw	r18, r26
    1732:	2e 5f       	subi	r18, 0xFE	; 254
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	82 0f       	add	r24, r18
    1738:	93 1f       	adc	r25, r19
    173a:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    173e:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    1742:	28 17       	cp	r18, r24
    1744:	39 07       	cpc	r19, r25
    1746:	69 f4       	brne	.+26     	; 0x1762 <free+0x10c>
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	29 f4       	brne	.+10     	; 0x1756 <free+0x100>
    174c:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <__flp+0x1>
    1750:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <__flp>
    1754:	02 c0       	rjmp	.+4      	; 0x175a <free+0x104>
    1756:	13 82       	std	Z+3, r1	; 0x03
    1758:	12 82       	std	Z+2, r1	; 0x02
    175a:	b0 93 3f 05 	sts	0x053F, r27	; 0x80053f <__brkval+0x1>
    175e:	a0 93 3e 05 	sts	0x053E, r26	; 0x80053e <__brkval>
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	08 95       	ret

00001768 <sprintf>:
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	2e 97       	sbiw	r28, 0x0e	; 14
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	0d 89       	ldd	r16, Y+21	; 0x15
    1782:	1e 89       	ldd	r17, Y+22	; 0x16
    1784:	86 e0       	ldi	r24, 0x06	; 6
    1786:	8c 83       	std	Y+4, r24	; 0x04
    1788:	1a 83       	std	Y+2, r17	; 0x02
    178a:	09 83       	std	Y+1, r16	; 0x01
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	9f e7       	ldi	r25, 0x7F	; 127
    1790:	9e 83       	std	Y+6, r25	; 0x06
    1792:	8d 83       	std	Y+5, r24	; 0x05
    1794:	ae 01       	movw	r20, r28
    1796:	47 5e       	subi	r20, 0xE7	; 231
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	6f 89       	ldd	r22, Y+23	; 0x17
    179c:	78 8d       	ldd	r23, Y+24	; 0x18
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	10 d0       	rcall	.+32     	; 0x17c4 <vfprintf>
    17a4:	ef 81       	ldd	r30, Y+7	; 0x07
    17a6:	f8 85       	ldd	r31, Y+8	; 0x08
    17a8:	e0 0f       	add	r30, r16
    17aa:	f1 1f       	adc	r31, r17
    17ac:	10 82       	st	Z, r1
    17ae:	2e 96       	adiw	r28, 0x0e	; 14
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	08 95       	ret

000017c4 <vfprintf>:
    17c4:	2f 92       	push	r2
    17c6:	3f 92       	push	r3
    17c8:	4f 92       	push	r4
    17ca:	5f 92       	push	r5
    17cc:	6f 92       	push	r6
    17ce:	7f 92       	push	r7
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	2b 97       	sbiw	r28, 0x0b	; 11
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	6c 01       	movw	r12, r24
    17fa:	7b 01       	movw	r14, r22
    17fc:	8a 01       	movw	r16, r20
    17fe:	fc 01       	movw	r30, r24
    1800:	17 82       	std	Z+7, r1	; 0x07
    1802:	16 82       	std	Z+6, r1	; 0x06
    1804:	83 81       	ldd	r24, Z+3	; 0x03
    1806:	81 ff       	sbrs	r24, 1
    1808:	bf c1       	rjmp	.+894    	; 0x1b88 <vfprintf+0x3c4>
    180a:	ce 01       	movw	r24, r28
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	3c 01       	movw	r6, r24
    1810:	f6 01       	movw	r30, r12
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	f7 01       	movw	r30, r14
    1816:	93 fd       	sbrc	r25, 3
    1818:	85 91       	lpm	r24, Z+
    181a:	93 ff       	sbrs	r25, 3
    181c:	81 91       	ld	r24, Z+
    181e:	7f 01       	movw	r14, r30
    1820:	88 23       	and	r24, r24
    1822:	09 f4       	brne	.+2      	; 0x1826 <vfprintf+0x62>
    1824:	ad c1       	rjmp	.+858    	; 0x1b80 <vfprintf+0x3bc>
    1826:	85 32       	cpi	r24, 0x25	; 37
    1828:	39 f4       	brne	.+14     	; 0x1838 <vfprintf+0x74>
    182a:	93 fd       	sbrc	r25, 3
    182c:	85 91       	lpm	r24, Z+
    182e:	93 ff       	sbrs	r25, 3
    1830:	81 91       	ld	r24, Z+
    1832:	7f 01       	movw	r14, r30
    1834:	85 32       	cpi	r24, 0x25	; 37
    1836:	21 f4       	brne	.+8      	; 0x1840 <vfprintf+0x7c>
    1838:	b6 01       	movw	r22, r12
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	d6 d1       	rcall	.+940    	; 0x1bea <fputc>
    183e:	e8 cf       	rjmp	.-48     	; 0x1810 <vfprintf+0x4c>
    1840:	91 2c       	mov	r9, r1
    1842:	21 2c       	mov	r2, r1
    1844:	31 2c       	mov	r3, r1
    1846:	ff e1       	ldi	r31, 0x1F	; 31
    1848:	f3 15       	cp	r31, r3
    184a:	d8 f0       	brcs	.+54     	; 0x1882 <vfprintf+0xbe>
    184c:	8b 32       	cpi	r24, 0x2B	; 43
    184e:	79 f0       	breq	.+30     	; 0x186e <vfprintf+0xaa>
    1850:	38 f4       	brcc	.+14     	; 0x1860 <vfprintf+0x9c>
    1852:	80 32       	cpi	r24, 0x20	; 32
    1854:	79 f0       	breq	.+30     	; 0x1874 <vfprintf+0xb0>
    1856:	83 32       	cpi	r24, 0x23	; 35
    1858:	a1 f4       	brne	.+40     	; 0x1882 <vfprintf+0xbe>
    185a:	23 2d       	mov	r18, r3
    185c:	20 61       	ori	r18, 0x10	; 16
    185e:	1d c0       	rjmp	.+58     	; 0x189a <vfprintf+0xd6>
    1860:	8d 32       	cpi	r24, 0x2D	; 45
    1862:	61 f0       	breq	.+24     	; 0x187c <vfprintf+0xb8>
    1864:	80 33       	cpi	r24, 0x30	; 48
    1866:	69 f4       	brne	.+26     	; 0x1882 <vfprintf+0xbe>
    1868:	23 2d       	mov	r18, r3
    186a:	21 60       	ori	r18, 0x01	; 1
    186c:	16 c0       	rjmp	.+44     	; 0x189a <vfprintf+0xd6>
    186e:	83 2d       	mov	r24, r3
    1870:	82 60       	ori	r24, 0x02	; 2
    1872:	38 2e       	mov	r3, r24
    1874:	e3 2d       	mov	r30, r3
    1876:	e4 60       	ori	r30, 0x04	; 4
    1878:	3e 2e       	mov	r3, r30
    187a:	2a c0       	rjmp	.+84     	; 0x18d0 <vfprintf+0x10c>
    187c:	f3 2d       	mov	r31, r3
    187e:	f8 60       	ori	r31, 0x08	; 8
    1880:	1d c0       	rjmp	.+58     	; 0x18bc <vfprintf+0xf8>
    1882:	37 fc       	sbrc	r3, 7
    1884:	2d c0       	rjmp	.+90     	; 0x18e0 <vfprintf+0x11c>
    1886:	20 ed       	ldi	r18, 0xD0	; 208
    1888:	28 0f       	add	r18, r24
    188a:	2a 30       	cpi	r18, 0x0A	; 10
    188c:	40 f0       	brcs	.+16     	; 0x189e <vfprintf+0xda>
    188e:	8e 32       	cpi	r24, 0x2E	; 46
    1890:	b9 f4       	brne	.+46     	; 0x18c0 <vfprintf+0xfc>
    1892:	36 fc       	sbrc	r3, 6
    1894:	75 c1       	rjmp	.+746    	; 0x1b80 <vfprintf+0x3bc>
    1896:	23 2d       	mov	r18, r3
    1898:	20 64       	ori	r18, 0x40	; 64
    189a:	32 2e       	mov	r3, r18
    189c:	19 c0       	rjmp	.+50     	; 0x18d0 <vfprintf+0x10c>
    189e:	36 fe       	sbrs	r3, 6
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <vfprintf+0xea>
    18a2:	8a e0       	ldi	r24, 0x0A	; 10
    18a4:	98 9e       	mul	r9, r24
    18a6:	20 0d       	add	r18, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	92 2e       	mov	r9, r18
    18ac:	11 c0       	rjmp	.+34     	; 0x18d0 <vfprintf+0x10c>
    18ae:	ea e0       	ldi	r30, 0x0A	; 10
    18b0:	2e 9e       	mul	r2, r30
    18b2:	20 0d       	add	r18, r0
    18b4:	11 24       	eor	r1, r1
    18b6:	22 2e       	mov	r2, r18
    18b8:	f3 2d       	mov	r31, r3
    18ba:	f0 62       	ori	r31, 0x20	; 32
    18bc:	3f 2e       	mov	r3, r31
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <vfprintf+0x10c>
    18c0:	8c 36       	cpi	r24, 0x6C	; 108
    18c2:	21 f4       	brne	.+8      	; 0x18cc <vfprintf+0x108>
    18c4:	83 2d       	mov	r24, r3
    18c6:	80 68       	ori	r24, 0x80	; 128
    18c8:	38 2e       	mov	r3, r24
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <vfprintf+0x10c>
    18cc:	88 36       	cpi	r24, 0x68	; 104
    18ce:	41 f4       	brne	.+16     	; 0x18e0 <vfprintf+0x11c>
    18d0:	f7 01       	movw	r30, r14
    18d2:	93 fd       	sbrc	r25, 3
    18d4:	85 91       	lpm	r24, Z+
    18d6:	93 ff       	sbrs	r25, 3
    18d8:	81 91       	ld	r24, Z+
    18da:	7f 01       	movw	r14, r30
    18dc:	81 11       	cpse	r24, r1
    18de:	b3 cf       	rjmp	.-154    	; 0x1846 <vfprintf+0x82>
    18e0:	98 2f       	mov	r25, r24
    18e2:	9f 7d       	andi	r25, 0xDF	; 223
    18e4:	95 54       	subi	r25, 0x45	; 69
    18e6:	93 30       	cpi	r25, 0x03	; 3
    18e8:	28 f4       	brcc	.+10     	; 0x18f4 <vfprintf+0x130>
    18ea:	0c 5f       	subi	r16, 0xFC	; 252
    18ec:	1f 4f       	sbci	r17, 0xFF	; 255
    18ee:	9f e3       	ldi	r25, 0x3F	; 63
    18f0:	99 83       	std	Y+1, r25	; 0x01
    18f2:	0d c0       	rjmp	.+26     	; 0x190e <vfprintf+0x14a>
    18f4:	83 36       	cpi	r24, 0x63	; 99
    18f6:	31 f0       	breq	.+12     	; 0x1904 <vfprintf+0x140>
    18f8:	83 37       	cpi	r24, 0x73	; 115
    18fa:	71 f0       	breq	.+28     	; 0x1918 <vfprintf+0x154>
    18fc:	83 35       	cpi	r24, 0x53	; 83
    18fe:	09 f0       	breq	.+2      	; 0x1902 <vfprintf+0x13e>
    1900:	55 c0       	rjmp	.+170    	; 0x19ac <vfprintf+0x1e8>
    1902:	20 c0       	rjmp	.+64     	; 0x1944 <vfprintf+0x180>
    1904:	f8 01       	movw	r30, r16
    1906:	80 81       	ld	r24, Z
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	0e 5f       	subi	r16, 0xFE	; 254
    190c:	1f 4f       	sbci	r17, 0xFF	; 255
    190e:	88 24       	eor	r8, r8
    1910:	83 94       	inc	r8
    1912:	91 2c       	mov	r9, r1
    1914:	53 01       	movw	r10, r6
    1916:	12 c0       	rjmp	.+36     	; 0x193c <vfprintf+0x178>
    1918:	28 01       	movw	r4, r16
    191a:	f2 e0       	ldi	r31, 0x02	; 2
    191c:	4f 0e       	add	r4, r31
    191e:	51 1c       	adc	r5, r1
    1920:	f8 01       	movw	r30, r16
    1922:	a0 80       	ld	r10, Z
    1924:	b1 80       	ldd	r11, Z+1	; 0x01
    1926:	36 fe       	sbrs	r3, 6
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <vfprintf+0x16c>
    192a:	69 2d       	mov	r22, r9
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x170>
    1930:	6f ef       	ldi	r22, 0xFF	; 255
    1932:	7f ef       	ldi	r23, 0xFF	; 255
    1934:	c5 01       	movw	r24, r10
    1936:	4e d1       	rcall	.+668    	; 0x1bd4 <strnlen>
    1938:	4c 01       	movw	r8, r24
    193a:	82 01       	movw	r16, r4
    193c:	f3 2d       	mov	r31, r3
    193e:	ff 77       	andi	r31, 0x7F	; 127
    1940:	3f 2e       	mov	r3, r31
    1942:	15 c0       	rjmp	.+42     	; 0x196e <vfprintf+0x1aa>
    1944:	28 01       	movw	r4, r16
    1946:	22 e0       	ldi	r18, 0x02	; 2
    1948:	42 0e       	add	r4, r18
    194a:	51 1c       	adc	r5, r1
    194c:	f8 01       	movw	r30, r16
    194e:	a0 80       	ld	r10, Z
    1950:	b1 80       	ldd	r11, Z+1	; 0x01
    1952:	36 fe       	sbrs	r3, 6
    1954:	03 c0       	rjmp	.+6      	; 0x195c <vfprintf+0x198>
    1956:	69 2d       	mov	r22, r9
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <vfprintf+0x19c>
    195c:	6f ef       	ldi	r22, 0xFF	; 255
    195e:	7f ef       	ldi	r23, 0xFF	; 255
    1960:	c5 01       	movw	r24, r10
    1962:	2d d1       	rcall	.+602    	; 0x1bbe <strnlen_P>
    1964:	4c 01       	movw	r8, r24
    1966:	f3 2d       	mov	r31, r3
    1968:	f0 68       	ori	r31, 0x80	; 128
    196a:	3f 2e       	mov	r3, r31
    196c:	82 01       	movw	r16, r4
    196e:	33 fc       	sbrc	r3, 3
    1970:	19 c0       	rjmp	.+50     	; 0x19a4 <vfprintf+0x1e0>
    1972:	82 2d       	mov	r24, r2
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	88 16       	cp	r8, r24
    1978:	99 06       	cpc	r9, r25
    197a:	a0 f4       	brcc	.+40     	; 0x19a4 <vfprintf+0x1e0>
    197c:	b6 01       	movw	r22, r12
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	33 d1       	rcall	.+614    	; 0x1bea <fputc>
    1984:	2a 94       	dec	r2
    1986:	f5 cf       	rjmp	.-22     	; 0x1972 <vfprintf+0x1ae>
    1988:	f5 01       	movw	r30, r10
    198a:	37 fc       	sbrc	r3, 7
    198c:	85 91       	lpm	r24, Z+
    198e:	37 fe       	sbrs	r3, 7
    1990:	81 91       	ld	r24, Z+
    1992:	5f 01       	movw	r10, r30
    1994:	b6 01       	movw	r22, r12
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	28 d1       	rcall	.+592    	; 0x1bea <fputc>
    199a:	21 10       	cpse	r2, r1
    199c:	2a 94       	dec	r2
    199e:	21 e0       	ldi	r18, 0x01	; 1
    19a0:	82 1a       	sub	r8, r18
    19a2:	91 08       	sbc	r9, r1
    19a4:	81 14       	cp	r8, r1
    19a6:	91 04       	cpc	r9, r1
    19a8:	79 f7       	brne	.-34     	; 0x1988 <vfprintf+0x1c4>
    19aa:	e1 c0       	rjmp	.+450    	; 0x1b6e <vfprintf+0x3aa>
    19ac:	84 36       	cpi	r24, 0x64	; 100
    19ae:	11 f0       	breq	.+4      	; 0x19b4 <vfprintf+0x1f0>
    19b0:	89 36       	cpi	r24, 0x69	; 105
    19b2:	39 f5       	brne	.+78     	; 0x1a02 <vfprintf+0x23e>
    19b4:	f8 01       	movw	r30, r16
    19b6:	37 fe       	sbrs	r3, 7
    19b8:	07 c0       	rjmp	.+14     	; 0x19c8 <vfprintf+0x204>
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0c 5f       	subi	r16, 0xFC	; 252
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	08 c0       	rjmp	.+16     	; 0x19d8 <vfprintf+0x214>
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	07 2e       	mov	r0, r23
    19ce:	00 0c       	add	r0, r0
    19d0:	88 0b       	sbc	r24, r24
    19d2:	99 0b       	sbc	r25, r25
    19d4:	0e 5f       	subi	r16, 0xFE	; 254
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	f3 2d       	mov	r31, r3
    19da:	ff 76       	andi	r31, 0x6F	; 111
    19dc:	3f 2e       	mov	r3, r31
    19de:	97 ff       	sbrs	r25, 7
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <vfprintf+0x230>
    19e2:	90 95       	com	r25
    19e4:	80 95       	com	r24
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	8f 4f       	sbci	r24, 0xFF	; 255
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	f0 68       	ori	r31, 0x80	; 128
    19f2:	3f 2e       	mov	r3, r31
    19f4:	2a e0       	ldi	r18, 0x0A	; 10
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	a3 01       	movw	r20, r6
    19fa:	33 d1       	rcall	.+614    	; 0x1c62 <__ultoa_invert>
    19fc:	88 2e       	mov	r8, r24
    19fe:	86 18       	sub	r8, r6
    1a00:	44 c0       	rjmp	.+136    	; 0x1a8a <vfprintf+0x2c6>
    1a02:	85 37       	cpi	r24, 0x75	; 117
    1a04:	31 f4       	brne	.+12     	; 0x1a12 <vfprintf+0x24e>
    1a06:	23 2d       	mov	r18, r3
    1a08:	2f 7e       	andi	r18, 0xEF	; 239
    1a0a:	b2 2e       	mov	r11, r18
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	25 c0       	rjmp	.+74     	; 0x1a5c <vfprintf+0x298>
    1a12:	93 2d       	mov	r25, r3
    1a14:	99 7f       	andi	r25, 0xF9	; 249
    1a16:	b9 2e       	mov	r11, r25
    1a18:	8f 36       	cpi	r24, 0x6F	; 111
    1a1a:	c1 f0       	breq	.+48     	; 0x1a4c <vfprintf+0x288>
    1a1c:	18 f4       	brcc	.+6      	; 0x1a24 <vfprintf+0x260>
    1a1e:	88 35       	cpi	r24, 0x58	; 88
    1a20:	79 f0       	breq	.+30     	; 0x1a40 <vfprintf+0x27c>
    1a22:	ae c0       	rjmp	.+348    	; 0x1b80 <vfprintf+0x3bc>
    1a24:	80 37       	cpi	r24, 0x70	; 112
    1a26:	19 f0       	breq	.+6      	; 0x1a2e <vfprintf+0x26a>
    1a28:	88 37       	cpi	r24, 0x78	; 120
    1a2a:	21 f0       	breq	.+8      	; 0x1a34 <vfprintf+0x270>
    1a2c:	a9 c0       	rjmp	.+338    	; 0x1b80 <vfprintf+0x3bc>
    1a2e:	e9 2f       	mov	r30, r25
    1a30:	e0 61       	ori	r30, 0x10	; 16
    1a32:	be 2e       	mov	r11, r30
    1a34:	b4 fe       	sbrs	r11, 4
    1a36:	0d c0       	rjmp	.+26     	; 0x1a52 <vfprintf+0x28e>
    1a38:	fb 2d       	mov	r31, r11
    1a3a:	f4 60       	ori	r31, 0x04	; 4
    1a3c:	bf 2e       	mov	r11, r31
    1a3e:	09 c0       	rjmp	.+18     	; 0x1a52 <vfprintf+0x28e>
    1a40:	34 fe       	sbrs	r3, 4
    1a42:	0a c0       	rjmp	.+20     	; 0x1a58 <vfprintf+0x294>
    1a44:	29 2f       	mov	r18, r25
    1a46:	26 60       	ori	r18, 0x06	; 6
    1a48:	b2 2e       	mov	r11, r18
    1a4a:	06 c0       	rjmp	.+12     	; 0x1a58 <vfprintf+0x294>
    1a4c:	28 e0       	ldi	r18, 0x08	; 8
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	05 c0       	rjmp	.+10     	; 0x1a5c <vfprintf+0x298>
    1a52:	20 e1       	ldi	r18, 0x10	; 16
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <vfprintf+0x298>
    1a58:	20 e1       	ldi	r18, 0x10	; 16
    1a5a:	32 e0       	ldi	r19, 0x02	; 2
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	b7 fe       	sbrs	r11, 7
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <vfprintf+0x2ac>
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	0c 5f       	subi	r16, 0xFC	; 252
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <vfprintf+0x2b8>
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 5f       	subi	r16, 0xFE	; 254
    1a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7c:	a3 01       	movw	r20, r6
    1a7e:	f1 d0       	rcall	.+482    	; 0x1c62 <__ultoa_invert>
    1a80:	88 2e       	mov	r8, r24
    1a82:	86 18       	sub	r8, r6
    1a84:	fb 2d       	mov	r31, r11
    1a86:	ff 77       	andi	r31, 0x7F	; 127
    1a88:	3f 2e       	mov	r3, r31
    1a8a:	36 fe       	sbrs	r3, 6
    1a8c:	0d c0       	rjmp	.+26     	; 0x1aa8 <vfprintf+0x2e4>
    1a8e:	23 2d       	mov	r18, r3
    1a90:	2e 7f       	andi	r18, 0xFE	; 254
    1a92:	a2 2e       	mov	r10, r18
    1a94:	89 14       	cp	r8, r9
    1a96:	58 f4       	brcc	.+22     	; 0x1aae <vfprintf+0x2ea>
    1a98:	34 fe       	sbrs	r3, 4
    1a9a:	0b c0       	rjmp	.+22     	; 0x1ab2 <vfprintf+0x2ee>
    1a9c:	32 fc       	sbrc	r3, 2
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <vfprintf+0x2ee>
    1aa0:	83 2d       	mov	r24, r3
    1aa2:	8e 7e       	andi	r24, 0xEE	; 238
    1aa4:	a8 2e       	mov	r10, r24
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <vfprintf+0x2ee>
    1aa8:	b8 2c       	mov	r11, r8
    1aaa:	a3 2c       	mov	r10, r3
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <vfprintf+0x2f0>
    1aae:	b8 2c       	mov	r11, r8
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <vfprintf+0x2f0>
    1ab2:	b9 2c       	mov	r11, r9
    1ab4:	a4 fe       	sbrs	r10, 4
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <vfprintf+0x312>
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e8 0d       	add	r30, r8
    1abc:	f1 1d       	adc	r31, r1
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 33       	cpi	r24, 0x30	; 48
    1ac2:	21 f4       	brne	.+8      	; 0x1acc <vfprintf+0x308>
    1ac4:	9a 2d       	mov	r25, r10
    1ac6:	99 7e       	andi	r25, 0xE9	; 233
    1ac8:	a9 2e       	mov	r10, r25
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x31a>
    1acc:	a2 fe       	sbrs	r10, 2
    1ace:	06 c0       	rjmp	.+12     	; 0x1adc <vfprintf+0x318>
    1ad0:	b3 94       	inc	r11
    1ad2:	b3 94       	inc	r11
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <vfprintf+0x31a>
    1ad6:	8a 2d       	mov	r24, r10
    1ad8:	86 78       	andi	r24, 0x86	; 134
    1ada:	09 f0       	breq	.+2      	; 0x1ade <vfprintf+0x31a>
    1adc:	b3 94       	inc	r11
    1ade:	a3 fc       	sbrc	r10, 3
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <vfprintf+0x33e>
    1ae2:	a0 fe       	sbrs	r10, 0
    1ae4:	06 c0       	rjmp	.+12     	; 0x1af2 <vfprintf+0x32e>
    1ae6:	b2 14       	cp	r11, r2
    1ae8:	80 f4       	brcc	.+32     	; 0x1b0a <vfprintf+0x346>
    1aea:	28 0c       	add	r2, r8
    1aec:	92 2c       	mov	r9, r2
    1aee:	9b 18       	sub	r9, r11
    1af0:	0d c0       	rjmp	.+26     	; 0x1b0c <vfprintf+0x348>
    1af2:	b2 14       	cp	r11, r2
    1af4:	58 f4       	brcc	.+22     	; 0x1b0c <vfprintf+0x348>
    1af6:	b6 01       	movw	r22, r12
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	76 d0       	rcall	.+236    	; 0x1bea <fputc>
    1afe:	b3 94       	inc	r11
    1b00:	f8 cf       	rjmp	.-16     	; 0x1af2 <vfprintf+0x32e>
    1b02:	b2 14       	cp	r11, r2
    1b04:	18 f4       	brcc	.+6      	; 0x1b0c <vfprintf+0x348>
    1b06:	2b 18       	sub	r2, r11
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <vfprintf+0x34a>
    1b0a:	98 2c       	mov	r9, r8
    1b0c:	21 2c       	mov	r2, r1
    1b0e:	a4 fe       	sbrs	r10, 4
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <vfprintf+0x36c>
    1b12:	b6 01       	movw	r22, r12
    1b14:	80 e3       	ldi	r24, 0x30	; 48
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	68 d0       	rcall	.+208    	; 0x1bea <fputc>
    1b1a:	a2 fe       	sbrs	r10, 2
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <vfprintf+0x386>
    1b1e:	a1 fc       	sbrc	r10, 1
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <vfprintf+0x364>
    1b22:	88 e7       	ldi	r24, 0x78	; 120
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <vfprintf+0x368>
    1b28:	88 e5       	ldi	r24, 0x58	; 88
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	0c c0       	rjmp	.+24     	; 0x1b48 <vfprintf+0x384>
    1b30:	8a 2d       	mov	r24, r10
    1b32:	86 78       	andi	r24, 0x86	; 134
    1b34:	51 f0       	breq	.+20     	; 0x1b4a <vfprintf+0x386>
    1b36:	a1 fe       	sbrs	r10, 1
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <vfprintf+0x37a>
    1b3a:	8b e2       	ldi	r24, 0x2B	; 43
    1b3c:	01 c0       	rjmp	.+2      	; 0x1b40 <vfprintf+0x37c>
    1b3e:	80 e2       	ldi	r24, 0x20	; 32
    1b40:	a7 fc       	sbrc	r10, 7
    1b42:	8d e2       	ldi	r24, 0x2D	; 45
    1b44:	b6 01       	movw	r22, r12
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	50 d0       	rcall	.+160    	; 0x1bea <fputc>
    1b4a:	89 14       	cp	r8, r9
    1b4c:	30 f4       	brcc	.+12     	; 0x1b5a <vfprintf+0x396>
    1b4e:	b6 01       	movw	r22, r12
    1b50:	80 e3       	ldi	r24, 0x30	; 48
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	4a d0       	rcall	.+148    	; 0x1bea <fputc>
    1b56:	9a 94       	dec	r9
    1b58:	f8 cf       	rjmp	.-16     	; 0x1b4a <vfprintf+0x386>
    1b5a:	8a 94       	dec	r8
    1b5c:	f3 01       	movw	r30, r6
    1b5e:	e8 0d       	add	r30, r8
    1b60:	f1 1d       	adc	r31, r1
    1b62:	80 81       	ld	r24, Z
    1b64:	b6 01       	movw	r22, r12
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	40 d0       	rcall	.+128    	; 0x1bea <fputc>
    1b6a:	81 10       	cpse	r8, r1
    1b6c:	f6 cf       	rjmp	.-20     	; 0x1b5a <vfprintf+0x396>
    1b6e:	22 20       	and	r2, r2
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <vfprintf+0x3b0>
    1b72:	4e ce       	rjmp	.-868    	; 0x1810 <vfprintf+0x4c>
    1b74:	b6 01       	movw	r22, r12
    1b76:	80 e2       	ldi	r24, 0x20	; 32
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	37 d0       	rcall	.+110    	; 0x1bea <fputc>
    1b7c:	2a 94       	dec	r2
    1b7e:	f7 cf       	rjmp	.-18     	; 0x1b6e <vfprintf+0x3aa>
    1b80:	f6 01       	movw	r30, r12
    1b82:	86 81       	ldd	r24, Z+6	; 0x06
    1b84:	97 81       	ldd	r25, Z+7	; 0x07
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfprintf+0x3c8>
    1b88:	8f ef       	ldi	r24, 0xFF	; 255
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	2b 96       	adiw	r28, 0x0b	; 11
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	bf 90       	pop	r11
    1baa:	af 90       	pop	r10
    1bac:	9f 90       	pop	r9
    1bae:	8f 90       	pop	r8
    1bb0:	7f 90       	pop	r7
    1bb2:	6f 90       	pop	r6
    1bb4:	5f 90       	pop	r5
    1bb6:	4f 90       	pop	r4
    1bb8:	3f 90       	pop	r3
    1bba:	2f 90       	pop	r2
    1bbc:	08 95       	ret

00001bbe <strnlen_P>:
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	05 90       	lpm	r0, Z+
    1bc2:	61 50       	subi	r22, 0x01	; 1
    1bc4:	70 40       	sbci	r23, 0x00	; 0
    1bc6:	01 10       	cpse	r0, r1
    1bc8:	d8 f7       	brcc	.-10     	; 0x1bc0 <strnlen_P+0x2>
    1bca:	80 95       	com	r24
    1bcc:	90 95       	com	r25
    1bce:	8e 0f       	add	r24, r30
    1bd0:	9f 1f       	adc	r25, r31
    1bd2:	08 95       	ret

00001bd4 <strnlen>:
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	61 50       	subi	r22, 0x01	; 1
    1bd8:	70 40       	sbci	r23, 0x00	; 0
    1bda:	01 90       	ld	r0, Z+
    1bdc:	01 10       	cpse	r0, r1
    1bde:	d8 f7       	brcc	.-10     	; 0x1bd6 <strnlen+0x2>
    1be0:	80 95       	com	r24
    1be2:	90 95       	com	r25
    1be4:	8e 0f       	add	r24, r30
    1be6:	9f 1f       	adc	r25, r31
    1be8:	08 95       	ret

00001bea <fputc>:
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	fb 01       	movw	r30, r22
    1bf4:	23 81       	ldd	r18, Z+3	; 0x03
    1bf6:	21 fd       	sbrc	r18, 1
    1bf8:	03 c0       	rjmp	.+6      	; 0x1c00 <fputc+0x16>
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	2c c0       	rjmp	.+88     	; 0x1c58 <fputc+0x6e>
    1c00:	22 ff       	sbrs	r18, 2
    1c02:	16 c0       	rjmp	.+44     	; 0x1c30 <fputc+0x46>
    1c04:	46 81       	ldd	r20, Z+6	; 0x06
    1c06:	57 81       	ldd	r21, Z+7	; 0x07
    1c08:	24 81       	ldd	r18, Z+4	; 0x04
    1c0a:	35 81       	ldd	r19, Z+5	; 0x05
    1c0c:	42 17       	cp	r20, r18
    1c0e:	53 07       	cpc	r21, r19
    1c10:	44 f4       	brge	.+16     	; 0x1c22 <fputc+0x38>
    1c12:	a0 81       	ld	r26, Z
    1c14:	b1 81       	ldd	r27, Z+1	; 0x01
    1c16:	9d 01       	movw	r18, r26
    1c18:	2f 5f       	subi	r18, 0xFF	; 255
    1c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1c:	31 83       	std	Z+1, r19	; 0x01
    1c1e:	20 83       	st	Z, r18
    1c20:	8c 93       	st	X, r24
    1c22:	26 81       	ldd	r18, Z+6	; 0x06
    1c24:	37 81       	ldd	r19, Z+7	; 0x07
    1c26:	2f 5f       	subi	r18, 0xFF	; 255
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	37 83       	std	Z+7, r19	; 0x07
    1c2c:	26 83       	std	Z+6, r18	; 0x06
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <fputc+0x6e>
    1c30:	8b 01       	movw	r16, r22
    1c32:	ec 01       	movw	r28, r24
    1c34:	fb 01       	movw	r30, r22
    1c36:	00 84       	ldd	r0, Z+8	; 0x08
    1c38:	f1 85       	ldd	r31, Z+9	; 0x09
    1c3a:	e0 2d       	mov	r30, r0
    1c3c:	09 95       	icall
    1c3e:	89 2b       	or	r24, r25
    1c40:	e1 f6       	brne	.-72     	; 0x1bfa <fputc+0x10>
    1c42:	d8 01       	movw	r26, r16
    1c44:	16 96       	adiw	r26, 0x06	; 6
    1c46:	8d 91       	ld	r24, X+
    1c48:	9c 91       	ld	r25, X
    1c4a:	17 97       	sbiw	r26, 0x07	; 7
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	17 96       	adiw	r26, 0x07	; 7
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
    1c54:	16 97       	sbiw	r26, 0x06	; 6
    1c56:	ce 01       	movw	r24, r28
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <__ultoa_invert>:
    1c62:	fa 01       	movw	r30, r20
    1c64:	aa 27       	eor	r26, r26
    1c66:	28 30       	cpi	r18, 0x08	; 8
    1c68:	51 f1       	breq	.+84     	; 0x1cbe <__ultoa_invert+0x5c>
    1c6a:	20 31       	cpi	r18, 0x10	; 16
    1c6c:	81 f1       	breq	.+96     	; 0x1cce <__ultoa_invert+0x6c>
    1c6e:	e8 94       	clt
    1c70:	6f 93       	push	r22
    1c72:	6e 7f       	andi	r22, 0xFE	; 254
    1c74:	6e 5f       	subi	r22, 0xFE	; 254
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	8f 4f       	sbci	r24, 0xFF	; 255
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	af 4f       	sbci	r26, 0xFF	; 255
    1c7e:	b1 e0       	ldi	r27, 0x01	; 1
    1c80:	3e d0       	rcall	.+124    	; 0x1cfe <__ultoa_invert+0x9c>
    1c82:	b4 e0       	ldi	r27, 0x04	; 4
    1c84:	3c d0       	rcall	.+120    	; 0x1cfe <__ultoa_invert+0x9c>
    1c86:	67 0f       	add	r22, r23
    1c88:	78 1f       	adc	r23, r24
    1c8a:	89 1f       	adc	r24, r25
    1c8c:	9a 1f       	adc	r25, r26
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	68 0f       	add	r22, r24
    1c92:	79 1f       	adc	r23, r25
    1c94:	8a 1f       	adc	r24, r26
    1c96:	91 1d       	adc	r25, r1
    1c98:	a1 1d       	adc	r26, r1
    1c9a:	6a 0f       	add	r22, r26
    1c9c:	71 1d       	adc	r23, r1
    1c9e:	81 1d       	adc	r24, r1
    1ca0:	91 1d       	adc	r25, r1
    1ca2:	a1 1d       	adc	r26, r1
    1ca4:	20 d0       	rcall	.+64     	; 0x1ce6 <__ultoa_invert+0x84>
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <__ultoa_invert+0x48>
    1ca8:	68 94       	set
    1caa:	3f 91       	pop	r19
    1cac:	2a e0       	ldi	r18, 0x0A	; 10
    1cae:	26 9f       	mul	r18, r22
    1cb0:	11 24       	eor	r1, r1
    1cb2:	30 19       	sub	r19, r0
    1cb4:	30 5d       	subi	r19, 0xD0	; 208
    1cb6:	31 93       	st	Z+, r19
    1cb8:	de f6       	brtc	.-74     	; 0x1c70 <__ultoa_invert+0xe>
    1cba:	cf 01       	movw	r24, r30
    1cbc:	08 95       	ret
    1cbe:	46 2f       	mov	r20, r22
    1cc0:	47 70       	andi	r20, 0x07	; 7
    1cc2:	40 5d       	subi	r20, 0xD0	; 208
    1cc4:	41 93       	st	Z+, r20
    1cc6:	b3 e0       	ldi	r27, 0x03	; 3
    1cc8:	0f d0       	rcall	.+30     	; 0x1ce8 <__ultoa_invert+0x86>
    1cca:	c9 f7       	brne	.-14     	; 0x1cbe <__ultoa_invert+0x5c>
    1ccc:	f6 cf       	rjmp	.-20     	; 0x1cba <__ultoa_invert+0x58>
    1cce:	46 2f       	mov	r20, r22
    1cd0:	4f 70       	andi	r20, 0x0F	; 15
    1cd2:	40 5d       	subi	r20, 0xD0	; 208
    1cd4:	4a 33       	cpi	r20, 0x3A	; 58
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <__ultoa_invert+0x7c>
    1cd8:	49 5d       	subi	r20, 0xD9	; 217
    1cda:	31 fd       	sbrc	r19, 1
    1cdc:	40 52       	subi	r20, 0x20	; 32
    1cde:	41 93       	st	Z+, r20
    1ce0:	02 d0       	rcall	.+4      	; 0x1ce6 <__ultoa_invert+0x84>
    1ce2:	a9 f7       	brne	.-22     	; 0x1cce <__ultoa_invert+0x6c>
    1ce4:	ea cf       	rjmp	.-44     	; 0x1cba <__ultoa_invert+0x58>
    1ce6:	b4 e0       	ldi	r27, 0x04	; 4
    1ce8:	a6 95       	lsr	r26
    1cea:	97 95       	ror	r25
    1cec:	87 95       	ror	r24
    1cee:	77 95       	ror	r23
    1cf0:	67 95       	ror	r22
    1cf2:	ba 95       	dec	r27
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x86>
    1cf6:	00 97       	sbiw	r24, 0x00	; 0
    1cf8:	61 05       	cpc	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	08 95       	ret
    1cfe:	9b 01       	movw	r18, r22
    1d00:	ac 01       	movw	r20, r24
    1d02:	0a 2e       	mov	r0, r26
    1d04:	06 94       	lsr	r0
    1d06:	57 95       	ror	r21
    1d08:	47 95       	ror	r20
    1d0a:	37 95       	ror	r19
    1d0c:	27 95       	ror	r18
    1d0e:	ba 95       	dec	r27
    1d10:	c9 f7       	brne	.-14     	; 0x1d04 <__ultoa_invert+0xa2>
    1d12:	62 0f       	add	r22, r18
    1d14:	73 1f       	adc	r23, r19
    1d16:	84 1f       	adc	r24, r20
    1d18:	95 1f       	adc	r25, r21
    1d1a:	a0 1d       	adc	r26, r0
    1d1c:	08 95       	ret

00001d1e <_exit>:
    1d1e:	f8 94       	cli

00001d20 <__stop_program>:
    1d20:	ff cf       	rjmp	.-2      	; 0x1d20 <__stop_program>
