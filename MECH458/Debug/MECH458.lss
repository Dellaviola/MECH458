
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ea  00800100  00001b62  00001bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  008002ea  008002ea  00001de0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004995  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a78  00000000  00000000  00006b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003286  00000000  00000000  000085a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  0000b828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000091b6  00000000  00000000  0000bff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001940  00000000  00000000  000151aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00016aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00016df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	2e c5       	rjmp	.+2652   	; 0xa92 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e2 e6       	ldi	r30, 0x62	; 98
      ac:	fb e1       	ldi	r31, 0x1B	; 27
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	aa 3e       	cpi	r26, 0xEA	; 234
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	aa ee       	ldi	r26, 0xEA	; 234
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 36       	cpi	r26, 0x6D	; 109
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	13 d3       	rcall	.+1574   	; 0x6f6 <main>
      d0:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <_exit>

000000d4 <__bad_interrupt>:
      d4:	2c c4       	rjmp	.+2136   	; 0x92e <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <g_ADCCount>
     120:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <g_ADCCount>
     12c:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 0a 03 	sts	0x030A, r19	; 0x80030a <g_ADCCount+0x1>
     13a:	20 93 09 03 	sts	0x0309, r18	; 0x800309 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	eb 50       	subi	r30, 0x0B	; 11
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <g_ADCCount>
     162:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2360>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     19a:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     1a6:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     1aa:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <STAGE1+0x1>
     1ae:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <STAGE1>
     1b2:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2360>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	16 c0       	rjmp	.+44     	; 0x1ea <SERVER_Task+0x60>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2361>
     1c2:	88 23       	and	r24, r24
     1c4:	81 f0       	breq	.+32     	; 0x1e6 <SERVER_Task+0x5c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     1cc:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     1d0:	71 d2       	rcall	.+1250   	; 0x6b4 <LL_UpdateStatus>
     1d2:	60 91 0c 03 	lds	r22, 0x030C	; 0x80030c <g_Timer>
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     1dc:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     1e0:	73 d2       	rcall	.+1254   	; 0x6c8 <LL_UpdateTick>
     1e2:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <g_WDTimeout>
     1e6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2361>
     1ea:	65 99       	sbic	0x0c, 5	; 12
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <SERVER_Task+0x7a>
     1ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2362>
     1f2:	88 23       	and	r24, r24
     1f4:	29 f0       	breq	.+10     	; 0x200 <SERVER_Task+0x76>
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_timer+0x23>
     1fc:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <g_WDTimeout>
     200:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2362>
     204:	67 9b       	sbis	0x0c, 7	; 12
     206:	0e c0       	rjmp	.+28     	; 0x224 <SERVER_Task+0x9a>
     208:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2360>
     20c:	81 11       	cpse	r24, r1
     20e:	07 c0       	rjmp	.+14     	; 0x21e <SERVER_Task+0x94>
     210:	e2 e1       	ldi	r30, 0x12	; 18
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	82 8f       	std	Z+26, r24	; 0x1a
     218:	84 a7       	std	Z+44, r24	; 0x2c
     21a:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_timer+0x47>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2360>
     224:	66 9b       	sbis	0x0c, 6	; 12
     226:	20 c0       	rjmp	.+64     	; 0x268 <SERVER_Task+0xde>
     228:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2361>
     22c:	81 11       	cpse	r24, r1
     22e:	19 c0       	rjmp	.+50     	; 0x262 <SERVER_Task+0xd8>
     230:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     234:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	49 f4       	brne	.+18     	; 0x24e <SERVER_Task+0xc4>
     23c:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     240:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     244:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <STAGE2+0x1>
     248:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <STAGE2>
     24c:	05 c0       	rjmp	.+10     	; 0x258 <SERVER_Task+0xce>
     24e:	ec d1       	rcall	.+984    	; 0x628 <LL_Next>
     250:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <STAGE2+0x1>
     254:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <STAGE2>
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 64       	ori	r24, 0x40	; 64
     260:	80 83       	st	Z, r24
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2361>
     268:	65 9b       	sbis	0x0c, 5	; 12
     26a:	0f c0       	rjmp	.+30     	; 0x28a <SERVER_Task+0x100>
     26c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2362>
     270:	81 11       	cpse	r24, r1
     272:	08 c0       	rjmp	.+16     	; 0x284 <SERVER_Task+0xfa>
     274:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     278:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     27c:	fb d1       	rcall	.+1014   	; 0x674 <LL_GetClass>
     27e:	85 30       	cpi	r24, 0x05	; 5
     280:	09 f4       	brne	.+2      	; 0x284 <SERVER_Task+0xfa>
     282:	fc d6       	rcall	.+3576   	; 0x107c <SYS_Rampdown>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2362>
     28a:	08 95       	ret

0000028c <ADC_Task>:
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	cf 93       	push	r28
     296:	e5 ef       	ldi	r30, 0xF5	; 245
     298:	f2 e0       	ldi	r31, 0x02	; 2
     29a:	a0 81       	ld	r26, Z
     29c:	b1 81       	ldd	r27, Z+1	; 0x01
     29e:	60 81       	ld	r22, Z
     2a0:	71 81       	ldd	r23, Z+1	; 0x01
     2a2:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <ticks.2370>
     2a6:	8f 5f       	subi	r24, 0xFF	; 255
     2a8:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <ticks.2370>
     2ac:	c1 2c       	mov	r12, r1
     2ae:	d1 2c       	mov	r13, r1
     2b0:	76 01       	movw	r14, r12
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	4f b7       	in	r20, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	fc 01       	movw	r30, r24
     2bc:	ee 0f       	add	r30, r30
     2be:	ff 1f       	adc	r31, r31
     2c0:	eb 50       	subi	r30, 0x0B	; 11
     2c2:	fd 4f       	sbci	r31, 0xFD	; 253
     2c4:	20 81       	ld	r18, Z
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	c2 0e       	add	r12, r18
     2ca:	d3 1e       	adc	r13, r19
     2cc:	e1 1c       	adc	r14, r1
     2ce:	f1 1c       	adc	r15, r1
     2d0:	20 81       	ld	r18, Z
     2d2:	31 81       	ldd	r19, Z+1	; 0x01
     2d4:	26 17       	cp	r18, r22
     2d6:	37 07       	cpc	r19, r23
     2d8:	38 f4       	brcc	.+14     	; 0x2e8 <ADC_Task+0x5c>
     2da:	fc 01       	movw	r30, r24
     2dc:	ee 0f       	add	r30, r30
     2de:	ff 1f       	adc	r31, r31
     2e0:	eb 50       	subi	r30, 0x0B	; 11
     2e2:	fd 4f       	sbci	r31, 0xFD	; 253
     2e4:	60 81       	ld	r22, Z
     2e6:	71 81       	ldd	r23, Z+1	; 0x01
     2e8:	fc 01       	movw	r30, r24
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	eb 50       	subi	r30, 0x0B	; 11
     2f0:	fd 4f       	sbci	r31, 0xFD	; 253
     2f2:	20 81       	ld	r18, Z
     2f4:	31 81       	ldd	r19, Z+1	; 0x01
     2f6:	a2 17       	cp	r26, r18
     2f8:	b3 07       	cpc	r27, r19
     2fa:	08 f0       	brcs	.+2      	; 0x2fe <ADC_Task+0x72>
     2fc:	4d c0       	rjmp	.+154    	; 0x398 <ADC_Task+0x10c>
     2fe:	fc 01       	movw	r30, r24
     300:	ee 0f       	add	r30, r30
     302:	ff 1f       	adc	r31, r31
     304:	eb 50       	subi	r30, 0x0B	; 11
     306:	fd 4f       	sbci	r31, 0xFD	; 253
     308:	a0 81       	ld	r26, Z
     30a:	b1 81       	ldd	r27, Z+1	; 0x01
     30c:	45 c0       	rjmp	.+138    	; 0x398 <ADC_Task+0x10c>
     30e:	8f b7       	in	r24, 0x3f	; 63
     310:	f8 94       	cli
     312:	ca 1a       	sub	r12, r26
     314:	db 0a       	sbc	r13, r27
     316:	e1 08       	sbc	r14, r1
     318:	f1 08       	sbc	r15, r1
     31a:	c6 1a       	sub	r12, r22
     31c:	d7 0a       	sbc	r13, r23
     31e:	e1 08       	sbc	r14, r1
     320:	f1 08       	sbc	r15, r1
     322:	f6 94       	lsr	r15
     324:	e7 94       	ror	r14
     326:	d7 94       	ror	r13
     328:	c7 94       	ror	r12
     32a:	f6 94       	lsr	r15
     32c:	e7 94       	ror	r14
     32e:	d7 94       	ror	r13
     330:	c7 94       	ror	r12
     332:	8f bf       	out	0x3f, r24	; 63
     334:	cf b7       	in	r28, 0x3f	; 63
     336:	f8 94       	cli
     338:	d7 01       	movw	r26, r14
     33a:	c6 01       	movw	r24, r12
     33c:	0b 97       	sbiw	r24, 0x0b	; 11
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	8d 3d       	cpi	r24, 0xDD	; 221
     344:	93 40       	sbci	r25, 0x03	; 3
     346:	a1 05       	cpc	r26, r1
     348:	b1 05       	cpc	r27, r1
     34a:	a0 f4       	brcc	.+40     	; 0x374 <ADC_Task+0xe8>
     34c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     350:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     354:	94 d1       	rcall	.+808    	; 0x67e <LL_GetRefl>
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	c8 16       	cp	r12, r24
     35c:	d9 06       	cpc	r13, r25
     35e:	ea 06       	cpc	r14, r26
     360:	fb 06       	cpc	r15, r27
     362:	40 f4       	brcc	.+16     	; 0x374 <ADC_Task+0xe8>
     364:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     368:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     36c:	00 97       	sbiw	r24, 0x00	; 0
     36e:	11 f0       	breq	.+4      	; 0x374 <ADC_Task+0xe8>
     370:	b6 01       	movw	r22, r12
     372:	90 d1       	rcall	.+800    	; 0x694 <LL_UpdateRefl>
     374:	cf bf       	out	0x3f, r28	; 63
     376:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <g_ADCCount+0x1>
     37a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <g_ADCCount>
     37e:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_timer+0x11>
     382:	66 9b       	sbis	0x0c, 6	; 12
     384:	06 c0       	rjmp	.+12     	; 0x392 <ADC_Task+0x106>
     386:	ea e7       	ldi	r30, 0x7A	; 122
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	80 64       	ori	r24, 0x40	; 64
     38e:	80 83       	st	Z, r24
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <ADC_Task+0x11a>
     392:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <ticks.2370>
     396:	07 c0       	rjmp	.+14     	; 0x3a6 <ADC_Task+0x11a>
     398:	4f bf       	out	0x3f, r20	; 63
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	86 30       	cpi	r24, 0x06	; 6
     39e:	91 05       	cpc	r25, r1
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <ADC_Task+0x118>
     3a2:	89 cf       	rjmp	.-238    	; 0x2b6 <ADC_Task+0x2a>
     3a4:	b4 cf       	rjmp	.-152    	; 0x30e <ADC_Task+0x82>
     3a6:	cf 91       	pop	r28
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	08 95       	ret

000003b2 <MAG_Task>:
     3b2:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <g_MotorOn>
     3b6:	88 23       	and	r24, r24
     3b8:	29 f0       	breq	.+10     	; 0x3c4 <MAG_Task+0x12>
     3ba:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <tick.2392>
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <tick.2392>
     3c4:	64 99       	sbic	0x0c, 4	; 12
     3c6:	1a c0       	rjmp	.+52     	; 0x3fc <MAG_Task+0x4a>
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     3ce:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     3d2:	70 d1       	rcall	.+736    	; 0x6b4 <LL_UpdateStatus>
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     3da:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     3de:	60 d1       	rcall	.+704    	; 0x6a0 <LL_UpdateMag>
     3e0:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     3e4:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     3e8:	1f d1       	rcall	.+574    	; 0x628 <LL_Next>
     3ea:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <STAGE1+0x1>
     3ee:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <STAGE1>
     3f2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <tick.2392>
     3f6:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_timer+0x1a>
     3fa:	08 95       	ret
     3fc:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <tick.2392>
     400:	8d 33       	cpi	r24, 0x3D	; 61
     402:	c8 f0       	brcs	.+50     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     40a:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     40e:	52 d1       	rcall	.+676    	; 0x6b4 <LL_UpdateStatus>
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     416:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     41a:	42 d1       	rcall	.+644    	; 0x6a0 <LL_UpdateMag>
     41c:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     420:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     424:	01 d1       	rcall	.+514    	; 0x628 <LL_Next>
     426:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <STAGE1+0x1>
     42a:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <STAGE1>
     42e:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <tick.2392>
     432:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_timer+0x1a>
     436:	08 95       	ret

00000438 <EXIT_Task>:
     438:	cf 93       	push	r28
     43a:	c0 91 0e 03 	lds	r28, 0x030E	; 0x80030e <g_MotorTicks>
     43e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     442:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     446:	46 d1       	rcall	.+652    	; 0x6d4 <LL_GetTick>
     448:	2c 2f       	mov	r18, r28
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	28 1b       	sub	r18, r24
     44e:	39 0b       	sbc	r19, r25
     450:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STAGE2_DELAY_COUNT>
     454:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <STAGE2_DELAY_COUNT+0x1>
     458:	28 17       	cp	r18, r24
     45a:	39 07       	cpc	r19, r25
     45c:	18 f4       	brcc	.+6      	; 0x464 <EXIT_Task+0x2c>
     45e:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_timer+0x23>
     462:	7f c0       	rjmp	.+254    	; 0x562 <EXIT_Task+0x12a>
     464:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     468:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     46c:	03 d1       	rcall	.+518    	; 0x674 <LL_GetClass>
     46e:	84 30       	cpi	r24, 0x04	; 4
     470:	31 f4       	brne	.+12     	; 0x47e <EXIT_Task+0x46>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <g_PauseRequest>
     478:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_timer+0x23>
     47c:	72 c0       	rjmp	.+228    	; 0x562 <EXIT_Task+0x12a>
     47e:	c0 91 0e 03 	lds	r28, 0x030E	; 0x80030e <g_MotorTicks>
     482:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <HEAD>
     486:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <HEAD+0x1>
     48a:	84 81       	ldd	r24, Z+4	; 0x04
     48c:	95 81       	ldd	r25, Z+5	; 0x05
     48e:	22 d1       	rcall	.+580    	; 0x6d4 <LL_GetTick>
     490:	2c 2f       	mov	r18, r28
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	28 1b       	sub	r18, r24
     496:	39 0b       	sbc	r19, r25
     498:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <DROP_DELAY_COUNT>
     49c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <DROP_DELAY_COUNT+0x1>
     4a0:	28 17       	cp	r18, r24
     4a2:	39 07       	cpc	r19, r25
     4a4:	08 f4       	brcc	.+2      	; 0x4a8 <EXIT_Task+0x70>
     4a6:	5d c0       	rjmp	.+186    	; 0x562 <EXIT_Task+0x12a>
     4a8:	ed e5       	ldi	r30, 0x5D	; 93
     4aa:	f3 e0       	ldi	r31, 0x03	; 3
     4ac:	85 81       	ldd	r24, Z+5	; 0x05
     4ae:	96 81       	ldd	r25, Z+6	; 0x06
     4b0:	97 81       	ldd	r25, Z+7	; 0x07
     4b2:	89 1b       	sub	r24, r25
     4b4:	8d 30       	cpi	r24, 0x0D	; 13
     4b6:	18 f4       	brcc	.+6      	; 0x4be <EXIT_Task+0x86>
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	4a d2       	rcall	.+1172   	; 0x952 <PWM>
     4be:	c0 91 61 03 	lds	r28, 0x0361	; 0x800361 <stepper+0x4>
     4c2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     4c6:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     4ca:	d4 d0       	rcall	.+424    	; 0x674 <LL_GetClass>
     4cc:	e8 2f       	mov	r30, r24
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ea 5f       	subi	r30, 0xFA	; 250
     4d2:	fe 4f       	sbci	r31, 0xFE	; 254
     4d4:	80 81       	ld	r24, Z
     4d6:	c8 13       	cpse	r28, r24
     4d8:	3c c0       	rjmp	.+120    	; 0x552 <EXIT_Task+0x11a>
     4da:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     4de:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     4e2:	c8 d0       	rcall	.+400    	; 0x674 <LL_GetClass>
     4e4:	c8 2f       	mov	r28, r24
     4e6:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <HEAD>
     4ea:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <HEAD+0x1>
     4ee:	82 81       	ldd	r24, Z+2	; 0x02
     4f0:	93 81       	ldd	r25, Z+3	; 0x03
     4f2:	c0 d0       	rcall	.+384    	; 0x674 <LL_GetClass>
     4f4:	c8 13       	cpse	r28, r24
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <EXIT_Task+0xc6>
     4f8:	88 ec       	ldi	r24, 0xC8	; 200
     4fa:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <BELT_SPEED>
     4fe:	63 e0       	ldi	r22, 0x03	; 3
     500:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     504:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     508:	d5 d0       	rcall	.+426    	; 0x6b4 <LL_UpdateStatus>
     50a:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     50e:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     512:	8a d0       	rcall	.+276    	; 0x628 <LL_Next>
     514:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <HEAD+0x1>
     518:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <HEAD>
     51c:	fc 01       	movw	r30, r24
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	a8 d0       	rcall	.+336    	; 0x674 <LL_GetClass>
     524:	e8 2f       	mov	r30, r24
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	ea 5f       	subi	r30, 0xFA	; 250
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	c0 81       	ld	r28, Z
     52e:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     532:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     536:	9e d0       	rcall	.+316    	; 0x674 <LL_GetClass>
     538:	e8 2f       	mov	r30, r24
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ea 5f       	subi	r30, 0xFA	; 250
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	80 81       	ld	r24, Z
     542:	6c 2f       	mov	r22, r28
     544:	91 d2       	rcall	.+1314   	; 0xa68 <STEPPER_SetRotation>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	03 d2       	rcall	.+1030   	; 0x952 <PWM>
     54c:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_timer+0x23>
     550:	03 c0       	rjmp	.+6      	; 0x558 <EXIT_Task+0x120>
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	fd d1       	rcall	.+1018   	; 0x952 <PWM>
     558:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     55c:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     560:	89 d0       	rcall	.+274    	; 0x674 <LL_GetClass>
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <BTN_Task>:
     566:	89 b1       	in	r24, 0x09	; 9
     568:	83 70       	andi	r24, 0x03	; 3
     56a:	b9 f0       	breq	.+46     	; 0x59a <BTN_Task+0x34>
     56c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <__data_end>
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <__data_end>
     576:	83 30       	cpi	r24, 0x03	; 3
     578:	90 f0       	brcs	.+36     	; 0x59e <BTN_Task+0x38>
     57a:	89 b1       	in	r24, 0x09	; 9
     57c:	83 70       	andi	r24, 0x03	; 3
     57e:	79 f0       	breq	.+30     	; 0x59e <BTN_Task+0x38>
     580:	89 b1       	in	r24, 0x09	; 9
     582:	83 70       	andi	r24, 0x03	; 3
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	19 f4       	brne	.+6      	; 0x58e <BTN_Task+0x28>
     588:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <g_PauseRequest>
     58c:	08 95       	ret
     58e:	89 b1       	in	r24, 0x09	; 9
     590:	83 70       	andi	r24, 0x03	; 3
     592:	82 30       	cpi	r24, 0x02	; 2
     594:	21 f4       	brne	.+8      	; 0x59e <BTN_Task+0x38>
     596:	72 c5       	rjmp	.+2788   	; 0x107c <SYS_Rampdown>
     598:	08 95       	ret
     59a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__data_end>
     59e:	08 95       	ret

000005a0 <WATCHDOG_Task>:
     5a0:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <g_WDTimeout>
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <WATCHDOG_Task+0xa>
     5a8:	69 d5       	rcall	.+2770   	; 0x107c <SYS_Rampdown>
     5aa:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <g_WDTimeout>
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <g_WDTimeout>
     5b4:	08 95       	ret

000005b6 <D_Blinky>:
     5b6:	9b b1       	in	r25, 0x0b	; 11
     5b8:	80 ea       	ldi	r24, 0xA0	; 160
     5ba:	89 27       	eor	r24, r25
     5bc:	8b b9       	out	0x0b, r24	; 11
     5be:	08 95       	ret

000005c0 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     5c0:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <g_MotorOn>
     5c4:	88 23       	and	r24, r24
     5c6:	29 f0       	breq	.+10     	; 0x5d2 <ADD_Task+0x12>
     5c8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <g_Timer>
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
     5ce:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <g_Timer>
     5d2:	08 95       	ret

000005d4 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	7c 01       	movw	r14, r24
     5e0:	16 2f       	mov	r17, r22
     5e2:	d4 2f       	mov	r29, r20
     5e4:	c2 2f       	mov	r28, r18
     5e6:	87 e0       	ldi	r24, 0x07	; 7
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	bd d6       	rcall	.+3450   	; 0x1366 <malloc>
     5ec:	fc 01       	movw	r30, r24
     5ee:	f1 82       	std	Z+1, r15	; 0x01
     5f0:	e0 82       	st	Z, r14
     5f2:	12 83       	std	Z+2, r17	; 0x02
     5f4:	d3 83       	std	Z+3, r29	; 0x03
     5f6:	c4 83       	std	Z+4, r28	; 0x04
     5f8:	16 82       	std	Z+6, r1	; 0x06
     5fa:	15 82       	std	Z+5, r1	; 0x05
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	08 95       	ret

00000608 <LL_ItemListInit>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a9 d6       	rcall	.+3410   	; 0x1366 <malloc>
     614:	fc 01       	movw	r30, r24
     616:	d1 83       	std	Z+1, r29	; 0x01
     618:	c0 83       	st	Z, r28
     61a:	15 82       	std	Z+5, r1	; 0x05
     61c:	14 82       	std	Z+4, r1	; 0x04
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	12 82       	std	Z+2, r1	; 0x02
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <LL_Next>:
     628:	fc 01       	movw	r30, r24
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	08 95       	ret

00000630 <LL_AddBack>:
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
     636:	cb 01       	movw	r24, r22
     638:	01 c0       	rjmp	.+2      	; 0x63c <LL_AddBack+0xc>
     63a:	e9 01       	movw	r28, r18
     63c:	2a 81       	ldd	r18, Y+2	; 0x02
     63e:	3b 81       	ldd	r19, Y+3	; 0x03
     640:	21 15       	cp	r18, r1
     642:	31 05       	cpc	r19, r1
     644:	d1 f7       	brne	.-12     	; 0x63a <LL_AddBack+0xa>
     646:	e0 df       	rcall	.-64     	; 0x608 <LL_ItemListInit>
     648:	9b 83       	std	Y+3, r25	; 0x03
     64a:	8a 83       	std	Y+2, r24	; 0x02
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <LL_Size>:
     652:	dc 01       	movw	r26, r24
     654:	12 96       	adiw	r26, 0x02	; 2
     656:	ed 91       	ld	r30, X+
     658:	fc 91       	ld	r31, X
     65a:	13 97       	sbiw	r26, 0x03	; 3
     65c:	30 97       	sbiw	r30, 0x00	; 0
     65e:	41 f0       	breq	.+16     	; 0x670 <LL_Size+0x1e>
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	02 80       	ldd	r0, Z+2	; 0x02
     666:	f3 81       	ldd	r31, Z+3	; 0x03
     668:	e0 2d       	mov	r30, r0
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	d1 f7       	brne	.-12     	; 0x662 <LL_Size+0x10>
     66e:	08 95       	ret
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	08 95       	ret

00000674 <LL_GetClass>:
     674:	dc 01       	movw	r26, r24
     676:	ed 91       	ld	r30, X+
     678:	fc 91       	ld	r31, X
     67a:	83 81       	ldd	r24, Z+3	; 0x03
     67c:	08 95       	ret

0000067e <LL_GetRefl>:
     67e:	dc 01       	movw	r26, r24
     680:	ed 91       	ld	r30, X+
     682:	fc 91       	ld	r31, X
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	08 95       	ret

0000068a <LL_GetMag>:
     68a:	dc 01       	movw	r26, r24
     68c:	ed 91       	ld	r30, X+
     68e:	fc 91       	ld	r31, X
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	08 95       	ret

00000694 <LL_UpdateRefl>:
     694:	dc 01       	movw	r26, r24
     696:	ed 91       	ld	r30, X+
     698:	fc 91       	ld	r31, X
     69a:	71 83       	std	Z+1, r23	; 0x01
     69c:	60 83       	st	Z, r22
     69e:	08 95       	ret

000006a0 <LL_UpdateMag>:
     6a0:	dc 01       	movw	r26, r24
     6a2:	ed 91       	ld	r30, X+
     6a4:	fc 91       	ld	r31, X
     6a6:	62 83       	std	Z+2, r22	; 0x02
     6a8:	08 95       	ret

000006aa <LL_UpdateClass>:
     6aa:	dc 01       	movw	r26, r24
     6ac:	ed 91       	ld	r30, X+
     6ae:	fc 91       	ld	r31, X
     6b0:	63 83       	std	Z+3, r22	; 0x03
     6b2:	08 95       	ret

000006b4 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     6b4:	dc 01       	movw	r26, r24
     6b6:	ed 91       	ld	r30, X+
     6b8:	fc 91       	ld	r31, X
     6ba:	64 83       	std	Z+4, r22	; 0x04
     6bc:	08 95       	ret

000006be <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     6be:	dc 01       	movw	r26, r24
     6c0:	ed 91       	ld	r30, X+
     6c2:	fc 91       	ld	r31, X
}
     6c4:	84 81       	ldd	r24, Z+4	; 0x04
     6c6:	08 95       	ret

000006c8 <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     6c8:	dc 01       	movw	r26, r24
     6ca:	ed 91       	ld	r30, X+
     6cc:	fc 91       	ld	r31, X
     6ce:	76 83       	std	Z+6, r23	; 0x06
     6d0:	65 83       	std	Z+5, r22	; 0x05
     6d2:	08 95       	ret

000006d4 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     6d4:	dc 01       	movw	r26, r24
     6d6:	ed 91       	ld	r30, X+
     6d8:	fc 91       	ld	r31, X
     6da:	85 81       	ldd	r24, Z+5	; 0x05
     6dc:	96 81       	ldd	r25, Z+6	; 0x06
     6de:	08 95       	ret

000006e0 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     6e4:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     6e6:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     6e8:	80 ef       	ldi	r24, 0xF0	; 240
     6ea:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     6ec:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     6ee:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	08 95       	ret

000006f6 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     6f6:	d7 d2       	rcall	.+1454   	; 0xca6 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     6f8:	89 b1       	in	r24, 0x09	; 9
     6fa:	83 70       	andi	r24, 0x03	; 3
     6fc:	e9 f7       	brne	.-6      	; 0x6f8 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     6fe:	8b e1       	ldi	r24, 0x1B	; 27
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	23 d6       	rcall	.+3142   	; 0x134a <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     704:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	45 ec       	ldi	r20, 0xC5	; 197
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	a0 d5       	rcall	.+2880   	; 0x1258 <TIMER_Create>
		_timer[0].state = READY;
     718:	c2 e1       	ldi	r28, 0x12	; 18
     71a:	d3 e0       	ldi	r29, 0x03	; 3
     71c:	12 e0       	ldi	r17, 0x02	; 2
     71e:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	46 e4       	ldi	r20, 0x46	; 70
     726:	51 e0       	ldi	r21, 0x01	; 1
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	93 d5       	rcall	.+2854   	; 0x1258 <TIMER_Create>
		_timer[1].state = BLOCKED;
     732:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	49 ed       	ldi	r20, 0xD9	; 217
     73a:	51 e0       	ldi	r21, 0x01	; 1
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	89 d5       	rcall	.+2834   	; 0x1258 <TIMER_Create>
		_timer[2].state = BLOCKED;
     746:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	4c e1       	ldi	r20, 0x1C	; 28
     74e:	52 e0       	ldi	r21, 0x02	; 2
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	7f d5       	rcall	.+2814   	; 0x1258 <TIMER_Create>
		_timer[3].state = BLOCKED;
     75a:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 ee       	ldi	r20, 0xE0	; 224
     762:	52 e0       	ldi	r21, 0x02	; 2
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	75 d5       	rcall	.+2794   	; 0x1258 <TIMER_Create>
		_timer[4].state = BLOCKED;
     76e:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	43 eb       	ldi	r20, 0xB3	; 179
     776:	52 e0       	ldi	r21, 0x02	; 2
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	84 e6       	ldi	r24, 0x64	; 100
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	6b d5       	rcall	.+2774   	; 0x1258 <TIMER_Create>
		_timer[5].state = READY;
     782:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	4b ed       	ldi	r20, 0xDB	; 219
     78a:	52 e0       	ldi	r21, 0x02	; 2
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 ed       	ldi	r24, 0xD0	; 208
     792:	97 e0       	ldi	r25, 0x07	; 7
     794:	61 d5       	rcall	.+2754   	; 0x1258 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     796:	1e af       	std	Y+62, r17	; 0x3e
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	40 ed       	ldi	r20, 0xD0	; 208
     79e:	52 e0       	ldi	r21, 0x02	; 2
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     7a6:	93 e1       	ldi	r25, 0x13	; 19
     7a8:	57 d5       	rcall	.+2734   	; 0x1258 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     7aa:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_timer+0x47>
     7ae:	8e e2       	ldi	r24, 0x2E	; 46
     7b0:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     7b2:	cb d5       	rcall	.+2966   	; 0x134a <UART_SendString>
     7b4:	80 e8       	ldi	r24, 0x80	; 128
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	cc d0       	rcall	.+408    	; 0x952 <PWM>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     7ba:	78 94       	sei
	};

	// For initial stepper positioning
	int memory = 0;
     7bc:	00 e0       	ldi	r16, 0x00	; 0
     7be:	10 e0       	ldi	r17, 0x00	; 0
				PWM(1);
			}
			else 
			{   
				if(LL_GetClass(HEAD->prev) != LL_GetClass(HEAD)) BELT_SPEED = 100;
				PWM(1);
     7c0:	cc 24       	eor	r12, r12
     7c2:	c3 94       	inc	r12
     7c4:	d1 2c       	mov	r13, r1
				BELT_SPEED = 200;
				PWM(1);
			}
			else 
			{   
				if(LL_GetClass(HEAD->prev) != LL_GetClass(HEAD)) BELT_SPEED = 100;
     7c6:	0f 2e       	mov	r0, r31
     7c8:	f4 e6       	ldi	r31, 0x64	; 100
     7ca:	af 2e       	mov	r10, r31
     7cc:	f0 2d       	mov	r31, r0
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
		if(g_MotorOn)
		{
			if((g_MotorTicks - LL_GetTick(HEAD)) < STAGE2_DELAY_COUNT)
			{
				BELT_SPEED = 200;
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f8 ec       	ldi	r31, 0xC8	; 200
     7d2:	bf 2e       	mov	r11, r31
// 					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     7d4:	f0 2d       	mov	r31, r0
     7d6:	8c 2c       	mov	r8, r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     7d8:	9d 2c       	mov	r9, r13
     7da:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <g_PauseRequest>
     7de:	88 23       	and	r24, r24
     7e0:	19 f0       	breq	.+6      	; 0x7e8 <main+0xf2>
     7e2:	85 e5       	ldi	r24, 0x55	; 85
     7e4:	91 e0       	ldi	r25, 0x01	; 1
		if(g_MotorOn)
     7e6:	d6 d2       	rcall	.+1452   	; 0xd94 <SYS_Pause>
     7e8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <g_MotorOn>
     7ec:	88 23       	and	r24, r24
		{
			if((g_MotorTicks - LL_GetTick(HEAD)) < STAGE2_DELAY_COUNT)
     7ee:	39 f1       	breq	.+78     	; 0x83e <main+0x148>
     7f0:	c0 91 0e 03 	lds	r28, 0x030E	; 0x80030e <g_MotorTicks>
     7f4:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     7f8:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     7fc:	6b df       	rcall	.-298    	; 0x6d4 <LL_GetTick>
     7fe:	2c 2f       	mov	r18, r28
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	28 1b       	sub	r18, r24
     804:	39 0b       	sbc	r19, r25
     806:	20 3d       	cpi	r18, 0xD0	; 208
			{
				BELT_SPEED = 200;
     808:	37 40       	sbci	r19, 0x07	; 7
     80a:	30 f4       	brcc	.+12     	; 0x818 <main+0x122>
				PWM(1);
     80c:	b0 92 11 03 	sts	0x0311, r11	; 0x800311 <BELT_SPEED>
     810:	8c 2d       	mov	r24, r12
     812:	9d 2d       	mov	r25, r13
			}
			else 
			{   
				if(LL_GetClass(HEAD->prev) != LL_GetClass(HEAD)) BELT_SPEED = 100;
     814:	9e d0       	rcall	.+316    	; 0x952 <PWM>
     816:	13 c0       	rjmp	.+38     	; 0x83e <main+0x148>
     818:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <HEAD>
     81c:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <HEAD+0x1>
     820:	84 81       	ldd	r24, Z+4	; 0x04
     822:	95 81       	ldd	r25, Z+5	; 0x05
     824:	27 df       	rcall	.-434    	; 0x674 <LL_GetClass>
     826:	c8 2f       	mov	r28, r24
     828:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     82c:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     830:	21 df       	rcall	.-446    	; 0x674 <LL_GetClass>
     832:	c8 13       	cpse	r28, r24
				PWM(1);
     834:	a0 92 11 03 	sts	0x0311, r10	; 0x800311 <BELT_SPEED>
     838:	8c 2d       	mov	r24, r12
			}
		}
		if((g_MotorTicks - LL_GetTick(HEAD) > ITEM_MISSING_COUNT))
     83a:	9d 2d       	mov	r25, r13
     83c:	8a d0       	rcall	.+276    	; 0x952 <PWM>
     83e:	c0 91 0e 03 	lds	r28, 0x030E	; 0x80030e <g_MotorTicks>
     842:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     846:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     84a:	44 df       	rcall	.-376    	; 0x6d4 <LL_GetTick>
     84c:	2c 2f       	mov	r18, r28
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	28 1b       	sub	r18, r24
     852:	39 0b       	sbc	r19, r25
     854:	21 31       	cpi	r18, 0x11	; 17
		{
			// Item Missing
			SYS_Pause("!!!Item Missing!!!\r\n");
     856:	37 42       	sbci	r19, 0x27	; 39
     858:	18 f0       	brcs	.+6      	; 0x860 <main+0x16a>
     85a:	80 e4       	ldi	r24, 0x40	; 64
		}

		list* temp = HEAD;
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	9a d2       	rcall	.+1332   	; 0xd94 <SYS_Pause>
     860:	c0 91 ef 02 	lds	r28, 0x02EF	; 0x8002ef <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     864:	d0 91 f0 02 	lds	r29, 0x02F0	; 0x8002f0 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     868:	20 97       	sbiw	r28, 0x00	; 0
     86a:	09 f4       	brne	.+2      	; 0x86e <main+0x178>
     86c:	b6 cf       	rjmp	.-148    	; 0x7da <main+0xe4>
     86e:	20 97       	sbiw	r28, 0x00	; 0
     870:	09 f4       	brne	.+2      	; 0x874 <main+0x17e>
     872:	56 c0       	rjmp	.+172    	; 0x920 <main+0x22a>
     874:	ce 01       	movw	r24, r28
     876:	fe de       	rcall	.-516    	; 0x674 <LL_GetClass>
     878:	84 30       	cpi	r24, 0x04	; 4
     87a:	09 f0       	breq	.+2      	; 0x87e <main+0x188>
     87c:	51 c0       	rjmp	.+162    	; 0x920 <main+0x22a>
     87e:	ce 01       	movw	r24, r28
     880:	1e df       	rcall	.-452    	; 0x6be <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	09 f0       	breq	.+2      	; 0x888 <main+0x192>
     886:	4c c0       	rjmp	.+152    	; 0x920 <main+0x22a>
     888:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     88a:	f9 de       	rcall	.-526    	; 0x67e <LL_GetRefl>
     88c:	7c 01       	movw	r14, r24
				
				if(magVal) // 
     88e:	ce 01       	movw	r24, r28
     890:	fc de       	rcall	.-520    	; 0x68a <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     892:	88 23       	and	r24, r24
     894:	b1 f0       	breq	.+44     	; 0x8c2 <main+0x1cc>
     896:	c7 01       	movw	r24, r14
     898:	44 97       	sbiw	r24, 0x14	; 20
     89a:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     89c:	91 05       	cpc	r25, r1
     89e:	20 f4       	brcc	.+8      	; 0x8a8 <main+0x1b2>
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     8a4:	02 df       	rcall	.-508    	; 0x6aa <LL_UpdateClass>
     8a6:	21 c0       	rjmp	.+66     	; 0x8ea <main+0x1f4>
     8a8:	8c e2       	ldi	r24, 0x2C	; 44
     8aa:	e8 1a       	sub	r14, r24
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	f8 0a       	sbc	r15, r24
     8b0:	8f e5       	ldi	r24, 0x5F	; 95
     8b2:	e8 16       	cp	r14, r24
					{
						LL_UpdateClass(temp, STEEL);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	f8 06       	cpc	r15, r24
     8b8:	c0 f4       	brcc	.+48     	; 0x8ea <main+0x1f4>
     8ba:	63 e0       	ldi	r22, 0x03	; 3
     8bc:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     8be:	f5 de       	rcall	.-534    	; 0x6aa <LL_UpdateClass>
     8c0:	14 c0       	rjmp	.+40     	; 0x8ea <main+0x1f4>
     8c2:	c7 01       	movw	r24, r14
     8c4:	89 58       	subi	r24, 0x89	; 137
				{
					LL_UpdateClass(temp, WHITE);
     8c6:	93 40       	sbci	r25, 0x03	; 3
     8c8:	0b 97       	sbiw	r24, 0x0b	; 11
     8ca:	20 f4       	brcc	.+8      	; 0x8d4 <main+0x1de>
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     8d0:	ec de       	rcall	.-552    	; 0x6aa <LL_UpdateClass>
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <main+0x1f4>
     8d4:	80 e2       	ldi	r24, 0x20	; 32
     8d6:	e8 1a       	sub	r14, r24
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	f8 0a       	sbc	r15, r24
     8dc:	87 e9       	ldi	r24, 0x97	; 151
				{
					LL_UpdateClass(temp, BLACK);
     8de:	e8 16       	cp	r14, r24
     8e0:	f1 04       	cpc	r15, r1
     8e2:	18 f4       	brcc	.+6      	; 0x8ea <main+0x1f4>
// 					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
				if(memory == 0)
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	ce 01       	movw	r24, r28
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     8e8:	e0 de       	rcall	.-576    	; 0x6aa <LL_UpdateClass>
     8ea:	01 15       	cp	r16, r1
     8ec:	11 05       	cpc	r17, r1
     8ee:	c1 f4       	brne	.+48     	; 0x920 <main+0x22a>
     8f0:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     8f4:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     8f8:	bd de       	rcall	.-646    	; 0x674 <LL_GetClass>
     8fa:	e8 2f       	mov	r30, r24
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	e1 5f       	subi	r30, 0xF1	; 241
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	10 81       	ld	r17, Z
     904:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
     908:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     90c:	b3 de       	rcall	.-666    	; 0x674 <LL_GetClass>
     90e:	e8 2f       	mov	r30, r24
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	e1 5f       	subi	r30, 0xF1	; 241
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	80 81       	ld	r24, Z
     918:	61 2f       	mov	r22, r17
					memory = 1;
     91a:	a6 d0       	rcall	.+332    	; 0xa68 <STEPPER_SetRotation>
     91c:	08 2d       	mov	r16, r8
				}
			}
			temp = LL_Next(temp);
     91e:	19 2d       	mov	r17, r9
     920:	ce 01       	movw	r24, r28
     922:	82 de       	rcall	.-764    	; 0x628 <LL_Next>
     924:	ec 01       	movw	r28, r24
		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     926:	89 2b       	or	r24, r25
     928:	09 f0       	breq	.+2      	; 0x92c <main+0x236>
     92a:	a1 cf       	rjmp	.-190    	; 0x86e <main+0x178>
     92c:	56 cf       	rjmp	.-340    	; 0x7da <main+0xe4>

0000092e <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     938:	8a ea       	ldi	r24, 0xAA	; 170
     93a:	88 b9       	out	0x08, r24	; 8
     93c:	fe cf       	rjmp	.-4      	; 0x93a <__vector_default+0xc>

0000093e <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     93e:	84 b5       	in	r24, 0x24	; 36
     940:	83 68       	ori	r24, 0x83	; 131
     942:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     944:	85 b5       	in	r24, 0x25	; 37
     946:	83 60       	ori	r24, 0x03	; 3
     948:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     94a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <BELT_SPEED>
     94e:	87 bd       	out	0x27, r24	; 39
     950:	08 95       	ret

00000952 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     952:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     954:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     956:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     958:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <BELT_SPEED>
     95c:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     95e:	23 2b       	or	r18, r19
     960:	31 f0       	breq	.+12     	; 0x96e <PWM+0x1c>
		{
			g_MotorOn = 1;
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <g_MotorOn>
			PORTB = ~0x0E;
     968:	81 ef       	ldi	r24, 0xF1	; 241
     96a:	85 b9       	out	0x05, r24	; 5
     96c:	04 c0       	rjmp	.+8      	; 0x976 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     96e:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <g_MotorOn>
			PORTB = ~0x0F;
     972:	80 ef       	ldi	r24, 0xF0	; 240
     974:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     976:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     978:	08 95       	ret

0000097a <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     97a:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     97c:	ed e5       	ldi	r30, 0x5D	; 93
     97e:	f3 e0       	ldi	r31, 0x03	; 3
     980:	10 82       	st	Z, r1
	stepper.direction = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     986:	13 82       	std	Z+3, r1	; 0x03
     988:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     98a:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     98c:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     98e:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     990:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     992:	13 86       	std	Z+11, r1	; 0x0b
	stepper._willContinue = 1;
     994:	81 87       	std	Z+9, r24	; 0x09

	// For calibration
	stepper._targetStep = 200;
     996:	88 ec       	ldi	r24, 0xC8	; 200
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	96 83       	std	Z+6, r25	; 0x06
     99c:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     99e:	80 e3       	ldi	r24, 0x30	; 48
     9a0:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     9a2:	84 e9       	ldi	r24, 0x94	; 148
     9a4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     9a8:	e0 eb       	ldi	r30, 0xB0	; 176
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	82 60       	ori	r24, 0x02	; 2
     9b0:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     9b2:	e0 e7       	ldi	r30, 0x70	; 112
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	82 60       	ori	r24, 0x02	; 2
     9ba:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     9bc:	e1 eb       	ldi	r30, 0xB1	; 177
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	87 60       	ori	r24, 0x07	; 7
     9c4:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     9c6:	78 94       	sei
     9c8:	08 95       	ret

000009ca <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	86 1b       	sub	r24, r22
     9ce:	91 09       	sbc	r25, r1
	if (steps >= 0)
     9d0:	52 f0       	brmi	.+20     	; 0x9e6 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     9d2:	85 36       	cpi	r24, 0x65	; 101
     9d4:	91 05       	cpc	r25, r1
     9d6:	8c f0       	brlt	.+34     	; 0x9fa <STEPPER_NumSteps+0x30>
     9d8:	24 e6       	ldi	r18, 0x64	; 100
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	a9 01       	movw	r20, r18
     9de:	48 1b       	sub	r20, r24
     9e0:	59 0b       	sbc	r21, r25
     9e2:	ca 01       	movw	r24, r20
     9e4:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     9e6:	8c 39       	cpi	r24, 0x9C	; 156
     9e8:	5f ef       	ldi	r21, 0xFF	; 255
     9ea:	95 07       	cpc	r25, r21
     9ec:	34 f4       	brge	.+12     	; 0x9fa <STEPPER_NumSteps+0x30>
     9ee:	2c e9       	ldi	r18, 0x9C	; 156
     9f0:	3f ef       	ldi	r19, 0xFF	; 255
     9f2:	a9 01       	movw	r20, r18
     9f4:	48 1b       	sub	r20, r24
     9f6:	59 0b       	sbc	r21, r25
     9f8:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     9fa:	08 95       	ret

000009fc <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     a00:	cd e5       	ldi	r28, 0x5D	; 93
     a02:	d3 e0       	ldi	r29, 0x03	; 3
     a04:	6c 81       	ldd	r22, Y+4	; 0x04
     a06:	8a 81       	ldd	r24, Y+2	; 0x02
     a08:	9b 81       	ldd	r25, Y+3	; 0x03
     a0a:	df df       	rcall	.-66     	; 0x9ca <STEPPER_NumSteps>
     a0c:	9e 83       	std	Y+6, r25	; 0x06
     a0e:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     a10:	6a 81       	ldd	r22, Y+2	; 0x02
     a12:	7b 81       	ldd	r23, Y+3	; 0x03
     a14:	88 85       	ldd	r24, Y+8	; 0x08
     a16:	d9 df       	rcall	.-78     	; 0x9ca <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     a18:	2d 81       	ldd	r18, Y+5	; 0x05
     a1a:	3e 81       	ldd	r19, Y+6	; 0x06
     a1c:	33 23       	and	r19, r19
     a1e:	14 f4       	brge	.+4      	; 0xa24 <STEPPER_Rotate+0x28>
     a20:	28 e0       	ldi	r18, 0x08	; 8
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <STEPPER_Rotate+0x2a>
     a24:	24 e0       	ldi	r18, 0x04	; 4
     a26:	ed e5       	ldi	r30, 0x5D	; 93
     a28:	f3 e0       	ldi	r31, 0x03	; 3
     a2a:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     a2c:	45 81       	ldd	r20, Z+5	; 0x05
     a2e:	56 81       	ldd	r21, Z+6	; 0x06
     a30:	84 9f       	mul	r24, r20
     a32:	90 01       	movw	r18, r0
     a34:	85 9f       	mul	r24, r21
     a36:	30 0d       	add	r19, r0
     a38:	94 9f       	mul	r25, r20
     a3a:	30 0d       	add	r19, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	83 2f       	mov	r24, r19
     a40:	80 95       	com	r24
     a42:	88 1f       	adc	r24, r24
     a44:	88 27       	eor	r24, r24
     a46:	88 1f       	adc	r24, r24
     a48:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     a4a:	85 81       	ldd	r24, Z+5	; 0x05
     a4c:	96 81       	ldd	r25, Z+6	; 0x06
     a4e:	99 23       	and	r25, r25
     a50:	1c f4       	brge	.+6      	; 0xa58 <STEPPER_Rotate+0x5c>
     a52:	91 95       	neg	r25
     a54:	81 95       	neg	r24
     a56:	91 09       	sbc	r25, r1
     a58:	ed e5       	ldi	r30, 0x5D	; 93
     a5a:	f3 e0       	ldi	r31, 0x03	; 3
     a5c:	96 83       	std	Z+6, r25	; 0x06
     a5e:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     a60:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
	cli();
     a6c:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	cd e5       	ldi	r28, 0x5D	; 93
     a72:	d3 e0       	ldi	r29, 0x03	; 3
     a74:	9b 83       	std	Y+3, r25	; 0x03
     a76:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     a78:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     a7a:	c0 df       	rcall	.-128    	; 0x9fc <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     a7c:	eb 85       	ldd	r30, Y+11	; 0x0b
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	eb 5e       	subi	r30, 0xEB	; 235
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 81       	ld	r24, Z
     a86:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     a8a:	78 94       	sei
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     a92:	1f 92       	push	r1
     a94:	0f 92       	push	r0
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	0f 92       	push	r0
     a9a:	11 24       	eor	r1, r1
     a9c:	0b b6       	in	r0, 0x3b	; 59
     a9e:	0f 92       	push	r0
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	00 d0       	rcall	.+0      	; 0xabe <__vector_13+0x2c>
     abe:	00 d0       	rcall	.+0      	; 0xac0 <__vector_13+0x2e>
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     ac4:	86 e3       	ldi	r24, 0x36	; 54
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	9e e2       	ldi	r25, 0x2E	; 46
     ace:	ad e2       	ldi	r26, 0x2D	; 45
     ad0:	b5 e3       	ldi	r27, 0x35	; 53
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	9a 83       	std	Y+2, r25	; 0x02
     ad6:	ab 83       	std	Y+3, r26	; 0x03
     ad8:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     ada:	ed e5       	ldi	r30, 0x5D	; 93
     adc:	f3 e0       	ldi	r31, 0x03	; 3
     ade:	87 81       	ldd	r24, Z+7	; 0x07
     ae0:	25 81       	ldd	r18, Z+5	; 0x05
     ae2:	36 81       	ldd	r19, Z+6	; 0x06
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	82 17       	cp	r24, r18
     ae8:	93 07       	cpc	r25, r19
     aea:	0c f0       	brlt	.+2      	; 0xaee <__vector_13+0x5c>
     aec:	5a c0       	rjmp	.+180    	; 0xba2 <__vector_13+0x110>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     aee:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <stepper+0x1>
     af2:	84 30       	cpi	r24, 0x04	; 4
     af4:	51 f4       	brne	.+20     	; 0xb0a <__vector_13+0x78>
     af6:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <stepper>
     afa:	e1 e0       	ldi	r30, 0x01	; 1
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	ec 0f       	add	r30, r28
     b00:	fd 1f       	adc	r31, r29
     b02:	e8 0f       	add	r30, r24
     b04:	f1 1d       	adc	r31, r1
     b06:	80 81       	ld	r24, Z
     b08:	0d c0       	rjmp	.+26     	; 0xb24 <__vector_13+0x92>
     b0a:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <stepper>
     b0e:	e3 e0       	ldi	r30, 0x03	; 3
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	e8 1b       	sub	r30, r24
     b14:	f1 09       	sbc	r31, r1
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	6c 0f       	add	r22, r28
     b1c:	7d 1f       	adc	r23, r29
     b1e:	e6 0f       	add	r30, r22
     b20:	f7 1f       	adc	r31, r23
     b22:	80 81       	ld	r24, Z
     b24:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     b26:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <stepper>
     b2a:	83 30       	cpi	r24, 0x03	; 3
     b2c:	21 f0       	breq	.+8      	; 0xb36 <__vector_13+0xa4>
     b2e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <stepper>
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__vector_13+0xa6>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	ed e5       	ldi	r30, 0x5D	; 93
     b3a:	f3 e0       	ldi	r31, 0x03	; 3
     b3c:	80 83       	st	Z, r24

		stepper._currentStep++;
     b3e:	87 81       	ldd	r24, Z+7	; 0x07
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     b44:	85 81       	ldd	r24, Z+5	; 0x05
     b46:	96 81       	ldd	r25, Z+6	; 0x06
     b48:	27 81       	ldd	r18, Z+7	; 0x07
     b4a:	82 1b       	sub	r24, r18
     b4c:	91 09       	sbc	r25, r1
     b4e:	06 97       	sbiw	r24, 0x06	; 6
     b50:	74 f4       	brge	.+28     	; 0xb6e <__vector_13+0xdc>
     b52:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <stepper+0xb>
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	eb 5e       	subi	r30, 0xEB	; 235
     b5a:	fe 4f       	sbci	r31, 0xFE	; 254
     b5c:	80 81       	ld	r24, Z
     b5e:	84 39       	cpi	r24, 0x94	; 148
     b60:	30 f4       	brcc	.+12     	; 0xb6e <__vector_13+0xdc>
		{
			stepper._accellStep--;
     b62:	ed e5       	ldi	r30, 0x5D	; 93
     b64:	f3 e0       	ldi	r31, 0x03	; 3
     b66:	83 85       	ldd	r24, Z+11	; 0x0b
     b68:	81 50       	subi	r24, 0x01	; 1
     b6a:	83 87       	std	Z+11, r24	; 0x0b
     b6c:	11 c0       	rjmp	.+34     	; 0xb90 <__vector_13+0xfe>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     b6e:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <stepper+0x7>
     b72:	86 30       	cpi	r24, 0x06	; 6
     b74:	68 f0       	brcs	.+26     	; 0xb90 <__vector_13+0xfe>
     b76:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <stepper+0xb>
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	eb 5e       	subi	r30, 0xEB	; 235
     b7e:	fe 4f       	sbci	r31, 0xFE	; 254
     b80:	80 81       	ld	r24, Z
     b82:	81 34       	cpi	r24, 0x41	; 65
     b84:	28 f0       	brcs	.+10     	; 0xb90 <__vector_13+0xfe>
		{
			stepper._accellStep++;
     b86:	ed e5       	ldi	r30, 0x5D	; 93
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	83 85       	ldd	r24, Z+11	; 0x0b
     b8c:	8f 5f       	subi	r24, 0xFF	; 255
     b8e:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     b90:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <stepper+0xb>
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	eb 5e       	subi	r30, 0xEB	; 235
     b98:	fe 4f       	sbci	r31, 0xFE	; 254
     b9a:	80 81       	ld	r24, Z
     b9c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ba0:	29 c0       	rjmp	.+82     	; 0xbf4 <__vector_13+0x162>
	}
	else if (stepper._currentStep == stepper._targetStep)
     ba2:	ed e5       	ldi	r30, 0x5D	; 93
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
     ba6:	87 81       	ldd	r24, Z+7	; 0x07
     ba8:	25 81       	ldd	r18, Z+5	; 0x05
     baa:	36 81       	ldd	r19, Z+6	; 0x06
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	82 17       	cp	r24, r18
     bb0:	93 07       	cpc	r25, r19
     bb2:	01 f5       	brne	.+64     	; 0xbf4 <__vector_13+0x162>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     bba:	81 85       	ldd	r24, Z+9	; 0x09
     bbc:	88 23       	and	r24, r24
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <__vector_13+0x134>
     bc0:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <stepper+0xb>
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <__vector_13+0x136>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	ad e5       	ldi	r26, 0x5D	; 93
     bca:	b3 e0       	ldi	r27, 0x03	; 3
     bcc:	1b 96       	adiw	r26, 0x0b	; 11
     bce:	8c 93       	st	X, r24
     bd0:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     bd2:	1b 96       	adiw	r26, 0x0b	; 11
     bd4:	ec 91       	ld	r30, X
     bd6:	1b 97       	sbiw	r26, 0x0b	; 11
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	eb 5e       	subi	r30, 0xEB	; 235
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     be4:	19 96       	adiw	r26, 0x09	; 9
     be6:	8c 91       	ld	r24, X
     be8:	81 11       	cpse	r24, r1
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <__vector_13+0x15e>
     bec:	82 b1       	in	r24, 0x02	; 2
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <__vector_13+0x160>
     bf0:	82 b1       	in	r24, 0x02	; 2
     bf2:	82 b9       	out	0x02, r24	; 2

	}
	if (stepper._isInitiated == 0)
     bf4:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <stepper+0xa>
     bf8:	81 11       	cpse	r24, r1
     bfa:	3c c0       	rjmp	.+120    	; 0xc74 <__vector_13+0x1e2>
	{
		if ((PINE & 0x08) == 0)
     bfc:	63 99       	sbic	0x0c, 3	; 12
     bfe:	3a c0       	rjmp	.+116    	; 0xc74 <__vector_13+0x1e2>
     c00:	25 e0       	ldi	r18, 0x05	; 5
     c02:	30 e0       	ldi	r19, 0x00	; 0
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
			{
				PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     c04:	ed e5       	ldi	r30, 0x5D	; 93
     c06:	f3 e0       	ldi	r31, 0x03	; 3
     c08:	43 e0       	ldi	r20, 0x03	; 3
     c0a:	50 e0       	ldi	r21, 0x00	; 0
				stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     c0c:	90 e0       	ldi	r25, 0x00	; 0
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
			{
				PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	84 30       	cpi	r24, 0x04	; 4
     c12:	49 f4       	brne	.+18     	; 0xc26 <__vector_13+0x194>
     c14:	80 81       	ld	r24, Z
     c16:	a1 e0       	ldi	r26, 0x01	; 1
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ac 0f       	add	r26, r28
     c1c:	bd 1f       	adc	r27, r29
     c1e:	a8 0f       	add	r26, r24
     c20:	b1 1d       	adc	r27, r1
     c22:	8c 91       	ld	r24, X
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <__vector_13+0x1aa>
     c26:	80 81       	ld	r24, Z
     c28:	da 01       	movw	r26, r20
     c2a:	a8 1b       	sub	r26, r24
     c2c:	b1 09       	sbc	r27, r1
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	6c 0f       	add	r22, r28
     c34:	7d 1f       	adc	r23, r29
     c36:	a6 0f       	add	r26, r22
     c38:	b7 1f       	adc	r27, r23
     c3a:	8c 91       	ld	r24, X
     c3c:	82 b9       	out	0x02, r24	; 2
				stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     c3e:	80 81       	ld	r24, Z
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	19 f0       	breq	.+6      	; 0xc4a <__vector_13+0x1b8>
     c44:	80 81       	ld	r24, Z
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	01 c0       	rjmp	.+2      	; 0xc4c <__vector_13+0x1ba>
     c4a:	89 2f       	mov	r24, r25
     c4c:	80 83       	st	Z, r24

				stepper._currentStep++;
     c4e:	87 81       	ldd	r24, Z+7	; 0x07
     c50:	8f 5f       	subi	r24, 0xFF	; 255
     c52:	87 83       	std	Z+7, r24	; 0x07
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	31 09       	sbc	r19, r1
	{
		if ((PINE & 0x08) == 0)
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
     c58:	d1 f6       	brne	.-76     	; 0xc0e <__vector_13+0x17c>

				stepper._currentStep++;
			}
			
			
			stepper._isInitiated = 1;
     c5a:	ed e5       	ldi	r30, 0x5D	; 93
     c5c:	f3 e0       	ldi	r31, 0x03	; 3
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     c62:	10 82       	st	Z, r1
			stepper.direction = 1;
     c64:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     c66:	13 82       	std	Z+3, r1	; 0x03
     c68:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     c6a:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     c6c:	16 82       	std	Z+6, r1	; 0x06
     c6e:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     c70:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     c72:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     cac:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     cae:	e1 e6       	ldi	r30, 0x61	; 97
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 e8       	ldi	r24, 0x80	; 128
     cb4:	80 83       	st	Z, r24
	CLKPR = 0;
     cb6:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     cb8:	30 d3       	rcall	.+1632   	; 0x131a <UART_Init>
	GPIO_Init();
     cba:	12 dd       	rcall	.-1500   	; 0x6e0 <GPIO_Init>
	TIMER_Init();
     cbc:	b3 d2       	rcall	.+1382   	; 0x1224 <TIMER_Init>
	PWM_Init();
     cbe:	3f de       	rcall	.-898    	; 0x93e <PWM_Init>
     cc0:	0a da       	rcall	.-3052   	; 0xd6 <ADC_Init>
	ADC_Init();
     cc2:	5b de       	rcall	.-842    	; 0x97a <STEPPER_Init>
     cc4:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <g_ADCCount+0x1>
	STEPPER_Init();
     cc8:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     ccc:	84 e1       	ldi	r24, 0x14	; 20
     cce:	e5 ef       	ldi	r30, 0xF5	; 245
     cd0:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     cd2:	df 01       	movw	r26, r30
     cd4:	1d 92       	st	X+, r1
     cd6:	8a 95       	dec	r24
     cd8:	e9 f7       	brne	.-6      	; 0xcd4 <SYS_Init+0x2e>
     cda:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_PauseRequest>
     cde:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <g_WDTimeout>
	g_PauseRequest = 0;
     ce2:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <g_Timer>
	g_WDTimeout = 0;
     ce6:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <g_MotorTicks>
	g_Timer = 0;
     cea:	88 ec       	ldi	r24, 0xC8	; 200
	g_MotorTicks = 0;
     cec:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <BELT_SPEED>
	BELT_SPEED = 200;
     cf0:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <HEAD+0x1>
     cf4:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <HEAD>

	HEAD = NULL;
     cf8:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <TAIL+0x1>
     cfc:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <TAIL>
	TAIL = NULL;
     d00:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <STAGE1+0x1>
     d04:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <STAGE1>
	STAGE1 = NULL;
     d08:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <STAGE2+0x1>
     d0c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <STAGE2>
	STAGE2 = NULL;
     d10:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <FRONT+0x1>
     d14:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <FRONT>
	FRONT = NULL;
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     d1c:	6f ef       	ldi	r22, 0xFF	; 255
     d1e:	89 ee       	ldi	r24, 0xE9	; 233
     d20:	9d ef       	ldi	r25, 0xFD	; 253
     d22:	58 dc       	rcall	.-1872   	; 0x5d4 <LL_ItemInit>
     d24:	71 dc       	rcall	.-1822   	; 0x608 <LL_ItemListInit>
     d26:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     d2a:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <HEAD>
     d2e:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <FRONT+0x1>
     d32:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <FRONT>
	FRONT = HEAD;
     d36:	ca ef       	ldi	r28, 0xFA	; 250
     d38:	08 ee       	ldi	r16, 0xE8	; 232
     d3a:	1d ef       	ldi	r17, 0xFD	; 253
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     d40:	6c 2f       	mov	r22, r28
     d42:	c8 01       	movw	r24, r16
     d44:	47 dc       	rcall	.-1906   	; 0x5d4 <LL_ItemInit>
     d46:	bc 01       	movw	r22, r24
     d48:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     d4c:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     d50:	6f dc       	rcall	.-1826   	; 0x630 <LL_AddBack>
     d52:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <TAIL+0x1>
     d56:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <TAIL>
     d5a:	01 50       	subi	r16, 0x01	; 1
     d5c:	11 09       	sbc	r17, r1
     d5e:	c1 50       	subi	r28, 0x01	; 1
     d60:	cb 3c       	cpi	r28, 0xCB	; 203
     d62:	61 f7       	brne	.-40     	; 0xd3c <SYS_Init+0x96>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     d64:	05 e0       	ldi	r16, 0x05	; 5
     d66:	10 e0       	ldi	r17, 0x00	; 0
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     d6c:	6a ef       	ldi	r22, 0xFA	; 250
     d6e:	88 ee       	ldi	r24, 0xE8	; 232
     d70:	9d ef       	ldi	r25, 0xFD	; 253
     d72:	30 dc       	rcall	.-1952   	; 0x5d4 <LL_ItemInit>
     d74:	bc 01       	movw	r22, r24
     d76:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <HEAD>
		LL_AddBack(HEAD,initNode);
     d7a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <HEAD+0x1>
     d7e:	58 dc       	rcall	.-1872   	; 0x630 <LL_AddBack>
     d80:	01 50       	subi	r16, 0x01	; 1
     d82:	11 09       	sbc	r17, r1
     d84:	89 f7       	brne	.-30     	; 0xd68 <SYS_Init+0xc2>
     d86:	8e e5       	ldi	r24, 0x5E	; 94
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     d88:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     d8a:	df d2       	rcall	.+1470   	; 0x134a <UART_SendString>
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16

} // SYS_Init
     d92:	08 95       	ret

00000d94 <SYS_Pause>:
     d94:	3f 92       	push	r3
     d96:	4f 92       	push	r4
     d98:	5f 92       	push	r5

void SYS_Pause(const char str[20])
{
     d9a:	6f 92       	push	r6
     d9c:	7f 92       	push	r7
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	ca 5f       	subi	r28, 0xFA	; 250
     dbc:	d1 09       	sbc	r29, r1
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	f8 2e       	mov	r15, r24
     dca:	e9 2e       	mov	r14, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     dcc:	f8 94       	cli

	// Turn off motor
	PWM(0);
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	bf dd       	rcall	.-1154   	; 0x952 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     dd4:	00 91 f1 02 	lds	r16, 0x02F1	; 0x8002f1 <FRONT>
     dd8:	10 91 f2 02 	lds	r17, 0x02F2	; 0x8002f2 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	84 e7       	ldi	r24, 0x74	; 116
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	9f 93       	push	r25
     de6:	8f 93       	push	r24
     de8:	ce 01       	movw	r24, r28
     dea:	01 96       	adiw	r24, 0x01	; 1
     dec:	7c 01       	movw	r14, r24
     dee:	9f 93       	push	r25
     df0:	8f 93       	push	r24
     df2:	da d3       	rcall	.+1972   	; 0x15a8 <sprintf>
	UART_SendString(buffer);
     df4:	c7 01       	movw	r24, r14
     df6:	a9 d2       	rcall	.+1362   	; 0x134a <UART_SendString>
     df8:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     e06:	f1 2c       	mov	r15, r1
     e08:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
     e0a:	ff e8       	ldi	r31, 0x8F	; 143
     e0c:	af 2e       	mov	r10, r31
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	bf 2e       	mov	r11, r31
     e12:	f0 2d       	mov	r31, r0
     e14:	6e 01       	movw	r12, r28
     e16:	97 e9       	ldi	r25, 0x97	; 151
     e18:	c9 0e       	add	r12, r25
     e1a:	d1 1c       	adc	r13, r1
     e1c:	27 c0       	rjmp	.+78     	; 0xe6c <SYS_Pause+0xd8>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     e1e:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[100];
		c++;
     e20:	ee 1a       	sub	r14, r30
     e22:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     e24:	c8 01       	movw	r24, r16
     e26:	4b dc       	rcall	.-1898   	; 0x6be <LL_GetStatus>
     e28:	78 2e       	mov	r7, r24
     e2a:	c8 01       	movw	r24, r16
     e2c:	23 dc       	rcall	.-1978   	; 0x674 <LL_GetClass>
     e2e:	88 2e       	mov	r8, r24
     e30:	c8 01       	movw	r24, r16
     e32:	2b dc       	rcall	.-1962   	; 0x68a <LL_GetMag>
     e34:	98 2e       	mov	r9, r24
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
     e36:	c8 01       	movw	r24, r16
     e38:	22 dc       	rcall	.-1980   	; 0x67e <LL_GetRefl>
     e3a:	1f 92       	push	r1
     e3c:	7f 92       	push	r7
     e3e:	1f 92       	push	r1
     e40:	8f 92       	push	r8
     e42:	1f 92       	push	r1
     e44:	9f 92       	push	r9
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	ff 92       	push	r15
     e4c:	ef 92       	push	r14
     e4e:	bf 92       	push	r11
     e50:	af 92       	push	r10
     e52:	df 92       	push	r13
     e54:	cf 92       	push	r12
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
     e56:	a8 d3       	rcall	.+1872   	; 0x15a8 <sprintf>
     e58:	c6 01       	movw	r24, r12
     e5a:	77 d2       	rcall	.+1262   	; 0x134a <UART_SendString>
		temp = LL_Next(temp);	
     e5c:	c8 01       	movw	r24, r16
     e5e:	e4 db       	rcall	.-2104   	; 0x628 <LL_Next>
     e60:	8c 01       	movw	r16, r24
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     e6c:	c8 01       	movw	r24, r16
     e6e:	02 dc       	rcall	.-2044   	; 0x674 <LL_GetClass>
     e70:	85 30       	cpi	r24, 0x05	; 5
     e72:	a9 f6       	brne	.-86     	; 0xe1e <SYS_Pause+0x8a>
     e74:	0f 2e       	mov	r0, r31
     e76:	f2 e1       	ldi	r31, 0x12	; 18
     e78:	cf 2e       	mov	r12, r31
     e7a:	f3 e0       	ldi	r31, 0x03	; 3
     e7c:	df 2e       	mov	r13, r31
     e7e:	f0 2d       	mov	r31, r0
     e80:	00 e0       	ldi	r16, 0x00	; 0
     e82:	10 e0       	ldi	r17, 0x00	; 0
     e84:	0f 2e       	mov	r0, r31
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "\r\nTimer %d State: %u\r\n",i, _timer[i].state);
     e86:	f3 ec       	ldi	r31, 0xC3	; 195
     e88:	af 2e       	mov	r10, r31
     e8a:	f1 e0       	ldi	r31, 0x01	; 1
     e8c:	bf 2e       	mov	r11, r31
     e8e:	f0 2d       	mov	r31, r0
     e90:	7e 01       	movw	r14, r28
     e92:	97 e9       	ldi	r25, 0x97	; 151
     e94:	e9 0e       	add	r14, r25
     e96:	f1 1c       	adc	r15, r1
     e98:	f6 01       	movw	r30, r12
     e9a:	80 85       	ldd	r24, Z+8	; 0x08
     e9c:	1f 92       	push	r1
     e9e:	8f 93       	push	r24
     ea0:	1f 93       	push	r17
     ea2:	0f 93       	push	r16
     ea4:	bf 92       	push	r11
     ea6:	af 92       	push	r10
     ea8:	ff 92       	push	r15
     eaa:	ef 92       	push	r14
     eac:	7d d3       	rcall	.+1786   	; 0x15a8 <sprintf>
		UART_SendString(statebuff);
     eae:	c7 01       	movw	r24, r14
     eb0:	4c d2       	rcall	.+1176   	; 0x134a <UART_SendString>
     eb2:	0f 5f       	subi	r16, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	f9 e0       	ldi	r31, 0x09	; 9
     eb8:	cf 0e       	add	r12, r31
     eba:	d1 1c       	adc	r13, r1
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	07 30       	cpi	r16, 0x07	; 7
     ec8:	11 05       	cpc	r17, r1
     eca:	31 f7       	brne	.-52     	; 0xe98 <SYS_Pause+0x104>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     ecc:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     ed0:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     ed4:	d4 db       	rcall	.-2136   	; 0x67e <LL_GetRefl>
     ed6:	48 2e       	mov	r4, r24
     ed8:	39 2e       	mov	r3, r25
     eda:	60 90 5a 03 	lds	r6, 0x035A	; 0x80035a <STAGE2>
     ede:	50 90 5b 03 	lds	r5, 0x035B	; 0x80035b <STAGE2+0x1>
     ee2:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <STAGE1>
     ee6:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <STAGE1+0x1>
     eea:	cf db       	rcall	.-2146   	; 0x68a <LL_GetMag>
     eec:	78 2e       	mov	r7, r24
     eee:	90 90 0f 03 	lds	r9, 0x030F	; 0x80030f <STAGE1>
     ef2:	80 90 10 03 	lds	r8, 0x0310	; 0x800310 <STAGE1+0x1>
     ef6:	00 91 f3 02 	lds	r16, 0x02F3	; 0x8002f3 <TAIL>
     efa:	10 91 f4 02 	lds	r17, 0x02F4	; 0x8002f4 <TAIL+0x1>
     efe:	f8 01       	movw	r30, r16
     f00:	b2 80       	ldd	r11, Z+2	; 0x02
     f02:	a3 80       	ldd	r10, Z+3	; 0x03
     f04:	d0 90 f1 02 	lds	r13, 0x02F1	; 0x8002f1 <FRONT>
     f08:	c0 90 f2 02 	lds	r12, 0x02F2	; 0x8002f2 <FRONT+0x1>
     f0c:	f0 90 ef 02 	lds	r15, 0x02EF	; 0x8002ef <HEAD>
     f10:	e0 90 f0 02 	lds	r14, 0x02F0	; 0x8002f0 <HEAD+0x1>
     f14:	8f 2d       	mov	r24, r15
     f16:	9e 2d       	mov	r25, r14
     f18:	9c db       	rcall	.-2248   	; 0x652 <LL_Size>
     f1a:	3f 92       	push	r3
     f1c:	4f 92       	push	r4
     f1e:	5f 92       	push	r5
     f20:	6f 92       	push	r6
     f22:	1f 92       	push	r1
     f24:	7f 92       	push	r7
     f26:	8f 92       	push	r8
     f28:	9f 92       	push	r9
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	1f 93       	push	r17
     f34:	0f 93       	push	r16
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	1f 92       	push	r1
     f3c:	8f 93       	push	r24
     f3e:	8a ed       	ldi	r24, 0xDA	; 218
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	9f 93       	push	r25
     f44:	8f 93       	push	r24
     f46:	8e 01       	movw	r16, r28
     f48:	0b 59       	subi	r16, 0x9B	; 155
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	1f 93       	push	r17
     f4e:	0f 93       	push	r16
	UART_SendString(anotherbuff);
     f50:	2b d3       	rcall	.+1622   	; 0x15a8 <sprintf>
     f52:	c8 01       	movw	r24, r16
     f54:	fa d1       	rcall	.+1012   	; 0x134a <UART_SendString>
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     f60:	89 b1       	in	r24, 0x09	; 9
     f62:	83 70       	andi	r24, 0x03	; 3
     f64:	e9 f7       	brne	.-6      	; 0xf60 <SYS_Pause+0x1cc>
		{
			UART_SendString("Starting System!\r\n");
     f66:	8b e1       	ldi	r24, 0x1B	; 27
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	ef d1       	rcall	.+990    	; 0x134a <UART_SendString>
     f6c:	80 e8       	ldi	r24, 0x80	; 128
			PWM(0x80);
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	f0 dc       	rcall	.-1568   	; 0x952 <PWM>
     f72:	78 94       	sei
     f74:	c6 50       	subi	r28, 0x06	; 6
			sei();
     f76:	df 4f       	sbci	r29, 0xFF	; 255
			return;
		}
	}
} // SYS_Pause
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	bf 90       	pop	r11
     f94:	af 90       	pop	r10
     f96:	9f 90       	pop	r9
     f98:	8f 90       	pop	r8
     f9a:	7f 90       	pop	r7
     f9c:	6f 90       	pop	r6
     f9e:	5f 90       	pop	r5
     fa0:	4f 90       	pop	r4
     fa2:	3f 90       	pop	r3
     fa4:	08 95       	ret

00000fa6 <SYS_Calibrate>:
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10

void SYS_Calibrate(char str[20])
{
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	c4 56       	subi	r28, 0x64	; 100
     fc2:	d1 09       	sbc	r29, r1
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	7c 01       	movw	r14, r24
	//
	cli();
     fd0:	f8 94       	cli
	PWM(0);
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	bd dc       	rcall	.-1670   	; 0x952 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     fd8:	00 91 f1 02 	lds	r16, 0x02F1	; 0x8002f1 <FRONT>
     fdc:	10 91 f2 02 	lds	r17, 0x02F2	; 0x8002f2 <FRONT+0x1>
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
     fe0:	c7 01       	movw	r24, r14
     fe2:	b3 d1       	rcall	.+870    	; 0x134a <UART_SendString>
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     fe4:	e1 2c       	mov	r14, r1
     fe6:	f1 2c       	mov	r15, r1
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
     fe8:	0f 2e       	mov	r0, r31
     fea:	f1 e3       	ldi	r31, 0x31	; 49
     fec:	af 2e       	mov	r10, r31
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	bf 2e       	mov	r11, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	ce 01       	movw	r24, r28
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	6c 01       	movw	r12, r24
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     ffa:	1d c0       	rjmp	.+58     	; 0x1036 <SYS_Calibrate+0x90>
	{
		char listbuff[100];
		c++;
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	e9 1a       	sub	r14, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
				c, LL_GetRefl(temp), LL_GetMag(temp));
    1000:	f9 0a       	sbc	r15, r25
    1002:	c8 01       	movw	r24, r16
    1004:	42 db       	rcall	.-2428   	; 0x68a <LL_GetMag>
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
    1006:	98 2e       	mov	r9, r24
    1008:	c8 01       	movw	r24, r16
    100a:	39 db       	rcall	.-2446   	; 0x67e <LL_GetRefl>
    100c:	1f 92       	push	r1
    100e:	9f 92       	push	r9
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	ff 92       	push	r15
    1016:	ef 92       	push	r14
    1018:	bf 92       	push	r11
    101a:	af 92       	push	r10
    101c:	df 92       	push	r13
    101e:	cf 92       	push	r12
				c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    1020:	c3 d2       	rcall	.+1414   	; 0x15a8 <sprintf>
    1022:	c6 01       	movw	r24, r12
    1024:	92 d1       	rcall	.+804    	; 0x134a <UART_SendString>
		temp = LL_Next(temp);
    1026:	c8 01       	movw	r24, r16
    1028:	ff da       	rcall	.-2562   	; 0x628 <LL_Next>
    102a:	8c 01       	movw	r16, r24
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
    1036:	c8 01       	movw	r24, r16
    1038:	42 db       	rcall	.-2428   	; 0x6be <LL_GetStatus>
    103a:	81 11       	cpse	r24, r1
    103c:	df cf       	rjmp	.-66     	; 0xffc <SYS_Calibrate+0x56>
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    103e:	89 b1       	in	r24, 0x09	; 9
    1040:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    1042:	e9 f7       	brne	.-6      	; 0x103e <SYS_Calibrate+0x98>
    1044:	8b e1       	ldi	r24, 0x1B	; 27
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	80 d1       	rcall	.+768    	; 0x134a <UART_SendString>
			PWM(0x80);
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	81 dc       	rcall	.-1790   	; 0x952 <PWM>
    1050:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_PauseRequest>
			g_PauseRequest = 0;
    1054:	78 94       	sei
			sei();
    1056:	cc 59       	subi	r28, 0x9C	; 156
			break;
		}
	}
	return;
} // SYS_Calibrate
    1058:	df 4f       	sbci	r29, 0xFF	; 255
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	08 95       	ret

0000107c <SYS_Rampdown>:
    107c:	ff 92       	push	r15

void SYS_Rampdown()
{
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	e8 97       	sbiw	r28, 0x38	; 56
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1096:	fe 01       	movw	r30, r28
    1098:	31 96       	adiw	r30, 0x01	; 1
    109a:	86 e0       	ldi	r24, 0x06	; 6
    109c:	df 01       	movw	r26, r30
    109e:	1d 92       	st	X+, r1
    10a0:	8a 95       	dec	r24
    10a2:	e9 f7       	brne	.-6      	; 0x109e <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
    10a4:	00 91 f1 02 	lds	r16, 0x02F1	; 0x8002f1 <FRONT>
    10a8:	10 91 f2 02 	lds	r17, 0x02F2	; 0x8002f2 <FRONT+0x1>
	
	cli();
    10ac:	f8 94       	cli
	PORTD = 0;
    10ae:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    10b0:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	4d dc       	rcall	.-1894   	; 0x952 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    10b8:	8f e4       	ldi	r24, 0x4F	; 79
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	46 d1       	rcall	.+652    	; 0x134a <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    10be:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    10c2:	f3 94       	inc	r15
    10c4:	c8 01       	movw	r24, r16
    10c6:	d6 da       	rcall	.-2644   	; 0x674 <LL_GetClass>
    10c8:	e1 e0       	ldi	r30, 0x01	; 1
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ec 0f       	add	r30, r28
    10ce:	fd 1f       	adc	r31, r29
    10d0:	e8 0f       	add	r30, r24
    10d2:	f1 1d       	adc	r31, r1
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    10d8:	80 83       	st	Z, r24
    10da:	c8 01       	movw	r24, r16
    10dc:	a5 da       	rcall	.-2742   	; 0x628 <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    10de:	8c 01       	movw	r16, r24
    10e0:	c8 01       	movw	r24, r16
    10e2:	ed da       	rcall	.-2598   	; 0x6be <LL_GetStatus>
    10e4:	83 30       	cpi	r24, 0x03	; 3
    10e6:	69 f3       	breq	.-38     	; 0x10c2 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	1f 92       	push	r1
    10ec:	8f 93       	push	r24
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	1f 92       	push	r1
    10f2:	8f 93       	push	r24
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	1f 92       	push	r1
    10f8:	8f 93       	push	r24
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	1f 92       	push	r1
    10fe:	8f 93       	push	r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	1f 92       	push	r1
    1104:	8f 93       	push	r24
    1106:	1f 92       	push	r1
    1108:	ff 92       	push	r15
    110a:	84 e7       	ldi	r24, 0x74	; 116
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	9f 93       	push	r25
    1110:	8f 93       	push	r24
    1112:	8e 01       	movw	r16, r28
    1114:	09 5f       	subi	r16, 0xF9	; 249
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	1f 93       	push	r17
    111a:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    111c:	45 d2       	rcall	.+1162   	; 0x15a8 <sprintf>
    111e:	c8 01       	movw	r24, r16
    1120:	14 d1       	rcall	.+552    	; 0x134a <UART_SendString>
	SYS_Calibrate("Get Calibration Stats:");
    1122:	83 ed       	ldi	r24, 0xD3	; 211
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	3f df       	rcall	.-386    	; 0xfa6 <SYS_Calibrate>
    1128:	0f b6       	in	r0, 0x3f	; 63
}
    112a:	f8 94       	cli
    112c:	de bf       	out	0x3e, r29	; 62
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	e8 96       	adiw	r28, 0x38	; 56
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	08 95       	ret

0000114a <__vector_17>:
    114a:	1f 92       	push	r1
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	0b b6       	in	r0, 0x3b	; 59
    1156:	0f 92       	push	r0
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
    1178:	ef 93       	push	r30
    117a:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    117c:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_timer_tick>
    1180:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <_timer_tick+0x1>
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <_timer_tick+0x1>
    118a:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <_timer_tick>
    118e:	c2 e1       	ldi	r28, 0x12	; 18
    1190:	d3 e0       	ldi	r29, 0x03	; 3
    1192:	0f 2e       	mov	r0, r31
    1194:	fa e5       	ldi	r31, 0x5A	; 90
    1196:	ef 2e       	mov	r14, r31
    1198:	f3 e0       	ldi	r31, 0x03	; 3
    119a:	ff 2e       	mov	r15, r31
    119c:	f0 2d       	mov	r31, r0
    119e:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    11a0:	ec 81       	ldd	r30, Y+4	; 0x04
    11a2:	fd 81       	ldd	r31, Y+5	; 0x05
    11a4:	30 97       	sbiw	r30, 0x00	; 0
    11a6:	09 f1       	breq	.+66     	; 0x11ea <__vector_17+0xa0>
    11a8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_timer_tick>
    11ac:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <_timer_tick+0x1>
    11b0:	28 81       	ld	r18, Y
    11b2:	39 81       	ldd	r19, Y+1	; 0x01
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	c1 f4       	brne	.+48     	; 0x11ea <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    11ba:	88 85       	ldd	r24, Y+8	; 0x08
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	19 f4       	brne	.+6      	; 0x11c6 <__vector_17+0x7c>
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    11c6:	d8 01       	movw	r26, r16
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	8d 91       	ld	r24, X+
    11cc:	9c 91       	ld	r25, X
    11ce:	13 97       	sbiw	r26, 0x03	; 3
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	41 f0       	breq	.+16     	; 0x11e4 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    11d4:	2d 91       	ld	r18, X+
    11d6:	3c 91       	ld	r19, X
    11d8:	11 97       	sbiw	r26, 0x01	; 1
    11da:	82 0f       	add	r24, r18
    11dc:	93 1f       	adc	r25, r19
    11de:	8d 93       	st	X+, r24
    11e0:	9c 93       	st	X, r25
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    11e4:	f8 01       	movw	r30, r16
    11e6:	15 82       	std	Z+5, r1	; 0x05
    11e8:	14 82       	std	Z+4, r1	; 0x04
    11ea:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    11ec:	ce 15       	cp	r28, r14
    11ee:	df 05       	cpc	r29, r15
    11f0:	b1 f6       	brne	.-84     	; 0x119e <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	0f 90       	pop	r0
    1218:	0b be       	out	0x3b, r0	; 59
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    122c:	88 e4       	ldi	r24, 0x48	; 72
    122e:	98 e0       	ldi	r25, 0x08	; 8
    1230:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1234:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1238:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    123c:	89 e0       	ldi	r24, 0x09	; 9
    123e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1248:	88 e4       	ldi	r24, 0x48	; 72
    124a:	e2 e1       	ldi	r30, 0x12	; 18
    124c:	f3 e0       	ldi	r31, 0x03	; 3
    124e:	df 01       	movw	r26, r30
    1250:	1d 92       	st	X+, r1
    1252:	8a 95       	dec	r24
    1254:	e9 f7       	brne	.-6      	; 0x1250 <TIMER_Init+0x2c>
    1256:	08 95       	ret

00001258 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1262:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <_timer+0x4>
    1266:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <_timer+0x5>
    126a:	67 2b       	or	r22, r23
    126c:	09 f4       	brne	.+2      	; 0x1270 <TIMER_Create+0x18>
    126e:	49 c0       	rjmp	.+146    	; 0x1302 <TIMER_Create+0xaa>
    1270:	e2 e1       	ldi	r30, 0x12	; 18
    1272:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1274:	a1 e0       	ldi	r26, 0x01	; 1
    1276:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1278:	c5 85       	ldd	r28, Z+13	; 0x0d
    127a:	d6 85       	ldd	r29, Z+14	; 0x0e
    127c:	cd 2b       	or	r28, r29
    127e:	09 f4       	brne	.+2      	; 0x1282 <TIMER_Create+0x2a>
    1280:	42 c0       	rjmp	.+132    	; 0x1306 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	39 96       	adiw	r30, 0x09	; 9
    1286:	a8 30       	cpi	r26, 0x08	; 8
    1288:	b1 05       	cpc	r27, r1
    128a:	b1 f7       	brne	.-20     	; 0x1278 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	3f c0       	rjmp	.+126    	; 0x1310 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1292:	fd 01       	movw	r30, r26
    1294:	ee 0f       	add	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	ee 0f       	add	r30, r30
    129e:	ff 1f       	adc	r31, r31
    12a0:	ea 0f       	add	r30, r26
    12a2:	fb 1f       	adc	r31, r27
    12a4:	ee 5e       	subi	r30, 0xEE	; 238
    12a6:	fc 4f       	sbci	r31, 0xFC	; 252
    12a8:	93 83       	std	Z+3, r25	; 0x03
    12aa:	82 83       	std	Z+2, r24	; 0x02
    12ac:	0d c0       	rjmp	.+26     	; 0x12c8 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    12ae:	fd 01       	movw	r30, r26
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ea 0f       	add	r30, r26
    12be:	fb 1f       	adc	r31, r27
    12c0:	ee 5e       	subi	r30, 0xEE	; 238
    12c2:	fc 4f       	sbci	r31, 0xFC	; 252
    12c4:	13 82       	std	Z+3, r1	; 0x03
    12c6:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    12c8:	fd 01       	movw	r30, r26
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	ea 0f       	add	r30, r26
    12d8:	fb 1f       	adc	r31, r27
    12da:	ee 5e       	subi	r30, 0xEE	; 238
    12dc:	fc 4f       	sbci	r31, 0xFC	; 252
    12de:	55 83       	std	Z+5, r21	; 0x05
    12e0:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    12e2:	37 83       	std	Z+7, r19	; 0x07
    12e4:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    12e6:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <_timer_tick>
    12ea:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <_timer_tick+0x1>
    12ee:	82 0f       	add	r24, r18
    12f0:	93 1f       	adc	r25, r19
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
			_timer[i].state = READY;
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12fa:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    12fc:	8a 2f       	mov	r24, r26
    12fe:	9b 2f       	mov	r25, r27
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1306:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1308:	f8 94       	cli
		{
			if (periodic != 0) 
    130a:	01 2b       	or	r16, r17
    130c:	11 f6       	brne	.-124    	; 0x1292 <TIMER_Create+0x3a>
    130e:	cf cf       	rjmp	.-98     	; 0x12ae <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    131a:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    131e:	83 e3       	ldi	r24, 0x33	; 51
    1320:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1324:	e9 ec       	ldi	r30, 0xC9	; 201
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 61       	ori	r24, 0x18	; 24
    132c:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    132e:	ea ec       	ldi	r30, 0xCA	; 202
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	86 60       	ori	r24, 0x06	; 6
    1336:	80 83       	st	Z, r24
    1338:	08 95       	ret

0000133a <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    133a:	e8 ec       	ldi	r30, 0xC8	; 200
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	90 81       	ld	r25, Z
    1340:	95 ff       	sbrs	r25, 5
    1342:	fd cf       	rjmp	.-6      	; 0x133e <UART_SendChar+0x4>
	UDR1 = c;
    1344:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1348:	08 95       	ret

0000134a <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1350:	88 81       	ld	r24, Y
    1352:	88 23       	and	r24, r24
    1354:	29 f0       	breq	.+10     	; 0x1360 <UART_SendString+0x16>
    1356:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1358:	f0 df       	rcall	.-32     	; 0x133a <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    135a:	89 91       	ld	r24, Y+
    135c:	81 11       	cpse	r24, r1
    135e:	fc cf       	rjmp	.-8      	; 0x1358 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <malloc>:
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	10 f4       	brcc	.+4      	; 0x1378 <malloc+0x12>
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <__flp>
    137c:	f0 91 6c 03 	lds	r31, 0x036C	; 0x80036c <__flp+0x1>
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	a0 e0       	ldi	r26, 0x00	; 0
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	30 97       	sbiw	r30, 0x00	; 0
    138a:	19 f1       	breq	.+70     	; 0x13d2 <malloc+0x6c>
    138c:	40 81       	ld	r20, Z
    138e:	51 81       	ldd	r21, Z+1	; 0x01
    1390:	02 81       	ldd	r16, Z+2	; 0x02
    1392:	13 81       	ldd	r17, Z+3	; 0x03
    1394:	48 17       	cp	r20, r24
    1396:	59 07       	cpc	r21, r25
    1398:	c8 f0       	brcs	.+50     	; 0x13cc <malloc+0x66>
    139a:	84 17       	cp	r24, r20
    139c:	95 07       	cpc	r25, r21
    139e:	69 f4       	brne	.+26     	; 0x13ba <malloc+0x54>
    13a0:	10 97       	sbiw	r26, 0x00	; 0
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <malloc+0x4a>
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	0c 93       	st	X, r16
    13a8:	12 97       	sbiw	r26, 0x02	; 2
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	1c 93       	st	X, r17
    13ae:	27 c0       	rjmp	.+78     	; 0x13fe <malloc+0x98>
    13b0:	00 93 6b 03 	sts	0x036B, r16	; 0x80036b <__flp>
    13b4:	10 93 6c 03 	sts	0x036C, r17	; 0x80036c <__flp+0x1>
    13b8:	22 c0       	rjmp	.+68     	; 0x13fe <malloc+0x98>
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	19 f0       	breq	.+6      	; 0x13c6 <malloc+0x60>
    13c0:	42 17       	cp	r20, r18
    13c2:	53 07       	cpc	r21, r19
    13c4:	18 f4       	brcc	.+6      	; 0x13cc <malloc+0x66>
    13c6:	9a 01       	movw	r18, r20
    13c8:	bd 01       	movw	r22, r26
    13ca:	ef 01       	movw	r28, r30
    13cc:	df 01       	movw	r26, r30
    13ce:	f8 01       	movw	r30, r16
    13d0:	db cf       	rjmp	.-74     	; 0x1388 <malloc+0x22>
    13d2:	21 15       	cp	r18, r1
    13d4:	31 05       	cpc	r19, r1
    13d6:	f9 f0       	breq	.+62     	; 0x1416 <malloc+0xb0>
    13d8:	28 1b       	sub	r18, r24
    13da:	39 0b       	sbc	r19, r25
    13dc:	24 30       	cpi	r18, 0x04	; 4
    13de:	31 05       	cpc	r19, r1
    13e0:	80 f4       	brcc	.+32     	; 0x1402 <malloc+0x9c>
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	61 15       	cp	r22, r1
    13e8:	71 05       	cpc	r23, r1
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <malloc+0x8e>
    13ec:	fb 01       	movw	r30, r22
    13ee:	93 83       	std	Z+3, r25	; 0x03
    13f0:	82 83       	std	Z+2, r24	; 0x02
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <malloc+0x96>
    13f4:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <__flp+0x1>
    13f8:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <__flp>
    13fc:	fe 01       	movw	r30, r28
    13fe:	32 96       	adiw	r30, 0x02	; 2
    1400:	44 c0       	rjmp	.+136    	; 0x148a <malloc+0x124>
    1402:	fe 01       	movw	r30, r28
    1404:	e2 0f       	add	r30, r18
    1406:	f3 1f       	adc	r31, r19
    1408:	81 93       	st	Z+, r24
    140a:	91 93       	st	Z+, r25
    140c:	22 50       	subi	r18, 0x02	; 2
    140e:	31 09       	sbc	r19, r1
    1410:	39 83       	std	Y+1, r19	; 0x01
    1412:	28 83       	st	Y, r18
    1414:	3a c0       	rjmp	.+116    	; 0x148a <malloc+0x124>
    1416:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <__brkval>
    141a:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <__brkval+0x1>
    141e:	23 2b       	or	r18, r19
    1420:	41 f4       	brne	.+16     	; 0x1432 <malloc+0xcc>
    1422:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1426:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    142a:	30 93 6a 03 	sts	0x036A, r19	; 0x80036a <__brkval+0x1>
    142e:	20 93 69 03 	sts	0x0369, r18	; 0x800369 <__brkval>
    1432:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1436:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    143a:	21 15       	cp	r18, r1
    143c:	31 05       	cpc	r19, r1
    143e:	41 f4       	brne	.+16     	; 0x1450 <malloc+0xea>
    1440:	2d b7       	in	r18, 0x3d	; 61
    1442:	3e b7       	in	r19, 0x3e	; 62
    1444:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1448:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    144c:	24 1b       	sub	r18, r20
    144e:	35 0b       	sbc	r19, r21
    1450:	e0 91 69 03 	lds	r30, 0x0369	; 0x800369 <__brkval>
    1454:	f0 91 6a 03 	lds	r31, 0x036A	; 0x80036a <__brkval+0x1>
    1458:	e2 17       	cp	r30, r18
    145a:	f3 07       	cpc	r31, r19
    145c:	a0 f4       	brcc	.+40     	; 0x1486 <malloc+0x120>
    145e:	2e 1b       	sub	r18, r30
    1460:	3f 0b       	sbc	r19, r31
    1462:	28 17       	cp	r18, r24
    1464:	39 07       	cpc	r19, r25
    1466:	78 f0       	brcs	.+30     	; 0x1486 <malloc+0x120>
    1468:	ac 01       	movw	r20, r24
    146a:	4e 5f       	subi	r20, 0xFE	; 254
    146c:	5f 4f       	sbci	r21, 0xFF	; 255
    146e:	24 17       	cp	r18, r20
    1470:	35 07       	cpc	r19, r21
    1472:	48 f0       	brcs	.+18     	; 0x1486 <malloc+0x120>
    1474:	4e 0f       	add	r20, r30
    1476:	5f 1f       	adc	r21, r31
    1478:	50 93 6a 03 	sts	0x036A, r21	; 0x80036a <__brkval+0x1>
    147c:	40 93 69 03 	sts	0x0369, r20	; 0x800369 <__brkval>
    1480:	81 93       	st	Z+, r24
    1482:	91 93       	st	Z+, r25
    1484:	02 c0       	rjmp	.+4      	; 0x148a <malloc+0x124>
    1486:	e0 e0       	ldi	r30, 0x00	; 0
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	cf 01       	movw	r24, r30
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <free>:
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	09 f4       	brne	.+2      	; 0x14a0 <free+0xa>
    149e:	81 c0       	rjmp	.+258    	; 0x15a2 <free+0x10c>
    14a0:	fc 01       	movw	r30, r24
    14a2:	32 97       	sbiw	r30, 0x02	; 2
    14a4:	13 82       	std	Z+3, r1	; 0x03
    14a6:	12 82       	std	Z+2, r1	; 0x02
    14a8:	a0 91 6b 03 	lds	r26, 0x036B	; 0x80036b <__flp>
    14ac:	b0 91 6c 03 	lds	r27, 0x036C	; 0x80036c <__flp+0x1>
    14b0:	10 97       	sbiw	r26, 0x00	; 0
    14b2:	81 f4       	brne	.+32     	; 0x14d4 <free+0x3e>
    14b4:	20 81       	ld	r18, Z
    14b6:	31 81       	ldd	r19, Z+1	; 0x01
    14b8:	82 0f       	add	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <__brkval>
    14c0:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <__brkval+0x1>
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	51 f5       	brne	.+84     	; 0x151e <free+0x88>
    14ca:	f0 93 6a 03 	sts	0x036A, r31	; 0x80036a <__brkval+0x1>
    14ce:	e0 93 69 03 	sts	0x0369, r30	; 0x800369 <__brkval>
    14d2:	67 c0       	rjmp	.+206    	; 0x15a2 <free+0x10c>
    14d4:	ed 01       	movw	r28, r26
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	ce 17       	cp	r28, r30
    14dc:	df 07       	cpc	r29, r31
    14de:	40 f4       	brcc	.+16     	; 0x14f0 <free+0x5a>
    14e0:	4a 81       	ldd	r20, Y+2	; 0x02
    14e2:	5b 81       	ldd	r21, Y+3	; 0x03
    14e4:	9e 01       	movw	r18, r28
    14e6:	41 15       	cp	r20, r1
    14e8:	51 05       	cpc	r21, r1
    14ea:	f1 f0       	breq	.+60     	; 0x1528 <free+0x92>
    14ec:	ea 01       	movw	r28, r20
    14ee:	f5 cf       	rjmp	.-22     	; 0x14da <free+0x44>
    14f0:	d3 83       	std	Z+3, r29	; 0x03
    14f2:	c2 83       	std	Z+2, r28	; 0x02
    14f4:	40 81       	ld	r20, Z
    14f6:	51 81       	ldd	r21, Z+1	; 0x01
    14f8:	84 0f       	add	r24, r20
    14fa:	95 1f       	adc	r25, r21
    14fc:	c8 17       	cp	r28, r24
    14fe:	d9 07       	cpc	r29, r25
    1500:	59 f4       	brne	.+22     	; 0x1518 <free+0x82>
    1502:	88 81       	ld	r24, Y
    1504:	99 81       	ldd	r25, Y+1	; 0x01
    1506:	84 0f       	add	r24, r20
    1508:	95 1f       	adc	r25, r21
    150a:	02 96       	adiw	r24, 0x02	; 2
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	93 83       	std	Z+3, r25	; 0x03
    1516:	82 83       	std	Z+2, r24	; 0x02
    1518:	21 15       	cp	r18, r1
    151a:	31 05       	cpc	r19, r1
    151c:	29 f4       	brne	.+10     	; 0x1528 <free+0x92>
    151e:	f0 93 6c 03 	sts	0x036C, r31	; 0x80036c <__flp+0x1>
    1522:	e0 93 6b 03 	sts	0x036B, r30	; 0x80036b <__flp>
    1526:	3d c0       	rjmp	.+122    	; 0x15a2 <free+0x10c>
    1528:	e9 01       	movw	r28, r18
    152a:	fb 83       	std	Y+3, r31	; 0x03
    152c:	ea 83       	std	Y+2, r30	; 0x02
    152e:	49 91       	ld	r20, Y+
    1530:	59 91       	ld	r21, Y+
    1532:	c4 0f       	add	r28, r20
    1534:	d5 1f       	adc	r29, r21
    1536:	ec 17       	cp	r30, r28
    1538:	fd 07       	cpc	r31, r29
    153a:	61 f4       	brne	.+24     	; 0x1554 <free+0xbe>
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	84 0f       	add	r24, r20
    1542:	95 1f       	adc	r25, r21
    1544:	02 96       	adiw	r24, 0x02	; 2
    1546:	e9 01       	movw	r28, r18
    1548:	99 83       	std	Y+1, r25	; 0x01
    154a:	88 83       	st	Y, r24
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	9b 83       	std	Y+3, r25	; 0x03
    1552:	8a 83       	std	Y+2, r24	; 0x02
    1554:	e0 e0       	ldi	r30, 0x00	; 0
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	12 96       	adiw	r26, 0x02	; 2
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	13 97       	sbiw	r26, 0x03	; 3
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	19 f0       	breq	.+6      	; 0x156a <free+0xd4>
    1564:	fd 01       	movw	r30, r26
    1566:	dc 01       	movw	r26, r24
    1568:	f7 cf       	rjmp	.-18     	; 0x1558 <free+0xc2>
    156a:	8d 91       	ld	r24, X+
    156c:	9c 91       	ld	r25, X
    156e:	11 97       	sbiw	r26, 0x01	; 1
    1570:	9d 01       	movw	r18, r26
    1572:	2e 5f       	subi	r18, 0xFE	; 254
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	82 0f       	add	r24, r18
    1578:	93 1f       	adc	r25, r19
    157a:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <__brkval>
    157e:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <__brkval+0x1>
    1582:	28 17       	cp	r18, r24
    1584:	39 07       	cpc	r19, r25
    1586:	69 f4       	brne	.+26     	; 0x15a2 <free+0x10c>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	29 f4       	brne	.+10     	; 0x1596 <free+0x100>
    158c:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <__flp+0x1>
    1590:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <__flp>
    1594:	02 c0       	rjmp	.+4      	; 0x159a <free+0x104>
    1596:	13 82       	std	Z+3, r1	; 0x03
    1598:	12 82       	std	Z+2, r1	; 0x02
    159a:	b0 93 6a 03 	sts	0x036A, r27	; 0x80036a <__brkval+0x1>
    159e:	a0 93 69 03 	sts	0x0369, r26	; 0x800369 <__brkval>
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <sprintf>:
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	2e 97       	sbiw	r28, 0x0e	; 14
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	0d 89       	ldd	r16, Y+21	; 0x15
    15c2:	1e 89       	ldd	r17, Y+22	; 0x16
    15c4:	86 e0       	ldi	r24, 0x06	; 6
    15c6:	8c 83       	std	Y+4, r24	; 0x04
    15c8:	1a 83       	std	Y+2, r17	; 0x02
    15ca:	09 83       	std	Y+1, r16	; 0x01
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	9f e7       	ldi	r25, 0x7F	; 127
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	ae 01       	movw	r20, r28
    15d6:	47 5e       	subi	r20, 0xE7	; 231
    15d8:	5f 4f       	sbci	r21, 0xFF	; 255
    15da:	6f 89       	ldd	r22, Y+23	; 0x17
    15dc:	78 8d       	ldd	r23, Y+24	; 0x18
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	10 d0       	rcall	.+32     	; 0x1604 <vfprintf>
    15e4:	ef 81       	ldd	r30, Y+7	; 0x07
    15e6:	f8 85       	ldd	r31, Y+8	; 0x08
    15e8:	e0 0f       	add	r30, r16
    15ea:	f1 1f       	adc	r31, r17
    15ec:	10 82       	st	Z, r1
    15ee:	2e 96       	adiw	r28, 0x0e	; 14
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <vfprintf>:
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	2b 97       	sbiw	r28, 0x0b	; 11
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	6c 01       	movw	r12, r24
    163a:	7b 01       	movw	r14, r22
    163c:	8a 01       	movw	r16, r20
    163e:	fc 01       	movw	r30, r24
    1640:	17 82       	std	Z+7, r1	; 0x07
    1642:	16 82       	std	Z+6, r1	; 0x06
    1644:	83 81       	ldd	r24, Z+3	; 0x03
    1646:	81 ff       	sbrs	r24, 1
    1648:	bf c1       	rjmp	.+894    	; 0x19c8 <vfprintf+0x3c4>
    164a:	ce 01       	movw	r24, r28
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	3c 01       	movw	r6, r24
    1650:	f6 01       	movw	r30, r12
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	f7 01       	movw	r30, r14
    1656:	93 fd       	sbrc	r25, 3
    1658:	85 91       	lpm	r24, Z+
    165a:	93 ff       	sbrs	r25, 3
    165c:	81 91       	ld	r24, Z+
    165e:	7f 01       	movw	r14, r30
    1660:	88 23       	and	r24, r24
    1662:	09 f4       	brne	.+2      	; 0x1666 <vfprintf+0x62>
    1664:	ad c1       	rjmp	.+858    	; 0x19c0 <vfprintf+0x3bc>
    1666:	85 32       	cpi	r24, 0x25	; 37
    1668:	39 f4       	brne	.+14     	; 0x1678 <vfprintf+0x74>
    166a:	93 fd       	sbrc	r25, 3
    166c:	85 91       	lpm	r24, Z+
    166e:	93 ff       	sbrs	r25, 3
    1670:	81 91       	ld	r24, Z+
    1672:	7f 01       	movw	r14, r30
    1674:	85 32       	cpi	r24, 0x25	; 37
    1676:	21 f4       	brne	.+8      	; 0x1680 <vfprintf+0x7c>
    1678:	b6 01       	movw	r22, r12
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	d6 d1       	rcall	.+940    	; 0x1a2a <fputc>
    167e:	e8 cf       	rjmp	.-48     	; 0x1650 <vfprintf+0x4c>
    1680:	91 2c       	mov	r9, r1
    1682:	21 2c       	mov	r2, r1
    1684:	31 2c       	mov	r3, r1
    1686:	ff e1       	ldi	r31, 0x1F	; 31
    1688:	f3 15       	cp	r31, r3
    168a:	d8 f0       	brcs	.+54     	; 0x16c2 <vfprintf+0xbe>
    168c:	8b 32       	cpi	r24, 0x2B	; 43
    168e:	79 f0       	breq	.+30     	; 0x16ae <vfprintf+0xaa>
    1690:	38 f4       	brcc	.+14     	; 0x16a0 <vfprintf+0x9c>
    1692:	80 32       	cpi	r24, 0x20	; 32
    1694:	79 f0       	breq	.+30     	; 0x16b4 <vfprintf+0xb0>
    1696:	83 32       	cpi	r24, 0x23	; 35
    1698:	a1 f4       	brne	.+40     	; 0x16c2 <vfprintf+0xbe>
    169a:	23 2d       	mov	r18, r3
    169c:	20 61       	ori	r18, 0x10	; 16
    169e:	1d c0       	rjmp	.+58     	; 0x16da <vfprintf+0xd6>
    16a0:	8d 32       	cpi	r24, 0x2D	; 45
    16a2:	61 f0       	breq	.+24     	; 0x16bc <vfprintf+0xb8>
    16a4:	80 33       	cpi	r24, 0x30	; 48
    16a6:	69 f4       	brne	.+26     	; 0x16c2 <vfprintf+0xbe>
    16a8:	23 2d       	mov	r18, r3
    16aa:	21 60       	ori	r18, 0x01	; 1
    16ac:	16 c0       	rjmp	.+44     	; 0x16da <vfprintf+0xd6>
    16ae:	83 2d       	mov	r24, r3
    16b0:	82 60       	ori	r24, 0x02	; 2
    16b2:	38 2e       	mov	r3, r24
    16b4:	e3 2d       	mov	r30, r3
    16b6:	e4 60       	ori	r30, 0x04	; 4
    16b8:	3e 2e       	mov	r3, r30
    16ba:	2a c0       	rjmp	.+84     	; 0x1710 <vfprintf+0x10c>
    16bc:	f3 2d       	mov	r31, r3
    16be:	f8 60       	ori	r31, 0x08	; 8
    16c0:	1d c0       	rjmp	.+58     	; 0x16fc <vfprintf+0xf8>
    16c2:	37 fc       	sbrc	r3, 7
    16c4:	2d c0       	rjmp	.+90     	; 0x1720 <vfprintf+0x11c>
    16c6:	20 ed       	ldi	r18, 0xD0	; 208
    16c8:	28 0f       	add	r18, r24
    16ca:	2a 30       	cpi	r18, 0x0A	; 10
    16cc:	40 f0       	brcs	.+16     	; 0x16de <vfprintf+0xda>
    16ce:	8e 32       	cpi	r24, 0x2E	; 46
    16d0:	b9 f4       	brne	.+46     	; 0x1700 <vfprintf+0xfc>
    16d2:	36 fc       	sbrc	r3, 6
    16d4:	75 c1       	rjmp	.+746    	; 0x19c0 <vfprintf+0x3bc>
    16d6:	23 2d       	mov	r18, r3
    16d8:	20 64       	ori	r18, 0x40	; 64
    16da:	32 2e       	mov	r3, r18
    16dc:	19 c0       	rjmp	.+50     	; 0x1710 <vfprintf+0x10c>
    16de:	36 fe       	sbrs	r3, 6
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0xea>
    16e2:	8a e0       	ldi	r24, 0x0A	; 10
    16e4:	98 9e       	mul	r9, r24
    16e6:	20 0d       	add	r18, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	92 2e       	mov	r9, r18
    16ec:	11 c0       	rjmp	.+34     	; 0x1710 <vfprintf+0x10c>
    16ee:	ea e0       	ldi	r30, 0x0A	; 10
    16f0:	2e 9e       	mul	r2, r30
    16f2:	20 0d       	add	r18, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	22 2e       	mov	r2, r18
    16f8:	f3 2d       	mov	r31, r3
    16fa:	f0 62       	ori	r31, 0x20	; 32
    16fc:	3f 2e       	mov	r3, r31
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <vfprintf+0x10c>
    1700:	8c 36       	cpi	r24, 0x6C	; 108
    1702:	21 f4       	brne	.+8      	; 0x170c <vfprintf+0x108>
    1704:	83 2d       	mov	r24, r3
    1706:	80 68       	ori	r24, 0x80	; 128
    1708:	38 2e       	mov	r3, r24
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x10c>
    170c:	88 36       	cpi	r24, 0x68	; 104
    170e:	41 f4       	brne	.+16     	; 0x1720 <vfprintf+0x11c>
    1710:	f7 01       	movw	r30, r14
    1712:	93 fd       	sbrc	r25, 3
    1714:	85 91       	lpm	r24, Z+
    1716:	93 ff       	sbrs	r25, 3
    1718:	81 91       	ld	r24, Z+
    171a:	7f 01       	movw	r14, r30
    171c:	81 11       	cpse	r24, r1
    171e:	b3 cf       	rjmp	.-154    	; 0x1686 <vfprintf+0x82>
    1720:	98 2f       	mov	r25, r24
    1722:	9f 7d       	andi	r25, 0xDF	; 223
    1724:	95 54       	subi	r25, 0x45	; 69
    1726:	93 30       	cpi	r25, 0x03	; 3
    1728:	28 f4       	brcc	.+10     	; 0x1734 <vfprintf+0x130>
    172a:	0c 5f       	subi	r16, 0xFC	; 252
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	9f e3       	ldi	r25, 0x3F	; 63
    1730:	99 83       	std	Y+1, r25	; 0x01
    1732:	0d c0       	rjmp	.+26     	; 0x174e <vfprintf+0x14a>
    1734:	83 36       	cpi	r24, 0x63	; 99
    1736:	31 f0       	breq	.+12     	; 0x1744 <vfprintf+0x140>
    1738:	83 37       	cpi	r24, 0x73	; 115
    173a:	71 f0       	breq	.+28     	; 0x1758 <vfprintf+0x154>
    173c:	83 35       	cpi	r24, 0x53	; 83
    173e:	09 f0       	breq	.+2      	; 0x1742 <vfprintf+0x13e>
    1740:	55 c0       	rjmp	.+170    	; 0x17ec <vfprintf+0x1e8>
    1742:	20 c0       	rjmp	.+64     	; 0x1784 <vfprintf+0x180>
    1744:	f8 01       	movw	r30, r16
    1746:	80 81       	ld	r24, Z
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	0e 5f       	subi	r16, 0xFE	; 254
    174c:	1f 4f       	sbci	r17, 0xFF	; 255
    174e:	88 24       	eor	r8, r8
    1750:	83 94       	inc	r8
    1752:	91 2c       	mov	r9, r1
    1754:	53 01       	movw	r10, r6
    1756:	12 c0       	rjmp	.+36     	; 0x177c <vfprintf+0x178>
    1758:	28 01       	movw	r4, r16
    175a:	f2 e0       	ldi	r31, 0x02	; 2
    175c:	4f 0e       	add	r4, r31
    175e:	51 1c       	adc	r5, r1
    1760:	f8 01       	movw	r30, r16
    1762:	a0 80       	ld	r10, Z
    1764:	b1 80       	ldd	r11, Z+1	; 0x01
    1766:	36 fe       	sbrs	r3, 6
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <vfprintf+0x16c>
    176a:	69 2d       	mov	r22, r9
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <vfprintf+0x170>
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	7f ef       	ldi	r23, 0xFF	; 255
    1774:	c5 01       	movw	r24, r10
    1776:	4e d1       	rcall	.+668    	; 0x1a14 <strnlen>
    1778:	4c 01       	movw	r8, r24
    177a:	82 01       	movw	r16, r4
    177c:	f3 2d       	mov	r31, r3
    177e:	ff 77       	andi	r31, 0x7F	; 127
    1780:	3f 2e       	mov	r3, r31
    1782:	15 c0       	rjmp	.+42     	; 0x17ae <vfprintf+0x1aa>
    1784:	28 01       	movw	r4, r16
    1786:	22 e0       	ldi	r18, 0x02	; 2
    1788:	42 0e       	add	r4, r18
    178a:	51 1c       	adc	r5, r1
    178c:	f8 01       	movw	r30, r16
    178e:	a0 80       	ld	r10, Z
    1790:	b1 80       	ldd	r11, Z+1	; 0x01
    1792:	36 fe       	sbrs	r3, 6
    1794:	03 c0       	rjmp	.+6      	; 0x179c <vfprintf+0x198>
    1796:	69 2d       	mov	r22, r9
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x19c>
    179c:	6f ef       	ldi	r22, 0xFF	; 255
    179e:	7f ef       	ldi	r23, 0xFF	; 255
    17a0:	c5 01       	movw	r24, r10
    17a2:	2d d1       	rcall	.+602    	; 0x19fe <strnlen_P>
    17a4:	4c 01       	movw	r8, r24
    17a6:	f3 2d       	mov	r31, r3
    17a8:	f0 68       	ori	r31, 0x80	; 128
    17aa:	3f 2e       	mov	r3, r31
    17ac:	82 01       	movw	r16, r4
    17ae:	33 fc       	sbrc	r3, 3
    17b0:	19 c0       	rjmp	.+50     	; 0x17e4 <vfprintf+0x1e0>
    17b2:	82 2d       	mov	r24, r2
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	88 16       	cp	r8, r24
    17b8:	99 06       	cpc	r9, r25
    17ba:	a0 f4       	brcc	.+40     	; 0x17e4 <vfprintf+0x1e0>
    17bc:	b6 01       	movw	r22, r12
    17be:	80 e2       	ldi	r24, 0x20	; 32
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	33 d1       	rcall	.+614    	; 0x1a2a <fputc>
    17c4:	2a 94       	dec	r2
    17c6:	f5 cf       	rjmp	.-22     	; 0x17b2 <vfprintf+0x1ae>
    17c8:	f5 01       	movw	r30, r10
    17ca:	37 fc       	sbrc	r3, 7
    17cc:	85 91       	lpm	r24, Z+
    17ce:	37 fe       	sbrs	r3, 7
    17d0:	81 91       	ld	r24, Z+
    17d2:	5f 01       	movw	r10, r30
    17d4:	b6 01       	movw	r22, r12
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	28 d1       	rcall	.+592    	; 0x1a2a <fputc>
    17da:	21 10       	cpse	r2, r1
    17dc:	2a 94       	dec	r2
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	82 1a       	sub	r8, r18
    17e2:	91 08       	sbc	r9, r1
    17e4:	81 14       	cp	r8, r1
    17e6:	91 04       	cpc	r9, r1
    17e8:	79 f7       	brne	.-34     	; 0x17c8 <vfprintf+0x1c4>
    17ea:	e1 c0       	rjmp	.+450    	; 0x19ae <vfprintf+0x3aa>
    17ec:	84 36       	cpi	r24, 0x64	; 100
    17ee:	11 f0       	breq	.+4      	; 0x17f4 <vfprintf+0x1f0>
    17f0:	89 36       	cpi	r24, 0x69	; 105
    17f2:	39 f5       	brne	.+78     	; 0x1842 <vfprintf+0x23e>
    17f4:	f8 01       	movw	r30, r16
    17f6:	37 fe       	sbrs	r3, 7
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <vfprintf+0x204>
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	0c 5f       	subi	r16, 0xFC	; 252
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	08 c0       	rjmp	.+16     	; 0x1818 <vfprintf+0x214>
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	07 2e       	mov	r0, r23
    180e:	00 0c       	add	r0, r0
    1810:	88 0b       	sbc	r24, r24
    1812:	99 0b       	sbc	r25, r25
    1814:	0e 5f       	subi	r16, 0xFE	; 254
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	f3 2d       	mov	r31, r3
    181a:	ff 76       	andi	r31, 0x6F	; 111
    181c:	3f 2e       	mov	r3, r31
    181e:	97 ff       	sbrs	r25, 7
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <vfprintf+0x230>
    1822:	90 95       	com	r25
    1824:	80 95       	com	r24
    1826:	70 95       	com	r23
    1828:	61 95       	neg	r22
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	8f 4f       	sbci	r24, 0xFF	; 255
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	f0 68       	ori	r31, 0x80	; 128
    1832:	3f 2e       	mov	r3, r31
    1834:	2a e0       	ldi	r18, 0x0A	; 10
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	a3 01       	movw	r20, r6
    183a:	33 d1       	rcall	.+614    	; 0x1aa2 <__ultoa_invert>
    183c:	88 2e       	mov	r8, r24
    183e:	86 18       	sub	r8, r6
    1840:	44 c0       	rjmp	.+136    	; 0x18ca <vfprintf+0x2c6>
    1842:	85 37       	cpi	r24, 0x75	; 117
    1844:	31 f4       	brne	.+12     	; 0x1852 <vfprintf+0x24e>
    1846:	23 2d       	mov	r18, r3
    1848:	2f 7e       	andi	r18, 0xEF	; 239
    184a:	b2 2e       	mov	r11, r18
    184c:	2a e0       	ldi	r18, 0x0A	; 10
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	25 c0       	rjmp	.+74     	; 0x189c <vfprintf+0x298>
    1852:	93 2d       	mov	r25, r3
    1854:	99 7f       	andi	r25, 0xF9	; 249
    1856:	b9 2e       	mov	r11, r25
    1858:	8f 36       	cpi	r24, 0x6F	; 111
    185a:	c1 f0       	breq	.+48     	; 0x188c <vfprintf+0x288>
    185c:	18 f4       	brcc	.+6      	; 0x1864 <vfprintf+0x260>
    185e:	88 35       	cpi	r24, 0x58	; 88
    1860:	79 f0       	breq	.+30     	; 0x1880 <vfprintf+0x27c>
    1862:	ae c0       	rjmp	.+348    	; 0x19c0 <vfprintf+0x3bc>
    1864:	80 37       	cpi	r24, 0x70	; 112
    1866:	19 f0       	breq	.+6      	; 0x186e <vfprintf+0x26a>
    1868:	88 37       	cpi	r24, 0x78	; 120
    186a:	21 f0       	breq	.+8      	; 0x1874 <vfprintf+0x270>
    186c:	a9 c0       	rjmp	.+338    	; 0x19c0 <vfprintf+0x3bc>
    186e:	e9 2f       	mov	r30, r25
    1870:	e0 61       	ori	r30, 0x10	; 16
    1872:	be 2e       	mov	r11, r30
    1874:	b4 fe       	sbrs	r11, 4
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <vfprintf+0x28e>
    1878:	fb 2d       	mov	r31, r11
    187a:	f4 60       	ori	r31, 0x04	; 4
    187c:	bf 2e       	mov	r11, r31
    187e:	09 c0       	rjmp	.+18     	; 0x1892 <vfprintf+0x28e>
    1880:	34 fe       	sbrs	r3, 4
    1882:	0a c0       	rjmp	.+20     	; 0x1898 <vfprintf+0x294>
    1884:	29 2f       	mov	r18, r25
    1886:	26 60       	ori	r18, 0x06	; 6
    1888:	b2 2e       	mov	r11, r18
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <vfprintf+0x294>
    188c:	28 e0       	ldi	r18, 0x08	; 8
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	05 c0       	rjmp	.+10     	; 0x189c <vfprintf+0x298>
    1892:	20 e1       	ldi	r18, 0x10	; 16
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <vfprintf+0x298>
    1898:	20 e1       	ldi	r18, 0x10	; 16
    189a:	32 e0       	ldi	r19, 0x02	; 2
    189c:	f8 01       	movw	r30, r16
    189e:	b7 fe       	sbrs	r11, 7
    18a0:	07 c0       	rjmp	.+14     	; 0x18b0 <vfprintf+0x2ac>
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	0c 5f       	subi	r16, 0xFC	; 252
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0x2b8>
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 5f       	subi	r16, 0xFE	; 254
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	a3 01       	movw	r20, r6
    18be:	f1 d0       	rcall	.+482    	; 0x1aa2 <__ultoa_invert>
    18c0:	88 2e       	mov	r8, r24
    18c2:	86 18       	sub	r8, r6
    18c4:	fb 2d       	mov	r31, r11
    18c6:	ff 77       	andi	r31, 0x7F	; 127
    18c8:	3f 2e       	mov	r3, r31
    18ca:	36 fe       	sbrs	r3, 6
    18cc:	0d c0       	rjmp	.+26     	; 0x18e8 <vfprintf+0x2e4>
    18ce:	23 2d       	mov	r18, r3
    18d0:	2e 7f       	andi	r18, 0xFE	; 254
    18d2:	a2 2e       	mov	r10, r18
    18d4:	89 14       	cp	r8, r9
    18d6:	58 f4       	brcc	.+22     	; 0x18ee <vfprintf+0x2ea>
    18d8:	34 fe       	sbrs	r3, 4
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <vfprintf+0x2ee>
    18dc:	32 fc       	sbrc	r3, 2
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x2ee>
    18e0:	83 2d       	mov	r24, r3
    18e2:	8e 7e       	andi	r24, 0xEE	; 238
    18e4:	a8 2e       	mov	r10, r24
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <vfprintf+0x2ee>
    18e8:	b8 2c       	mov	r11, r8
    18ea:	a3 2c       	mov	r10, r3
    18ec:	03 c0       	rjmp	.+6      	; 0x18f4 <vfprintf+0x2f0>
    18ee:	b8 2c       	mov	r11, r8
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x2f0>
    18f2:	b9 2c       	mov	r11, r9
    18f4:	a4 fe       	sbrs	r10, 4
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <vfprintf+0x312>
    18f8:	fe 01       	movw	r30, r28
    18fa:	e8 0d       	add	r30, r8
    18fc:	f1 1d       	adc	r31, r1
    18fe:	80 81       	ld	r24, Z
    1900:	80 33       	cpi	r24, 0x30	; 48
    1902:	21 f4       	brne	.+8      	; 0x190c <vfprintf+0x308>
    1904:	9a 2d       	mov	r25, r10
    1906:	99 7e       	andi	r25, 0xE9	; 233
    1908:	a9 2e       	mov	r10, r25
    190a:	09 c0       	rjmp	.+18     	; 0x191e <vfprintf+0x31a>
    190c:	a2 fe       	sbrs	r10, 2
    190e:	06 c0       	rjmp	.+12     	; 0x191c <vfprintf+0x318>
    1910:	b3 94       	inc	r11
    1912:	b3 94       	inc	r11
    1914:	04 c0       	rjmp	.+8      	; 0x191e <vfprintf+0x31a>
    1916:	8a 2d       	mov	r24, r10
    1918:	86 78       	andi	r24, 0x86	; 134
    191a:	09 f0       	breq	.+2      	; 0x191e <vfprintf+0x31a>
    191c:	b3 94       	inc	r11
    191e:	a3 fc       	sbrc	r10, 3
    1920:	10 c0       	rjmp	.+32     	; 0x1942 <vfprintf+0x33e>
    1922:	a0 fe       	sbrs	r10, 0
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <vfprintf+0x32e>
    1926:	b2 14       	cp	r11, r2
    1928:	80 f4       	brcc	.+32     	; 0x194a <vfprintf+0x346>
    192a:	28 0c       	add	r2, r8
    192c:	92 2c       	mov	r9, r2
    192e:	9b 18       	sub	r9, r11
    1930:	0d c0       	rjmp	.+26     	; 0x194c <vfprintf+0x348>
    1932:	b2 14       	cp	r11, r2
    1934:	58 f4       	brcc	.+22     	; 0x194c <vfprintf+0x348>
    1936:	b6 01       	movw	r22, r12
    1938:	80 e2       	ldi	r24, 0x20	; 32
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	76 d0       	rcall	.+236    	; 0x1a2a <fputc>
    193e:	b3 94       	inc	r11
    1940:	f8 cf       	rjmp	.-16     	; 0x1932 <vfprintf+0x32e>
    1942:	b2 14       	cp	r11, r2
    1944:	18 f4       	brcc	.+6      	; 0x194c <vfprintf+0x348>
    1946:	2b 18       	sub	r2, r11
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x34a>
    194a:	98 2c       	mov	r9, r8
    194c:	21 2c       	mov	r2, r1
    194e:	a4 fe       	sbrs	r10, 4
    1950:	0f c0       	rjmp	.+30     	; 0x1970 <vfprintf+0x36c>
    1952:	b6 01       	movw	r22, r12
    1954:	80 e3       	ldi	r24, 0x30	; 48
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	68 d0       	rcall	.+208    	; 0x1a2a <fputc>
    195a:	a2 fe       	sbrs	r10, 2
    195c:	16 c0       	rjmp	.+44     	; 0x198a <vfprintf+0x386>
    195e:	a1 fc       	sbrc	r10, 1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <vfprintf+0x364>
    1962:	88 e7       	ldi	r24, 0x78	; 120
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x368>
    1968:	88 e5       	ldi	r24, 0x58	; 88
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	b6 01       	movw	r22, r12
    196e:	0c c0       	rjmp	.+24     	; 0x1988 <vfprintf+0x384>
    1970:	8a 2d       	mov	r24, r10
    1972:	86 78       	andi	r24, 0x86	; 134
    1974:	51 f0       	breq	.+20     	; 0x198a <vfprintf+0x386>
    1976:	a1 fe       	sbrs	r10, 1
    1978:	02 c0       	rjmp	.+4      	; 0x197e <vfprintf+0x37a>
    197a:	8b e2       	ldi	r24, 0x2B	; 43
    197c:	01 c0       	rjmp	.+2      	; 0x1980 <vfprintf+0x37c>
    197e:	80 e2       	ldi	r24, 0x20	; 32
    1980:	a7 fc       	sbrc	r10, 7
    1982:	8d e2       	ldi	r24, 0x2D	; 45
    1984:	b6 01       	movw	r22, r12
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	50 d0       	rcall	.+160    	; 0x1a2a <fputc>
    198a:	89 14       	cp	r8, r9
    198c:	30 f4       	brcc	.+12     	; 0x199a <vfprintf+0x396>
    198e:	b6 01       	movw	r22, r12
    1990:	80 e3       	ldi	r24, 0x30	; 48
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	4a d0       	rcall	.+148    	; 0x1a2a <fputc>
    1996:	9a 94       	dec	r9
    1998:	f8 cf       	rjmp	.-16     	; 0x198a <vfprintf+0x386>
    199a:	8a 94       	dec	r8
    199c:	f3 01       	movw	r30, r6
    199e:	e8 0d       	add	r30, r8
    19a0:	f1 1d       	adc	r31, r1
    19a2:	80 81       	ld	r24, Z
    19a4:	b6 01       	movw	r22, r12
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	40 d0       	rcall	.+128    	; 0x1a2a <fputc>
    19aa:	81 10       	cpse	r8, r1
    19ac:	f6 cf       	rjmp	.-20     	; 0x199a <vfprintf+0x396>
    19ae:	22 20       	and	r2, r2
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <vfprintf+0x3b0>
    19b2:	4e ce       	rjmp	.-868    	; 0x1650 <vfprintf+0x4c>
    19b4:	b6 01       	movw	r22, r12
    19b6:	80 e2       	ldi	r24, 0x20	; 32
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	37 d0       	rcall	.+110    	; 0x1a2a <fputc>
    19bc:	2a 94       	dec	r2
    19be:	f7 cf       	rjmp	.-18     	; 0x19ae <vfprintf+0x3aa>
    19c0:	f6 01       	movw	r30, r12
    19c2:	86 81       	ldd	r24, Z+6	; 0x06
    19c4:	97 81       	ldd	r25, Z+7	; 0x07
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <vfprintf+0x3c8>
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	9f ef       	ldi	r25, 0xFF	; 255
    19cc:	2b 96       	adiw	r28, 0x0b	; 11
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	bf 90       	pop	r11
    19ea:	af 90       	pop	r10
    19ec:	9f 90       	pop	r9
    19ee:	8f 90       	pop	r8
    19f0:	7f 90       	pop	r7
    19f2:	6f 90       	pop	r6
    19f4:	5f 90       	pop	r5
    19f6:	4f 90       	pop	r4
    19f8:	3f 90       	pop	r3
    19fa:	2f 90       	pop	r2
    19fc:	08 95       	ret

000019fe <strnlen_P>:
    19fe:	fc 01       	movw	r30, r24
    1a00:	05 90       	lpm	r0, Z+
    1a02:	61 50       	subi	r22, 0x01	; 1
    1a04:	70 40       	sbci	r23, 0x00	; 0
    1a06:	01 10       	cpse	r0, r1
    1a08:	d8 f7       	brcc	.-10     	; 0x1a00 <strnlen_P+0x2>
    1a0a:	80 95       	com	r24
    1a0c:	90 95       	com	r25
    1a0e:	8e 0f       	add	r24, r30
    1a10:	9f 1f       	adc	r25, r31
    1a12:	08 95       	ret

00001a14 <strnlen>:
    1a14:	fc 01       	movw	r30, r24
    1a16:	61 50       	subi	r22, 0x01	; 1
    1a18:	70 40       	sbci	r23, 0x00	; 0
    1a1a:	01 90       	ld	r0, Z+
    1a1c:	01 10       	cpse	r0, r1
    1a1e:	d8 f7       	brcc	.-10     	; 0x1a16 <strnlen+0x2>
    1a20:	80 95       	com	r24
    1a22:	90 95       	com	r25
    1a24:	8e 0f       	add	r24, r30
    1a26:	9f 1f       	adc	r25, r31
    1a28:	08 95       	ret

00001a2a <fputc>:
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	fb 01       	movw	r30, r22
    1a34:	23 81       	ldd	r18, Z+3	; 0x03
    1a36:	21 fd       	sbrc	r18, 1
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <fputc+0x16>
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    1a3e:	2c c0       	rjmp	.+88     	; 0x1a98 <fputc+0x6e>
    1a40:	22 ff       	sbrs	r18, 2
    1a42:	16 c0       	rjmp	.+44     	; 0x1a70 <fputc+0x46>
    1a44:	46 81       	ldd	r20, Z+6	; 0x06
    1a46:	57 81       	ldd	r21, Z+7	; 0x07
    1a48:	24 81       	ldd	r18, Z+4	; 0x04
    1a4a:	35 81       	ldd	r19, Z+5	; 0x05
    1a4c:	42 17       	cp	r20, r18
    1a4e:	53 07       	cpc	r21, r19
    1a50:	44 f4       	brge	.+16     	; 0x1a62 <fputc+0x38>
    1a52:	a0 81       	ld	r26, Z
    1a54:	b1 81       	ldd	r27, Z+1	; 0x01
    1a56:	9d 01       	movw	r18, r26
    1a58:	2f 5f       	subi	r18, 0xFF	; 255
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	31 83       	std	Z+1, r19	; 0x01
    1a5e:	20 83       	st	Z, r18
    1a60:	8c 93       	st	X, r24
    1a62:	26 81       	ldd	r18, Z+6	; 0x06
    1a64:	37 81       	ldd	r19, Z+7	; 0x07
    1a66:	2f 5f       	subi	r18, 0xFF	; 255
    1a68:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6a:	37 83       	std	Z+7, r19	; 0x07
    1a6c:	26 83       	std	Z+6, r18	; 0x06
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <fputc+0x6e>
    1a70:	8b 01       	movw	r16, r22
    1a72:	ec 01       	movw	r28, r24
    1a74:	fb 01       	movw	r30, r22
    1a76:	00 84       	ldd	r0, Z+8	; 0x08
    1a78:	f1 85       	ldd	r31, Z+9	; 0x09
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	09 95       	icall
    1a7e:	89 2b       	or	r24, r25
    1a80:	e1 f6       	brne	.-72     	; 0x1a3a <fputc+0x10>
    1a82:	d8 01       	movw	r26, r16
    1a84:	16 96       	adiw	r26, 0x06	; 6
    1a86:	8d 91       	ld	r24, X+
    1a88:	9c 91       	ld	r25, X
    1a8a:	17 97       	sbiw	r26, 0x07	; 7
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	17 96       	adiw	r26, 0x07	; 7
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
    1a94:	16 97       	sbiw	r26, 0x06	; 6
    1a96:	ce 01       	movw	r24, r28
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	08 95       	ret

00001aa2 <__ultoa_invert>:
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	aa 27       	eor	r26, r26
    1aa6:	28 30       	cpi	r18, 0x08	; 8
    1aa8:	51 f1       	breq	.+84     	; 0x1afe <__ultoa_invert+0x5c>
    1aaa:	20 31       	cpi	r18, 0x10	; 16
    1aac:	81 f1       	breq	.+96     	; 0x1b0e <__ultoa_invert+0x6c>
    1aae:	e8 94       	clt
    1ab0:	6f 93       	push	r22
    1ab2:	6e 7f       	andi	r22, 0xFE	; 254
    1ab4:	6e 5f       	subi	r22, 0xFE	; 254
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	af 4f       	sbci	r26, 0xFF	; 255
    1abe:	b1 e0       	ldi	r27, 0x01	; 1
    1ac0:	3e d0       	rcall	.+124    	; 0x1b3e <__ultoa_invert+0x9c>
    1ac2:	b4 e0       	ldi	r27, 0x04	; 4
    1ac4:	3c d0       	rcall	.+120    	; 0x1b3e <__ultoa_invert+0x9c>
    1ac6:	67 0f       	add	r22, r23
    1ac8:	78 1f       	adc	r23, r24
    1aca:	89 1f       	adc	r24, r25
    1acc:	9a 1f       	adc	r25, r26
    1ace:	a1 1d       	adc	r26, r1
    1ad0:	68 0f       	add	r22, r24
    1ad2:	79 1f       	adc	r23, r25
    1ad4:	8a 1f       	adc	r24, r26
    1ad6:	91 1d       	adc	r25, r1
    1ad8:	a1 1d       	adc	r26, r1
    1ada:	6a 0f       	add	r22, r26
    1adc:	71 1d       	adc	r23, r1
    1ade:	81 1d       	adc	r24, r1
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	20 d0       	rcall	.+64     	; 0x1b26 <__ultoa_invert+0x84>
    1ae6:	09 f4       	brne	.+2      	; 0x1aea <__ultoa_invert+0x48>
    1ae8:	68 94       	set
    1aea:	3f 91       	pop	r19
    1aec:	2a e0       	ldi	r18, 0x0A	; 10
    1aee:	26 9f       	mul	r18, r22
    1af0:	11 24       	eor	r1, r1
    1af2:	30 19       	sub	r19, r0
    1af4:	30 5d       	subi	r19, 0xD0	; 208
    1af6:	31 93       	st	Z+, r19
    1af8:	de f6       	brtc	.-74     	; 0x1ab0 <__ultoa_invert+0xe>
    1afa:	cf 01       	movw	r24, r30
    1afc:	08 95       	ret
    1afe:	46 2f       	mov	r20, r22
    1b00:	47 70       	andi	r20, 0x07	; 7
    1b02:	40 5d       	subi	r20, 0xD0	; 208
    1b04:	41 93       	st	Z+, r20
    1b06:	b3 e0       	ldi	r27, 0x03	; 3
    1b08:	0f d0       	rcall	.+30     	; 0x1b28 <__ultoa_invert+0x86>
    1b0a:	c9 f7       	brne	.-14     	; 0x1afe <__ultoa_invert+0x5c>
    1b0c:	f6 cf       	rjmp	.-20     	; 0x1afa <__ultoa_invert+0x58>
    1b0e:	46 2f       	mov	r20, r22
    1b10:	4f 70       	andi	r20, 0x0F	; 15
    1b12:	40 5d       	subi	r20, 0xD0	; 208
    1b14:	4a 33       	cpi	r20, 0x3A	; 58
    1b16:	18 f0       	brcs	.+6      	; 0x1b1e <__ultoa_invert+0x7c>
    1b18:	49 5d       	subi	r20, 0xD9	; 217
    1b1a:	31 fd       	sbrc	r19, 1
    1b1c:	40 52       	subi	r20, 0x20	; 32
    1b1e:	41 93       	st	Z+, r20
    1b20:	02 d0       	rcall	.+4      	; 0x1b26 <__ultoa_invert+0x84>
    1b22:	a9 f7       	brne	.-22     	; 0x1b0e <__ultoa_invert+0x6c>
    1b24:	ea cf       	rjmp	.-44     	; 0x1afa <__ultoa_invert+0x58>
    1b26:	b4 e0       	ldi	r27, 0x04	; 4
    1b28:	a6 95       	lsr	r26
    1b2a:	97 95       	ror	r25
    1b2c:	87 95       	ror	r24
    1b2e:	77 95       	ror	r23
    1b30:	67 95       	ror	r22
    1b32:	ba 95       	dec	r27
    1b34:	c9 f7       	brne	.-14     	; 0x1b28 <__ultoa_invert+0x86>
    1b36:	00 97       	sbiw	r24, 0x00	; 0
    1b38:	61 05       	cpc	r22, r1
    1b3a:	71 05       	cpc	r23, r1
    1b3c:	08 95       	ret
    1b3e:	9b 01       	movw	r18, r22
    1b40:	ac 01       	movw	r20, r24
    1b42:	0a 2e       	mov	r0, r26
    1b44:	06 94       	lsr	r0
    1b46:	57 95       	ror	r21
    1b48:	47 95       	ror	r20
    1b4a:	37 95       	ror	r19
    1b4c:	27 95       	ror	r18
    1b4e:	ba 95       	dec	r27
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <__ultoa_invert+0xa2>
    1b52:	62 0f       	add	r22, r18
    1b54:	73 1f       	adc	r23, r19
    1b56:	84 1f       	adc	r24, r20
    1b58:	95 1f       	adc	r25, r21
    1b5a:	a0 1d       	adc	r26, r0
    1b5c:	08 95       	ret

00001b5e <_exit>:
    1b5e:	f8 94       	cli

00001b60 <__stop_program>:
    1b60:	ff cf       	rjmp	.-2      	; 0x1b60 <__stop_program>
