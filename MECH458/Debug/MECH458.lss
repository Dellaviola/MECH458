
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080015c  0080015c  000010de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b2a  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000168f  00000000  00000000  00003f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cb4  00000000  00000000  000055cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a705  00000000  00000000  00008864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000111b  00000000  00000000  00012f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00014084  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000048ed  00000000  00000000  000142ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	11 c2       	rjmp	.+1058   	; 0x458 <__vector_13>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	c4 c2       	rjmp	.+1416   	; 0x5ce <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ee ee       	ldi	r30, 0xEE	; 238
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 35       	cpi	r26, 0x5C	; 92
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	ac e5       	ldi	r26, 0x5C	; 92
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a3 3c       	cpi	r26, 0xC3	; 195
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	a7 d1       	rcall	.+846    	; 0x41e <main>
  d0:	8c c7       	rjmp	.+3864   	; 0xfea <_exit>

000000d2 <__bad_interrupt>:
  d2:	a9 c1       	rjmp	.+850    	; 0x426 <__vector_default>

000000d4 <ADC_Init>:
#include "string.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  d6:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
  d8:	eb e7       	ldi	r30, 0x7B	; 123
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
  f2:	ac e7       	ldi	r26, 0x7C	; 124
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	81 64       	ori	r24, 0x41	; 65
  fa:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 102:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 104:	08 95       	ret

00000106 <__vector_29>:
	}
}

ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	    g_ADCResultl = ADCL;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <g_ADCResultl+0x1>
 11e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <g_ADCResultl>
		g_ADCResulth = ADCH;
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <g_ADCResulth+0x1>
 12c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <g_ADCResulth>
	    g_ADCFlag = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <g_ADCFlag>
	
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <C_Blinky>:
	PORTC = arg;
}
void Do_Nothing(void *arg)
{
	(void) arg;
	delay_flag = -1;
 144:	88 b1       	in	r24, 0x08	; 8
 146:	80 95       	com	r24
 148:	88 b9       	out	0x08, r24	; 8
 14a:	08 95       	ret

0000014c <Say_Hello>:
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	42 c3       	rjmp	.+1668   	; 0x7d6 <UART_SendString>
 152:	08 95       	ret

00000154 <LL_ItemInit>:

void* LL_GetArg(list* ref)
{
	//
	return ((timerNode*)ref->node)->arg;
}
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	d6 2f       	mov	r29, r22
 160:	c4 2f       	mov	r28, r20
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	45 d3       	rcall	.+1674   	; 0x7f2 <malloc>
 168:	fc 01       	movw	r30, r24
 16a:	11 83       	std	Z+1, r17	; 0x01
 16c:	00 83       	st	Z, r16
 16e:	d2 83       	std	Z+2, r29	; 0x02
 170:	c3 83       	std	Z+3, r28	; 0x03
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <LL_TimerInit>:
 17c:	af 92       	push	r10
 17e:	bf 92       	push	r11
 180:	cf 92       	push	r12
 182:	df 92       	push	r13
 184:	ef 92       	push	r14
 186:	ff 92       	push	r15
 188:	0f 93       	push	r16
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	7c 01       	movw	r14, r24
 190:	eb 01       	movw	r28, r22
 192:	5a 01       	movw	r10, r20
 194:	69 01       	movw	r12, r18
 196:	89 e0       	ldi	r24, 0x09	; 9
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	2b d3       	rcall	.+1622   	; 0x7f2 <malloc>
 19c:	fc 01       	movw	r30, r24
 19e:	d0 86       	std	Z+8, r13	; 0x08
 1a0:	c7 82       	std	Z+7, r12	; 0x07
 1a2:	b6 82       	std	Z+6, r11	; 0x06
 1a4:	a5 82       	std	Z+5, r10	; 0x05
 1a6:	f2 82       	std	Z+2, r15	; 0x02
 1a8:	e1 82       	std	Z+1, r14	; 0x01
 1aa:	d4 83       	std	Z+4, r29	; 0x04
 1ac:	c3 83       	std	Z+3, r28	; 0x03
 1ae:	00 83       	st	Z, r16
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	bf 90       	pop	r11
 1c0:	af 90       	pop	r10
 1c2:	08 95       	ret

000001c4 <LL_ItemListInit>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	11 d3       	rcall	.+1570   	; 0x7f2 <malloc>
 1d0:	fc 01       	movw	r30, r24
 1d2:	d1 83       	std	Z+1, r29	; 0x01
 1d4:	c0 83       	st	Z, r28
 1d6:	15 82       	std	Z+5, r1	; 0x05
 1d8:	14 82       	std	Z+4, r1	; 0x04
 1da:	13 82       	std	Z+3, r1	; 0x03
 1dc:	12 82       	std	Z+2, r1	; 0x02
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <LL_TimerListInit>:
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	01 d3       	rcall	.+1538   	; 0x7f2 <malloc>
 1f0:	fc 01       	movw	r30, r24
 1f2:	d1 83       	std	Z+1, r29	; 0x01
 1f4:	c0 83       	st	Z, r28
 1f6:	15 82       	std	Z+5, r1	; 0x05
 1f8:	14 82       	std	Z+4, r1	; 0x04
 1fa:	13 82       	std	Z+3, r1	; 0x03
 1fc:	12 82       	std	Z+2, r1	; 0x02
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LL_AddBack>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	cb 01       	movw	r24, r22
 20c:	01 c0       	rjmp	.+2      	; 0x210 <LL_AddBack+0xc>
 20e:	e9 01       	movw	r28, r18
 210:	2a 81       	ldd	r18, Y+2	; 0x02
 212:	3b 81       	ldd	r19, Y+3	; 0x03
 214:	21 15       	cp	r18, r1
 216:	31 05       	cpc	r19, r1
 218:	d1 f7       	brne	.-12     	; 0x20e <LL_AddBack+0xa>
 21a:	d4 df       	rcall	.-88     	; 0x1c4 <LL_ItemListInit>
 21c:	9b 83       	std	Y+3, r25	; 0x03
 21e:	8a 83       	std	Y+2, r24	; 0x02
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LL_Remove>:
 226:	ef 92       	push	r14
 228:	ff 92       	push	r15
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	ec 01       	movw	r28, r24
 234:	0a 81       	ldd	r16, Y+2	; 0x02
 236:	1b 81       	ldd	r17, Y+3	; 0x03
 238:	ec 80       	ldd	r14, Y+4	; 0x04
 23a:	fd 80       	ldd	r15, Y+5	; 0x05
 23c:	88 81       	ld	r24, Y
 23e:	99 81       	ldd	r25, Y+1	; 0x01
 240:	70 d3       	rcall	.+1760   	; 0x922 <free>
 242:	ce 01       	movw	r24, r28
 244:	6e d3       	rcall	.+1756   	; 0x922 <free>
 246:	01 15       	cp	r16, r1
 248:	11 05       	cpc	r17, r1
 24a:	19 f0       	breq	.+6      	; 0x252 <LL_Remove+0x2c>
 24c:	f8 01       	movw	r30, r16
 24e:	f5 82       	std	Z+5, r15	; 0x05
 250:	e4 82       	std	Z+4, r14	; 0x04
 252:	e1 14       	cp	r14, r1
 254:	f1 04       	cpc	r15, r1
 256:	19 f0       	breq	.+6      	; 0x25e <LL_Remove+0x38>
 258:	f7 01       	movw	r30, r14
 25a:	13 83       	std	Z+3, r17	; 0x03
 25c:	02 83       	std	Z+2, r16	; 0x02
 25e:	c8 01       	movw	r24, r16
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <LL_Head>:
 26e:	fc 01       	movw	r30, r24
 270:	01 c0       	rjmp	.+2      	; 0x274 <LL_Head+0x6>
 272:	f9 01       	movw	r30, r18
 274:	24 81       	ldd	r18, Z+4	; 0x04
 276:	35 81       	ldd	r19, Z+5	; 0x05
 278:	21 15       	cp	r18, r1
 27a:	31 05       	cpc	r19, r1
 27c:	d1 f7       	brne	.-12     	; 0x272 <LL_Head+0x4>
 27e:	cf 01       	movw	r24, r30
 280:	08 95       	ret

00000282 <LL_Size>:
 282:	dc 01       	movw	r26, r24
 284:	12 96       	adiw	r26, 0x02	; 2
 286:	ed 91       	ld	r30, X+
 288:	fc 91       	ld	r31, X
 28a:	13 97       	sbiw	r26, 0x03	; 3
 28c:	30 97       	sbiw	r30, 0x00	; 0
 28e:	41 f0       	breq	.+16     	; 0x2a0 <LL_Size+0x1e>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	02 80       	ldd	r0, Z+2	; 0x02
 296:	f3 81       	ldd	r31, Z+3	; 0x03
 298:	e0 2d       	mov	r30, r0
 29a:	30 97       	sbiw	r30, 0x00	; 0
 29c:	d1 f7       	brne	.-12     	; 0x292 <LL_Size+0x10>
 29e:	08 95       	ret
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret

000002a4 <LL_GetClass>:
 2a4:	dc 01       	movw	r26, r24
 2a6:	ed 91       	ld	r30, X+
 2a8:	fc 91       	ld	r31, X
 2aa:	83 81       	ldd	r24, Z+3	; 0x03
 2ac:	08 95       	ret

000002ae <LL_GetRefl>:
 2ae:	dc 01       	movw	r26, r24
 2b0:	ed 91       	ld	r30, X+
 2b2:	fc 91       	ld	r31, X
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	08 95       	ret

000002ba <LL_CallCallback>:
 2ba:	fc 01       	movw	r30, r24
 2bc:	a0 81       	ld	r26, Z
 2be:	b1 81       	ldd	r27, Z+1	; 0x01
 2c0:	15 96       	adiw	r26, 0x05	; 5
 2c2:	ed 91       	ld	r30, X+
 2c4:	fc 91       	ld	r31, X
 2c6:	16 97       	sbiw	r26, 0x06	; 6
 2c8:	17 96       	adiw	r26, 0x07	; 7
 2ca:	8d 91       	ld	r24, X+
 2cc:	9c 91       	ld	r25, X
 2ce:	18 97       	sbiw	r26, 0x08	; 8
 2d0:	09 95       	icall
 2d2:	08 95       	ret

000002d4 <LL_UpdateRefl>:

void LL_UpdateRefl(list* ref, uint16_t newRefl)
{
	//
	((itemNode*)ref->node)->reflect = newRefl;
 2d4:	dc 01       	movw	r26, r24
 2d6:	ed 91       	ld	r30, X+
 2d8:	fc 91       	ld	r31, X
 2da:	71 83       	std	Z+1, r23	; 0x01
 2dc:	60 83       	st	Z, r22
 2de:	08 95       	ret

000002e0 <GPIO_Init>:
#include "gpio.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
 2e4:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
 2e6:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
 2e8:	80 ef       	ldi	r24, 0xF0	; 240
 2ea:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 2ec:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
 2ee:	10 ba       	out	0x10, r1	; 16



    return 0;
}
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <LISTTEST>:
 */ 

#include "LISTTEST.h"

void LISTTEST()
{
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	a0 97       	sbiw	r28, 0x20	; 32
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
	
	cli();
 314:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
 316:	e1 e6       	ldi	r30, 0x61	; 97
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 e8       	ldi	r24, 0x80	; 128
 31c:	80 83       	st	Z, r24
	CLKPR = 0;
 31e:	10 82       	st	Z, r1
	UART_Init();
 320:	42 d2       	rcall	.+1156   	; 0x7a6 <UART_Init>
	GPIO_Init();
 322:	de df       	rcall	.-68     	; 0x2e0 <GPIO_Init>
 324:	8f ef       	ldi	r24, 0xFF	; 255
	stepper_handle = -1;
 326:	9f ef       	ldi	r25, 0xFF	; 255
 328:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <stepper_handle+0x1>
 32c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <stepper_handle>
 330:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer_handle+0x1>
	timer_handle = -1;
 334:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer_handle>
 338:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <delay_flag+0x1>
	delay_flag = -1;
 33c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <delay_flag>
	if (Timer_Init() != 0) UART_SendString("TIMER DID NOT INITIALIZE"); //red leds error
 340:	aa d1       	rcall	.+852    	; 0x696 <Timer_Init>
 342:	89 2b       	or	r24, r25
 344:	19 f0       	breq	.+6      	; 0x34c <LISTTEST+0x56>
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	91 e0       	ldi	r25, 0x01	; 1
	//Stepper_Setup();
	PWM_Init();
 34a:	45 d2       	rcall	.+1162   	; 0x7d6 <UART_SendString>
	ADC_Init();
 34c:	7c d0       	rcall	.+248    	; 0x446 <PWM_Init>
 34e:	c2 de       	rcall	.-636    	; 0xd4 <ADC_Init>
	
	
	sei();
 350:	78 94       	sei
	
	
	UART_SendString("Testing List\r\n");
 352:	88 e2       	ldi	r24, 0x28	; 40
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	3f d2       	rcall	.+1150   	; 0x7d6 <UART_SendString>
	PORTC = 0xF0;
 358:	80 ef       	ldi	r24, 0xF0	; 240
	itemNode* newItem = LL_ItemInit(100,100,WHITE);
 35a:	88 b9       	out	0x08, r24	; 8
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	64 e6       	ldi	r22, 0x64	; 100
 360:	84 e6       	ldi	r24, 0x64	; 100
 362:	90 e0       	ldi	r25, 0x00	; 0
	list* listIndex = LL_ItemListInit(newItem);
 364:	f7 de       	rcall	.-530    	; 0x154 <LL_ItemInit>
 366:	2e df       	rcall	.-420    	; 0x1c4 <LL_ItemListInit>
	list* timerList = NULL;
	list* head = listIndex;
	
	newItem = LL_ItemInit(100,100,BLACK);
 368:	7c 01       	movw	r14, r24
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	64 e6       	ldi	r22, 0x64	; 100
 36e:	84 e6       	ldi	r24, 0x64	; 100
 370:	90 e0       	ldi	r25, 0x00	; 0
	LL_AddBack(listIndex, newItem);
 372:	f0 de       	rcall	.-544    	; 0x154 <LL_ItemInit>
 374:	bc 01       	movw	r22, r24
 376:	c7 01       	movw	r24, r14
	newItem = LL_ItemInit(100,100,ALUMINUM);
 378:	45 df       	rcall	.-374    	; 0x204 <LL_AddBack>
 37a:	42 e0       	ldi	r20, 0x02	; 2
 37c:	64 e6       	ldi	r22, 0x64	; 100
 37e:	84 e6       	ldi	r24, 0x64	; 100
	LL_AddBack(listIndex, newItem);
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	e8 de       	rcall	.-560    	; 0x154 <LL_ItemInit>
	newItem = LL_ItemInit(100,100,STEEL);
 384:	bc 01       	movw	r22, r24
 386:	c7 01       	movw	r24, r14
 388:	3d df       	rcall	.-390    	; 0x204 <LL_AddBack>
 38a:	43 e0       	ldi	r20, 0x03	; 3
 38c:	64 e6       	ldi	r22, 0x64	; 100
 38e:	84 e6       	ldi	r24, 0x64	; 100
	LL_AddBack(listIndex, newItem);
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	e0 de       	rcall	.-576    	; 0x154 <LL_ItemInit>
 394:	bc 01       	movw	r22, r24
	
	head = LL_Remove(LL_Head(listIndex));
 396:	c7 01       	movw	r24, r14
 398:	35 df       	rcall	.-406    	; 0x204 <LL_AddBack>
 39a:	c7 01       	movw	r24, r14
 39c:	68 df       	rcall	.-304    	; 0x26e <LL_Head>
	
	timerNode* newTimer = LL_TimerInit(100,100,Say_Hello, NULL, 0);
 39e:	43 df       	rcall	.-378    	; 0x226 <LL_Remove>
 3a0:	7c 01       	movw	r14, r24
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	46 ea       	ldi	r20, 0xA6	; 166
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	64 e6       	ldi	r22, 0x64	; 100
	timerList = LL_TimerListInit(newTimer);
 3ae:	70 e0       	ldi	r23, 0x00	; 0
 3b0:	84 e6       	ldi	r24, 0x64	; 100

	//((timerNode*)timerList->node)->callback(NULL);
	LL_CallCallback(timerList);
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	e3 de       	rcall	.-570    	; 0x17c <LL_TimerInit>
	LL_UpdateRefl(head,200);
 3b6:	16 df       	rcall	.-468    	; 0x1e4 <LL_TimerListInit>
 3b8:	80 df       	rcall	.-256    	; 0x2ba <LL_CallCallback>
 3ba:	68 ec       	ldi	r22, 0xC8	; 200
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	c7 01       	movw	r24, r14
	
	
	char send[32];
//	UART_SendString("Expecting Size 3, Class Black (1)\r\n");
	
	sprintf(send,"Size: %d\r\nClass: %d\r\nReflect: %d \r\n",LL_Size(head),LL_GetClass(head), LL_GetRefl(head));
 3c0:	89 df       	rcall	.-238    	; 0x2d4 <LL_UpdateRefl>
 3c2:	c7 01       	movw	r24, r14
 3c4:	74 df       	rcall	.-280    	; 0x2ae <LL_GetRefl>
 3c6:	08 2f       	mov	r16, r24
 3c8:	d9 2e       	mov	r13, r25
 3ca:	c7 01       	movw	r24, r14
 3cc:	6b df       	rcall	.-298    	; 0x2a4 <LL_GetClass>
 3ce:	18 2f       	mov	r17, r24
 3d0:	c7 01       	movw	r24, r14
 3d2:	57 df       	rcall	.-338    	; 0x282 <LL_Size>
 3d4:	df 92       	push	r13
 3d6:	0f 93       	push	r16
 3d8:	1f 92       	push	r1
 3da:	1f 93       	push	r17
 3dc:	1f 92       	push	r1
 3de:	8f 93       	push	r24
 3e0:	87 e3       	ldi	r24, 0x37	; 55
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	9f 93       	push	r25
 3e6:	8f 93       	push	r24
 3e8:	8e 01       	movw	r16, r28
 3ea:	0f 5f       	subi	r16, 0xFF	; 255
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255
 3ee:	1f 93       	push	r17
 3f0:	0f 93       	push	r16
 3f2:	20 d3       	rcall	.+1600   	; 0xa34 <sprintf>
 3f4:	c8 01       	movw	r24, r16
	UART_SendString(send);
 3f6:	ef d1       	rcall	.+990    	; 0x7d6 <UART_SendString>
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
	
	
	return;
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	a0 96       	adiw	r28, 0x20	; 32
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	ff 90       	pop	r15
 418:	ef 90       	pop	r14
 41a:	df 90       	pop	r13
 41c:	08 95       	ret

0000041e <main>:
	DATAACQ();
	return 0;
#endif
#if LISTUNITTEST == 1
	#include "LISTTEST.h"
	LISTTEST();
 41e:	6b df       	rcall	.-298    	; 0x2f6 <LISTTEST>

	}
	Delay_Create(8000);
	UART_SendString("end\r\n");
	return 0;
}
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	08 95       	ret

00000426 <__vector_default>:

ISR(BADISR_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
	while(1)
	{
		Timer_Create(4000, 1, C_Blinky, NULL,0);
 430:	00 e0       	ldi	r16, 0x00	; 0
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	42 ea       	ldi	r20, 0xA2	; 162
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 ea       	ldi	r24, 0xA0	; 160
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	45 d1       	rcall	.+650    	; 0x6ce <Timer_Create>
 444:	f5 cf       	rjmp	.-22     	; 0x430 <__vector_default+0xa>

00000446 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
 446:	84 b5       	in	r24, 0x24	; 36
 448:	83 68       	ori	r24, 0x83	; 131
 44a:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	83 60       	ori	r24, 0x03	; 3
 450:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	87 bd       	out	0x27, r24	; 39
 456:	08 95       	ret

00000458 <__vector_13>:
}

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	0b b6       	in	r0, 0x3b	; 59
 464:	0f 92       	push	r0
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <__vector_13+0x24>
 47c:	00 d0       	rcall	.+0      	; 0x47e <__vector_13+0x26>
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
 482:	86 e3       	ldi	r24, 0x36	; 54
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	a0 e0       	ldi	r26, 0x00	; 0
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	9e e2       	ldi	r25, 0x2E	; 46
 48c:	ad e2       	ldi	r26, 0x2D	; 45
 48e:	b5 e3       	ldi	r27, 0x35	; 53
 490:	89 83       	std	Y+1, r24	; 0x01
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	ab 83       	std	Y+3, r26	; 0x03
 496:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
 498:	ec e5       	ldi	r30, 0x5C	; 92
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	20 85       	ldd	r18, Z+8	; 0x08
 49e:	31 85       	ldd	r19, Z+9	; 0x09
 4a0:	86 81       	ldd	r24, Z+6	; 0x06
 4a2:	97 81       	ldd	r25, Z+7	; 0x07
 4a4:	28 17       	cp	r18, r24
 4a6:	39 07       	cpc	r19, r25
 4a8:	08 f0       	brcs	.+2      	; 0x4ac <__vector_13+0x54>
 4aa:	5d c0       	rjmp	.+186    	; 0x566 <__vector_13+0x10e>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
 4ac:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end+0x2>
 4b0:	84 30       	cpi	r24, 0x04	; 4
 4b2:	61 f4       	brne	.+24     	; 0x4cc <__vector_13+0x74>
 4b4:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <__data_end>
 4b8:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <__data_end+0x1>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	8c 0f       	add	r24, r28
 4c2:	9d 1f       	adc	r25, r29
 4c4:	e8 0f       	add	r30, r24
 4c6:	f9 1f       	adc	r31, r25
 4c8:	80 81       	ld	r24, Z
 4ca:	0f c0       	rjmp	.+30     	; 0x4ea <__vector_13+0x92>
 4cc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4d0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4d4:	e3 e0       	ldi	r30, 0x03	; 3
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	e8 1b       	sub	r30, r24
 4da:	f9 0b       	sbc	r31, r25
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	8c 0f       	add	r24, r28
 4e2:	9d 1f       	adc	r25, r29
 4e4:	e8 0f       	add	r30, r24
 4e6:	f9 1f       	adc	r31, r25
 4e8:	80 81       	ld	r24, Z
 4ea:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? (stepper._stepNum = 0) : (stepper._stepNum + 1);
 4ec:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
 4f0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x1>
 4f4:	83 30       	cpi	r24, 0x03	; 3
 4f6:	91 05       	cpc	r25, r1
 4f8:	11 f0       	breq	.+4      	; 0x4fe <__vector_13+0xa6>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <__vector_13+0xaa>
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	ec e5       	ldi	r30, 0x5C	; 92
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	91 83       	std	Z+1, r25	; 0x01
 508:	80 83       	st	Z, r24

		stepper._currentStep++;
 50a:	80 85       	ldd	r24, Z+8	; 0x08
 50c:	91 85       	ldd	r25, Z+9	; 0x09
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	91 87       	std	Z+9, r25	; 0x09
 512:	80 87       	std	Z+8, r24	; 0x08

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
 514:	06 97       	sbiw	r24, 0x06	; 6
 516:	70 f0       	brcs	.+28     	; 0x534 <__vector_13+0xdc>
 518:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end+0xc>
 51c:	87 30       	cpi	r24, 0x07	; 7
 51e:	50 f0       	brcs	.+20     	; 0x534 <__vector_13+0xdc>
			stepper._delay--;
 520:	81 50       	subi	r24, 0x01	; 1
 522:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end+0xc>
			OCR2A = 0x07 * stepper._delay;
 526:	98 2f       	mov	r25, r24
 528:	99 0f       	add	r25, r25
 52a:	99 0f       	add	r25, r25
 52c:	99 0f       	add	r25, r25
 52e:	98 1b       	sub	r25, r24
 530:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
 534:	ec e5       	ldi	r30, 0x5C	; 92
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	86 81       	ldd	r24, Z+6	; 0x06
 53a:	97 81       	ldd	r25, Z+7	; 0x07
 53c:	20 85       	ldd	r18, Z+8	; 0x08
 53e:	31 85       	ldd	r19, Z+9	; 0x09
 540:	82 1b       	sub	r24, r18
 542:	93 0b       	sbc	r25, r19
 544:	06 97       	sbiw	r24, 0x06	; 6
 546:	70 f5       	brcc	.+92     	; 0x5a4 <__vector_13+0x14c>
 548:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end+0xc>
 54c:	83 31       	cpi	r24, 0x13	; 19
 54e:	50 f5       	brcc	.+84     	; 0x5a4 <__vector_13+0x14c>
			stepper._delay++;
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end+0xc>
			OCR2A = 0x07 * stepper._delay;
 556:	98 2f       	mov	r25, r24
 558:	99 0f       	add	r25, r25
 55a:	99 0f       	add	r25, r25
 55c:	99 0f       	add	r25, r25
 55e:	98 1b       	sub	r25, r24
 560:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 564:	1f c0       	rjmp	.+62     	; 0x5a4 <__vector_13+0x14c>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
 566:	28 17       	cp	r18, r24
 568:	39 07       	cpc	r19, r25
 56a:	e1 f4       	brne	.+56     	; 0x5a4 <__vector_13+0x14c>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
 56c:	ec e5       	ldi	r30, 0x5C	; 92
 56e:	f1 e0       	ldi	r31, 0x01	; 1
 570:	83 81       	ldd	r24, Z+3	; 0x03
 572:	85 83       	std	Z+5, r24	; 0x05
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
 574:	85 85       	ldd	r24, Z+13	; 0x0d
 576:	88 23       	and	r24, r24
 578:	19 f0       	breq	.+6      	; 0x580 <__vector_13+0x128>
 57a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <__data_end+0xc>
 57e:	01 c0       	rjmp	.+2      	; 0x582 <__vector_13+0x12a>
 580:	94 e1       	ldi	r25, 0x14	; 20
 582:	ec e5       	ldi	r30, 0x5C	; 92
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	94 87       	std	Z+12, r25	; 0x0c
		OCR2A = 0x07 * stepper._delay;
 588:	89 2f       	mov	r24, r25
 58a:	88 0f       	add	r24, r24
 58c:	88 0f       	add	r24, r24
 58e:	88 0f       	add	r24, r24
 590:	89 1b       	sub	r24, r25
 592:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
 596:	85 85       	ldd	r24, Z+13	; 0x0d
 598:	88 23       	and	r24, r24
 59a:	11 f0       	breq	.+4      	; 0x5a0 <__vector_13+0x148>
 59c:	82 b1       	in	r24, 0x02	; 2
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <__vector_13+0x14a>
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	82 b9       	out	0x02, r24	; 2
	}
 5a4:	0f 90       	pop	r0
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	bf 91       	pop	r27
 5b6:	af 91       	pop	r26
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0b be       	out	0x3b, r0	; 59
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_17>:

static struct timerNode_s _timer[MAX_TIMERS];
static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	0b b6       	in	r0, 0x3b	; 59
 5da:	0f 92       	push	r0
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31
	_timer_tick++;
 600:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_timer_tick>
 604:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_timer_tick+0x1>
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_timer_tick+0x1>
 60e:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_timer_tick>
 612:	cc e6       	ldi	r28, 0x6C	; 108
 614:	d1 e0       	ldi	r29, 0x01	; 1
 616:	0f 2e       	mov	r0, r31
 618:	f4 eb       	ldi	r31, 0xB4	; 180
 61a:	ef 2e       	mov	r14, r31
 61c:	f1 e0       	ldi	r31, 0x01	; 1
 61e:	ff 2e       	mov	r15, r31
 620:	f0 2d       	mov	r31, r0
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
 622:	ed 81       	ldd	r30, Y+5	; 0x05
 624:	fe 81       	ldd	r31, Y+6	; 0x06
 626:	30 97       	sbiw	r30, 0x00	; 0
 628:	c9 f0       	breq	.+50     	; 0x65c <__vector_17+0x8e>
 62a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_timer_tick>
 62e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_timer_tick+0x1>
 632:	29 81       	ldd	r18, Y+1	; 0x01
 634:	3a 81       	ldd	r19, Y+2	; 0x02
 636:	28 17       	cp	r18, r24
 638:	39 07       	cpc	r19, r25
 63a:	81 f4       	brne	.+32     	; 0x65c <__vector_17+0x8e>
			_timer[i].callback(_timer[i].arg);
 63c:	8f 81       	ldd	r24, Y+7	; 0x07
 63e:	98 85       	ldd	r25, Y+8	; 0x08
 640:	09 95       	icall
			//_timer_tick = 0;
			//PORTD = 0xF0;
			if (_timer[i].periodic > 0) {
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9c 81       	ldd	r25, Y+4	; 0x04
 646:	00 97       	sbiw	r24, 0x00	; 0
 648:	39 f0       	breq	.+14     	; 0x658 <__vector_17+0x8a>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
 64a:	29 81       	ldd	r18, Y+1	; 0x01
 64c:	3a 81       	ldd	r19, Y+2	; 0x02
 64e:	82 0f       	add	r24, r18
 650:	93 1f       	adc	r25, r19
 652:	9a 83       	std	Y+2, r25	; 0x02
 654:	89 83       	std	Y+1, r24	; 0x01
 656:	02 c0       	rjmp	.+4      	; 0x65c <__vector_17+0x8e>
				} else {
				/* If timer is not periodic, clear the callback to disable */
				_timer[i].callback = NULL;
 658:	1e 82       	std	Y+6, r1	; 0x06
 65a:	1d 82       	std	Y+5, r1	; 0x05
 65c:	29 96       	adiw	r28, 0x09	; 9
{
	_timer_tick++;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
 65e:	ce 15       	cp	r28, r14
 660:	df 05       	cpc	r29, r15
 662:	f9 f6       	brne	.-66     	; 0x622 <__vector_17+0x54>
			}
		}
	}
	//PORTD = 0xF0;
	//TCNT1 = 0x0000;   // for 1 sec at 16 MHz
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	ff 90       	pop	r15
 686:	ef 90       	pop	r14
 688:	0f 90       	pop	r0
 68a:	0b be       	out	0x3b, r0	; 59
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <Timer_Init>:


int Timer_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
 696:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 69a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x03E8;   // for 1 msec at 1 MHz
 69e:	88 ee       	ldi	r24, 0xE8	; 232
 6a0:	93 e0       	ldi	r25, 0x03	; 3
 6a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 6a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
 6aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
 6ae:	89 e0       	ldi	r24, 0x09	; 9
 6b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
 6ba:	88 e4       	ldi	r24, 0x48	; 72
 6bc:	ec e6       	ldi	r30, 0x6C	; 108
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	df 01       	movw	r26, r30
 6c2:	1d 92       	st	X+, r1
 6c4:	8a 95       	dec	r24
 6c6:	e9 f7       	brne	.-6      	; 0x6c2 <Timer_Init+0x2c>

	return 0;
}
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	08 95       	ret

000006ce <Timer_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int Timer_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg, uint8_t priority)
{
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
 6d8:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <_timer+0x5>
 6dc:	70 91 72 01 	lds	r23, 0x0172	; 0x800172 <_timer+0x6>
 6e0:	67 2b       	or	r22, r23
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <Timer_Create+0x18>
 6e4:	53 c0       	rjmp	.+166    	; 0x78c <Timer_Create+0xbe>
 6e6:	ac e6       	ldi	r26, 0x6C	; 108
 6e8:	b1 e0       	ldi	r27, 0x01	; 1
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 6ea:	e1 e0       	ldi	r30, 0x01	; 1
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
 6ee:	1e 96       	adiw	r26, 0x0e	; 14
 6f0:	cd 91       	ld	r28, X+
 6f2:	dc 91       	ld	r29, X
 6f4:	1f 97       	sbiw	r26, 0x0f	; 15
 6f6:	cd 2b       	or	r28, r29
 6f8:	09 f4       	brne	.+2      	; 0x6fc <Timer_Create+0x2e>
 6fa:	4a c0       	rjmp	.+148    	; 0x790 <Timer_Create+0xc2>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 6fc:	31 96       	adiw	r30, 0x01	; 1
 6fe:	19 96       	adiw	r26, 0x09	; 9
 700:	e8 30       	cpi	r30, 0x08	; 8
 702:	f1 05       	cpc	r31, r1
 704:	a1 f7       	brne	.-24     	; 0x6ee <Timer_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	48 c0       	rjmp	.+144    	; 0x79c <Timer_Create+0xce>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
 70c:	df 01       	movw	r26, r30
 70e:	aa 0f       	add	r26, r26
 710:	bb 1f       	adc	r27, r27
 712:	aa 0f       	add	r26, r26
 714:	bb 1f       	adc	r27, r27
 716:	aa 0f       	add	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ae 0f       	add	r26, r30
 71c:	bf 1f       	adc	r27, r31
 71e:	a4 59       	subi	r26, 0x94	; 148
 720:	be 4f       	sbci	r27, 0xFE	; 254
 722:	14 96       	adiw	r26, 0x04	; 4
 724:	9c 93       	st	X, r25
 726:	8e 93       	st	-X, r24
 728:	13 97       	sbiw	r26, 0x03	; 3
 72a:	0f c0       	rjmp	.+30     	; 0x74a <Timer_Create+0x7c>
			} 
			else 
			{
				_timer[i].periodic = 0;
 72c:	df 01       	movw	r26, r30
 72e:	aa 0f       	add	r26, r26
 730:	bb 1f       	adc	r27, r27
 732:	aa 0f       	add	r26, r26
 734:	bb 1f       	adc	r27, r27
 736:	aa 0f       	add	r26, r26
 738:	bb 1f       	adc	r27, r27
 73a:	ae 0f       	add	r26, r30
 73c:	bf 1f       	adc	r27, r31
 73e:	a4 59       	subi	r26, 0x94	; 148
 740:	be 4f       	sbci	r27, 0xFE	; 254
 742:	14 96       	adiw	r26, 0x04	; 4
 744:	1c 92       	st	X, r1
 746:	1e 92       	st	-X, r1
 748:	13 97       	sbiw	r26, 0x03	; 3
			}
			
			_timer[i].callback = callback;
 74a:	df 01       	movw	r26, r30
 74c:	aa 0f       	add	r26, r26
 74e:	bb 1f       	adc	r27, r27
 750:	aa 0f       	add	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	aa 0f       	add	r26, r26
 756:	bb 1f       	adc	r27, r27
 758:	ae 0f       	add	r26, r30
 75a:	bf 1f       	adc	r27, r31
 75c:	a4 59       	subi	r26, 0x94	; 148
 75e:	be 4f       	sbci	r27, 0xFE	; 254
 760:	16 96       	adiw	r26, 0x06	; 6
 762:	5c 93       	st	X, r21
 764:	4e 93       	st	-X, r20
 766:	15 97       	sbiw	r26, 0x05	; 5
			_timer[i].arg = arg;
 768:	18 96       	adiw	r26, 0x08	; 8
 76a:	3c 93       	st	X, r19
 76c:	2e 93       	st	-X, r18
 76e:	17 97       	sbiw	r26, 0x07	; 7
			_timer[i].expiry = timeout_ms + _timer_tick;
 770:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <_timer_tick>
 774:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <_timer_tick+0x1>
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	12 96       	adiw	r26, 0x02	; 2
 77e:	9c 93       	st	X, r25
 780:	8e 93       	st	-X, r24
 782:	11 97       	sbiw	r26, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 784:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
 786:	8e 2f       	mov	r24, r30
 788:	9f 2f       	mov	r25, r31
 78a:	08 c0       	rjmp	.+16     	; 0x79c <Timer_Create+0xce>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 78c:	e0 e0       	ldi	r30, 0x00	; 0
 78e:	f0 e0       	ldi	r31, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 790:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 792:	f8 94       	cli
		{
			
			if (periodic != 0) 
 794:	01 2b       	or	r16, r17
 796:	09 f0       	breq	.+2      	; 0x79a <Timer_Create+0xcc>
 798:	b9 cf       	rjmp	.-142    	; 0x70c <Timer_Create+0x3e>
 79a:	c8 cf       	rjmp	.-112    	; 0x72c <Timer_Create+0x5e>
	return handle;
	}
	
	
    return 0;
}
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	1f 91       	pop	r17
 7a2:	0f 91       	pop	r16
 7a4:	08 95       	ret

000007a6 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
 7a6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
 7aa:	83 e3       	ldi	r24, 0x33	; 51
 7ac:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 7b0:	e9 ec       	ldi	r30, 0xC9	; 201
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	88 61       	ori	r24, 0x18	; 24
 7b8:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 7ba:	ea ec       	ldi	r30, 0xCA	; 202
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	86 60       	ori	r24, 0x06	; 6
 7c2:	80 83       	st	Z, r24
 7c4:	08 95       	ret

000007c6 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
 7c6:	e8 ec       	ldi	r30, 0xC8	; 200
 7c8:	f0 e0       	ldi	r31, 0x00	; 0
 7ca:	90 81       	ld	r25, Z
 7cc:	95 ff       	sbrs	r25, 5
 7ce:	fd cf       	rjmp	.-6      	; 0x7ca <UART_SendChar+0x4>
	UDR1 = c;
 7d0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 7d4:	08 95       	ret

000007d6 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 7dc:	88 81       	ld	r24, Y
 7de:	88 23       	and	r24, r24
 7e0:	29 f0       	breq	.+10     	; 0x7ec <UART_SendString+0x16>
 7e2:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
 7e4:	f0 df       	rcall	.-32     	; 0x7c6 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 7e6:	89 91       	ld	r24, Y+
 7e8:	81 11       	cpse	r24, r1
 7ea:	fc cf       	rjmp	.-8      	; 0x7e4 <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	08 95       	ret

000007f2 <malloc>:
 7f2:	0f 93       	push	r16
 7f4:	1f 93       	push	r17
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	82 30       	cpi	r24, 0x02	; 2
 7fc:	91 05       	cpc	r25, r1
 7fe:	10 f4       	brcc	.+4      	; 0x804 <malloc+0x12>
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <__flp>
 808:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <__flp+0x1>
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	a0 e0       	ldi	r26, 0x00	; 0
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	30 97       	sbiw	r30, 0x00	; 0
 816:	19 f1       	breq	.+70     	; 0x85e <malloc+0x6c>
 818:	40 81       	ld	r20, Z
 81a:	51 81       	ldd	r21, Z+1	; 0x01
 81c:	02 81       	ldd	r16, Z+2	; 0x02
 81e:	13 81       	ldd	r17, Z+3	; 0x03
 820:	48 17       	cp	r20, r24
 822:	59 07       	cpc	r21, r25
 824:	c8 f0       	brcs	.+50     	; 0x858 <malloc+0x66>
 826:	84 17       	cp	r24, r20
 828:	95 07       	cpc	r25, r21
 82a:	69 f4       	brne	.+26     	; 0x846 <malloc+0x54>
 82c:	10 97       	sbiw	r26, 0x00	; 0
 82e:	31 f0       	breq	.+12     	; 0x83c <malloc+0x4a>
 830:	12 96       	adiw	r26, 0x02	; 2
 832:	0c 93       	st	X, r16
 834:	12 97       	sbiw	r26, 0x02	; 2
 836:	13 96       	adiw	r26, 0x03	; 3
 838:	1c 93       	st	X, r17
 83a:	27 c0       	rjmp	.+78     	; 0x88a <malloc+0x98>
 83c:	00 93 c1 01 	sts	0x01C1, r16	; 0x8001c1 <__flp>
 840:	10 93 c2 01 	sts	0x01C2, r17	; 0x8001c2 <__flp+0x1>
 844:	22 c0       	rjmp	.+68     	; 0x88a <malloc+0x98>
 846:	21 15       	cp	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	19 f0       	breq	.+6      	; 0x852 <malloc+0x60>
 84c:	42 17       	cp	r20, r18
 84e:	53 07       	cpc	r21, r19
 850:	18 f4       	brcc	.+6      	; 0x858 <malloc+0x66>
 852:	9a 01       	movw	r18, r20
 854:	bd 01       	movw	r22, r26
 856:	ef 01       	movw	r28, r30
 858:	df 01       	movw	r26, r30
 85a:	f8 01       	movw	r30, r16
 85c:	db cf       	rjmp	.-74     	; 0x814 <malloc+0x22>
 85e:	21 15       	cp	r18, r1
 860:	31 05       	cpc	r19, r1
 862:	f9 f0       	breq	.+62     	; 0x8a2 <malloc+0xb0>
 864:	28 1b       	sub	r18, r24
 866:	39 0b       	sbc	r19, r25
 868:	24 30       	cpi	r18, 0x04	; 4
 86a:	31 05       	cpc	r19, r1
 86c:	80 f4       	brcc	.+32     	; 0x88e <malloc+0x9c>
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	9b 81       	ldd	r25, Y+3	; 0x03
 872:	61 15       	cp	r22, r1
 874:	71 05       	cpc	r23, r1
 876:	21 f0       	breq	.+8      	; 0x880 <malloc+0x8e>
 878:	fb 01       	movw	r30, r22
 87a:	93 83       	std	Z+3, r25	; 0x03
 87c:	82 83       	std	Z+2, r24	; 0x02
 87e:	04 c0       	rjmp	.+8      	; 0x888 <malloc+0x96>
 880:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__flp+0x1>
 884:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__flp>
 888:	fe 01       	movw	r30, r28
 88a:	32 96       	adiw	r30, 0x02	; 2
 88c:	44 c0       	rjmp	.+136    	; 0x916 <malloc+0x124>
 88e:	fe 01       	movw	r30, r28
 890:	e2 0f       	add	r30, r18
 892:	f3 1f       	adc	r31, r19
 894:	81 93       	st	Z+, r24
 896:	91 93       	st	Z+, r25
 898:	22 50       	subi	r18, 0x02	; 2
 89a:	31 09       	sbc	r19, r1
 89c:	39 83       	std	Y+1, r19	; 0x01
 89e:	28 83       	st	Y, r18
 8a0:	3a c0       	rjmp	.+116    	; 0x916 <malloc+0x124>
 8a2:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <__brkval>
 8a6:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <__brkval+0x1>
 8aa:	23 2b       	or	r18, r19
 8ac:	41 f4       	brne	.+16     	; 0x8be <malloc+0xcc>
 8ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 8b2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 8b6:	30 93 c0 01 	sts	0x01C0, r19	; 0x8001c0 <__brkval+0x1>
 8ba:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <__brkval>
 8be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8c6:	21 15       	cp	r18, r1
 8c8:	31 05       	cpc	r19, r1
 8ca:	41 f4       	brne	.+16     	; 0x8dc <malloc+0xea>
 8cc:	2d b7       	in	r18, 0x3d	; 61
 8ce:	3e b7       	in	r19, 0x3e	; 62
 8d0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8d4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8d8:	24 1b       	sub	r18, r20
 8da:	35 0b       	sbc	r19, r21
 8dc:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <__brkval>
 8e0:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <__brkval+0x1>
 8e4:	e2 17       	cp	r30, r18
 8e6:	f3 07       	cpc	r31, r19
 8e8:	a0 f4       	brcc	.+40     	; 0x912 <malloc+0x120>
 8ea:	2e 1b       	sub	r18, r30
 8ec:	3f 0b       	sbc	r19, r31
 8ee:	28 17       	cp	r18, r24
 8f0:	39 07       	cpc	r19, r25
 8f2:	78 f0       	brcs	.+30     	; 0x912 <malloc+0x120>
 8f4:	ac 01       	movw	r20, r24
 8f6:	4e 5f       	subi	r20, 0xFE	; 254
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	24 17       	cp	r18, r20
 8fc:	35 07       	cpc	r19, r21
 8fe:	48 f0       	brcs	.+18     	; 0x912 <malloc+0x120>
 900:	4e 0f       	add	r20, r30
 902:	5f 1f       	adc	r21, r31
 904:	50 93 c0 01 	sts	0x01C0, r21	; 0x8001c0 <__brkval+0x1>
 908:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <__brkval>
 90c:	81 93       	st	Z+, r24
 90e:	91 93       	st	Z+, r25
 910:	02 c0       	rjmp	.+4      	; 0x916 <malloc+0x124>
 912:	e0 e0       	ldi	r30, 0x00	; 0
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	cf 01       	movw	r24, r30
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	1f 91       	pop	r17
 91e:	0f 91       	pop	r16
 920:	08 95       	ret

00000922 <free>:
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	09 f4       	brne	.+2      	; 0x92c <free+0xa>
 92a:	81 c0       	rjmp	.+258    	; 0xa2e <free+0x10c>
 92c:	fc 01       	movw	r30, r24
 92e:	32 97       	sbiw	r30, 0x02	; 2
 930:	13 82       	std	Z+3, r1	; 0x03
 932:	12 82       	std	Z+2, r1	; 0x02
 934:	a0 91 c1 01 	lds	r26, 0x01C1	; 0x8001c1 <__flp>
 938:	b0 91 c2 01 	lds	r27, 0x01C2	; 0x8001c2 <__flp+0x1>
 93c:	10 97       	sbiw	r26, 0x00	; 0
 93e:	81 f4       	brne	.+32     	; 0x960 <free+0x3e>
 940:	20 81       	ld	r18, Z
 942:	31 81       	ldd	r19, Z+1	; 0x01
 944:	82 0f       	add	r24, r18
 946:	93 1f       	adc	r25, r19
 948:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <__brkval>
 94c:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <__brkval+0x1>
 950:	28 17       	cp	r18, r24
 952:	39 07       	cpc	r19, r25
 954:	51 f5       	brne	.+84     	; 0x9aa <free+0x88>
 956:	f0 93 c0 01 	sts	0x01C0, r31	; 0x8001c0 <__brkval+0x1>
 95a:	e0 93 bf 01 	sts	0x01BF, r30	; 0x8001bf <__brkval>
 95e:	67 c0       	rjmp	.+206    	; 0xa2e <free+0x10c>
 960:	ed 01       	movw	r28, r26
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	ce 17       	cp	r28, r30
 968:	df 07       	cpc	r29, r31
 96a:	40 f4       	brcc	.+16     	; 0x97c <free+0x5a>
 96c:	4a 81       	ldd	r20, Y+2	; 0x02
 96e:	5b 81       	ldd	r21, Y+3	; 0x03
 970:	9e 01       	movw	r18, r28
 972:	41 15       	cp	r20, r1
 974:	51 05       	cpc	r21, r1
 976:	f1 f0       	breq	.+60     	; 0x9b4 <free+0x92>
 978:	ea 01       	movw	r28, r20
 97a:	f5 cf       	rjmp	.-22     	; 0x966 <free+0x44>
 97c:	d3 83       	std	Z+3, r29	; 0x03
 97e:	c2 83       	std	Z+2, r28	; 0x02
 980:	40 81       	ld	r20, Z
 982:	51 81       	ldd	r21, Z+1	; 0x01
 984:	84 0f       	add	r24, r20
 986:	95 1f       	adc	r25, r21
 988:	c8 17       	cp	r28, r24
 98a:	d9 07       	cpc	r29, r25
 98c:	59 f4       	brne	.+22     	; 0x9a4 <free+0x82>
 98e:	88 81       	ld	r24, Y
 990:	99 81       	ldd	r25, Y+1	; 0x01
 992:	84 0f       	add	r24, r20
 994:	95 1f       	adc	r25, r21
 996:	02 96       	adiw	r24, 0x02	; 2
 998:	91 83       	std	Z+1, r25	; 0x01
 99a:	80 83       	st	Z, r24
 99c:	8a 81       	ldd	r24, Y+2	; 0x02
 99e:	9b 81       	ldd	r25, Y+3	; 0x03
 9a0:	93 83       	std	Z+3, r25	; 0x03
 9a2:	82 83       	std	Z+2, r24	; 0x02
 9a4:	21 15       	cp	r18, r1
 9a6:	31 05       	cpc	r19, r1
 9a8:	29 f4       	brne	.+10     	; 0x9b4 <free+0x92>
 9aa:	f0 93 c2 01 	sts	0x01C2, r31	; 0x8001c2 <__flp+0x1>
 9ae:	e0 93 c1 01 	sts	0x01C1, r30	; 0x8001c1 <__flp>
 9b2:	3d c0       	rjmp	.+122    	; 0xa2e <free+0x10c>
 9b4:	e9 01       	movw	r28, r18
 9b6:	fb 83       	std	Y+3, r31	; 0x03
 9b8:	ea 83       	std	Y+2, r30	; 0x02
 9ba:	49 91       	ld	r20, Y+
 9bc:	59 91       	ld	r21, Y+
 9be:	c4 0f       	add	r28, r20
 9c0:	d5 1f       	adc	r29, r21
 9c2:	ec 17       	cp	r30, r28
 9c4:	fd 07       	cpc	r31, r29
 9c6:	61 f4       	brne	.+24     	; 0x9e0 <free+0xbe>
 9c8:	80 81       	ld	r24, Z
 9ca:	91 81       	ldd	r25, Z+1	; 0x01
 9cc:	84 0f       	add	r24, r20
 9ce:	95 1f       	adc	r25, r21
 9d0:	02 96       	adiw	r24, 0x02	; 2
 9d2:	e9 01       	movw	r28, r18
 9d4:	99 83       	std	Y+1, r25	; 0x01
 9d6:	88 83       	st	Y, r24
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	93 81       	ldd	r25, Z+3	; 0x03
 9dc:	9b 83       	std	Y+3, r25	; 0x03
 9de:	8a 83       	std	Y+2, r24	; 0x02
 9e0:	e0 e0       	ldi	r30, 0x00	; 0
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	12 96       	adiw	r26, 0x02	; 2
 9e6:	8d 91       	ld	r24, X+
 9e8:	9c 91       	ld	r25, X
 9ea:	13 97       	sbiw	r26, 0x03	; 3
 9ec:	00 97       	sbiw	r24, 0x00	; 0
 9ee:	19 f0       	breq	.+6      	; 0x9f6 <free+0xd4>
 9f0:	fd 01       	movw	r30, r26
 9f2:	dc 01       	movw	r26, r24
 9f4:	f7 cf       	rjmp	.-18     	; 0x9e4 <free+0xc2>
 9f6:	8d 91       	ld	r24, X+
 9f8:	9c 91       	ld	r25, X
 9fa:	11 97       	sbiw	r26, 0x01	; 1
 9fc:	9d 01       	movw	r18, r26
 9fe:	2e 5f       	subi	r18, 0xFE	; 254
 a00:	3f 4f       	sbci	r19, 0xFF	; 255
 a02:	82 0f       	add	r24, r18
 a04:	93 1f       	adc	r25, r19
 a06:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <__brkval>
 a0a:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <__brkval+0x1>
 a0e:	28 17       	cp	r18, r24
 a10:	39 07       	cpc	r19, r25
 a12:	69 f4       	brne	.+26     	; 0xa2e <free+0x10c>
 a14:	30 97       	sbiw	r30, 0x00	; 0
 a16:	29 f4       	brne	.+10     	; 0xa22 <free+0x100>
 a18:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__flp+0x1>
 a1c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <__flp>
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <free+0x104>
 a22:	13 82       	std	Z+3, r1	; 0x03
 a24:	12 82       	std	Z+2, r1	; 0x02
 a26:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <__brkval+0x1>
 a2a:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <__brkval>
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	08 95       	ret

00000a34 <sprintf>:
 a34:	0f 93       	push	r16
 a36:	1f 93       	push	r17
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	2e 97       	sbiw	r28, 0x0e	; 14
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	0d 89       	ldd	r16, Y+21	; 0x15
 a4e:	1e 89       	ldd	r17, Y+22	; 0x16
 a50:	86 e0       	ldi	r24, 0x06	; 6
 a52:	8c 83       	std	Y+4, r24	; 0x04
 a54:	1a 83       	std	Y+2, r17	; 0x02
 a56:	09 83       	std	Y+1, r16	; 0x01
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f e7       	ldi	r25, 0x7F	; 127
 a5c:	9e 83       	std	Y+6, r25	; 0x06
 a5e:	8d 83       	std	Y+5, r24	; 0x05
 a60:	ae 01       	movw	r20, r28
 a62:	47 5e       	subi	r20, 0xE7	; 231
 a64:	5f 4f       	sbci	r21, 0xFF	; 255
 a66:	6f 89       	ldd	r22, Y+23	; 0x17
 a68:	78 8d       	ldd	r23, Y+24	; 0x18
 a6a:	ce 01       	movw	r24, r28
 a6c:	01 96       	adiw	r24, 0x01	; 1
 a6e:	10 d0       	rcall	.+32     	; 0xa90 <vfprintf>
 a70:	ef 81       	ldd	r30, Y+7	; 0x07
 a72:	f8 85       	ldd	r31, Y+8	; 0x08
 a74:	e0 0f       	add	r30, r16
 a76:	f1 1f       	adc	r31, r17
 a78:	10 82       	st	Z, r1
 a7a:	2e 96       	adiw	r28, 0x0e	; 14
 a7c:	0f b6       	in	r0, 0x3f	; 63
 a7e:	f8 94       	cli
 a80:	de bf       	out	0x3e, r29	; 62
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	cd bf       	out	0x3d, r28	; 61
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	08 95       	ret

00000a90 <vfprintf>:
 a90:	2f 92       	push	r2
 a92:	3f 92       	push	r3
 a94:	4f 92       	push	r4
 a96:	5f 92       	push	r5
 a98:	6f 92       	push	r6
 a9a:	7f 92       	push	r7
 a9c:	8f 92       	push	r8
 a9e:	9f 92       	push	r9
 aa0:	af 92       	push	r10
 aa2:	bf 92       	push	r11
 aa4:	cf 92       	push	r12
 aa6:	df 92       	push	r13
 aa8:	ef 92       	push	r14
 aaa:	ff 92       	push	r15
 aac:	0f 93       	push	r16
 aae:	1f 93       	push	r17
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	cd b7       	in	r28, 0x3d	; 61
 ab6:	de b7       	in	r29, 0x3e	; 62
 ab8:	2b 97       	sbiw	r28, 0x0b	; 11
 aba:	0f b6       	in	r0, 0x3f	; 63
 abc:	f8 94       	cli
 abe:	de bf       	out	0x3e, r29	; 62
 ac0:	0f be       	out	0x3f, r0	; 63
 ac2:	cd bf       	out	0x3d, r28	; 61
 ac4:	6c 01       	movw	r12, r24
 ac6:	7b 01       	movw	r14, r22
 ac8:	8a 01       	movw	r16, r20
 aca:	fc 01       	movw	r30, r24
 acc:	17 82       	std	Z+7, r1	; 0x07
 ace:	16 82       	std	Z+6, r1	; 0x06
 ad0:	83 81       	ldd	r24, Z+3	; 0x03
 ad2:	81 ff       	sbrs	r24, 1
 ad4:	bf c1       	rjmp	.+894    	; 0xe54 <vfprintf+0x3c4>
 ad6:	ce 01       	movw	r24, r28
 ad8:	01 96       	adiw	r24, 0x01	; 1
 ada:	3c 01       	movw	r6, r24
 adc:	f6 01       	movw	r30, r12
 ade:	93 81       	ldd	r25, Z+3	; 0x03
 ae0:	f7 01       	movw	r30, r14
 ae2:	93 fd       	sbrc	r25, 3
 ae4:	85 91       	lpm	r24, Z+
 ae6:	93 ff       	sbrs	r25, 3
 ae8:	81 91       	ld	r24, Z+
 aea:	7f 01       	movw	r14, r30
 aec:	88 23       	and	r24, r24
 aee:	09 f4       	brne	.+2      	; 0xaf2 <vfprintf+0x62>
 af0:	ad c1       	rjmp	.+858    	; 0xe4c <vfprintf+0x3bc>
 af2:	85 32       	cpi	r24, 0x25	; 37
 af4:	39 f4       	brne	.+14     	; 0xb04 <vfprintf+0x74>
 af6:	93 fd       	sbrc	r25, 3
 af8:	85 91       	lpm	r24, Z+
 afa:	93 ff       	sbrs	r25, 3
 afc:	81 91       	ld	r24, Z+
 afe:	7f 01       	movw	r14, r30
 b00:	85 32       	cpi	r24, 0x25	; 37
 b02:	21 f4       	brne	.+8      	; 0xb0c <vfprintf+0x7c>
 b04:	b6 01       	movw	r22, r12
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	d6 d1       	rcall	.+940    	; 0xeb6 <fputc>
 b0a:	e8 cf       	rjmp	.-48     	; 0xadc <vfprintf+0x4c>
 b0c:	91 2c       	mov	r9, r1
 b0e:	21 2c       	mov	r2, r1
 b10:	31 2c       	mov	r3, r1
 b12:	ff e1       	ldi	r31, 0x1F	; 31
 b14:	f3 15       	cp	r31, r3
 b16:	d8 f0       	brcs	.+54     	; 0xb4e <vfprintf+0xbe>
 b18:	8b 32       	cpi	r24, 0x2B	; 43
 b1a:	79 f0       	breq	.+30     	; 0xb3a <vfprintf+0xaa>
 b1c:	38 f4       	brcc	.+14     	; 0xb2c <vfprintf+0x9c>
 b1e:	80 32       	cpi	r24, 0x20	; 32
 b20:	79 f0       	breq	.+30     	; 0xb40 <vfprintf+0xb0>
 b22:	83 32       	cpi	r24, 0x23	; 35
 b24:	a1 f4       	brne	.+40     	; 0xb4e <vfprintf+0xbe>
 b26:	23 2d       	mov	r18, r3
 b28:	20 61       	ori	r18, 0x10	; 16
 b2a:	1d c0       	rjmp	.+58     	; 0xb66 <vfprintf+0xd6>
 b2c:	8d 32       	cpi	r24, 0x2D	; 45
 b2e:	61 f0       	breq	.+24     	; 0xb48 <vfprintf+0xb8>
 b30:	80 33       	cpi	r24, 0x30	; 48
 b32:	69 f4       	brne	.+26     	; 0xb4e <vfprintf+0xbe>
 b34:	23 2d       	mov	r18, r3
 b36:	21 60       	ori	r18, 0x01	; 1
 b38:	16 c0       	rjmp	.+44     	; 0xb66 <vfprintf+0xd6>
 b3a:	83 2d       	mov	r24, r3
 b3c:	82 60       	ori	r24, 0x02	; 2
 b3e:	38 2e       	mov	r3, r24
 b40:	e3 2d       	mov	r30, r3
 b42:	e4 60       	ori	r30, 0x04	; 4
 b44:	3e 2e       	mov	r3, r30
 b46:	2a c0       	rjmp	.+84     	; 0xb9c <vfprintf+0x10c>
 b48:	f3 2d       	mov	r31, r3
 b4a:	f8 60       	ori	r31, 0x08	; 8
 b4c:	1d c0       	rjmp	.+58     	; 0xb88 <vfprintf+0xf8>
 b4e:	37 fc       	sbrc	r3, 7
 b50:	2d c0       	rjmp	.+90     	; 0xbac <vfprintf+0x11c>
 b52:	20 ed       	ldi	r18, 0xD0	; 208
 b54:	28 0f       	add	r18, r24
 b56:	2a 30       	cpi	r18, 0x0A	; 10
 b58:	40 f0       	brcs	.+16     	; 0xb6a <vfprintf+0xda>
 b5a:	8e 32       	cpi	r24, 0x2E	; 46
 b5c:	b9 f4       	brne	.+46     	; 0xb8c <vfprintf+0xfc>
 b5e:	36 fc       	sbrc	r3, 6
 b60:	75 c1       	rjmp	.+746    	; 0xe4c <vfprintf+0x3bc>
 b62:	23 2d       	mov	r18, r3
 b64:	20 64       	ori	r18, 0x40	; 64
 b66:	32 2e       	mov	r3, r18
 b68:	19 c0       	rjmp	.+50     	; 0xb9c <vfprintf+0x10c>
 b6a:	36 fe       	sbrs	r3, 6
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <vfprintf+0xea>
 b6e:	8a e0       	ldi	r24, 0x0A	; 10
 b70:	98 9e       	mul	r9, r24
 b72:	20 0d       	add	r18, r0
 b74:	11 24       	eor	r1, r1
 b76:	92 2e       	mov	r9, r18
 b78:	11 c0       	rjmp	.+34     	; 0xb9c <vfprintf+0x10c>
 b7a:	ea e0       	ldi	r30, 0x0A	; 10
 b7c:	2e 9e       	mul	r2, r30
 b7e:	20 0d       	add	r18, r0
 b80:	11 24       	eor	r1, r1
 b82:	22 2e       	mov	r2, r18
 b84:	f3 2d       	mov	r31, r3
 b86:	f0 62       	ori	r31, 0x20	; 32
 b88:	3f 2e       	mov	r3, r31
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <vfprintf+0x10c>
 b8c:	8c 36       	cpi	r24, 0x6C	; 108
 b8e:	21 f4       	brne	.+8      	; 0xb98 <vfprintf+0x108>
 b90:	83 2d       	mov	r24, r3
 b92:	80 68       	ori	r24, 0x80	; 128
 b94:	38 2e       	mov	r3, r24
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <vfprintf+0x10c>
 b98:	88 36       	cpi	r24, 0x68	; 104
 b9a:	41 f4       	brne	.+16     	; 0xbac <vfprintf+0x11c>
 b9c:	f7 01       	movw	r30, r14
 b9e:	93 fd       	sbrc	r25, 3
 ba0:	85 91       	lpm	r24, Z+
 ba2:	93 ff       	sbrs	r25, 3
 ba4:	81 91       	ld	r24, Z+
 ba6:	7f 01       	movw	r14, r30
 ba8:	81 11       	cpse	r24, r1
 baa:	b3 cf       	rjmp	.-154    	; 0xb12 <vfprintf+0x82>
 bac:	98 2f       	mov	r25, r24
 bae:	9f 7d       	andi	r25, 0xDF	; 223
 bb0:	95 54       	subi	r25, 0x45	; 69
 bb2:	93 30       	cpi	r25, 0x03	; 3
 bb4:	28 f4       	brcc	.+10     	; 0xbc0 <vfprintf+0x130>
 bb6:	0c 5f       	subi	r16, 0xFC	; 252
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	9f e3       	ldi	r25, 0x3F	; 63
 bbc:	99 83       	std	Y+1, r25	; 0x01
 bbe:	0d c0       	rjmp	.+26     	; 0xbda <vfprintf+0x14a>
 bc0:	83 36       	cpi	r24, 0x63	; 99
 bc2:	31 f0       	breq	.+12     	; 0xbd0 <vfprintf+0x140>
 bc4:	83 37       	cpi	r24, 0x73	; 115
 bc6:	71 f0       	breq	.+28     	; 0xbe4 <vfprintf+0x154>
 bc8:	83 35       	cpi	r24, 0x53	; 83
 bca:	09 f0       	breq	.+2      	; 0xbce <vfprintf+0x13e>
 bcc:	55 c0       	rjmp	.+170    	; 0xc78 <vfprintf+0x1e8>
 bce:	20 c0       	rjmp	.+64     	; 0xc10 <vfprintf+0x180>
 bd0:	f8 01       	movw	r30, r16
 bd2:	80 81       	ld	r24, Z
 bd4:	89 83       	std	Y+1, r24	; 0x01
 bd6:	0e 5f       	subi	r16, 0xFE	; 254
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	88 24       	eor	r8, r8
 bdc:	83 94       	inc	r8
 bde:	91 2c       	mov	r9, r1
 be0:	53 01       	movw	r10, r6
 be2:	12 c0       	rjmp	.+36     	; 0xc08 <vfprintf+0x178>
 be4:	28 01       	movw	r4, r16
 be6:	f2 e0       	ldi	r31, 0x02	; 2
 be8:	4f 0e       	add	r4, r31
 bea:	51 1c       	adc	r5, r1
 bec:	f8 01       	movw	r30, r16
 bee:	a0 80       	ld	r10, Z
 bf0:	b1 80       	ldd	r11, Z+1	; 0x01
 bf2:	36 fe       	sbrs	r3, 6
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x16c>
 bf6:	69 2d       	mov	r22, r9
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x170>
 bfc:	6f ef       	ldi	r22, 0xFF	; 255
 bfe:	7f ef       	ldi	r23, 0xFF	; 255
 c00:	c5 01       	movw	r24, r10
 c02:	4e d1       	rcall	.+668    	; 0xea0 <strnlen>
 c04:	4c 01       	movw	r8, r24
 c06:	82 01       	movw	r16, r4
 c08:	f3 2d       	mov	r31, r3
 c0a:	ff 77       	andi	r31, 0x7F	; 127
 c0c:	3f 2e       	mov	r3, r31
 c0e:	15 c0       	rjmp	.+42     	; 0xc3a <vfprintf+0x1aa>
 c10:	28 01       	movw	r4, r16
 c12:	22 e0       	ldi	r18, 0x02	; 2
 c14:	42 0e       	add	r4, r18
 c16:	51 1c       	adc	r5, r1
 c18:	f8 01       	movw	r30, r16
 c1a:	a0 80       	ld	r10, Z
 c1c:	b1 80       	ldd	r11, Z+1	; 0x01
 c1e:	36 fe       	sbrs	r3, 6
 c20:	03 c0       	rjmp	.+6      	; 0xc28 <vfprintf+0x198>
 c22:	69 2d       	mov	r22, r9
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <vfprintf+0x19c>
 c28:	6f ef       	ldi	r22, 0xFF	; 255
 c2a:	7f ef       	ldi	r23, 0xFF	; 255
 c2c:	c5 01       	movw	r24, r10
 c2e:	2d d1       	rcall	.+602    	; 0xe8a <strnlen_P>
 c30:	4c 01       	movw	r8, r24
 c32:	f3 2d       	mov	r31, r3
 c34:	f0 68       	ori	r31, 0x80	; 128
 c36:	3f 2e       	mov	r3, r31
 c38:	82 01       	movw	r16, r4
 c3a:	33 fc       	sbrc	r3, 3
 c3c:	19 c0       	rjmp	.+50     	; 0xc70 <vfprintf+0x1e0>
 c3e:	82 2d       	mov	r24, r2
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	88 16       	cp	r8, r24
 c44:	99 06       	cpc	r9, r25
 c46:	a0 f4       	brcc	.+40     	; 0xc70 <vfprintf+0x1e0>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e2       	ldi	r24, 0x20	; 32
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	33 d1       	rcall	.+614    	; 0xeb6 <fputc>
 c50:	2a 94       	dec	r2
 c52:	f5 cf       	rjmp	.-22     	; 0xc3e <vfprintf+0x1ae>
 c54:	f5 01       	movw	r30, r10
 c56:	37 fc       	sbrc	r3, 7
 c58:	85 91       	lpm	r24, Z+
 c5a:	37 fe       	sbrs	r3, 7
 c5c:	81 91       	ld	r24, Z+
 c5e:	5f 01       	movw	r10, r30
 c60:	b6 01       	movw	r22, r12
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	28 d1       	rcall	.+592    	; 0xeb6 <fputc>
 c66:	21 10       	cpse	r2, r1
 c68:	2a 94       	dec	r2
 c6a:	21 e0       	ldi	r18, 0x01	; 1
 c6c:	82 1a       	sub	r8, r18
 c6e:	91 08       	sbc	r9, r1
 c70:	81 14       	cp	r8, r1
 c72:	91 04       	cpc	r9, r1
 c74:	79 f7       	brne	.-34     	; 0xc54 <vfprintf+0x1c4>
 c76:	e1 c0       	rjmp	.+450    	; 0xe3a <vfprintf+0x3aa>
 c78:	84 36       	cpi	r24, 0x64	; 100
 c7a:	11 f0       	breq	.+4      	; 0xc80 <vfprintf+0x1f0>
 c7c:	89 36       	cpi	r24, 0x69	; 105
 c7e:	39 f5       	brne	.+78     	; 0xcce <vfprintf+0x23e>
 c80:	f8 01       	movw	r30, r16
 c82:	37 fe       	sbrs	r3, 7
 c84:	07 c0       	rjmp	.+14     	; 0xc94 <vfprintf+0x204>
 c86:	60 81       	ld	r22, Z
 c88:	71 81       	ldd	r23, Z+1	; 0x01
 c8a:	82 81       	ldd	r24, Z+2	; 0x02
 c8c:	93 81       	ldd	r25, Z+3	; 0x03
 c8e:	0c 5f       	subi	r16, 0xFC	; 252
 c90:	1f 4f       	sbci	r17, 0xFF	; 255
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0x214>
 c94:	60 81       	ld	r22, Z
 c96:	71 81       	ldd	r23, Z+1	; 0x01
 c98:	07 2e       	mov	r0, r23
 c9a:	00 0c       	add	r0, r0
 c9c:	88 0b       	sbc	r24, r24
 c9e:	99 0b       	sbc	r25, r25
 ca0:	0e 5f       	subi	r16, 0xFE	; 254
 ca2:	1f 4f       	sbci	r17, 0xFF	; 255
 ca4:	f3 2d       	mov	r31, r3
 ca6:	ff 76       	andi	r31, 0x6F	; 111
 ca8:	3f 2e       	mov	r3, r31
 caa:	97 ff       	sbrs	r25, 7
 cac:	09 c0       	rjmp	.+18     	; 0xcc0 <vfprintf+0x230>
 cae:	90 95       	com	r25
 cb0:	80 95       	com	r24
 cb2:	70 95       	com	r23
 cb4:	61 95       	neg	r22
 cb6:	7f 4f       	sbci	r23, 0xFF	; 255
 cb8:	8f 4f       	sbci	r24, 0xFF	; 255
 cba:	9f 4f       	sbci	r25, 0xFF	; 255
 cbc:	f0 68       	ori	r31, 0x80	; 128
 cbe:	3f 2e       	mov	r3, r31
 cc0:	2a e0       	ldi	r18, 0x0A	; 10
 cc2:	30 e0       	ldi	r19, 0x00	; 0
 cc4:	a3 01       	movw	r20, r6
 cc6:	33 d1       	rcall	.+614    	; 0xf2e <__ultoa_invert>
 cc8:	88 2e       	mov	r8, r24
 cca:	86 18       	sub	r8, r6
 ccc:	44 c0       	rjmp	.+136    	; 0xd56 <vfprintf+0x2c6>
 cce:	85 37       	cpi	r24, 0x75	; 117
 cd0:	31 f4       	brne	.+12     	; 0xcde <vfprintf+0x24e>
 cd2:	23 2d       	mov	r18, r3
 cd4:	2f 7e       	andi	r18, 0xEF	; 239
 cd6:	b2 2e       	mov	r11, r18
 cd8:	2a e0       	ldi	r18, 0x0A	; 10
 cda:	30 e0       	ldi	r19, 0x00	; 0
 cdc:	25 c0       	rjmp	.+74     	; 0xd28 <vfprintf+0x298>
 cde:	93 2d       	mov	r25, r3
 ce0:	99 7f       	andi	r25, 0xF9	; 249
 ce2:	b9 2e       	mov	r11, r25
 ce4:	8f 36       	cpi	r24, 0x6F	; 111
 ce6:	c1 f0       	breq	.+48     	; 0xd18 <vfprintf+0x288>
 ce8:	18 f4       	brcc	.+6      	; 0xcf0 <vfprintf+0x260>
 cea:	88 35       	cpi	r24, 0x58	; 88
 cec:	79 f0       	breq	.+30     	; 0xd0c <vfprintf+0x27c>
 cee:	ae c0       	rjmp	.+348    	; 0xe4c <vfprintf+0x3bc>
 cf0:	80 37       	cpi	r24, 0x70	; 112
 cf2:	19 f0       	breq	.+6      	; 0xcfa <vfprintf+0x26a>
 cf4:	88 37       	cpi	r24, 0x78	; 120
 cf6:	21 f0       	breq	.+8      	; 0xd00 <vfprintf+0x270>
 cf8:	a9 c0       	rjmp	.+338    	; 0xe4c <vfprintf+0x3bc>
 cfa:	e9 2f       	mov	r30, r25
 cfc:	e0 61       	ori	r30, 0x10	; 16
 cfe:	be 2e       	mov	r11, r30
 d00:	b4 fe       	sbrs	r11, 4
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <vfprintf+0x28e>
 d04:	fb 2d       	mov	r31, r11
 d06:	f4 60       	ori	r31, 0x04	; 4
 d08:	bf 2e       	mov	r11, r31
 d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x28e>
 d0c:	34 fe       	sbrs	r3, 4
 d0e:	0a c0       	rjmp	.+20     	; 0xd24 <vfprintf+0x294>
 d10:	29 2f       	mov	r18, r25
 d12:	26 60       	ori	r18, 0x06	; 6
 d14:	b2 2e       	mov	r11, r18
 d16:	06 c0       	rjmp	.+12     	; 0xd24 <vfprintf+0x294>
 d18:	28 e0       	ldi	r18, 0x08	; 8
 d1a:	30 e0       	ldi	r19, 0x00	; 0
 d1c:	05 c0       	rjmp	.+10     	; 0xd28 <vfprintf+0x298>
 d1e:	20 e1       	ldi	r18, 0x10	; 16
 d20:	30 e0       	ldi	r19, 0x00	; 0
 d22:	02 c0       	rjmp	.+4      	; 0xd28 <vfprintf+0x298>
 d24:	20 e1       	ldi	r18, 0x10	; 16
 d26:	32 e0       	ldi	r19, 0x02	; 2
 d28:	f8 01       	movw	r30, r16
 d2a:	b7 fe       	sbrs	r11, 7
 d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x2ac>
 d2e:	60 81       	ld	r22, Z
 d30:	71 81       	ldd	r23, Z+1	; 0x01
 d32:	82 81       	ldd	r24, Z+2	; 0x02
 d34:	93 81       	ldd	r25, Z+3	; 0x03
 d36:	0c 5f       	subi	r16, 0xFC	; 252
 d38:	1f 4f       	sbci	r17, 0xFF	; 255
 d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x2b8>
 d3c:	60 81       	ld	r22, Z
 d3e:	71 81       	ldd	r23, Z+1	; 0x01
 d40:	80 e0       	ldi	r24, 0x00	; 0
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 5f       	subi	r16, 0xFE	; 254
 d46:	1f 4f       	sbci	r17, 0xFF	; 255
 d48:	a3 01       	movw	r20, r6
 d4a:	f1 d0       	rcall	.+482    	; 0xf2e <__ultoa_invert>
 d4c:	88 2e       	mov	r8, r24
 d4e:	86 18       	sub	r8, r6
 d50:	fb 2d       	mov	r31, r11
 d52:	ff 77       	andi	r31, 0x7F	; 127
 d54:	3f 2e       	mov	r3, r31
 d56:	36 fe       	sbrs	r3, 6
 d58:	0d c0       	rjmp	.+26     	; 0xd74 <vfprintf+0x2e4>
 d5a:	23 2d       	mov	r18, r3
 d5c:	2e 7f       	andi	r18, 0xFE	; 254
 d5e:	a2 2e       	mov	r10, r18
 d60:	89 14       	cp	r8, r9
 d62:	58 f4       	brcc	.+22     	; 0xd7a <vfprintf+0x2ea>
 d64:	34 fe       	sbrs	r3, 4
 d66:	0b c0       	rjmp	.+22     	; 0xd7e <vfprintf+0x2ee>
 d68:	32 fc       	sbrc	r3, 2
 d6a:	09 c0       	rjmp	.+18     	; 0xd7e <vfprintf+0x2ee>
 d6c:	83 2d       	mov	r24, r3
 d6e:	8e 7e       	andi	r24, 0xEE	; 238
 d70:	a8 2e       	mov	r10, r24
 d72:	05 c0       	rjmp	.+10     	; 0xd7e <vfprintf+0x2ee>
 d74:	b8 2c       	mov	r11, r8
 d76:	a3 2c       	mov	r10, r3
 d78:	03 c0       	rjmp	.+6      	; 0xd80 <vfprintf+0x2f0>
 d7a:	b8 2c       	mov	r11, r8
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <vfprintf+0x2f0>
 d7e:	b9 2c       	mov	r11, r9
 d80:	a4 fe       	sbrs	r10, 4
 d82:	0f c0       	rjmp	.+30     	; 0xda2 <vfprintf+0x312>
 d84:	fe 01       	movw	r30, r28
 d86:	e8 0d       	add	r30, r8
 d88:	f1 1d       	adc	r31, r1
 d8a:	80 81       	ld	r24, Z
 d8c:	80 33       	cpi	r24, 0x30	; 48
 d8e:	21 f4       	brne	.+8      	; 0xd98 <vfprintf+0x308>
 d90:	9a 2d       	mov	r25, r10
 d92:	99 7e       	andi	r25, 0xE9	; 233
 d94:	a9 2e       	mov	r10, r25
 d96:	09 c0       	rjmp	.+18     	; 0xdaa <vfprintf+0x31a>
 d98:	a2 fe       	sbrs	r10, 2
 d9a:	06 c0       	rjmp	.+12     	; 0xda8 <vfprintf+0x318>
 d9c:	b3 94       	inc	r11
 d9e:	b3 94       	inc	r11
 da0:	04 c0       	rjmp	.+8      	; 0xdaa <vfprintf+0x31a>
 da2:	8a 2d       	mov	r24, r10
 da4:	86 78       	andi	r24, 0x86	; 134
 da6:	09 f0       	breq	.+2      	; 0xdaa <vfprintf+0x31a>
 da8:	b3 94       	inc	r11
 daa:	a3 fc       	sbrc	r10, 3
 dac:	10 c0       	rjmp	.+32     	; 0xdce <vfprintf+0x33e>
 dae:	a0 fe       	sbrs	r10, 0
 db0:	06 c0       	rjmp	.+12     	; 0xdbe <vfprintf+0x32e>
 db2:	b2 14       	cp	r11, r2
 db4:	80 f4       	brcc	.+32     	; 0xdd6 <vfprintf+0x346>
 db6:	28 0c       	add	r2, r8
 db8:	92 2c       	mov	r9, r2
 dba:	9b 18       	sub	r9, r11
 dbc:	0d c0       	rjmp	.+26     	; 0xdd8 <vfprintf+0x348>
 dbe:	b2 14       	cp	r11, r2
 dc0:	58 f4       	brcc	.+22     	; 0xdd8 <vfprintf+0x348>
 dc2:	b6 01       	movw	r22, r12
 dc4:	80 e2       	ldi	r24, 0x20	; 32
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	76 d0       	rcall	.+236    	; 0xeb6 <fputc>
 dca:	b3 94       	inc	r11
 dcc:	f8 cf       	rjmp	.-16     	; 0xdbe <vfprintf+0x32e>
 dce:	b2 14       	cp	r11, r2
 dd0:	18 f4       	brcc	.+6      	; 0xdd8 <vfprintf+0x348>
 dd2:	2b 18       	sub	r2, r11
 dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x34a>
 dd6:	98 2c       	mov	r9, r8
 dd8:	21 2c       	mov	r2, r1
 dda:	a4 fe       	sbrs	r10, 4
 ddc:	0f c0       	rjmp	.+30     	; 0xdfc <vfprintf+0x36c>
 dde:	b6 01       	movw	r22, r12
 de0:	80 e3       	ldi	r24, 0x30	; 48
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	68 d0       	rcall	.+208    	; 0xeb6 <fputc>
 de6:	a2 fe       	sbrs	r10, 2
 de8:	16 c0       	rjmp	.+44     	; 0xe16 <vfprintf+0x386>
 dea:	a1 fc       	sbrc	r10, 1
 dec:	03 c0       	rjmp	.+6      	; 0xdf4 <vfprintf+0x364>
 dee:	88 e7       	ldi	r24, 0x78	; 120
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	02 c0       	rjmp	.+4      	; 0xdf8 <vfprintf+0x368>
 df4:	88 e5       	ldi	r24, 0x58	; 88
 df6:	90 e0       	ldi	r25, 0x00	; 0
 df8:	b6 01       	movw	r22, r12
 dfa:	0c c0       	rjmp	.+24     	; 0xe14 <vfprintf+0x384>
 dfc:	8a 2d       	mov	r24, r10
 dfe:	86 78       	andi	r24, 0x86	; 134
 e00:	51 f0       	breq	.+20     	; 0xe16 <vfprintf+0x386>
 e02:	a1 fe       	sbrs	r10, 1
 e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0x37a>
 e06:	8b e2       	ldi	r24, 0x2B	; 43
 e08:	01 c0       	rjmp	.+2      	; 0xe0c <vfprintf+0x37c>
 e0a:	80 e2       	ldi	r24, 0x20	; 32
 e0c:	a7 fc       	sbrc	r10, 7
 e0e:	8d e2       	ldi	r24, 0x2D	; 45
 e10:	b6 01       	movw	r22, r12
 e12:	90 e0       	ldi	r25, 0x00	; 0
 e14:	50 d0       	rcall	.+160    	; 0xeb6 <fputc>
 e16:	89 14       	cp	r8, r9
 e18:	30 f4       	brcc	.+12     	; 0xe26 <vfprintf+0x396>
 e1a:	b6 01       	movw	r22, r12
 e1c:	80 e3       	ldi	r24, 0x30	; 48
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	4a d0       	rcall	.+148    	; 0xeb6 <fputc>
 e22:	9a 94       	dec	r9
 e24:	f8 cf       	rjmp	.-16     	; 0xe16 <vfprintf+0x386>
 e26:	8a 94       	dec	r8
 e28:	f3 01       	movw	r30, r6
 e2a:	e8 0d       	add	r30, r8
 e2c:	f1 1d       	adc	r31, r1
 e2e:	80 81       	ld	r24, Z
 e30:	b6 01       	movw	r22, r12
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	40 d0       	rcall	.+128    	; 0xeb6 <fputc>
 e36:	81 10       	cpse	r8, r1
 e38:	f6 cf       	rjmp	.-20     	; 0xe26 <vfprintf+0x396>
 e3a:	22 20       	and	r2, r2
 e3c:	09 f4       	brne	.+2      	; 0xe40 <vfprintf+0x3b0>
 e3e:	4e ce       	rjmp	.-868    	; 0xadc <vfprintf+0x4c>
 e40:	b6 01       	movw	r22, r12
 e42:	80 e2       	ldi	r24, 0x20	; 32
 e44:	90 e0       	ldi	r25, 0x00	; 0
 e46:	37 d0       	rcall	.+110    	; 0xeb6 <fputc>
 e48:	2a 94       	dec	r2
 e4a:	f7 cf       	rjmp	.-18     	; 0xe3a <vfprintf+0x3aa>
 e4c:	f6 01       	movw	r30, r12
 e4e:	86 81       	ldd	r24, Z+6	; 0x06
 e50:	97 81       	ldd	r25, Z+7	; 0x07
 e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x3c8>
 e54:	8f ef       	ldi	r24, 0xFF	; 255
 e56:	9f ef       	ldi	r25, 0xFF	; 255
 e58:	2b 96       	adiw	r28, 0x0b	; 11
 e5a:	0f b6       	in	r0, 0x3f	; 63
 e5c:	f8 94       	cli
 e5e:	de bf       	out	0x3e, r29	; 62
 e60:	0f be       	out	0x3f, r0	; 63
 e62:	cd bf       	out	0x3d, r28	; 61
 e64:	df 91       	pop	r29
 e66:	cf 91       	pop	r28
 e68:	1f 91       	pop	r17
 e6a:	0f 91       	pop	r16
 e6c:	ff 90       	pop	r15
 e6e:	ef 90       	pop	r14
 e70:	df 90       	pop	r13
 e72:	cf 90       	pop	r12
 e74:	bf 90       	pop	r11
 e76:	af 90       	pop	r10
 e78:	9f 90       	pop	r9
 e7a:	8f 90       	pop	r8
 e7c:	7f 90       	pop	r7
 e7e:	6f 90       	pop	r6
 e80:	5f 90       	pop	r5
 e82:	4f 90       	pop	r4
 e84:	3f 90       	pop	r3
 e86:	2f 90       	pop	r2
 e88:	08 95       	ret

00000e8a <strnlen_P>:
 e8a:	fc 01       	movw	r30, r24
 e8c:	05 90       	lpm	r0, Z+
 e8e:	61 50       	subi	r22, 0x01	; 1
 e90:	70 40       	sbci	r23, 0x00	; 0
 e92:	01 10       	cpse	r0, r1
 e94:	d8 f7       	brcc	.-10     	; 0xe8c <strnlen_P+0x2>
 e96:	80 95       	com	r24
 e98:	90 95       	com	r25
 e9a:	8e 0f       	add	r24, r30
 e9c:	9f 1f       	adc	r25, r31
 e9e:	08 95       	ret

00000ea0 <strnlen>:
 ea0:	fc 01       	movw	r30, r24
 ea2:	61 50       	subi	r22, 0x01	; 1
 ea4:	70 40       	sbci	r23, 0x00	; 0
 ea6:	01 90       	ld	r0, Z+
 ea8:	01 10       	cpse	r0, r1
 eaa:	d8 f7       	brcc	.-10     	; 0xea2 <strnlen+0x2>
 eac:	80 95       	com	r24
 eae:	90 95       	com	r25
 eb0:	8e 0f       	add	r24, r30
 eb2:	9f 1f       	adc	r25, r31
 eb4:	08 95       	ret

00000eb6 <fputc>:
 eb6:	0f 93       	push	r16
 eb8:	1f 93       	push	r17
 eba:	cf 93       	push	r28
 ebc:	df 93       	push	r29
 ebe:	fb 01       	movw	r30, r22
 ec0:	23 81       	ldd	r18, Z+3	; 0x03
 ec2:	21 fd       	sbrc	r18, 1
 ec4:	03 c0       	rjmp	.+6      	; 0xecc <fputc+0x16>
 ec6:	8f ef       	ldi	r24, 0xFF	; 255
 ec8:	9f ef       	ldi	r25, 0xFF	; 255
 eca:	2c c0       	rjmp	.+88     	; 0xf24 <fputc+0x6e>
 ecc:	22 ff       	sbrs	r18, 2
 ece:	16 c0       	rjmp	.+44     	; 0xefc <fputc+0x46>
 ed0:	46 81       	ldd	r20, Z+6	; 0x06
 ed2:	57 81       	ldd	r21, Z+7	; 0x07
 ed4:	24 81       	ldd	r18, Z+4	; 0x04
 ed6:	35 81       	ldd	r19, Z+5	; 0x05
 ed8:	42 17       	cp	r20, r18
 eda:	53 07       	cpc	r21, r19
 edc:	44 f4       	brge	.+16     	; 0xeee <fputc+0x38>
 ede:	a0 81       	ld	r26, Z
 ee0:	b1 81       	ldd	r27, Z+1	; 0x01
 ee2:	9d 01       	movw	r18, r26
 ee4:	2f 5f       	subi	r18, 0xFF	; 255
 ee6:	3f 4f       	sbci	r19, 0xFF	; 255
 ee8:	31 83       	std	Z+1, r19	; 0x01
 eea:	20 83       	st	Z, r18
 eec:	8c 93       	st	X, r24
 eee:	26 81       	ldd	r18, Z+6	; 0x06
 ef0:	37 81       	ldd	r19, Z+7	; 0x07
 ef2:	2f 5f       	subi	r18, 0xFF	; 255
 ef4:	3f 4f       	sbci	r19, 0xFF	; 255
 ef6:	37 83       	std	Z+7, r19	; 0x07
 ef8:	26 83       	std	Z+6, r18	; 0x06
 efa:	14 c0       	rjmp	.+40     	; 0xf24 <fputc+0x6e>
 efc:	8b 01       	movw	r16, r22
 efe:	ec 01       	movw	r28, r24
 f00:	fb 01       	movw	r30, r22
 f02:	00 84       	ldd	r0, Z+8	; 0x08
 f04:	f1 85       	ldd	r31, Z+9	; 0x09
 f06:	e0 2d       	mov	r30, r0
 f08:	09 95       	icall
 f0a:	89 2b       	or	r24, r25
 f0c:	e1 f6       	brne	.-72     	; 0xec6 <fputc+0x10>
 f0e:	d8 01       	movw	r26, r16
 f10:	16 96       	adiw	r26, 0x06	; 6
 f12:	8d 91       	ld	r24, X+
 f14:	9c 91       	ld	r25, X
 f16:	17 97       	sbiw	r26, 0x07	; 7
 f18:	01 96       	adiw	r24, 0x01	; 1
 f1a:	17 96       	adiw	r26, 0x07	; 7
 f1c:	9c 93       	st	X, r25
 f1e:	8e 93       	st	-X, r24
 f20:	16 97       	sbiw	r26, 0x06	; 6
 f22:	ce 01       	movw	r24, r28
 f24:	df 91       	pop	r29
 f26:	cf 91       	pop	r28
 f28:	1f 91       	pop	r17
 f2a:	0f 91       	pop	r16
 f2c:	08 95       	ret

00000f2e <__ultoa_invert>:
 f2e:	fa 01       	movw	r30, r20
 f30:	aa 27       	eor	r26, r26
 f32:	28 30       	cpi	r18, 0x08	; 8
 f34:	51 f1       	breq	.+84     	; 0xf8a <__ultoa_invert+0x5c>
 f36:	20 31       	cpi	r18, 0x10	; 16
 f38:	81 f1       	breq	.+96     	; 0xf9a <__ultoa_invert+0x6c>
 f3a:	e8 94       	clt
 f3c:	6f 93       	push	r22
 f3e:	6e 7f       	andi	r22, 0xFE	; 254
 f40:	6e 5f       	subi	r22, 0xFE	; 254
 f42:	7f 4f       	sbci	r23, 0xFF	; 255
 f44:	8f 4f       	sbci	r24, 0xFF	; 255
 f46:	9f 4f       	sbci	r25, 0xFF	; 255
 f48:	af 4f       	sbci	r26, 0xFF	; 255
 f4a:	b1 e0       	ldi	r27, 0x01	; 1
 f4c:	3e d0       	rcall	.+124    	; 0xfca <__ultoa_invert+0x9c>
 f4e:	b4 e0       	ldi	r27, 0x04	; 4
 f50:	3c d0       	rcall	.+120    	; 0xfca <__ultoa_invert+0x9c>
 f52:	67 0f       	add	r22, r23
 f54:	78 1f       	adc	r23, r24
 f56:	89 1f       	adc	r24, r25
 f58:	9a 1f       	adc	r25, r26
 f5a:	a1 1d       	adc	r26, r1
 f5c:	68 0f       	add	r22, r24
 f5e:	79 1f       	adc	r23, r25
 f60:	8a 1f       	adc	r24, r26
 f62:	91 1d       	adc	r25, r1
 f64:	a1 1d       	adc	r26, r1
 f66:	6a 0f       	add	r22, r26
 f68:	71 1d       	adc	r23, r1
 f6a:	81 1d       	adc	r24, r1
 f6c:	91 1d       	adc	r25, r1
 f6e:	a1 1d       	adc	r26, r1
 f70:	20 d0       	rcall	.+64     	; 0xfb2 <__ultoa_invert+0x84>
 f72:	09 f4       	brne	.+2      	; 0xf76 <__ultoa_invert+0x48>
 f74:	68 94       	set
 f76:	3f 91       	pop	r19
 f78:	2a e0       	ldi	r18, 0x0A	; 10
 f7a:	26 9f       	mul	r18, r22
 f7c:	11 24       	eor	r1, r1
 f7e:	30 19       	sub	r19, r0
 f80:	30 5d       	subi	r19, 0xD0	; 208
 f82:	31 93       	st	Z+, r19
 f84:	de f6       	brtc	.-74     	; 0xf3c <__ultoa_invert+0xe>
 f86:	cf 01       	movw	r24, r30
 f88:	08 95       	ret
 f8a:	46 2f       	mov	r20, r22
 f8c:	47 70       	andi	r20, 0x07	; 7
 f8e:	40 5d       	subi	r20, 0xD0	; 208
 f90:	41 93       	st	Z+, r20
 f92:	b3 e0       	ldi	r27, 0x03	; 3
 f94:	0f d0       	rcall	.+30     	; 0xfb4 <__ultoa_invert+0x86>
 f96:	c9 f7       	brne	.-14     	; 0xf8a <__ultoa_invert+0x5c>
 f98:	f6 cf       	rjmp	.-20     	; 0xf86 <__ultoa_invert+0x58>
 f9a:	46 2f       	mov	r20, r22
 f9c:	4f 70       	andi	r20, 0x0F	; 15
 f9e:	40 5d       	subi	r20, 0xD0	; 208
 fa0:	4a 33       	cpi	r20, 0x3A	; 58
 fa2:	18 f0       	brcs	.+6      	; 0xfaa <__ultoa_invert+0x7c>
 fa4:	49 5d       	subi	r20, 0xD9	; 217
 fa6:	31 fd       	sbrc	r19, 1
 fa8:	40 52       	subi	r20, 0x20	; 32
 faa:	41 93       	st	Z+, r20
 fac:	02 d0       	rcall	.+4      	; 0xfb2 <__ultoa_invert+0x84>
 fae:	a9 f7       	brne	.-22     	; 0xf9a <__ultoa_invert+0x6c>
 fb0:	ea cf       	rjmp	.-44     	; 0xf86 <__ultoa_invert+0x58>
 fb2:	b4 e0       	ldi	r27, 0x04	; 4
 fb4:	a6 95       	lsr	r26
 fb6:	97 95       	ror	r25
 fb8:	87 95       	ror	r24
 fba:	77 95       	ror	r23
 fbc:	67 95       	ror	r22
 fbe:	ba 95       	dec	r27
 fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0x86>
 fc2:	00 97       	sbiw	r24, 0x00	; 0
 fc4:	61 05       	cpc	r22, r1
 fc6:	71 05       	cpc	r23, r1
 fc8:	08 95       	ret
 fca:	9b 01       	movw	r18, r22
 fcc:	ac 01       	movw	r20, r24
 fce:	0a 2e       	mov	r0, r26
 fd0:	06 94       	lsr	r0
 fd2:	57 95       	ror	r21
 fd4:	47 95       	ror	r20
 fd6:	37 95       	ror	r19
 fd8:	27 95       	ror	r18
 fda:	ba 95       	dec	r27
 fdc:	c9 f7       	brne	.-14     	; 0xfd0 <__ultoa_invert+0xa2>
 fde:	62 0f       	add	r22, r18
 fe0:	73 1f       	adc	r23, r19
 fe2:	84 1f       	adc	r24, r20
 fe4:	95 1f       	adc	r25, r21
 fe6:	a0 1d       	adc	r26, r0
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>
