
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  00000bd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c3f  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d4  00000000  00000000  00002a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020c5  00000000  00000000  00003d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00005dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a3fc  00000000  00000000  000060d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000704  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00010bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004629  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	76 c1       	rjmp	.+748    	; 0x332 <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ea e1       	ldi	r30, 0x1A	; 26
  ac:	fb e0       	ldi	r31, 0x0B	; 11
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 32       	cpi	r26, 0x24	; 36
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a4 e2       	ldi	r26, 0x24	; 36
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 37       	cpi	r26, 0x71	; 113
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	15 d1       	rcall	.+554    	; 0x2fa <main>
  d0:	22 c5       	rjmp	.+2628   	; 0xb16 <_exit>

000000d2 <__bad_interrupt>:
  d2:	17 c1       	rjmp	.+558    	; 0x302 <__vector_default>

000000d4 <ADC_Init>:
#include "string.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  d6:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
  d8:	eb e7       	ldi	r30, 0x7B	; 123
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
  f2:	ac e7       	ldi	r26, 0x7C	; 124
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	81 64       	ori	r24, 0x41	; 65
  fa:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
  fc:	80 81       	ld	r24, Z
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 102:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 104:	08 95       	ret

00000106 <__vector_29>:
	}
}

ISR(ADC_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
	    g_ADCResultl = ADCL;
 114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <g_ADCResultl+0x1>
 11e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <g_ADCResultl>
		g_ADCResulth = ADCH;
 122:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <g_ADCResulth+0x1>
 12c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <g_ADCResulth>
	    g_ADCFlag = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <g_ADCFlag>
	
}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <C_Blinky>:
}
void C_Picky(void *arg)
{
	//flashing the top 4 leds of the led bank
	(uint8_t) arg;
	PORTC = arg;
 144:	88 b1       	in	r24, 0x08	; 8
 146:	80 95       	com	r24
 148:	88 b9       	out	0x08, r24	; 8
 14a:	08 95       	ret

0000014c <Do_Nothing>:
}
void Do_Nothing(void *arg)
{
	(void) arg;
	delay_flag = -1;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	9f ef       	ldi	r25, 0xFF	; 255
 150:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <delay_flag+0x1>
 154:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <delay_flag>
 158:	08 95       	ret

0000015a <DATAACQ>:
 */ 

#include "DATAACQ.h"

void DATAACQ()
{
 15a:	af 92       	push	r10
 15c:	bf 92       	push	r11
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	c2 5c       	subi	r28, 0xC2	; 194
 174:	db 40       	sbci	r29, 0x0B	; 11
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
	
cli();
 180:	f8 94       	cli
CLKPR = (1<<CLKPCE);
 182:	e1 e6       	ldi	r30, 0x61	; 97
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	80 83       	st	Z, r24
CLKPR = 0;
 18a:	10 82       	st	Z, r1
UART_Init();
 18c:	c3 d1       	rcall	.+902    	; 0x514 <UART_Init>
GPIO_Init();
 18e:	aa d0       	rcall	.+340    	; 0x2e4 <GPIO_Init>
 190:	8f ef       	ldi	r24, 0xFF	; 255
stepper_handle = -1;
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <stepper_handle+0x1>
 198:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <stepper_handle>
 19c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <timer_handle+0x1>
timer_handle = -1;
 1a0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <timer_handle>
 1a4:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <delay_flag+0x1>
delay_flag = -1;
 1a8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <delay_flag>
if (Timer_Init() != 0) UART_SendString("TIMER DID NOT INITIALIZE"); //red leds error
 1ac:	26 d1       	rcall	.+588    	; 0x3fa <Timer_Init>
 1ae:	89 2b       	or	r24, r25
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <DATAACQ+0x5e>
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 e0       	ldi	r25, 0x01	; 1
//Stepper_Setup();
PWM_Init();
 1b6:	c6 d1       	rcall	.+908    	; 0x544 <UART_SendString>
 1b8:	b3 d0       	rcall	.+358    	; 0x320 <PWM_Init>
ADC_Init();
 1ba:	8c df       	rcall	.-232    	; 0xd4 <ADC_Init>
 1bc:	78 94       	sei

sei();        // Enable global interrupts
 1be:	40 e0       	ldi	r20, 0x00	; 0
uint16_t data[1500];
char datao[10];
int memory = 2;
size_t i = 0;
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	82 e0       	ldi	r24, 0x02	; 2
ADC_Init();

sei();        // Enable global interrupts
uint16_t data[1500];
char datao[10];
int memory = 2;
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	30 ef       	ldi	r19, 0xF0	; 240
size_t i = 0;
while(memory)
{
	
	if ((PINE & 0x40) == 0x40) PORTC = 0xF0;
 1c8:	7f e0       	ldi	r23, 0x0F	; 15
	if ((PINE & 0x40) == 0x00) PORTC = 0x0F;
 1ca:	61 ef       	ldi	r22, 0xF1	; 241
	if((PIND & 0x01) == 0){
		PORTB = ~0x0F;
		} else {
		PORTB = ~0x0E;
 1cc:	ee 24       	eor	r14, r14
 1ce:	e3 94       	inc	r14
 1d0:	f1 2c       	mov	r15, r1
 1d2:	aa e7       	ldi	r26, 0x7A	; 122
		if (g_ADCFlag && ((PINE & 0x40) == 0x40))
		{
			memory = 1;
			g_ADCFlag = 0x00; //Clear ADC flag
			data[i++] = ((g_ADCResulth<<8) | g_ADCResultl);
			ADCSRA |= _BV(ADSC);
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <DATAACQ+0x88>
 1d8:	8e 2d       	mov	r24, r14
 1da:	9f 2d       	mov	r25, r15
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DATAACQ+0x88>
 1de:	8e 2d       	mov	r24, r14
 1e0:	9f 2d       	mov	r25, r15
 1e2:	66 99       	sbic	0x0c, 6	; 12
int memory = 2;
size_t i = 0;
while(memory)
{
	
	if ((PINE & 0x40) == 0x40) PORTC = 0xF0;
 1e4:	38 b9       	out	0x08, r19	; 8
 1e6:	66 9b       	sbis	0x0c, 6	; 12
	if ((PINE & 0x40) == 0x00) PORTC = 0x0F;
 1e8:	78 b9       	out	0x08, r23	; 8
 1ea:	48 99       	sbic	0x09, 0	; 9
	if((PIND & 0x01) == 0){
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DATAACQ+0x98>
 1ee:	35 b9       	out	0x05, r19	; 5
		PORTB = ~0x0F;
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <DATAACQ+0x9a>
 1f2:	65 b9       	out	0x05, r22	; 5
		} else {
		PORTB = ~0x0E;
 1f4:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <g_ADCFlag>
		}
		if (g_ADCFlag && ((PINE & 0x40) == 0x40))
 1f8:	22 23       	and	r18, r18
 1fa:	11 f1       	breq	.+68     	; 0x240 <DATAACQ+0xe6>
 1fc:	66 9b       	sbis	0x0c, 6	; 12
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <DATAACQ+0xe6>
 200:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <g_ADCFlag>
		{
			memory = 1;
			g_ADCFlag = 0x00; //Clear ADC flag
 204:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <g_ADCResulth>
			data[i++] = ((g_ADCResulth<<8) | g_ADCResultl);
 208:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <g_ADCResulth+0x1>
 20c:	00 91 6f 01 	lds	r16, 0x016F	; 0x80016f <g_ADCResultl>
 210:	10 91 70 01 	lds	r17, 0x0170	; 0x800170 <g_ADCResultl+0x1>
 214:	fa 01       	movw	r30, r20
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	cc 24       	eor	r12, r12
 21c:	c3 94       	inc	r12
 21e:	d1 2c       	mov	r13, r1
 220:	cc 0e       	add	r12, r28
 222:	dd 1e       	adc	r13, r29
 224:	ec 0d       	add	r30, r12
 226:	fd 1d       	adc	r31, r13
 228:	98 2f       	mov	r25, r24
 22a:	88 27       	eor	r24, r24
 22c:	80 2b       	or	r24, r16
 22e:	91 2b       	or	r25, r17
 230:	91 83       	std	Z+1, r25	; 0x01
 232:	80 83       	st	Z, r24
 234:	8c 91       	ld	r24, X
			ADCSRA |= _BV(ADSC);
 236:	80 64       	ori	r24, 0x40	; 64
 238:	8c 93       	st	X, r24
 23a:	4f 5f       	subi	r20, 0xFF	; 255
		}
		if (g_ADCFlag && ((PINE & 0x40) == 0x40))
		{
			memory = 1;
			g_ADCFlag = 0x00; //Clear ADC flag
			data[i++] = ((g_ADCResulth<<8) | g_ADCResultl);
 23c:	5f 4f       	sbci	r21, 0xFF	; 255
 23e:	03 c0       	rjmp	.+6      	; 0x246 <DATAACQ+0xec>
 240:	81 30       	cpi	r24, 0x01	; 1
			ADCSRA |= _BV(ADSC);
		}
		if ((memory == 1) && ((PINE & 0x40) == 0) && ((PIND & 0x01) == 0x01)){
 242:	91 05       	cpc	r25, r1
 244:	a1 f5       	brne	.+104    	; 0x2ae <DATAACQ+0x154>
 246:	66 99       	sbic	0x0c, 6	; 12
 248:	c7 cf       	rjmp	.-114    	; 0x1d8 <DATAACQ+0x7e>
 24a:	48 9b       	sbis	0x09, 0	; 9
 24c:	c8 cf       	rjmp	.-112    	; 0x1de <DATAACQ+0x84>
 24e:	80 ef       	ldi	r24, 0xF0	; 240
			PORTB = ~0x0f;
 250:	85 b9       	out	0x05, r24	; 5
 252:	8e 01       	movw	r16, r28
 254:	0f 5f       	subi	r16, 0xFF	; 255
 256:	1f 4f       	sbci	r17, 0xFF	; 255
 258:	7e 01       	movw	r14, r28
 25a:	2f e8       	ldi	r18, 0x8F	; 143
 25c:	e2 1a       	sub	r14, r18
 25e:	28 ee       	ldi	r18, 0xE8	; 232
 260:	f2 0a       	sbc	r15, r18
 262:	0f 2e       	mov	r0, r31
			for (i = 0; i < sizeof(data); i++){
				if (data[i] < 1000) {
					sprintf(datao,"%d\r\n",data[i]);
 264:	f9 e1       	ldi	r31, 0x19	; 25
 266:	af 2e       	mov	r10, r31
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	bf 2e       	mov	r11, r31
 26c:	f0 2d       	mov	r31, r0
 26e:	6e 01       	movw	r12, r28
 270:	87 e4       	ldi	r24, 0x47	; 71
 272:	c8 1a       	sub	r12, r24
 274:	84 ef       	ldi	r24, 0xF4	; 244
 276:	d8 0a       	sbc	r13, r24
 278:	f8 01       	movw	r30, r16
			ADCSRA |= _BV(ADSC);
		}
		if ((memory == 1) && ((PINE & 0x40) == 0) && ((PIND & 0x01) == 0x01)){
			PORTB = ~0x0f;
			for (i = 0; i < sizeof(data); i++){
				if (data[i] < 1000) {
 27a:	81 91       	ld	r24, Z+
 27c:	91 91       	ld	r25, Z+
 27e:	8f 01       	movw	r16, r30
 280:	88 3e       	cpi	r24, 0xE8	; 232
 282:	f3 e0       	ldi	r31, 0x03	; 3
 284:	9f 07       	cpc	r25, r31
 286:	78 f4       	brcc	.+30     	; 0x2a6 <DATAACQ+0x14c>
 288:	9f 93       	push	r25
					sprintf(datao,"%d\r\n",data[i]);
 28a:	8f 93       	push	r24
 28c:	bf 92       	push	r11
 28e:	af 92       	push	r10
 290:	df 92       	push	r13
 292:	cf 92       	push	r12
 294:	65 d1       	rcall	.+714    	; 0x560 <sprintf>
					UART_SendString(datao);
 296:	c6 01       	movw	r24, r12
 298:	55 d1       	rcall	.+682    	; 0x544 <UART_SendString>
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	e0 16       	cp	r14, r16
			data[i++] = ((g_ADCResulth<<8) | g_ADCResultl);
			ADCSRA |= _BV(ADSC);
		}
		if ((memory == 1) && ((PINE & 0x40) == 0) && ((PIND & 0x01) == 0x01)){
			PORTB = ~0x0f;
			for (i = 0; i < sizeof(data); i++){
 2a8:	f1 06       	cpc	r15, r17
 2aa:	31 f7       	brne	.-52     	; 0x278 <DATAACQ+0x11e>
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <DATAACQ+0x15a>
sei();        // Enable global interrupts
uint16_t data[1500];
char datao[10];
int memory = 2;
size_t i = 0;
while(memory)
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <DATAACQ+0x15a>
			}
			i = 0;
			memory = 0;
		}
	}
	Delay_Create(8000);
 2b2:	97 cf       	rjmp	.-210    	; 0x1e2 <DATAACQ+0x88>
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	9f e1       	ldi	r25, 0x1F	; 31
 2b8:	1b d1       	rcall	.+566    	; 0x4f0 <Delay_Create>
	UART_SendString("end\r\n");
 2ba:	8e e1       	ldi	r24, 0x1E	; 30
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	42 d1       	rcall	.+644    	; 0x544 <UART_SendString>
 2c0:	ce 53       	subi	r28, 0x3E	; 62

 2c2:	d4 4f       	sbci	r29, 0xF4	; 244
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	bf 90       	pop	r11
 2e0:	af 90       	pop	r10
 2e2:	08 95       	ret

000002e4 <GPIO_Init>:
#include "gpio.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
 2e8:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
 2ea:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
 2ec:	80 ef       	ldi	r24, 0xF0	; 240
 2ee:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 2f0:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
 2f2:	10 ba       	out	0x10, r1	; 16



    return 0;
}
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret

000002fa <main>:

int main(void)
{	
	
#if DATAMODE == 1
	DATAACQ();
 2fa:	2f df       	rcall	.-418    	; 0x15a <DATAACQ>

	}
	Delay_Create(8000);
	UART_SendString("end\r\n");
	return 0;
}
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 95       	ret

00000302 <__vector_default>:

ISR(BADISR_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
	while(1)
	{
		Timer_Create(4000, 1, C_Blinky, NULL);
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	42 ea       	ldi	r20, 0xA2	; 162
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 ea       	ldi	r24, 0xA0	; 160
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	8a d0       	rcall	.+276    	; 0x432 <Timer_Create>
 31e:	f6 cf       	rjmp	.-20     	; 0x30c <__vector_default+0xa>

00000320 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
 320:	84 b5       	in	r24, 0x24	; 36
 322:	83 68       	ori	r24, 0x83	; 131
 324:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
 326:	85 b5       	in	r24, 0x25	; 37
 328:	83 60       	ori	r24, 0x03	; 3
 32a:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
 32c:	80 e8       	ldi	r24, 0x80	; 128
 32e:	87 bd       	out	0x27, r24	; 39
 330:	08 95       	ret

00000332 <__vector_17>:

static struct timer _timer[MAX_TIMERS];
static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	_timer_tick++;
 364:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 368:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 372:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 376:	c6 e2       	ldi	r28, 0x26	; 38
 378:	d1 e0       	ldi	r29, 0x01	; 1
 37a:	0f 2e       	mov	r0, r31
 37c:	f6 e6       	ldi	r31, 0x66	; 102
 37e:	ef 2e       	mov	r14, r31
 380:	f1 e0       	ldi	r31, 0x01	; 1
 382:	ff 2e       	mov	r15, r31
 384:	f0 2d       	mov	r31, r0
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
 386:	ec 81       	ldd	r30, Y+4	; 0x04
 388:	fd 81       	ldd	r31, Y+5	; 0x05
 38a:	30 97       	sbiw	r30, 0x00	; 0
 38c:	c9 f0       	breq	.+50     	; 0x3c0 <__vector_17+0x8e>
 38e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 392:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 396:	28 81       	ld	r18, Y
 398:	39 81       	ldd	r19, Y+1	; 0x01
 39a:	28 17       	cp	r18, r24
 39c:	39 07       	cpc	r19, r25
 39e:	81 f4       	brne	.+32     	; 0x3c0 <__vector_17+0x8e>
			_timer[i].callback(_timer[i].arg);
 3a0:	8e 81       	ldd	r24, Y+6	; 0x06
 3a2:	9f 81       	ldd	r25, Y+7	; 0x07
 3a4:	09 95       	icall
			//_timer_tick = 0;
			//PORTD = 0xF0;
			if (_timer[i].periodic > 0) {
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	9b 81       	ldd	r25, Y+3	; 0x03
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	39 f0       	breq	.+14     	; 0x3bc <__vector_17+0x8a>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
 3ae:	28 81       	ld	r18, Y
 3b0:	39 81       	ldd	r19, Y+1	; 0x01
 3b2:	82 0f       	add	r24, r18
 3b4:	93 1f       	adc	r25, r19
 3b6:	99 83       	std	Y+1, r25	; 0x01
 3b8:	88 83       	st	Y, r24
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <__vector_17+0x8e>
				} else {
				/* If timer is not periodic, clear the callback to disable */
				_timer[i].callback = NULL;
 3bc:	1d 82       	std	Y+5, r1	; 0x05
 3be:	1c 82       	std	Y+4, r1	; 0x04
 3c0:	28 96       	adiw	r28, 0x08	; 8
{
	_timer_tick++;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
 3c2:	ce 15       	cp	r28, r14
 3c4:	df 05       	cpc	r29, r15
 3c6:	f9 f6       	brne	.-66     	; 0x386 <__vector_17+0x54>
			}
		}
	}
	//PORTD = 0xF0;
	//TCNT1 = 0x0000;   // for 1 sec at 16 MHz
}
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	0f 90       	pop	r0
 3ee:	0b be       	out	0x3b, r0	; 59
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <Timer_Init>:


int Timer_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
 3fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 3fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x03E8;   // for 1 msec at 1 MHz
 402:	88 ee       	ldi	r24, 0xE8	; 232
 404:	93 e0       	ldi	r25, 0x03	; 3
 406:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 40a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
 40e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
 412:	89 e0       	ldi	r24, 0x09	; 9
 414:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
 41e:	80 e4       	ldi	r24, 0x40	; 64
 420:	e6 e2       	ldi	r30, 0x26	; 38
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	df 01       	movw	r26, r30
 426:	1d 92       	st	X+, r1
 428:	8a 95       	dec	r24
 42a:	e9 f7       	brne	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

	return 0;
}
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	08 95       	ret

00000432 <Timer_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int Timer_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ea 01       	movw	r28, r20
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
 438:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <_timer+0x4>
 43c:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <_timer+0x5>
 440:	45 2b       	or	r20, r21
 442:	09 f4       	brne	.+2      	; 0x446 <Timer_Create+0x14>
 444:	4b c0       	rjmp	.+150    	; 0x4dc <Timer_Create+0xaa>
 446:	a6 e2       	ldi	r26, 0x26	; 38
 448:	b1 e0       	ldi	r27, 0x01	; 1
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 44a:	e1 e0       	ldi	r30, 0x01	; 1
 44c:	f0 e0       	ldi	r31, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
 44e:	1c 96       	adiw	r26, 0x0c	; 12
 450:	4d 91       	ld	r20, X+
 452:	5c 91       	ld	r21, X
 454:	1d 97       	sbiw	r26, 0x0d	; 13
 456:	45 2b       	or	r20, r21
 458:	09 f4       	brne	.+2      	; 0x45c <Timer_Create+0x2a>
 45a:	42 c0       	rjmp	.+132    	; 0x4e0 <Timer_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 45c:	31 96       	adiw	r30, 0x01	; 1
 45e:	18 96       	adiw	r26, 0x08	; 8
 460:	e8 30       	cpi	r30, 0x08	; 8
 462:	f1 05       	cpc	r31, r1
 464:	a1 f7       	brne	.-24     	; 0x44e <Timer_Create+0x1c>
	handle = i;	
	return handle;
	}
	
	
    return 0;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	3f c0       	rjmp	.+126    	; 0x4ea <Timer_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
 46c:	df 01       	movw	r26, r30
 46e:	aa 0f       	add	r26, r26
 470:	bb 1f       	adc	r27, r27
 472:	aa 0f       	add	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	aa 0f       	add	r26, r26
 478:	bb 1f       	adc	r27, r27
 47a:	aa 5d       	subi	r26, 0xDA	; 218
 47c:	be 4f       	sbci	r27, 0xFE	; 254
 47e:	13 96       	adiw	r26, 0x03	; 3
 480:	9c 93       	st	X, r25
 482:	8e 93       	st	-X, r24
 484:	12 97       	sbiw	r26, 0x02	; 2
 486:	0d c0       	rjmp	.+26     	; 0x4a2 <Timer_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
 488:	df 01       	movw	r26, r30
 48a:	aa 0f       	add	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	aa 0f       	add	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	aa 0f       	add	r26, r26
 494:	bb 1f       	adc	r27, r27
 496:	aa 5d       	subi	r26, 0xDA	; 218
 498:	be 4f       	sbci	r27, 0xFE	; 254
 49a:	13 96       	adiw	r26, 0x03	; 3
 49c:	1c 92       	st	X, r1
 49e:	1e 92       	st	-X, r1
 4a0:	12 97       	sbiw	r26, 0x02	; 2
			}
			
			_timer[i].callback = callback;
 4a2:	df 01       	movw	r26, r30
 4a4:	aa 0f       	add	r26, r26
 4a6:	bb 1f       	adc	r27, r27
 4a8:	aa 0f       	add	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	aa 0f       	add	r26, r26
 4ae:	bb 1f       	adc	r27, r27
 4b0:	aa 5d       	subi	r26, 0xDA	; 218
 4b2:	be 4f       	sbci	r27, 0xFE	; 254
 4b4:	15 96       	adiw	r26, 0x05	; 5
 4b6:	dc 93       	st	X, r29
 4b8:	ce 93       	st	-X, r28
 4ba:	14 97       	sbiw	r26, 0x04	; 4
			_timer[i].arg = arg;
 4bc:	17 96       	adiw	r26, 0x07	; 7
 4be:	3c 93       	st	X, r19
 4c0:	2e 93       	st	-X, r18
 4c2:	16 97       	sbiw	r26, 0x06	; 6
			_timer[i].expiry = timeout_ms + _timer_tick;
 4c4:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
 4c8:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
 4cc:	82 0f       	add	r24, r18
 4ce:	93 1f       	adc	r25, r19
 4d0:	8d 93       	st	X+, r24
 4d2:	9c 93       	st	X, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 4d4:	5f bf       	out	0x3f, r21	; 63
			
		}
		
	handle = i;	
	return handle;
 4d6:	8e 2f       	mov	r24, r30
 4d8:	9f 2f       	mov	r25, r31
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <Timer_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 4dc:	e0 e0       	ldi	r30, 0x00	; 0
 4de:	f0 e0       	ldi	r31, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 4e0:	5f b7       	in	r21, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4e2:	f8 94       	cli
		{
			
			if (periodic != 0) 
 4e4:	67 2b       	or	r22, r23
 4e6:	11 f6       	brne	.-124    	; 0x46c <Timer_Create+0x3a>
 4e8:	cf cf       	rjmp	.-98     	; 0x488 <Timer_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <Delay_Create>:

void Delay_Create(uint16_t timeout_ms)
{
	delay_flag = Timer_Create(timeout_ms,0,Do_Nothing,NULL);
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	46 ea       	ldi	r20, 0xA6	; 166
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	9a df       	rcall	.-204    	; 0x432 <Timer_Create>
 4fe:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <delay_flag+0x1>
 502:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <delay_flag>
	
	while(delay_flag != -1);
 506:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <delay_flag>
 50a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <delay_flag+0x1>
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	d1 f7       	brne	.-12     	; 0x506 <Delay_Create+0x16>
}
 512:	08 95       	ret

00000514 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
 514:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
 518:	83 e3       	ldi	r24, 0x33	; 51
 51a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 51e:	e9 ec       	ldi	r30, 0xC9	; 201
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	88 61       	ori	r24, 0x18	; 24
 526:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 528:	ea ec       	ldi	r30, 0xCA	; 202
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	86 60       	ori	r24, 0x06	; 6
 530:	80 83       	st	Z, r24
 532:	08 95       	ret

00000534 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
 534:	e8 ec       	ldi	r30, 0xC8	; 200
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	90 81       	ld	r25, Z
 53a:	95 ff       	sbrs	r25, 5
 53c:	fd cf       	rjmp	.-6      	; 0x538 <UART_SendChar+0x4>
	UDR1 = c;
 53e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 542:	08 95       	ret

00000544 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 54a:	88 81       	ld	r24, Y
 54c:	88 23       	and	r24, r24
 54e:	29 f0       	breq	.+10     	; 0x55a <UART_SendString+0x16>
 550:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
 552:	f0 df       	rcall	.-32     	; 0x534 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 554:	89 91       	ld	r24, Y+
 556:	81 11       	cpse	r24, r1
 558:	fc cf       	rjmp	.-8      	; 0x552 <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <sprintf>:
 560:	0f 93       	push	r16
 562:	1f 93       	push	r17
 564:	cf 93       	push	r28
 566:	df 93       	push	r29
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	2e 97       	sbiw	r28, 0x0e	; 14
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	0d 89       	ldd	r16, Y+21	; 0x15
 57a:	1e 89       	ldd	r17, Y+22	; 0x16
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	8c 83       	std	Y+4, r24	; 0x04
 580:	1a 83       	std	Y+2, r17	; 0x02
 582:	09 83       	std	Y+1, r16	; 0x01
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	9f e7       	ldi	r25, 0x7F	; 127
 588:	9e 83       	std	Y+6, r25	; 0x06
 58a:	8d 83       	std	Y+5, r24	; 0x05
 58c:	ae 01       	movw	r20, r28
 58e:	47 5e       	subi	r20, 0xE7	; 231
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	6f 89       	ldd	r22, Y+23	; 0x17
 594:	78 8d       	ldd	r23, Y+24	; 0x18
 596:	ce 01       	movw	r24, r28
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	10 d0       	rcall	.+32     	; 0x5bc <vfprintf>
 59c:	ef 81       	ldd	r30, Y+7	; 0x07
 59e:	f8 85       	ldd	r31, Y+8	; 0x08
 5a0:	e0 0f       	add	r30, r16
 5a2:	f1 1f       	adc	r31, r17
 5a4:	10 82       	st	Z, r1
 5a6:	2e 96       	adiw	r28, 0x0e	; 14
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	f8 94       	cli
 5ac:	de bf       	out	0x3e, r29	; 62
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	cd bf       	out	0x3d, r28	; 61
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <vfprintf>:
 5bc:	2f 92       	push	r2
 5be:	3f 92       	push	r3
 5c0:	4f 92       	push	r4
 5c2:	5f 92       	push	r5
 5c4:	6f 92       	push	r6
 5c6:	7f 92       	push	r7
 5c8:	8f 92       	push	r8
 5ca:	9f 92       	push	r9
 5cc:	af 92       	push	r10
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
 5e4:	2b 97       	sbiw	r28, 0x0b	; 11
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	6c 01       	movw	r12, r24
 5f2:	7b 01       	movw	r14, r22
 5f4:	8a 01       	movw	r16, r20
 5f6:	fc 01       	movw	r30, r24
 5f8:	17 82       	std	Z+7, r1	; 0x07
 5fa:	16 82       	std	Z+6, r1	; 0x06
 5fc:	83 81       	ldd	r24, Z+3	; 0x03
 5fe:	81 ff       	sbrs	r24, 1
 600:	bf c1       	rjmp	.+894    	; 0x980 <vfprintf+0x3c4>
 602:	ce 01       	movw	r24, r28
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	3c 01       	movw	r6, r24
 608:	f6 01       	movw	r30, r12
 60a:	93 81       	ldd	r25, Z+3	; 0x03
 60c:	f7 01       	movw	r30, r14
 60e:	93 fd       	sbrc	r25, 3
 610:	85 91       	lpm	r24, Z+
 612:	93 ff       	sbrs	r25, 3
 614:	81 91       	ld	r24, Z+
 616:	7f 01       	movw	r14, r30
 618:	88 23       	and	r24, r24
 61a:	09 f4       	brne	.+2      	; 0x61e <vfprintf+0x62>
 61c:	ad c1       	rjmp	.+858    	; 0x978 <vfprintf+0x3bc>
 61e:	85 32       	cpi	r24, 0x25	; 37
 620:	39 f4       	brne	.+14     	; 0x630 <vfprintf+0x74>
 622:	93 fd       	sbrc	r25, 3
 624:	85 91       	lpm	r24, Z+
 626:	93 ff       	sbrs	r25, 3
 628:	81 91       	ld	r24, Z+
 62a:	7f 01       	movw	r14, r30
 62c:	85 32       	cpi	r24, 0x25	; 37
 62e:	21 f4       	brne	.+8      	; 0x638 <vfprintf+0x7c>
 630:	b6 01       	movw	r22, r12
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	d6 d1       	rcall	.+940    	; 0x9e2 <fputc>
 636:	e8 cf       	rjmp	.-48     	; 0x608 <vfprintf+0x4c>
 638:	91 2c       	mov	r9, r1
 63a:	21 2c       	mov	r2, r1
 63c:	31 2c       	mov	r3, r1
 63e:	ff e1       	ldi	r31, 0x1F	; 31
 640:	f3 15       	cp	r31, r3
 642:	d8 f0       	brcs	.+54     	; 0x67a <vfprintf+0xbe>
 644:	8b 32       	cpi	r24, 0x2B	; 43
 646:	79 f0       	breq	.+30     	; 0x666 <vfprintf+0xaa>
 648:	38 f4       	brcc	.+14     	; 0x658 <vfprintf+0x9c>
 64a:	80 32       	cpi	r24, 0x20	; 32
 64c:	79 f0       	breq	.+30     	; 0x66c <vfprintf+0xb0>
 64e:	83 32       	cpi	r24, 0x23	; 35
 650:	a1 f4       	brne	.+40     	; 0x67a <vfprintf+0xbe>
 652:	23 2d       	mov	r18, r3
 654:	20 61       	ori	r18, 0x10	; 16
 656:	1d c0       	rjmp	.+58     	; 0x692 <vfprintf+0xd6>
 658:	8d 32       	cpi	r24, 0x2D	; 45
 65a:	61 f0       	breq	.+24     	; 0x674 <vfprintf+0xb8>
 65c:	80 33       	cpi	r24, 0x30	; 48
 65e:	69 f4       	brne	.+26     	; 0x67a <vfprintf+0xbe>
 660:	23 2d       	mov	r18, r3
 662:	21 60       	ori	r18, 0x01	; 1
 664:	16 c0       	rjmp	.+44     	; 0x692 <vfprintf+0xd6>
 666:	83 2d       	mov	r24, r3
 668:	82 60       	ori	r24, 0x02	; 2
 66a:	38 2e       	mov	r3, r24
 66c:	e3 2d       	mov	r30, r3
 66e:	e4 60       	ori	r30, 0x04	; 4
 670:	3e 2e       	mov	r3, r30
 672:	2a c0       	rjmp	.+84     	; 0x6c8 <vfprintf+0x10c>
 674:	f3 2d       	mov	r31, r3
 676:	f8 60       	ori	r31, 0x08	; 8
 678:	1d c0       	rjmp	.+58     	; 0x6b4 <vfprintf+0xf8>
 67a:	37 fc       	sbrc	r3, 7
 67c:	2d c0       	rjmp	.+90     	; 0x6d8 <vfprintf+0x11c>
 67e:	20 ed       	ldi	r18, 0xD0	; 208
 680:	28 0f       	add	r18, r24
 682:	2a 30       	cpi	r18, 0x0A	; 10
 684:	40 f0       	brcs	.+16     	; 0x696 <vfprintf+0xda>
 686:	8e 32       	cpi	r24, 0x2E	; 46
 688:	b9 f4       	brne	.+46     	; 0x6b8 <vfprintf+0xfc>
 68a:	36 fc       	sbrc	r3, 6
 68c:	75 c1       	rjmp	.+746    	; 0x978 <vfprintf+0x3bc>
 68e:	23 2d       	mov	r18, r3
 690:	20 64       	ori	r18, 0x40	; 64
 692:	32 2e       	mov	r3, r18
 694:	19 c0       	rjmp	.+50     	; 0x6c8 <vfprintf+0x10c>
 696:	36 fe       	sbrs	r3, 6
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <vfprintf+0xea>
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	98 9e       	mul	r9, r24
 69e:	20 0d       	add	r18, r0
 6a0:	11 24       	eor	r1, r1
 6a2:	92 2e       	mov	r9, r18
 6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <vfprintf+0x10c>
 6a6:	ea e0       	ldi	r30, 0x0A	; 10
 6a8:	2e 9e       	mul	r2, r30
 6aa:	20 0d       	add	r18, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	22 2e       	mov	r2, r18
 6b0:	f3 2d       	mov	r31, r3
 6b2:	f0 62       	ori	r31, 0x20	; 32
 6b4:	3f 2e       	mov	r3, r31
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <vfprintf+0x10c>
 6b8:	8c 36       	cpi	r24, 0x6C	; 108
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <vfprintf+0x108>
 6bc:	83 2d       	mov	r24, r3
 6be:	80 68       	ori	r24, 0x80	; 128
 6c0:	38 2e       	mov	r3, r24
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0x10c>
 6c4:	88 36       	cpi	r24, 0x68	; 104
 6c6:	41 f4       	brne	.+16     	; 0x6d8 <vfprintf+0x11c>
 6c8:	f7 01       	movw	r30, r14
 6ca:	93 fd       	sbrc	r25, 3
 6cc:	85 91       	lpm	r24, Z+
 6ce:	93 ff       	sbrs	r25, 3
 6d0:	81 91       	ld	r24, Z+
 6d2:	7f 01       	movw	r14, r30
 6d4:	81 11       	cpse	r24, r1
 6d6:	b3 cf       	rjmp	.-154    	; 0x63e <vfprintf+0x82>
 6d8:	98 2f       	mov	r25, r24
 6da:	9f 7d       	andi	r25, 0xDF	; 223
 6dc:	95 54       	subi	r25, 0x45	; 69
 6de:	93 30       	cpi	r25, 0x03	; 3
 6e0:	28 f4       	brcc	.+10     	; 0x6ec <vfprintf+0x130>
 6e2:	0c 5f       	subi	r16, 0xFC	; 252
 6e4:	1f 4f       	sbci	r17, 0xFF	; 255
 6e6:	9f e3       	ldi	r25, 0x3F	; 63
 6e8:	99 83       	std	Y+1, r25	; 0x01
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <vfprintf+0x14a>
 6ec:	83 36       	cpi	r24, 0x63	; 99
 6ee:	31 f0       	breq	.+12     	; 0x6fc <vfprintf+0x140>
 6f0:	83 37       	cpi	r24, 0x73	; 115
 6f2:	71 f0       	breq	.+28     	; 0x710 <vfprintf+0x154>
 6f4:	83 35       	cpi	r24, 0x53	; 83
 6f6:	09 f0       	breq	.+2      	; 0x6fa <vfprintf+0x13e>
 6f8:	55 c0       	rjmp	.+170    	; 0x7a4 <vfprintf+0x1e8>
 6fa:	20 c0       	rjmp	.+64     	; 0x73c <vfprintf+0x180>
 6fc:	f8 01       	movw	r30, r16
 6fe:	80 81       	ld	r24, Z
 700:	89 83       	std	Y+1, r24	; 0x01
 702:	0e 5f       	subi	r16, 0xFE	; 254
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	88 24       	eor	r8, r8
 708:	83 94       	inc	r8
 70a:	91 2c       	mov	r9, r1
 70c:	53 01       	movw	r10, r6
 70e:	12 c0       	rjmp	.+36     	; 0x734 <vfprintf+0x178>
 710:	28 01       	movw	r4, r16
 712:	f2 e0       	ldi	r31, 0x02	; 2
 714:	4f 0e       	add	r4, r31
 716:	51 1c       	adc	r5, r1
 718:	f8 01       	movw	r30, r16
 71a:	a0 80       	ld	r10, Z
 71c:	b1 80       	ldd	r11, Z+1	; 0x01
 71e:	36 fe       	sbrs	r3, 6
 720:	03 c0       	rjmp	.+6      	; 0x728 <vfprintf+0x16c>
 722:	69 2d       	mov	r22, r9
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x170>
 728:	6f ef       	ldi	r22, 0xFF	; 255
 72a:	7f ef       	ldi	r23, 0xFF	; 255
 72c:	c5 01       	movw	r24, r10
 72e:	4e d1       	rcall	.+668    	; 0x9cc <strnlen>
 730:	4c 01       	movw	r8, r24
 732:	82 01       	movw	r16, r4
 734:	f3 2d       	mov	r31, r3
 736:	ff 77       	andi	r31, 0x7F	; 127
 738:	3f 2e       	mov	r3, r31
 73a:	15 c0       	rjmp	.+42     	; 0x766 <vfprintf+0x1aa>
 73c:	28 01       	movw	r4, r16
 73e:	22 e0       	ldi	r18, 0x02	; 2
 740:	42 0e       	add	r4, r18
 742:	51 1c       	adc	r5, r1
 744:	f8 01       	movw	r30, r16
 746:	a0 80       	ld	r10, Z
 748:	b1 80       	ldd	r11, Z+1	; 0x01
 74a:	36 fe       	sbrs	r3, 6
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x198>
 74e:	69 2d       	mov	r22, r9
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	02 c0       	rjmp	.+4      	; 0x758 <vfprintf+0x19c>
 754:	6f ef       	ldi	r22, 0xFF	; 255
 756:	7f ef       	ldi	r23, 0xFF	; 255
 758:	c5 01       	movw	r24, r10
 75a:	2d d1       	rcall	.+602    	; 0x9b6 <strnlen_P>
 75c:	4c 01       	movw	r8, r24
 75e:	f3 2d       	mov	r31, r3
 760:	f0 68       	ori	r31, 0x80	; 128
 762:	3f 2e       	mov	r3, r31
 764:	82 01       	movw	r16, r4
 766:	33 fc       	sbrc	r3, 3
 768:	19 c0       	rjmp	.+50     	; 0x79c <vfprintf+0x1e0>
 76a:	82 2d       	mov	r24, r2
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	88 16       	cp	r8, r24
 770:	99 06       	cpc	r9, r25
 772:	a0 f4       	brcc	.+40     	; 0x79c <vfprintf+0x1e0>
 774:	b6 01       	movw	r22, r12
 776:	80 e2       	ldi	r24, 0x20	; 32
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	33 d1       	rcall	.+614    	; 0x9e2 <fputc>
 77c:	2a 94       	dec	r2
 77e:	f5 cf       	rjmp	.-22     	; 0x76a <vfprintf+0x1ae>
 780:	f5 01       	movw	r30, r10
 782:	37 fc       	sbrc	r3, 7
 784:	85 91       	lpm	r24, Z+
 786:	37 fe       	sbrs	r3, 7
 788:	81 91       	ld	r24, Z+
 78a:	5f 01       	movw	r10, r30
 78c:	b6 01       	movw	r22, r12
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	28 d1       	rcall	.+592    	; 0x9e2 <fputc>
 792:	21 10       	cpse	r2, r1
 794:	2a 94       	dec	r2
 796:	21 e0       	ldi	r18, 0x01	; 1
 798:	82 1a       	sub	r8, r18
 79a:	91 08       	sbc	r9, r1
 79c:	81 14       	cp	r8, r1
 79e:	91 04       	cpc	r9, r1
 7a0:	79 f7       	brne	.-34     	; 0x780 <vfprintf+0x1c4>
 7a2:	e1 c0       	rjmp	.+450    	; 0x966 <vfprintf+0x3aa>
 7a4:	84 36       	cpi	r24, 0x64	; 100
 7a6:	11 f0       	breq	.+4      	; 0x7ac <vfprintf+0x1f0>
 7a8:	89 36       	cpi	r24, 0x69	; 105
 7aa:	39 f5       	brne	.+78     	; 0x7fa <vfprintf+0x23e>
 7ac:	f8 01       	movw	r30, r16
 7ae:	37 fe       	sbrs	r3, 7
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <vfprintf+0x204>
 7b2:	60 81       	ld	r22, Z
 7b4:	71 81       	ldd	r23, Z+1	; 0x01
 7b6:	82 81       	ldd	r24, Z+2	; 0x02
 7b8:	93 81       	ldd	r25, Z+3	; 0x03
 7ba:	0c 5f       	subi	r16, 0xFC	; 252
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <vfprintf+0x214>
 7c0:	60 81       	ld	r22, Z
 7c2:	71 81       	ldd	r23, Z+1	; 0x01
 7c4:	07 2e       	mov	r0, r23
 7c6:	00 0c       	add	r0, r0
 7c8:	88 0b       	sbc	r24, r24
 7ca:	99 0b       	sbc	r25, r25
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	f3 2d       	mov	r31, r3
 7d2:	ff 76       	andi	r31, 0x6F	; 111
 7d4:	3f 2e       	mov	r3, r31
 7d6:	97 ff       	sbrs	r25, 7
 7d8:	09 c0       	rjmp	.+18     	; 0x7ec <vfprintf+0x230>
 7da:	90 95       	com	r25
 7dc:	80 95       	com	r24
 7de:	70 95       	com	r23
 7e0:	61 95       	neg	r22
 7e2:	7f 4f       	sbci	r23, 0xFF	; 255
 7e4:	8f 4f       	sbci	r24, 0xFF	; 255
 7e6:	9f 4f       	sbci	r25, 0xFF	; 255
 7e8:	f0 68       	ori	r31, 0x80	; 128
 7ea:	3f 2e       	mov	r3, r31
 7ec:	2a e0       	ldi	r18, 0x0A	; 10
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	a3 01       	movw	r20, r6
 7f2:	33 d1       	rcall	.+614    	; 0xa5a <__ultoa_invert>
 7f4:	88 2e       	mov	r8, r24
 7f6:	86 18       	sub	r8, r6
 7f8:	44 c0       	rjmp	.+136    	; 0x882 <vfprintf+0x2c6>
 7fa:	85 37       	cpi	r24, 0x75	; 117
 7fc:	31 f4       	brne	.+12     	; 0x80a <vfprintf+0x24e>
 7fe:	23 2d       	mov	r18, r3
 800:	2f 7e       	andi	r18, 0xEF	; 239
 802:	b2 2e       	mov	r11, r18
 804:	2a e0       	ldi	r18, 0x0A	; 10
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	25 c0       	rjmp	.+74     	; 0x854 <vfprintf+0x298>
 80a:	93 2d       	mov	r25, r3
 80c:	99 7f       	andi	r25, 0xF9	; 249
 80e:	b9 2e       	mov	r11, r25
 810:	8f 36       	cpi	r24, 0x6F	; 111
 812:	c1 f0       	breq	.+48     	; 0x844 <vfprintf+0x288>
 814:	18 f4       	brcc	.+6      	; 0x81c <vfprintf+0x260>
 816:	88 35       	cpi	r24, 0x58	; 88
 818:	79 f0       	breq	.+30     	; 0x838 <vfprintf+0x27c>
 81a:	ae c0       	rjmp	.+348    	; 0x978 <vfprintf+0x3bc>
 81c:	80 37       	cpi	r24, 0x70	; 112
 81e:	19 f0       	breq	.+6      	; 0x826 <vfprintf+0x26a>
 820:	88 37       	cpi	r24, 0x78	; 120
 822:	21 f0       	breq	.+8      	; 0x82c <vfprintf+0x270>
 824:	a9 c0       	rjmp	.+338    	; 0x978 <vfprintf+0x3bc>
 826:	e9 2f       	mov	r30, r25
 828:	e0 61       	ori	r30, 0x10	; 16
 82a:	be 2e       	mov	r11, r30
 82c:	b4 fe       	sbrs	r11, 4
 82e:	0d c0       	rjmp	.+26     	; 0x84a <vfprintf+0x28e>
 830:	fb 2d       	mov	r31, r11
 832:	f4 60       	ori	r31, 0x04	; 4
 834:	bf 2e       	mov	r11, r31
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x28e>
 838:	34 fe       	sbrs	r3, 4
 83a:	0a c0       	rjmp	.+20     	; 0x850 <vfprintf+0x294>
 83c:	29 2f       	mov	r18, r25
 83e:	26 60       	ori	r18, 0x06	; 6
 840:	b2 2e       	mov	r11, r18
 842:	06 c0       	rjmp	.+12     	; 0x850 <vfprintf+0x294>
 844:	28 e0       	ldi	r18, 0x08	; 8
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	05 c0       	rjmp	.+10     	; 0x854 <vfprintf+0x298>
 84a:	20 e1       	ldi	r18, 0x10	; 16
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <vfprintf+0x298>
 850:	20 e1       	ldi	r18, 0x10	; 16
 852:	32 e0       	ldi	r19, 0x02	; 2
 854:	f8 01       	movw	r30, r16
 856:	b7 fe       	sbrs	r11, 7
 858:	07 c0       	rjmp	.+14     	; 0x868 <vfprintf+0x2ac>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	0c 5f       	subi	r16, 0xFC	; 252
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x2b8>
 868:	60 81       	ld	r22, Z
 86a:	71 81       	ldd	r23, Z+1	; 0x01
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	a3 01       	movw	r20, r6
 876:	f1 d0       	rcall	.+482    	; 0xa5a <__ultoa_invert>
 878:	88 2e       	mov	r8, r24
 87a:	86 18       	sub	r8, r6
 87c:	fb 2d       	mov	r31, r11
 87e:	ff 77       	andi	r31, 0x7F	; 127
 880:	3f 2e       	mov	r3, r31
 882:	36 fe       	sbrs	r3, 6
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x2e4>
 886:	23 2d       	mov	r18, r3
 888:	2e 7f       	andi	r18, 0xFE	; 254
 88a:	a2 2e       	mov	r10, r18
 88c:	89 14       	cp	r8, r9
 88e:	58 f4       	brcc	.+22     	; 0x8a6 <vfprintf+0x2ea>
 890:	34 fe       	sbrs	r3, 4
 892:	0b c0       	rjmp	.+22     	; 0x8aa <vfprintf+0x2ee>
 894:	32 fc       	sbrc	r3, 2
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x2ee>
 898:	83 2d       	mov	r24, r3
 89a:	8e 7e       	andi	r24, 0xEE	; 238
 89c:	a8 2e       	mov	r10, r24
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x2ee>
 8a0:	b8 2c       	mov	r11, r8
 8a2:	a3 2c       	mov	r10, r3
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <vfprintf+0x2f0>
 8a6:	b8 2c       	mov	r11, r8
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <vfprintf+0x2f0>
 8aa:	b9 2c       	mov	r11, r9
 8ac:	a4 fe       	sbrs	r10, 4
 8ae:	0f c0       	rjmp	.+30     	; 0x8ce <vfprintf+0x312>
 8b0:	fe 01       	movw	r30, r28
 8b2:	e8 0d       	add	r30, r8
 8b4:	f1 1d       	adc	r31, r1
 8b6:	80 81       	ld	r24, Z
 8b8:	80 33       	cpi	r24, 0x30	; 48
 8ba:	21 f4       	brne	.+8      	; 0x8c4 <vfprintf+0x308>
 8bc:	9a 2d       	mov	r25, r10
 8be:	99 7e       	andi	r25, 0xE9	; 233
 8c0:	a9 2e       	mov	r10, r25
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x31a>
 8c4:	a2 fe       	sbrs	r10, 2
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <vfprintf+0x318>
 8c8:	b3 94       	inc	r11
 8ca:	b3 94       	inc	r11
 8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <vfprintf+0x31a>
 8ce:	8a 2d       	mov	r24, r10
 8d0:	86 78       	andi	r24, 0x86	; 134
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <vfprintf+0x31a>
 8d4:	b3 94       	inc	r11
 8d6:	a3 fc       	sbrc	r10, 3
 8d8:	10 c0       	rjmp	.+32     	; 0x8fa <vfprintf+0x33e>
 8da:	a0 fe       	sbrs	r10, 0
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <vfprintf+0x32e>
 8de:	b2 14       	cp	r11, r2
 8e0:	80 f4       	brcc	.+32     	; 0x902 <vfprintf+0x346>
 8e2:	28 0c       	add	r2, r8
 8e4:	92 2c       	mov	r9, r2
 8e6:	9b 18       	sub	r9, r11
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <vfprintf+0x348>
 8ea:	b2 14       	cp	r11, r2
 8ec:	58 f4       	brcc	.+22     	; 0x904 <vfprintf+0x348>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	76 d0       	rcall	.+236    	; 0x9e2 <fputc>
 8f6:	b3 94       	inc	r11
 8f8:	f8 cf       	rjmp	.-16     	; 0x8ea <vfprintf+0x32e>
 8fa:	b2 14       	cp	r11, r2
 8fc:	18 f4       	brcc	.+6      	; 0x904 <vfprintf+0x348>
 8fe:	2b 18       	sub	r2, r11
 900:	02 c0       	rjmp	.+4      	; 0x906 <vfprintf+0x34a>
 902:	98 2c       	mov	r9, r8
 904:	21 2c       	mov	r2, r1
 906:	a4 fe       	sbrs	r10, 4
 908:	0f c0       	rjmp	.+30     	; 0x928 <vfprintf+0x36c>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e3       	ldi	r24, 0x30	; 48
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	68 d0       	rcall	.+208    	; 0x9e2 <fputc>
 912:	a2 fe       	sbrs	r10, 2
 914:	16 c0       	rjmp	.+44     	; 0x942 <vfprintf+0x386>
 916:	a1 fc       	sbrc	r10, 1
 918:	03 c0       	rjmp	.+6      	; 0x920 <vfprintf+0x364>
 91a:	88 e7       	ldi	r24, 0x78	; 120
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x368>
 920:	88 e5       	ldi	r24, 0x58	; 88
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	b6 01       	movw	r22, r12
 926:	0c c0       	rjmp	.+24     	; 0x940 <vfprintf+0x384>
 928:	8a 2d       	mov	r24, r10
 92a:	86 78       	andi	r24, 0x86	; 134
 92c:	51 f0       	breq	.+20     	; 0x942 <vfprintf+0x386>
 92e:	a1 fe       	sbrs	r10, 1
 930:	02 c0       	rjmp	.+4      	; 0x936 <vfprintf+0x37a>
 932:	8b e2       	ldi	r24, 0x2B	; 43
 934:	01 c0       	rjmp	.+2      	; 0x938 <vfprintf+0x37c>
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	a7 fc       	sbrc	r10, 7
 93a:	8d e2       	ldi	r24, 0x2D	; 45
 93c:	b6 01       	movw	r22, r12
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	50 d0       	rcall	.+160    	; 0x9e2 <fputc>
 942:	89 14       	cp	r8, r9
 944:	30 f4       	brcc	.+12     	; 0x952 <vfprintf+0x396>
 946:	b6 01       	movw	r22, r12
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	4a d0       	rcall	.+148    	; 0x9e2 <fputc>
 94e:	9a 94       	dec	r9
 950:	f8 cf       	rjmp	.-16     	; 0x942 <vfprintf+0x386>
 952:	8a 94       	dec	r8
 954:	f3 01       	movw	r30, r6
 956:	e8 0d       	add	r30, r8
 958:	f1 1d       	adc	r31, r1
 95a:	80 81       	ld	r24, Z
 95c:	b6 01       	movw	r22, r12
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	40 d0       	rcall	.+128    	; 0x9e2 <fputc>
 962:	81 10       	cpse	r8, r1
 964:	f6 cf       	rjmp	.-20     	; 0x952 <vfprintf+0x396>
 966:	22 20       	and	r2, r2
 968:	09 f4       	brne	.+2      	; 0x96c <vfprintf+0x3b0>
 96a:	4e ce       	rjmp	.-868    	; 0x608 <vfprintf+0x4c>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	37 d0       	rcall	.+110    	; 0x9e2 <fputc>
 974:	2a 94       	dec	r2
 976:	f7 cf       	rjmp	.-18     	; 0x966 <vfprintf+0x3aa>
 978:	f6 01       	movw	r30, r12
 97a:	86 81       	ldd	r24, Z+6	; 0x06
 97c:	97 81       	ldd	r25, Z+7	; 0x07
 97e:	02 c0       	rjmp	.+4      	; 0x984 <vfprintf+0x3c8>
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	2b 96       	adiw	r28, 0x0b	; 11
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	1f 91       	pop	r17
 996:	0f 91       	pop	r16
 998:	ff 90       	pop	r15
 99a:	ef 90       	pop	r14
 99c:	df 90       	pop	r13
 99e:	cf 90       	pop	r12
 9a0:	bf 90       	pop	r11
 9a2:	af 90       	pop	r10
 9a4:	9f 90       	pop	r9
 9a6:	8f 90       	pop	r8
 9a8:	7f 90       	pop	r7
 9aa:	6f 90       	pop	r6
 9ac:	5f 90       	pop	r5
 9ae:	4f 90       	pop	r4
 9b0:	3f 90       	pop	r3
 9b2:	2f 90       	pop	r2
 9b4:	08 95       	ret

000009b6 <strnlen_P>:
 9b6:	fc 01       	movw	r30, r24
 9b8:	05 90       	lpm	r0, Z+
 9ba:	61 50       	subi	r22, 0x01	; 1
 9bc:	70 40       	sbci	r23, 0x00	; 0
 9be:	01 10       	cpse	r0, r1
 9c0:	d8 f7       	brcc	.-10     	; 0x9b8 <strnlen_P+0x2>
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	8e 0f       	add	r24, r30
 9c8:	9f 1f       	adc	r25, r31
 9ca:	08 95       	ret

000009cc <strnlen>:
 9cc:	fc 01       	movw	r30, r24
 9ce:	61 50       	subi	r22, 0x01	; 1
 9d0:	70 40       	sbci	r23, 0x00	; 0
 9d2:	01 90       	ld	r0, Z+
 9d4:	01 10       	cpse	r0, r1
 9d6:	d8 f7       	brcc	.-10     	; 0x9ce <strnlen+0x2>
 9d8:	80 95       	com	r24
 9da:	90 95       	com	r25
 9dc:	8e 0f       	add	r24, r30
 9de:	9f 1f       	adc	r25, r31
 9e0:	08 95       	ret

000009e2 <fputc>:
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	fb 01       	movw	r30, r22
 9ec:	23 81       	ldd	r18, Z+3	; 0x03
 9ee:	21 fd       	sbrc	r18, 1
 9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <fputc+0x16>
 9f2:	8f ef       	ldi	r24, 0xFF	; 255
 9f4:	9f ef       	ldi	r25, 0xFF	; 255
 9f6:	2c c0       	rjmp	.+88     	; 0xa50 <fputc+0x6e>
 9f8:	22 ff       	sbrs	r18, 2
 9fa:	16 c0       	rjmp	.+44     	; 0xa28 <fputc+0x46>
 9fc:	46 81       	ldd	r20, Z+6	; 0x06
 9fe:	57 81       	ldd	r21, Z+7	; 0x07
 a00:	24 81       	ldd	r18, Z+4	; 0x04
 a02:	35 81       	ldd	r19, Z+5	; 0x05
 a04:	42 17       	cp	r20, r18
 a06:	53 07       	cpc	r21, r19
 a08:	44 f4       	brge	.+16     	; 0xa1a <fputc+0x38>
 a0a:	a0 81       	ld	r26, Z
 a0c:	b1 81       	ldd	r27, Z+1	; 0x01
 a0e:	9d 01       	movw	r18, r26
 a10:	2f 5f       	subi	r18, 0xFF	; 255
 a12:	3f 4f       	sbci	r19, 0xFF	; 255
 a14:	31 83       	std	Z+1, r19	; 0x01
 a16:	20 83       	st	Z, r18
 a18:	8c 93       	st	X, r24
 a1a:	26 81       	ldd	r18, Z+6	; 0x06
 a1c:	37 81       	ldd	r19, Z+7	; 0x07
 a1e:	2f 5f       	subi	r18, 0xFF	; 255
 a20:	3f 4f       	sbci	r19, 0xFF	; 255
 a22:	37 83       	std	Z+7, r19	; 0x07
 a24:	26 83       	std	Z+6, r18	; 0x06
 a26:	14 c0       	rjmp	.+40     	; 0xa50 <fputc+0x6e>
 a28:	8b 01       	movw	r16, r22
 a2a:	ec 01       	movw	r28, r24
 a2c:	fb 01       	movw	r30, r22
 a2e:	00 84       	ldd	r0, Z+8	; 0x08
 a30:	f1 85       	ldd	r31, Z+9	; 0x09
 a32:	e0 2d       	mov	r30, r0
 a34:	09 95       	icall
 a36:	89 2b       	or	r24, r25
 a38:	e1 f6       	brne	.-72     	; 0x9f2 <fputc+0x10>
 a3a:	d8 01       	movw	r26, r16
 a3c:	16 96       	adiw	r26, 0x06	; 6
 a3e:	8d 91       	ld	r24, X+
 a40:	9c 91       	ld	r25, X
 a42:	17 97       	sbiw	r26, 0x07	; 7
 a44:	01 96       	adiw	r24, 0x01	; 1
 a46:	17 96       	adiw	r26, 0x07	; 7
 a48:	9c 93       	st	X, r25
 a4a:	8e 93       	st	-X, r24
 a4c:	16 97       	sbiw	r26, 0x06	; 6
 a4e:	ce 01       	movw	r24, r28
 a50:	df 91       	pop	r29
 a52:	cf 91       	pop	r28
 a54:	1f 91       	pop	r17
 a56:	0f 91       	pop	r16
 a58:	08 95       	ret

00000a5a <__ultoa_invert>:
 a5a:	fa 01       	movw	r30, r20
 a5c:	aa 27       	eor	r26, r26
 a5e:	28 30       	cpi	r18, 0x08	; 8
 a60:	51 f1       	breq	.+84     	; 0xab6 <__ultoa_invert+0x5c>
 a62:	20 31       	cpi	r18, 0x10	; 16
 a64:	81 f1       	breq	.+96     	; 0xac6 <__ultoa_invert+0x6c>
 a66:	e8 94       	clt
 a68:	6f 93       	push	r22
 a6a:	6e 7f       	andi	r22, 0xFE	; 254
 a6c:	6e 5f       	subi	r22, 0xFE	; 254
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	af 4f       	sbci	r26, 0xFF	; 255
 a76:	b1 e0       	ldi	r27, 0x01	; 1
 a78:	3e d0       	rcall	.+124    	; 0xaf6 <__ultoa_invert+0x9c>
 a7a:	b4 e0       	ldi	r27, 0x04	; 4
 a7c:	3c d0       	rcall	.+120    	; 0xaf6 <__ultoa_invert+0x9c>
 a7e:	67 0f       	add	r22, r23
 a80:	78 1f       	adc	r23, r24
 a82:	89 1f       	adc	r24, r25
 a84:	9a 1f       	adc	r25, r26
 a86:	a1 1d       	adc	r26, r1
 a88:	68 0f       	add	r22, r24
 a8a:	79 1f       	adc	r23, r25
 a8c:	8a 1f       	adc	r24, r26
 a8e:	91 1d       	adc	r25, r1
 a90:	a1 1d       	adc	r26, r1
 a92:	6a 0f       	add	r22, r26
 a94:	71 1d       	adc	r23, r1
 a96:	81 1d       	adc	r24, r1
 a98:	91 1d       	adc	r25, r1
 a9a:	a1 1d       	adc	r26, r1
 a9c:	20 d0       	rcall	.+64     	; 0xade <__ultoa_invert+0x84>
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <__ultoa_invert+0x48>
 aa0:	68 94       	set
 aa2:	3f 91       	pop	r19
 aa4:	2a e0       	ldi	r18, 0x0A	; 10
 aa6:	26 9f       	mul	r18, r22
 aa8:	11 24       	eor	r1, r1
 aaa:	30 19       	sub	r19, r0
 aac:	30 5d       	subi	r19, 0xD0	; 208
 aae:	31 93       	st	Z+, r19
 ab0:	de f6       	brtc	.-74     	; 0xa68 <__ultoa_invert+0xe>
 ab2:	cf 01       	movw	r24, r30
 ab4:	08 95       	ret
 ab6:	46 2f       	mov	r20, r22
 ab8:	47 70       	andi	r20, 0x07	; 7
 aba:	40 5d       	subi	r20, 0xD0	; 208
 abc:	41 93       	st	Z+, r20
 abe:	b3 e0       	ldi	r27, 0x03	; 3
 ac0:	0f d0       	rcall	.+30     	; 0xae0 <__ultoa_invert+0x86>
 ac2:	c9 f7       	brne	.-14     	; 0xab6 <__ultoa_invert+0x5c>
 ac4:	f6 cf       	rjmp	.-20     	; 0xab2 <__ultoa_invert+0x58>
 ac6:	46 2f       	mov	r20, r22
 ac8:	4f 70       	andi	r20, 0x0F	; 15
 aca:	40 5d       	subi	r20, 0xD0	; 208
 acc:	4a 33       	cpi	r20, 0x3A	; 58
 ace:	18 f0       	brcs	.+6      	; 0xad6 <__ultoa_invert+0x7c>
 ad0:	49 5d       	subi	r20, 0xD9	; 217
 ad2:	31 fd       	sbrc	r19, 1
 ad4:	40 52       	subi	r20, 0x20	; 32
 ad6:	41 93       	st	Z+, r20
 ad8:	02 d0       	rcall	.+4      	; 0xade <__ultoa_invert+0x84>
 ada:	a9 f7       	brne	.-22     	; 0xac6 <__ultoa_invert+0x6c>
 adc:	ea cf       	rjmp	.-44     	; 0xab2 <__ultoa_invert+0x58>
 ade:	b4 e0       	ldi	r27, 0x04	; 4
 ae0:	a6 95       	lsr	r26
 ae2:	97 95       	ror	r25
 ae4:	87 95       	ror	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	ba 95       	dec	r27
 aec:	c9 f7       	brne	.-14     	; 0xae0 <__ultoa_invert+0x86>
 aee:	00 97       	sbiw	r24, 0x00	; 0
 af0:	61 05       	cpc	r22, r1
 af2:	71 05       	cpc	r23, r1
 af4:	08 95       	ret
 af6:	9b 01       	movw	r18, r22
 af8:	ac 01       	movw	r20, r24
 afa:	0a 2e       	mov	r0, r26
 afc:	06 94       	lsr	r0
 afe:	57 95       	ror	r21
 b00:	47 95       	ror	r20
 b02:	37 95       	ror	r19
 b04:	27 95       	ror	r18
 b06:	ba 95       	dec	r27
 b08:	c9 f7       	brne	.-14     	; 0xafc <__ultoa_invert+0xa2>
 b0a:	62 0f       	add	r22, r18
 b0c:	73 1f       	adc	r23, r19
 b0e:	84 1f       	adc	r24, r20
 b10:	95 1f       	adc	r25, r21
 b12:	a0 1d       	adc	r26, r0
 b14:	08 95       	ret

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
