
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000d90  00000e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800160  00800160  00000e84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c31  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001962  00000000  00000000  00004dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003065  00000000  00000000  0000675f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000674  00000000  00000000  000097c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a80d  00000000  00000000  00009e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124f  00000000  00000000  00014645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00015894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000049e1  00000000  00000000  00015afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c3       	rjmp	.+1768   	; 0x71e <__vector_13>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c4       	rjmp	.+2208   	; 0x8e6 <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	45 c0       	rjmp	.+138    	; 0x100 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e9       	ldi	r30, 0x90	; 144
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 36       	cpi	r26, 0x60	; 96
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a9 3e       	cpi	r26, 0xE9	; 233
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	35 d2       	rcall	.+1130   	; 0x53a <main>
  d0:	5d c6       	rjmp	.+3258   	; 0xd8c <_exit>

000000d2 <__bad_interrupt>:
  d2:	8e c2       	rjmp	.+1308   	; 0x5f0 <__vector_default>

000000d4 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  d4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  d6:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
  d8:	eb e7       	ldi	r30, 0x7B	; 123
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
  f2:	ec e7       	ldi	r30, 0x7C	; 124
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	81 64       	ori	r24, 0x41	; 65
  fa:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  fc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
  fe:	08 95       	ret

00000100 <__vector_29>:
		//ADCSRA |= _BV(ADSC); //Start ADC converions
	}
}

ISR(ADC_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
		if (g_ADCCount < 10) g_ADCResult[g_ADCCount++] = ADC;
 11a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <g_ADCCount>
 11e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <g_ADCCount+0x1>
 122:	0a 97       	sbiw	r24, 0x0a	; 10
 124:	b0 f4       	brcc	.+44     	; 0x152 <__vector_29+0x52>
 126:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <g_ADCCount>
 12a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <g_ADCCount+0x1>
 12e:	9c 01       	movw	r18, r24
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <g_ADCCount+0x1>
 138:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <g_ADCCount>
 13c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 140:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	fc 01       	movw	r30, r24
 14a:	ef 58       	subi	r30, 0x8F	; 143
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
	    ADCSRA |= (1 << ADSC);
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
		if (g_ADCCount == 10) _timer[1].state = READY;
 15c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <g_ADCCount>
 160:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <g_ADCCount+0x1>
 164:	0a 97       	sbiw	r24, 0x0a	; 10
 166:	19 f4       	brne	.+6      	; 0x16e <__vector_29+0x6e>
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <_timer+0x11>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0b be       	out	0x3b, r0	; 59
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <D_Blinky>:

	_timer[2].state = READY;
	_timer[4].state = BLOCKED;
}
void STEPPER_Task(void* arg)
{
 188:	9b b1       	in	r25, 0x0b	; 11
 18a:	80 ea       	ldi	r24, 0xA0	; 160
 18c:	89 27       	eor	r24, r25
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	08 95       	ret

00000192 <C_Blinky>:
 192:	88 b1       	in	r24, 0x08	; 8
 194:	80 95       	com	r24
 196:	88 b9       	out	0x08, r24	; 8
 198:	08 95       	ret

0000019a <ADC_Task>:
 19a:	8f 92       	push	r8
 19c:	9f 92       	push	r9
 19e:	af 92       	push	r10
 1a0:	bf 92       	push	r11
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	ba 01       	movw	r22, r20
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ef 58       	subi	r30, 0x8F	; 143
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	20 81       	ld	r18, Z
 1c0:	31 81       	ldd	r19, Z+1	; 0x01
 1c2:	42 0f       	add	r20, r18
 1c4:	53 1f       	adc	r21, r19
 1c6:	61 1d       	adc	r22, r1
 1c8:	71 1d       	adc	r23, r1
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	8a 30       	cpi	r24, 0x0A	; 10
 1ce:	91 05       	cpc	r25, r1
 1d0:	89 f7       	brne	.-30     	; 0x1b4 <ADC_Task+0x1a>
 1d2:	cb 01       	movw	r24, r22
 1d4:	ba 01       	movw	r22, r20
 1d6:	2a e0       	ldi	r18, 0x0A	; 10
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	93 d4       	rcall	.+2342   	; 0xb06 <__udivmodsi4>
 1e0:	69 01       	movw	r12, r18
 1e2:	7a 01       	movw	r14, r20
 1e4:	da 01       	movw	r26, r20
 1e6:	c9 01       	movw	r24, r18
 1e8:	0b 97       	sbiw	r24, 0x0b	; 11
 1ea:	a1 09       	sbc	r26, r1
 1ec:	b1 09       	sbc	r27, r1
 1ee:	89 37       	cpi	r24, 0x79	; 121
 1f0:	93 40       	sbci	r25, 0x03	; 3
 1f2:	a1 05       	cpc	r26, r1
 1f4:	b1 05       	cpc	r27, r1
 1f6:	90 f4       	brcc	.+36     	; 0x21c <ADC_Task+0x82>
 1f8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <STAGE2>
 1fc:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <STAGE2+0x1>
 200:	80 d1       	rcall	.+768    	; 0x502 <LL_GetRefl>
 202:	a0 e0       	ldi	r26, 0x00	; 0
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	c8 16       	cp	r12, r24
 208:	d9 06       	cpc	r13, r25
 20a:	ea 06       	cpc	r14, r26
 20c:	fb 06       	cpc	r15, r27
 20e:	30 f4       	brcc	.+12     	; 0x21c <ADC_Task+0x82>
 210:	b6 01       	movw	r22, r12
 212:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <STAGE2>
 216:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <STAGE2+0x1>
 21a:	79 d1       	rcall	.+754    	; 0x50e <LL_UpdateRefl>
 21c:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <g_ADCCount+0x1>
 220:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <g_ADCCount>
 224:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <_timer+0x11>
 228:	ea e7       	ldi	r30, 0x7A	; 122
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	80 83       	st	Z, r24
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	9f 90       	pop	r9
 240:	8f 90       	pop	r8
 242:	08 95       	ret

00000244 <MAG_Task>:
 244:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <gMotorOn>
 248:	88 23       	and	r24, r24
 24a:	49 f0       	breq	.+18     	; 0x25e <MAG_Task+0x1a>
 24c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tick.2332>
 250:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tick.2332+0x1>
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tick.2332+0x1>
 25a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tick.2332>
 25e:	63 99       	sbic	0x0c, 3	; 12
 260:	1d c0       	rjmp	.+58     	; 0x29c <MAG_Task+0x58>
 262:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <count.2331>
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <count.2331>
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	90 f1       	brcs	.+100    	; 0x2d4 <MAG_Task+0x90>
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <STAGE1>
 276:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <STAGE1+0x1>
 27a:	4f d1       	rcall	.+670    	; 0x51a <LL_UpdateMag>
 27c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <STAGE1>
 280:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <STAGE1+0x1>
 284:	00 d1       	rcall	.+512    	; 0x486 <LL_Next>
 286:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <STAGE1+0x1>
 28a:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <STAGE1>
 28e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_timer+0x1a>
 292:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tick.2332+0x1>
 296:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tick.2332>
 29a:	08 95       	ret
 29c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tick.2332>
 2a0:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tick.2332+0x1>
 2a4:	81 3a       	cpi	r24, 0xA1	; 161
 2a6:	9f 40       	sbci	r25, 0x0F	; 15
 2a8:	a8 f0       	brcs	.+42     	; 0x2d4 <MAG_Task+0x90>
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <STAGE1>
 2b0:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <STAGE1+0x1>
 2b4:	32 d1       	rcall	.+612    	; 0x51a <LL_UpdateMag>
 2b6:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <STAGE1>
 2ba:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <STAGE1+0x1>
 2be:	e3 d0       	rcall	.+454    	; 0x486 <LL_Next>
 2c0:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <STAGE1+0x1>
 2c4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <STAGE1>
 2c8:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <_timer+0x1a>
 2cc:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tick.2332+0x1>
 2d0:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tick.2332>
 2d4:	08 95       	ret

000002d6 <EXIT_Task>:
 2d6:	cf 93       	push	r28
 2d8:	c0 91 df 01 	lds	r28, 0x01DF	; 0x8001df <stepper+0x3>
 2dc:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <HEAD>
 2e0:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <HEAD+0x1>
 2e4:	09 d1       	rcall	.+530    	; 0x4f8 <LL_GetClass>
 2e6:	c8 13       	cpse	r28, r24
 2e8:	22 c0       	rjmp	.+68     	; 0x32e <EXIT_Task+0x58>
 2ea:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <HEAD>
 2ee:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <HEAD+0x1>
 2f2:	de d0       	rcall	.+444    	; 0x4b0 <LL_Remove>
 2f4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <HEAD+0x1>
 2f8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <HEAD>
 2fc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <gMotorOn>
 300:	81 11       	cpse	r24, r1
 302:	03 c0       	rjmp	.+6      	; 0x30a <EXIT_Task+0x34>
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	8b d1       	rcall	.+790    	; 0x620 <PWM>
 30a:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <HEAD>
 30e:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <HEAD+0x1>
 312:	82 81       	ldd	r24, Z+2	; 0x02
 314:	93 81       	ldd	r25, Z+3	; 0x03
 316:	f0 d0       	rcall	.+480    	; 0x4f8 <LL_GetClass>
 318:	c8 2f       	mov	r28, r24
 31a:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <HEAD>
 31e:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <HEAD+0x1>
 322:	ea d0       	rcall	.+468    	; 0x4f8 <LL_GetClass>
 324:	6c 2f       	mov	r22, r28
 326:	e7 d1       	rcall	.+974    	; 0x6f6 <STEPPER_SetRotation>
 328:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <_timer+0x23>
 32c:	03 c0       	rjmp	.+6      	; 0x334 <EXIT_Task+0x5e>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	76 d1       	rcall	.+748    	; 0x620 <PWM>
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <BTN_Task>:
 338:	89 b1       	in	r24, 0x09	; 9
 33a:	83 70       	andi	r24, 0x03	; 3
 33c:	31 f1       	breq	.+76     	; 0x38a <BTN_Task+0x52>
 33e:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <debounce.2343>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <debounce.2343>
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	f8 f0       	brcs	.+62     	; 0x38a <BTN_Task+0x52>
 34c:	89 b1       	in	r24, 0x09	; 9
 34e:	83 70       	andi	r24, 0x03	; 3
 350:	31 f4       	brne	.+12     	; 0x35e <BTN_Task+0x26>
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	c9 d3       	rcall	.+1938   	; 0xaea <UART_SendString>
 358:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <debounce.2343>
 35c:	08 95       	ret
 35e:	89 b1       	in	r24, 0x09	; 9
 360:	83 70       	andi	r24, 0x03	; 3
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	31 f4       	brne	.+12     	; 0x372 <BTN_Task+0x3a>
 366:	87 e2       	ldi	r24, 0x27	; 39
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	bf d3       	rcall	.+1918   	; 0xaea <UART_SendString>
 36c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <debounce.2343>
 370:	08 95       	ret
 372:	89 b1       	in	r24, 0x09	; 9
 374:	83 70       	andi	r24, 0x03	; 3
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	31 f4       	brne	.+12     	; 0x386 <BTN_Task+0x4e>
 37a:	8a e3       	ldi	r24, 0x3A	; 58
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	b5 d3       	rcall	.+1898   	; 0xaea <UART_SendString>
 380:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <debounce.2343>
 384:	08 95       	ret
 386:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <debounce.2343>
 38a:	08 95       	ret

0000038c <ADD_Task>:
 38c:	44 e0       	ldi	r20, 0x04	; 4
 38e:	6f ef       	ldi	r22, 0xFF	; 255
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	9f ef       	ldi	r25, 0xFF	; 255
 394:	54 d0       	rcall	.+168    	; 0x43e <LL_ItemInit>
 396:	bc 01       	movw	r22, r24
 398:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <HEAD>
 39c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <HEAD+0x1>
 3a0:	76 d0       	rcall	.+236    	; 0x48e <LL_AddBack>
 3a2:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <STAGE1>
 3a6:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <STAGE1+0x1>
 3aa:	23 2b       	or	r18, r19
 3ac:	21 f4       	brne	.+8      	; 0x3b6 <ADD_Task+0x2a>
 3ae:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <STAGE1+0x1>
 3b2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <STAGE1>
 3b6:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <TAIL+0x1>
 3ba:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <TAIL>
 3be:	e2 e9       	ldi	r30, 0x92	; 146
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	82 8f       	std	Z+26, r24	; 0x1a
 3c6:	14 a6       	std	Z+44, r1	; 0x2c
 3c8:	08 95       	ret

000003ca <SERVER_Task>:
	 */
	static uint8_t pin7state = 0;
	static uint8_t pin6state = 0;
	static uint8_t pin5state = 0;
	
	if((PINE & 0x40) == 0) // E7
 3ca:	66 99       	sbic	0x0c, 6	; 12
 3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <SERVER_Task+0x18>
	{
		if(pin7state)
 3ce:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pin7state.2355>
 3d2:	88 23       	and	r24, r24
 3d4:	21 f0       	breq	.+8      	; 0x3de <SERVER_Task+0x14>
		{
			// Transition Detected O2 High -> Low : Reflect Exit
			ADCSRA &= (0 << ADEN);
 3d6:	ea e7       	ldi	r30, 0x7A	; 122
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	10 82       	st	Z, r1
		} 
		pin7state = 0;
 3de:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <pin7state.2355>
	}
	
	if((PINE & 0x20) == 0) // E6
 3e2:	65 9b       	sbis	0x0c, 5	; 12
	{
		if(pin6state)
		{
			// Transition Detected O1 High -> Low : New Item Enters
		}
		pin6state = 0;
 3e4:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <pin6state.2356>
	}
	
	if((PINE & 0x10) == 0) // E5
 3e8:	64 99       	sbic	0x0c, 4	; 12
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <SERVER_Task+0x34>
	{
		if(pin5state)
 3ec:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
 3f0:	88 23       	and	r24, r24
 3f2:	19 f0       	breq	.+6      	; 0x3fa <SERVER_Task+0x30>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <_timer+0x23>
		}
		pin5state = 0;
 3fa:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	}
	
	if((PINE & 0x40) == 0x40) // E7
 3fe:	66 9b       	sbis	0x0c, 6	; 12
 400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		if(!pin7state)
 402:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <pin7state.2355>
 406:	81 11       	cpse	r24, r1
 408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			// Transition Detected O2 Low -> High : Item Entering Reflective
			ADCSRA |= (1 << ADEN);
 40a:	ea e7       	ldi	r30, 0x7A	; 122
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	80 68       	ori	r24, 0x80	; 128
 412:	80 83       	st	Z, r24
		}
		pin7state = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <pin7state.2355>
	}
		
	if((PINE & 0x20) == 0x20) // E6
 41a:	65 9b       	sbis	0x0c, 5	; 12
 41c:	0a c0       	rjmp	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	{
		if(!pin6state)
 41e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <pin6state.2356>
 422:	81 11       	cpse	r24, r1
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			// Transition Detected O1 Low -> High : Item Enters System
			_timer[4].state = READY;
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_timer+0x2c>
		}
		pin6state = 1;			
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <pin6state.2356>
	}
		
	if((PINE & 0x10) == 0x10) // E5
 432:	64 9b       	sbis	0x0c, 4	; 12
 434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	{
		if(!pin5state)
		{
			// Transition Detected O3 Low -> High
		}
		pin5state = 1;			
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
 43c:	08 95       	ret

0000043e <LL_ItemInit>:

void* LL_GetArg(list* ref)
{
	//
	return ((timerNode*)ref->node)->arg;
}
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	8c 01       	movw	r16, r24
 448:	d6 2f       	mov	r29, r22
 44a:	c4 2f       	mov	r28, r20
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	7c d3       	rcall	.+1784   	; 0xb4a <malloc>
 452:	fc 01       	movw	r30, r24
 454:	11 83       	std	Z+1, r17	; 0x01
 456:	00 83       	st	Z, r16
 458:	d2 83       	std	Z+2, r29	; 0x02
 45a:	c3 83       	std	Z+3, r28	; 0x03
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <LL_ItemListInit>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ec 01       	movw	r28, r24
 46c:	86 e0       	ldi	r24, 0x06	; 6
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	6c d3       	rcall	.+1752   	; 0xb4a <malloc>
 472:	fc 01       	movw	r30, r24
 474:	d1 83       	std	Z+1, r29	; 0x01
 476:	c0 83       	st	Z, r28
 478:	15 82       	std	Z+5, r1	; 0x05
 47a:	14 82       	std	Z+4, r1	; 0x04
 47c:	13 82       	std	Z+3, r1	; 0x03
 47e:	12 82       	std	Z+2, r1	; 0x02
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <LL_Next>:
 486:	fc 01       	movw	r30, r24
 488:	82 81       	ldd	r24, Z+2	; 0x02
 48a:	93 81       	ldd	r25, Z+3	; 0x03
 48c:	08 95       	ret

0000048e <LL_AddBack>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	cb 01       	movw	r24, r22
 496:	01 c0       	rjmp	.+2      	; 0x49a <LL_AddBack+0xc>
 498:	e9 01       	movw	r28, r18
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	3b 81       	ldd	r19, Y+3	; 0x03
 49e:	21 15       	cp	r18, r1
 4a0:	31 05       	cpc	r19, r1
 4a2:	d1 f7       	brne	.-12     	; 0x498 <LL_AddBack+0xa>
 4a4:	e0 df       	rcall	.-64     	; 0x466 <LL_ItemListInit>
 4a6:	9b 83       	std	Y+3, r25	; 0x03
 4a8:	8a 83       	std	Y+2, r24	; 0x02
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <LL_Remove>:
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ec 01       	movw	r28, r24
 4be:	0a 81       	ldd	r16, Y+2	; 0x02
 4c0:	1b 81       	ldd	r17, Y+3	; 0x03
 4c2:	ec 80       	ldd	r14, Y+4	; 0x04
 4c4:	fd 80       	ldd	r15, Y+5	; 0x05
 4c6:	88 81       	ld	r24, Y
 4c8:	99 81       	ldd	r25, Y+1	; 0x01
 4ca:	d7 d3       	rcall	.+1966   	; 0xc7a <free>
 4cc:	ce 01       	movw	r24, r28
 4ce:	d5 d3       	rcall	.+1962   	; 0xc7a <free>
 4d0:	01 15       	cp	r16, r1
 4d2:	11 05       	cpc	r17, r1
 4d4:	19 f0       	breq	.+6      	; 0x4dc <LL_Remove+0x2c>
 4d6:	f8 01       	movw	r30, r16
 4d8:	f5 82       	std	Z+5, r15	; 0x05
 4da:	e4 82       	std	Z+4, r14	; 0x04
 4dc:	e1 14       	cp	r14, r1
 4de:	f1 04       	cpc	r15, r1
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <LL_Remove+0x38>
 4e2:	f7 01       	movw	r30, r14
 4e4:	13 83       	std	Z+3, r17	; 0x03
 4e6:	02 83       	std	Z+2, r16	; 0x02
 4e8:	c8 01       	movw	r24, r16
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <LL_GetClass>:
 4f8:	dc 01       	movw	r26, r24
 4fa:	ed 91       	ld	r30, X+
 4fc:	fc 91       	ld	r31, X
 4fe:	83 81       	ldd	r24, Z+3	; 0x03
 500:	08 95       	ret

00000502 <LL_GetRefl>:
 502:	dc 01       	movw	r26, r24
 504:	ed 91       	ld	r30, X+
 506:	fc 91       	ld	r31, X
 508:	80 81       	ld	r24, Z
 50a:	91 81       	ldd	r25, Z+1	; 0x01
 50c:	08 95       	ret

0000050e <LL_UpdateRefl>:

void LL_UpdateRefl(list* ref, uint16_t newRefl)
{
	//
	((itemNode*)ref->node)->reflect = newRefl;
 50e:	dc 01       	movw	r26, r24
 510:	ed 91       	ld	r30, X+
 512:	fc 91       	ld	r31, X
 514:	71 83       	std	Z+1, r23	; 0x01
 516:	60 83       	st	Z, r22
 518:	08 95       	ret

0000051a <LL_UpdateMag>:
	return;
}
void LL_UpdateMag(list* ref, uint8_t newMag)
{
	//
	((itemNode*)ref->node)->magnet = newMag;
 51a:	dc 01       	movw	r26, r24
 51c:	ed 91       	ld	r30, X+
 51e:	fc 91       	ld	r31, X
 520:	62 83       	std	Z+2, r22	; 0x02
 522:	08 95       	ret

00000524 <GPIO_Init>:
#include "timer.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
 528:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
 52a:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
 52c:	80 ef       	ldi	r24, 0xF0	; 240
 52e:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 530:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
 532:	10 ba       	out	0x10, r1	; 16

	

    return 0;
}
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	08 95       	ret

0000053a <main>:
	#include "TIMERTEST.h"
	TIMERTEST();
	return 0;
#endif
	
	SYS_Init();
 53a:	9a d1       	rcall	.+820    	; 0x870 <SYS_Init>
	while(!gSysCalibrated)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
		{
			UART_SendString("Starting System!\r\n");
			gSysCalibrated = 1;
 53c:	c1 e0       	ldi	r28, 0x01	; 1
	return 0;
#endif
	
	SYS_Init();
	
	while(!gSysCalibrated)
 53e:	08 c0       	rjmp	.+16     	; 0x550 <main+0x16>
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
 540:	89 b1       	in	r24, 0x09	; 9
 542:	83 70       	andi	r24, 0x03	; 3
 544:	29 f4       	brne	.+10     	; 0x550 <main+0x16>
		{
			UART_SendString("Starting System!\r\n");
 546:	8d e4       	ldi	r24, 0x4D	; 77
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	cf d2       	rcall	.+1438   	; 0xaea <UART_SendString>
			gSysCalibrated = 1;
 54c:	c0 93 87 01 	sts	0x0187, r28	; 0x800187 <gSysCalibrated>
	return 0;
#endif
	
	SYS_Init();
	
	while(!gSysCalibrated)
 550:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <gSysCalibrated>
 554:	88 23       	and	r24, r24
 556:	a1 f3       	breq	.-24     	; 0x540 <main+0x6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 558:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		Timer_Create(4000, 1, D_Blinky, NULL);		// Placeholder -- Calibration
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	44 ec       	ldi	r20, 0xC4	; 196
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	80 ea       	ldi	r24, 0xA0	; 160
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	46 d2       	rcall	.+1164   	; 0x9f8 <Timer_Create>
		_timer[0].state = READY;
 56c:	c2 e9       	ldi	r28, 0x92	; 146
 56e:	d1 e0       	ldi	r29, 0x01	; 1
 570:	12 e0       	ldi	r17, 0x02	; 2
 572:	18 87       	std	Y+8, r17	; 0x08
	
		Timer_Create(27, 1, ADC_Task, NULL);		// ADC Handler
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	4d ec       	ldi	r20, 0xCD	; 205
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	8b e1       	ldi	r24, 0x1B	; 27
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	39 d2       	rcall	.+1138   	; 0x9f8 <Timer_Create>
		_timer[1].state = BLOCKED;
 586:	19 8a       	std	Y+17, r1	; 0x11
	
		Timer_Create(200, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	42 e2       	ldi	r20, 0x22	; 34
 58e:	51 e0       	ldi	r21, 0x01	; 1
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	88 ec       	ldi	r24, 0xC8	; 200
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	2f d2       	rcall	.+1118   	; 0x9f8 <Timer_Create>
		_timer[2].state = BLOCKED;
 59a:	1a 8e       	std	Y+26, r1	; 0x1a
	
		Timer_Create(8000, 1, EXIT_Task, NULL);		// Item Exit Handling
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	4b e6       	ldi	r20, 0x6B	; 107
 5a2:	51 e0       	ldi	r21, 0x01	; 1
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	80 e4       	ldi	r24, 0x40	; 64
 5aa:	9f e1       	ldi	r25, 0x1F	; 31
 5ac:	25 d2       	rcall	.+1098   	; 0x9f8 <Timer_Create>
		_timer[3].state = BLOCKED;
 5ae:	1b a2       	std	Y+35, r1	; 0x23
	
		Timer_Create(8000, 1, ADD_Task, NULL);		// Item Enter Handling
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	46 ec       	ldi	r20, 0xC6	; 198
 5b6:	51 e0       	ldi	r21, 0x01	; 1
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	80 e4       	ldi	r24, 0x40	; 64
 5be:	9f e1       	ldi	r25, 0x1F	; 31
 5c0:	1b d2       	rcall	.+1078   	; 0x9f8 <Timer_Create>
		_timer[4].state = BLOCKED;
 5c2:	1c a6       	std	Y+44, r1	; 0x2c
	
		Timer_Create(1000, 1, BTN_Task, NULL);		// Button Handling
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	4c e9       	ldi	r20, 0x9C	; 156
 5ca:	51 e0       	ldi	r21, 0x01	; 1
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	88 ee       	ldi	r24, 0xE8	; 232
 5d2:	93 e0       	ldi	r25, 0x03	; 3
 5d4:	11 d2       	rcall	.+1058   	; 0x9f8 <Timer_Create>
		_timer[5].state = READY;
 5d6:	1d ab       	std	Y+53, r17	; 0x35
	
		Timer_Create(27, 1, SERVER_Task, NULL);	// Event Handling
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	45 ee       	ldi	r20, 0xE5	; 229
 5de:	51 e0       	ldi	r21, 0x01	; 1
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	8b e1       	ldi	r24, 0x1B	; 27
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	07 d2       	rcall	.+1038   	; 0x9f8 <Timer_Create>
		_timer[6].state = READY;
 5ea:	1e af       	std	Y+62, r17	; 0x3e
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5ec:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 5ee:	ff cf       	rjmp	.-2      	; 0x5ee <main+0xb4>

000005f0 <__vector_default>:
		
	return 0;
}

ISR(BADISR_vect)
{
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
	while(1)
	{
		Timer_Create(4000, 1, C_Blinky, NULL);
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	49 ec       	ldi	r20, 0xC9	; 201
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	80 ea       	ldi	r24, 0xA0	; 160
 608:	9f e0       	ldi	r25, 0x0F	; 15
 60a:	f6 d1       	rcall	.+1004   	; 0x9f8 <Timer_Create>
 60c:	f6 cf       	rjmp	.-20     	; 0x5fa <__vector_default+0xa>

0000060e <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
 60e:	84 b5       	in	r24, 0x24	; 36
 610:	83 68       	ori	r24, 0x83	; 131
 612:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
 614:	85 b5       	in	r24, 0x25	; 37
 616:	83 60       	ori	r24, 0x03	; 3
 618:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
 61a:	80 e8       	ldi	r24, 0x80	; 128
 61c:	87 bd       	out	0x27, r24	; 39
 61e:	08 95       	ret

00000620 <PWM>:
}

void PWM(const int dutyCycle)
{
    OCR0A = dutyCycle;
 620:	87 bd       	out	0x27, r24	; 39
	if (dutyCycle) gMotorOn = 1;
 622:	89 2b       	or	r24, r25
 624:	21 f0       	breq	.+8      	; 0x62e <PWM+0xe>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <gMotorOn>
 62c:	08 95       	ret
	else gMotorOn = 0;
 62e:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <gMotorOn>
 632:	08 95       	ret

00000634 <STEPPER_Init>:
//TODO; Write spin down


void STEPPER_Init()
{
	stepper._stepNum = 0;
 634:	ec ed       	ldi	r30, 0xDC	; 220
 636:	f1 e0       	ldi	r31, 0x01	; 1
 638:	10 82       	st	Z, r1
	stepper.direction = 1;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
 63e:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
 640:	13 82       	std	Z+3, r1	; 0x03
	stepper._targetStep = 200;
 642:	88 ec       	ldi	r24, 0xC8	; 200
 644:	84 83       	std	Z+4, r24	; 0x04
	stepper._currentStep = 0;
 646:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
 648:	16 82       	std	Z+6, r1	; 0x06
	stepper._delay = 0x14;
 64a:	84 e1       	ldi	r24, 0x14	; 20
 64c:	87 83       	std	Z+7, r24	; 0x07
	PORTA = 0x30;
 64e:	80 e3       	ldi	r24, 0x30	; 48
 650:	82 b9       	out	0x02, r24	; 2
	PORTC = 0x00;
 652:	18 b8       	out	0x08, r1	; 8
	cli();
 654:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x90;
 656:	80 e9       	ldi	r24, 0x90	; 144
 658:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
 65c:	e0 eb       	ldi	r30, 0xB0	; 176
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	82 60       	ori	r24, 0x02	; 2
 664:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
 666:	e0 e7       	ldi	r30, 0x70	; 112
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	82 60       	ori	r24, 0x02	; 2
 66e:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
 670:	e1 eb       	ldi	r30, 0xB1	; 177
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	87 60       	ori	r24, 0x07	; 7
 678:	80 83       	st	Z, r24
	
	sei();
 67a:	78 94       	sei
 67c:	08 95       	ret

0000067e <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	86 1b       	sub	r24, r22
 682:	91 09       	sbc	r25, r1
	if (steps >= 0)
 684:	52 f0       	brmi	.+20     	; 0x69a <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
 686:	85 36       	cpi	r24, 0x65	; 101
 688:	91 05       	cpc	r25, r1
 68a:	8c f0       	brlt	.+34     	; 0x6ae <STEPPER_NumSteps+0x30>
 68c:	24 e6       	ldi	r18, 0x64	; 100
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	a9 01       	movw	r20, r18
 692:	48 1b       	sub	r20, r24
 694:	59 0b       	sbc	r21, r25
 696:	ca 01       	movw	r24, r20
 698:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
 69a:	8c 39       	cpi	r24, 0x9C	; 156
 69c:	5f ef       	ldi	r21, 0xFF	; 255
 69e:	95 07       	cpc	r25, r21
 6a0:	34 f0       	brlt	.+12     	; 0x6ae <STEPPER_NumSteps+0x30>
 6a2:	2c e9       	ldi	r18, 0x9C	; 156
 6a4:	3f ef       	ldi	r19, 0xFF	; 255
 6a6:	a9 01       	movw	r20, r18
 6a8:	48 1b       	sub	r20, r24
 6aa:	59 0b       	sbc	r21, r25
 6ac:	ca 01       	movw	r24, r20
	}
	return steps;
}
 6ae:	08 95       	ret

000006b0 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
 6b0:	0f 93       	push	r16
 6b2:	1f 93       	push	r17
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
 6b8:	cc ed       	ldi	r28, 0xDC	; 220
 6ba:	d1 e0       	ldi	r29, 0x01	; 1
 6bc:	0a 81       	ldd	r16, Y+2	; 0x02
 6be:	6b 81       	ldd	r22, Y+3	; 0x03
 6c0:	80 2f       	mov	r24, r16
 6c2:	dd df       	rcall	.-70     	; 0x67e <STEPPER_NumSteps>
 6c4:	18 2f       	mov	r17, r24
 6c6:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next pos
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
 6c8:	60 2f       	mov	r22, r16
 6ca:	8e 81       	ldd	r24, Y+6	; 0x06
 6cc:	d8 df       	rcall	.-80     	; 0x67e <STEPPER_NumSteps>
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
 6ce:	24 e0       	ldi	r18, 0x04	; 4
 6d0:	29 83       	std	Y+1, r18	; 0x01
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
 6d2:	9c 01       	movw	r18, r24
 6d4:	12 9f       	mul	r17, r18
 6d6:	c0 01       	movw	r24, r0
 6d8:	13 9f       	mul	r17, r19
 6da:	90 0d       	add	r25, r0
 6dc:	11 24       	eor	r1, r1
 6de:	89 2f       	mov	r24, r25
 6e0:	80 95       	com	r24
 6e2:	88 1f       	adc	r24, r24
 6e4:	88 27       	eor	r24, r24
 6e6:	88 1f       	adc	r24, r24
 6e8:	88 87       	std	Y+8, r24	; 0x08

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
 6ea:	1d 82       	std	Y+5, r1	; 0x05
}
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	08 95       	ret

000006f6 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
 6f6:	cf 93       	push	r28
 6f8:	df 93       	push	r29
	cli();
 6fa:	f8 94       	cli
	//Use this to set the target positions
	stepper.target = target;
 6fc:	cc ed       	ldi	r28, 0xDC	; 220
 6fe:	d1 e0       	ldi	r29, 0x01	; 1
 700:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
 702:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
 704:	d5 df       	rcall	.-86     	; 0x6b0 <STEPPER_Rotate>
	OCR2A = 0x07 * stepper._delay;
 706:	9f 81       	ldd	r25, Y+7	; 0x07
 708:	89 2f       	mov	r24, r25
 70a:	88 0f       	add	r24, r24
 70c:	88 0f       	add	r24, r24
 70e:	88 0f       	add	r24, r24
 710:	89 1b       	sub	r24, r25
 712:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
 716:	78 94       	sei
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <__vector_13>:

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	0b b6       	in	r0, 0x3b	; 59
 72a:	0f 92       	push	r0
 72c:	2f 93       	push	r18
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
 73a:	cf 93       	push	r28
 73c:	df 93       	push	r29
 73e:	00 d0       	rcall	.+0      	; 0x740 <__vector_13+0x22>
 740:	00 d0       	rcall	.+0      	; 0x742 <__vector_13+0x24>
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
 746:	86 e3       	ldi	r24, 0x36	; 54
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	a0 e0       	ldi	r26, 0x00	; 0
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	9e e2       	ldi	r25, 0x2E	; 46
 750:	ad e2       	ldi	r26, 0x2D	; 45
 752:	b5 e3       	ldi	r27, 0x35	; 53
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	9a 83       	std	Y+2, r25	; 0x02
 758:	ab 83       	std	Y+3, r26	; 0x03
 75a:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
 75c:	ec ed       	ldi	r30, 0xDC	; 220
 75e:	f1 e0       	ldi	r31, 0x01	; 1
 760:	95 81       	ldd	r25, Z+5	; 0x05
 762:	84 81       	ldd	r24, Z+4	; 0x04
 764:	98 17       	cp	r25, r24
 766:	08 f0       	brcs	.+2      	; 0x76a <__vector_13+0x4c>
 768:	51 c0       	rjmp	.+162    	; 0x80c <__vector_13+0xee>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
 76a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <stepper+0x1>
 76e:	84 30       	cpi	r24, 0x04	; 4
 770:	51 f4       	brne	.+20     	; 0x786 <__vector_13+0x68>
 772:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <stepper>
 776:	e1 e0       	ldi	r30, 0x01	; 1
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	ec 0f       	add	r30, r28
 77c:	fd 1f       	adc	r31, r29
 77e:	e8 0f       	add	r30, r24
 780:	f1 1d       	adc	r31, r1
 782:	80 81       	ld	r24, Z
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <__vector_13+0x82>
 786:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <stepper>
 78a:	e3 e0       	ldi	r30, 0x03	; 3
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	e8 1b       	sub	r30, r24
 790:	f1 09       	sbc	r31, r1
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	8c 0f       	add	r24, r28
 798:	9d 1f       	adc	r25, r29
 79a:	e8 0f       	add	r30, r24
 79c:	f9 1f       	adc	r31, r25
 79e:	80 81       	ld	r24, Z
 7a0:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
 7a2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <stepper>
 7a6:	83 30       	cpi	r24, 0x03	; 3
 7a8:	11 f0       	breq	.+4      	; 0x7ae <__vector_13+0x90>
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <__vector_13+0x92>
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	ec ed       	ldi	r30, 0xDC	; 220
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	80 83       	st	Z, r24

		stepper._currentStep++;
 7b6:	85 81       	ldd	r24, Z+5	; 0x05
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	85 83       	std	Z+5, r24	; 0x05

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
 7bc:	86 30       	cpi	r24, 0x06	; 6
 7be:	70 f0       	brcs	.+28     	; 0x7dc <__vector_13+0xbe>
 7c0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <stepper+0x7>
 7c4:	87 30       	cpi	r24, 0x07	; 7
 7c6:	50 f0       	brcs	.+20     	; 0x7dc <__vector_13+0xbe>
			stepper._delay--;
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
 7ce:	98 2f       	mov	r25, r24
 7d0:	99 0f       	add	r25, r25
 7d2:	99 0f       	add	r25, r25
 7d4:	99 0f       	add	r25, r25
 7d6:	98 1b       	sub	r25, r24
 7d8:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
 7dc:	ec ed       	ldi	r30, 0xDC	; 220
 7de:	f1 e0       	ldi	r31, 0x01	; 1
 7e0:	84 81       	ldd	r24, Z+4	; 0x04
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	25 81       	ldd	r18, Z+5	; 0x05
 7e6:	82 1b       	sub	r24, r18
 7e8:	91 09       	sbc	r25, r1
 7ea:	06 97       	sbiw	r24, 0x06	; 6
 7ec:	6c f5       	brge	.+90     	; 0x848 <__vector_13+0x12a>
 7ee:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <stepper+0x7>
 7f2:	83 31       	cpi	r24, 0x13	; 19
 7f4:	48 f5       	brcc	.+82     	; 0x848 <__vector_13+0x12a>
			stepper._delay++;
 7f6:	8f 5f       	subi	r24, 0xFF	; 255
 7f8:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
 7fc:	98 2f       	mov	r25, r24
 7fe:	99 0f       	add	r25, r25
 800:	99 0f       	add	r25, r25
 802:	99 0f       	add	r25, r25
 804:	98 1b       	sub	r25, r24
 806:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 80a:	1e c0       	rjmp	.+60     	; 0x848 <__vector_13+0x12a>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
 80c:	98 13       	cpse	r25, r24
 80e:	1c c0       	rjmp	.+56     	; 0x848 <__vector_13+0x12a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
 810:	ec ed       	ldi	r30, 0xDC	; 220
 812:	f1 e0       	ldi	r31, 0x01	; 1
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
 818:	80 85       	ldd	r24, Z+8	; 0x08
 81a:	88 23       	and	r24, r24
 81c:	19 f0       	breq	.+6      	; 0x824 <__vector_13+0x106>
 81e:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <stepper+0x7>
 822:	01 c0       	rjmp	.+2      	; 0x826 <__vector_13+0x108>
 824:	94 e1       	ldi	r25, 0x14	; 20
 826:	ec ed       	ldi	r30, 0xDC	; 220
 828:	f1 e0       	ldi	r31, 0x01	; 1
 82a:	97 83       	std	Z+7, r25	; 0x07
		OCR2A = 0x07 * stepper._delay;
 82c:	89 2f       	mov	r24, r25
 82e:	88 0f       	add	r24, r24
 830:	88 0f       	add	r24, r24
 832:	88 0f       	add	r24, r24
 834:	89 1b       	sub	r24, r25
 836:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
 83a:	80 85       	ldd	r24, Z+8	; 0x08
 83c:	88 23       	and	r24, r24
 83e:	11 f0       	breq	.+4      	; 0x844 <__vector_13+0x126>
 840:	82 b1       	in	r24, 0x02	; 2
 842:	01 c0       	rjmp	.+2      	; 0x846 <__vector_13+0x128>
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	82 b9       	out	0x02, r24	; 2
	}
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	0f 90       	pop	r0
 84e:	0f 90       	pop	r0
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0b be       	out	0x3b, r0	; 59
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	0f 90       	pop	r0
 86c:	1f 90       	pop	r1
 86e:	18 95       	reti

00000870 <SYS_Init>:

void SYS_Init()
{
	// Initialize system
	
	cli();
 870:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
 872:	e1 e6       	ldi	r30, 0x61	; 97
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	80 83       	st	Z, r24
	CLKPR = 0;
 87a:	10 82       	st	Z, r1
	
	UART_Init();
 87c:	1e d1       	rcall	.+572    	; 0xaba <UART_Init>
	GPIO_Init();
 87e:	52 de       	rcall	.-860    	; 0x524 <GPIO_Init>
	Timer_Init();
 880:	9f d0       	rcall	.+318    	; 0x9c0 <Timer_Init>
	PWM_Init();
 882:	c5 de       	rcall	.-630    	; 0x60e <PWM_Init>
 884:	27 dc       	rcall	.-1970   	; 0xd4 <ADC_Init>
	ADC_Init();
 886:	d6 de       	rcall	.-596    	; 0x634 <STEPPER_Init>
 888:	8f ef       	ldi	r24, 0xFF	; 255
	STEPPER_Init();
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <stepper_handle+0x1>
	stepper_handle = -1;
 890:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <stepper_handle>
 894:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <timer_handle+0x1>
 898:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <timer_handle>
	timer_handle = -1;
 89c:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <delay_flag+0x1>
 8a0:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <delay_flag>
	delay_flag = -1;
 8a4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <g_ADCCount+0x1>
 8a8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <g_ADCCount>
	
	g_ADCCount = 0;
 8ac:	84 e1       	ldi	r24, 0x14	; 20
 8ae:	e1 e7       	ldi	r30, 0x71	; 113
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
 8b2:	df 01       	movw	r26, r30
 8b4:	1d 92       	st	X+, r1
 8b6:	8a 95       	dec	r24
 8b8:	e9 f7       	brne	.-6      	; 0x8b4 <SYS_Init+0x44>
 8ba:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <g_ADCFlag>
 8be:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <HEAD+0x1>
	g_ADCFlag = 0;
 8c2:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <HEAD>
	
	HEAD = NULL;
 8c6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <TAIL+0x1>
 8ca:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <TAIL>
	TAIL = NULL;
 8ce:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <STAGE1+0x1>
 8d2:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <STAGE1>
	STAGE1 = NULL;
 8d6:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <STAGE2+0x1>
 8da:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <STAGE2>
	STAGE2 = NULL;
 8de:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <gSysCalibrated>
 8e2:	78 94       	sei
	
	gSysCalibrated = 0;
 8e4:	08 95       	ret

000008e6 <__vector_17>:
 8e6:	1f 92       	push	r1
	
	sei();
 8e8:	0f 92       	push	r0
 8ea:	0f b6       	in	r0, 0x3f	; 63


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 8ec:	0f 92       	push	r0
 8ee:	11 24       	eor	r1, r1
 8f0:	0b b6       	in	r0, 0x3b	; 59
 8f2:	0f 92       	push	r0
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	2f 93       	push	r18
 8fe:	3f 93       	push	r19
 900:	4f 93       	push	r20
 902:	5f 93       	push	r21
 904:	6f 93       	push	r22
 906:	7f 93       	push	r23
 908:	8f 93       	push	r24
 90a:	9f 93       	push	r25
 90c:	af 93       	push	r26
 90e:	bf 93       	push	r27
 910:	cf 93       	push	r28
 912:	df 93       	push	r29
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
	// Scheduler timer
		// Overhead: 30 us
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
 918:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_timer_tick>
 91c:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <_timer_tick+0x1>
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <_timer_tick+0x1>
 926:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <_timer_tick>
 92a:	c2 e9       	ldi	r28, 0x92	; 146
 92c:	d1 e0       	ldi	r29, 0x01	; 1
 92e:	0f 2e       	mov	r0, r31
 930:	fa ed       	ldi	r31, 0xDA	; 218
 932:	ef 2e       	mov	r14, r31
 934:	f1 e0       	ldi	r31, 0x01	; 1
 936:	ff 2e       	mov	r15, r31
 938:	f0 2d       	mov	r31, r0
 93a:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
 93c:	ec 81       	ldd	r30, Y+4	; 0x04
 93e:	fd 81       	ldd	r31, Y+5	; 0x05
 940:	30 97       	sbiw	r30, 0x00	; 0
 942:	09 f1       	breq	.+66     	; 0x986 <__vector_17+0xa0>
 944:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <_timer_tick>
 948:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <_timer_tick+0x1>
 94c:	28 81       	ld	r18, Y
 94e:	39 81       	ldd	r19, Y+1	; 0x01
 950:	28 17       	cp	r18, r24
 952:	39 07       	cpc	r19, r25
 954:	c1 f4       	brne	.+48     	; 0x986 <__vector_17+0xa0>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
 956:	88 85       	ldd	r24, Y+8	; 0x08
 958:	82 30       	cpi	r24, 0x02	; 2
 95a:	19 f4       	brne	.+6      	; 0x962 <__vector_17+0x7c>
 95c:	8e 81       	ldd	r24, Y+6	; 0x06
 95e:	9f 81       	ldd	r25, Y+7	; 0x07
 960:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
 962:	d8 01       	movw	r26, r16
 964:	12 96       	adiw	r26, 0x02	; 2
 966:	8d 91       	ld	r24, X+
 968:	9c 91       	ld	r25, X
 96a:	13 97       	sbiw	r26, 0x03	; 3
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	41 f0       	breq	.+16     	; 0x980 <__vector_17+0x9a>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
 970:	2d 91       	ld	r18, X+
 972:	3c 91       	ld	r19, X
 974:	11 97       	sbiw	r26, 0x01	; 1
 976:	82 0f       	add	r24, r18
 978:	93 1f       	adc	r25, r19
 97a:	8d 93       	st	X+, r24
 97c:	9c 93       	st	X, r25
 97e:	03 c0       	rjmp	.+6      	; 0x986 <__vector_17+0xa0>
				} else {
				/* If timer is not periodic, clear the callback to disable */
				_timer[i].callback = NULL;
 980:	f8 01       	movw	r30, r16
 982:	15 82       	std	Z+5, r1	; 0x05
 984:	14 82       	std	Z+4, r1	; 0x04
 986:	29 96       	adiw	r28, 0x09	; 9
	// uint16_t stop = 0;
	_timer_tick++;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
 988:	ce 15       	cp	r28, r14
 98a:	df 05       	cpc	r29, r15
 98c:	b1 f6       	brne	.-84     	; 0x93a <__vector_17+0x54>
	 * sprintf(buf,"%u\r\n", total);
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
}
 98e:	ff 91       	pop	r31
 990:	ef 91       	pop	r30
 992:	df 91       	pop	r29
 994:	cf 91       	pop	r28
 996:	bf 91       	pop	r27
 998:	af 91       	pop	r26
 99a:	9f 91       	pop	r25
 99c:	8f 91       	pop	r24
 99e:	7f 91       	pop	r23
 9a0:	6f 91       	pop	r22
 9a2:	5f 91       	pop	r21
 9a4:	4f 91       	pop	r20
 9a6:	3f 91       	pop	r19
 9a8:	2f 91       	pop	r18
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	ff 90       	pop	r15
 9b0:	ef 90       	pop	r14
 9b2:	0f 90       	pop	r0
 9b4:	0b be       	out	0x3b, r0	; 59
 9b6:	0f 90       	pop	r0
 9b8:	0f be       	out	0x3f, r0	; 63
 9ba:	0f 90       	pop	r0
 9bc:	1f 90       	pop	r1
 9be:	18 95       	reti

000009c0 <Timer_Init>:


int Timer_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
 9c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 9c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x03E8;   // for 1 msec at 1 MHz
 9c8:	88 ee       	ldi	r24, 0xE8	; 232
 9ca:	93 e0       	ldi	r25, 0x03	; 3
 9cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 9d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
 9d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
 9d8:	89 e0       	ldi	r24, 0x09	; 9
 9da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
 9e4:	88 e4       	ldi	r24, 0x48	; 72
 9e6:	e2 e9       	ldi	r30, 0x92	; 146
 9e8:	f1 e0       	ldi	r31, 0x01	; 1
 9ea:	df 01       	movw	r26, r30
 9ec:	1d 92       	st	X+, r1
 9ee:	8a 95       	dec	r24
 9f0:	e9 f7       	brne	.-6      	; 0x9ec <Timer_Init+0x2c>

	return 0;
}
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	08 95       	ret

000009f8 <Timer_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int Timer_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
 a02:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <_timer+0x4>
 a06:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <_timer+0x5>
 a0a:	67 2b       	or	r22, r23
 a0c:	09 f4       	brne	.+2      	; 0xa10 <Timer_Create+0x18>
 a0e:	49 c0       	rjmp	.+146    	; 0xaa2 <Timer_Create+0xaa>
 a10:	e2 e9       	ldi	r30, 0x92	; 146
 a12:	f1 e0       	ldi	r31, 0x01	; 1
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 a14:	a1 e0       	ldi	r26, 0x01	; 1
 a16:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
 a18:	c5 85       	ldd	r28, Z+13	; 0x0d
 a1a:	d6 85       	ldd	r29, Z+14	; 0x0e
 a1c:	cd 2b       	or	r28, r29
 a1e:	09 f4       	brne	.+2      	; 0xa22 <Timer_Create+0x2a>
 a20:	42 c0       	rjmp	.+132    	; 0xaa6 <Timer_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 a22:	11 96       	adiw	r26, 0x01	; 1
 a24:	39 96       	adiw	r30, 0x09	; 9
 a26:	a8 30       	cpi	r26, 0x08	; 8
 a28:	b1 05       	cpc	r27, r1
 a2a:	b1 f7       	brne	.-20     	; 0xa18 <Timer_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	3f c0       	rjmp	.+126    	; 0xab0 <Timer_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
 a32:	fd 01       	movw	r30, r26
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	ee 0f       	add	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	ea 0f       	add	r30, r26
 a42:	fb 1f       	adc	r31, r27
 a44:	ee 56       	subi	r30, 0x6E	; 110
 a46:	fe 4f       	sbci	r31, 0xFE	; 254
 a48:	93 83       	std	Z+3, r25	; 0x03
 a4a:	82 83       	std	Z+2, r24	; 0x02
 a4c:	0d c0       	rjmp	.+26     	; 0xa68 <Timer_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
 a4e:	fd 01       	movw	r30, r26
 a50:	ee 0f       	add	r30, r30
 a52:	ff 1f       	adc	r31, r31
 a54:	ee 0f       	add	r30, r30
 a56:	ff 1f       	adc	r31, r31
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	ea 0f       	add	r30, r26
 a5e:	fb 1f       	adc	r31, r27
 a60:	ee 56       	subi	r30, 0x6E	; 110
 a62:	fe 4f       	sbci	r31, 0xFE	; 254
 a64:	13 82       	std	Z+3, r1	; 0x03
 a66:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
 a68:	fd 01       	movw	r30, r26
 a6a:	ee 0f       	add	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	ee 0f       	add	r30, r30
 a70:	ff 1f       	adc	r31, r31
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	ea 0f       	add	r30, r26
 a78:	fb 1f       	adc	r31, r27
 a7a:	ee 56       	subi	r30, 0x6E	; 110
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	55 83       	std	Z+5, r21	; 0x05
 a80:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
 a82:	37 83       	std	Z+7, r19	; 0x07
 a84:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
 a86:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <_timer_tick>
 a8a:	30 91 68 01 	lds	r19, 0x0168	; 0x800168 <_timer_tick+0x1>
 a8e:	82 0f       	add	r24, r18
 a90:	93 1f       	adc	r25, r19
 a92:	91 83       	std	Z+1, r25	; 0x01
 a94:	80 83       	st	Z, r24
			_timer[i].state = READY;
 a96:	82 e0       	ldi	r24, 0x02	; 2
 a98:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 a9a:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
 a9c:	8a 2f       	mov	r24, r26
 a9e:	9b 2f       	mov	r25, r27
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <Timer_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
 aa2:	a0 e0       	ldi	r26, 0x00	; 0
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 aa6:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 aa8:	f8 94       	cli
		{
			
			if (periodic != 0) 
 aaa:	01 2b       	or	r16, r17
 aac:	11 f6       	brne	.-124    	; 0xa32 <Timer_Create+0x3a>
 aae:	cf cf       	rjmp	.-98     	; 0xa4e <Timer_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	08 95       	ret

00000aba <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
 aba:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
 abe:	83 e3       	ldi	r24, 0x33	; 51
 ac0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 ac4:	e9 ec       	ldi	r30, 0xC9	; 201
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	88 61       	ori	r24, 0x18	; 24
 acc:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 ace:	ea ec       	ldi	r30, 0xCA	; 202
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	86 60       	ori	r24, 0x06	; 6
 ad6:	80 83       	st	Z, r24
 ad8:	08 95       	ret

00000ada <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
 ada:	e8 ec       	ldi	r30, 0xC8	; 200
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	90 81       	ld	r25, Z
 ae0:	95 ff       	sbrs	r25, 5
 ae2:	fd cf       	rjmp	.-6      	; 0xade <UART_SendChar+0x4>
	UDR1 = c;
 ae4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 ae8:	08 95       	ret

00000aea <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
 aea:	cf 93       	push	r28
 aec:	df 93       	push	r29
 aee:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 af0:	88 81       	ld	r24, Y
 af2:	88 23       	and	r24, r24
 af4:	29 f0       	breq	.+10     	; 0xb00 <UART_SendString+0x16>
 af6:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
 af8:	f0 df       	rcall	.-32     	; 0xada <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
 afa:	89 91       	ld	r24, Y+
 afc:	81 11       	cpse	r24, r1
 afe:	fc cf       	rjmp	.-8      	; 0xaf8 <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	08 95       	ret

00000b06 <__udivmodsi4>:
 b06:	a1 e2       	ldi	r26, 0x21	; 33
 b08:	1a 2e       	mov	r1, r26
 b0a:	aa 1b       	sub	r26, r26
 b0c:	bb 1b       	sub	r27, r27
 b0e:	fd 01       	movw	r30, r26
 b10:	0d c0       	rjmp	.+26     	; 0xb2c <__udivmodsi4_ep>

00000b12 <__udivmodsi4_loop>:
 b12:	aa 1f       	adc	r26, r26
 b14:	bb 1f       	adc	r27, r27
 b16:	ee 1f       	adc	r30, r30
 b18:	ff 1f       	adc	r31, r31
 b1a:	a2 17       	cp	r26, r18
 b1c:	b3 07       	cpc	r27, r19
 b1e:	e4 07       	cpc	r30, r20
 b20:	f5 07       	cpc	r31, r21
 b22:	20 f0       	brcs	.+8      	; 0xb2c <__udivmodsi4_ep>
 b24:	a2 1b       	sub	r26, r18
 b26:	b3 0b       	sbc	r27, r19
 b28:	e4 0b       	sbc	r30, r20
 b2a:	f5 0b       	sbc	r31, r21

00000b2c <__udivmodsi4_ep>:
 b2c:	66 1f       	adc	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	1a 94       	dec	r1
 b36:	69 f7       	brne	.-38     	; 0xb12 <__udivmodsi4_loop>
 b38:	60 95       	com	r22
 b3a:	70 95       	com	r23
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	bd 01       	movw	r22, r26
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret

00000b4a <malloc>:
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	cf 93       	push	r28
 b50:	df 93       	push	r29
 b52:	82 30       	cpi	r24, 0x02	; 2
 b54:	91 05       	cpc	r25, r1
 b56:	10 f4       	brcc	.+4      	; 0xb5c <malloc+0x12>
 b58:	82 e0       	ldi	r24, 0x02	; 2
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <__flp>
 b60:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <__flp+0x1>
 b64:	20 e0       	ldi	r18, 0x00	; 0
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	a0 e0       	ldi	r26, 0x00	; 0
 b6a:	b0 e0       	ldi	r27, 0x00	; 0
 b6c:	30 97       	sbiw	r30, 0x00	; 0
 b6e:	19 f1       	breq	.+70     	; 0xbb6 <malloc+0x6c>
 b70:	40 81       	ld	r20, Z
 b72:	51 81       	ldd	r21, Z+1	; 0x01
 b74:	02 81       	ldd	r16, Z+2	; 0x02
 b76:	13 81       	ldd	r17, Z+3	; 0x03
 b78:	48 17       	cp	r20, r24
 b7a:	59 07       	cpc	r21, r25
 b7c:	c8 f0       	brcs	.+50     	; 0xbb0 <malloc+0x66>
 b7e:	84 17       	cp	r24, r20
 b80:	95 07       	cpc	r25, r21
 b82:	69 f4       	brne	.+26     	; 0xb9e <malloc+0x54>
 b84:	10 97       	sbiw	r26, 0x00	; 0
 b86:	31 f0       	breq	.+12     	; 0xb94 <malloc+0x4a>
 b88:	12 96       	adiw	r26, 0x02	; 2
 b8a:	0c 93       	st	X, r16
 b8c:	12 97       	sbiw	r26, 0x02	; 2
 b8e:	13 96       	adiw	r26, 0x03	; 3
 b90:	1c 93       	st	X, r17
 b92:	27 c0       	rjmp	.+78     	; 0xbe2 <malloc+0x98>
 b94:	00 93 e7 01 	sts	0x01E7, r16	; 0x8001e7 <__flp>
 b98:	10 93 e8 01 	sts	0x01E8, r17	; 0x8001e8 <__flp+0x1>
 b9c:	22 c0       	rjmp	.+68     	; 0xbe2 <malloc+0x98>
 b9e:	21 15       	cp	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	19 f0       	breq	.+6      	; 0xbaa <malloc+0x60>
 ba4:	42 17       	cp	r20, r18
 ba6:	53 07       	cpc	r21, r19
 ba8:	18 f4       	brcc	.+6      	; 0xbb0 <malloc+0x66>
 baa:	9a 01       	movw	r18, r20
 bac:	bd 01       	movw	r22, r26
 bae:	ef 01       	movw	r28, r30
 bb0:	df 01       	movw	r26, r30
 bb2:	f8 01       	movw	r30, r16
 bb4:	db cf       	rjmp	.-74     	; 0xb6c <malloc+0x22>
 bb6:	21 15       	cp	r18, r1
 bb8:	31 05       	cpc	r19, r1
 bba:	f9 f0       	breq	.+62     	; 0xbfa <malloc+0xb0>
 bbc:	28 1b       	sub	r18, r24
 bbe:	39 0b       	sbc	r19, r25
 bc0:	24 30       	cpi	r18, 0x04	; 4
 bc2:	31 05       	cpc	r19, r1
 bc4:	80 f4       	brcc	.+32     	; 0xbe6 <malloc+0x9c>
 bc6:	8a 81       	ldd	r24, Y+2	; 0x02
 bc8:	9b 81       	ldd	r25, Y+3	; 0x03
 bca:	61 15       	cp	r22, r1
 bcc:	71 05       	cpc	r23, r1
 bce:	21 f0       	breq	.+8      	; 0xbd8 <malloc+0x8e>
 bd0:	fb 01       	movw	r30, r22
 bd2:	93 83       	std	Z+3, r25	; 0x03
 bd4:	82 83       	std	Z+2, r24	; 0x02
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <malloc+0x96>
 bd8:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <__flp+0x1>
 bdc:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <__flp>
 be0:	fe 01       	movw	r30, r28
 be2:	32 96       	adiw	r30, 0x02	; 2
 be4:	44 c0       	rjmp	.+136    	; 0xc6e <malloc+0x124>
 be6:	fe 01       	movw	r30, r28
 be8:	e2 0f       	add	r30, r18
 bea:	f3 1f       	adc	r31, r19
 bec:	81 93       	st	Z+, r24
 bee:	91 93       	st	Z+, r25
 bf0:	22 50       	subi	r18, 0x02	; 2
 bf2:	31 09       	sbc	r19, r1
 bf4:	39 83       	std	Y+1, r19	; 0x01
 bf6:	28 83       	st	Y, r18
 bf8:	3a c0       	rjmp	.+116    	; 0xc6e <malloc+0x124>
 bfa:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
 bfe:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
 c02:	23 2b       	or	r18, r19
 c04:	41 f4       	brne	.+16     	; 0xc16 <malloc+0xcc>
 c06:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c0a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c0e:	30 93 e6 01 	sts	0x01E6, r19	; 0x8001e6 <__brkval+0x1>
 c12:	20 93 e5 01 	sts	0x01E5, r18	; 0x8001e5 <__brkval>
 c16:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c1a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c1e:	21 15       	cp	r18, r1
 c20:	31 05       	cpc	r19, r1
 c22:	41 f4       	brne	.+16     	; 0xc34 <malloc+0xea>
 c24:	2d b7       	in	r18, 0x3d	; 61
 c26:	3e b7       	in	r19, 0x3e	; 62
 c28:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c2c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c30:	24 1b       	sub	r18, r20
 c32:	35 0b       	sbc	r19, r21
 c34:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <__brkval>
 c38:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <__brkval+0x1>
 c3c:	e2 17       	cp	r30, r18
 c3e:	f3 07       	cpc	r31, r19
 c40:	a0 f4       	brcc	.+40     	; 0xc6a <malloc+0x120>
 c42:	2e 1b       	sub	r18, r30
 c44:	3f 0b       	sbc	r19, r31
 c46:	28 17       	cp	r18, r24
 c48:	39 07       	cpc	r19, r25
 c4a:	78 f0       	brcs	.+30     	; 0xc6a <malloc+0x120>
 c4c:	ac 01       	movw	r20, r24
 c4e:	4e 5f       	subi	r20, 0xFE	; 254
 c50:	5f 4f       	sbci	r21, 0xFF	; 255
 c52:	24 17       	cp	r18, r20
 c54:	35 07       	cpc	r19, r21
 c56:	48 f0       	brcs	.+18     	; 0xc6a <malloc+0x120>
 c58:	4e 0f       	add	r20, r30
 c5a:	5f 1f       	adc	r21, r31
 c5c:	50 93 e6 01 	sts	0x01E6, r21	; 0x8001e6 <__brkval+0x1>
 c60:	40 93 e5 01 	sts	0x01E5, r20	; 0x8001e5 <__brkval>
 c64:	81 93       	st	Z+, r24
 c66:	91 93       	st	Z+, r25
 c68:	02 c0       	rjmp	.+4      	; 0xc6e <malloc+0x124>
 c6a:	e0 e0       	ldi	r30, 0x00	; 0
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	cf 01       	movw	r24, r30
 c70:	df 91       	pop	r29
 c72:	cf 91       	pop	r28
 c74:	1f 91       	pop	r17
 c76:	0f 91       	pop	r16
 c78:	08 95       	ret

00000c7a <free>:
 c7a:	cf 93       	push	r28
 c7c:	df 93       	push	r29
 c7e:	00 97       	sbiw	r24, 0x00	; 0
 c80:	09 f4       	brne	.+2      	; 0xc84 <free+0xa>
 c82:	81 c0       	rjmp	.+258    	; 0xd86 <free+0x10c>
 c84:	fc 01       	movw	r30, r24
 c86:	32 97       	sbiw	r30, 0x02	; 2
 c88:	13 82       	std	Z+3, r1	; 0x03
 c8a:	12 82       	std	Z+2, r1	; 0x02
 c8c:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <__flp>
 c90:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <__flp+0x1>
 c94:	10 97       	sbiw	r26, 0x00	; 0
 c96:	81 f4       	brne	.+32     	; 0xcb8 <free+0x3e>
 c98:	20 81       	ld	r18, Z
 c9a:	31 81       	ldd	r19, Z+1	; 0x01
 c9c:	82 0f       	add	r24, r18
 c9e:	93 1f       	adc	r25, r19
 ca0:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
 ca4:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
 ca8:	28 17       	cp	r18, r24
 caa:	39 07       	cpc	r19, r25
 cac:	51 f5       	brne	.+84     	; 0xd02 <free+0x88>
 cae:	f0 93 e6 01 	sts	0x01E6, r31	; 0x8001e6 <__brkval+0x1>
 cb2:	e0 93 e5 01 	sts	0x01E5, r30	; 0x8001e5 <__brkval>
 cb6:	67 c0       	rjmp	.+206    	; 0xd86 <free+0x10c>
 cb8:	ed 01       	movw	r28, r26
 cba:	20 e0       	ldi	r18, 0x00	; 0
 cbc:	30 e0       	ldi	r19, 0x00	; 0
 cbe:	ce 17       	cp	r28, r30
 cc0:	df 07       	cpc	r29, r31
 cc2:	40 f4       	brcc	.+16     	; 0xcd4 <free+0x5a>
 cc4:	4a 81       	ldd	r20, Y+2	; 0x02
 cc6:	5b 81       	ldd	r21, Y+3	; 0x03
 cc8:	9e 01       	movw	r18, r28
 cca:	41 15       	cp	r20, r1
 ccc:	51 05       	cpc	r21, r1
 cce:	f1 f0       	breq	.+60     	; 0xd0c <free+0x92>
 cd0:	ea 01       	movw	r28, r20
 cd2:	f5 cf       	rjmp	.-22     	; 0xcbe <free+0x44>
 cd4:	d3 83       	std	Z+3, r29	; 0x03
 cd6:	c2 83       	std	Z+2, r28	; 0x02
 cd8:	40 81       	ld	r20, Z
 cda:	51 81       	ldd	r21, Z+1	; 0x01
 cdc:	84 0f       	add	r24, r20
 cde:	95 1f       	adc	r25, r21
 ce0:	c8 17       	cp	r28, r24
 ce2:	d9 07       	cpc	r29, r25
 ce4:	59 f4       	brne	.+22     	; 0xcfc <free+0x82>
 ce6:	88 81       	ld	r24, Y
 ce8:	99 81       	ldd	r25, Y+1	; 0x01
 cea:	84 0f       	add	r24, r20
 cec:	95 1f       	adc	r25, r21
 cee:	02 96       	adiw	r24, 0x02	; 2
 cf0:	91 83       	std	Z+1, r25	; 0x01
 cf2:	80 83       	st	Z, r24
 cf4:	8a 81       	ldd	r24, Y+2	; 0x02
 cf6:	9b 81       	ldd	r25, Y+3	; 0x03
 cf8:	93 83       	std	Z+3, r25	; 0x03
 cfa:	82 83       	std	Z+2, r24	; 0x02
 cfc:	21 15       	cp	r18, r1
 cfe:	31 05       	cpc	r19, r1
 d00:	29 f4       	brne	.+10     	; 0xd0c <free+0x92>
 d02:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <__flp+0x1>
 d06:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <__flp>
 d0a:	3d c0       	rjmp	.+122    	; 0xd86 <free+0x10c>
 d0c:	e9 01       	movw	r28, r18
 d0e:	fb 83       	std	Y+3, r31	; 0x03
 d10:	ea 83       	std	Y+2, r30	; 0x02
 d12:	49 91       	ld	r20, Y+
 d14:	59 91       	ld	r21, Y+
 d16:	c4 0f       	add	r28, r20
 d18:	d5 1f       	adc	r29, r21
 d1a:	ec 17       	cp	r30, r28
 d1c:	fd 07       	cpc	r31, r29
 d1e:	61 f4       	brne	.+24     	; 0xd38 <free+0xbe>
 d20:	80 81       	ld	r24, Z
 d22:	91 81       	ldd	r25, Z+1	; 0x01
 d24:	84 0f       	add	r24, r20
 d26:	95 1f       	adc	r25, r21
 d28:	02 96       	adiw	r24, 0x02	; 2
 d2a:	e9 01       	movw	r28, r18
 d2c:	99 83       	std	Y+1, r25	; 0x01
 d2e:	88 83       	st	Y, r24
 d30:	82 81       	ldd	r24, Z+2	; 0x02
 d32:	93 81       	ldd	r25, Z+3	; 0x03
 d34:	9b 83       	std	Y+3, r25	; 0x03
 d36:	8a 83       	std	Y+2, r24	; 0x02
 d38:	e0 e0       	ldi	r30, 0x00	; 0
 d3a:	f0 e0       	ldi	r31, 0x00	; 0
 d3c:	12 96       	adiw	r26, 0x02	; 2
 d3e:	8d 91       	ld	r24, X+
 d40:	9c 91       	ld	r25, X
 d42:	13 97       	sbiw	r26, 0x03	; 3
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	19 f0       	breq	.+6      	; 0xd4e <free+0xd4>
 d48:	fd 01       	movw	r30, r26
 d4a:	dc 01       	movw	r26, r24
 d4c:	f7 cf       	rjmp	.-18     	; 0xd3c <free+0xc2>
 d4e:	8d 91       	ld	r24, X+
 d50:	9c 91       	ld	r25, X
 d52:	11 97       	sbiw	r26, 0x01	; 1
 d54:	9d 01       	movw	r18, r26
 d56:	2e 5f       	subi	r18, 0xFE	; 254
 d58:	3f 4f       	sbci	r19, 0xFF	; 255
 d5a:	82 0f       	add	r24, r18
 d5c:	93 1f       	adc	r25, r19
 d5e:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <__brkval>
 d62:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <__brkval+0x1>
 d66:	28 17       	cp	r18, r24
 d68:	39 07       	cpc	r19, r25
 d6a:	69 f4       	brne	.+26     	; 0xd86 <free+0x10c>
 d6c:	30 97       	sbiw	r30, 0x00	; 0
 d6e:	29 f4       	brne	.+10     	; 0xd7a <free+0x100>
 d70:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <__flp+0x1>
 d74:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <__flp>
 d78:	02 c0       	rjmp	.+4      	; 0xd7e <free+0x104>
 d7a:	13 82       	std	Z+3, r1	; 0x03
 d7c:	12 82       	std	Z+2, r1	; 0x02
 d7e:	b0 93 e6 01 	sts	0x01E6, r27	; 0x8001e6 <__brkval+0x1>
 d82:	a0 93 e5 01 	sts	0x01E5, r26	; 0x8001e5 <__brkval>
 d86:	df 91       	pop	r29
 d88:	cf 91       	pop	r28
 d8a:	08 95       	ret

00000d8c <_exit>:
 d8c:	f8 94       	cli

00000d8e <__stop_program>:
 d8e:	ff cf       	rjmp	.-2      	; 0xd8e <__stop_program>
