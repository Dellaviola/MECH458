
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00001ad0  00001b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800306  00800306  00001d6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005000  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a89  00000000  00000000  00007120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032ac  00000000  00000000  00008ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e0  00000000  00000000  0000be58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009224  00000000  00000000  0000c638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f7  00000000  00000000  0001585c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00017153  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00017443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	26 c5       	rjmp	.+2636   	; 0xa82 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 ed       	ldi	r30, 0xD0	; 208
      ac:	fa e1       	ldi	r31, 0x1A	; 26
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a6 30       	cpi	r26, 0x06	; 6
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a6 e0       	ldi	r26, 0x06	; 6
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a3 39       	cpi	r26, 0x93	; 147
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	6c d3       	rcall	.+1752   	; 0x7a8 <main>
      d0:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <_exit>

000000d4 <__bad_interrupt>:
      d4:	14 c4       	rjmp	.+2088   	; 0x8fe <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     120:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     12c:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <g_ADCCount+0x1>
     13a:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	ee 5e       	subi	r30, 0xEE	; 238
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     162:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	16 c0       	rjmp	.+44     	; 0x1be <SERVER_Task+0x34>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     196:	88 23       	and	r24, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <SERVER_Task+0x30>
     19a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     19e:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     1aa:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     1ae:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     1b2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     1b6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2375>
     1be:	66 99       	sbic	0x0c, 6	; 12
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <SERVER_Task+0x54>
     1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     1c6:	88 23       	and	r24, r24
     1c8:	41 f0       	breq	.+16     	; 0x1da <SERVER_Task+0x50>
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     1d0:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     1d4:	c8 d2       	rcall	.+1424   	; 0x766 <LL_UpdateStatus>
     1d6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2376>
     1de:	65 99       	sbic	0x0c, 5	; 12
     1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <SERVER_Task+0x6e>
     1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     1e6:	88 23       	and	r24, r24
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <SERVER_Task+0x6a>
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_timer+0x23>
     1f0:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2377>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <SERVER_Task+0x8e>
     1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     200:	81 11       	cpse	r24, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <SERVER_Task+0x88>
     204:	e2 e3       	ldi	r30, 0x32	; 50
     206:	f3 e0       	ldi	r31, 0x03	; 3
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	82 8f       	std	Z+26, r24	; 0x1a
     20c:	84 a7       	std	Z+44, r24	; 0x2c
     20e:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <_timer+0x47>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2375>
     218:	66 9b       	sbis	0x0c, 6	; 12
     21a:	2a c0       	rjmp	.+84     	; 0x270 <SERVER_Task+0xe6>
     21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     220:	81 11       	cpse	r24, r1
     222:	23 c0       	rjmp	.+70     	; 0x26a <SERVER_Task+0xe0>
     224:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     228:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	71 f4       	brne	.+28     	; 0x24c <SERVER_Task+0xc2>
     230:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     234:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     238:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <STAGE2+0x1>
     23c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <STAGE2>
     240:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <g_Timer>
     244:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <g_Timer+0x1>
     248:	98 d2       	rcall	.+1328   	; 0x77a <LL_UpdateTick>
     24a:	0a c0       	rjmp	.+20     	; 0x260 <SERVER_Task+0xd6>
     24c:	46 d2       	rcall	.+1164   	; 0x6da <LL_Next>
     24e:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <STAGE2+0x1>
     252:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <STAGE2>
     256:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <g_Timer>
     25a:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <g_Timer+0x1>
     25e:	8d d2       	rcall	.+1306   	; 0x77a <LL_UpdateTick>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	80 64       	ori	r24, 0x40	; 64
     268:	80 83       	st	Z, r24
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2376>
     270:	65 9b       	sbis	0x0c, 5	; 12
     272:	0f c0       	rjmp	.+30     	; 0x292 <SERVER_Task+0x108>
     274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     278:	81 11       	cpse	r24, r1
     27a:	08 c0       	rjmp	.+16     	; 0x28c <SERVER_Task+0x102>
     27c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     280:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     284:	50 d2       	rcall	.+1184   	; 0x726 <LL_GetClass>
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	09 f4       	brne	.+2      	; 0x28c <SERVER_Task+0x102>
     28a:	b2 d6       	rcall	.+3428   	; 0xff0 <SYS_Rampdown>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2377>
     292:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     296:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     29a:	45 d2       	rcall	.+1162   	; 0x726 <LL_GetClass>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	c9 f4       	brne	.+50     	; 0x2d2 <SERVER_Task+0x148>
     2a0:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <stepper+0xe>
     2a4:	81 11       	cpse	r24, r1
     2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <SERVER_Task+0x148>
     2a8:	c0 91 29 03 	lds	r28, 0x0329	; 0x800329 <g_Timer>
     2ac:	d0 91 2a 03 	lds	r29, 0x032A	; 0x80032a <g_Timer+0x1>
     2b0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     2b4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     2b8:	66 d2       	rcall	.+1228   	; 0x786 <LL_GetTick>
     2ba:	c8 1b       	sub	r28, r24
     2bc:	d9 0b       	sbc	r29, r25
     2be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <STAGE2_EXIT_TIME>
     2c2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <STAGE2_EXIT_TIME+0x1>
     2c6:	8c 17       	cp	r24, r28
     2c8:	9d 07       	cpc	r25, r29
     2ca:	18 f4       	brcc	.+6      	; 0x2d2 <SERVER_Task+0x148>
     2cc:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <memory.2378>
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <SERVER_Task+0x150>
     2d2:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <memory.2378>
     2d6:	81 11       	cpse	r24, r1
     2d8:	34 c0       	rjmp	.+104    	; 0x342 <SERVER_Task+0x1b8>
     2da:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     2de:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     2e2:	21 d2       	rcall	.+1090   	; 0x726 <LL_GetClass>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	69 f1       	breq	.+90     	; 0x342 <SERVER_Task+0x1b8>
     2e8:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     2ec:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	93 81       	ldd	r25, Z+3	; 0x03
     2f4:	18 d2       	rcall	.+1072   	; 0x726 <LL_GetClass>
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	21 f1       	breq	.+72     	; 0x342 <SERVER_Task+0x1b8>
     2fa:	ee e7       	ldi	r30, 0x7E	; 126
     2fc:	f3 e0       	ldi	r31, 0x03	; 3
     2fe:	84 81       	ldd	r24, Z+4	; 0x04
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	33 81       	ldd	r19, Z+3	; 0x03
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	82 17       	cp	r24, r18
     308:	93 07       	cpc	r25, r19
     30a:	d9 f4       	brne	.+54     	; 0x342 <SERVER_Task+0x1b8>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <memory.2378>
     312:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     316:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	93 81       	ldd	r25, Z+3	; 0x03
     31e:	03 d2       	rcall	.+1030   	; 0x726 <LL_GetClass>
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e7 5f       	subi	r30, 0xF7	; 247
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	c0 81       	ld	r28, Z
     32a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     32e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     332:	f9 d1       	rcall	.+1010   	; 0x726 <LL_GetClass>
     334:	e8 2f       	mov	r30, r24
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e7 5f       	subi	r30, 0xF7	; 247
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	80 81       	ld	r24, Z
     33e:	6c 2f       	mov	r22, r28
     340:	80 d3       	rcall	.+1792   	; 0xa42 <STEPPER_SetRotation>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <ADC_Task>:
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	e2 e1       	ldi	r30, 0x12	; 18
     354:	f3 e0       	ldi	r31, 0x03	; 3
     356:	a0 81       	ld	r26, Z
     358:	b1 81       	ldd	r27, Z+1	; 0x01
     35a:	60 81       	ld	r22, Z
     35c:	71 81       	ldd	r23, Z+1	; 0x01
     35e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <ticks.2386>
     362:	8f 5f       	subi	r24, 0xFF	; 255
     364:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <ticks.2386>
     368:	c1 2c       	mov	r12, r1
     36a:	d1 2c       	mov	r13, r1
     36c:	76 01       	movw	r14, r12
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	4f b7       	in	r20, 0x3f	; 63
     374:	f8 94       	cli
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ee 5e       	subi	r30, 0xEE	; 238
     37e:	fc 4f       	sbci	r31, 0xFC	; 252
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	c2 0e       	add	r12, r18
     386:	d3 1e       	adc	r13, r19
     388:	e1 1c       	adc	r14, r1
     38a:	f1 1c       	adc	r15, r1
     38c:	20 81       	ld	r18, Z
     38e:	31 81       	ldd	r19, Z+1	; 0x01
     390:	26 17       	cp	r18, r22
     392:	37 07       	cpc	r19, r23
     394:	38 f4       	brcc	.+14     	; 0x3a4 <ADC_Task+0x5c>
     396:	fc 01       	movw	r30, r24
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ee 5e       	subi	r30, 0xEE	; 238
     39e:	fc 4f       	sbci	r31, 0xFC	; 252
     3a0:	60 81       	ld	r22, Z
     3a2:	71 81       	ldd	r23, Z+1	; 0x01
     3a4:	fc 01       	movw	r30, r24
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ee 5e       	subi	r30, 0xEE	; 238
     3ac:	fc 4f       	sbci	r31, 0xFC	; 252
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	a2 17       	cp	r26, r18
     3b4:	b3 07       	cpc	r27, r19
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <ADC_Task+0x72>
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ba:	fc 01       	movw	r30, r24
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	ee 5e       	subi	r30, 0xEE	; 238
     3c2:	fc 4f       	sbci	r31, 0xFC	; 252
     3c4:	a0 81       	ld	r26, Z
     3c6:	b1 81       	ldd	r27, Z+1	; 0x01
     3c8:	45 c0       	rjmp	.+138    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ca:	8f b7       	in	r24, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	ca 1a       	sub	r12, r26
     3d0:	db 0a       	sbc	r13, r27
     3d2:	e1 08       	sbc	r14, r1
     3d4:	f1 08       	sbc	r15, r1
     3d6:	c6 1a       	sub	r12, r22
     3d8:	d7 0a       	sbc	r13, r23
     3da:	e1 08       	sbc	r14, r1
     3dc:	f1 08       	sbc	r15, r1
     3de:	f6 94       	lsr	r15
     3e0:	e7 94       	ror	r14
     3e2:	d7 94       	ror	r13
     3e4:	c7 94       	ror	r12
     3e6:	f6 94       	lsr	r15
     3e8:	e7 94       	ror	r14
     3ea:	d7 94       	ror	r13
     3ec:	c7 94       	ror	r12
     3ee:	8f bf       	out	0x3f, r24	; 63
     3f0:	cf b7       	in	r28, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	d7 01       	movw	r26, r14
     3f6:	c6 01       	movw	r24, r12
     3f8:	0b 97       	sbiw	r24, 0x0b	; 11
     3fa:	a1 09       	sbc	r26, r1
     3fc:	b1 09       	sbc	r27, r1
     3fe:	8d 3d       	cpi	r24, 0xDD	; 221
     400:	93 40       	sbci	r25, 0x03	; 3
     402:	a1 05       	cpc	r26, r1
     404:	b1 05       	cpc	r27, r1
     406:	a0 f4       	brcc	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     408:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     40c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     410:	8f d1       	rcall	.+798    	; 0x730 <LL_GetRefl>
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	c8 16       	cp	r12, r24
     418:	d9 06       	cpc	r13, r25
     41a:	ea 06       	cpc	r14, r26
     41c:	fb 06       	cpc	r15, r27
     41e:	40 f4       	brcc	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     420:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     424:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	11 f0       	breq	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	b6 01       	movw	r22, r12
     42e:	8b d1       	rcall	.+790    	; 0x746 <LL_UpdateRefl>
     430:	cf bf       	out	0x3f, r28	; 63
     432:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_ADCCount+0x1>
     436:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <g_ADCCount>
     43a:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_timer+0x11>
     43e:	66 9b       	sbis	0x0c, 6	; 12
     440:	06 c0       	rjmp	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     442:	ea e7       	ldi	r30, 0x7A	; 122
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
     44c:	0a c0       	rjmp	.+20     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     44e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <ticks.2386>
     452:	07 c0       	rjmp	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     454:	4f bf       	out	0x3f, r20	; 63
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	86 30       	cpi	r24, 0x06	; 6
     45a:	91 05       	cpc	r25, r1
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	89 cf       	rjmp	.-238    	; 0x372 <ADC_Task+0x2a>
     460:	b4 cf       	rjmp	.-152    	; 0x3ca <ADC_Task+0x82>
     462:	cf 91       	pop	r28
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <MAG_Task>:
     46e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <g_MotorOn>
     472:	88 23       	and	r24, r24
     474:	29 f0       	breq	.+10     	; 0x480 <MAG_Task+0x12>
     476:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <tick.2408>
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <tick.2408>
     480:	64 99       	sbic	0x0c, 4	; 12
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <MAG_Task+0x4a>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     48a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     48e:	6b d1       	rcall	.+726    	; 0x766 <LL_UpdateStatus>
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     496:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     49a:	5b d1       	rcall	.+694    	; 0x752 <LL_UpdateMag>
     49c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4a0:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4a4:	1a d1       	rcall	.+564    	; 0x6da <LL_Next>
     4a6:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     4aa:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     4ae:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <tick.2408>
     4b2:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_timer+0x1a>
     4b6:	08 95       	ret
     4b8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <tick.2408>
     4bc:	83 33       	cpi	r24, 0x33	; 51
     4be:	c8 f0       	brcs	.+50     	; 0x4f2 <MAG_Task+0x84>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4c6:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4ca:	4d d1       	rcall	.+666    	; 0x766 <LL_UpdateStatus>
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4d2:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4d6:	3d d1       	rcall	.+634    	; 0x752 <LL_UpdateMag>
     4d8:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4dc:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4e0:	fc d0       	rcall	.+504    	; 0x6da <LL_Next>
     4e2:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     4e6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     4ea:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <tick.2408>
     4ee:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_timer+0x1a>
     4f2:	08 95       	ret

000004f4 <EXIT_Task>:
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <g_Timer>
     506:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <g_Timer+0x1>
     50a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <EXIT_DELAY>
     50e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <EXIT_DELAY+0x1>
     512:	28 17       	cp	r18, r24
     514:	39 07       	cpc	r19, r25
     516:	18 f4       	brcc	.+6      	; 0x51e <EXIT_Task+0x2a>
     518:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     51c:	70 c0       	rjmp	.+224    	; 0x5fe <EXIT_Task+0x10a>
     51e:	00 91 29 03 	lds	r16, 0x0329	; 0x800329 <g_Timer>
     522:	10 91 2a 03 	lds	r17, 0x032A	; 0x80032a <g_Timer+0x1>
     526:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     52a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     52e:	fb d0       	rcall	.+502    	; 0x726 <LL_GetClass>
     530:	08 1b       	sub	r16, r24
     532:	11 09       	sbc	r17, r1
     534:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <STAGE2_EXIT_TIME>
     538:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <STAGE2_EXIT_TIME+0x1>
     53c:	08 17       	cp	r16, r24
     53e:	19 07       	cpc	r17, r25
     540:	18 f4       	brcc	.+6      	; 0x548 <EXIT_Task+0x54>
     542:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     546:	5b c0       	rjmp	.+182    	; 0x5fe <EXIT_Task+0x10a>
     548:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     54c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     550:	ea d0       	rcall	.+468    	; 0x726 <LL_GetClass>
     552:	ee e7       	ldi	r30, 0x7E	; 126
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	85 81       	ldd	r24, Z+5	; 0x05
     558:	96 81       	ldd	r25, Z+6	; 0x06
     55a:	97 81       	ldd	r25, Z+7	; 0x07
     55c:	89 1b       	sub	r24, r25
     55e:	89 83       	std	Y+1, r24	; 0x01
     560:	99 81       	ldd	r25, Y+1	; 0x01
     562:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <STEPPER_RANGE>
     566:	98 17       	cp	r25, r24
     568:	08 f0       	brcs	.+2      	; 0x56c <EXIT_Task+0x78>
     56a:	41 c0       	rjmp	.+130    	; 0x5ee <EXIT_Task+0xfa>
     56c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <stepper+0xe>
     570:	81 11       	cpse	r24, r1
     572:	3d c0       	rjmp	.+122    	; 0x5ee <EXIT_Task+0xfa>
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	85 30       	cpi	r24, 0x05	; 5
     578:	40 f4       	brcc	.+16     	; 0x58a <EXIT_Task+0x96>
     57a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     57e:	81 11       	cpse	r24, r1
     580:	04 c0       	rjmp	.+8      	; 0x58a <EXIT_Task+0x96>
     582:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <STEPPER_SET>
     586:	82 87       	std	Z+10, r24	; 0x0a
     588:	15 86       	std	Z+13, r1	; 0x0d
     58a:	63 e0       	ldi	r22, 0x03	; 3
     58c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     590:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     594:	e8 d0       	rcall	.+464    	; 0x766 <LL_UpdateStatus>
     596:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     59a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     59e:	f3 d0       	rcall	.+486    	; 0x786 <LL_GetTick>
     5a0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     5a4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     5a8:	98 d0       	rcall	.+304    	; 0x6da <LL_Next>
     5aa:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <HEAD+0x1>
     5ae:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <HEAD>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	b5 d1       	rcall	.+874    	; 0x922 <PWM>
     5b8:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     5bc:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	b0 d0       	rcall	.+352    	; 0x726 <LL_GetClass>
     5c6:	e8 2f       	mov	r30, r24
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	e7 5f       	subi	r30, 0xF7	; 247
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	10 81       	ld	r17, Z
     5d0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     5d4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     5d8:	a6 d0       	rcall	.+332    	; 0x726 <LL_GetClass>
     5da:	e8 2f       	mov	r30, r24
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e7 5f       	subi	r30, 0xF7	; 247
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	80 81       	ld	r24, Z
     5e4:	61 2f       	mov	r22, r17
     5e6:	2d d2       	rcall	.+1114   	; 0xa42 <STEPPER_SetRotation>
     5e8:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <EXIT_Task+0x100>
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	97 d1       	rcall	.+814    	; 0x922 <PWM>
     5f4:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     5f8:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     5fc:	94 d0       	rcall	.+296    	; 0x726 <LL_GetClass>
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <BTN_Task>:
     60a:	89 b1       	in	r24, 0x09	; 9
     60c:	83 70       	andi	r24, 0x03	; 3
     60e:	c1 f0       	breq	.+48     	; 0x640 <BTN_Task+0x36>
     610:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__data_end>
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
     61a:	8b 30       	cpi	r24, 0x0B	; 11
     61c:	98 f0       	brcs	.+38     	; 0x644 <BTN_Task+0x3a>
     61e:	89 b1       	in	r24, 0x09	; 9
     620:	83 70       	andi	r24, 0x03	; 3
     622:	81 f0       	breq	.+32     	; 0x644 <BTN_Task+0x3a>
     624:	89 b1       	in	r24, 0x09	; 9
     626:	83 70       	andi	r24, 0x03	; 3
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	19 f4       	brne	.+6      	; 0x632 <BTN_Task+0x28>
     62c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <g_PauseRequest>
     630:	08 95       	ret
     632:	89 b1       	in	r24, 0x09	; 9
     634:	83 70       	andi	r24, 0x03	; 3
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	29 f4       	brne	.+10     	; 0x644 <BTN_Task+0x3a>
     63a:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_timer+0x2c>
     63e:	08 95       	ret
     640:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <__data_end>
     644:	08 95       	ret

00000646 <WATCHDOG_Task>:
     646:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <g_WDTimeout>
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	18 f0       	brcs	.+6      	; 0x654 <WATCHDOG_Task+0xe>
     64e:	86 e1       	ldi	r24, 0x16	; 22
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	a8 d3       	rcall	.+1872   	; 0xda4 <SYS_Pause>
     654:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <g_WDTimeout>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <g_WDTimeout>
     65e:	08 95       	ret

00000660 <D_Blinky>:
     660:	9b b1       	in	r25, 0x0b	; 11
     662:	80 ea       	ldi	r24, 0xA0	; 160
     664:	89 27       	eor	r24, r25
     666:	8b b9       	out	0x0b, r24	; 11
     668:	08 95       	ret

0000066a <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     66a:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <g_MotorOn>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <ADD_Task+0x1a>
     672:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <g_Timer>
     676:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <g_Timer+0x1>
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <g_Timer+0x1>
     680:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <g_Timer>
     684:	08 95       	ret

00000686 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	7c 01       	movw	r14, r24
     692:	16 2f       	mov	r17, r22
     694:	d4 2f       	mov	r29, r20
     696:	c2 2f       	mov	r28, r18
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	1b d6       	rcall	.+3126   	; 0x12d4 <malloc>
     69e:	fc 01       	movw	r30, r24
     6a0:	f1 82       	std	Z+1, r15	; 0x01
     6a2:	e0 82       	st	Z, r14
     6a4:	12 83       	std	Z+2, r17	; 0x02
     6a6:	d3 83       	std	Z+3, r29	; 0x03
     6a8:	c4 83       	std	Z+4, r28	; 0x04
     6aa:	16 82       	std	Z+6, r1	; 0x06
     6ac:	15 82       	std	Z+5, r1	; 0x05
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <LL_ItemListInit>:
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	ec 01       	movw	r28, r24
     6c0:	86 e0       	ldi	r24, 0x06	; 6
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	07 d6       	rcall	.+3086   	; 0x12d4 <malloc>
     6c6:	fc 01       	movw	r30, r24
     6c8:	d1 83       	std	Z+1, r29	; 0x01
     6ca:	c0 83       	st	Z, r28
     6cc:	15 82       	std	Z+5, r1	; 0x05
     6ce:	14 82       	std	Z+4, r1	; 0x04
     6d0:	13 82       	std	Z+3, r1	; 0x03
     6d2:	12 82       	std	Z+2, r1	; 0x02
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <LL_Next>:
     6da:	fc 01       	movw	r30, r24
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	08 95       	ret

000006e2 <LL_AddBack>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <LL_AddBack+0xc>
     6ec:	e9 01       	movw	r28, r18
     6ee:	2a 81       	ldd	r18, Y+2	; 0x02
     6f0:	3b 81       	ldd	r19, Y+3	; 0x03
     6f2:	21 15       	cp	r18, r1
     6f4:	31 05       	cpc	r19, r1
     6f6:	d1 f7       	brne	.-12     	; 0x6ec <LL_AddBack+0xa>
     6f8:	e0 df       	rcall	.-64     	; 0x6ba <LL_ItemListInit>
     6fa:	9b 83       	std	Y+3, r25	; 0x03
     6fc:	8a 83       	std	Y+2, r24	; 0x02
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <LL_Size>:
     704:	dc 01       	movw	r26, r24
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	41 f0       	breq	.+16     	; 0x722 <LL_Size+0x1e>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	02 80       	ldd	r0, Z+2	; 0x02
     718:	f3 81       	ldd	r31, Z+3	; 0x03
     71a:	e0 2d       	mov	r30, r0
     71c:	30 97       	sbiw	r30, 0x00	; 0
     71e:	d1 f7       	brne	.-12     	; 0x714 <LL_Size+0x10>
     720:	08 95       	ret
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	08 95       	ret

00000726 <LL_GetClass>:
     726:	dc 01       	movw	r26, r24
     728:	ed 91       	ld	r30, X+
     72a:	fc 91       	ld	r31, X
     72c:	83 81       	ldd	r24, Z+3	; 0x03
     72e:	08 95       	ret

00000730 <LL_GetRefl>:
     730:	dc 01       	movw	r26, r24
     732:	ed 91       	ld	r30, X+
     734:	fc 91       	ld	r31, X
     736:	80 81       	ld	r24, Z
     738:	91 81       	ldd	r25, Z+1	; 0x01
     73a:	08 95       	ret

0000073c <LL_GetMag>:
     73c:	dc 01       	movw	r26, r24
     73e:	ed 91       	ld	r30, X+
     740:	fc 91       	ld	r31, X
     742:	82 81       	ldd	r24, Z+2	; 0x02
     744:	08 95       	ret

00000746 <LL_UpdateRefl>:
     746:	dc 01       	movw	r26, r24
     748:	ed 91       	ld	r30, X+
     74a:	fc 91       	ld	r31, X
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	60 83       	st	Z, r22
     750:	08 95       	ret

00000752 <LL_UpdateMag>:
     752:	dc 01       	movw	r26, r24
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	62 83       	std	Z+2, r22	; 0x02
     75a:	08 95       	ret

0000075c <LL_UpdateClass>:
     75c:	dc 01       	movw	r26, r24
     75e:	ed 91       	ld	r30, X+
     760:	fc 91       	ld	r31, X
     762:	63 83       	std	Z+3, r22	; 0x03
     764:	08 95       	ret

00000766 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     766:	dc 01       	movw	r26, r24
     768:	ed 91       	ld	r30, X+
     76a:	fc 91       	ld	r31, X
     76c:	64 83       	std	Z+4, r22	; 0x04
     76e:	08 95       	ret

00000770 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     770:	dc 01       	movw	r26, r24
     772:	ed 91       	ld	r30, X+
     774:	fc 91       	ld	r31, X
}
     776:	84 81       	ldd	r24, Z+4	; 0x04
     778:	08 95       	ret

0000077a <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     77a:	dc 01       	movw	r26, r24
     77c:	ed 91       	ld	r30, X+
     77e:	fc 91       	ld	r31, X
     780:	76 83       	std	Z+6, r23	; 0x06
     782:	65 83       	std	Z+5, r22	; 0x05
     784:	08 95       	ret

00000786 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     786:	dc 01       	movw	r26, r24
     788:	ed 91       	ld	r30, X+
     78a:	fc 91       	ld	r31, X
     78c:	85 81       	ldd	r24, Z+5	; 0x05
     78e:	96 81       	ldd	r25, Z+6	; 0x06
     790:	08 95       	ret

00000792 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     796:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     798:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     79a:	80 ef       	ldi	r24, 0xF0	; 240
     79c:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     79e:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     7a0:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	08 95       	ret

000007a8 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     7a8:	6c d2       	rcall	.+1240   	; 0xc82 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     7aa:	89 b1       	in	r24, 0x09	; 9
     7ac:	83 70       	andi	r24, 0x03	; 3
     7ae:	e9 f7       	brne	.-6      	; 0x7aa <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     7b0:	84 e2       	ldi	r24, 0x24	; 36
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	81 d5       	rcall	.+2818   	; 0x12b8 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7b6:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	45 ec       	ldi	r20, 0xC5	; 197
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fe d4       	rcall	.+2556   	; 0x11c6 <TIMER_Create>
		_timer[0].state = READY;
     7ca:	c2 e3       	ldi	r28, 0x32	; 50
     7cc:	d3 e0       	ldi	r29, 0x03	; 3
     7ce:	12 e0       	ldi	r17, 0x02	; 2
     7d0:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	44 ea       	ldi	r20, 0xA4	; 164
     7d8:	51 e0       	ldi	r21, 0x01	; 1
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	f1 d4       	rcall	.+2530   	; 0x11c6 <TIMER_Create>
		_timer[1].state = BLOCKED;
     7e4:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	47 e3       	ldi	r20, 0x37	; 55
     7ec:	52 e0       	ldi	r21, 0x02	; 2
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	e7 d4       	rcall	.+2510   	; 0x11c6 <TIMER_Create>
		_timer[2].state = BLOCKED;
     7f8:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	4a e7       	ldi	r20, 0x7A	; 122
     800:	52 e0       	ldi	r21, 0x02	; 2
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	dd d4       	rcall	.+2490   	; 0x11c6 <TIMER_Create>
		_timer[3].state = BLOCKED;
     80c:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	45 e3       	ldi	r20, 0x35	; 53
     814:	53 e0       	ldi	r21, 0x03	; 3
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	d3 d4       	rcall	.+2470   	; 0x11c6 <TIMER_Create>
		_timer[4].state = BLOCKED;
     820:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	45 e0       	ldi	r20, 0x05	; 5
     828:	53 e0       	ldi	r21, 0x03	; 3
     82a:	61 e0       	ldi	r22, 0x01	; 1
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	84 e6       	ldi	r24, 0x64	; 100
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	c9 d4       	rcall	.+2450   	; 0x11c6 <TIMER_Create>
		_timer[5].state = READY;
     834:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e3       	ldi	r20, 0x30	; 48
     83c:	53 e0       	ldi	r21, 0x03	; 3
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 ed       	ldi	r24, 0xD0	; 208
     844:	97 e0       	ldi	r25, 0x07	; 7
     846:	bf d4       	rcall	.+2430   	; 0x11c6 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     848:	1e af       	std	Y+62, r17	; 0x3e
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	43 e2       	ldi	r20, 0x23	; 35
     850:	53 e0       	ldi	r21, 0x03	; 3
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     858:	93 e1       	ldi	r25, 0x13	; 19
     85a:	b5 d4       	rcall	.+2410   	; 0x11c6 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     85c:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <_timer+0x47>
     860:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	29 d5       	rcall	.+2642   	; 0x12b8 <UART_SendString>
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     86a:	5b d0       	rcall	.+182    	; 0x922 <PWM>
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     86c:	78 94       	sei
     86e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <g_PauseRequest>
     872:	88 23       	and	r24, r24
     874:	19 f0       	breq	.+6      	; 0x87c <main+0xd4>
     876:	89 e4       	ldi	r24, 0x49	; 73
     878:	91 e0       	ldi	r25, 0x01	; 1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     87a:	94 d2       	rcall	.+1320   	; 0xda4 <SYS_Pause>
     87c:	c0 91 0c 03 	lds	r28, 0x030C	; 0x80030c <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     880:	d0 91 0d 03 	lds	r29, 0x030D	; 0x80030d <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     884:	20 97       	sbiw	r28, 0x00	; 0
     886:	99 f3       	breq	.-26     	; 0x86e <main+0xc6>
     888:	20 97       	sbiw	r28, 0x00	; 0
     88a:	91 f1       	breq	.+100    	; 0x8f0 <main+0x148>
     88c:	ce 01       	movw	r24, r28
     88e:	4b df       	rcall	.-362    	; 0x726 <LL_GetClass>
     890:	84 30       	cpi	r24, 0x04	; 4
     892:	71 f5       	brne	.+92     	; 0x8f0 <main+0x148>
     894:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     896:	6c df       	rcall	.-296    	; 0x770 <LL_GetStatus>
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	51 f5       	brne	.+84     	; 0x8f0 <main+0x148>
     89c:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     89e:	48 df       	rcall	.-368    	; 0x730 <LL_GetRefl>
     8a0:	8c 01       	movw	r16, r24
     8a2:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     8a4:	4b df       	rcall	.-362    	; 0x73c <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     8a6:	88 23       	and	r24, r24
     8a8:	91 f0       	breq	.+36     	; 0x8ce <main+0x126>
     8aa:	c8 01       	movw	r24, r16
     8ac:	0a 97       	sbiw	r24, 0x0a	; 10
     8ae:	83 32       	cpi	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     8b0:	91 40       	sbci	r25, 0x01	; 1
     8b2:	20 f4       	brcc	.+8      	; 0x8bc <main+0x114>
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     8b8:	51 df       	rcall	.-350    	; 0x75c <LL_UpdateClass>
     8ba:	1a c0       	rjmp	.+52     	; 0x8f0 <main+0x148>
     8bc:	0c 52       	subi	r16, 0x2C	; 44
     8be:	11 40       	sbci	r17, 0x01	; 1
     8c0:	05 3f       	cpi	r16, 0xF5	; 245
					{
						LL_UpdateClass(temp, STEEL);
     8c2:	11 40       	sbci	r17, 0x01	; 1
     8c4:	a8 f4       	brcc	.+42     	; 0x8f0 <main+0x148>
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     8ca:	48 df       	rcall	.-368    	; 0x75c <LL_UpdateClass>
     8cc:	11 c0       	rjmp	.+34     	; 0x8f0 <main+0x148>
     8ce:	c8 01       	movw	r24, r16
     8d0:	89 58       	subi	r24, 0x89	; 137
     8d2:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     8d4:	0b 97       	sbiw	r24, 0x0b	; 11
     8d6:	20 f4       	brcc	.+8      	; 0x8e0 <main+0x138>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	ce 01       	movw	r24, r28
     8dc:	3f df       	rcall	.-386    	; 0x75c <LL_UpdateClass>
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <main+0x148>
     8e0:	00 52       	subi	r16, 0x20	; 32
     8e2:	13 40       	sbci	r17, 0x03	; 3
     8e4:	0b 3a       	cpi	r16, 0xAB	; 171
     8e6:	11 05       	cpc	r17, r1
				{
					LL_UpdateClass(temp, BLACK);
     8e8:	18 f4       	brcc	.+6      	; 0x8f0 <main+0x148>
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	ce 01       	movw	r24, r28
     8ee:	36 df       	rcall	.-404    	; 0x75c <LL_UpdateClass>
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     8f0:	ce 01       	movw	r24, r28
     8f2:	f3 de       	rcall	.-538    	; 0x6da <LL_Next>
     8f4:	ec 01       	movw	r28, r24
     8f6:	89 2b       	or	r24, r25
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     8f8:	09 f0       	breq	.+2      	; 0x8fc <main+0x154>
     8fa:	c6 cf       	rjmp	.-116    	; 0x888 <main+0xe0>
     8fc:	b8 cf       	rjmp	.-144    	; 0x86e <main+0xc6>

000008fe <__vector_default>:
     8fe:	1f 92       	push	r1
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     908:	8a ea       	ldi	r24, 0xAA	; 170
     90a:	88 b9       	out	0x08, r24	; 8
     90c:	fe cf       	rjmp	.-4      	; 0x90a <__vector_default+0xc>

0000090e <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     90e:	84 b5       	in	r24, 0x24	; 36
     910:	83 68       	ori	r24, 0x83	; 131
     912:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     914:	85 b5       	in	r24, 0x25	; 37
     916:	83 60       	ori	r24, 0x03	; 3
     918:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     91a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     91e:	87 bd       	out	0x27, r24	; 39
     920:	08 95       	ret

00000922 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     922:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     924:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     926:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     928:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     92c:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     92e:	23 2b       	or	r18, r19
     930:	31 f0       	breq	.+12     	; 0x93e <PWM+0x1c>
		{
			g_MotorOn = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <g_MotorOn>
			PORTB = ~0x0E;
     938:	81 ef       	ldi	r24, 0xF1	; 241
     93a:	85 b9       	out	0x05, r24	; 5
     93c:	04 c0       	rjmp	.+8      	; 0x946 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     93e:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <g_MotorOn>
			PORTB = ~0x0F;
     942:	80 ef       	ldi	r24, 0xF0	; 240
     944:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     946:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     948:	08 95       	ret

0000094a <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     94a:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     94c:	ee e7       	ldi	r30, 0x7E	; 126
     94e:	f3 e0       	ldi	r31, 0x03	; 3
     950:	10 82       	st	Z, r1
	stepper.direction = 1;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     956:	13 82       	std	Z+3, r1	; 0x03
     958:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     95a:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     95c:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     95e:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     960:	11 86       	std	Z+9, r1	; 0x09
     962:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     964:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     966:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     968:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     96a:	88 ec       	ldi	r24, 0xC8	; 200
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	96 83       	std	Z+6, r25	; 0x06
     970:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     972:	80 e3       	ldi	r24, 0x30	; 48
     974:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     976:	84 e9       	ldi	r24, 0x94	; 148
     978:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     97c:	e0 eb       	ldi	r30, 0xB0	; 176
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	82 60       	ori	r24, 0x02	; 2
     984:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     986:	e0 e7       	ldi	r30, 0x70	; 112
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     990:	e1 eb       	ldi	r30, 0xB1	; 177
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	87 60       	ori	r24, 0x07	; 7
     998:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     99a:	78 94       	sei
     99c:	08 95       	ret

0000099e <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	86 1b       	sub	r24, r22
     9a2:	91 09       	sbc	r25, r1
	if (steps >= 0)
     9a4:	52 f0       	brmi	.+20     	; 0x9ba <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     9a6:	85 36       	cpi	r24, 0x65	; 101
     9a8:	91 05       	cpc	r25, r1
     9aa:	8c f0       	brlt	.+34     	; 0x9ce <STEPPER_NumSteps+0x30>
     9ac:	24 e6       	ldi	r18, 0x64	; 100
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	a9 01       	movw	r20, r18
     9b2:	48 1b       	sub	r20, r24
     9b4:	59 0b       	sbc	r21, r25
     9b6:	ca 01       	movw	r24, r20
     9b8:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     9ba:	8c 39       	cpi	r24, 0x9C	; 156
     9bc:	5f ef       	ldi	r21, 0xFF	; 255
     9be:	95 07       	cpc	r25, r21
     9c0:	34 f4       	brge	.+12     	; 0x9ce <STEPPER_NumSteps+0x30>
     9c2:	2c e9       	ldi	r18, 0x9C	; 156
     9c4:	3f ef       	ldi	r19, 0xFF	; 255
     9c6:	a9 01       	movw	r20, r18
     9c8:	48 1b       	sub	r20, r24
     9ca:	59 0b       	sbc	r21, r25
     9cc:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     9ce:	08 95       	ret

000009d0 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     9d4:	ce e7       	ldi	r28, 0x7E	; 126
     9d6:	d3 e0       	ldi	r29, 0x03	; 3
     9d8:	6c 81       	ldd	r22, Y+4	; 0x04
     9da:	8a 81       	ldd	r24, Y+2	; 0x02
     9dc:	9b 81       	ldd	r25, Y+3	; 0x03
     9de:	df df       	rcall	.-66     	; 0x99e <STEPPER_NumSteps>
     9e0:	9e 83       	std	Y+6, r25	; 0x06
     9e2:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     9e4:	6a 81       	ldd	r22, Y+2	; 0x02
     9e6:	7b 81       	ldd	r23, Y+3	; 0x03
     9e8:	88 85       	ldd	r24, Y+8	; 0x08
     9ea:	99 85       	ldd	r25, Y+9	; 0x09
     9ec:	d8 df       	rcall	.-80     	; 0x99e <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     9ee:	2d 81       	ldd	r18, Y+5	; 0x05
     9f0:	3e 81       	ldd	r19, Y+6	; 0x06
     9f2:	33 23       	and	r19, r19
     9f4:	14 f4       	brge	.+4      	; 0x9fa <STEPPER_Rotate+0x2a>
     9f6:	28 e0       	ldi	r18, 0x08	; 8
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <STEPPER_Rotate+0x2c>
     9fa:	24 e0       	ldi	r18, 0x04	; 4
     9fc:	ee e7       	ldi	r30, 0x7E	; 126
     9fe:	f3 e0       	ldi	r31, 0x03	; 3
     a00:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     a02:	45 81       	ldd	r20, Z+5	; 0x05
     a04:	56 81       	ldd	r21, Z+6	; 0x06
     a06:	84 9f       	mul	r24, r20
     a08:	90 01       	movw	r18, r0
     a0a:	85 9f       	mul	r24, r21
     a0c:	30 0d       	add	r19, r0
     a0e:	94 9f       	mul	r25, r20
     a10:	30 0d       	add	r19, r0
     a12:	11 24       	eor	r1, r1
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	12 16       	cp	r1, r18
     a18:	13 06       	cpc	r1, r19
     a1a:	0c f0       	brlt	.+2      	; 0xa1e <STEPPER_Rotate+0x4e>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	ee e7       	ldi	r30, 0x7E	; 126
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     a24:	85 81       	ldd	r24, Z+5	; 0x05
     a26:	96 81       	ldd	r25, Z+6	; 0x06
     a28:	99 23       	and	r25, r25
     a2a:	1c f4       	brge	.+6      	; 0xa32 <STEPPER_Rotate+0x62>
     a2c:	91 95       	neg	r25
     a2e:	81 95       	neg	r24
     a30:	91 09       	sbc	r25, r1
     a32:	ee e7       	ldi	r30, 0x7E	; 126
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	96 83       	std	Z+6, r25	; 0x06
     a38:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     a3a:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     a42:	ee e7       	ldi	r30, 0x7E	; 126
     a44:	f3 e0       	ldi	r31, 0x03	; 3
     a46:	24 81       	ldd	r18, Z+4	; 0x04
     a48:	42 81       	ldd	r20, Z+2	; 0x02
     a4a:	53 81       	ldd	r21, Z+3	; 0x03
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	24 17       	cp	r18, r20
     a50:	35 07       	cpc	r19, r21
     a52:	29 f0       	breq	.+10     	; 0xa5e <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     a58:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     a5a:	60 8b       	std	Z+16, r22	; 0x10
     a5c:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     a5e:	28 2f       	mov	r18, r24
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	ee e7       	ldi	r30, 0x7E	; 126
     a64:	f3 e0       	ldi	r31, 0x03	; 3
     a66:	33 83       	std	Z+3, r19	; 0x03
     a68:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	71 87       	std	Z+9, r23	; 0x09
     a6e:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     a70:	94 81       	ldd	r25, Z+4	; 0x04
     a72:	89 13       	cpse	r24, r25
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <STEPPER_SetRotation+0x3c>
     a76:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <STEPPER_SAME>
     a7a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <stepper+0xa>
		STEPPER_Rotate();
     a7e:	a8 cf       	rjmp	.-176    	; 0x9d0 <STEPPER_Rotate>
     a80:	08 95       	ret

00000a82 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	0b b6       	in	r0, 0x3b	; 59
     a8e:	0f 92       	push	r0
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <__vector_13+0x2c>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <__vector_13+0x2e>
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     ab4:	86 e3       	ldi	r24, 0x36	; 54
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	9e e2       	ldi	r25, 0x2E	; 46
     abe:	ad e2       	ldi	r26, 0x2D	; 45
     ac0:	b5 e3       	ldi	r27, 0x35	; 53
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	ab 83       	std	Y+3, r26	; 0x03
     ac8:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     aca:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     ace:	88 23       	and	r24, r24
     ad0:	29 f0       	breq	.+10     	; 0xadc <__vector_13+0x5a>
     ad2:	ee e7       	ldi	r30, 0x7E	; 126
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	82 85       	ldd	r24, Z+10	; 0x0a
     ad8:	81 50       	subi	r24, 0x01	; 1
     ada:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     adc:	ee e7       	ldi	r30, 0x7E	; 126
     ade:	f3 e0       	ldi	r31, 0x03	; 3
     ae0:	87 81       	ldd	r24, Z+7	; 0x07
     ae2:	25 81       	ldd	r18, Z+5	; 0x05
     ae4:	36 81       	ldd	r19, Z+6	; 0x06
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	82 17       	cp	r24, r18
     aea:	93 07       	cpc	r25, r19
     aec:	f1 f4       	brne	.+60     	; 0xb2a <__vector_13+0xa8>
	{

		g_ItemInRange = 0;
     aee:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <g_ItemInRange>
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     af2:	82 81       	ldd	r24, Z+2	; 0x02
     af4:	93 81       	ldd	r25, Z+3	; 0x03
     af6:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     af8:	86 85       	ldd	r24, Z+14	; 0x0e
     afa:	88 23       	and	r24, r24
     afc:	21 f0       	breq	.+8      	; 0xb06 <__vector_13+0x84>
		{
			stepper.early = 0;
     afe:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     b00:	60 89       	ldd	r22, Z+16	; 0x10
     b02:	87 85       	ldd	r24, Z+15	; 0x0f
     b04:	9e df       	rcall	.-196    	; 0xa42 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     b06:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <stepper+0xb>
     b0a:	88 23       	and	r24, r24
     b0c:	19 f0       	breq	.+6      	; 0xb14 <__vector_13+0x92>
     b0e:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <stepper+0xd>
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <__vector_13+0x94>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	ee e7       	ldi	r30, 0x7E	; 126
     b18:	f3 e0       	ldi	r31, 0x03	; 3
     b1a:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     b1c:	e5 85       	ldd	r30, Z+13	; 0x0d
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	e0 5f       	subi	r30, 0xF0	; 240
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	80 81       	ld	r24, Z
     b26:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     b2a:	ee e7       	ldi	r30, 0x7E	; 126
     b2c:	f3 e0       	ldi	r31, 0x03	; 3
     b2e:	87 81       	ldd	r24, Z+7	; 0x07
     b30:	25 81       	ldd	r18, Z+5	; 0x05
     b32:	36 81       	ldd	r19, Z+6	; 0x06
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	82 17       	cp	r24, r18
     b38:	93 07       	cpc	r25, r19
     b3a:	0c f0       	brlt	.+2      	; 0xb3e <__vector_13+0xbc>
     b3c:	60 c0       	rjmp	.+192    	; 0xbfe <__vector_13+0x17c>
     b3e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     b42:	81 11       	cpse	r24, r1
     b44:	5c c0       	rjmp	.+184    	; 0xbfe <__vector_13+0x17c>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     b46:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <stepper+0x1>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	51 f4       	brne	.+20     	; 0xb62 <__vector_13+0xe0>
     b4e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b52:	e1 e0       	ldi	r30, 0x01	; 1
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	ec 0f       	add	r30, r28
     b58:	fd 1f       	adc	r31, r29
     b5a:	e8 0f       	add	r30, r24
     b5c:	f1 1d       	adc	r31, r1
     b5e:	80 81       	ld	r24, Z
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__vector_13+0xfa>
     b62:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b66:	e3 e0       	ldi	r30, 0x03	; 3
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	e8 1b       	sub	r30, r24
     b6c:	f1 09       	sbc	r31, r1
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	8c 0f       	add	r24, r28
     b74:	9d 1f       	adc	r25, r29
     b76:	e8 0f       	add	r30, r24
     b78:	f9 1f       	adc	r31, r25
     b7a:	80 81       	ld	r24, Z
     b7c:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     b7e:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	21 f0       	breq	.+8      	; 0xb8e <__vector_13+0x10c>
     b86:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <__vector_13+0x10e>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	ee e7       	ldi	r30, 0x7E	; 126
     b92:	f3 e0       	ldi	r31, 0x03	; 3
     b94:	80 83       	st	Z, r24

		stepper._currentStep++;
     b96:	87 81       	ldd	r24, Z+7	; 0x07
     b98:	8f 5f       	subi	r24, 0xFF	; 255
     b9a:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     b9c:	83 85       	ldd	r24, Z+11	; 0x0b
     b9e:	81 11       	cpse	r24, r1
     ba0:	15 c0       	rjmp	.+42     	; 0xbcc <__vector_13+0x14a>
     ba2:	85 81       	ldd	r24, Z+5	; 0x05
     ba4:	96 81       	ldd	r25, Z+6	; 0x06
     ba6:	27 81       	ldd	r18, Z+7	; 0x07
     ba8:	82 1b       	sub	r24, r18
     baa:	91 09       	sbc	r25, r1
     bac:	06 97       	sbiw	r24, 0x06	; 6
     bae:	74 f4       	brge	.+28     	; 0xbcc <__vector_13+0x14a>
     bb0:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	e0 5f       	subi	r30, 0xF0	; 240
     bb8:	fe 4f       	sbci	r31, 0xFE	; 254
     bba:	80 81       	ld	r24, Z
     bbc:	84 39       	cpi	r24, 0x94	; 148
     bbe:	30 f4       	brcc	.+12     	; 0xbcc <__vector_13+0x14a>
		{
			stepper._accellStep--;
     bc0:	ee e7       	ldi	r30, 0x7E	; 126
     bc2:	f3 e0       	ldi	r31, 0x03	; 3
     bc4:	85 85       	ldd	r24, Z+13	; 0x0d
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	85 87       	std	Z+13, r24	; 0x0d
     bca:	11 c0       	rjmp	.+34     	; 0xbee <__vector_13+0x16c>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     bcc:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <stepper+0x7>
     bd0:	86 30       	cpi	r24, 0x06	; 6
     bd2:	68 f0       	brcs	.+26     	; 0xbee <__vector_13+0x16c>
     bd4:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	e0 5f       	subi	r30, 0xF0	; 240
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	80 81       	ld	r24, Z
     be0:	81 34       	cpi	r24, 0x41	; 65
     be2:	28 f0       	brcs	.+10     	; 0xbee <__vector_13+0x16c>
		{
			stepper._accellStep++;
     be4:	ee e7       	ldi	r30, 0x7E	; 126
     be6:	f3 e0       	ldi	r31, 0x03	; 3
     be8:	85 85       	ldd	r24, Z+13	; 0x0d
     bea:	8f 5f       	subi	r24, 0xFF	; 255
     bec:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     bee:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	e0 5f       	subi	r30, 0xF0	; 240
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     bfe:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	29 f1       	breq	.+74     	; 0xc50 <__vector_13+0x1ce>
	{
		if ((PINE & 0x08) == 0)
     c06:	63 99       	sbic	0x0c, 3	; 12
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <__vector_13+0x190>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     c0a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <STEPPER_OFFSET>
     c0e:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     c12:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	28 f0       	brcs	.+10     	; 0xc24 <__vector_13+0x1a2>
     c1a:	ee e7       	ldi	r30, 0x7E	; 126
     c1c:	f3 e0       	ldi	r31, 0x03	; 3
     c1e:	84 85       	ldd	r24, Z+12	; 0x0c
     c20:	81 50       	subi	r24, 0x01	; 1
     c22:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     c24:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c28:	81 30       	cpi	r24, 0x01	; 1
     c2a:	91 f4       	brne	.+36     	; 0xc50 <__vector_13+0x1ce>
		{
			stepper._isInitiated = 1;
     c2c:	ee e7       	ldi	r30, 0x7E	; 126
     c2e:	f3 e0       	ldi	r31, 0x03	; 3
     c30:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     c32:	10 82       	st	Z, r1
			stepper.direction = 1;
     c34:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     c36:	13 82       	std	Z+3, r1	; 0x03
     c38:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     c3a:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     c3c:	16 82       	std	Z+6, r1	; 0x06
     c3e:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     c40:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     c42:	11 86       	std	Z+9, r1	; 0x09
     c44:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     c46:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     c48:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     c4a:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     c4c:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     c4e:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	0f 90       	pop	r0
     c7e:	1f 90       	pop	r1
     c80:	18 95       	reti

00000c82 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	f8 94       	cli
     c8a:	e1 e6       	ldi	r30, 0x61	; 97
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 e8       	ldi	r24, 0x80	; 128
     c90:	80 83       	st	Z, r24
     c92:	10 82       	st	Z, r1
     c94:	f9 d2       	rcall	.+1522   	; 0x1288 <UART_Init>
     c96:	7d dd       	rcall	.-1286   	; 0x792 <GPIO_Init>
     c98:	7c d2       	rcall	.+1272   	; 0x1192 <TIMER_Init>
     c9a:	39 de       	rcall	.-910    	; 0x90e <PWM_Init>
     c9c:	1c da       	rcall	.-3016   	; 0xd6 <ADC_Init>
     c9e:	55 de       	rcall	.-854    	; 0x94a <STEPPER_Init>
     ca0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_ADCCount+0x1>
     ca4:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <g_ADCCount>
     ca8:	84 e1       	ldi	r24, 0x14	; 20
     caa:	e2 e1       	ldi	r30, 0x12	; 18
     cac:	f3 e0       	ldi	r31, 0x03	; 3
     cae:	df 01       	movw	r26, r30
     cb0:	1d 92       	st	X+, r1
     cb2:	8a 95       	dec	r24
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <SYS_Init+0x2e>
     cb6:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <g_PauseRequest>
     cba:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     cbe:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <g_Timer+0x1>
     cc2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <g_Timer>
     cc6:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <g_Lock>
     cca:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <g_ItemInRange>
     cce:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <HEAD+0x1>
     cd2:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <HEAD>
     cd6:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <TAIL+0x1>
     cda:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <TAIL>
     cde:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <STAGE1+0x1>
     ce2:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <STAGE1>
     ce6:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <STAGE2+0x1>
     cea:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <STAGE2>
     cee:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <FRONT+0x1>
     cf2:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <FRONT>
     cf6:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <BUFFER+0x1>
     cfa:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <BUFFER>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	44 e0       	ldi	r20, 0x04	; 4
     d02:	6f ef       	ldi	r22, 0xFF	; 255
     d04:	89 ee       	ldi	r24, 0xE9	; 233
     d06:	9d ef       	ldi	r25, 0xFD	; 253
     d08:	be dc       	rcall	.-1668   	; 0x686 <LL_ItemInit>
     d0a:	d7 dc       	rcall	.-1618   	; 0x6ba <LL_ItemListInit>
     d0c:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <HEAD+0x1>
     d10:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <HEAD>
     d14:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <FRONT+0x1>
     d18:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <FRONT>
     d1c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <BUFFER+0x1>
     d20:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <BUFFER>
     d24:	ca ef       	ldi	r28, 0xFA	; 250
     d26:	08 ee       	ldi	r16, 0xE8	; 232
     d28:	1d ef       	ldi	r17, 0xFD	; 253
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	44 e0       	ldi	r20, 0x04	; 4
     d2e:	6c 2f       	mov	r22, r28
     d30:	c8 01       	movw	r24, r16
     d32:	a9 dc       	rcall	.-1710   	; 0x686 <LL_ItemInit>
     d34:	bc 01       	movw	r22, r24
     d36:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     d3a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     d3e:	d1 dc       	rcall	.-1630   	; 0x6e2 <LL_AddBack>
     d40:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <TAIL+0x1>
     d44:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <TAIL>
     d48:	01 50       	subi	r16, 0x01	; 1
     d4a:	11 09       	sbc	r17, r1
     d4c:	c1 50       	subi	r28, 0x01	; 1
     d4e:	cb 3c       	cpi	r28, 0xCB	; 203
     d50:	61 f7       	brne	.-40     	; 0xd2a <SYS_Init+0xa8>
     d52:	05 e0       	ldi	r16, 0x05	; 5
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	45 e0       	ldi	r20, 0x05	; 5
     d5a:	6a ef       	ldi	r22, 0xFA	; 250
     d5c:	88 ee       	ldi	r24, 0xE8	; 232
     d5e:	9d ef       	ldi	r25, 0xFD	; 253
     d60:	92 dc       	rcall	.-1756   	; 0x686 <LL_ItemInit>
     d62:	bc 01       	movw	r22, r24
     d64:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     d68:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     d6c:	ba dc       	rcall	.-1676   	; 0x6e2 <LL_AddBack>
     d6e:	01 50       	subi	r16, 0x01	; 1
     d70:	11 09       	sbc	r17, r1
     d72:	89 f7       	brne	.-30     	; 0xd56 <SYS_Init+0xd4>
     d74:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     d78:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     d7c:	64 e0       	ldi	r22, 0x04	; 4
     d7e:	84 81       	ldd	r24, Z+4	; 0x04
     d80:	95 81       	ldd	r25, Z+5	; 0x05
     d82:	ec dc       	rcall	.-1576   	; 0x75c <LL_UpdateClass>
     d84:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     d88:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	84 81       	ldd	r24, Z+4	; 0x04
     d92:	95 81       	ldd	r25, Z+5	; 0x05
     d94:	f2 dc       	rcall	.-1564   	; 0x77a <LL_UpdateTick>
     d96:	86 e5       	ldi	r24, 0x56	; 86
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	8e d2       	rcall	.+1308   	; 0x12b8 <UART_SendString>
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	08 95       	ret

00000da4 <SYS_Pause>:
     da4:	3f 92       	push	r3
     da6:	4f 92       	push	r4
     da8:	5f 92       	push	r5
     daa:	6f 92       	push	r6
     dac:	7f 92       	push	r7
     dae:	8f 92       	push	r8
     db0:	9f 92       	push	r9
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	ca 5f       	subi	r28, 0xFA	; 250
     dcc:	d1 09       	sbc	r29, r1
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	f8 2e       	mov	r15, r24
     dda:	e9 2e       	mov	r14, r25
     ddc:	f8 94       	cli
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9f dd       	rcall	.-1218   	; 0x922 <PWM>
     de4:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <FRONT>
     de8:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <FRONT+0x1>
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	8c e6       	ldi	r24, 0x6C	; 108
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	9f 93       	push	r25
     df6:	8f 93       	push	r24
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	7c 01       	movw	r14, r24
     dfe:	9f 93       	push	r25
     e00:	8f 93       	push	r24
     e02:	89 d3       	rcall	.+1810   	; 0x1516 <sprintf>
     e04:	c7 01       	movw	r24, r14
     e06:	58 d2       	rcall	.+1200   	; 0x12b8 <UART_SendString>
     e08:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     e0c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     e10:	ba dc       	rcall	.-1676   	; 0x786 <LL_GetTick>
     e12:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <g_Timer>
     e16:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <g_Timer+0x1>
     e1a:	9f 93       	push	r25
     e1c:	8f 93       	push	r24
     e1e:	3f 93       	push	r19
     e20:	2f 93       	push	r18
     e22:	87 e8       	ldi	r24, 0x87	; 135
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	ff 92       	push	r15
     e2c:	ef 92       	push	r14
     e2e:	73 d3       	rcall	.+1766   	; 0x1516 <sprintf>
     e30:	c7 01       	movw	r24, r14
     e32:	42 d2       	rcall	.+1156   	; 0x12b8 <UART_SendString>
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	e1 2c       	mov	r14, r1
     e40:	f1 2c       	mov	r15, r1
     e42:	0f 2e       	mov	r0, r31
     e44:	f6 ea       	ldi	r31, 0xA6	; 166
     e46:	af 2e       	mov	r10, r31
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	bf 2e       	mov	r11, r31
     e4c:	f0 2d       	mov	r31, r0
     e4e:	6e 01       	movw	r12, r28
     e50:	f7 e9       	ldi	r31, 0x97	; 151
     e52:	cf 0e       	add	r12, r31
     e54:	d1 1c       	adc	r13, r1
     e56:	2d c0       	rjmp	.+90     	; 0xeb2 <SYS_Pause+0x10e>
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	e8 1a       	sub	r14, r24
     e5c:	f8 0a       	sbc	r15, r24
     e5e:	c8 01       	movw	r24, r16
     e60:	92 dc       	rcall	.-1756   	; 0x786 <LL_GetTick>
     e62:	68 2e       	mov	r6, r24
     e64:	59 2e       	mov	r5, r25
     e66:	c8 01       	movw	r24, r16
     e68:	83 dc       	rcall	.-1786   	; 0x770 <LL_GetStatus>
     e6a:	78 2e       	mov	r7, r24
     e6c:	c8 01       	movw	r24, r16
     e6e:	5b dc       	rcall	.-1866   	; 0x726 <LL_GetClass>
     e70:	88 2e       	mov	r8, r24
     e72:	c8 01       	movw	r24, r16
     e74:	63 dc       	rcall	.-1850   	; 0x73c <LL_GetMag>
     e76:	98 2e       	mov	r9, r24
     e78:	c8 01       	movw	r24, r16
     e7a:	5a dc       	rcall	.-1868   	; 0x730 <LL_GetRefl>
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	1f 92       	push	r1
     e82:	7f 92       	push	r7
     e84:	1f 92       	push	r1
     e86:	8f 92       	push	r8
     e88:	1f 92       	push	r1
     e8a:	9f 92       	push	r9
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	ff 92       	push	r15
     e92:	ef 92       	push	r14
     e94:	bf 92       	push	r11
     e96:	af 92       	push	r10
     e98:	df 92       	push	r13
     e9a:	cf 92       	push	r12
     e9c:	3c d3       	rcall	.+1656   	; 0x1516 <sprintf>
     e9e:	c6 01       	movw	r24, r12
     ea0:	0b d2       	rcall	.+1046   	; 0x12b8 <UART_SendString>
     ea2:	c8 01       	movw	r24, r16
     ea4:	1a dc       	rcall	.-1996   	; 0x6da <LL_Next>
     ea6:	8c 01       	movw	r16, r24
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	c8 01       	movw	r24, r16
     eb4:	38 dc       	rcall	.-1936   	; 0x726 <LL_GetClass>
     eb6:	85 30       	cpi	r24, 0x05	; 5
     eb8:	79 f6       	brne	.-98     	; 0xe58 <SYS_Pause+0xb4>
     eba:	0f 2e       	mov	r0, r31
     ebc:	f2 e3       	ldi	r31, 0x32	; 50
     ebe:	cf 2e       	mov	r12, r31
     ec0:	f3 e0       	ldi	r31, 0x03	; 3
     ec2:	df 2e       	mov	r13, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	0f 2e       	mov	r0, r31
     ecc:	f4 ee       	ldi	r31, 0xE4	; 228
     ece:	af 2e       	mov	r10, r31
     ed0:	f1 e0       	ldi	r31, 0x01	; 1
     ed2:	bf 2e       	mov	r11, r31
     ed4:	f0 2d       	mov	r31, r0
     ed6:	7e 01       	movw	r14, r28
     ed8:	f7 e9       	ldi	r31, 0x97	; 151
     eda:	ef 0e       	add	r14, r31
     edc:	f1 1c       	adc	r15, r1
     ede:	f6 01       	movw	r30, r12
     ee0:	80 85       	ldd	r24, Z+8	; 0x08
     ee2:	1f 92       	push	r1
     ee4:	8f 93       	push	r24
     ee6:	1f 93       	push	r17
     ee8:	0f 93       	push	r16
     eea:	bf 92       	push	r11
     eec:	af 92       	push	r10
     eee:	ff 92       	push	r15
     ef0:	ef 92       	push	r14
     ef2:	11 d3       	rcall	.+1570   	; 0x1516 <sprintf>
     ef4:	c7 01       	movw	r24, r14
     ef6:	e0 d1       	rcall	.+960    	; 0x12b8 <UART_SendString>
     ef8:	0f 5f       	subi	r16, 0xFF	; 255
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	f9 e0       	ldi	r31, 0x09	; 9
     efe:	cf 0e       	add	r12, r31
     f00:	d1 1c       	adc	r13, r1
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	07 30       	cpi	r16, 0x07	; 7
     f0e:	11 05       	cpc	r17, r1
     f10:	31 f7       	brne	.-52     	; 0xede <SYS_Pause+0x13a>
     f12:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     f16:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     f1a:	0a dc       	rcall	.-2028   	; 0x730 <LL_GetRefl>
     f1c:	48 2e       	mov	r4, r24
     f1e:	39 2e       	mov	r3, r25
     f20:	60 90 7a 03 	lds	r6, 0x037A	; 0x80037a <STAGE2>
     f24:	50 90 7b 03 	lds	r5, 0x037B	; 0x80037b <STAGE2+0x1>
     f28:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     f2c:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     f30:	05 dc       	rcall	.-2038   	; 0x73c <LL_GetMag>
     f32:	78 2e       	mov	r7, r24
     f34:	90 90 30 03 	lds	r9, 0x0330	; 0x800330 <STAGE1>
     f38:	80 90 31 03 	lds	r8, 0x0331	; 0x800331 <STAGE1+0x1>
     f3c:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <TAIL>
     f40:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <TAIL+0x1>
     f44:	f8 01       	movw	r30, r16
     f46:	b2 80       	ldd	r11, Z+2	; 0x02
     f48:	a3 80       	ldd	r10, Z+3	; 0x03
     f4a:	d0 90 0e 03 	lds	r13, 0x030E	; 0x80030e <FRONT>
     f4e:	c0 90 0f 03 	lds	r12, 0x030F	; 0x80030f <FRONT+0x1>
     f52:	f0 90 0c 03 	lds	r15, 0x030C	; 0x80030c <HEAD>
     f56:	e0 90 0d 03 	lds	r14, 0x030D	; 0x80030d <HEAD+0x1>
     f5a:	8f 2d       	mov	r24, r15
     f5c:	9e 2d       	mov	r25, r14
     f5e:	d2 db       	rcall	.-2140   	; 0x704 <LL_Size>
     f60:	3f 92       	push	r3
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	6f 92       	push	r6
     f68:	1f 92       	push	r1
     f6a:	7f 92       	push	r7
     f6c:	8f 92       	push	r8
     f6e:	9f 92       	push	r9
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	1f 93       	push	r17
     f7a:	0f 93       	push	r16
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	1f 92       	push	r1
     f82:	8f 93       	push	r24
     f84:	8b ef       	ldi	r24, 0xFB	; 251
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	9f 93       	push	r25
     f8a:	8f 93       	push	r24
     f8c:	8e 01       	movw	r16, r28
     f8e:	0b 59       	subi	r16, 0x9B	; 155
     f90:	1f 4f       	sbci	r17, 0xFF	; 255
     f92:	1f 93       	push	r17
     f94:	0f 93       	push	r16
     f96:	bf d2       	rcall	.+1406   	; 0x1516 <sprintf>
     f98:	c8 01       	movw	r24, r16
     f9a:	8e d1       	rcall	.+796    	; 0x12b8 <UART_SendString>
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	89 b1       	in	r24, 0x09	; 9
     fa8:	83 70       	andi	r24, 0x03	; 3
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <SYS_Pause+0x202>
     fac:	84 e2       	ldi	r24, 0x24	; 36
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	83 d1       	rcall	.+774    	; 0x12b8 <UART_SendString>
     fb2:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <g_PauseRequest>
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	b3 dc       	rcall	.-1690   	; 0x922 <PWM>
     fbc:	78 94       	sei
     fbe:	c6 50       	subi	r28, 0x06	; 6
     fc0:	df 4f       	sbci	r29, 0xFF	; 255
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	7f 90       	pop	r7
     fe6:	6f 90       	pop	r6
     fe8:	5f 90       	pop	r5
     fea:	4f 90       	pop	r4
     fec:	3f 90       	pop	r3
     fee:	08 95       	ret

00000ff0 <SYS_Rampdown>:

void SYS_Rampdown()
{
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	e8 97       	sbiw	r28, 0x38	; 56
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    100a:	fe 01       	movw	r30, r28
    100c:	31 96       	adiw	r30, 0x01	; 1
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	df 01       	movw	r26, r30
    1012:	1d 92       	st	X+, r1
    1014:	8a 95       	dec	r24
    1016:	e9 f7       	brne	.-6      	; 0x1012 <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
    1018:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <FRONT>
    101c:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <FRONT+0x1>
	
	cli();
    1020:	f8 94       	cli
	PORTD = 0;
    1022:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    1024:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	7b dc       	rcall	.-1802   	; 0x922 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    102c:	81 e8       	ldi	r24, 0x81	; 129
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	43 d1       	rcall	.+646    	; 0x12b8 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    1032:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    1036:	f3 94       	inc	r15
    1038:	c8 01       	movw	r24, r16
    103a:	75 db       	rcall	.-2326   	; 0x726 <LL_GetClass>
    103c:	e1 e0       	ldi	r30, 0x01	; 1
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	ec 0f       	add	r30, r28
    1042:	fd 1f       	adc	r31, r29
    1044:	e8 0f       	add	r30, r24
    1046:	f1 1d       	adc	r31, r1
    1048:	80 81       	ld	r24, Z
    104a:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    104c:	80 83       	st	Z, r24
    104e:	c8 01       	movw	r24, r16
    1050:	44 db       	rcall	.-2424   	; 0x6da <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1052:	8c 01       	movw	r16, r24
    1054:	c8 01       	movw	r24, r16
    1056:	8c db       	rcall	.-2280   	; 0x770 <LL_GetStatus>
    1058:	83 30       	cpi	r24, 0x03	; 3
    105a:	69 f3       	breq	.-38     	; 0x1036 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	1f 92       	push	r1
    1060:	8f 93       	push	r24
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	1f 92       	push	r1
    1066:	8f 93       	push	r24
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	1f 92       	push	r1
    106c:	8f 93       	push	r24
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	1f 92       	push	r1
    1072:	8f 93       	push	r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	1f 92       	push	r1
    1078:	8f 93       	push	r24
    107a:	1f 92       	push	r1
    107c:	ff 92       	push	r15
    107e:	86 ea       	ldi	r24, 0xA6	; 166
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	9f 93       	push	r25
    1084:	8f 93       	push	r24
    1086:	8e 01       	movw	r16, r28
    1088:	09 5f       	subi	r16, 0xF9	; 249
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	1f 93       	push	r17
    108e:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    1090:	42 d2       	rcall	.+1156   	; 0x1516 <sprintf>
    1092:	c8 01       	movw	r24, r16
    1094:	11 d1       	rcall	.+546    	; 0x12b8 <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	e8 96       	adiw	r28, 0x38	; 56
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	08 95       	ret

000010b8 <__vector_17>:
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	0b b6       	in	r0, 0x3b	; 59
    10c4:	0f 92       	push	r0
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    10ea:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_timer_tick>
    10ee:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_timer_tick+0x1>
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <_timer_tick+0x1>
    10f8:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_timer_tick>
    10fc:	c2 e3       	ldi	r28, 0x32	; 50
    10fe:	d3 e0       	ldi	r29, 0x03	; 3
    1100:	0f 2e       	mov	r0, r31
    1102:	fa e7       	ldi	r31, 0x7A	; 122
    1104:	ef 2e       	mov	r14, r31
    1106:	f3 e0       	ldi	r31, 0x03	; 3
    1108:	ff 2e       	mov	r15, r31
    110a:	f0 2d       	mov	r31, r0
    110c:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    110e:	ec 81       	ldd	r30, Y+4	; 0x04
    1110:	fd 81       	ldd	r31, Y+5	; 0x05
    1112:	30 97       	sbiw	r30, 0x00	; 0
    1114:	09 f1       	breq	.+66     	; 0x1158 <__vector_17+0xa0>
    1116:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_timer_tick>
    111a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_timer_tick+0x1>
    111e:	28 81       	ld	r18, Y
    1120:	39 81       	ldd	r19, Y+1	; 0x01
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	c1 f4       	brne	.+48     	; 0x1158 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    1128:	88 85       	ldd	r24, Y+8	; 0x08
    112a:	82 30       	cpi	r24, 0x02	; 2
    112c:	19 f4       	brne	.+6      	; 0x1134 <__vector_17+0x7c>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1134:	d8 01       	movw	r26, r16
    1136:	12 96       	adiw	r26, 0x02	; 2
    1138:	8d 91       	ld	r24, X+
    113a:	9c 91       	ld	r25, X
    113c:	13 97       	sbiw	r26, 0x03	; 3
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	41 f0       	breq	.+16     	; 0x1152 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1142:	2d 91       	ld	r18, X+
    1144:	3c 91       	ld	r19, X
    1146:	11 97       	sbiw	r26, 0x01	; 1
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	8d 93       	st	X+, r24
    114e:	9c 93       	st	X, r25
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1152:	f8 01       	movw	r30, r16
    1154:	15 82       	std	Z+5, r1	; 0x05
    1156:	14 82       	std	Z+4, r1	; 0x04
    1158:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    115a:	ce 15       	cp	r28, r14
    115c:	df 05       	cpc	r29, r15
    115e:	b1 f6       	brne	.-84     	; 0x110c <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	bf 91       	pop	r27
    116a:	af 91       	pop	r26
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	7f 91       	pop	r23
    1172:	6f 91       	pop	r22
    1174:	5f 91       	pop	r21
    1176:	4f 91       	pop	r20
    1178:	3f 91       	pop	r19
    117a:	2f 91       	pop	r18
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	ef 90       	pop	r14
    1184:	0f 90       	pop	r0
    1186:	0b be       	out	0x3b, r0	; 59
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	0f 90       	pop	r0
    118e:	1f 90       	pop	r1
    1190:	18 95       	reti

00001192 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1192:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1196:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    119a:	88 e4       	ldi	r24, 0x48	; 72
    119c:	98 e0       	ldi	r25, 0x08	; 8
    119e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    11a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    11a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    11aa:	89 e0       	ldi	r24, 0x09	; 9
    11ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    11b6:	88 e4       	ldi	r24, 0x48	; 72
    11b8:	e2 e3       	ldi	r30, 0x32	; 50
    11ba:	f3 e0       	ldi	r31, 0x03	; 3
    11bc:	df 01       	movw	r26, r30
    11be:	1d 92       	st	X+, r1
    11c0:	8a 95       	dec	r24
    11c2:	e9 f7       	brne	.-6      	; 0x11be <TIMER_Init+0x2c>
    11c4:	08 95       	ret

000011c6 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	cf 93       	push	r28
    11cc:	df 93       	push	r29
    11ce:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    11d0:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <_timer+0x4>
    11d4:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <_timer+0x5>
    11d8:	67 2b       	or	r22, r23
    11da:	09 f4       	brne	.+2      	; 0x11de <TIMER_Create+0x18>
    11dc:	49 c0       	rjmp	.+146    	; 0x1270 <TIMER_Create+0xaa>
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    11e2:	a1 e0       	ldi	r26, 0x01	; 1
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    11e6:	c5 85       	ldd	r28, Z+13	; 0x0d
    11e8:	d6 85       	ldd	r29, Z+14	; 0x0e
    11ea:	cd 2b       	or	r28, r29
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <TIMER_Create+0x2a>
    11ee:	42 c0       	rjmp	.+132    	; 0x1274 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	39 96       	adiw	r30, 0x09	; 9
    11f4:	a8 30       	cpi	r26, 0x08	; 8
    11f6:	b1 05       	cpc	r27, r1
    11f8:	b1 f7       	brne	.-20     	; 0x11e6 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1200:	fd 01       	movw	r30, r26
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	ea 0f       	add	r30, r26
    1210:	fb 1f       	adc	r31, r27
    1212:	ee 5c       	subi	r30, 0xCE	; 206
    1214:	fc 4f       	sbci	r31, 0xFC	; 252
    1216:	93 83       	std	Z+3, r25	; 0x03
    1218:	82 83       	std	Z+2, r24	; 0x02
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    121c:	fd 01       	movw	r30, r26
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	ea 0f       	add	r30, r26
    122c:	fb 1f       	adc	r31, r27
    122e:	ee 5c       	subi	r30, 0xCE	; 206
    1230:	fc 4f       	sbci	r31, 0xFC	; 252
    1232:	13 82       	std	Z+3, r1	; 0x03
    1234:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1236:	fd 01       	movw	r30, r26
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	ea 0f       	add	r30, r26
    1246:	fb 1f       	adc	r31, r27
    1248:	ee 5c       	subi	r30, 0xCE	; 206
    124a:	fc 4f       	sbci	r31, 0xFC	; 252
    124c:	55 83       	std	Z+5, r21	; 0x05
    124e:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1250:	37 83       	std	Z+7, r19	; 0x07
    1252:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    1254:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <_timer_tick>
    1258:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_timer_tick+0x1>
    125c:	82 0f       	add	r24, r18
    125e:	93 1f       	adc	r25, r19
    1260:	91 83       	std	Z+1, r25	; 0x01
    1262:	80 83       	st	Z, r24
			_timer[i].state = READY;
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1268:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    126a:	8a 2f       	mov	r24, r26
    126c:	9b 2f       	mov	r25, r27
    126e:	07 c0       	rjmp	.+14     	; 0x127e <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1274:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1276:	f8 94       	cli
		{
			if (periodic != 0) 
    1278:	01 2b       	or	r16, r17
    127a:	11 f6       	brne	.-124    	; 0x1200 <TIMER_Create+0x3a>
    127c:	cf cf       	rjmp	.-98     	; 0x121c <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	08 95       	ret

00001288 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1288:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    128c:	83 e3       	ldi	r24, 0x33	; 51
    128e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1292:	e9 ec       	ldi	r30, 0xC9	; 201
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 61       	ori	r24, 0x18	; 24
    129a:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    129c:	ea ec       	ldi	r30, 0xCA	; 202
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	86 60       	ori	r24, 0x06	; 6
    12a4:	80 83       	st	Z, r24
    12a6:	08 95       	ret

000012a8 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    12a8:	e8 ec       	ldi	r30, 0xC8	; 200
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	90 81       	ld	r25, Z
    12ae:	95 ff       	sbrs	r25, 5
    12b0:	fd cf       	rjmp	.-6      	; 0x12ac <UART_SendChar+0x4>
	UDR1 = c;
    12b2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    12b6:	08 95       	ret

000012b8 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    12be:	88 81       	ld	r24, Y
    12c0:	88 23       	and	r24, r24
    12c2:	29 f0       	breq	.+10     	; 0x12ce <UART_SendString+0x16>
    12c4:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    12c6:	f0 df       	rcall	.-32     	; 0x12a8 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    12c8:	89 91       	ld	r24, Y+
    12ca:	81 11       	cpse	r24, r1
    12cc:	fc cf       	rjmp	.-8      	; 0x12c6 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <malloc>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	df 93       	push	r29
    12dc:	82 30       	cpi	r24, 0x02	; 2
    12de:	91 05       	cpc	r25, r1
    12e0:	10 f4       	brcc	.+4      	; 0x12e6 <malloc+0x12>
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <__flp>
    12ea:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <__flp+0x1>
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	30 97       	sbiw	r30, 0x00	; 0
    12f8:	19 f1       	breq	.+70     	; 0x1340 <malloc+0x6c>
    12fa:	40 81       	ld	r20, Z
    12fc:	51 81       	ldd	r21, Z+1	; 0x01
    12fe:	02 81       	ldd	r16, Z+2	; 0x02
    1300:	13 81       	ldd	r17, Z+3	; 0x03
    1302:	48 17       	cp	r20, r24
    1304:	59 07       	cpc	r21, r25
    1306:	c8 f0       	brcs	.+50     	; 0x133a <malloc+0x66>
    1308:	84 17       	cp	r24, r20
    130a:	95 07       	cpc	r25, r21
    130c:	69 f4       	brne	.+26     	; 0x1328 <malloc+0x54>
    130e:	10 97       	sbiw	r26, 0x00	; 0
    1310:	31 f0       	breq	.+12     	; 0x131e <malloc+0x4a>
    1312:	12 96       	adiw	r26, 0x02	; 2
    1314:	0c 93       	st	X, r16
    1316:	12 97       	sbiw	r26, 0x02	; 2
    1318:	13 96       	adiw	r26, 0x03	; 3
    131a:	1c 93       	st	X, r17
    131c:	27 c0       	rjmp	.+78     	; 0x136c <malloc+0x98>
    131e:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <__flp>
    1322:	10 93 92 03 	sts	0x0392, r17	; 0x800392 <__flp+0x1>
    1326:	22 c0       	rjmp	.+68     	; 0x136c <malloc+0x98>
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	19 f0       	breq	.+6      	; 0x1334 <malloc+0x60>
    132e:	42 17       	cp	r20, r18
    1330:	53 07       	cpc	r21, r19
    1332:	18 f4       	brcc	.+6      	; 0x133a <malloc+0x66>
    1334:	9a 01       	movw	r18, r20
    1336:	bd 01       	movw	r22, r26
    1338:	ef 01       	movw	r28, r30
    133a:	df 01       	movw	r26, r30
    133c:	f8 01       	movw	r30, r16
    133e:	db cf       	rjmp	.-74     	; 0x12f6 <malloc+0x22>
    1340:	21 15       	cp	r18, r1
    1342:	31 05       	cpc	r19, r1
    1344:	f9 f0       	breq	.+62     	; 0x1384 <malloc+0xb0>
    1346:	28 1b       	sub	r18, r24
    1348:	39 0b       	sbc	r19, r25
    134a:	24 30       	cpi	r18, 0x04	; 4
    134c:	31 05       	cpc	r19, r1
    134e:	80 f4       	brcc	.+32     	; 0x1370 <malloc+0x9c>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	61 15       	cp	r22, r1
    1356:	71 05       	cpc	r23, r1
    1358:	21 f0       	breq	.+8      	; 0x1362 <malloc+0x8e>
    135a:	fb 01       	movw	r30, r22
    135c:	93 83       	std	Z+3, r25	; 0x03
    135e:	82 83       	std	Z+2, r24	; 0x02
    1360:	04 c0       	rjmp	.+8      	; 0x136a <malloc+0x96>
    1362:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <__flp+0x1>
    1366:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <__flp>
    136a:	fe 01       	movw	r30, r28
    136c:	32 96       	adiw	r30, 0x02	; 2
    136e:	44 c0       	rjmp	.+136    	; 0x13f8 <malloc+0x124>
    1370:	fe 01       	movw	r30, r28
    1372:	e2 0f       	add	r30, r18
    1374:	f3 1f       	adc	r31, r19
    1376:	81 93       	st	Z+, r24
    1378:	91 93       	st	Z+, r25
    137a:	22 50       	subi	r18, 0x02	; 2
    137c:	31 09       	sbc	r19, r1
    137e:	39 83       	std	Y+1, r19	; 0x01
    1380:	28 83       	st	Y, r18
    1382:	3a c0       	rjmp	.+116    	; 0x13f8 <malloc+0x124>
    1384:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    1388:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    138c:	23 2b       	or	r18, r19
    138e:	41 f4       	brne	.+16     	; 0x13a0 <malloc+0xcc>
    1390:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1394:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1398:	30 93 90 03 	sts	0x0390, r19	; 0x800390 <__brkval+0x1>
    139c:	20 93 8f 03 	sts	0x038F, r18	; 0x80038f <__brkval>
    13a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13a8:	21 15       	cp	r18, r1
    13aa:	31 05       	cpc	r19, r1
    13ac:	41 f4       	brne	.+16     	; 0x13be <malloc+0xea>
    13ae:	2d b7       	in	r18, 0x3d	; 61
    13b0:	3e b7       	in	r19, 0x3e	; 62
    13b2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13b6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13ba:	24 1b       	sub	r18, r20
    13bc:	35 0b       	sbc	r19, r21
    13be:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <__brkval>
    13c2:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <__brkval+0x1>
    13c6:	e2 17       	cp	r30, r18
    13c8:	f3 07       	cpc	r31, r19
    13ca:	a0 f4       	brcc	.+40     	; 0x13f4 <malloc+0x120>
    13cc:	2e 1b       	sub	r18, r30
    13ce:	3f 0b       	sbc	r19, r31
    13d0:	28 17       	cp	r18, r24
    13d2:	39 07       	cpc	r19, r25
    13d4:	78 f0       	brcs	.+30     	; 0x13f4 <malloc+0x120>
    13d6:	ac 01       	movw	r20, r24
    13d8:	4e 5f       	subi	r20, 0xFE	; 254
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	24 17       	cp	r18, r20
    13de:	35 07       	cpc	r19, r21
    13e0:	48 f0       	brcs	.+18     	; 0x13f4 <malloc+0x120>
    13e2:	4e 0f       	add	r20, r30
    13e4:	5f 1f       	adc	r21, r31
    13e6:	50 93 90 03 	sts	0x0390, r21	; 0x800390 <__brkval+0x1>
    13ea:	40 93 8f 03 	sts	0x038F, r20	; 0x80038f <__brkval>
    13ee:	81 93       	st	Z+, r24
    13f0:	91 93       	st	Z+, r25
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <malloc+0x124>
    13f4:	e0 e0       	ldi	r30, 0x00	; 0
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	cf 01       	movw	r24, r30
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	08 95       	ret

00001404 <free>:
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	09 f4       	brne	.+2      	; 0x140e <free+0xa>
    140c:	81 c0       	rjmp	.+258    	; 0x1510 <free+0x10c>
    140e:	fc 01       	movw	r30, r24
    1410:	32 97       	sbiw	r30, 0x02	; 2
    1412:	13 82       	std	Z+3, r1	; 0x03
    1414:	12 82       	std	Z+2, r1	; 0x02
    1416:	a0 91 91 03 	lds	r26, 0x0391	; 0x800391 <__flp>
    141a:	b0 91 92 03 	lds	r27, 0x0392	; 0x800392 <__flp+0x1>
    141e:	10 97       	sbiw	r26, 0x00	; 0
    1420:	81 f4       	brne	.+32     	; 0x1442 <free+0x3e>
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	82 0f       	add	r24, r18
    1428:	93 1f       	adc	r25, r19
    142a:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    142e:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	51 f5       	brne	.+84     	; 0x148c <free+0x88>
    1438:	f0 93 90 03 	sts	0x0390, r31	; 0x800390 <__brkval+0x1>
    143c:	e0 93 8f 03 	sts	0x038F, r30	; 0x80038f <__brkval>
    1440:	67 c0       	rjmp	.+206    	; 0x1510 <free+0x10c>
    1442:	ed 01       	movw	r28, r26
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	ce 17       	cp	r28, r30
    144a:	df 07       	cpc	r29, r31
    144c:	40 f4       	brcc	.+16     	; 0x145e <free+0x5a>
    144e:	4a 81       	ldd	r20, Y+2	; 0x02
    1450:	5b 81       	ldd	r21, Y+3	; 0x03
    1452:	9e 01       	movw	r18, r28
    1454:	41 15       	cp	r20, r1
    1456:	51 05       	cpc	r21, r1
    1458:	f1 f0       	breq	.+60     	; 0x1496 <free+0x92>
    145a:	ea 01       	movw	r28, r20
    145c:	f5 cf       	rjmp	.-22     	; 0x1448 <free+0x44>
    145e:	d3 83       	std	Z+3, r29	; 0x03
    1460:	c2 83       	std	Z+2, r28	; 0x02
    1462:	40 81       	ld	r20, Z
    1464:	51 81       	ldd	r21, Z+1	; 0x01
    1466:	84 0f       	add	r24, r20
    1468:	95 1f       	adc	r25, r21
    146a:	c8 17       	cp	r28, r24
    146c:	d9 07       	cpc	r29, r25
    146e:	59 f4       	brne	.+22     	; 0x1486 <free+0x82>
    1470:	88 81       	ld	r24, Y
    1472:	99 81       	ldd	r25, Y+1	; 0x01
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	9b 81       	ldd	r25, Y+3	; 0x03
    1482:	93 83       	std	Z+3, r25	; 0x03
    1484:	82 83       	std	Z+2, r24	; 0x02
    1486:	21 15       	cp	r18, r1
    1488:	31 05       	cpc	r19, r1
    148a:	29 f4       	brne	.+10     	; 0x1496 <free+0x92>
    148c:	f0 93 92 03 	sts	0x0392, r31	; 0x800392 <__flp+0x1>
    1490:	e0 93 91 03 	sts	0x0391, r30	; 0x800391 <__flp>
    1494:	3d c0       	rjmp	.+122    	; 0x1510 <free+0x10c>
    1496:	e9 01       	movw	r28, r18
    1498:	fb 83       	std	Y+3, r31	; 0x03
    149a:	ea 83       	std	Y+2, r30	; 0x02
    149c:	49 91       	ld	r20, Y+
    149e:	59 91       	ld	r21, Y+
    14a0:	c4 0f       	add	r28, r20
    14a2:	d5 1f       	adc	r29, r21
    14a4:	ec 17       	cp	r30, r28
    14a6:	fd 07       	cpc	r31, r29
    14a8:	61 f4       	brne	.+24     	; 0x14c2 <free+0xbe>
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	84 0f       	add	r24, r20
    14b0:	95 1f       	adc	r25, r21
    14b2:	02 96       	adiw	r24, 0x02	; 2
    14b4:	e9 01       	movw	r28, r18
    14b6:	99 83       	std	Y+1, r25	; 0x01
    14b8:	88 83       	st	Y, r24
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	93 81       	ldd	r25, Z+3	; 0x03
    14be:	9b 83       	std	Y+3, r25	; 0x03
    14c0:	8a 83       	std	Y+2, r24	; 0x02
    14c2:	e0 e0       	ldi	r30, 0x00	; 0
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	8d 91       	ld	r24, X+
    14ca:	9c 91       	ld	r25, X
    14cc:	13 97       	sbiw	r26, 0x03	; 3
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <free+0xd4>
    14d2:	fd 01       	movw	r30, r26
    14d4:	dc 01       	movw	r26, r24
    14d6:	f7 cf       	rjmp	.-18     	; 0x14c6 <free+0xc2>
    14d8:	8d 91       	ld	r24, X+
    14da:	9c 91       	ld	r25, X
    14dc:	11 97       	sbiw	r26, 0x01	; 1
    14de:	9d 01       	movw	r18, r26
    14e0:	2e 5f       	subi	r18, 0xFE	; 254
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    14ec:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    14f0:	28 17       	cp	r18, r24
    14f2:	39 07       	cpc	r19, r25
    14f4:	69 f4       	brne	.+26     	; 0x1510 <free+0x10c>
    14f6:	30 97       	sbiw	r30, 0x00	; 0
    14f8:	29 f4       	brne	.+10     	; 0x1504 <free+0x100>
    14fa:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__flp+0x1>
    14fe:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <__flp>
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <free+0x104>
    1504:	13 82       	std	Z+3, r1	; 0x03
    1506:	12 82       	std	Z+2, r1	; 0x02
    1508:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <__brkval+0x1>
    150c:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <__brkval>
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <sprintf>:
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	2e 97       	sbiw	r28, 0x0e	; 14
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	0d 89       	ldd	r16, Y+21	; 0x15
    1530:	1e 89       	ldd	r17, Y+22	; 0x16
    1532:	86 e0       	ldi	r24, 0x06	; 6
    1534:	8c 83       	std	Y+4, r24	; 0x04
    1536:	1a 83       	std	Y+2, r17	; 0x02
    1538:	09 83       	std	Y+1, r16	; 0x01
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f e7       	ldi	r25, 0x7F	; 127
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	ae 01       	movw	r20, r28
    1544:	47 5e       	subi	r20, 0xE7	; 231
    1546:	5f 4f       	sbci	r21, 0xFF	; 255
    1548:	6f 89       	ldd	r22, Y+23	; 0x17
    154a:	78 8d       	ldd	r23, Y+24	; 0x18
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	10 d0       	rcall	.+32     	; 0x1572 <vfprintf>
    1552:	ef 81       	ldd	r30, Y+7	; 0x07
    1554:	f8 85       	ldd	r31, Y+8	; 0x08
    1556:	e0 0f       	add	r30, r16
    1558:	f1 1f       	adc	r31, r17
    155a:	10 82       	st	Z, r1
    155c:	2e 96       	adiw	r28, 0x0e	; 14
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <vfprintf>:
    1572:	2f 92       	push	r2
    1574:	3f 92       	push	r3
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2b 97       	sbiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	6c 01       	movw	r12, r24
    15a8:	7b 01       	movw	r14, r22
    15aa:	8a 01       	movw	r16, r20
    15ac:	fc 01       	movw	r30, r24
    15ae:	17 82       	std	Z+7, r1	; 0x07
    15b0:	16 82       	std	Z+6, r1	; 0x06
    15b2:	83 81       	ldd	r24, Z+3	; 0x03
    15b4:	81 ff       	sbrs	r24, 1
    15b6:	bf c1       	rjmp	.+894    	; 0x1936 <vfprintf+0x3c4>
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	3c 01       	movw	r6, r24
    15be:	f6 01       	movw	r30, r12
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	f7 01       	movw	r30, r14
    15c4:	93 fd       	sbrc	r25, 3
    15c6:	85 91       	lpm	r24, Z+
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	81 91       	ld	r24, Z+
    15cc:	7f 01       	movw	r14, r30
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <vfprintf+0x62>
    15d2:	ad c1       	rjmp	.+858    	; 0x192e <vfprintf+0x3bc>
    15d4:	85 32       	cpi	r24, 0x25	; 37
    15d6:	39 f4       	brne	.+14     	; 0x15e6 <vfprintf+0x74>
    15d8:	93 fd       	sbrc	r25, 3
    15da:	85 91       	lpm	r24, Z+
    15dc:	93 ff       	sbrs	r25, 3
    15de:	81 91       	ld	r24, Z+
    15e0:	7f 01       	movw	r14, r30
    15e2:	85 32       	cpi	r24, 0x25	; 37
    15e4:	21 f4       	brne	.+8      	; 0x15ee <vfprintf+0x7c>
    15e6:	b6 01       	movw	r22, r12
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	d6 d1       	rcall	.+940    	; 0x1998 <fputc>
    15ec:	e8 cf       	rjmp	.-48     	; 0x15be <vfprintf+0x4c>
    15ee:	91 2c       	mov	r9, r1
    15f0:	21 2c       	mov	r2, r1
    15f2:	31 2c       	mov	r3, r1
    15f4:	ff e1       	ldi	r31, 0x1F	; 31
    15f6:	f3 15       	cp	r31, r3
    15f8:	d8 f0       	brcs	.+54     	; 0x1630 <vfprintf+0xbe>
    15fa:	8b 32       	cpi	r24, 0x2B	; 43
    15fc:	79 f0       	breq	.+30     	; 0x161c <vfprintf+0xaa>
    15fe:	38 f4       	brcc	.+14     	; 0x160e <vfprintf+0x9c>
    1600:	80 32       	cpi	r24, 0x20	; 32
    1602:	79 f0       	breq	.+30     	; 0x1622 <vfprintf+0xb0>
    1604:	83 32       	cpi	r24, 0x23	; 35
    1606:	a1 f4       	brne	.+40     	; 0x1630 <vfprintf+0xbe>
    1608:	23 2d       	mov	r18, r3
    160a:	20 61       	ori	r18, 0x10	; 16
    160c:	1d c0       	rjmp	.+58     	; 0x1648 <vfprintf+0xd6>
    160e:	8d 32       	cpi	r24, 0x2D	; 45
    1610:	61 f0       	breq	.+24     	; 0x162a <vfprintf+0xb8>
    1612:	80 33       	cpi	r24, 0x30	; 48
    1614:	69 f4       	brne	.+26     	; 0x1630 <vfprintf+0xbe>
    1616:	23 2d       	mov	r18, r3
    1618:	21 60       	ori	r18, 0x01	; 1
    161a:	16 c0       	rjmp	.+44     	; 0x1648 <vfprintf+0xd6>
    161c:	83 2d       	mov	r24, r3
    161e:	82 60       	ori	r24, 0x02	; 2
    1620:	38 2e       	mov	r3, r24
    1622:	e3 2d       	mov	r30, r3
    1624:	e4 60       	ori	r30, 0x04	; 4
    1626:	3e 2e       	mov	r3, r30
    1628:	2a c0       	rjmp	.+84     	; 0x167e <vfprintf+0x10c>
    162a:	f3 2d       	mov	r31, r3
    162c:	f8 60       	ori	r31, 0x08	; 8
    162e:	1d c0       	rjmp	.+58     	; 0x166a <vfprintf+0xf8>
    1630:	37 fc       	sbrc	r3, 7
    1632:	2d c0       	rjmp	.+90     	; 0x168e <vfprintf+0x11c>
    1634:	20 ed       	ldi	r18, 0xD0	; 208
    1636:	28 0f       	add	r18, r24
    1638:	2a 30       	cpi	r18, 0x0A	; 10
    163a:	40 f0       	brcs	.+16     	; 0x164c <vfprintf+0xda>
    163c:	8e 32       	cpi	r24, 0x2E	; 46
    163e:	b9 f4       	brne	.+46     	; 0x166e <vfprintf+0xfc>
    1640:	36 fc       	sbrc	r3, 6
    1642:	75 c1       	rjmp	.+746    	; 0x192e <vfprintf+0x3bc>
    1644:	23 2d       	mov	r18, r3
    1646:	20 64       	ori	r18, 0x40	; 64
    1648:	32 2e       	mov	r3, r18
    164a:	19 c0       	rjmp	.+50     	; 0x167e <vfprintf+0x10c>
    164c:	36 fe       	sbrs	r3, 6
    164e:	06 c0       	rjmp	.+12     	; 0x165c <vfprintf+0xea>
    1650:	8a e0       	ldi	r24, 0x0A	; 10
    1652:	98 9e       	mul	r9, r24
    1654:	20 0d       	add	r18, r0
    1656:	11 24       	eor	r1, r1
    1658:	92 2e       	mov	r9, r18
    165a:	11 c0       	rjmp	.+34     	; 0x167e <vfprintf+0x10c>
    165c:	ea e0       	ldi	r30, 0x0A	; 10
    165e:	2e 9e       	mul	r2, r30
    1660:	20 0d       	add	r18, r0
    1662:	11 24       	eor	r1, r1
    1664:	22 2e       	mov	r2, r18
    1666:	f3 2d       	mov	r31, r3
    1668:	f0 62       	ori	r31, 0x20	; 32
    166a:	3f 2e       	mov	r3, r31
    166c:	08 c0       	rjmp	.+16     	; 0x167e <vfprintf+0x10c>
    166e:	8c 36       	cpi	r24, 0x6C	; 108
    1670:	21 f4       	brne	.+8      	; 0x167a <vfprintf+0x108>
    1672:	83 2d       	mov	r24, r3
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	38 2e       	mov	r3, r24
    1678:	02 c0       	rjmp	.+4      	; 0x167e <vfprintf+0x10c>
    167a:	88 36       	cpi	r24, 0x68	; 104
    167c:	41 f4       	brne	.+16     	; 0x168e <vfprintf+0x11c>
    167e:	f7 01       	movw	r30, r14
    1680:	93 fd       	sbrc	r25, 3
    1682:	85 91       	lpm	r24, Z+
    1684:	93 ff       	sbrs	r25, 3
    1686:	81 91       	ld	r24, Z+
    1688:	7f 01       	movw	r14, r30
    168a:	81 11       	cpse	r24, r1
    168c:	b3 cf       	rjmp	.-154    	; 0x15f4 <vfprintf+0x82>
    168e:	98 2f       	mov	r25, r24
    1690:	9f 7d       	andi	r25, 0xDF	; 223
    1692:	95 54       	subi	r25, 0x45	; 69
    1694:	93 30       	cpi	r25, 0x03	; 3
    1696:	28 f4       	brcc	.+10     	; 0x16a2 <vfprintf+0x130>
    1698:	0c 5f       	subi	r16, 0xFC	; 252
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	9f e3       	ldi	r25, 0x3F	; 63
    169e:	99 83       	std	Y+1, r25	; 0x01
    16a0:	0d c0       	rjmp	.+26     	; 0x16bc <vfprintf+0x14a>
    16a2:	83 36       	cpi	r24, 0x63	; 99
    16a4:	31 f0       	breq	.+12     	; 0x16b2 <vfprintf+0x140>
    16a6:	83 37       	cpi	r24, 0x73	; 115
    16a8:	71 f0       	breq	.+28     	; 0x16c6 <vfprintf+0x154>
    16aa:	83 35       	cpi	r24, 0x53	; 83
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <vfprintf+0x13e>
    16ae:	55 c0       	rjmp	.+170    	; 0x175a <vfprintf+0x1e8>
    16b0:	20 c0       	rjmp	.+64     	; 0x16f2 <vfprintf+0x180>
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 81       	ld	r24, Z
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	0e 5f       	subi	r16, 0xFE	; 254
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	88 24       	eor	r8, r8
    16be:	83 94       	inc	r8
    16c0:	91 2c       	mov	r9, r1
    16c2:	53 01       	movw	r10, r6
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <vfprintf+0x178>
    16c6:	28 01       	movw	r4, r16
    16c8:	f2 e0       	ldi	r31, 0x02	; 2
    16ca:	4f 0e       	add	r4, r31
    16cc:	51 1c       	adc	r5, r1
    16ce:	f8 01       	movw	r30, r16
    16d0:	a0 80       	ld	r10, Z
    16d2:	b1 80       	ldd	r11, Z+1	; 0x01
    16d4:	36 fe       	sbrs	r3, 6
    16d6:	03 c0       	rjmp	.+6      	; 0x16de <vfprintf+0x16c>
    16d8:	69 2d       	mov	r22, r9
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x170>
    16de:	6f ef       	ldi	r22, 0xFF	; 255
    16e0:	7f ef       	ldi	r23, 0xFF	; 255
    16e2:	c5 01       	movw	r24, r10
    16e4:	4e d1       	rcall	.+668    	; 0x1982 <strnlen>
    16e6:	4c 01       	movw	r8, r24
    16e8:	82 01       	movw	r16, r4
    16ea:	f3 2d       	mov	r31, r3
    16ec:	ff 77       	andi	r31, 0x7F	; 127
    16ee:	3f 2e       	mov	r3, r31
    16f0:	15 c0       	rjmp	.+42     	; 0x171c <vfprintf+0x1aa>
    16f2:	28 01       	movw	r4, r16
    16f4:	22 e0       	ldi	r18, 0x02	; 2
    16f6:	42 0e       	add	r4, r18
    16f8:	51 1c       	adc	r5, r1
    16fa:	f8 01       	movw	r30, r16
    16fc:	a0 80       	ld	r10, Z
    16fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1700:	36 fe       	sbrs	r3, 6
    1702:	03 c0       	rjmp	.+6      	; 0x170a <vfprintf+0x198>
    1704:	69 2d       	mov	r22, r9
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x19c>
    170a:	6f ef       	ldi	r22, 0xFF	; 255
    170c:	7f ef       	ldi	r23, 0xFF	; 255
    170e:	c5 01       	movw	r24, r10
    1710:	2d d1       	rcall	.+602    	; 0x196c <strnlen_P>
    1712:	4c 01       	movw	r8, r24
    1714:	f3 2d       	mov	r31, r3
    1716:	f0 68       	ori	r31, 0x80	; 128
    1718:	3f 2e       	mov	r3, r31
    171a:	82 01       	movw	r16, r4
    171c:	33 fc       	sbrc	r3, 3
    171e:	19 c0       	rjmp	.+50     	; 0x1752 <vfprintf+0x1e0>
    1720:	82 2d       	mov	r24, r2
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	88 16       	cp	r8, r24
    1726:	99 06       	cpc	r9, r25
    1728:	a0 f4       	brcc	.+40     	; 0x1752 <vfprintf+0x1e0>
    172a:	b6 01       	movw	r22, r12
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	33 d1       	rcall	.+614    	; 0x1998 <fputc>
    1732:	2a 94       	dec	r2
    1734:	f5 cf       	rjmp	.-22     	; 0x1720 <vfprintf+0x1ae>
    1736:	f5 01       	movw	r30, r10
    1738:	37 fc       	sbrc	r3, 7
    173a:	85 91       	lpm	r24, Z+
    173c:	37 fe       	sbrs	r3, 7
    173e:	81 91       	ld	r24, Z+
    1740:	5f 01       	movw	r10, r30
    1742:	b6 01       	movw	r22, r12
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	28 d1       	rcall	.+592    	; 0x1998 <fputc>
    1748:	21 10       	cpse	r2, r1
    174a:	2a 94       	dec	r2
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	82 1a       	sub	r8, r18
    1750:	91 08       	sbc	r9, r1
    1752:	81 14       	cp	r8, r1
    1754:	91 04       	cpc	r9, r1
    1756:	79 f7       	brne	.-34     	; 0x1736 <vfprintf+0x1c4>
    1758:	e1 c0       	rjmp	.+450    	; 0x191c <vfprintf+0x3aa>
    175a:	84 36       	cpi	r24, 0x64	; 100
    175c:	11 f0       	breq	.+4      	; 0x1762 <vfprintf+0x1f0>
    175e:	89 36       	cpi	r24, 0x69	; 105
    1760:	39 f5       	brne	.+78     	; 0x17b0 <vfprintf+0x23e>
    1762:	f8 01       	movw	r30, r16
    1764:	37 fe       	sbrs	r3, 7
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <vfprintf+0x204>
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0c 5f       	subi	r16, 0xFC	; 252
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <vfprintf+0x214>
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	07 2e       	mov	r0, r23
    177c:	00 0c       	add	r0, r0
    177e:	88 0b       	sbc	r24, r24
    1780:	99 0b       	sbc	r25, r25
    1782:	0e 5f       	subi	r16, 0xFE	; 254
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	f3 2d       	mov	r31, r3
    1788:	ff 76       	andi	r31, 0x6F	; 111
    178a:	3f 2e       	mov	r3, r31
    178c:	97 ff       	sbrs	r25, 7
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x230>
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	f0 68       	ori	r31, 0x80	; 128
    17a0:	3f 2e       	mov	r3, r31
    17a2:	2a e0       	ldi	r18, 0x0A	; 10
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	a3 01       	movw	r20, r6
    17a8:	33 d1       	rcall	.+614    	; 0x1a10 <__ultoa_invert>
    17aa:	88 2e       	mov	r8, r24
    17ac:	86 18       	sub	r8, r6
    17ae:	44 c0       	rjmp	.+136    	; 0x1838 <vfprintf+0x2c6>
    17b0:	85 37       	cpi	r24, 0x75	; 117
    17b2:	31 f4       	brne	.+12     	; 0x17c0 <vfprintf+0x24e>
    17b4:	23 2d       	mov	r18, r3
    17b6:	2f 7e       	andi	r18, 0xEF	; 239
    17b8:	b2 2e       	mov	r11, r18
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	25 c0       	rjmp	.+74     	; 0x180a <vfprintf+0x298>
    17c0:	93 2d       	mov	r25, r3
    17c2:	99 7f       	andi	r25, 0xF9	; 249
    17c4:	b9 2e       	mov	r11, r25
    17c6:	8f 36       	cpi	r24, 0x6F	; 111
    17c8:	c1 f0       	breq	.+48     	; 0x17fa <vfprintf+0x288>
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <vfprintf+0x260>
    17cc:	88 35       	cpi	r24, 0x58	; 88
    17ce:	79 f0       	breq	.+30     	; 0x17ee <vfprintf+0x27c>
    17d0:	ae c0       	rjmp	.+348    	; 0x192e <vfprintf+0x3bc>
    17d2:	80 37       	cpi	r24, 0x70	; 112
    17d4:	19 f0       	breq	.+6      	; 0x17dc <vfprintf+0x26a>
    17d6:	88 37       	cpi	r24, 0x78	; 120
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <vfprintf+0x270>
    17da:	a9 c0       	rjmp	.+338    	; 0x192e <vfprintf+0x3bc>
    17dc:	e9 2f       	mov	r30, r25
    17de:	e0 61       	ori	r30, 0x10	; 16
    17e0:	be 2e       	mov	r11, r30
    17e2:	b4 fe       	sbrs	r11, 4
    17e4:	0d c0       	rjmp	.+26     	; 0x1800 <vfprintf+0x28e>
    17e6:	fb 2d       	mov	r31, r11
    17e8:	f4 60       	ori	r31, 0x04	; 4
    17ea:	bf 2e       	mov	r11, r31
    17ec:	09 c0       	rjmp	.+18     	; 0x1800 <vfprintf+0x28e>
    17ee:	34 fe       	sbrs	r3, 4
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <vfprintf+0x294>
    17f2:	29 2f       	mov	r18, r25
    17f4:	26 60       	ori	r18, 0x06	; 6
    17f6:	b2 2e       	mov	r11, r18
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <vfprintf+0x294>
    17fa:	28 e0       	ldi	r18, 0x08	; 8
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <vfprintf+0x298>
    1800:	20 e1       	ldi	r18, 0x10	; 16
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <vfprintf+0x298>
    1806:	20 e1       	ldi	r18, 0x10	; 16
    1808:	32 e0       	ldi	r19, 0x02	; 2
    180a:	f8 01       	movw	r30, r16
    180c:	b7 fe       	sbrs	r11, 7
    180e:	07 c0       	rjmp	.+14     	; 0x181e <vfprintf+0x2ac>
    1810:	60 81       	ld	r22, Z
    1812:	71 81       	ldd	r23, Z+1	; 0x01
    1814:	82 81       	ldd	r24, Z+2	; 0x02
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	0c 5f       	subi	r16, 0xFC	; 252
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	06 c0       	rjmp	.+12     	; 0x182a <vfprintf+0x2b8>
    181e:	60 81       	ld	r22, Z
    1820:	71 81       	ldd	r23, Z+1	; 0x01
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 5f       	subi	r16, 0xFE	; 254
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	a3 01       	movw	r20, r6
    182c:	f1 d0       	rcall	.+482    	; 0x1a10 <__ultoa_invert>
    182e:	88 2e       	mov	r8, r24
    1830:	86 18       	sub	r8, r6
    1832:	fb 2d       	mov	r31, r11
    1834:	ff 77       	andi	r31, 0x7F	; 127
    1836:	3f 2e       	mov	r3, r31
    1838:	36 fe       	sbrs	r3, 6
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <vfprintf+0x2e4>
    183c:	23 2d       	mov	r18, r3
    183e:	2e 7f       	andi	r18, 0xFE	; 254
    1840:	a2 2e       	mov	r10, r18
    1842:	89 14       	cp	r8, r9
    1844:	58 f4       	brcc	.+22     	; 0x185c <vfprintf+0x2ea>
    1846:	34 fe       	sbrs	r3, 4
    1848:	0b c0       	rjmp	.+22     	; 0x1860 <vfprintf+0x2ee>
    184a:	32 fc       	sbrc	r3, 2
    184c:	09 c0       	rjmp	.+18     	; 0x1860 <vfprintf+0x2ee>
    184e:	83 2d       	mov	r24, r3
    1850:	8e 7e       	andi	r24, 0xEE	; 238
    1852:	a8 2e       	mov	r10, r24
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <vfprintf+0x2ee>
    1856:	b8 2c       	mov	r11, r8
    1858:	a3 2c       	mov	r10, r3
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <vfprintf+0x2f0>
    185c:	b8 2c       	mov	r11, r8
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfprintf+0x2f0>
    1860:	b9 2c       	mov	r11, r9
    1862:	a4 fe       	sbrs	r10, 4
    1864:	0f c0       	rjmp	.+30     	; 0x1884 <vfprintf+0x312>
    1866:	fe 01       	movw	r30, r28
    1868:	e8 0d       	add	r30, r8
    186a:	f1 1d       	adc	r31, r1
    186c:	80 81       	ld	r24, Z
    186e:	80 33       	cpi	r24, 0x30	; 48
    1870:	21 f4       	brne	.+8      	; 0x187a <vfprintf+0x308>
    1872:	9a 2d       	mov	r25, r10
    1874:	99 7e       	andi	r25, 0xE9	; 233
    1876:	a9 2e       	mov	r10, r25
    1878:	09 c0       	rjmp	.+18     	; 0x188c <vfprintf+0x31a>
    187a:	a2 fe       	sbrs	r10, 2
    187c:	06 c0       	rjmp	.+12     	; 0x188a <vfprintf+0x318>
    187e:	b3 94       	inc	r11
    1880:	b3 94       	inc	r11
    1882:	04 c0       	rjmp	.+8      	; 0x188c <vfprintf+0x31a>
    1884:	8a 2d       	mov	r24, r10
    1886:	86 78       	andi	r24, 0x86	; 134
    1888:	09 f0       	breq	.+2      	; 0x188c <vfprintf+0x31a>
    188a:	b3 94       	inc	r11
    188c:	a3 fc       	sbrc	r10, 3
    188e:	10 c0       	rjmp	.+32     	; 0x18b0 <vfprintf+0x33e>
    1890:	a0 fe       	sbrs	r10, 0
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <vfprintf+0x32e>
    1894:	b2 14       	cp	r11, r2
    1896:	80 f4       	brcc	.+32     	; 0x18b8 <vfprintf+0x346>
    1898:	28 0c       	add	r2, r8
    189a:	92 2c       	mov	r9, r2
    189c:	9b 18       	sub	r9, r11
    189e:	0d c0       	rjmp	.+26     	; 0x18ba <vfprintf+0x348>
    18a0:	b2 14       	cp	r11, r2
    18a2:	58 f4       	brcc	.+22     	; 0x18ba <vfprintf+0x348>
    18a4:	b6 01       	movw	r22, r12
    18a6:	80 e2       	ldi	r24, 0x20	; 32
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	76 d0       	rcall	.+236    	; 0x1998 <fputc>
    18ac:	b3 94       	inc	r11
    18ae:	f8 cf       	rjmp	.-16     	; 0x18a0 <vfprintf+0x32e>
    18b0:	b2 14       	cp	r11, r2
    18b2:	18 f4       	brcc	.+6      	; 0x18ba <vfprintf+0x348>
    18b4:	2b 18       	sub	r2, r11
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <vfprintf+0x34a>
    18b8:	98 2c       	mov	r9, r8
    18ba:	21 2c       	mov	r2, r1
    18bc:	a4 fe       	sbrs	r10, 4
    18be:	0f c0       	rjmp	.+30     	; 0x18de <vfprintf+0x36c>
    18c0:	b6 01       	movw	r22, r12
    18c2:	80 e3       	ldi	r24, 0x30	; 48
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	68 d0       	rcall	.+208    	; 0x1998 <fputc>
    18c8:	a2 fe       	sbrs	r10, 2
    18ca:	16 c0       	rjmp	.+44     	; 0x18f8 <vfprintf+0x386>
    18cc:	a1 fc       	sbrc	r10, 1
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfprintf+0x364>
    18d0:	88 e7       	ldi	r24, 0x78	; 120
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfprintf+0x368>
    18d6:	88 e5       	ldi	r24, 0x58	; 88
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	b6 01       	movw	r22, r12
    18dc:	0c c0       	rjmp	.+24     	; 0x18f6 <vfprintf+0x384>
    18de:	8a 2d       	mov	r24, r10
    18e0:	86 78       	andi	r24, 0x86	; 134
    18e2:	51 f0       	breq	.+20     	; 0x18f8 <vfprintf+0x386>
    18e4:	a1 fe       	sbrs	r10, 1
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x37a>
    18e8:	8b e2       	ldi	r24, 0x2B	; 43
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <vfprintf+0x37c>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	a7 fc       	sbrc	r10, 7
    18f0:	8d e2       	ldi	r24, 0x2D	; 45
    18f2:	b6 01       	movw	r22, r12
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	50 d0       	rcall	.+160    	; 0x1998 <fputc>
    18f8:	89 14       	cp	r8, r9
    18fa:	30 f4       	brcc	.+12     	; 0x1908 <vfprintf+0x396>
    18fc:	b6 01       	movw	r22, r12
    18fe:	80 e3       	ldi	r24, 0x30	; 48
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	4a d0       	rcall	.+148    	; 0x1998 <fputc>
    1904:	9a 94       	dec	r9
    1906:	f8 cf       	rjmp	.-16     	; 0x18f8 <vfprintf+0x386>
    1908:	8a 94       	dec	r8
    190a:	f3 01       	movw	r30, r6
    190c:	e8 0d       	add	r30, r8
    190e:	f1 1d       	adc	r31, r1
    1910:	80 81       	ld	r24, Z
    1912:	b6 01       	movw	r22, r12
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	40 d0       	rcall	.+128    	; 0x1998 <fputc>
    1918:	81 10       	cpse	r8, r1
    191a:	f6 cf       	rjmp	.-20     	; 0x1908 <vfprintf+0x396>
    191c:	22 20       	and	r2, r2
    191e:	09 f4       	brne	.+2      	; 0x1922 <vfprintf+0x3b0>
    1920:	4e ce       	rjmp	.-868    	; 0x15be <vfprintf+0x4c>
    1922:	b6 01       	movw	r22, r12
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	37 d0       	rcall	.+110    	; 0x1998 <fputc>
    192a:	2a 94       	dec	r2
    192c:	f7 cf       	rjmp	.-18     	; 0x191c <vfprintf+0x3aa>
    192e:	f6 01       	movw	r30, r12
    1930:	86 81       	ldd	r24, Z+6	; 0x06
    1932:	97 81       	ldd	r25, Z+7	; 0x07
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x3c8>
    1936:	8f ef       	ldi	r24, 0xFF	; 255
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	2b 96       	adiw	r28, 0x0b	; 11
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	9f 90       	pop	r9
    195c:	8f 90       	pop	r8
    195e:	7f 90       	pop	r7
    1960:	6f 90       	pop	r6
    1962:	5f 90       	pop	r5
    1964:	4f 90       	pop	r4
    1966:	3f 90       	pop	r3
    1968:	2f 90       	pop	r2
    196a:	08 95       	ret

0000196c <strnlen_P>:
    196c:	fc 01       	movw	r30, r24
    196e:	05 90       	lpm	r0, Z+
    1970:	61 50       	subi	r22, 0x01	; 1
    1972:	70 40       	sbci	r23, 0x00	; 0
    1974:	01 10       	cpse	r0, r1
    1976:	d8 f7       	brcc	.-10     	; 0x196e <strnlen_P+0x2>
    1978:	80 95       	com	r24
    197a:	90 95       	com	r25
    197c:	8e 0f       	add	r24, r30
    197e:	9f 1f       	adc	r25, r31
    1980:	08 95       	ret

00001982 <strnlen>:
    1982:	fc 01       	movw	r30, r24
    1984:	61 50       	subi	r22, 0x01	; 1
    1986:	70 40       	sbci	r23, 0x00	; 0
    1988:	01 90       	ld	r0, Z+
    198a:	01 10       	cpse	r0, r1
    198c:	d8 f7       	brcc	.-10     	; 0x1984 <strnlen+0x2>
    198e:	80 95       	com	r24
    1990:	90 95       	com	r25
    1992:	8e 0f       	add	r24, r30
    1994:	9f 1f       	adc	r25, r31
    1996:	08 95       	ret

00001998 <fputc>:
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	fb 01       	movw	r30, r22
    19a2:	23 81       	ldd	r18, Z+3	; 0x03
    19a4:	21 fd       	sbrc	r18, 1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <fputc+0x16>
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	2c c0       	rjmp	.+88     	; 0x1a06 <fputc+0x6e>
    19ae:	22 ff       	sbrs	r18, 2
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <fputc+0x46>
    19b2:	46 81       	ldd	r20, Z+6	; 0x06
    19b4:	57 81       	ldd	r21, Z+7	; 0x07
    19b6:	24 81       	ldd	r18, Z+4	; 0x04
    19b8:	35 81       	ldd	r19, Z+5	; 0x05
    19ba:	42 17       	cp	r20, r18
    19bc:	53 07       	cpc	r21, r19
    19be:	44 f4       	brge	.+16     	; 0x19d0 <fputc+0x38>
    19c0:	a0 81       	ld	r26, Z
    19c2:	b1 81       	ldd	r27, Z+1	; 0x01
    19c4:	9d 01       	movw	r18, r26
    19c6:	2f 5f       	subi	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	31 83       	std	Z+1, r19	; 0x01
    19cc:	20 83       	st	Z, r18
    19ce:	8c 93       	st	X, r24
    19d0:	26 81       	ldd	r18, Z+6	; 0x06
    19d2:	37 81       	ldd	r19, Z+7	; 0x07
    19d4:	2f 5f       	subi	r18, 0xFF	; 255
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	37 83       	std	Z+7, r19	; 0x07
    19da:	26 83       	std	Z+6, r18	; 0x06
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <fputc+0x6e>
    19de:	8b 01       	movw	r16, r22
    19e0:	ec 01       	movw	r28, r24
    19e2:	fb 01       	movw	r30, r22
    19e4:	00 84       	ldd	r0, Z+8	; 0x08
    19e6:	f1 85       	ldd	r31, Z+9	; 0x09
    19e8:	e0 2d       	mov	r30, r0
    19ea:	09 95       	icall
    19ec:	89 2b       	or	r24, r25
    19ee:	e1 f6       	brne	.-72     	; 0x19a8 <fputc+0x10>
    19f0:	d8 01       	movw	r26, r16
    19f2:	16 96       	adiw	r26, 0x06	; 6
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	17 97       	sbiw	r26, 0x07	; 7
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	17 96       	adiw	r26, 0x07	; 7
    19fe:	9c 93       	st	X, r25
    1a00:	8e 93       	st	-X, r24
    1a02:	16 97       	sbiw	r26, 0x06	; 6
    1a04:	ce 01       	movw	r24, r28
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	08 95       	ret

00001a10 <__ultoa_invert>:
    1a10:	fa 01       	movw	r30, r20
    1a12:	aa 27       	eor	r26, r26
    1a14:	28 30       	cpi	r18, 0x08	; 8
    1a16:	51 f1       	breq	.+84     	; 0x1a6c <__ultoa_invert+0x5c>
    1a18:	20 31       	cpi	r18, 0x10	; 16
    1a1a:	81 f1       	breq	.+96     	; 0x1a7c <__ultoa_invert+0x6c>
    1a1c:	e8 94       	clt
    1a1e:	6f 93       	push	r22
    1a20:	6e 7f       	andi	r22, 0xFE	; 254
    1a22:	6e 5f       	subi	r22, 0xFE	; 254
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	8f 4f       	sbci	r24, 0xFF	; 255
    1a28:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2a:	af 4f       	sbci	r26, 0xFF	; 255
    1a2c:	b1 e0       	ldi	r27, 0x01	; 1
    1a2e:	3e d0       	rcall	.+124    	; 0x1aac <__ultoa_invert+0x9c>
    1a30:	b4 e0       	ldi	r27, 0x04	; 4
    1a32:	3c d0       	rcall	.+120    	; 0x1aac <__ultoa_invert+0x9c>
    1a34:	67 0f       	add	r22, r23
    1a36:	78 1f       	adc	r23, r24
    1a38:	89 1f       	adc	r24, r25
    1a3a:	9a 1f       	adc	r25, r26
    1a3c:	a1 1d       	adc	r26, r1
    1a3e:	68 0f       	add	r22, r24
    1a40:	79 1f       	adc	r23, r25
    1a42:	8a 1f       	adc	r24, r26
    1a44:	91 1d       	adc	r25, r1
    1a46:	a1 1d       	adc	r26, r1
    1a48:	6a 0f       	add	r22, r26
    1a4a:	71 1d       	adc	r23, r1
    1a4c:	81 1d       	adc	r24, r1
    1a4e:	91 1d       	adc	r25, r1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	20 d0       	rcall	.+64     	; 0x1a94 <__ultoa_invert+0x84>
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <__ultoa_invert+0x48>
    1a56:	68 94       	set
    1a58:	3f 91       	pop	r19
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	26 9f       	mul	r18, r22
    1a5e:	11 24       	eor	r1, r1
    1a60:	30 19       	sub	r19, r0
    1a62:	30 5d       	subi	r19, 0xD0	; 208
    1a64:	31 93       	st	Z+, r19
    1a66:	de f6       	brtc	.-74     	; 0x1a1e <__ultoa_invert+0xe>
    1a68:	cf 01       	movw	r24, r30
    1a6a:	08 95       	ret
    1a6c:	46 2f       	mov	r20, r22
    1a6e:	47 70       	andi	r20, 0x07	; 7
    1a70:	40 5d       	subi	r20, 0xD0	; 208
    1a72:	41 93       	st	Z+, r20
    1a74:	b3 e0       	ldi	r27, 0x03	; 3
    1a76:	0f d0       	rcall	.+30     	; 0x1a96 <__ultoa_invert+0x86>
    1a78:	c9 f7       	brne	.-14     	; 0x1a6c <__ultoa_invert+0x5c>
    1a7a:	f6 cf       	rjmp	.-20     	; 0x1a68 <__ultoa_invert+0x58>
    1a7c:	46 2f       	mov	r20, r22
    1a7e:	4f 70       	andi	r20, 0x0F	; 15
    1a80:	40 5d       	subi	r20, 0xD0	; 208
    1a82:	4a 33       	cpi	r20, 0x3A	; 58
    1a84:	18 f0       	brcs	.+6      	; 0x1a8c <__ultoa_invert+0x7c>
    1a86:	49 5d       	subi	r20, 0xD9	; 217
    1a88:	31 fd       	sbrc	r19, 1
    1a8a:	40 52       	subi	r20, 0x20	; 32
    1a8c:	41 93       	st	Z+, r20
    1a8e:	02 d0       	rcall	.+4      	; 0x1a94 <__ultoa_invert+0x84>
    1a90:	a9 f7       	brne	.-22     	; 0x1a7c <__ultoa_invert+0x6c>
    1a92:	ea cf       	rjmp	.-44     	; 0x1a68 <__ultoa_invert+0x58>
    1a94:	b4 e0       	ldi	r27, 0x04	; 4
    1a96:	a6 95       	lsr	r26
    1a98:	97 95       	ror	r25
    1a9a:	87 95       	ror	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	ba 95       	dec	r27
    1aa2:	c9 f7       	brne	.-14     	; 0x1a96 <__ultoa_invert+0x86>
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	61 05       	cpc	r22, r1
    1aa8:	71 05       	cpc	r23, r1
    1aaa:	08 95       	ret
    1aac:	9b 01       	movw	r18, r22
    1aae:	ac 01       	movw	r20, r24
    1ab0:	0a 2e       	mov	r0, r26
    1ab2:	06 94       	lsr	r0
    1ab4:	57 95       	ror	r21
    1ab6:	47 95       	ror	r20
    1ab8:	37 95       	ror	r19
    1aba:	27 95       	ror	r18
    1abc:	ba 95       	dec	r27
    1abe:	c9 f7       	brne	.-14     	; 0x1ab2 <__ultoa_invert+0xa2>
    1ac0:	62 0f       	add	r22, r18
    1ac2:	73 1f       	adc	r23, r19
    1ac4:	84 1f       	adc	r24, r20
    1ac6:	95 1f       	adc	r25, r21
    1ac8:	a0 1d       	adc	r26, r0
    1aca:	08 95       	ret

00001acc <_exit>:
    1acc:	f8 94       	cli

00001ace <__stop_program>:
    1ace:	ff cf       	rjmp	.-2      	; 0x1ace <__stop_program>
