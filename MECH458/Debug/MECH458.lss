
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000370  00800100  00001e8a  00001f1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800470  00800470  0000228e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000228e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005524  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae1  00000000  00000000  00007b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034d5  00000000  00000000  00009661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000874  00000000  00000000  0000cb38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000925d  00000000  00000000  0000d3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac1  00000000  00000000  00016609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  000180ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00018402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	c0 c5       	rjmp	.+2944   	; 0xbb6 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e8       	ldi	r30, 0x8A	; 138
      ac:	fe e1       	ldi	r31, 0x1E	; 30
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 37       	cpi	r26, 0x70	; 112
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	a0 e7       	ldi	r26, 0x70	; 112
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ae 3f       	cpi	r26, 0xFE	; 254
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	fe d3       	rcall	.+2044   	; 0x8cc <main>
      d0:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <_exit>

000000d4 <__bad_interrupt>:
      d4:	ae c4       	rjmp	.+2396   	; 0xa32 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <g_ADCCount>
     120:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <g_ADCCount>
     12c:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 94 04 	sts	0x0494, r19	; 0x800494 <g_ADCCount+0x1>
     13a:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e1 58       	subi	r30, 0x81	; 129
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <g_ADCCount>
     162:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	16 c0       	rjmp	.+44     	; 0x1be <SERVER_Task+0x34>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2382>
     196:	88 23       	and	r24, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <SERVER_Task+0x30>
     19a:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     19e:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     1aa:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     1ae:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <STAGE1+0x1>
     1b2:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <STAGE1>
     1b6:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <g_WDTimeout>
     1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2382>
     1be:	66 99       	sbic	0x0c, 6	; 12
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <SERVER_Task+0x54>
     1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2383>
     1c6:	88 23       	and	r24, r24
     1c8:	41 f0       	breq	.+16     	; 0x1da <SERVER_Task+0x50>
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <STAGE2>
     1d0:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <STAGE2+0x1>
     1d4:	5a d3       	rcall	.+1716   	; 0x88a <LL_UpdateStatus>
     1d6:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <g_WDTimeout>
     1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2383>
     1de:	65 99       	sbic	0x0c, 5	; 12
     1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <SERVER_Task+0x6e>
     1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2384>
     1e6:	88 23       	and	r24, r24
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <SERVER_Task+0x6a>
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <_timer+0x23>
     1f0:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <g_WDTimeout>
     1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2384>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <SERVER_Task+0x8e>
     1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2382>
     200:	81 11       	cpse	r24, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <SERVER_Task+0x88>
     204:	ee e9       	ldi	r30, 0x9E	; 158
     206:	f4 e0       	ldi	r31, 0x04	; 4
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	82 8f       	std	Z+26, r24	; 0x1a
     20c:	84 a7       	std	Z+44, r24	; 0x2c
     20e:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <_timer+0x47>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2382>
     218:	66 9b       	sbis	0x0c, 6	; 12
     21a:	32 c0       	rjmp	.+100    	; 0x280 <SERVER_Task+0xf6>
     21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2383>
     220:	81 11       	cpse	r24, r1
     222:	2b c0       	rjmp	.+86     	; 0x27a <SERVER_Task+0xf0>
     224:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <STAGE2>
     228:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <STAGE2+0x1>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	b1 f4       	brne	.+44     	; 0x25c <SERVER_Task+0xd2>
     230:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     234:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     238:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <STAGE2+0x1>
     23c:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <STAGE2>
     240:	60 91 97 04 	lds	r22, 0x0497	; 0x800497 <g_Timer>
     244:	70 91 98 04 	lds	r23, 0x0498	; 0x800498 <g_Timer+0x1>
     248:	2a d3       	rcall	.+1620   	; 0x89e <LL_UpdateTick>
     24a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <EXIT_DELAY>
     24e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <EXIT_DELAY+0x1>
     252:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <lastItemTick+0x1>
     256:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <lastItemTick>
     25a:	0a c0       	rjmp	.+20     	; 0x270 <SERVER_Task+0xe6>
     25c:	d0 d2       	rcall	.+1440   	; 0x7fe <LL_Next>
     25e:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <STAGE2+0x1>
     262:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <STAGE2>
     266:	60 91 97 04 	lds	r22, 0x0497	; 0x800497 <g_Timer>
     26a:	70 91 98 04 	lds	r23, 0x0498	; 0x800498 <g_Timer+0x1>
     26e:	17 d3       	rcall	.+1582   	; 0x89e <LL_UpdateTick>
     270:	ea e7       	ldi	r30, 0x7A	; 122
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	80 64       	ori	r24, 0x40	; 64
     278:	80 83       	st	Z, r24
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2383>
     280:	65 9b       	sbis	0x0c, 5	; 12
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <SERVER_Task+0x118>
     284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2384>
     288:	81 11       	cpse	r24, r1
     28a:	08 c0       	rjmp	.+16     	; 0x29c <SERVER_Task+0x112>
     28c:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     290:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     294:	da d2       	rcall	.+1460   	; 0x84a <LL_GetClass>
     296:	85 30       	cpi	r24, 0x05	; 5
     298:	09 f4       	brne	.+2      	; 0x29c <SERVER_Task+0x112>
     29a:	31 d7       	rcall	.+3682   	; 0x10fe <SYS_Rampdown>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2384>
     2a2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     2a6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     2aa:	cf d2       	rcall	.+1438   	; 0x84a <LL_GetClass>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	c9 f4       	brne	.+50     	; 0x2e2 <SERVER_Task+0x158>
     2b0:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <stepper+0xe>
     2b4:	81 11       	cpse	r24, r1
     2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <SERVER_Task+0x158>
     2b8:	c0 91 97 04 	lds	r28, 0x0497	; 0x800497 <g_Timer>
     2bc:	d0 91 98 04 	lds	r29, 0x0498	; 0x800498 <g_Timer+0x1>
     2c0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     2c4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     2c8:	f0 d2       	rcall	.+1504   	; 0x8aa <LL_GetTick>
     2ca:	c8 1b       	sub	r28, r24
     2cc:	d9 0b       	sbc	r29, r25
     2ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     2d2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     2d6:	8c 17       	cp	r24, r28
     2d8:	9d 07       	cpc	r25, r29
     2da:	18 f4       	brcc	.+6      	; 0x2e2 <SERVER_Task+0x158>
     2dc:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <memory.2385>
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <SERVER_Task+0x160>
     2e2:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <memory.2385>
     2e6:	81 11       	cpse	r24, r1
     2e8:	34 c0       	rjmp	.+104    	; 0x352 <SERVER_Task+0x1c8>
     2ea:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     2ee:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     2f2:	ab d2       	rcall	.+1366   	; 0x84a <LL_GetClass>
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	69 f1       	breq	.+90     	; 0x352 <SERVER_Task+0x1c8>
     2f8:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     2fc:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     300:	82 81       	ldd	r24, Z+2	; 0x02
     302:	93 81       	ldd	r25, Z+3	; 0x03
     304:	a2 d2       	rcall	.+1348   	; 0x84a <LL_GetClass>
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	21 f1       	breq	.+72     	; 0x352 <SERVER_Task+0x1c8>
     30a:	e9 ee       	ldi	r30, 0xE9	; 233
     30c:	f4 e0       	ldi	r31, 0x04	; 4
     30e:	84 81       	ldd	r24, Z+4	; 0x04
     310:	22 81       	ldd	r18, Z+2	; 0x02
     312:	33 81       	ldd	r19, Z+3	; 0x03
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	82 17       	cp	r24, r18
     318:	93 07       	cpc	r25, r19
     31a:	d9 f4       	brne	.+54     	; 0x352 <SERVER_Task+0x1c8>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <memory.2385>
     322:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     326:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	8d d2       	rcall	.+1306   	; 0x84a <LL_GetClass>
     330:	e8 2f       	mov	r30, r24
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e7 5f       	subi	r30, 0xF7	; 247
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	c0 81       	ld	r28, Z
     33a:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     33e:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     342:	83 d2       	rcall	.+1286   	; 0x84a <LL_GetClass>
     344:	e8 2f       	mov	r30, r24
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	e7 5f       	subi	r30, 0xF7	; 247
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	6c 2f       	mov	r22, r28
     350:	12 d4       	rcall	.+2084   	; 0xb76 <STEPPER_SetRotation>
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <ADC_Task>:
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	cf 93       	push	r28
     362:	ef e7       	ldi	r30, 0x7F	; 127
     364:	f4 e0       	ldi	r31, 0x04	; 4
     366:	a0 81       	ld	r26, Z
     368:	b1 81       	ldd	r27, Z+1	; 0x01
     36a:	60 81       	ld	r22, Z
     36c:	71 81       	ldd	r23, Z+1	; 0x01
     36e:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <ticks.2393>
     372:	8f 5f       	subi	r24, 0xFF	; 255
     374:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <ticks.2393>
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	76 01       	movw	r14, r12
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	4f b7       	in	r20, 0x3f	; 63
     384:	f8 94       	cli
     386:	fc 01       	movw	r30, r24
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	e1 58       	subi	r30, 0x81	; 129
     38e:	fb 4f       	sbci	r31, 0xFB	; 251
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	c2 0e       	add	r12, r18
     396:	d3 1e       	adc	r13, r19
     398:	e1 1c       	adc	r14, r1
     39a:	f1 1c       	adc	r15, r1
     39c:	20 81       	ld	r18, Z
     39e:	31 81       	ldd	r19, Z+1	; 0x01
     3a0:	26 17       	cp	r18, r22
     3a2:	37 07       	cpc	r19, r23
     3a4:	38 f4       	brcc	.+14     	; 0x3b4 <ADC_Task+0x5c>
     3a6:	fc 01       	movw	r30, r24
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	e1 58       	subi	r30, 0x81	; 129
     3ae:	fb 4f       	sbci	r31, 0xFB	; 251
     3b0:	60 81       	ld	r22, Z
     3b2:	71 81       	ldd	r23, Z+1	; 0x01
     3b4:	fc 01       	movw	r30, r24
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	e1 58       	subi	r30, 0x81	; 129
     3bc:	fb 4f       	sbci	r31, 0xFB	; 251
     3be:	20 81       	ld	r18, Z
     3c0:	31 81       	ldd	r19, Z+1	; 0x01
     3c2:	a2 17       	cp	r26, r18
     3c4:	b3 07       	cpc	r27, r19
     3c6:	08 f0       	brcs	.+2      	; 0x3ca <ADC_Task+0x72>
     3c8:	4d c0       	rjmp	.+154    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3ca:	fc 01       	movw	r30, r24
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	e1 58       	subi	r30, 0x81	; 129
     3d2:	fb 4f       	sbci	r31, 0xFB	; 251
     3d4:	a0 81       	ld	r26, Z
     3d6:	b1 81       	ldd	r27, Z+1	; 0x01
     3d8:	45 c0       	rjmp	.+138    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3da:	8f b7       	in	r24, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	ca 1a       	sub	r12, r26
     3e0:	db 0a       	sbc	r13, r27
     3e2:	e1 08       	sbc	r14, r1
     3e4:	f1 08       	sbc	r15, r1
     3e6:	c6 1a       	sub	r12, r22
     3e8:	d7 0a       	sbc	r13, r23
     3ea:	e1 08       	sbc	r14, r1
     3ec:	f1 08       	sbc	r15, r1
     3ee:	f6 94       	lsr	r15
     3f0:	e7 94       	ror	r14
     3f2:	d7 94       	ror	r13
     3f4:	c7 94       	ror	r12
     3f6:	f6 94       	lsr	r15
     3f8:	e7 94       	ror	r14
     3fa:	d7 94       	ror	r13
     3fc:	c7 94       	ror	r12
     3fe:	8f bf       	out	0x3f, r24	; 63
     400:	cf b7       	in	r28, 0x3f	; 63
     402:	f8 94       	cli
     404:	d7 01       	movw	r26, r14
     406:	c6 01       	movw	r24, r12
     408:	0b 97       	sbiw	r24, 0x0b	; 11
     40a:	a1 09       	sbc	r26, r1
     40c:	b1 09       	sbc	r27, r1
     40e:	8d 3d       	cpi	r24, 0xDD	; 221
     410:	93 40       	sbci	r25, 0x03	; 3
     412:	a1 05       	cpc	r26, r1
     414:	b1 05       	cpc	r27, r1
     416:	a0 f4       	brcc	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     418:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <STAGE2>
     41c:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <STAGE2+0x1>
     420:	19 d2       	rcall	.+1074   	; 0x854 <LL_GetRefl>
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	c8 16       	cp	r12, r24
     428:	d9 06       	cpc	r13, r25
     42a:	ea 06       	cpc	r14, r26
     42c:	fb 06       	cpc	r15, r27
     42e:	40 f4       	brcc	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     430:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <STAGE2>
     434:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <STAGE2+0x1>
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	11 f0       	breq	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	b6 01       	movw	r22, r12
     43e:	15 d2       	rcall	.+1066   	; 0x86a <LL_UpdateRefl>
     440:	cf bf       	out	0x3f, r28	; 63
     442:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <g_ADCCount+0x1>
     446:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <g_ADCCount>
     44a:	10 92 af 04 	sts	0x04AF, r1	; 0x8004af <_timer+0x11>
     44e:	66 9b       	sbis	0x0c, 6	; 12
     450:	06 c0       	rjmp	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     452:	ea e7       	ldi	r30, 0x7A	; 122
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	80 83       	st	Z, r24
     45c:	0a c0       	rjmp	.+20     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     45e:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <ticks.2393>
     462:	07 c0       	rjmp	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     464:	4f bf       	out	0x3f, r20	; 63
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	86 30       	cpi	r24, 0x06	; 6
     46a:	91 05       	cpc	r25, r1
     46c:	09 f0       	breq	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	89 cf       	rjmp	.-238    	; 0x382 <ADC_Task+0x2a>
     470:	b4 cf       	rjmp	.-152    	; 0x3da <ADC_Task+0x82>
     472:	cf 91       	pop	r28
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	08 95       	ret

0000047e <MAG_Task>:
     47e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <g_MotorOn>
     482:	88 23       	and	r24, r24
     484:	29 f0       	breq	.+10     	; 0x490 <MAG_Task+0x12>
     486:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <tick.2415>
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <tick.2415>
     490:	64 99       	sbic	0x0c, 4	; 12
     492:	1a c0       	rjmp	.+52     	; 0x4c8 <MAG_Task+0x4a>
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     49a:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     49e:	f5 d1       	rcall	.+1002   	; 0x88a <LL_UpdateStatus>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     4a6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     4aa:	e5 d1       	rcall	.+970    	; 0x876 <LL_UpdateMag>
     4ac:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     4b0:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     4b4:	a4 d1       	rcall	.+840    	; 0x7fe <LL_Next>
     4b6:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <STAGE1+0x1>
     4ba:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <STAGE1>
     4be:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <tick.2415>
     4c2:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <_timer+0x1a>
     4c6:	08 95       	ret
     4c8:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <tick.2415>
     4cc:	83 33       	cpi	r24, 0x33	; 51
     4ce:	c8 f0       	brcs	.+50     	; 0x502 <MAG_Task+0x84>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     4d6:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     4da:	d7 d1       	rcall	.+942    	; 0x88a <LL_UpdateStatus>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     4e2:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     4e6:	c7 d1       	rcall	.+910    	; 0x876 <LL_UpdateMag>
     4e8:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
     4ec:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
     4f0:	86 d1       	rcall	.+780    	; 0x7fe <LL_Next>
     4f2:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <STAGE1+0x1>
     4f6:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <STAGE1>
     4fa:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <tick.2415>
     4fe:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <_timer+0x1a>
     502:	08 95       	ret

00000504 <EXIT_Task>:
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	1f 92       	push	r1
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     51a:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     51e:	ba d1       	rcall	.+884    	; 0x894 <LL_GetStatus>
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	18 f4       	brcc	.+6      	; 0x52a <EXIT_Task+0x26>
     524:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     528:	fa c0       	rjmp	.+500    	; 0x71e <EXIT_Task+0x21a>
     52a:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <g_Timer>
     52e:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <g_Timer+0x1>
     532:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <EXIT_DELAY>
     536:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <EXIT_DELAY+0x1>
     53a:	28 17       	cp	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	18 f4       	brcc	.+6      	; 0x546 <EXIT_Task+0x42>
     540:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     544:	ec c0       	rjmp	.+472    	; 0x71e <EXIT_Task+0x21a>
     546:	00 91 97 04 	lds	r16, 0x0497	; 0x800497 <g_Timer>
     54a:	10 91 98 04 	lds	r17, 0x0498	; 0x800498 <g_Timer+0x1>
     54e:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     552:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     556:	a9 d1       	rcall	.+850    	; 0x8aa <LL_GetTick>
     558:	08 1b       	sub	r16, r24
     55a:	19 0b       	sbc	r17, r25
     55c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     560:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     564:	08 17       	cp	r16, r24
     566:	19 07       	cpc	r17, r25
     568:	18 f4       	brcc	.+6      	; 0x570 <EXIT_Task+0x6c>
     56a:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     56e:	d7 c0       	rjmp	.+430    	; 0x71e <EXIT_Task+0x21a>
     570:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     574:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     578:	68 d1       	rcall	.+720    	; 0x84a <LL_GetClass>
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	91 f5       	brne	.+100    	; 0x5e2 <EXIT_Task+0xde>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <g_UnclassifiedRequest>
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     58a:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     58e:	7d d1       	rcall	.+762    	; 0x88a <LL_UpdateStatus>
     590:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     594:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     598:	88 d1       	rcall	.+784    	; 0x8aa <LL_GetTick>
     59a:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <lastItemTick+0x1>
     59e:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <lastItemTick>
     5a2:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     5a6:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     5aa:	29 d1       	rcall	.+594    	; 0x7fe <LL_Next>
     5ac:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <HEAD+0x1>
     5b0:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <HEAD>
     5b4:	fc 01       	movw	r30, r24
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	93 81       	ldd	r25, Z+3	; 0x03
     5ba:	47 d1       	rcall	.+654    	; 0x84a <LL_GetClass>
     5bc:	e8 2f       	mov	r30, r24
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	e7 5f       	subi	r30, 0xF7	; 247
     5c2:	fe 4f       	sbci	r31, 0xFE	; 254
     5c4:	10 81       	ld	r17, Z
     5c6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     5ca:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     5ce:	3d d1       	rcall	.+634    	; 0x84a <LL_GetClass>
     5d0:	e8 2f       	mov	r30, r24
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	e7 5f       	subi	r30, 0xF7	; 247
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	80 81       	ld	r24, Z
     5da:	61 2f       	mov	r22, r17
     5dc:	cc d2       	rcall	.+1432   	; 0xb76 <STEPPER_SetRotation>
     5de:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     5e2:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     5e6:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	93 81       	ldd	r25, Z+3	; 0x03
     5ee:	52 d1       	rcall	.+676    	; 0x894 <LL_GetStatus>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	41 f5       	brne	.+80     	; 0x644 <EXIT_Task+0x140>
     5f4:	00 91 97 04 	lds	r16, 0x0497	; 0x800497 <g_Timer>
     5f8:	10 91 98 04 	lds	r17, 0x0498	; 0x800498 <g_Timer+0x1>
     5fc:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <lastItemTick>
     600:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <lastItemTick+0x1>
     604:	08 1b       	sub	r16, r24
     606:	19 0b       	sbc	r17, r25
     608:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     60c:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     610:	82 81       	ldd	r24, Z+2	; 0x02
     612:	93 81       	ldd	r25, Z+3	; 0x03
     614:	4a d1       	rcall	.+660    	; 0x8aa <LL_GetTick>
     616:	7c 01       	movw	r14, r24
     618:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     61c:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     620:	44 d1       	rcall	.+648    	; 0x8aa <LL_GetTick>
     622:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <MISSING_DELAY>
     626:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <MISSING_DELAY+0x1>
     62a:	2e 0d       	add	r18, r14
     62c:	3f 1d       	adc	r19, r15
     62e:	28 1b       	sub	r18, r24
     630:	39 0b       	sbc	r19, r25
     632:	02 17       	cp	r16, r18
     634:	13 07       	cpc	r17, r19
     636:	30 f0       	brcs	.+12     	; 0x644 <EXIT_Task+0x140>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <g_MissingRequest>
     63e:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     642:	6d c0       	rjmp	.+218    	; 0x71e <EXIT_Task+0x21a>
     644:	e9 ee       	ldi	r30, 0xE9	; 233
     646:	f4 e0       	ldi	r31, 0x04	; 4
     648:	85 81       	ldd	r24, Z+5	; 0x05
     64a:	96 81       	ldd	r25, Z+6	; 0x06
     64c:	97 81       	ldd	r25, Z+7	; 0x07
     64e:	89 1b       	sub	r24, r25
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	99 81       	ldd	r25, Y+1	; 0x01
     654:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <STEPPER_RANGE>
     658:	98 17       	cp	r25, r24
     65a:	08 f0       	brcs	.+2      	; 0x65e <EXIT_Task+0x15a>
     65c:	58 c0       	rjmp	.+176    	; 0x70e <EXIT_Task+0x20a>
     65e:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <stepper+0xe>
     662:	81 11       	cpse	r24, r1
     664:	54 c0       	rjmp	.+168    	; 0x70e <EXIT_Task+0x20a>
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	e0 f4       	brcc	.+56     	; 0x6a4 <EXIT_Task+0x1a0>
     66c:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <stepper+0xa>
     670:	81 11       	cpse	r24, r1
     672:	18 c0       	rjmp	.+48     	; 0x6a4 <EXIT_Task+0x1a0>
     674:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     678:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     67c:	82 81       	ldd	r24, Z+2	; 0x02
     67e:	93 81       	ldd	r25, Z+3	; 0x03
     680:	14 d1       	rcall	.+552    	; 0x8aa <LL_GetTick>
     682:	8c 01       	movw	r16, r24
     684:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     688:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     68c:	0e d1       	rcall	.+540    	; 0x8aa <LL_GetTick>
     68e:	08 1b       	sub	r16, r24
     690:	19 0b       	sbc	r17, r25
     692:	0d 32       	cpi	r16, 0x2D	; 45
     694:	11 40       	sbci	r17, 0x01	; 1
     696:	30 f0       	brcs	.+12     	; 0x6a4 <EXIT_Task+0x1a0>
     698:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STEPPER_SET>
     69c:	e9 ee       	ldi	r30, 0xE9	; 233
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	82 87       	std	Z+10, r24	; 0x0a
     6a2:	15 86       	std	Z+13, r1	; 0x0d
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     6aa:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     6ae:	ed d0       	rcall	.+474    	; 0x88a <LL_UpdateStatus>
     6b0:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <g_Timer>
     6b4:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <g_Timer+0x1>
     6b8:	90 93 75 04 	sts	0x0475, r25	; 0x800475 <lastItemTick+0x1>
     6bc:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <lastItemTick>
     6c0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     6c4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     6c8:	9a d0       	rcall	.+308    	; 0x7fe <LL_Next>
     6ca:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <HEAD+0x1>
     6ce:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <HEAD>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	bf d1       	rcall	.+894    	; 0xa56 <PWM>
     6d8:	e0 91 78 04 	lds	r30, 0x0478	; 0x800478 <HEAD>
     6dc:	f0 91 79 04 	lds	r31, 0x0479	; 0x800479 <HEAD+0x1>
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	93 81       	ldd	r25, Z+3	; 0x03
     6e4:	b2 d0       	rcall	.+356    	; 0x84a <LL_GetClass>
     6e6:	e8 2f       	mov	r30, r24
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	e7 5f       	subi	r30, 0xF7	; 247
     6ec:	fe 4f       	sbci	r31, 0xFE	; 254
     6ee:	10 81       	ld	r17, Z
     6f0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     6f4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     6f8:	a8 d0       	rcall	.+336    	; 0x84a <LL_GetClass>
     6fa:	e8 2f       	mov	r30, r24
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	e7 5f       	subi	r30, 0xF7	; 247
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	80 81       	ld	r24, Z
     704:	61 2f       	mov	r22, r17
     706:	37 d2       	rcall	.+1134   	; 0xb76 <STEPPER_SetRotation>
     708:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <_timer+0x23>
     70c:	03 c0       	rjmp	.+6      	; 0x714 <EXIT_Task+0x210>
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	a1 d1       	rcall	.+834    	; 0xa56 <PWM>
     714:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     718:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     71c:	96 d0       	rcall	.+300    	; 0x84a <LL_GetClass>
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <BTN_Task>:
     72e:	89 b1       	in	r24, 0x09	; 9
     730:	83 70       	andi	r24, 0x03	; 3
     732:	c1 f0       	breq	.+48     	; 0x764 <BTN_Task+0x36>
     734:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <__data_end>
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <__data_end>
     73e:	8b 30       	cpi	r24, 0x0B	; 11
     740:	98 f0       	brcs	.+38     	; 0x768 <BTN_Task+0x3a>
     742:	89 b1       	in	r24, 0x09	; 9
     744:	83 70       	andi	r24, 0x03	; 3
     746:	81 f0       	breq	.+32     	; 0x768 <BTN_Task+0x3a>
     748:	89 b1       	in	r24, 0x09	; 9
     74a:	83 70       	andi	r24, 0x03	; 3
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	19 f4       	brne	.+6      	; 0x756 <BTN_Task+0x28>
     750:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <g_PauseRequest>
     754:	08 95       	ret
     756:	89 b1       	in	r24, 0x09	; 9
     758:	83 70       	andi	r24, 0x03	; 3
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	29 f4       	brne	.+10     	; 0x768 <BTN_Task+0x3a>
     75e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_timer+0x2c>
     762:	08 95       	ret
     764:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <__data_end>
     768:	08 95       	ret

0000076a <WATCHDOG_Task>:
     76a:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <g_WDTimeout>
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	18 f0       	brcs	.+6      	; 0x778 <WATCHDOG_Task+0xe>
     772:	86 e1       	ldi	r24, 0x16	; 22
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	9d d3       	rcall	.+1850   	; 0xeb2 <SYS_Pause>
     778:	80 91 99 04 	lds	r24, 0x0499	; 0x800499 <g_WDTimeout>
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <g_WDTimeout>
     782:	08 95       	ret

00000784 <D_Blinky>:
     784:	9b b1       	in	r25, 0x0b	; 11
     786:	80 ea       	ldi	r24, 0xA0	; 160
     788:	89 27       	eor	r24, r25
     78a:	8b b9       	out	0x0b, r24	; 11
     78c:	08 95       	ret

0000078e <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     78e:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <g_MotorOn>
     792:	88 23       	and	r24, r24
     794:	49 f0       	breq	.+18     	; 0x7a8 <ADD_Task+0x1a>
     796:	80 91 97 04 	lds	r24, 0x0497	; 0x800497 <g_Timer>
     79a:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <g_Timer+0x1>
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <g_Timer+0x1>
     7a4:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <g_Timer>
     7a8:	08 95       	ret

000007aa <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	1f 93       	push	r17
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	7c 01       	movw	r14, r24
     7b6:	16 2f       	mov	r17, r22
     7b8:	d4 2f       	mov	r29, r20
     7ba:	c2 2f       	mov	r28, r18
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	66 d7       	rcall	.+3788   	; 0x168e <malloc>
     7c2:	fc 01       	movw	r30, r24
     7c4:	f1 82       	std	Z+1, r15	; 0x01
     7c6:	e0 82       	st	Z, r14
     7c8:	12 83       	std	Z+2, r17	; 0x02
     7ca:	d3 83       	std	Z+3, r29	; 0x03
     7cc:	c4 83       	std	Z+4, r28	; 0x04
     7ce:	16 82       	std	Z+6, r1	; 0x06
     7d0:	15 82       	std	Z+5, r1	; 0x05
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	ff 90       	pop	r15
     7da:	ef 90       	pop	r14
     7dc:	08 95       	ret

000007de <LL_ItemListInit>:
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ec 01       	movw	r28, r24
     7e4:	86 e0       	ldi	r24, 0x06	; 6
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	52 d7       	rcall	.+3748   	; 0x168e <malloc>
     7ea:	fc 01       	movw	r30, r24
     7ec:	d1 83       	std	Z+1, r29	; 0x01
     7ee:	c0 83       	st	Z, r28
     7f0:	15 82       	std	Z+5, r1	; 0x05
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <LL_Next>:
     7fe:	fc 01       	movw	r30, r24
     800:	82 81       	ldd	r24, Z+2	; 0x02
     802:	93 81       	ldd	r25, Z+3	; 0x03
     804:	08 95       	ret

00000806 <LL_AddBack>:
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	ec 01       	movw	r28, r24
     80c:	cb 01       	movw	r24, r22
     80e:	01 c0       	rjmp	.+2      	; 0x812 <LL_AddBack+0xc>
     810:	e9 01       	movw	r28, r18
     812:	2a 81       	ldd	r18, Y+2	; 0x02
     814:	3b 81       	ldd	r19, Y+3	; 0x03
     816:	21 15       	cp	r18, r1
     818:	31 05       	cpc	r19, r1
     81a:	d1 f7       	brne	.-12     	; 0x810 <LL_AddBack+0xa>
     81c:	e0 df       	rcall	.-64     	; 0x7de <LL_ItemListInit>
     81e:	9b 83       	std	Y+3, r25	; 0x03
     820:	8a 83       	std	Y+2, r24	; 0x02
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <LL_Size>:
     828:	dc 01       	movw	r26, r24
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	ed 91       	ld	r30, X+
     82e:	fc 91       	ld	r31, X
     830:	13 97       	sbiw	r26, 0x03	; 3
     832:	30 97       	sbiw	r30, 0x00	; 0
     834:	41 f0       	breq	.+16     	; 0x846 <LL_Size+0x1e>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	02 80       	ldd	r0, Z+2	; 0x02
     83c:	f3 81       	ldd	r31, Z+3	; 0x03
     83e:	e0 2d       	mov	r30, r0
     840:	30 97       	sbiw	r30, 0x00	; 0
     842:	d1 f7       	brne	.-12     	; 0x838 <LL_Size+0x10>
     844:	08 95       	ret
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	08 95       	ret

0000084a <LL_GetClass>:
     84a:	dc 01       	movw	r26, r24
     84c:	ed 91       	ld	r30, X+
     84e:	fc 91       	ld	r31, X
     850:	83 81       	ldd	r24, Z+3	; 0x03
     852:	08 95       	ret

00000854 <LL_GetRefl>:
     854:	dc 01       	movw	r26, r24
     856:	ed 91       	ld	r30, X+
     858:	fc 91       	ld	r31, X
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	08 95       	ret

00000860 <LL_GetMag>:
     860:	dc 01       	movw	r26, r24
     862:	ed 91       	ld	r30, X+
     864:	fc 91       	ld	r31, X
     866:	82 81       	ldd	r24, Z+2	; 0x02
     868:	08 95       	ret

0000086a <LL_UpdateRefl>:
     86a:	dc 01       	movw	r26, r24
     86c:	ed 91       	ld	r30, X+
     86e:	fc 91       	ld	r31, X
     870:	71 83       	std	Z+1, r23	; 0x01
     872:	60 83       	st	Z, r22
     874:	08 95       	ret

00000876 <LL_UpdateMag>:
     876:	dc 01       	movw	r26, r24
     878:	ed 91       	ld	r30, X+
     87a:	fc 91       	ld	r31, X
     87c:	62 83       	std	Z+2, r22	; 0x02
     87e:	08 95       	ret

00000880 <LL_UpdateClass>:
     880:	dc 01       	movw	r26, r24
     882:	ed 91       	ld	r30, X+
     884:	fc 91       	ld	r31, X
     886:	63 83       	std	Z+3, r22	; 0x03
     888:	08 95       	ret

0000088a <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     88a:	dc 01       	movw	r26, r24
     88c:	ed 91       	ld	r30, X+
     88e:	fc 91       	ld	r31, X
     890:	64 83       	std	Z+4, r22	; 0x04
     892:	08 95       	ret

00000894 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     894:	dc 01       	movw	r26, r24
     896:	ed 91       	ld	r30, X+
     898:	fc 91       	ld	r31, X
}
     89a:	84 81       	ldd	r24, Z+4	; 0x04
     89c:	08 95       	ret

0000089e <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     89e:	dc 01       	movw	r26, r24
     8a0:	ed 91       	ld	r30, X+
     8a2:	fc 91       	ld	r31, X
     8a4:	76 83       	std	Z+6, r23	; 0x06
     8a6:	65 83       	std	Z+5, r22	; 0x05
     8a8:	08 95       	ret

000008aa <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     8aa:	dc 01       	movw	r26, r24
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	85 81       	ldd	r24, Z+5	; 0x05
     8b2:	96 81       	ldd	r25, Z+6	; 0x06
     8b4:	08 95       	ret

000008b6 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     8ba:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     8bc:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     8be:	80 ef       	ldi	r24, 0xF0	; 240
     8c0:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     8c2:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     8c4:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	08 95       	ret

000008cc <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     8cc:	72 d2       	rcall	.+1252   	; 0xdb2 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     8ce:	89 b1       	in	r24, 0x09	; 9
     8d0:	83 70       	andi	r24, 0x03	; 3
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     8d4:	84 e2       	ldi	r24, 0x24	; 36
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	cc d6       	rcall	.+3480   	; 0x1672 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8da:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	45 ec       	ldi	r20, 0xC5	; 197
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	49 d6       	rcall	.+3218   	; 0x1580 <TIMER_Create>
		_timer[0].state = READY;
     8ee:	ce e9       	ldi	r28, 0x9E	; 158
     8f0:	d4 e0       	ldi	r29, 0x04	; 4
     8f2:	12 e0       	ldi	r17, 0x02	; 2
     8f4:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	4c ea       	ldi	r20, 0xAC	; 172
     8fc:	51 e0       	ldi	r21, 0x01	; 1
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	3c d6       	rcall	.+3192   	; 0x1580 <TIMER_Create>
		_timer[1].state = BLOCKED;
     908:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	4f e3       	ldi	r20, 0x3F	; 63
     910:	52 e0       	ldi	r21, 0x02	; 2
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	32 d6       	rcall	.+3172   	; 0x1580 <TIMER_Create>
		_timer[2].state = BLOCKED;
     91c:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	42 e8       	ldi	r20, 0x82	; 130
     924:	52 e0       	ldi	r21, 0x02	; 2
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	28 d6       	rcall	.+3152   	; 0x1580 <TIMER_Create>
		_timer[3].state = BLOCKED;
     930:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	47 ec       	ldi	r20, 0xC7	; 199
     938:	53 e0       	ldi	r21, 0x03	; 3
     93a:	61 e0       	ldi	r22, 0x01	; 1
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	1e d6       	rcall	.+3132   	; 0x1580 <TIMER_Create>
		_timer[4].state = BLOCKED;
     944:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	47 e9       	ldi	r20, 0x97	; 151
     94c:	53 e0       	ldi	r21, 0x03	; 3
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	14 d6       	rcall	.+3112   	; 0x1580 <TIMER_Create>
		_timer[5].state = READY;
     958:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	42 ec       	ldi	r20, 0xC2	; 194
     960:	53 e0       	ldi	r21, 0x03	; 3
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 ed       	ldi	r24, 0xD0	; 208
     968:	97 e0       	ldi	r25, 0x07	; 7
     96a:	0a d6       	rcall	.+3092   	; 0x1580 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     96c:	1e af       	std	Y+62, r17	; 0x3e
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	45 eb       	ldi	r20, 0xB5	; 181
     974:	53 e0       	ldi	r21, 0x03	; 3
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     97c:	93 e1       	ldi	r25, 0x13	; 19
     97e:	00 d6       	rcall	.+3072   	; 0x1580 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     980:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <_timer+0x47>
     984:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	74 d6       	rcall	.+3304   	; 0x1672 <UART_SendString>
     98a:	80 e8       	ldi	r24, 0x80	; 128
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     98c:	90 e0       	ldi	r25, 0x00	; 0
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Test("Pause Requested!\r\n");
     98e:	63 d0       	rcall	.+198    	; 0xa56 <PWM>
     990:	78 94       	sei
     992:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <g_PauseRequest>
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <main+0xd4>
     99a:	89 e4       	ldi	r24, 0x49	; 73
		if(g_UnclassifiedRequest) SYS_Unclassified();
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	15 d4       	rcall	.+2090   	; 0x11ca <SYS_Test>
     9a0:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <g_UnclassifiedRequest>
		if(g_MissingRequest) SYS_Missing();
     9a4:	81 11       	cpse	r24, r1
     9a6:	fb d4       	rcall	.+2550   	; 0x139e <SYS_Unclassified>
     9a8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <g_MissingRequest>
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     9ac:	81 11       	cpse	r24, r1
     9ae:	44 d5       	rcall	.+2696   	; 0x1438 <SYS_Missing>
     9b0:	c0 91 78 04 	lds	r28, 0x0478	; 0x800478 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     9b4:	d0 91 79 04 	lds	r29, 0x0479	; 0x800479 <HEAD+0x1>
     9b8:	20 97       	sbiw	r28, 0x00	; 0
     9ba:	59 f3       	breq	.-42     	; 0x992 <main+0xc6>
     9bc:	20 97       	sbiw	r28, 0x00	; 0
     9be:	91 f1       	breq	.+100    	; 0xa24 <main+0x158>
     9c0:	ce 01       	movw	r24, r28
     9c2:	43 df       	rcall	.-378    	; 0x84a <LL_GetClass>
     9c4:	84 30       	cpi	r24, 0x04	; 4
     9c6:	71 f5       	brne	.+92     	; 0xa24 <main+0x158>
     9c8:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     9ca:	64 df       	rcall	.-312    	; 0x894 <LL_GetStatus>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	51 f5       	brne	.+84     	; 0xa24 <main+0x158>
     9d0:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     9d2:	40 df       	rcall	.-384    	; 0x854 <LL_GetRefl>
     9d4:	8c 01       	movw	r16, r24
				
				if(magVal) // 
     9d6:	ce 01       	movw	r24, r28
     9d8:	43 df       	rcall	.-378    	; 0x860 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     9da:	88 23       	and	r24, r24
     9dc:	91 f0       	breq	.+36     	; 0xa02 <main+0x136>
     9de:	c8 01       	movw	r24, r16
     9e0:	0a 97       	sbiw	r24, 0x0a	; 10
     9e2:	83 32       	cpi	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     9e4:	91 40       	sbci	r25, 0x01	; 1
     9e6:	20 f4       	brcc	.+8      	; 0x9f0 <main+0x124>
     9e8:	62 e0       	ldi	r22, 0x02	; 2
     9ea:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     9ec:	49 df       	rcall	.-366    	; 0x880 <LL_UpdateClass>
     9ee:	1a c0       	rjmp	.+52     	; 0xa24 <main+0x158>
     9f0:	0c 52       	subi	r16, 0x2C	; 44
     9f2:	11 40       	sbci	r17, 0x01	; 1
     9f4:	05 3f       	cpi	r16, 0xF5	; 245
					{
						LL_UpdateClass(temp, STEEL);
     9f6:	11 40       	sbci	r17, 0x01	; 1
     9f8:	a8 f4       	brcc	.+42     	; 0xa24 <main+0x158>
     9fa:	63 e0       	ldi	r22, 0x03	; 3
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     9fc:	ce 01       	movw	r24, r28
     9fe:	40 df       	rcall	.-384    	; 0x880 <LL_UpdateClass>
     a00:	11 c0       	rjmp	.+34     	; 0xa24 <main+0x158>
     a02:	c8 01       	movw	r24, r16
     a04:	89 58       	subi	r24, 0x89	; 137
				{
					LL_UpdateClass(temp, WHITE);
     a06:	93 40       	sbci	r25, 0x03	; 3
     a08:	0b 97       	sbiw	r24, 0x0b	; 11
     a0a:	20 f4       	brcc	.+8      	; 0xa14 <main+0x148>
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     a10:	37 df       	rcall	.-402    	; 0x880 <LL_UpdateClass>
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <main+0x158>
     a14:	00 52       	subi	r16, 0x20	; 32
     a16:	13 40       	sbci	r17, 0x03	; 3
     a18:	0b 3a       	cpi	r16, 0xAB	; 171
				{
					LL_UpdateClass(temp, BLACK);
     a1a:	11 05       	cpc	r17, r1
     a1c:	18 f4       	brcc	.+6      	; 0xa24 <main+0x158>
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	ce 01       	movw	r24, r28
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     a22:	2e df       	rcall	.-420    	; 0x880 <LL_UpdateClass>
     a24:	ce 01       	movw	r24, r28
     a26:	eb de       	rcall	.-554    	; 0x7fe <LL_Next>
     a28:	ec 01       	movw	r28, r24
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     a2a:	89 2b       	or	r24, r25
     a2c:	09 f0       	breq	.+2      	; 0xa30 <main+0x164>
     a2e:	c6 cf       	rjmp	.-116    	; 0x9bc <main+0xf0>
     a30:	b0 cf       	rjmp	.-160    	; 0x992 <main+0xc6>

00000a32 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     a3c:	8a ea       	ldi	r24, 0xAA	; 170
     a3e:	88 b9       	out	0x08, r24	; 8
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <__vector_default+0xc>

00000a42 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     a42:	84 b5       	in	r24, 0x24	; 36
     a44:	83 68       	ori	r24, 0x83	; 131
     a46:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     a48:	85 b5       	in	r24, 0x25	; 37
     a4a:	83 60       	ori	r24, 0x03	; 3
     a4c:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     a4e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     a52:	87 bd       	out	0x27, r24	; 39
     a54:	08 95       	ret

00000a56 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     a56:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a58:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a5a:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     a5c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     a60:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     a62:	23 2b       	or	r18, r19
     a64:	31 f0       	breq	.+12     	; 0xa72 <PWM+0x1c>
		{
			g_MotorOn = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <g_MotorOn>
			PORTB = ~0x0E;
     a6c:	81 ef       	ldi	r24, 0xF1	; 241
     a6e:	85 b9       	out	0x05, r24	; 5
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     a72:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <g_MotorOn>
			PORTB = ~0x0F;
     a76:	80 ef       	ldi	r24, 0xF0	; 240
     a78:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a7a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     a7c:	08 95       	ret

00000a7e <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     a7e:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     a80:	e9 ee       	ldi	r30, 0xE9	; 233
     a82:	f4 e0       	ldi	r31, 0x04	; 4
     a84:	10 82       	st	Z, r1
	stepper.direction = 1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     a8e:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     a90:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     a92:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     a94:	11 86       	std	Z+9, r1	; 0x09
     a96:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     a98:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     a9a:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     a9c:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     a9e:	88 ec       	ldi	r24, 0xC8	; 200
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	96 83       	std	Z+6, r25	; 0x06
     aa4:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     aa6:	80 e3       	ldi	r24, 0x30	; 48
     aa8:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     aaa:	84 e9       	ldi	r24, 0x94	; 148
     aac:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     ab0:	e0 eb       	ldi	r30, 0xB0	; 176
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	82 60       	ori	r24, 0x02	; 2
     ab8:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     aba:	e0 e7       	ldi	r30, 0x70	; 112
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     ac4:	e1 eb       	ldi	r30, 0xB1	; 177
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	87 60       	ori	r24, 0x07	; 7
     acc:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     ace:	78 94       	sei
     ad0:	08 95       	ret

00000ad2 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	86 1b       	sub	r24, r22
     ad6:	91 09       	sbc	r25, r1
	if (steps >= 0)
     ad8:	52 f0       	brmi	.+20     	; 0xaee <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     ada:	85 36       	cpi	r24, 0x65	; 101
     adc:	91 05       	cpc	r25, r1
     ade:	8c f0       	brlt	.+34     	; 0xb02 <STEPPER_NumSteps+0x30>
     ae0:	24 e6       	ldi	r18, 0x64	; 100
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	a9 01       	movw	r20, r18
     ae6:	48 1b       	sub	r20, r24
     ae8:	59 0b       	sbc	r21, r25
     aea:	ca 01       	movw	r24, r20
     aec:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     aee:	8c 39       	cpi	r24, 0x9C	; 156
     af0:	5f ef       	ldi	r21, 0xFF	; 255
     af2:	95 07       	cpc	r25, r21
     af4:	34 f4       	brge	.+12     	; 0xb02 <STEPPER_NumSteps+0x30>
     af6:	2c e9       	ldi	r18, 0x9C	; 156
     af8:	3f ef       	ldi	r19, 0xFF	; 255
     afa:	a9 01       	movw	r20, r18
     afc:	48 1b       	sub	r20, r24
     afe:	59 0b       	sbc	r21, r25
     b00:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     b02:	08 95       	ret

00000b04 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     b08:	c9 ee       	ldi	r28, 0xE9	; 233
     b0a:	d4 e0       	ldi	r29, 0x04	; 4
     b0c:	6c 81       	ldd	r22, Y+4	; 0x04
     b0e:	8a 81       	ldd	r24, Y+2	; 0x02
     b10:	9b 81       	ldd	r25, Y+3	; 0x03
     b12:	df df       	rcall	.-66     	; 0xad2 <STEPPER_NumSteps>
     b14:	9e 83       	std	Y+6, r25	; 0x06
     b16:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     b18:	6a 81       	ldd	r22, Y+2	; 0x02
     b1a:	7b 81       	ldd	r23, Y+3	; 0x03
     b1c:	88 85       	ldd	r24, Y+8	; 0x08
     b1e:	99 85       	ldd	r25, Y+9	; 0x09
     b20:	d8 df       	rcall	.-80     	; 0xad2 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     b22:	2d 81       	ldd	r18, Y+5	; 0x05
     b24:	3e 81       	ldd	r19, Y+6	; 0x06
     b26:	33 23       	and	r19, r19
     b28:	14 f4       	brge	.+4      	; 0xb2e <STEPPER_Rotate+0x2a>
     b2a:	28 e0       	ldi	r18, 0x08	; 8
     b2c:	01 c0       	rjmp	.+2      	; 0xb30 <STEPPER_Rotate+0x2c>
     b2e:	24 e0       	ldi	r18, 0x04	; 4
     b30:	e9 ee       	ldi	r30, 0xE9	; 233
     b32:	f4 e0       	ldi	r31, 0x04	; 4
     b34:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     b36:	45 81       	ldd	r20, Z+5	; 0x05
     b38:	56 81       	ldd	r21, Z+6	; 0x06
     b3a:	84 9f       	mul	r24, r20
     b3c:	90 01       	movw	r18, r0
     b3e:	85 9f       	mul	r24, r21
     b40:	30 0d       	add	r19, r0
     b42:	94 9f       	mul	r25, r20
     b44:	30 0d       	add	r19, r0
     b46:	11 24       	eor	r1, r1
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	12 16       	cp	r1, r18
     b4c:	13 06       	cpc	r1, r19
     b4e:	0c f0       	brlt	.+2      	; 0xb52 <STEPPER_Rotate+0x4e>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	e9 ee       	ldi	r30, 0xE9	; 233
     b54:	f4 e0       	ldi	r31, 0x04	; 4
     b56:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     b58:	85 81       	ldd	r24, Z+5	; 0x05
     b5a:	96 81       	ldd	r25, Z+6	; 0x06
     b5c:	99 23       	and	r25, r25
     b5e:	1c f4       	brge	.+6      	; 0xb66 <STEPPER_Rotate+0x62>
     b60:	91 95       	neg	r25
     b62:	81 95       	neg	r24
     b64:	91 09       	sbc	r25, r1
     b66:	e9 ee       	ldi	r30, 0xE9	; 233
     b68:	f4 e0       	ldi	r31, 0x04	; 4
     b6a:	96 83       	std	Z+6, r25	; 0x06
     b6c:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     b6e:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     b76:	e9 ee       	ldi	r30, 0xE9	; 233
     b78:	f4 e0       	ldi	r31, 0x04	; 4
     b7a:	24 81       	ldd	r18, Z+4	; 0x04
     b7c:	42 81       	ldd	r20, Z+2	; 0x02
     b7e:	53 81       	ldd	r21, Z+3	; 0x03
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	24 17       	cp	r18, r20
     b84:	35 07       	cpc	r19, r21
     b86:	29 f0       	breq	.+10     	; 0xb92 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     b8c:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     b8e:	60 8b       	std	Z+16, r22	; 0x10
     b90:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	e9 ee       	ldi	r30, 0xE9	; 233
     b98:	f4 e0       	ldi	r31, 0x04	; 4
     b9a:	33 83       	std	Z+3, r19	; 0x03
     b9c:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	71 87       	std	Z+9, r23	; 0x09
     ba2:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     ba4:	94 81       	ldd	r25, Z+4	; 0x04
     ba6:	89 13       	cpse	r24, r25
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <STEPPER_SetRotation+0x3c>
     baa:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <STEPPER_SAME>
     bae:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <stepper+0xa>
		STEPPER_Rotate();
     bb2:	a8 cf       	rjmp	.-176    	; 0xb04 <STEPPER_Rotate>
     bb4:	08 95       	ret

00000bb6 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	0b b6       	in	r0, 0x3b	; 59
     bc2:	0f 92       	push	r0
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <__vector_13+0x2c>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <__vector_13+0x2e>
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     be8:	86 e3       	ldi	r24, 0x36	; 54
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	9e e2       	ldi	r25, 0x2E	; 46
     bf2:	ad e2       	ldi	r26, 0x2D	; 45
     bf4:	b5 e3       	ldi	r27, 0x35	; 53
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	ab 83       	std	Y+3, r26	; 0x03
     bfc:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     bfe:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <stepper+0xa>
     c02:	88 23       	and	r24, r24
     c04:	29 f0       	breq	.+10     	; 0xc10 <__vector_13+0x5a>
     c06:	e9 ee       	ldi	r30, 0xE9	; 233
     c08:	f4 e0       	ldi	r31, 0x04	; 4
     c0a:	82 85       	ldd	r24, Z+10	; 0x0a
     c0c:	81 50       	subi	r24, 0x01	; 1
     c0e:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     c10:	e9 ee       	ldi	r30, 0xE9	; 233
     c12:	f4 e0       	ldi	r31, 0x04	; 4
     c14:	87 81       	ldd	r24, Z+7	; 0x07
     c16:	25 81       	ldd	r18, Z+5	; 0x05
     c18:	36 81       	ldd	r19, Z+6	; 0x06
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	e1 f4       	brne	.+56     	; 0xc5a <__vector_13+0xa4>
	{

		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     c22:	82 81       	ldd	r24, Z+2	; 0x02
     c24:	93 81       	ldd	r25, Z+3	; 0x03
     c26:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     c28:	86 85       	ldd	r24, Z+14	; 0x0e
     c2a:	88 23       	and	r24, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <__vector_13+0x80>
		{
			stepper.early = 0;
     c2e:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     c30:	60 89       	ldd	r22, Z+16	; 0x10
     c32:	87 85       	ldd	r24, Z+15	; 0x0f
     c34:	a0 df       	rcall	.-192    	; 0xb76 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     c36:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <stepper+0xb>
     c3a:	88 23       	and	r24, r24
     c3c:	19 f0       	breq	.+6      	; 0xc44 <__vector_13+0x8e>
     c3e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <stepper+0xd>
     c42:	01 c0       	rjmp	.+2      	; 0xc46 <__vector_13+0x90>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	e9 ee       	ldi	r30, 0xE9	; 233
     c48:	f4 e0       	ldi	r31, 0x04	; 4
     c4a:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     c4c:	e5 85       	ldd	r30, Z+13	; 0x0d
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	e0 5f       	subi	r30, 0xF0	; 240
     c52:	fe 4f       	sbci	r31, 0xFE	; 254
     c54:	80 81       	ld	r24, Z
     c56:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     c5a:	e9 ee       	ldi	r30, 0xE9	; 233
     c5c:	f4 e0       	ldi	r31, 0x04	; 4
     c5e:	87 81       	ldd	r24, Z+7	; 0x07
     c60:	25 81       	ldd	r18, Z+5	; 0x05
     c62:	36 81       	ldd	r19, Z+6	; 0x06
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	82 17       	cp	r24, r18
     c68:	93 07       	cpc	r25, r19
     c6a:	0c f0       	brlt	.+2      	; 0xc6e <__vector_13+0xb8>
     c6c:	60 c0       	rjmp	.+192    	; 0xd2e <__vector_13+0x178>
     c6e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <stepper+0xa>
     c72:	81 11       	cpse	r24, r1
     c74:	5c c0       	rjmp	.+184    	; 0xd2e <__vector_13+0x178>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     c76:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <stepper+0x1>
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	51 f4       	brne	.+20     	; 0xc92 <__vector_13+0xdc>
     c7e:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <stepper>
     c82:	e1 e0       	ldi	r30, 0x01	; 1
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	ec 0f       	add	r30, r28
     c88:	fd 1f       	adc	r31, r29
     c8a:	e8 0f       	add	r30, r24
     c8c:	f1 1d       	adc	r31, r1
     c8e:	80 81       	ld	r24, Z
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__vector_13+0xf6>
     c92:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <stepper>
     c96:	e3 e0       	ldi	r30, 0x03	; 3
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	e8 1b       	sub	r30, r24
     c9c:	f1 09       	sbc	r31, r1
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	8c 0f       	add	r24, r28
     ca4:	9d 1f       	adc	r25, r29
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	80 81       	ld	r24, Z
     cac:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     cae:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <stepper>
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__vector_13+0x108>
     cb6:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <stepper>
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <__vector_13+0x10a>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	e9 ee       	ldi	r30, 0xE9	; 233
     cc2:	f4 e0       	ldi	r31, 0x04	; 4
     cc4:	80 83       	st	Z, r24

		stepper._currentStep++;
     cc6:	87 81       	ldd	r24, Z+7	; 0x07
     cc8:	8f 5f       	subi	r24, 0xFF	; 255
     cca:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     ccc:	83 85       	ldd	r24, Z+11	; 0x0b
     cce:	81 11       	cpse	r24, r1
     cd0:	15 c0       	rjmp	.+42     	; 0xcfc <__vector_13+0x146>
     cd2:	85 81       	ldd	r24, Z+5	; 0x05
     cd4:	96 81       	ldd	r25, Z+6	; 0x06
     cd6:	27 81       	ldd	r18, Z+7	; 0x07
     cd8:	82 1b       	sub	r24, r18
     cda:	91 09       	sbc	r25, r1
     cdc:	06 97       	sbiw	r24, 0x06	; 6
     cde:	74 f4       	brge	.+28     	; 0xcfc <__vector_13+0x146>
     ce0:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <stepper+0xd>
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	e0 5f       	subi	r30, 0xF0	; 240
     ce8:	fe 4f       	sbci	r31, 0xFE	; 254
     cea:	80 81       	ld	r24, Z
     cec:	84 39       	cpi	r24, 0x94	; 148
     cee:	30 f4       	brcc	.+12     	; 0xcfc <__vector_13+0x146>
		{
			stepper._accellStep--;
     cf0:	e9 ee       	ldi	r30, 0xE9	; 233
     cf2:	f4 e0       	ldi	r31, 0x04	; 4
     cf4:	85 85       	ldd	r24, Z+13	; 0x0d
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	85 87       	std	Z+13, r24	; 0x0d
     cfa:	11 c0       	rjmp	.+34     	; 0xd1e <__vector_13+0x168>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     cfc:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <stepper+0x7>
     d00:	86 30       	cpi	r24, 0x06	; 6
     d02:	68 f0       	brcs	.+26     	; 0xd1e <__vector_13+0x168>
     d04:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <stepper+0xd>
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	e0 5f       	subi	r30, 0xF0	; 240
     d0c:	fe 4f       	sbci	r31, 0xFE	; 254
     d0e:	80 81       	ld	r24, Z
     d10:	81 34       	cpi	r24, 0x41	; 65
     d12:	28 f0       	brcs	.+10     	; 0xd1e <__vector_13+0x168>
		{
			stepper._accellStep++;
     d14:	e9 ee       	ldi	r30, 0xE9	; 233
     d16:	f4 e0       	ldi	r31, 0x04	; 4
     d18:	85 85       	ldd	r24, Z+13	; 0x0d
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     d1e:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <stepper+0xd>
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	e0 5f       	subi	r30, 0xF0	; 240
     d26:	fe 4f       	sbci	r31, 0xFE	; 254
     d28:	80 81       	ld	r24, Z
     d2a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     d2e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <stepper+0xc>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	29 f1       	breq	.+74     	; 0xd80 <__vector_13+0x1ca>
	{
		if ((PINE & 0x08) == 0)
     d36:	63 99       	sbic	0x0c, 3	; 12
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <__vector_13+0x18c>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     d3a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <STEPPER_OFFSET>
     d3e:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     d42:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <stepper+0xc>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	28 f0       	brcs	.+10     	; 0xd54 <__vector_13+0x19e>
     d4a:	e9 ee       	ldi	r30, 0xE9	; 233
     d4c:	f4 e0       	ldi	r31, 0x04	; 4
     d4e:	84 85       	ldd	r24, Z+12	; 0x0c
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     d54:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <stepper+0xc>
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 f4       	brne	.+36     	; 0xd80 <__vector_13+0x1ca>
		{
			stepper._isInitiated = 1;
     d5c:	e9 ee       	ldi	r30, 0xE9	; 233
     d5e:	f4 e0       	ldi	r31, 0x04	; 4
     d60:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     d62:	10 82       	st	Z, r1
			stepper.direction = 1;
     d64:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     d66:	13 82       	std	Z+3, r1	; 0x03
     d68:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     d6a:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     d6c:	16 82       	std	Z+6, r1	; 0x06
     d6e:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     d70:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     d72:	11 86       	std	Z+9, r1	; 0x09
     d74:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     d76:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     d78:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     d7a:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     d7c:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     d7e:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0b be       	out	0x3b, r0	; 59
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	f8 94       	cli
     dba:	e1 e6       	ldi	r30, 0x61	; 97
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 e8       	ldi	r24, 0x80	; 128
     dc0:	80 83       	st	Z, r24
     dc2:	10 82       	st	Z, r1
     dc4:	3e d4       	rcall	.+2172   	; 0x1642 <UART_Init>
     dc6:	77 dd       	rcall	.-1298   	; 0x8b6 <GPIO_Init>
     dc8:	c1 d3       	rcall	.+1922   	; 0x154c <TIMER_Init>
     dca:	3b de       	rcall	.-906    	; 0xa42 <PWM_Init>
     dcc:	84 d9       	rcall	.-3320   	; 0xd6 <ADC_Init>
     dce:	57 de       	rcall	.-850    	; 0xa7e <STEPPER_Init>
     dd0:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <g_ADCCount+0x1>
     dd4:	10 92 93 04 	sts	0x0493, r1	; 0x800493 <g_ADCCount>
     dd8:	84 e1       	ldi	r24, 0x14	; 20
     dda:	ef e7       	ldi	r30, 0x7F	; 127
     ddc:	f4 e0       	ldi	r31, 0x04	; 4
     dde:	df 01       	movw	r26, r30
     de0:	1d 92       	st	X+, r1
     de2:	8a 95       	dec	r24
     de4:	e9 f7       	brne	.-6      	; 0xde0 <SYS_Init+0x2e>
     de6:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <g_PauseRequest>
     dea:	10 92 99 04 	sts	0x0499, r1	; 0x800499 <g_WDTimeout>
     dee:	10 92 98 04 	sts	0x0498, r1	; 0x800498 <g_Timer+0x1>
     df2:	10 92 97 04 	sts	0x0497, r1	; 0x800497 <g_Timer>
     df6:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <g_MissingRequest>
     dfa:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <g_UnclassifiedRequest>
     dfe:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <HEAD+0x1>
     e02:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <HEAD>
     e06:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <TAIL+0x1>
     e0a:	10 92 7d 04 	sts	0x047D, r1	; 0x80047d <TAIL>
     e0e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <STAGE1+0x1>
     e12:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <STAGE1>
     e16:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <STAGE2+0x1>
     e1a:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <STAGE2>
     e1e:	10 92 7b 04 	sts	0x047B, r1	; 0x80047b <FRONT+0x1>
     e22:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <FRONT>
     e26:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <BUFFER+0x1>
     e2a:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <BUFFER>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	44 e0       	ldi	r20, 0x04	; 4
     e32:	6f ef       	ldi	r22, 0xFF	; 255
     e34:	89 ee       	ldi	r24, 0xE9	; 233
     e36:	9d ef       	ldi	r25, 0xFD	; 253
     e38:	b8 dc       	rcall	.-1680   	; 0x7aa <LL_ItemInit>
     e3a:	d1 dc       	rcall	.-1630   	; 0x7de <LL_ItemListInit>
     e3c:	90 93 79 04 	sts	0x0479, r25	; 0x800479 <HEAD+0x1>
     e40:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <HEAD>
     e44:	90 93 7b 04 	sts	0x047B, r25	; 0x80047b <FRONT+0x1>
     e48:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <FRONT>
     e4c:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <BUFFER+0x1>
     e50:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <BUFFER>
     e54:	ca ef       	ldi	r28, 0xFA	; 250
     e56:	08 ee       	ldi	r16, 0xE8	; 232
     e58:	1d ef       	ldi	r17, 0xFD	; 253
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	44 e0       	ldi	r20, 0x04	; 4
     e5e:	6c 2f       	mov	r22, r28
     e60:	c8 01       	movw	r24, r16
     e62:	a3 dc       	rcall	.-1722   	; 0x7aa <LL_ItemInit>
     e64:	bc 01       	movw	r22, r24
     e66:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     e6a:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     e6e:	cb dc       	rcall	.-1642   	; 0x806 <LL_AddBack>
     e70:	90 93 7e 04 	sts	0x047E, r25	; 0x80047e <TAIL+0x1>
     e74:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <TAIL>
     e78:	01 50       	subi	r16, 0x01	; 1
     e7a:	11 09       	sbc	r17, r1
     e7c:	c1 50       	subi	r28, 0x01	; 1
     e7e:	cb 3c       	cpi	r28, 0xCB	; 203
     e80:	61 f7       	brne	.-40     	; 0xe5a <SYS_Init+0xa8>
     e82:	05 e0       	ldi	r16, 0x05	; 5
     e84:	10 e0       	ldi	r17, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	45 e0       	ldi	r20, 0x05	; 5
     e8a:	6a ef       	ldi	r22, 0xFA	; 250
     e8c:	88 ee       	ldi	r24, 0xE8	; 232
     e8e:	9d ef       	ldi	r25, 0xFD	; 253
     e90:	8c dc       	rcall	.-1768   	; 0x7aa <LL_ItemInit>
     e92:	bc 01       	movw	r22, r24
     e94:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     e98:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     e9c:	b4 dc       	rcall	.-1688   	; 0x806 <LL_AddBack>
     e9e:	01 50       	subi	r16, 0x01	; 1
     ea0:	11 09       	sbc	r17, r1
     ea2:	89 f7       	brne	.-30     	; 0xe86 <SYS_Init+0xd4>
     ea4:	86 e6       	ldi	r24, 0x66	; 102
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	e4 d3       	rcall	.+1992   	; 0x1672 <UART_SendString>
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <SYS_Pause>:
     eb2:	3f 92       	push	r3
     eb4:	4f 92       	push	r4
     eb6:	5f 92       	push	r5
     eb8:	6f 92       	push	r6
     eba:	7f 92       	push	r7
     ebc:	8f 92       	push	r8
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	ca 5f       	subi	r28, 0xFA	; 250
     eda:	d1 09       	sbc	r29, r1
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	f8 2e       	mov	r15, r24
     ee8:	e9 2e       	mov	r14, r25
     eea:	f8 94       	cli
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	b2 dd       	rcall	.-1180   	; 0xa56 <PWM>
     ef2:	00 91 7a 04 	lds	r16, 0x047A	; 0x80047a <FRONT>
     ef6:	10 91 7b 04 	lds	r17, 0x047B	; 0x80047b <FRONT+0x1>
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	8c e7       	ldi	r24, 0x7C	; 124
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	ce 01       	movw	r24, r28
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	7c 01       	movw	r14, r24
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	df d4       	rcall	.+2494   	; 0x18d0 <sprintf>
     f12:	c7 01       	movw	r24, r14
     f14:	ae d3       	rcall	.+1884   	; 0x1672 <UART_SendString>
     f16:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
     f1a:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
     f1e:	c5 dc       	rcall	.-1654   	; 0x8aa <LL_GetTick>
     f20:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <g_Timer>
     f24:	30 91 98 04 	lds	r19, 0x0498	; 0x800498 <g_Timer+0x1>
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	3f 93       	push	r19
     f2e:	2f 93       	push	r18
     f30:	87 e9       	ldi	r24, 0x97	; 151
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	9f 93       	push	r25
     f36:	8f 93       	push	r24
     f38:	ff 92       	push	r15
     f3a:	ef 92       	push	r14
     f3c:	c9 d4       	rcall	.+2450   	; 0x18d0 <sprintf>
     f3e:	c7 01       	movw	r24, r14
     f40:	98 d3       	rcall	.+1840   	; 0x1672 <UART_SendString>
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	e1 2c       	mov	r14, r1
     f4e:	f1 2c       	mov	r15, r1
     f50:	0f 2e       	mov	r0, r31
     f52:	f6 eb       	ldi	r31, 0xB6	; 182
     f54:	af 2e       	mov	r10, r31
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	bf 2e       	mov	r11, r31
     f5a:	f0 2d       	mov	r31, r0
     f5c:	6e 01       	movw	r12, r28
     f5e:	f7 e9       	ldi	r31, 0x97	; 151
     f60:	cf 0e       	add	r12, r31
     f62:	d1 1c       	adc	r13, r1
     f64:	2d c0       	rjmp	.+90     	; 0xfc0 <SYS_Pause+0x10e>
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	e8 1a       	sub	r14, r24
     f6a:	f8 0a       	sbc	r15, r24
     f6c:	c8 01       	movw	r24, r16
     f6e:	9d dc       	rcall	.-1734   	; 0x8aa <LL_GetTick>
     f70:	68 2e       	mov	r6, r24
     f72:	59 2e       	mov	r5, r25
     f74:	c8 01       	movw	r24, r16
     f76:	8e dc       	rcall	.-1764   	; 0x894 <LL_GetStatus>
     f78:	78 2e       	mov	r7, r24
     f7a:	c8 01       	movw	r24, r16
     f7c:	66 dc       	rcall	.-1844   	; 0x84a <LL_GetClass>
     f7e:	88 2e       	mov	r8, r24
     f80:	c8 01       	movw	r24, r16
     f82:	6e dc       	rcall	.-1828   	; 0x860 <LL_GetMag>
     f84:	98 2e       	mov	r9, r24
     f86:	c8 01       	movw	r24, r16
     f88:	65 dc       	rcall	.-1846   	; 0x854 <LL_GetRefl>
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	1f 92       	push	r1
     f90:	7f 92       	push	r7
     f92:	1f 92       	push	r1
     f94:	8f 92       	push	r8
     f96:	1f 92       	push	r1
     f98:	9f 92       	push	r9
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	ff 92       	push	r15
     fa0:	ef 92       	push	r14
     fa2:	bf 92       	push	r11
     fa4:	af 92       	push	r10
     fa6:	df 92       	push	r13
     fa8:	cf 92       	push	r12
     faa:	92 d4       	rcall	.+2340   	; 0x18d0 <sprintf>
     fac:	c6 01       	movw	r24, r12
     fae:	61 d3       	rcall	.+1730   	; 0x1672 <UART_SendString>
     fb0:	c8 01       	movw	r24, r16
     fb2:	25 dc       	rcall	.-1974   	; 0x7fe <LL_Next>
     fb4:	8c 01       	movw	r16, r24
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	c8 01       	movw	r24, r16
     fc2:	43 dc       	rcall	.-1914   	; 0x84a <LL_GetClass>
     fc4:	85 30       	cpi	r24, 0x05	; 5
     fc6:	79 f6       	brne	.-98     	; 0xf66 <SYS_Pause+0xb4>
     fc8:	0f 2e       	mov	r0, r31
     fca:	fe e9       	ldi	r31, 0x9E	; 158
     fcc:	cf 2e       	mov	r12, r31
     fce:	f4 e0       	ldi	r31, 0x04	; 4
     fd0:	df 2e       	mov	r13, r31
     fd2:	f0 2d       	mov	r31, r0
     fd4:	00 e0       	ldi	r16, 0x00	; 0
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	0f 2e       	mov	r0, r31
     fda:	f4 ef       	ldi	r31, 0xF4	; 244
     fdc:	af 2e       	mov	r10, r31
     fde:	f1 e0       	ldi	r31, 0x01	; 1
     fe0:	bf 2e       	mov	r11, r31
     fe2:	f0 2d       	mov	r31, r0
     fe4:	7e 01       	movw	r14, r28
     fe6:	f7 e9       	ldi	r31, 0x97	; 151
     fe8:	ef 0e       	add	r14, r31
     fea:	f1 1c       	adc	r15, r1
     fec:	f6 01       	movw	r30, r12
     fee:	80 85       	ldd	r24, Z+8	; 0x08
     ff0:	1f 92       	push	r1
     ff2:	8f 93       	push	r24
     ff4:	1f 93       	push	r17
     ff6:	0f 93       	push	r16
     ff8:	bf 92       	push	r11
     ffa:	af 92       	push	r10
     ffc:	ff 92       	push	r15
     ffe:	ef 92       	push	r14
    1000:	67 d4       	rcall	.+2254   	; 0x18d0 <sprintf>
    1002:	c7 01       	movw	r24, r14
    1004:	36 d3       	rcall	.+1644   	; 0x1672 <UART_SendString>
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	f9 e0       	ldi	r31, 0x09	; 9
    100c:	cf 0e       	add	r12, r31
    100e:	d1 1c       	adc	r13, r1
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	07 30       	cpi	r16, 0x07	; 7
    101c:	11 05       	cpc	r17, r1
    101e:	31 f7       	brne	.-52     	; 0xfec <SYS_Pause+0x13a>
    1020:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <STAGE2>
    1024:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <STAGE2+0x1>
    1028:	15 dc       	rcall	.-2006   	; 0x854 <LL_GetRefl>
    102a:	48 2e       	mov	r4, r24
    102c:	39 2e       	mov	r3, r25
    102e:	60 90 e6 04 	lds	r6, 0x04E6	; 0x8004e6 <STAGE2>
    1032:	50 90 e7 04 	lds	r5, 0x04E7	; 0x8004e7 <STAGE2+0x1>
    1036:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <STAGE1>
    103a:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <STAGE1+0x1>
    103e:	10 dc       	rcall	.-2016   	; 0x860 <LL_GetMag>
    1040:	78 2e       	mov	r7, r24
    1042:	90 90 9c 04 	lds	r9, 0x049C	; 0x80049c <STAGE1>
    1046:	80 90 9d 04 	lds	r8, 0x049D	; 0x80049d <STAGE1+0x1>
    104a:	00 91 7d 04 	lds	r16, 0x047D	; 0x80047d <TAIL>
    104e:	10 91 7e 04 	lds	r17, 0x047E	; 0x80047e <TAIL+0x1>
    1052:	f8 01       	movw	r30, r16
    1054:	b2 80       	ldd	r11, Z+2	; 0x02
    1056:	a3 80       	ldd	r10, Z+3	; 0x03
    1058:	d0 90 7a 04 	lds	r13, 0x047A	; 0x80047a <FRONT>
    105c:	c0 90 7b 04 	lds	r12, 0x047B	; 0x80047b <FRONT+0x1>
    1060:	f0 90 78 04 	lds	r15, 0x0478	; 0x800478 <HEAD>
    1064:	e0 90 79 04 	lds	r14, 0x0479	; 0x800479 <HEAD+0x1>
    1068:	8f 2d       	mov	r24, r15
    106a:	9e 2d       	mov	r25, r14
    106c:	dd db       	rcall	.-2118   	; 0x828 <LL_Size>
    106e:	3f 92       	push	r3
    1070:	4f 92       	push	r4
    1072:	5f 92       	push	r5
    1074:	6f 92       	push	r6
    1076:	1f 92       	push	r1
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	1f 93       	push	r17
    1088:	0f 93       	push	r16
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	1f 92       	push	r1
    1090:	8f 93       	push	r24
    1092:	8b e0       	ldi	r24, 0x0B	; 11
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	9f 93       	push	r25
    1098:	8f 93       	push	r24
    109a:	8e 01       	movw	r16, r28
    109c:	0b 59       	subi	r16, 0x9B	; 155
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	1f 93       	push	r17
    10a2:	0f 93       	push	r16
    10a4:	15 d4       	rcall	.+2090   	; 0x18d0 <sprintf>
    10a6:	c8 01       	movw	r24, r16
    10a8:	e4 d2       	rcall	.+1480   	; 0x1672 <UART_SendString>
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	89 b1       	in	r24, 0x09	; 9
    10b6:	83 70       	andi	r24, 0x03	; 3
    10b8:	e9 f7       	brne	.-6      	; 0x10b4 <SYS_Pause+0x202>
    10ba:	84 e2       	ldi	r24, 0x24	; 36
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	d9 d2       	rcall	.+1458   	; 0x1672 <UART_SendString>
    10c0:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <g_PauseRequest>
    10c4:	80 e8       	ldi	r24, 0x80	; 128
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	c6 dc       	rcall	.-1652   	; 0xa56 <PWM>
    10ca:	78 94       	sei
    10cc:	c6 50       	subi	r28, 0x06	; 6
    10ce:	df 4f       	sbci	r29, 0xFF	; 255
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	7f 90       	pop	r7
    10f4:	6f 90       	pop	r6
    10f6:	5f 90       	pop	r5
    10f8:	4f 90       	pop	r4
    10fa:	3f 90       	pop	r3
    10fc:	08 95       	ret

000010fe <SYS_Rampdown>:

void SYS_Rampdown()
{
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	ca 56       	subi	r28, 0x6A	; 106
    110e:	d1 09       	sbc	r29, r1
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    111a:	fe 01       	movw	r30, r28
    111c:	31 96       	adiw	r30, 0x01	; 1
    111e:	86 e0       	ldi	r24, 0x06	; 6
    1120:	df 01       	movw	r26, r30
    1122:	1d 92       	st	X+, r1
    1124:	8a 95       	dec	r24
    1126:	e9 f7       	brne	.-6      	; 0x1122 <SYS_Rampdown+0x24>
	uint8_t total = 0;
	
	char str[100];
	
	list* temp = FRONT;
    1128:	00 91 7a 04 	lds	r16, 0x047A	; 0x80047a <FRONT>
    112c:	10 91 7b 04 	lds	r17, 0x047B	; 0x80047b <FRONT+0x1>
	
	cli();
    1130:	f8 94       	cli
	PORTD = 0;
    1132:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    1134:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	8d dc       	rcall	.-1766   	; 0xa56 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    113c:	81 e9       	ldi	r24, 0x91	; 145
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	98 d2       	rcall	.+1328   	; 0x1672 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    1142:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <SYS_Rampdown+0x66>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    1146:	f3 94       	inc	r15
    1148:	c8 01       	movw	r24, r16
    114a:	7f db       	rcall	.-2306   	; 0x84a <LL_GetClass>
    114c:	e1 e0       	ldi	r30, 0x01	; 1
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	ec 0f       	add	r30, r28
    1152:	fd 1f       	adc	r31, r29
    1154:	e8 0f       	add	r30, r24
    1156:	f1 1d       	adc	r31, r1
    1158:	80 81       	ld	r24, Z
    115a:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    115c:	80 83       	st	Z, r24
    115e:	c8 01       	movw	r24, r16
    1160:	4e db       	rcall	.-2404   	; 0x7fe <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1162:	8c 01       	movw	r16, r24
    1164:	c8 01       	movw	r24, r16
    1166:	96 db       	rcall	.-2260   	; 0x894 <LL_GetStatus>
    1168:	83 30       	cpi	r24, 0x03	; 3
    116a:	69 f3       	breq	.-38     	; 0x1146 <SYS_Rampdown+0x48>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	1f 92       	push	r1
    1170:	8f 93       	push	r24
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	1f 92       	push	r1
    1176:	8f 93       	push	r24
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	1f 92       	push	r1
    117c:	8f 93       	push	r24
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	1f 92       	push	r1
    1182:	8f 93       	push	r24
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	1f 92       	push	r1
    1188:	8f 93       	push	r24
    118a:	1f 92       	push	r1
    118c:	ff 92       	push	r15
    118e:	86 eb       	ldi	r24, 0xB6	; 182
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	8e 01       	movw	r16, r28
    1198:	09 5f       	subi	r16, 0xF9	; 249
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	1f 93       	push	r17
    119e:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    11a0:	97 d3       	rcall	.+1838   	; 0x18d0 <sprintf>
    11a2:	c8 01       	movw	r24, r16
    11a4:	66 d2       	rcall	.+1228   	; 0x1672 <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	c6 59       	subi	r28, 0x96	; 150
    11b2:	df 4f       	sbci	r29, 0xFF	; 255
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	08 95       	ret

000011ca <SYS_Test>:
void SYS_Test(char str[20])
{
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	ce 5c       	subi	r28, 0xCE	; 206
    11e6:	d1 09       	sbc	r29, r1
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	7c 01       	movw	r14, r24
	//
	cli();
    11f4:	f8 94       	cli
	PWM(0);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	2d dc       	rcall	.-1958   	; 0xa56 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
    11fc:	00 91 7a 04 	lds	r16, 0x047A	; 0x80047a <FRONT>
    1200:	10 91 7b 04 	lds	r17, 0x047B	; 0x80047b <FRONT+0x1>
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1204:	fe 01       	movw	r30, r28
    1206:	eb 59       	subi	r30, 0x9B	; 155
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	86 e0       	ldi	r24, 0x06	; 6
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <SYS_Test+0x44>
	uint8_t total = 0;

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
    1214:	c7 01       	movw	r24, r14
    1216:	2d d2       	rcall	.+1114   	; 0x1672 <UART_SendString>
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    1218:	f1 2c       	mov	r15, r1

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    121a:	0f c0       	rjmp	.+30     	; 0x123a <SYS_Test+0x70>
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
    121c:	f3 94       	inc	r15
    121e:	c8 01       	movw	r24, r16
    1220:	14 db       	rcall	.-2520   	; 0x84a <LL_GetClass>
    1222:	e5 e6       	ldi	r30, 0x65	; 101
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	ec 0f       	add	r30, r28
    1228:	fd 1f       	adc	r31, r29
    122a:	e8 0f       	add	r30, r24
    122c:	f1 1d       	adc	r31, r1
    122e:	80 81       	ld	r24, Z
    1230:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    1232:	80 83       	st	Z, r24
    1234:	c8 01       	movw	r24, r16
    1236:	e3 da       	rcall	.-2618   	; 0x7fe <LL_Next>

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    1238:	8c 01       	movw	r16, r24
    123a:	c8 01       	movw	r24, r16
    123c:	2b db       	rcall	.-2474   	; 0x894 <LL_GetStatus>
    123e:	83 30       	cpi	r24, 0x03	; 3
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
		temp = LL_Next(temp);
	}
	UART_SendString("\r\nSorted items...\r\n\r\n");
    1240:	69 f3       	breq	.-38     	; 0x121c <SYS_Test+0x52>
    1242:	85 e1       	ldi	r24, 0x15	; 21
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	15 d2       	rcall	.+1066   	; 0x1672 <UART_SendString>
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    1248:	aa 96       	adiw	r28, 0x2a	; 42
    124a:	8f ad       	ldd	r24, Y+63	; 0x3f
    124c:	aa 97       	sbiw	r28, 0x2a	; 42
    124e:	1f 92       	push	r1
    1250:	8f 93       	push	r24
    1252:	a8 96       	adiw	r28, 0x28	; 40
    1254:	8f ad       	ldd	r24, Y+63	; 0x3f
    1256:	a8 97       	sbiw	r28, 0x28	; 40
    1258:	1f 92       	push	r1
    125a:	8f 93       	push	r24
    125c:	a9 96       	adiw	r28, 0x29	; 41
    125e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1260:	a9 97       	sbiw	r28, 0x29	; 41
    1262:	1f 92       	push	r1
    1264:	8f 93       	push	r24
    1266:	a6 96       	adiw	r28, 0x26	; 38
    1268:	8f ad       	ldd	r24, Y+63	; 0x3f
    126a:	a6 97       	sbiw	r28, 0x26	; 38
    126c:	1f 92       	push	r1
    126e:	8f 93       	push	r24
    1270:	a7 96       	adiw	r28, 0x27	; 39
    1272:	8f ad       	ldd	r24, Y+63	; 0x3f
    1274:	a7 97       	sbiw	r28, 0x27	; 39
    1276:	1f 92       	push	r1
    1278:	8f 93       	push	r24
    127a:	1f 92       	push	r1
    127c:	ff 92       	push	r15
    127e:	86 eb       	ldi	r24, 0xB6	; 182
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	7c 01       	movw	r14, r24
    128c:	9f 93       	push	r25
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
    128e:	8f 93       	push	r24
    1290:	1f d3       	rcall	.+1598   	; 0x18d0 <sprintf>
    1292:	c7 01       	movw	r24, r14
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
    1294:	ee d1       	rcall	.+988    	; 0x1672 <UART_SendString>
    1296:	8b e2       	ldi	r24, 0x2B	; 43
    1298:	93 e0       	ldi	r25, 0x03	; 3
    129a:	eb d1       	rcall	.+982    	; 0x1672 <UART_SendString>
	while (LL_GetStatus(temp) == SORTABLE)
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
    12a6:	e1 2c       	mov	r14, r1
    12a8:	f1 2c       	mov	r15, r1
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    12aa:	0f 2e       	mov	r0, r31
    12ac:	ff e4       	ldi	r31, 0x4F	; 79
    12ae:	af 2e       	mov	r10, r31
    12b0:	f3 e0       	ldi	r31, 0x03	; 3
    12b2:	bf 2e       	mov	r11, r31
    12b4:	f0 2d       	mov	r31, r0
    12b6:	6e 01       	movw	r12, r28
    12b8:	bb e6       	ldi	r27, 0x6B	; 107
    12ba:	cb 0e       	add	r12, r27
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    12bc:	d1 1c       	adc	r13, r1
	{
		char listbuff[100];
		c++;
    12be:	1d c0       	rjmp	.+58     	; 0x12fa <SYS_Test+0x130>
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    12c4:	f8 0a       	sbc	r15, r24
    12c6:	c8 01       	movw	r24, r16
    12c8:	cb da       	rcall	.-2666   	; 0x860 <LL_GetMag>
    12ca:	98 2e       	mov	r9, r24
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    12cc:	c8 01       	movw	r24, r16
    12ce:	c2 da       	rcall	.-2684   	; 0x854 <LL_GetRefl>
    12d0:	1f 92       	push	r1
    12d2:	9f 92       	push	r9
    12d4:	9f 93       	push	r25
    12d6:	8f 93       	push	r24
    12d8:	ff 92       	push	r15
    12da:	ef 92       	push	r14
    12dc:	bf 92       	push	r11
    12de:	af 92       	push	r10
    12e0:	df 92       	push	r13
    12e2:	cf 92       	push	r12
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    12e4:	f5 d2       	rcall	.+1514   	; 0x18d0 <sprintf>
    12e6:	c6 01       	movw	r24, r12
    12e8:	c4 d1       	rcall	.+904    	; 0x1672 <UART_SendString>
		temp = LL_Next(temp);
    12ea:	c8 01       	movw	r24, r16
    12ec:	88 da       	rcall	.-2800   	; 0x7fe <LL_Next>
    12ee:	8c 01       	movw	r16, r24
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    12fa:	c8 01       	movw	r24, r16
    12fc:	cb da       	rcall	.-2666   	; 0x894 <LL_GetStatus>
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	f9 f2       	breq	.-66     	; 0x12c0 <SYS_Test+0xf6>
    1302:	88 e7       	ldi	r24, 0x78	; 120
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	b5 d1       	rcall	.+874    	; 0x1672 <UART_SendString>
    1308:	0f 2e       	mov	r0, r31
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    130a:	ff e4       	ldi	r31, 0x4F	; 79
    130c:	af 2e       	mov	r10, r31
    130e:	f3 e0       	ldi	r31, 0x03	; 3
    1310:	bf 2e       	mov	r11, r31
    1312:	f0 2d       	mov	r31, r0
    1314:	6e 01       	movw	r12, r28
    1316:	bb e6       	ldi	r27, 0x6B	; 107
    1318:	cb 0e       	add	r12, r27
    131a:	d1 1c       	adc	r13, r1
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    131c:	1d c0       	rjmp	.+58     	; 0x1358 <SYS_Test+0x18e>
	{
		char listbuff[100];
		c++;
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    1322:	f8 0a       	sbc	r15, r24
    1324:	c8 01       	movw	r24, r16
    1326:	9c da       	rcall	.-2760   	; 0x860 <LL_GetMag>
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    1328:	98 2e       	mov	r9, r24
    132a:	c8 01       	movw	r24, r16
    132c:	93 da       	rcall	.-2778   	; 0x854 <LL_GetRefl>
    132e:	1f 92       	push	r1
    1330:	9f 92       	push	r9
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	ff 92       	push	r15
    1338:	ef 92       	push	r14
    133a:	bf 92       	push	r11
    133c:	af 92       	push	r10
    133e:	df 92       	push	r13
    1340:	cf 92       	push	r12
    1342:	c6 d2       	rcall	.+1420   	; 0x18d0 <sprintf>
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    1344:	c6 01       	movw	r24, r12
    1346:	95 d1       	rcall	.+810    	; 0x1672 <UART_SendString>
		temp = LL_Next(temp);
    1348:	c8 01       	movw	r24, r16
    134a:	59 da       	rcall	.-2894   	; 0x7fe <LL_Next>
    134c:	8c 01       	movw	r16, r24
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    1358:	c8 01       	movw	r24, r16
    135a:	9c da       	rcall	.-2760   	; 0x894 <LL_GetStatus>
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	f9 f2       	breq	.-66     	; 0x131e <SYS_Test+0x154>
    1360:	89 b1       	in	r24, 0x09	; 9
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    1362:	83 70       	andi	r24, 0x03	; 3
    1364:	e9 f7       	brne	.-6      	; 0x1360 <SYS_Test+0x196>
    1366:	84 e2       	ldi	r24, 0x24	; 36
		{
			UART_SendString("Starting System!\r\n");
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	83 d1       	rcall	.+774    	; 0x1672 <UART_SendString>
    136c:	80 e8       	ldi	r24, 0x80	; 128
    136e:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    1370:	72 db       	rcall	.-2332   	; 0xa56 <PWM>
    1372:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <g_PauseRequest>
    1376:	78 94       	sei
			g_PauseRequest = 0;
    1378:	c2 53       	subi	r28, 0x32	; 50
    137a:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    137c:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
} // SYS_Test
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	ff 90       	pop	r15
    1390:	ef 90       	pop	r14
    1392:	df 90       	pop	r13
    1394:	cf 90       	pop	r12
    1396:	bf 90       	pop	r11
    1398:	af 90       	pop	r10
    139a:	9f 90       	pop	r9
    139c:	08 95       	ret

0000139e <SYS_Unclassified>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
void SYS_Unclassified()
{
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	e2 97       	sbiw	r28, 0x32	; 50
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
	cli();
    13b6:	f8 94       	cli
	PWM(0);
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	4c db       	rcall	.-2408   	; 0xa56 <PWM>
	UART_SendString("\r\n\r\n\r\nUNCLASSIFIED ITEM DETECTED\r\n\r\n\r\n");
    13be:	8c e9       	ldi	r24, 0x9C	; 156
    13c0:	93 e0       	ldi	r25, 0x03	; 3
    13c2:	57 d1       	rcall	.+686    	; 0x1672 <UART_SendString>
	char buffer[50];
	sprintf(buffer, "Item statistics:\r\nReflectance: %u, Magnetic: %u\r\n", LL_GetRefl(HEAD), LL_GetMag(HEAD));
    13c4:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
    13c8:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
    13cc:	49 da       	rcall	.-2926   	; 0x860 <LL_GetMag>
    13ce:	18 2f       	mov	r17, r24
    13d0:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <HEAD>
    13d4:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <HEAD+0x1>
    13d8:	3d da       	rcall	.-2950   	; 0x854 <LL_GetRefl>
    13da:	1f 92       	push	r1
    13dc:	1f 93       	push	r17
    13de:	9f 93       	push	r25
    13e0:	8f 93       	push	r24
    13e2:	83 ec       	ldi	r24, 0xC3	; 195
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	9f 93       	push	r25
    13e8:	8f 93       	push	r24
    13ea:	8e 01       	movw	r16, r28
    13ec:	0f 5f       	subi	r16, 0xFF	; 255
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	1f 93       	push	r17
    13f2:	0f 93       	push	r16
	UART_SendString(buffer);
    13f4:	6d d2       	rcall	.+1242   	; 0x18d0 <sprintf>
    13f6:	c8 01       	movw	r24, r16
    13f8:	3c d1       	rcall	.+632    	; 0x1672 <UART_SendString>
	UART_SendString("\r\n\r\n\r\nPlease remove item and push both buttons to resume\r\n\r\n\r\n");
    13fa:	85 ef       	ldi	r24, 0xF5	; 245
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	39 d1       	rcall	.+626    	; 0x1672 <UART_SendString>
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    140a:	89 b1       	in	r24, 0x09	; 9
    140c:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    140e:	e9 f7       	brne	.-6      	; 0x140a <SYS_Unclassified+0x6c>
    1410:	84 e2       	ldi	r24, 0x24	; 36
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	2e d1       	rcall	.+604    	; 0x1672 <UART_SendString>
			PWM(0x80);
    1416:	80 e8       	ldi	r24, 0x80	; 128
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	1d db       	rcall	.-2502   	; 0xa56 <PWM>
    141c:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <g_UnclassifiedRequest>
			g_UnclassifiedRequest = 0;
    1420:	78 94       	sei
			sei();
    1422:	e2 96       	adiw	r28, 0x32	; 50
			break;
		}
	}
	return;
}
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <SYS_Missing>:
    1438:	f8 94       	cli
void SYS_Missing()
{
	cli();
	PWM(0);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0b db       	rcall	.-2538   	; 0xa56 <PWM>
	char buffer[50];
	extern list* HEAD;
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1440:	84 e3       	ldi	r24, 0x34	; 52
    1442:	94 e0       	ldi	r25, 0x04	; 4
    1444:	16 d1       	rcall	.+556    	; 0x1672 <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    1446:	84 e3       	ldi	r24, 0x34	; 52
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	13 d1       	rcall	.+550    	; 0x1672 <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    144c:	84 e3       	ldi	r24, 0x34	; 52
    144e:	94 e0       	ldi	r25, 0x04	; 4
    1450:	10 d1       	rcall	.+544    	; 0x1672 <UART_SendString>
// 	sprintf(buffer, "System Tick: %u, Head Tick: %u Next Tick: %u\r\n\r\n\r\n",g_Timer, LL_GetTick(HEAD), LL_GetTick(HEAD->next));
// 	UART_SendString(buffer);	
	UART_SendString("Press both buttons to resume...\r\n");
    1452:	8d e4       	ldi	r24, 0x4D	; 77
    1454:	94 e0       	ldi	r25, 0x04	; 4
    1456:	0d d1       	rcall	.+538    	; 0x1672 <UART_SendString>
    1458:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    145a:	83 70       	andi	r24, 0x03	; 3
    145c:	e9 f7       	brne	.-6      	; 0x1458 <SYS_Missing+0x20>
		{
			UART_SendString("Starting System!\r\n");
    145e:	84 e2       	ldi	r24, 0x24	; 36
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	07 d1       	rcall	.+526    	; 0x1672 <UART_SendString>
			PWM(0x80);
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	f6 da       	rcall	.-2580   	; 0xa56 <PWM>
    146a:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <g_MissingRequest>
			g_MissingRequest = 0;
    146e:	78 94       	sei
			sei();
    1470:	08 95       	ret

00001472 <__vector_17>:
    1472:	1f 92       	push	r1
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1474:	0f 92       	push	r0
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	0f 92       	push	r0
    147a:	11 24       	eor	r1, r1
    147c:	0b b6       	in	r0, 0x3b	; 59
    147e:	0f 92       	push	r0
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	ef 93       	push	r30
    14a2:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    14a4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_timer_tick>
    14a8:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_timer_tick+0x1>
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	90 93 77 04 	sts	0x0477, r25	; 0x800477 <_timer_tick+0x1>
    14b2:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <_timer_tick>
    14b6:	ce e9       	ldi	r28, 0x9E	; 158
    14b8:	d4 e0       	ldi	r29, 0x04	; 4
    14ba:	0f 2e       	mov	r0, r31
    14bc:	f6 ee       	ldi	r31, 0xE6	; 230
    14be:	ef 2e       	mov	r14, r31
    14c0:	f4 e0       	ldi	r31, 0x04	; 4
    14c2:	ff 2e       	mov	r15, r31
    14c4:	f0 2d       	mov	r31, r0
    14c6:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    14c8:	ec 81       	ldd	r30, Y+4	; 0x04
    14ca:	fd 81       	ldd	r31, Y+5	; 0x05
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	09 f1       	breq	.+66     	; 0x1512 <__vector_17+0xa0>
    14d0:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_timer_tick>
    14d4:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <_timer_tick+0x1>
    14d8:	28 81       	ld	r18, Y
    14da:	39 81       	ldd	r19, Y+1	; 0x01
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	c1 f4       	brne	.+48     	; 0x1512 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    14e2:	88 85       	ldd	r24, Y+8	; 0x08
    14e4:	82 30       	cpi	r24, 0x02	; 2
    14e6:	19 f4       	brne	.+6      	; 0x14ee <__vector_17+0x7c>
    14e8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ea:	9f 81       	ldd	r25, Y+7	; 0x07
    14ec:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    14ee:	d8 01       	movw	r26, r16
    14f0:	12 96       	adiw	r26, 0x02	; 2
    14f2:	8d 91       	ld	r24, X+
    14f4:	9c 91       	ld	r25, X
    14f6:	13 97       	sbiw	r26, 0x03	; 3
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	41 f0       	breq	.+16     	; 0x150c <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    14fc:	2d 91       	ld	r18, X+
    14fe:	3c 91       	ld	r19, X
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	82 0f       	add	r24, r18
    1504:	93 1f       	adc	r25, r19
    1506:	8d 93       	st	X+, r24
    1508:	9c 93       	st	X, r25
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    150c:	f8 01       	movw	r30, r16
    150e:	15 82       	std	Z+5, r1	; 0x05
    1510:	14 82       	std	Z+4, r1	; 0x04
    1512:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    1514:	ce 15       	cp	r28, r14
    1516:	df 05       	cpc	r29, r15
    1518:	b1 f6       	brne	.-84     	; 0x14c6 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    154c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1550:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    1554:	88 e4       	ldi	r24, 0x48	; 72
    1556:	98 e0       	ldi	r25, 0x08	; 8
    1558:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    155c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1560:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1564:	89 e0       	ldi	r24, 0x09	; 9
    1566:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1570:	88 e4       	ldi	r24, 0x48	; 72
    1572:	ee e9       	ldi	r30, 0x9E	; 158
    1574:	f4 e0       	ldi	r31, 0x04	; 4
    1576:	df 01       	movw	r26, r30
    1578:	1d 92       	st	X+, r1
    157a:	8a 95       	dec	r24
    157c:	e9 f7       	brne	.-6      	; 0x1578 <TIMER_Init+0x2c>
    157e:	08 95       	ret

00001580 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    158a:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <_timer+0x4>
    158e:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <_timer+0x5>
    1592:	67 2b       	or	r22, r23
    1594:	09 f4       	brne	.+2      	; 0x1598 <TIMER_Create+0x18>
    1596:	49 c0       	rjmp	.+146    	; 0x162a <TIMER_Create+0xaa>
    1598:	ee e9       	ldi	r30, 0x9E	; 158
    159a:	f4 e0       	ldi	r31, 0x04	; 4
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    159c:	a1 e0       	ldi	r26, 0x01	; 1
    159e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    15a0:	c5 85       	ldd	r28, Z+13	; 0x0d
    15a2:	d6 85       	ldd	r29, Z+14	; 0x0e
    15a4:	cd 2b       	or	r28, r29
    15a6:	09 f4       	brne	.+2      	; 0x15aa <TIMER_Create+0x2a>
    15a8:	42 c0       	rjmp	.+132    	; 0x162e <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    15aa:	11 96       	adiw	r26, 0x01	; 1
    15ac:	39 96       	adiw	r30, 0x09	; 9
    15ae:	a8 30       	cpi	r26, 0x08	; 8
    15b0:	b1 05       	cpc	r27, r1
    15b2:	b1 f7       	brne	.-20     	; 0x15a0 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	3f c0       	rjmp	.+126    	; 0x1638 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    15ba:	fd 01       	movw	r30, r26
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	ea 0f       	add	r30, r26
    15ca:	fb 1f       	adc	r31, r27
    15cc:	e2 56       	subi	r30, 0x62	; 98
    15ce:	fb 4f       	sbci	r31, 0xFB	; 251
    15d0:	93 83       	std	Z+3, r25	; 0x03
    15d2:	82 83       	std	Z+2, r24	; 0x02
    15d4:	0d c0       	rjmp	.+26     	; 0x15f0 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    15d6:	fd 01       	movw	r30, r26
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ea 0f       	add	r30, r26
    15e6:	fb 1f       	adc	r31, r27
    15e8:	e2 56       	subi	r30, 0x62	; 98
    15ea:	fb 4f       	sbci	r31, 0xFB	; 251
    15ec:	13 82       	std	Z+3, r1	; 0x03
    15ee:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    15f0:	fd 01       	movw	r30, r26
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ea 0f       	add	r30, r26
    1600:	fb 1f       	adc	r31, r27
    1602:	e2 56       	subi	r30, 0x62	; 98
    1604:	fb 4f       	sbci	r31, 0xFB	; 251
    1606:	55 83       	std	Z+5, r21	; 0x05
    1608:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    160a:	37 83       	std	Z+7, r19	; 0x07
    160c:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    160e:	20 91 76 04 	lds	r18, 0x0476	; 0x800476 <_timer_tick>
    1612:	30 91 77 04 	lds	r19, 0x0477	; 0x800477 <_timer_tick+0x1>
    1616:	82 0f       	add	r24, r18
    1618:	93 1f       	adc	r25, r19
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
			_timer[i].state = READY;
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1622:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    1624:	8a 2f       	mov	r24, r26
    1626:	9b 2f       	mov	r25, r27
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    162e:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1630:	f8 94       	cli
		{
			if (periodic != 0) 
    1632:	01 2b       	or	r16, r17
    1634:	11 f6       	brne	.-124    	; 0x15ba <TIMER_Create+0x3a>
    1636:	cf cf       	rjmp	.-98     	; 0x15d6 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1642:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1646:	83 e3       	ldi	r24, 0x33	; 51
    1648:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    164c:	e9 ec       	ldi	r30, 0xC9	; 201
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 61       	ori	r24, 0x18	; 24
    1654:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1656:	ea ec       	ldi	r30, 0xCA	; 202
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	86 60       	ori	r24, 0x06	; 6
    165e:	80 83       	st	Z, r24
    1660:	08 95       	ret

00001662 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    1662:	e8 ec       	ldi	r30, 0xC8	; 200
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	90 81       	ld	r25, Z
    1668:	95 ff       	sbrs	r25, 5
    166a:	fd cf       	rjmp	.-6      	; 0x1666 <UART_SendChar+0x4>
	UDR1 = c;
    166c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1670:	08 95       	ret

00001672 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1678:	88 81       	ld	r24, Y
    167a:	88 23       	and	r24, r24
    167c:	29 f0       	breq	.+10     	; 0x1688 <UART_SendString+0x16>
    167e:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1680:	f0 df       	rcall	.-32     	; 0x1662 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1682:	89 91       	ld	r24, Y+
    1684:	81 11       	cpse	r24, r1
    1686:	fc cf       	rjmp	.-8      	; 0x1680 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <malloc>:
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	cf 93       	push	r28
    1694:	df 93       	push	r29
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	91 05       	cpc	r25, r1
    169a:	10 f4       	brcc	.+4      	; 0x16a0 <malloc+0x12>
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <__flp>
    16a4:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <__flp+0x1>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	a0 e0       	ldi	r26, 0x00	; 0
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	30 97       	sbiw	r30, 0x00	; 0
    16b2:	19 f1       	breq	.+70     	; 0x16fa <malloc+0x6c>
    16b4:	40 81       	ld	r20, Z
    16b6:	51 81       	ldd	r21, Z+1	; 0x01
    16b8:	02 81       	ldd	r16, Z+2	; 0x02
    16ba:	13 81       	ldd	r17, Z+3	; 0x03
    16bc:	48 17       	cp	r20, r24
    16be:	59 07       	cpc	r21, r25
    16c0:	c8 f0       	brcs	.+50     	; 0x16f4 <malloc+0x66>
    16c2:	84 17       	cp	r24, r20
    16c4:	95 07       	cpc	r25, r21
    16c6:	69 f4       	brne	.+26     	; 0x16e2 <malloc+0x54>
    16c8:	10 97       	sbiw	r26, 0x00	; 0
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <malloc+0x4a>
    16cc:	12 96       	adiw	r26, 0x02	; 2
    16ce:	0c 93       	st	X, r16
    16d0:	12 97       	sbiw	r26, 0x02	; 2
    16d2:	13 96       	adiw	r26, 0x03	; 3
    16d4:	1c 93       	st	X, r17
    16d6:	27 c0       	rjmp	.+78     	; 0x1726 <malloc+0x98>
    16d8:	00 93 fc 04 	sts	0x04FC, r16	; 0x8004fc <__flp>
    16dc:	10 93 fd 04 	sts	0x04FD, r17	; 0x8004fd <__flp+0x1>
    16e0:	22 c0       	rjmp	.+68     	; 0x1726 <malloc+0x98>
    16e2:	21 15       	cp	r18, r1
    16e4:	31 05       	cpc	r19, r1
    16e6:	19 f0       	breq	.+6      	; 0x16ee <malloc+0x60>
    16e8:	42 17       	cp	r20, r18
    16ea:	53 07       	cpc	r21, r19
    16ec:	18 f4       	brcc	.+6      	; 0x16f4 <malloc+0x66>
    16ee:	9a 01       	movw	r18, r20
    16f0:	bd 01       	movw	r22, r26
    16f2:	ef 01       	movw	r28, r30
    16f4:	df 01       	movw	r26, r30
    16f6:	f8 01       	movw	r30, r16
    16f8:	db cf       	rjmp	.-74     	; 0x16b0 <malloc+0x22>
    16fa:	21 15       	cp	r18, r1
    16fc:	31 05       	cpc	r19, r1
    16fe:	f9 f0       	breq	.+62     	; 0x173e <malloc+0xb0>
    1700:	28 1b       	sub	r18, r24
    1702:	39 0b       	sbc	r19, r25
    1704:	24 30       	cpi	r18, 0x04	; 4
    1706:	31 05       	cpc	r19, r1
    1708:	80 f4       	brcc	.+32     	; 0x172a <malloc+0x9c>
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	9b 81       	ldd	r25, Y+3	; 0x03
    170e:	61 15       	cp	r22, r1
    1710:	71 05       	cpc	r23, r1
    1712:	21 f0       	breq	.+8      	; 0x171c <malloc+0x8e>
    1714:	fb 01       	movw	r30, r22
    1716:	93 83       	std	Z+3, r25	; 0x03
    1718:	82 83       	std	Z+2, r24	; 0x02
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <malloc+0x96>
    171c:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <__flp+0x1>
    1720:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <__flp>
    1724:	fe 01       	movw	r30, r28
    1726:	32 96       	adiw	r30, 0x02	; 2
    1728:	44 c0       	rjmp	.+136    	; 0x17b2 <malloc+0x124>
    172a:	fe 01       	movw	r30, r28
    172c:	e2 0f       	add	r30, r18
    172e:	f3 1f       	adc	r31, r19
    1730:	81 93       	st	Z+, r24
    1732:	91 93       	st	Z+, r25
    1734:	22 50       	subi	r18, 0x02	; 2
    1736:	31 09       	sbc	r19, r1
    1738:	39 83       	std	Y+1, r19	; 0x01
    173a:	28 83       	st	Y, r18
    173c:	3a c0       	rjmp	.+116    	; 0x17b2 <malloc+0x124>
    173e:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    1742:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    1746:	23 2b       	or	r18, r19
    1748:	41 f4       	brne	.+16     	; 0x175a <malloc+0xcc>
    174a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    174e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1752:	30 93 fb 04 	sts	0x04FB, r19	; 0x8004fb <__brkval+0x1>
    1756:	20 93 fa 04 	sts	0x04FA, r18	; 0x8004fa <__brkval>
    175a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    175e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1762:	21 15       	cp	r18, r1
    1764:	31 05       	cpc	r19, r1
    1766:	41 f4       	brne	.+16     	; 0x1778 <malloc+0xea>
    1768:	2d b7       	in	r18, 0x3d	; 61
    176a:	3e b7       	in	r19, 0x3e	; 62
    176c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1770:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1774:	24 1b       	sub	r18, r20
    1776:	35 0b       	sbc	r19, r21
    1778:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <__brkval>
    177c:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <__brkval+0x1>
    1780:	e2 17       	cp	r30, r18
    1782:	f3 07       	cpc	r31, r19
    1784:	a0 f4       	brcc	.+40     	; 0x17ae <malloc+0x120>
    1786:	2e 1b       	sub	r18, r30
    1788:	3f 0b       	sbc	r19, r31
    178a:	28 17       	cp	r18, r24
    178c:	39 07       	cpc	r19, r25
    178e:	78 f0       	brcs	.+30     	; 0x17ae <malloc+0x120>
    1790:	ac 01       	movw	r20, r24
    1792:	4e 5f       	subi	r20, 0xFE	; 254
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	24 17       	cp	r18, r20
    1798:	35 07       	cpc	r19, r21
    179a:	48 f0       	brcs	.+18     	; 0x17ae <malloc+0x120>
    179c:	4e 0f       	add	r20, r30
    179e:	5f 1f       	adc	r21, r31
    17a0:	50 93 fb 04 	sts	0x04FB, r21	; 0x8004fb <__brkval+0x1>
    17a4:	40 93 fa 04 	sts	0x04FA, r20	; 0x8004fa <__brkval>
    17a8:	81 93       	st	Z+, r24
    17aa:	91 93       	st	Z+, r25
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <malloc+0x124>
    17ae:	e0 e0       	ldi	r30, 0x00	; 0
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	cf 01       	movw	r24, r30
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <free>:
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <free+0xa>
    17c6:	81 c0       	rjmp	.+258    	; 0x18ca <free+0x10c>
    17c8:	fc 01       	movw	r30, r24
    17ca:	32 97       	sbiw	r30, 0x02	; 2
    17cc:	13 82       	std	Z+3, r1	; 0x03
    17ce:	12 82       	std	Z+2, r1	; 0x02
    17d0:	a0 91 fc 04 	lds	r26, 0x04FC	; 0x8004fc <__flp>
    17d4:	b0 91 fd 04 	lds	r27, 0x04FD	; 0x8004fd <__flp+0x1>
    17d8:	10 97       	sbiw	r26, 0x00	; 0
    17da:	81 f4       	brne	.+32     	; 0x17fc <free+0x3e>
    17dc:	20 81       	ld	r18, Z
    17de:	31 81       	ldd	r19, Z+1	; 0x01
    17e0:	82 0f       	add	r24, r18
    17e2:	93 1f       	adc	r25, r19
    17e4:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    17e8:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    17ec:	28 17       	cp	r18, r24
    17ee:	39 07       	cpc	r19, r25
    17f0:	51 f5       	brne	.+84     	; 0x1846 <free+0x88>
    17f2:	f0 93 fb 04 	sts	0x04FB, r31	; 0x8004fb <__brkval+0x1>
    17f6:	e0 93 fa 04 	sts	0x04FA, r30	; 0x8004fa <__brkval>
    17fa:	67 c0       	rjmp	.+206    	; 0x18ca <free+0x10c>
    17fc:	ed 01       	movw	r28, r26
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	ce 17       	cp	r28, r30
    1804:	df 07       	cpc	r29, r31
    1806:	40 f4       	brcc	.+16     	; 0x1818 <free+0x5a>
    1808:	4a 81       	ldd	r20, Y+2	; 0x02
    180a:	5b 81       	ldd	r21, Y+3	; 0x03
    180c:	9e 01       	movw	r18, r28
    180e:	41 15       	cp	r20, r1
    1810:	51 05       	cpc	r21, r1
    1812:	f1 f0       	breq	.+60     	; 0x1850 <free+0x92>
    1814:	ea 01       	movw	r28, r20
    1816:	f5 cf       	rjmp	.-22     	; 0x1802 <free+0x44>
    1818:	d3 83       	std	Z+3, r29	; 0x03
    181a:	c2 83       	std	Z+2, r28	; 0x02
    181c:	40 81       	ld	r20, Z
    181e:	51 81       	ldd	r21, Z+1	; 0x01
    1820:	84 0f       	add	r24, r20
    1822:	95 1f       	adc	r25, r21
    1824:	c8 17       	cp	r28, r24
    1826:	d9 07       	cpc	r29, r25
    1828:	59 f4       	brne	.+22     	; 0x1840 <free+0x82>
    182a:	88 81       	ld	r24, Y
    182c:	99 81       	ldd	r25, Y+1	; 0x01
    182e:	84 0f       	add	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	93 83       	std	Z+3, r25	; 0x03
    183e:	82 83       	std	Z+2, r24	; 0x02
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	29 f4       	brne	.+10     	; 0x1850 <free+0x92>
    1846:	f0 93 fd 04 	sts	0x04FD, r31	; 0x8004fd <__flp+0x1>
    184a:	e0 93 fc 04 	sts	0x04FC, r30	; 0x8004fc <__flp>
    184e:	3d c0       	rjmp	.+122    	; 0x18ca <free+0x10c>
    1850:	e9 01       	movw	r28, r18
    1852:	fb 83       	std	Y+3, r31	; 0x03
    1854:	ea 83       	std	Y+2, r30	; 0x02
    1856:	49 91       	ld	r20, Y+
    1858:	59 91       	ld	r21, Y+
    185a:	c4 0f       	add	r28, r20
    185c:	d5 1f       	adc	r29, r21
    185e:	ec 17       	cp	r30, r28
    1860:	fd 07       	cpc	r31, r29
    1862:	61 f4       	brne	.+24     	; 0x187c <free+0xbe>
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	84 0f       	add	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	02 96       	adiw	r24, 0x02	; 2
    186e:	e9 01       	movw	r28, r18
    1870:	99 83       	std	Y+1, r25	; 0x01
    1872:	88 83       	st	Y, r24
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	9b 83       	std	Y+3, r25	; 0x03
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	e0 e0       	ldi	r30, 0x00	; 0
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	12 96       	adiw	r26, 0x02	; 2
    1882:	8d 91       	ld	r24, X+
    1884:	9c 91       	ld	r25, X
    1886:	13 97       	sbiw	r26, 0x03	; 3
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	19 f0       	breq	.+6      	; 0x1892 <free+0xd4>
    188c:	fd 01       	movw	r30, r26
    188e:	dc 01       	movw	r26, r24
    1890:	f7 cf       	rjmp	.-18     	; 0x1880 <free+0xc2>
    1892:	8d 91       	ld	r24, X+
    1894:	9c 91       	ld	r25, X
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	9d 01       	movw	r18, r26
    189a:	2e 5f       	subi	r18, 0xFE	; 254
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	82 0f       	add	r24, r18
    18a0:	93 1f       	adc	r25, r19
    18a2:	20 91 fa 04 	lds	r18, 0x04FA	; 0x8004fa <__brkval>
    18a6:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <__brkval+0x1>
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	69 f4       	brne	.+26     	; 0x18ca <free+0x10c>
    18b0:	30 97       	sbiw	r30, 0x00	; 0
    18b2:	29 f4       	brne	.+10     	; 0x18be <free+0x100>
    18b4:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <__flp+0x1>
    18b8:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <__flp>
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <free+0x104>
    18be:	13 82       	std	Z+3, r1	; 0x03
    18c0:	12 82       	std	Z+2, r1	; 0x02
    18c2:	b0 93 fb 04 	sts	0x04FB, r27	; 0x8004fb <__brkval+0x1>
    18c6:	a0 93 fa 04 	sts	0x04FA, r26	; 0x8004fa <__brkval>
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <sprintf>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	2e 97       	sbiw	r28, 0x0e	; 14
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	0d 89       	ldd	r16, Y+21	; 0x15
    18ea:	1e 89       	ldd	r17, Y+22	; 0x16
    18ec:	86 e0       	ldi	r24, 0x06	; 6
    18ee:	8c 83       	std	Y+4, r24	; 0x04
    18f0:	1a 83       	std	Y+2, r17	; 0x02
    18f2:	09 83       	std	Y+1, r16	; 0x01
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	9f e7       	ldi	r25, 0x7F	; 127
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	ae 01       	movw	r20, r28
    18fe:	47 5e       	subi	r20, 0xE7	; 231
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	6f 89       	ldd	r22, Y+23	; 0x17
    1904:	78 8d       	ldd	r23, Y+24	; 0x18
    1906:	ce 01       	movw	r24, r28
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	10 d0       	rcall	.+32     	; 0x192c <vfprintf>
    190c:	ef 81       	ldd	r30, Y+7	; 0x07
    190e:	f8 85       	ldd	r31, Y+8	; 0x08
    1910:	e0 0f       	add	r30, r16
    1912:	f1 1f       	adc	r31, r17
    1914:	10 82       	st	Z, r1
    1916:	2e 96       	adiw	r28, 0x0e	; 14
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <vfprintf>:
    192c:	2f 92       	push	r2
    192e:	3f 92       	push	r3
    1930:	4f 92       	push	r4
    1932:	5f 92       	push	r5
    1934:	6f 92       	push	r6
    1936:	7f 92       	push	r7
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	2b 97       	sbiw	r28, 0x0b	; 11
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	6c 01       	movw	r12, r24
    1962:	7b 01       	movw	r14, r22
    1964:	8a 01       	movw	r16, r20
    1966:	fc 01       	movw	r30, r24
    1968:	17 82       	std	Z+7, r1	; 0x07
    196a:	16 82       	std	Z+6, r1	; 0x06
    196c:	83 81       	ldd	r24, Z+3	; 0x03
    196e:	81 ff       	sbrs	r24, 1
    1970:	bf c1       	rjmp	.+894    	; 0x1cf0 <vfprintf+0x3c4>
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	3c 01       	movw	r6, r24
    1978:	f6 01       	movw	r30, r12
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	f7 01       	movw	r30, r14
    197e:	93 fd       	sbrc	r25, 3
    1980:	85 91       	lpm	r24, Z+
    1982:	93 ff       	sbrs	r25, 3
    1984:	81 91       	ld	r24, Z+
    1986:	7f 01       	movw	r14, r30
    1988:	88 23       	and	r24, r24
    198a:	09 f4       	brne	.+2      	; 0x198e <vfprintf+0x62>
    198c:	ad c1       	rjmp	.+858    	; 0x1ce8 <vfprintf+0x3bc>
    198e:	85 32       	cpi	r24, 0x25	; 37
    1990:	39 f4       	brne	.+14     	; 0x19a0 <vfprintf+0x74>
    1992:	93 fd       	sbrc	r25, 3
    1994:	85 91       	lpm	r24, Z+
    1996:	93 ff       	sbrs	r25, 3
    1998:	81 91       	ld	r24, Z+
    199a:	7f 01       	movw	r14, r30
    199c:	85 32       	cpi	r24, 0x25	; 37
    199e:	21 f4       	brne	.+8      	; 0x19a8 <vfprintf+0x7c>
    19a0:	b6 01       	movw	r22, r12
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	d6 d1       	rcall	.+940    	; 0x1d52 <fputc>
    19a6:	e8 cf       	rjmp	.-48     	; 0x1978 <vfprintf+0x4c>
    19a8:	91 2c       	mov	r9, r1
    19aa:	21 2c       	mov	r2, r1
    19ac:	31 2c       	mov	r3, r1
    19ae:	ff e1       	ldi	r31, 0x1F	; 31
    19b0:	f3 15       	cp	r31, r3
    19b2:	d8 f0       	brcs	.+54     	; 0x19ea <vfprintf+0xbe>
    19b4:	8b 32       	cpi	r24, 0x2B	; 43
    19b6:	79 f0       	breq	.+30     	; 0x19d6 <vfprintf+0xaa>
    19b8:	38 f4       	brcc	.+14     	; 0x19c8 <vfprintf+0x9c>
    19ba:	80 32       	cpi	r24, 0x20	; 32
    19bc:	79 f0       	breq	.+30     	; 0x19dc <vfprintf+0xb0>
    19be:	83 32       	cpi	r24, 0x23	; 35
    19c0:	a1 f4       	brne	.+40     	; 0x19ea <vfprintf+0xbe>
    19c2:	23 2d       	mov	r18, r3
    19c4:	20 61       	ori	r18, 0x10	; 16
    19c6:	1d c0       	rjmp	.+58     	; 0x1a02 <vfprintf+0xd6>
    19c8:	8d 32       	cpi	r24, 0x2D	; 45
    19ca:	61 f0       	breq	.+24     	; 0x19e4 <vfprintf+0xb8>
    19cc:	80 33       	cpi	r24, 0x30	; 48
    19ce:	69 f4       	brne	.+26     	; 0x19ea <vfprintf+0xbe>
    19d0:	23 2d       	mov	r18, r3
    19d2:	21 60       	ori	r18, 0x01	; 1
    19d4:	16 c0       	rjmp	.+44     	; 0x1a02 <vfprintf+0xd6>
    19d6:	83 2d       	mov	r24, r3
    19d8:	82 60       	ori	r24, 0x02	; 2
    19da:	38 2e       	mov	r3, r24
    19dc:	e3 2d       	mov	r30, r3
    19de:	e4 60       	ori	r30, 0x04	; 4
    19e0:	3e 2e       	mov	r3, r30
    19e2:	2a c0       	rjmp	.+84     	; 0x1a38 <vfprintf+0x10c>
    19e4:	f3 2d       	mov	r31, r3
    19e6:	f8 60       	ori	r31, 0x08	; 8
    19e8:	1d c0       	rjmp	.+58     	; 0x1a24 <vfprintf+0xf8>
    19ea:	37 fc       	sbrc	r3, 7
    19ec:	2d c0       	rjmp	.+90     	; 0x1a48 <vfprintf+0x11c>
    19ee:	20 ed       	ldi	r18, 0xD0	; 208
    19f0:	28 0f       	add	r18, r24
    19f2:	2a 30       	cpi	r18, 0x0A	; 10
    19f4:	40 f0       	brcs	.+16     	; 0x1a06 <vfprintf+0xda>
    19f6:	8e 32       	cpi	r24, 0x2E	; 46
    19f8:	b9 f4       	brne	.+46     	; 0x1a28 <vfprintf+0xfc>
    19fa:	36 fc       	sbrc	r3, 6
    19fc:	75 c1       	rjmp	.+746    	; 0x1ce8 <vfprintf+0x3bc>
    19fe:	23 2d       	mov	r18, r3
    1a00:	20 64       	ori	r18, 0x40	; 64
    1a02:	32 2e       	mov	r3, r18
    1a04:	19 c0       	rjmp	.+50     	; 0x1a38 <vfprintf+0x10c>
    1a06:	36 fe       	sbrs	r3, 6
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <vfprintf+0xea>
    1a0a:	8a e0       	ldi	r24, 0x0A	; 10
    1a0c:	98 9e       	mul	r9, r24
    1a0e:	20 0d       	add	r18, r0
    1a10:	11 24       	eor	r1, r1
    1a12:	92 2e       	mov	r9, r18
    1a14:	11 c0       	rjmp	.+34     	; 0x1a38 <vfprintf+0x10c>
    1a16:	ea e0       	ldi	r30, 0x0A	; 10
    1a18:	2e 9e       	mul	r2, r30
    1a1a:	20 0d       	add	r18, r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	22 2e       	mov	r2, r18
    1a20:	f3 2d       	mov	r31, r3
    1a22:	f0 62       	ori	r31, 0x20	; 32
    1a24:	3f 2e       	mov	r3, r31
    1a26:	08 c0       	rjmp	.+16     	; 0x1a38 <vfprintf+0x10c>
    1a28:	8c 36       	cpi	r24, 0x6C	; 108
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <vfprintf+0x108>
    1a2c:	83 2d       	mov	r24, r3
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	38 2e       	mov	r3, r24
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <vfprintf+0x10c>
    1a34:	88 36       	cpi	r24, 0x68	; 104
    1a36:	41 f4       	brne	.+16     	; 0x1a48 <vfprintf+0x11c>
    1a38:	f7 01       	movw	r30, r14
    1a3a:	93 fd       	sbrc	r25, 3
    1a3c:	85 91       	lpm	r24, Z+
    1a3e:	93 ff       	sbrs	r25, 3
    1a40:	81 91       	ld	r24, Z+
    1a42:	7f 01       	movw	r14, r30
    1a44:	81 11       	cpse	r24, r1
    1a46:	b3 cf       	rjmp	.-154    	; 0x19ae <vfprintf+0x82>
    1a48:	98 2f       	mov	r25, r24
    1a4a:	9f 7d       	andi	r25, 0xDF	; 223
    1a4c:	95 54       	subi	r25, 0x45	; 69
    1a4e:	93 30       	cpi	r25, 0x03	; 3
    1a50:	28 f4       	brcc	.+10     	; 0x1a5c <vfprintf+0x130>
    1a52:	0c 5f       	subi	r16, 0xFC	; 252
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	9f e3       	ldi	r25, 0x3F	; 63
    1a58:	99 83       	std	Y+1, r25	; 0x01
    1a5a:	0d c0       	rjmp	.+26     	; 0x1a76 <vfprintf+0x14a>
    1a5c:	83 36       	cpi	r24, 0x63	; 99
    1a5e:	31 f0       	breq	.+12     	; 0x1a6c <vfprintf+0x140>
    1a60:	83 37       	cpi	r24, 0x73	; 115
    1a62:	71 f0       	breq	.+28     	; 0x1a80 <vfprintf+0x154>
    1a64:	83 35       	cpi	r24, 0x53	; 83
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <vfprintf+0x13e>
    1a68:	55 c0       	rjmp	.+170    	; 0x1b14 <vfprintf+0x1e8>
    1a6a:	20 c0       	rjmp	.+64     	; 0x1aac <vfprintf+0x180>
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	80 81       	ld	r24, Z
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	0e 5f       	subi	r16, 0xFE	; 254
    1a74:	1f 4f       	sbci	r17, 0xFF	; 255
    1a76:	88 24       	eor	r8, r8
    1a78:	83 94       	inc	r8
    1a7a:	91 2c       	mov	r9, r1
    1a7c:	53 01       	movw	r10, r6
    1a7e:	12 c0       	rjmp	.+36     	; 0x1aa4 <vfprintf+0x178>
    1a80:	28 01       	movw	r4, r16
    1a82:	f2 e0       	ldi	r31, 0x02	; 2
    1a84:	4f 0e       	add	r4, r31
    1a86:	51 1c       	adc	r5, r1
    1a88:	f8 01       	movw	r30, r16
    1a8a:	a0 80       	ld	r10, Z
    1a8c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a8e:	36 fe       	sbrs	r3, 6
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <vfprintf+0x16c>
    1a92:	69 2d       	mov	r22, r9
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <vfprintf+0x170>
    1a98:	6f ef       	ldi	r22, 0xFF	; 255
    1a9a:	7f ef       	ldi	r23, 0xFF	; 255
    1a9c:	c5 01       	movw	r24, r10
    1a9e:	4e d1       	rcall	.+668    	; 0x1d3c <strnlen>
    1aa0:	4c 01       	movw	r8, r24
    1aa2:	82 01       	movw	r16, r4
    1aa4:	f3 2d       	mov	r31, r3
    1aa6:	ff 77       	andi	r31, 0x7F	; 127
    1aa8:	3f 2e       	mov	r3, r31
    1aaa:	15 c0       	rjmp	.+42     	; 0x1ad6 <vfprintf+0x1aa>
    1aac:	28 01       	movw	r4, r16
    1aae:	22 e0       	ldi	r18, 0x02	; 2
    1ab0:	42 0e       	add	r4, r18
    1ab2:	51 1c       	adc	r5, r1
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	a0 80       	ld	r10, Z
    1ab8:	b1 80       	ldd	r11, Z+1	; 0x01
    1aba:	36 fe       	sbrs	r3, 6
    1abc:	03 c0       	rjmp	.+6      	; 0x1ac4 <vfprintf+0x198>
    1abe:	69 2d       	mov	r22, r9
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <vfprintf+0x19c>
    1ac4:	6f ef       	ldi	r22, 0xFF	; 255
    1ac6:	7f ef       	ldi	r23, 0xFF	; 255
    1ac8:	c5 01       	movw	r24, r10
    1aca:	2d d1       	rcall	.+602    	; 0x1d26 <strnlen_P>
    1acc:	4c 01       	movw	r8, r24
    1ace:	f3 2d       	mov	r31, r3
    1ad0:	f0 68       	ori	r31, 0x80	; 128
    1ad2:	3f 2e       	mov	r3, r31
    1ad4:	82 01       	movw	r16, r4
    1ad6:	33 fc       	sbrc	r3, 3
    1ad8:	19 c0       	rjmp	.+50     	; 0x1b0c <vfprintf+0x1e0>
    1ada:	82 2d       	mov	r24, r2
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	88 16       	cp	r8, r24
    1ae0:	99 06       	cpc	r9, r25
    1ae2:	a0 f4       	brcc	.+40     	; 0x1b0c <vfprintf+0x1e0>
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	80 e2       	ldi	r24, 0x20	; 32
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	33 d1       	rcall	.+614    	; 0x1d52 <fputc>
    1aec:	2a 94       	dec	r2
    1aee:	f5 cf       	rjmp	.-22     	; 0x1ada <vfprintf+0x1ae>
    1af0:	f5 01       	movw	r30, r10
    1af2:	37 fc       	sbrc	r3, 7
    1af4:	85 91       	lpm	r24, Z+
    1af6:	37 fe       	sbrs	r3, 7
    1af8:	81 91       	ld	r24, Z+
    1afa:	5f 01       	movw	r10, r30
    1afc:	b6 01       	movw	r22, r12
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	28 d1       	rcall	.+592    	; 0x1d52 <fputc>
    1b02:	21 10       	cpse	r2, r1
    1b04:	2a 94       	dec	r2
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	82 1a       	sub	r8, r18
    1b0a:	91 08       	sbc	r9, r1
    1b0c:	81 14       	cp	r8, r1
    1b0e:	91 04       	cpc	r9, r1
    1b10:	79 f7       	brne	.-34     	; 0x1af0 <vfprintf+0x1c4>
    1b12:	e1 c0       	rjmp	.+450    	; 0x1cd6 <vfprintf+0x3aa>
    1b14:	84 36       	cpi	r24, 0x64	; 100
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <vfprintf+0x1f0>
    1b18:	89 36       	cpi	r24, 0x69	; 105
    1b1a:	39 f5       	brne	.+78     	; 0x1b6a <vfprintf+0x23e>
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	37 fe       	sbrs	r3, 7
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <vfprintf+0x204>
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	0c 5f       	subi	r16, 0xFC	; 252
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <vfprintf+0x214>
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	07 2e       	mov	r0, r23
    1b36:	00 0c       	add	r0, r0
    1b38:	88 0b       	sbc	r24, r24
    1b3a:	99 0b       	sbc	r25, r25
    1b3c:	0e 5f       	subi	r16, 0xFE	; 254
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	f3 2d       	mov	r31, r3
    1b42:	ff 76       	andi	r31, 0x6F	; 111
    1b44:	3f 2e       	mov	r3, r31
    1b46:	97 ff       	sbrs	r25, 7
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <vfprintf+0x230>
    1b4a:	90 95       	com	r25
    1b4c:	80 95       	com	r24
    1b4e:	70 95       	com	r23
    1b50:	61 95       	neg	r22
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	f0 68       	ori	r31, 0x80	; 128
    1b5a:	3f 2e       	mov	r3, r31
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	a3 01       	movw	r20, r6
    1b62:	33 d1       	rcall	.+614    	; 0x1dca <__ultoa_invert>
    1b64:	88 2e       	mov	r8, r24
    1b66:	86 18       	sub	r8, r6
    1b68:	44 c0       	rjmp	.+136    	; 0x1bf2 <vfprintf+0x2c6>
    1b6a:	85 37       	cpi	r24, 0x75	; 117
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <vfprintf+0x24e>
    1b6e:	23 2d       	mov	r18, r3
    1b70:	2f 7e       	andi	r18, 0xEF	; 239
    1b72:	b2 2e       	mov	r11, r18
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	25 c0       	rjmp	.+74     	; 0x1bc4 <vfprintf+0x298>
    1b7a:	93 2d       	mov	r25, r3
    1b7c:	99 7f       	andi	r25, 0xF9	; 249
    1b7e:	b9 2e       	mov	r11, r25
    1b80:	8f 36       	cpi	r24, 0x6F	; 111
    1b82:	c1 f0       	breq	.+48     	; 0x1bb4 <vfprintf+0x288>
    1b84:	18 f4       	brcc	.+6      	; 0x1b8c <vfprintf+0x260>
    1b86:	88 35       	cpi	r24, 0x58	; 88
    1b88:	79 f0       	breq	.+30     	; 0x1ba8 <vfprintf+0x27c>
    1b8a:	ae c0       	rjmp	.+348    	; 0x1ce8 <vfprintf+0x3bc>
    1b8c:	80 37       	cpi	r24, 0x70	; 112
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <vfprintf+0x26a>
    1b90:	88 37       	cpi	r24, 0x78	; 120
    1b92:	21 f0       	breq	.+8      	; 0x1b9c <vfprintf+0x270>
    1b94:	a9 c0       	rjmp	.+338    	; 0x1ce8 <vfprintf+0x3bc>
    1b96:	e9 2f       	mov	r30, r25
    1b98:	e0 61       	ori	r30, 0x10	; 16
    1b9a:	be 2e       	mov	r11, r30
    1b9c:	b4 fe       	sbrs	r11, 4
    1b9e:	0d c0       	rjmp	.+26     	; 0x1bba <vfprintf+0x28e>
    1ba0:	fb 2d       	mov	r31, r11
    1ba2:	f4 60       	ori	r31, 0x04	; 4
    1ba4:	bf 2e       	mov	r11, r31
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <vfprintf+0x28e>
    1ba8:	34 fe       	sbrs	r3, 4
    1baa:	0a c0       	rjmp	.+20     	; 0x1bc0 <vfprintf+0x294>
    1bac:	29 2f       	mov	r18, r25
    1bae:	26 60       	ori	r18, 0x06	; 6
    1bb0:	b2 2e       	mov	r11, r18
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <vfprintf+0x294>
    1bb4:	28 e0       	ldi	r18, 0x08	; 8
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	05 c0       	rjmp	.+10     	; 0x1bc4 <vfprintf+0x298>
    1bba:	20 e1       	ldi	r18, 0x10	; 16
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <vfprintf+0x298>
    1bc0:	20 e1       	ldi	r18, 0x10	; 16
    1bc2:	32 e0       	ldi	r19, 0x02	; 2
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	b7 fe       	sbrs	r11, 7
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <vfprintf+0x2ac>
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	0c 5f       	subi	r16, 0xFC	; 252
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <vfprintf+0x2b8>
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 5f       	subi	r16, 0xFE	; 254
    1be2:	1f 4f       	sbci	r17, 0xFF	; 255
    1be4:	a3 01       	movw	r20, r6
    1be6:	f1 d0       	rcall	.+482    	; 0x1dca <__ultoa_invert>
    1be8:	88 2e       	mov	r8, r24
    1bea:	86 18       	sub	r8, r6
    1bec:	fb 2d       	mov	r31, r11
    1bee:	ff 77       	andi	r31, 0x7F	; 127
    1bf0:	3f 2e       	mov	r3, r31
    1bf2:	36 fe       	sbrs	r3, 6
    1bf4:	0d c0       	rjmp	.+26     	; 0x1c10 <vfprintf+0x2e4>
    1bf6:	23 2d       	mov	r18, r3
    1bf8:	2e 7f       	andi	r18, 0xFE	; 254
    1bfa:	a2 2e       	mov	r10, r18
    1bfc:	89 14       	cp	r8, r9
    1bfe:	58 f4       	brcc	.+22     	; 0x1c16 <vfprintf+0x2ea>
    1c00:	34 fe       	sbrs	r3, 4
    1c02:	0b c0       	rjmp	.+22     	; 0x1c1a <vfprintf+0x2ee>
    1c04:	32 fc       	sbrc	r3, 2
    1c06:	09 c0       	rjmp	.+18     	; 0x1c1a <vfprintf+0x2ee>
    1c08:	83 2d       	mov	r24, r3
    1c0a:	8e 7e       	andi	r24, 0xEE	; 238
    1c0c:	a8 2e       	mov	r10, r24
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <vfprintf+0x2ee>
    1c10:	b8 2c       	mov	r11, r8
    1c12:	a3 2c       	mov	r10, r3
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfprintf+0x2f0>
    1c16:	b8 2c       	mov	r11, r8
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <vfprintf+0x2f0>
    1c1a:	b9 2c       	mov	r11, r9
    1c1c:	a4 fe       	sbrs	r10, 4
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <vfprintf+0x312>
    1c20:	fe 01       	movw	r30, r28
    1c22:	e8 0d       	add	r30, r8
    1c24:	f1 1d       	adc	r31, r1
    1c26:	80 81       	ld	r24, Z
    1c28:	80 33       	cpi	r24, 0x30	; 48
    1c2a:	21 f4       	brne	.+8      	; 0x1c34 <vfprintf+0x308>
    1c2c:	9a 2d       	mov	r25, r10
    1c2e:	99 7e       	andi	r25, 0xE9	; 233
    1c30:	a9 2e       	mov	r10, r25
    1c32:	09 c0       	rjmp	.+18     	; 0x1c46 <vfprintf+0x31a>
    1c34:	a2 fe       	sbrs	r10, 2
    1c36:	06 c0       	rjmp	.+12     	; 0x1c44 <vfprintf+0x318>
    1c38:	b3 94       	inc	r11
    1c3a:	b3 94       	inc	r11
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <vfprintf+0x31a>
    1c3e:	8a 2d       	mov	r24, r10
    1c40:	86 78       	andi	r24, 0x86	; 134
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <vfprintf+0x31a>
    1c44:	b3 94       	inc	r11
    1c46:	a3 fc       	sbrc	r10, 3
    1c48:	10 c0       	rjmp	.+32     	; 0x1c6a <vfprintf+0x33e>
    1c4a:	a0 fe       	sbrs	r10, 0
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0x32e>
    1c4e:	b2 14       	cp	r11, r2
    1c50:	80 f4       	brcc	.+32     	; 0x1c72 <vfprintf+0x346>
    1c52:	28 0c       	add	r2, r8
    1c54:	92 2c       	mov	r9, r2
    1c56:	9b 18       	sub	r9, r11
    1c58:	0d c0       	rjmp	.+26     	; 0x1c74 <vfprintf+0x348>
    1c5a:	b2 14       	cp	r11, r2
    1c5c:	58 f4       	brcc	.+22     	; 0x1c74 <vfprintf+0x348>
    1c5e:	b6 01       	movw	r22, r12
    1c60:	80 e2       	ldi	r24, 0x20	; 32
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	76 d0       	rcall	.+236    	; 0x1d52 <fputc>
    1c66:	b3 94       	inc	r11
    1c68:	f8 cf       	rjmp	.-16     	; 0x1c5a <vfprintf+0x32e>
    1c6a:	b2 14       	cp	r11, r2
    1c6c:	18 f4       	brcc	.+6      	; 0x1c74 <vfprintf+0x348>
    1c6e:	2b 18       	sub	r2, r11
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <vfprintf+0x34a>
    1c72:	98 2c       	mov	r9, r8
    1c74:	21 2c       	mov	r2, r1
    1c76:	a4 fe       	sbrs	r10, 4
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <vfprintf+0x36c>
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	80 e3       	ldi	r24, 0x30	; 48
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	68 d0       	rcall	.+208    	; 0x1d52 <fputc>
    1c82:	a2 fe       	sbrs	r10, 2
    1c84:	16 c0       	rjmp	.+44     	; 0x1cb2 <vfprintf+0x386>
    1c86:	a1 fc       	sbrc	r10, 1
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <vfprintf+0x364>
    1c8a:	88 e7       	ldi	r24, 0x78	; 120
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <vfprintf+0x368>
    1c90:	88 e5       	ldi	r24, 0x58	; 88
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	b6 01       	movw	r22, r12
    1c96:	0c c0       	rjmp	.+24     	; 0x1cb0 <vfprintf+0x384>
    1c98:	8a 2d       	mov	r24, r10
    1c9a:	86 78       	andi	r24, 0x86	; 134
    1c9c:	51 f0       	breq	.+20     	; 0x1cb2 <vfprintf+0x386>
    1c9e:	a1 fe       	sbrs	r10, 1
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0x37a>
    1ca2:	8b e2       	ldi	r24, 0x2B	; 43
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <vfprintf+0x37c>
    1ca6:	80 e2       	ldi	r24, 0x20	; 32
    1ca8:	a7 fc       	sbrc	r10, 7
    1caa:	8d e2       	ldi	r24, 0x2D	; 45
    1cac:	b6 01       	movw	r22, r12
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	50 d0       	rcall	.+160    	; 0x1d52 <fputc>
    1cb2:	89 14       	cp	r8, r9
    1cb4:	30 f4       	brcc	.+12     	; 0x1cc2 <vfprintf+0x396>
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	80 e3       	ldi	r24, 0x30	; 48
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	4a d0       	rcall	.+148    	; 0x1d52 <fputc>
    1cbe:	9a 94       	dec	r9
    1cc0:	f8 cf       	rjmp	.-16     	; 0x1cb2 <vfprintf+0x386>
    1cc2:	8a 94       	dec	r8
    1cc4:	f3 01       	movw	r30, r6
    1cc6:	e8 0d       	add	r30, r8
    1cc8:	f1 1d       	adc	r31, r1
    1cca:	80 81       	ld	r24, Z
    1ccc:	b6 01       	movw	r22, r12
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	40 d0       	rcall	.+128    	; 0x1d52 <fputc>
    1cd2:	81 10       	cpse	r8, r1
    1cd4:	f6 cf       	rjmp	.-20     	; 0x1cc2 <vfprintf+0x396>
    1cd6:	22 20       	and	r2, r2
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <vfprintf+0x3b0>
    1cda:	4e ce       	rjmp	.-868    	; 0x1978 <vfprintf+0x4c>
    1cdc:	b6 01       	movw	r22, r12
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	37 d0       	rcall	.+110    	; 0x1d52 <fputc>
    1ce4:	2a 94       	dec	r2
    1ce6:	f7 cf       	rjmp	.-18     	; 0x1cd6 <vfprintf+0x3aa>
    1ce8:	f6 01       	movw	r30, r12
    1cea:	86 81       	ldd	r24, Z+6	; 0x06
    1cec:	97 81       	ldd	r25, Z+7	; 0x07
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x3c8>
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	9f ef       	ldi	r25, 0xFF	; 255
    1cf4:	2b 96       	adiw	r28, 0x0b	; 11
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	08 95       	ret

00001d26 <strnlen_P>:
    1d26:	fc 01       	movw	r30, r24
    1d28:	05 90       	lpm	r0, Z+
    1d2a:	61 50       	subi	r22, 0x01	; 1
    1d2c:	70 40       	sbci	r23, 0x00	; 0
    1d2e:	01 10       	cpse	r0, r1
    1d30:	d8 f7       	brcc	.-10     	; 0x1d28 <strnlen_P+0x2>
    1d32:	80 95       	com	r24
    1d34:	90 95       	com	r25
    1d36:	8e 0f       	add	r24, r30
    1d38:	9f 1f       	adc	r25, r31
    1d3a:	08 95       	ret

00001d3c <strnlen>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	61 50       	subi	r22, 0x01	; 1
    1d40:	70 40       	sbci	r23, 0x00	; 0
    1d42:	01 90       	ld	r0, Z+
    1d44:	01 10       	cpse	r0, r1
    1d46:	d8 f7       	brcc	.-10     	; 0x1d3e <strnlen+0x2>
    1d48:	80 95       	com	r24
    1d4a:	90 95       	com	r25
    1d4c:	8e 0f       	add	r24, r30
    1d4e:	9f 1f       	adc	r25, r31
    1d50:	08 95       	ret

00001d52 <fputc>:
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	fb 01       	movw	r30, r22
    1d5c:	23 81       	ldd	r18, Z+3	; 0x03
    1d5e:	21 fd       	sbrc	r18, 1
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <fputc+0x16>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	9f ef       	ldi	r25, 0xFF	; 255
    1d66:	2c c0       	rjmp	.+88     	; 0x1dc0 <fputc+0x6e>
    1d68:	22 ff       	sbrs	r18, 2
    1d6a:	16 c0       	rjmp	.+44     	; 0x1d98 <fputc+0x46>
    1d6c:	46 81       	ldd	r20, Z+6	; 0x06
    1d6e:	57 81       	ldd	r21, Z+7	; 0x07
    1d70:	24 81       	ldd	r18, Z+4	; 0x04
    1d72:	35 81       	ldd	r19, Z+5	; 0x05
    1d74:	42 17       	cp	r20, r18
    1d76:	53 07       	cpc	r21, r19
    1d78:	44 f4       	brge	.+16     	; 0x1d8a <fputc+0x38>
    1d7a:	a0 81       	ld	r26, Z
    1d7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1d7e:	9d 01       	movw	r18, r26
    1d80:	2f 5f       	subi	r18, 0xFF	; 255
    1d82:	3f 4f       	sbci	r19, 0xFF	; 255
    1d84:	31 83       	std	Z+1, r19	; 0x01
    1d86:	20 83       	st	Z, r18
    1d88:	8c 93       	st	X, r24
    1d8a:	26 81       	ldd	r18, Z+6	; 0x06
    1d8c:	37 81       	ldd	r19, Z+7	; 0x07
    1d8e:	2f 5f       	subi	r18, 0xFF	; 255
    1d90:	3f 4f       	sbci	r19, 0xFF	; 255
    1d92:	37 83       	std	Z+7, r19	; 0x07
    1d94:	26 83       	std	Z+6, r18	; 0x06
    1d96:	14 c0       	rjmp	.+40     	; 0x1dc0 <fputc+0x6e>
    1d98:	8b 01       	movw	r16, r22
    1d9a:	ec 01       	movw	r28, r24
    1d9c:	fb 01       	movw	r30, r22
    1d9e:	00 84       	ldd	r0, Z+8	; 0x08
    1da0:	f1 85       	ldd	r31, Z+9	; 0x09
    1da2:	e0 2d       	mov	r30, r0
    1da4:	09 95       	icall
    1da6:	89 2b       	or	r24, r25
    1da8:	e1 f6       	brne	.-72     	; 0x1d62 <fputc+0x10>
    1daa:	d8 01       	movw	r26, r16
    1dac:	16 96       	adiw	r26, 0x06	; 6
    1dae:	8d 91       	ld	r24, X+
    1db0:	9c 91       	ld	r25, X
    1db2:	17 97       	sbiw	r26, 0x07	; 7
    1db4:	01 96       	adiw	r24, 0x01	; 1
    1db6:	17 96       	adiw	r26, 0x07	; 7
    1db8:	9c 93       	st	X, r25
    1dba:	8e 93       	st	-X, r24
    1dbc:	16 97       	sbiw	r26, 0x06	; 6
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <__ultoa_invert>:
    1dca:	fa 01       	movw	r30, r20
    1dcc:	aa 27       	eor	r26, r26
    1dce:	28 30       	cpi	r18, 0x08	; 8
    1dd0:	51 f1       	breq	.+84     	; 0x1e26 <__ultoa_invert+0x5c>
    1dd2:	20 31       	cpi	r18, 0x10	; 16
    1dd4:	81 f1       	breq	.+96     	; 0x1e36 <__ultoa_invert+0x6c>
    1dd6:	e8 94       	clt
    1dd8:	6f 93       	push	r22
    1dda:	6e 7f       	andi	r22, 0xFE	; 254
    1ddc:	6e 5f       	subi	r22, 0xFE	; 254
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	8f 4f       	sbci	r24, 0xFF	; 255
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	af 4f       	sbci	r26, 0xFF	; 255
    1de6:	b1 e0       	ldi	r27, 0x01	; 1
    1de8:	3e d0       	rcall	.+124    	; 0x1e66 <__ultoa_invert+0x9c>
    1dea:	b4 e0       	ldi	r27, 0x04	; 4
    1dec:	3c d0       	rcall	.+120    	; 0x1e66 <__ultoa_invert+0x9c>
    1dee:	67 0f       	add	r22, r23
    1df0:	78 1f       	adc	r23, r24
    1df2:	89 1f       	adc	r24, r25
    1df4:	9a 1f       	adc	r25, r26
    1df6:	a1 1d       	adc	r26, r1
    1df8:	68 0f       	add	r22, r24
    1dfa:	79 1f       	adc	r23, r25
    1dfc:	8a 1f       	adc	r24, r26
    1dfe:	91 1d       	adc	r25, r1
    1e00:	a1 1d       	adc	r26, r1
    1e02:	6a 0f       	add	r22, r26
    1e04:	71 1d       	adc	r23, r1
    1e06:	81 1d       	adc	r24, r1
    1e08:	91 1d       	adc	r25, r1
    1e0a:	a1 1d       	adc	r26, r1
    1e0c:	20 d0       	rcall	.+64     	; 0x1e4e <__ultoa_invert+0x84>
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <__ultoa_invert+0x48>
    1e10:	68 94       	set
    1e12:	3f 91       	pop	r19
    1e14:	2a e0       	ldi	r18, 0x0A	; 10
    1e16:	26 9f       	mul	r18, r22
    1e18:	11 24       	eor	r1, r1
    1e1a:	30 19       	sub	r19, r0
    1e1c:	30 5d       	subi	r19, 0xD0	; 208
    1e1e:	31 93       	st	Z+, r19
    1e20:	de f6       	brtc	.-74     	; 0x1dd8 <__ultoa_invert+0xe>
    1e22:	cf 01       	movw	r24, r30
    1e24:	08 95       	ret
    1e26:	46 2f       	mov	r20, r22
    1e28:	47 70       	andi	r20, 0x07	; 7
    1e2a:	40 5d       	subi	r20, 0xD0	; 208
    1e2c:	41 93       	st	Z+, r20
    1e2e:	b3 e0       	ldi	r27, 0x03	; 3
    1e30:	0f d0       	rcall	.+30     	; 0x1e50 <__ultoa_invert+0x86>
    1e32:	c9 f7       	brne	.-14     	; 0x1e26 <__ultoa_invert+0x5c>
    1e34:	f6 cf       	rjmp	.-20     	; 0x1e22 <__ultoa_invert+0x58>
    1e36:	46 2f       	mov	r20, r22
    1e38:	4f 70       	andi	r20, 0x0F	; 15
    1e3a:	40 5d       	subi	r20, 0xD0	; 208
    1e3c:	4a 33       	cpi	r20, 0x3A	; 58
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <__ultoa_invert+0x7c>
    1e40:	49 5d       	subi	r20, 0xD9	; 217
    1e42:	31 fd       	sbrc	r19, 1
    1e44:	40 52       	subi	r20, 0x20	; 32
    1e46:	41 93       	st	Z+, r20
    1e48:	02 d0       	rcall	.+4      	; 0x1e4e <__ultoa_invert+0x84>
    1e4a:	a9 f7       	brne	.-22     	; 0x1e36 <__ultoa_invert+0x6c>
    1e4c:	ea cf       	rjmp	.-44     	; 0x1e22 <__ultoa_invert+0x58>
    1e4e:	b4 e0       	ldi	r27, 0x04	; 4
    1e50:	a6 95       	lsr	r26
    1e52:	97 95       	ror	r25
    1e54:	87 95       	ror	r24
    1e56:	77 95       	ror	r23
    1e58:	67 95       	ror	r22
    1e5a:	ba 95       	dec	r27
    1e5c:	c9 f7       	brne	.-14     	; 0x1e50 <__ultoa_invert+0x86>
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	61 05       	cpc	r22, r1
    1e62:	71 05       	cpc	r23, r1
    1e64:	08 95       	ret
    1e66:	9b 01       	movw	r18, r22
    1e68:	ac 01       	movw	r20, r24
    1e6a:	0a 2e       	mov	r0, r26
    1e6c:	06 94       	lsr	r0
    1e6e:	57 95       	ror	r21
    1e70:	47 95       	ror	r20
    1e72:	37 95       	ror	r19
    1e74:	27 95       	ror	r18
    1e76:	ba 95       	dec	r27
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <__ultoa_invert+0xa2>
    1e7a:	62 0f       	add	r22, r18
    1e7c:	73 1f       	adc	r23, r19
    1e7e:	84 1f       	adc	r24, r20
    1e80:	95 1f       	adc	r25, r21
    1e82:	a0 1d       	adc	r26, r0
    1e84:	08 95       	ret

00001e86 <_exit>:
    1e86:	f8 94       	cli

00001e88 <__stop_program>:
    1e88:	ff cf       	rjmp	.-2      	; 0x1e88 <__stop_program>
