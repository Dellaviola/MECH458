
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b2  00800100  00001d96  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008004b2  008004b2  000021dc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005689  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b64  00000000  00000000  00007c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000351d  00000000  00000000  00009795  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000890  00000000  00000000  0000ccb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009262  00000000  00000000  0000d544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b4a  00000000  00000000  000167a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  000182f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00018628  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	d3 c5       	rjmp	.+2982   	; 0xbdc <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e6 e9       	ldi	r30, 0x96	; 150
      ac:	fd e1       	ldi	r31, 0x1D	; 29
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 3b       	cpi	r26, 0xB2	; 178
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	25 e0       	ldi	r18, 0x05	; 5
      c0:	a2 eb       	ldi	r26, 0xB2	; 178
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a2 34       	cpi	r26, 0x42	; 66
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	05 d4       	rcall	.+2058   	; 0x8da <main>
      d0:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_exit>

000000d4 <__bad_interrupt>:
      d4:	c1 c4       	rjmp	.+2434   	; 0xa58 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     120:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     12c:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 d6 04 	sts	0x04D6, r19	; 0x8004d6 <g_ADCCount+0x1>
     13a:	20 93 d5 04 	sts	0x04D5, r18	; 0x8004d5 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	ef 53       	subi	r30, 0x3F	; 63
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <g_ADCCount>
     162:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	16 c0       	rjmp	.+44     	; 0x1be <SERVER_Task+0x34>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2383>
     196:	88 23       	and	r24, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <SERVER_Task+0x30>
     19a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     19e:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     1aa:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     1ae:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     1b2:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     1b6:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2383>
     1be:	66 99       	sbic	0x0c, 6	; 12
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <SERVER_Task+0x54>
     1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2384>
     1c6:	88 23       	and	r24, r24
     1c8:	41 f0       	breq	.+16     	; 0x1da <SERVER_Task+0x50>
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     1d0:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     1d4:	61 d3       	rcall	.+1730   	; 0x898 <LL_UpdateStatus>
     1d6:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2384>
     1de:	65 99       	sbic	0x0c, 5	; 12
     1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <SERVER_Task+0x6e>
     1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2385>
     1e6:	88 23       	and	r24, r24
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <SERVER_Task+0x6a>
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <_timer+0x23>
     1f0:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2385>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <SERVER_Task+0x8e>
     1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2383>
     200:	81 11       	cpse	r24, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <SERVER_Task+0x88>
     204:	e0 ee       	ldi	r30, 0xE0	; 224
     206:	f4 e0       	ldi	r31, 0x04	; 4
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	82 8f       	std	Z+26, r24	; 0x1a
     20c:	84 a7       	std	Z+44, r24	; 0x2c
     20e:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <_timer+0x47>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2383>
     218:	66 9b       	sbis	0x0c, 6	; 12
     21a:	32 c0       	rjmp	.+100    	; 0x280 <SERVER_Task+0xf6>
     21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2384>
     220:	81 11       	cpse	r24, r1
     222:	2b c0       	rjmp	.+86     	; 0x27a <SERVER_Task+0xf0>
     224:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     228:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	b1 f4       	brne	.+44     	; 0x25c <SERVER_Task+0xd2>
     230:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     234:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     238:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <STAGE2+0x1>
     23c:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <STAGE2>
     240:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <g_Timer>
     244:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <g_Timer+0x1>
     248:	31 d3       	rcall	.+1634   	; 0x8ac <LL_UpdateTick>
     24a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     24e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     252:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     256:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     25a:	0a c0       	rjmp	.+20     	; 0x270 <SERVER_Task+0xe6>
     25c:	d7 d2       	rcall	.+1454   	; 0x80c <LL_Next>
     25e:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <STAGE2+0x1>
     262:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <STAGE2>
     266:	60 91 d9 04 	lds	r22, 0x04D9	; 0x8004d9 <g_Timer>
     26a:	70 91 da 04 	lds	r23, 0x04DA	; 0x8004da <g_Timer+0x1>
     26e:	1e d3       	rcall	.+1596   	; 0x8ac <LL_UpdateTick>
     270:	ea e7       	ldi	r30, 0x7A	; 122
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	80 64       	ori	r24, 0x40	; 64
     278:	80 83       	st	Z, r24
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2384>
     280:	65 9b       	sbis	0x0c, 5	; 12
     282:	0f c0       	rjmp	.+30     	; 0x2a2 <SERVER_Task+0x118>
     284:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2385>
     288:	81 11       	cpse	r24, r1
     28a:	08 c0       	rjmp	.+16     	; 0x29c <SERVER_Task+0x112>
     28c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     290:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     294:	e1 d2       	rcall	.+1474   	; 0x858 <LL_GetClass>
     296:	85 30       	cpi	r24, 0x05	; 5
     298:	09 f4       	brne	.+2      	; 0x29c <SERVER_Task+0x112>
     29a:	58 d7       	rcall	.+3760   	; 0x114c <SYS_Rampdown>
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2385>
     2a2:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     2a6:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     2aa:	d6 d2       	rcall	.+1452   	; 0x858 <LL_GetClass>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	c9 f4       	brne	.+50     	; 0x2e2 <SERVER_Task+0x158>
     2b0:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <stepper+0xe>
     2b4:	81 11       	cpse	r24, r1
     2b6:	15 c0       	rjmp	.+42     	; 0x2e2 <SERVER_Task+0x158>
     2b8:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <g_Timer>
     2bc:	d0 91 da 04 	lds	r29, 0x04DA	; 0x8004da <g_Timer+0x1>
     2c0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     2c4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     2c8:	f7 d2       	rcall	.+1518   	; 0x8b8 <LL_GetTick>
     2ca:	c8 1b       	sub	r28, r24
     2cc:	d9 0b       	sbc	r29, r25
     2ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     2d2:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     2d6:	8c 17       	cp	r24, r28
     2d8:	9d 07       	cpc	r25, r29
     2da:	18 f4       	brcc	.+6      	; 0x2e2 <SERVER_Task+0x158>
     2dc:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <memory.2386>
     2e0:	04 c0       	rjmp	.+8      	; 0x2ea <SERVER_Task+0x160>
     2e2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <memory.2386>
     2e6:	81 11       	cpse	r24, r1
     2e8:	34 c0       	rjmp	.+104    	; 0x352 <SERVER_Task+0x1c8>
     2ea:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     2ee:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     2f2:	b2 d2       	rcall	.+1380   	; 0x858 <LL_GetClass>
     2f4:	84 30       	cpi	r24, 0x04	; 4
     2f6:	69 f1       	breq	.+90     	; 0x352 <SERVER_Task+0x1c8>
     2f8:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     2fc:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     300:	82 81       	ldd	r24, Z+2	; 0x02
     302:	93 81       	ldd	r25, Z+3	; 0x03
     304:	a9 d2       	rcall	.+1362   	; 0x858 <LL_GetClass>
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	21 f1       	breq	.+72     	; 0x352 <SERVER_Task+0x1c8>
     30a:	ed e2       	ldi	r30, 0x2D	; 45
     30c:	f5 e0       	ldi	r31, 0x05	; 5
     30e:	84 81       	ldd	r24, Z+4	; 0x04
     310:	22 81       	ldd	r18, Z+2	; 0x02
     312:	33 81       	ldd	r19, Z+3	; 0x03
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	82 17       	cp	r24, r18
     318:	93 07       	cpc	r25, r19
     31a:	d9 f4       	brne	.+54     	; 0x352 <SERVER_Task+0x1c8>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <memory.2386>
     322:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     326:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	94 d2       	rcall	.+1320   	; 0x858 <LL_GetClass>
     330:	e8 2f       	mov	r30, r24
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	e7 5f       	subi	r30, 0xF7	; 247
     336:	fe 4f       	sbci	r31, 0xFE	; 254
     338:	c0 81       	ld	r28, Z
     33a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     33e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     342:	8a d2       	rcall	.+1300   	; 0x858 <LL_GetClass>
     344:	e8 2f       	mov	r30, r24
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	e7 5f       	subi	r30, 0xF7	; 247
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	6c 2f       	mov	r22, r28
     350:	25 d4       	rcall	.+2122   	; 0xb9c <STEPPER_SetRotation>
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <ADC_Task>:
     358:	cf 92       	push	r12
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	cf 93       	push	r28
     362:	e1 ec       	ldi	r30, 0xC1	; 193
     364:	f4 e0       	ldi	r31, 0x04	; 4
     366:	a0 81       	ld	r26, Z
     368:	b1 81       	ldd	r27, Z+1	; 0x01
     36a:	60 81       	ld	r22, Z
     36c:	71 81       	ldd	r23, Z+1	; 0x01
     36e:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <ticks.2394>
     372:	8f 5f       	subi	r24, 0xFF	; 255
     374:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <ticks.2394>
     378:	c1 2c       	mov	r12, r1
     37a:	d1 2c       	mov	r13, r1
     37c:	76 01       	movw	r14, r12
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	4f b7       	in	r20, 0x3f	; 63
     384:	f8 94       	cli
     386:	fc 01       	movw	r30, r24
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ef 53       	subi	r30, 0x3F	; 63
     38e:	fb 4f       	sbci	r31, 0xFB	; 251
     390:	20 81       	ld	r18, Z
     392:	31 81       	ldd	r19, Z+1	; 0x01
     394:	c2 0e       	add	r12, r18
     396:	d3 1e       	adc	r13, r19
     398:	e1 1c       	adc	r14, r1
     39a:	f1 1c       	adc	r15, r1
     39c:	20 81       	ld	r18, Z
     39e:	31 81       	ldd	r19, Z+1	; 0x01
     3a0:	26 17       	cp	r18, r22
     3a2:	37 07       	cpc	r19, r23
     3a4:	38 f4       	brcc	.+14     	; 0x3b4 <ADC_Task+0x5c>
     3a6:	fc 01       	movw	r30, r24
     3a8:	ee 0f       	add	r30, r30
     3aa:	ff 1f       	adc	r31, r31
     3ac:	ef 53       	subi	r30, 0x3F	; 63
     3ae:	fb 4f       	sbci	r31, 0xFB	; 251
     3b0:	60 81       	ld	r22, Z
     3b2:	71 81       	ldd	r23, Z+1	; 0x01
     3b4:	fc 01       	movw	r30, r24
     3b6:	ee 0f       	add	r30, r30
     3b8:	ff 1f       	adc	r31, r31
     3ba:	ef 53       	subi	r30, 0x3F	; 63
     3bc:	fb 4f       	sbci	r31, 0xFB	; 251
     3be:	20 81       	ld	r18, Z
     3c0:	31 81       	ldd	r19, Z+1	; 0x01
     3c2:	a2 17       	cp	r26, r18
     3c4:	b3 07       	cpc	r27, r19
     3c6:	08 f0       	brcs	.+2      	; 0x3ca <ADC_Task+0x72>
     3c8:	4d c0       	rjmp	.+154    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3ca:	fc 01       	movw	r30, r24
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	ef 53       	subi	r30, 0x3F	; 63
     3d2:	fb 4f       	sbci	r31, 0xFB	; 251
     3d4:	a0 81       	ld	r26, Z
     3d6:	b1 81       	ldd	r27, Z+1	; 0x01
     3d8:	45 c0       	rjmp	.+138    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     3da:	8f b7       	in	r24, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	ca 1a       	sub	r12, r26
     3e0:	db 0a       	sbc	r13, r27
     3e2:	e1 08       	sbc	r14, r1
     3e4:	f1 08       	sbc	r15, r1
     3e6:	c6 1a       	sub	r12, r22
     3e8:	d7 0a       	sbc	r13, r23
     3ea:	e1 08       	sbc	r14, r1
     3ec:	f1 08       	sbc	r15, r1
     3ee:	f6 94       	lsr	r15
     3f0:	e7 94       	ror	r14
     3f2:	d7 94       	ror	r13
     3f4:	c7 94       	ror	r12
     3f6:	f6 94       	lsr	r15
     3f8:	e7 94       	ror	r14
     3fa:	d7 94       	ror	r13
     3fc:	c7 94       	ror	r12
     3fe:	8f bf       	out	0x3f, r24	; 63
     400:	cf b7       	in	r28, 0x3f	; 63
     402:	f8 94       	cli
     404:	d7 01       	movw	r26, r14
     406:	c6 01       	movw	r24, r12
     408:	0b 97       	sbiw	r24, 0x0b	; 11
     40a:	a1 09       	sbc	r26, r1
     40c:	b1 09       	sbc	r27, r1
     40e:	8d 3d       	cpi	r24, 0xDD	; 221
     410:	93 40       	sbci	r25, 0x03	; 3
     412:	a1 05       	cpc	r26, r1
     414:	b1 05       	cpc	r27, r1
     416:	a0 f4       	brcc	.+40     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     418:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     41c:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     420:	20 d2       	rcall	.+1088   	; 0x862 <LL_GetRefl>
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	c8 16       	cp	r12, r24
     428:	d9 06       	cpc	r13, r25
     42a:	ea 06       	cpc	r14, r26
     42c:	fb 06       	cpc	r15, r27
     42e:	40 f4       	brcc	.+16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     430:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
     434:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	11 f0       	breq	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	b6 01       	movw	r22, r12
     43e:	1c d2       	rcall	.+1080   	; 0x878 <LL_UpdateRefl>
     440:	cf bf       	out	0x3f, r28	; 63
     442:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_ADCCount+0x1>
     446:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_ADCCount>
     44a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <_timer+0x11>
     44e:	66 9b       	sbis	0x0c, 6	; 12
     450:	06 c0       	rjmp	.+12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     452:	ea e7       	ldi	r30, 0x7A	; 122
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	80 64       	ori	r24, 0x40	; 64
     45a:	80 83       	st	Z, r24
     45c:	0a c0       	rjmp	.+20     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     45e:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <ticks.2394>
     462:	07 c0       	rjmp	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     464:	4f bf       	out	0x3f, r20	; 63
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	86 30       	cpi	r24, 0x06	; 6
     46a:	91 05       	cpc	r25, r1
     46c:	09 f0       	breq	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	89 cf       	rjmp	.-238    	; 0x382 <ADC_Task+0x2a>
     470:	b4 cf       	rjmp	.-152    	; 0x3da <ADC_Task+0x82>
     472:	cf 91       	pop	r28
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	df 90       	pop	r13
     47a:	cf 90       	pop	r12
     47c:	08 95       	ret

0000047e <MAG_Task>:
     47e:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_MotorOn>
     482:	88 23       	and	r24, r24
     484:	29 f0       	breq	.+10     	; 0x490 <MAG_Task+0x12>
     486:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <tick.2416>
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <tick.2416>
     490:	64 99       	sbic	0x0c, 4	; 12
     492:	1a c0       	rjmp	.+52     	; 0x4c8 <MAG_Task+0x4a>
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     49a:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     49e:	fc d1       	rcall	.+1016   	; 0x898 <LL_UpdateStatus>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4a6:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     4aa:	ec d1       	rcall	.+984    	; 0x884 <LL_UpdateMag>
     4ac:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4b0:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     4b4:	ab d1       	rcall	.+854    	; 0x80c <LL_Next>
     4b6:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     4ba:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     4be:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <tick.2416>
     4c2:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_timer+0x1a>
     4c6:	08 95       	ret
     4c8:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <tick.2416>
     4cc:	83 33       	cpi	r24, 0x33	; 51
     4ce:	c8 f0       	brcs	.+50     	; 0x502 <MAG_Task+0x84>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4d6:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     4da:	de d1       	rcall	.+956    	; 0x898 <LL_UpdateStatus>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4e2:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     4e6:	ce d1       	rcall	.+924    	; 0x884 <LL_UpdateMag>
     4e8:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
     4ec:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
     4f0:	8d d1       	rcall	.+794    	; 0x80c <LL_Next>
     4f2:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <STAGE1+0x1>
     4f6:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <STAGE1>
     4fa:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <tick.2416>
     4fe:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_timer+0x1a>
     502:	08 95       	ret

00000504 <EXIT_Task>:
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	1f 92       	push	r1
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     51a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     51e:	c1 d1       	rcall	.+898    	; 0x8a2 <LL_GetStatus>
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	18 f4       	brcc	.+6      	; 0x52a <EXIT_Task+0x26>
     524:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     528:	01 c1       	rjmp	.+514    	; 0x72c <EXIT_Task+0x228>
     52a:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
     52e:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
     532:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <EXIT_DELAY>
     536:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <EXIT_DELAY+0x1>
     53a:	28 17       	cp	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	18 f4       	brcc	.+6      	; 0x546 <EXIT_Task+0x42>
     540:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     544:	f3 c0       	rjmp	.+486    	; 0x72c <EXIT_Task+0x228>
     546:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <g_Timer>
     54a:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <g_Timer+0x1>
     54e:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     552:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     556:	b0 d1       	rcall	.+864    	; 0x8b8 <LL_GetTick>
     558:	08 1b       	sub	r16, r24
     55a:	19 0b       	sbc	r17, r25
     55c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <STAGE2_EXIT_TIME>
     560:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <STAGE2_EXIT_TIME+0x1>
     564:	08 17       	cp	r16, r24
     566:	19 07       	cpc	r17, r25
     568:	18 f4       	brcc	.+6      	; 0x570 <EXIT_Task+0x6c>
     56a:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     56e:	de c0       	rjmp	.+444    	; 0x72c <EXIT_Task+0x228>
     570:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     574:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     578:	6f d1       	rcall	.+734    	; 0x858 <LL_GetClass>
     57a:	84 30       	cpi	r24, 0x04	; 4
     57c:	89 f5       	brne	.+98     	; 0x5e0 <EXIT_Task+0xdc>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <g_UnclassifiedRequest>
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     58a:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     58e:	84 d1       	rcall	.+776    	; 0x898 <LL_UpdateStatus>
     590:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     594:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     598:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     59c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     5a0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5a4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5a8:	31 d1       	rcall	.+610    	; 0x80c <LL_Next>
     5aa:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     5ae:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     5b2:	fc 01       	movw	r30, r24
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	4f d1       	rcall	.+670    	; 0x858 <LL_GetClass>
     5ba:	e8 2f       	mov	r30, r24
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	e7 5f       	subi	r30, 0xF7	; 247
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
     5c2:	10 81       	ld	r17, Z
     5c4:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5c8:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5cc:	45 d1       	rcall	.+650    	; 0x858 <LL_GetClass>
     5ce:	e8 2f       	mov	r30, r24
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	e7 5f       	subi	r30, 0xF7	; 247
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	61 2f       	mov	r22, r17
     5da:	e0 d2       	rcall	.+1472   	; 0xb9c <STEPPER_SetRotation>
     5dc:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     5e0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     5e4:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     5e8:	5c d1       	rcall	.+696    	; 0x8a2 <LL_GetStatus>
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	31 f5       	brne	.+76     	; 0x63a <EXIT_Task+0x136>
     5ee:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <g_Timer>
     5f2:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <g_Timer+0x1>
     5f6:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <lastItemTick>
     5fa:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <lastItemTick+0x1>
     5fe:	08 1b       	sub	r16, r24
     600:	19 0b       	sbc	r17, r25
     602:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     606:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     60a:	56 d1       	rcall	.+684    	; 0x8b8 <LL_GetTick>
     60c:	7c 01       	movw	r14, r24
     60e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <N_1>
     612:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <N_1+0x1>
     616:	50 d1       	rcall	.+672    	; 0x8b8 <LL_GetTick>
     618:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <MISSING_DELAY>
     61c:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <MISSING_DELAY+0x1>
     620:	2e 0d       	add	r18, r14
     622:	3f 1d       	adc	r19, r15
     624:	28 1b       	sub	r18, r24
     626:	39 0b       	sbc	r19, r25
     628:	02 17       	cp	r16, r18
     62a:	13 07       	cpc	r17, r19
     62c:	30 f0       	brcs	.+12     	; 0x63a <EXIT_Task+0x136>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <g_MissingRequest>
     634:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     638:	79 c0       	rjmp	.+242    	; 0x72c <EXIT_Task+0x228>
     63a:	ed e2       	ldi	r30, 0x2D	; 45
     63c:	f5 e0       	ldi	r31, 0x05	; 5
     63e:	85 81       	ldd	r24, Z+5	; 0x05
     640:	96 81       	ldd	r25, Z+6	; 0x06
     642:	97 81       	ldd	r25, Z+7	; 0x07
     644:	89 1b       	sub	r24, r25
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	99 81       	ldd	r25, Y+1	; 0x01
     64a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <STEPPER_RANGE>
     64e:	98 17       	cp	r25, r24
     650:	08 f0       	brcs	.+2      	; 0x654 <EXIT_Task+0x150>
     652:	64 c0       	rjmp	.+200    	; 0x71c <EXIT_Task+0x218>
     654:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <stepper+0xe>
     658:	81 11       	cpse	r24, r1
     65a:	60 c0       	rjmp	.+192    	; 0x71c <EXIT_Task+0x218>
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	85 30       	cpi	r24, 0x05	; 5
     660:	e0 f4       	brcc	.+56     	; 0x69a <EXIT_Task+0x196>
     662:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     666:	81 11       	cpse	r24, r1
     668:	18 c0       	rjmp	.+48     	; 0x69a <EXIT_Task+0x196>
     66a:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     66e:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     672:	22 d1       	rcall	.+580    	; 0x8b8 <LL_GetTick>
     674:	8c 01       	movw	r16, r24
     676:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     67a:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     67e:	84 81       	ldd	r24, Z+4	; 0x04
     680:	95 81       	ldd	r25, Z+5	; 0x05
     682:	1a d1       	rcall	.+564    	; 0x8b8 <LL_GetTick>
     684:	08 1b       	sub	r16, r24
     686:	19 0b       	sbc	r17, r25
     688:	0d 32       	cpi	r16, 0x2D	; 45
     68a:	11 40       	sbci	r17, 0x01	; 1
     68c:	30 f0       	brcs	.+12     	; 0x69a <EXIT_Task+0x196>
     68e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STEPPER_SET>
     692:	ed e2       	ldi	r30, 0x2D	; 45
     694:	f5 e0       	ldi	r31, 0x05	; 5
     696:	82 87       	std	Z+10, r24	; 0x0a
     698:	15 86       	std	Z+13, r1	; 0x0d
     69a:	63 e0       	ldi	r22, 0x03	; 3
     69c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     6a0:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     6a4:	f9 d0       	rcall	.+498    	; 0x898 <LL_UpdateStatus>
     6a6:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     6aa:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     6ae:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <lastItemTick+0x1>
     6b2:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <lastItemTick>
     6b6:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     6ba:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     6be:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <g_TimerLast+0x1>
     6c2:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <g_TimerLast>
     6c6:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     6ca:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     6ce:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <N_1+0x1>
     6d2:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <N_1>
     6d6:	9a d0       	rcall	.+308    	; 0x80c <LL_Next>
     6d8:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     6dc:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	cb d1       	rcall	.+918    	; 0xa7c <PWM>
     6e6:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     6ea:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	b2 d0       	rcall	.+356    	; 0x858 <LL_GetClass>
     6f4:	e8 2f       	mov	r30, r24
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	e7 5f       	subi	r30, 0xF7	; 247
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	10 81       	ld	r17, Z
     6fe:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     702:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     706:	a8 d0       	rcall	.+336    	; 0x858 <LL_GetClass>
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e7 5f       	subi	r30, 0xF7	; 247
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	80 81       	ld	r24, Z
     712:	61 2f       	mov	r22, r17
     714:	43 d2       	rcall	.+1158   	; 0xb9c <STEPPER_SetRotation>
     716:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <_timer+0x23>
     71a:	03 c0       	rjmp	.+6      	; 0x722 <EXIT_Task+0x21e>
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	ad d1       	rcall	.+858    	; 0xa7c <PWM>
     722:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     726:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     72a:	96 d0       	rcall	.+300    	; 0x858 <LL_GetClass>
     72c:	0f 90       	pop	r0
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	08 95       	ret

0000073c <BTN_Task>:
     73c:	89 b1       	in	r24, 0x09	; 9
     73e:	83 70       	andi	r24, 0x03	; 3
     740:	c1 f0       	breq	.+48     	; 0x772 <BTN_Task+0x36>
     742:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <__data_end>
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <__data_end>
     74c:	8b 30       	cpi	r24, 0x0B	; 11
     74e:	98 f0       	brcs	.+38     	; 0x776 <BTN_Task+0x3a>
     750:	89 b1       	in	r24, 0x09	; 9
     752:	83 70       	andi	r24, 0x03	; 3
     754:	81 f0       	breq	.+32     	; 0x776 <BTN_Task+0x3a>
     756:	89 b1       	in	r24, 0x09	; 9
     758:	83 70       	andi	r24, 0x03	; 3
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	19 f4       	brne	.+6      	; 0x764 <BTN_Task+0x28>
     75e:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <g_PauseRequest>
     762:	08 95       	ret
     764:	89 b1       	in	r24, 0x09	; 9
     766:	83 70       	andi	r24, 0x03	; 3
     768:	82 30       	cpi	r24, 0x02	; 2
     76a:	29 f4       	brne	.+10     	; 0x776 <BTN_Task+0x3a>
     76c:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <_timer+0x2c>
     770:	08 95       	ret
     772:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <__data_end>
     776:	08 95       	ret

00000778 <WATCHDOG_Task>:
     778:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_WDTimeout>
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	18 f0       	brcs	.+6      	; 0x786 <WATCHDOG_Task+0xe>
     780:	86 e1       	ldi	r24, 0x16	; 22
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	bd d3       	rcall	.+1914   	; 0xf00 <SYS_Pause>
     786:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <g_WDTimeout>
     78a:	8f 5f       	subi	r24, 0xFF	; 255
     78c:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <g_WDTimeout>
     790:	08 95       	ret

00000792 <D_Blinky>:
     792:	9b b1       	in	r25, 0x0b	; 11
     794:	80 ea       	ldi	r24, 0xA0	; 160
     796:	89 27       	eor	r24, r25
     798:	8b b9       	out	0x0b, r24	; 11
     79a:	08 95       	ret

0000079c <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     79c:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <g_MotorOn>
     7a0:	88 23       	and	r24, r24
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <ADD_Task+0x1a>
     7a4:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <g_Timer>
     7a8:	90 91 da 04 	lds	r25, 0x04DA	; 0x8004da <g_Timer+0x1>
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	90 93 da 04 	sts	0x04DA, r25	; 0x8004da <g_Timer+0x1>
     7b2:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <g_Timer>
     7b6:	08 95       	ret

000007b8 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	7c 01       	movw	r14, r24
     7c4:	16 2f       	mov	r17, r22
     7c6:	d4 2f       	mov	r29, r20
     7c8:	c2 2f       	mov	r28, r18
     7ca:	87 e0       	ldi	r24, 0x07	; 7
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	e5 d6       	rcall	.+3530   	; 0x159a <malloc>
     7d0:	fc 01       	movw	r30, r24
     7d2:	f1 82       	std	Z+1, r15	; 0x01
     7d4:	e0 82       	st	Z, r14
     7d6:	12 83       	std	Z+2, r17	; 0x02
     7d8:	d3 83       	std	Z+3, r29	; 0x03
     7da:	c4 83       	std	Z+4, r28	; 0x04
     7dc:	16 82       	std	Z+6, r1	; 0x06
     7de:	15 82       	std	Z+5, r1	; 0x05
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	08 95       	ret

000007ec <LL_ItemListInit>:
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	86 e0       	ldi	r24, 0x06	; 6
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	d1 d6       	rcall	.+3490   	; 0x159a <malloc>
     7f8:	fc 01       	movw	r30, r24
     7fa:	d1 83       	std	Z+1, r29	; 0x01
     7fc:	c0 83       	st	Z, r28
     7fe:	15 82       	std	Z+5, r1	; 0x05
     800:	14 82       	std	Z+4, r1	; 0x04
     802:	13 82       	std	Z+3, r1	; 0x03
     804:	12 82       	std	Z+2, r1	; 0x02
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <LL_Next>:
     80c:	fc 01       	movw	r30, r24
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	08 95       	ret

00000814 <LL_AddBack>:
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
     81a:	cb 01       	movw	r24, r22
     81c:	01 c0       	rjmp	.+2      	; 0x820 <LL_AddBack+0xc>
     81e:	e9 01       	movw	r28, r18
     820:	2a 81       	ldd	r18, Y+2	; 0x02
     822:	3b 81       	ldd	r19, Y+3	; 0x03
     824:	21 15       	cp	r18, r1
     826:	31 05       	cpc	r19, r1
     828:	d1 f7       	brne	.-12     	; 0x81e <LL_AddBack+0xa>
     82a:	e0 df       	rcall	.-64     	; 0x7ec <LL_ItemListInit>
     82c:	9b 83       	std	Y+3, r25	; 0x03
     82e:	8a 83       	std	Y+2, r24	; 0x02
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <LL_Size>:
     836:	dc 01       	movw	r26, r24
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	ed 91       	ld	r30, X+
     83c:	fc 91       	ld	r31, X
     83e:	13 97       	sbiw	r26, 0x03	; 3
     840:	30 97       	sbiw	r30, 0x00	; 0
     842:	41 f0       	breq	.+16     	; 0x854 <LL_Size+0x1e>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	02 80       	ldd	r0, Z+2	; 0x02
     84a:	f3 81       	ldd	r31, Z+3	; 0x03
     84c:	e0 2d       	mov	r30, r0
     84e:	30 97       	sbiw	r30, 0x00	; 0
     850:	d1 f7       	brne	.-12     	; 0x846 <LL_Size+0x10>
     852:	08 95       	ret
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	08 95       	ret

00000858 <LL_GetClass>:
     858:	dc 01       	movw	r26, r24
     85a:	ed 91       	ld	r30, X+
     85c:	fc 91       	ld	r31, X
     85e:	83 81       	ldd	r24, Z+3	; 0x03
     860:	08 95       	ret

00000862 <LL_GetRefl>:
     862:	dc 01       	movw	r26, r24
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	08 95       	ret

0000086e <LL_GetMag>:
     86e:	dc 01       	movw	r26, r24
     870:	ed 91       	ld	r30, X+
     872:	fc 91       	ld	r31, X
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	08 95       	ret

00000878 <LL_UpdateRefl>:
     878:	dc 01       	movw	r26, r24
     87a:	ed 91       	ld	r30, X+
     87c:	fc 91       	ld	r31, X
     87e:	71 83       	std	Z+1, r23	; 0x01
     880:	60 83       	st	Z, r22
     882:	08 95       	ret

00000884 <LL_UpdateMag>:
     884:	dc 01       	movw	r26, r24
     886:	ed 91       	ld	r30, X+
     888:	fc 91       	ld	r31, X
     88a:	62 83       	std	Z+2, r22	; 0x02
     88c:	08 95       	ret

0000088e <LL_UpdateClass>:
     88e:	dc 01       	movw	r26, r24
     890:	ed 91       	ld	r30, X+
     892:	fc 91       	ld	r31, X
     894:	63 83       	std	Z+3, r22	; 0x03
     896:	08 95       	ret

00000898 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     898:	dc 01       	movw	r26, r24
     89a:	ed 91       	ld	r30, X+
     89c:	fc 91       	ld	r31, X
     89e:	64 83       	std	Z+4, r22	; 0x04
     8a0:	08 95       	ret

000008a2 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     8a2:	dc 01       	movw	r26, r24
     8a4:	ed 91       	ld	r30, X+
     8a6:	fc 91       	ld	r31, X
}
     8a8:	84 81       	ldd	r24, Z+4	; 0x04
     8aa:	08 95       	ret

000008ac <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     8ac:	dc 01       	movw	r26, r24
     8ae:	ed 91       	ld	r30, X+
     8b0:	fc 91       	ld	r31, X
     8b2:	76 83       	std	Z+6, r23	; 0x06
     8b4:	65 83       	std	Z+5, r22	; 0x05
     8b6:	08 95       	ret

000008b8 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     8b8:	dc 01       	movw	r26, r24
     8ba:	ed 91       	ld	r30, X+
     8bc:	fc 91       	ld	r31, X
     8be:	85 81       	ldd	r24, Z+5	; 0x05
     8c0:	96 81       	ldd	r25, Z+6	; 0x06
     8c2:	08 95       	ret

000008c4 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     8c8:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     8ca:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     8cc:	80 ef       	ldi	r24, 0xF0	; 240
     8ce:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     8d0:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     8d2:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	08 95       	ret

000008da <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     8da:	7e d2       	rcall	.+1276   	; 0xdd8 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     8dc:	89 b1       	in	r24, 0x09	; 9
     8de:	83 70       	andi	r24, 0x03	; 3
     8e0:	e9 f7       	brne	.-6      	; 0x8dc <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     8e2:	84 e2       	ldi	r24, 0x24	; 36
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	4b d6       	rcall	.+3222   	; 0x157e <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8e8:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	45 ec       	ldi	r20, 0xC5	; 197
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	c8 d5       	rcall	.+2960   	; 0x148c <TIMER_Create>
		_timer[0].state = READY;
     8fc:	c0 ee       	ldi	r28, 0xE0	; 224
     8fe:	d4 e0       	ldi	r29, 0x04	; 4
     900:	12 e0       	ldi	r17, 0x02	; 2
     902:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	4c ea       	ldi	r20, 0xAC	; 172
     90a:	51 e0       	ldi	r21, 0x01	; 1
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	bb d5       	rcall	.+2934   	; 0x148c <TIMER_Create>
		_timer[1].state = BLOCKED;
     916:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	4f e3       	ldi	r20, 0x3F	; 63
     91e:	52 e0       	ldi	r21, 0x02	; 2
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	b1 d5       	rcall	.+2914   	; 0x148c <TIMER_Create>
		_timer[2].state = BLOCKED;
     92a:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	42 e8       	ldi	r20, 0x82	; 130
     932:	52 e0       	ldi	r21, 0x02	; 2
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a7 d5       	rcall	.+2894   	; 0x148c <TIMER_Create>
		_timer[3].state = BLOCKED;
     93e:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	4e ec       	ldi	r20, 0xCE	; 206
     946:	53 e0       	ldi	r21, 0x03	; 3
     948:	61 e0       	ldi	r22, 0x01	; 1
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	9d d5       	rcall	.+2874   	; 0x148c <TIMER_Create>
		_timer[4].state = BLOCKED;
     952:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	4e e9       	ldi	r20, 0x9E	; 158
     95a:	53 e0       	ldi	r21, 0x03	; 3
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	84 e6       	ldi	r24, 0x64	; 100
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	93 d5       	rcall	.+2854   	; 0x148c <TIMER_Create>
		_timer[5].state = READY;
     966:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	49 ec       	ldi	r20, 0xC9	; 201
     96e:	53 e0       	ldi	r21, 0x03	; 3
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 ed       	ldi	r24, 0xD0	; 208
     976:	97 e0       	ldi	r25, 0x07	; 7
     978:	89 d5       	rcall	.+2834   	; 0x148c <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     97a:	1e af       	std	Y+62, r17	; 0x3e
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	4c eb       	ldi	r20, 0xBC	; 188
     982:	53 e0       	ldi	r21, 0x03	; 3
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     98a:	93 e1       	ldi	r25, 0x13	; 19
     98c:	7f d5       	rcall	.+2814   	; 0x148c <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     98e:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <_timer+0x47>
     992:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	f3 d5       	rcall	.+3046   	; 0x157e <UART_SendString>
     998:	80 e8       	ldi	r24, 0x80	; 128
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     99a:	90 e0       	ldi	r25, 0x00	; 0
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause("Pause Requested!\r\n");
     99c:	6f d0       	rcall	.+222    	; 0xa7c <PWM>
     99e:	78 94       	sei
     9a0:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <g_PauseRequest>
     9a4:	88 23       	and	r24, r24
     9a6:	19 f0       	breq	.+6      	; 0x9ae <main+0xd4>
     9a8:	89 e4       	ldi	r24, 0x49	; 73
		if(g_UnclassifiedRequest) SYS_Unclassified();
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	a9 d2       	rcall	.+1362   	; 0xf00 <SYS_Pause>
     9ae:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <g_UnclassifiedRequest>
     9b2:	81 11       	cpse	r24, r1
		if(g_MissingRequest) SYS_Missing();
     9b4:	31 d4       	rcall	.+2146   	; 0x1218 <SYS_Unclassified>
     9b6:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <g_MissingRequest>
     9ba:	81 11       	cpse	r24, r1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     9bc:	7e d4       	rcall	.+2300   	; 0x12ba <SYS_Missing>
     9be:	c0 91 ba 04 	lds	r28, 0x04BA	; 0x8004ba <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     9c2:	d0 91 bb 04 	lds	r29, 0x04BB	; 0x8004bb <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     9c6:	20 97       	sbiw	r28, 0x00	; 0
     9c8:	59 f3       	breq	.-42     	; 0x9a0 <main+0xc6>
     9ca:	20 97       	sbiw	r28, 0x00	; 0
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <main+0xf6>
     9ce:	3d c0       	rjmp	.+122    	; 0xa4a <main+0x170>
     9d0:	ce 01       	movw	r24, r28
     9d2:	42 df       	rcall	.-380    	; 0x858 <LL_GetClass>
     9d4:	84 30       	cpi	r24, 0x04	; 4
     9d6:	09 f0       	breq	.+2      	; 0x9da <main+0x100>
     9d8:	38 c0       	rjmp	.+112    	; 0xa4a <main+0x170>
     9da:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     9dc:	62 df       	rcall	.-316    	; 0x8a2 <LL_GetStatus>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	a1 f5       	brne	.+104    	; 0xa4a <main+0x170>
     9e2:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     9e4:	3e df       	rcall	.-388    	; 0x862 <LL_GetRefl>
     9e6:	8c 01       	movw	r16, r24
				
				if(magVal) // 
     9e8:	ce 01       	movw	r24, r28
     9ea:	41 df       	rcall	.-382    	; 0x86e <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     9ec:	88 23       	and	r24, r24
     9ee:	91 f0       	breq	.+36     	; 0xa14 <main+0x13a>
     9f0:	c8 01       	movw	r24, r16
     9f2:	0a 97       	sbiw	r24, 0x0a	; 10
     9f4:	8f 3b       	cpi	r24, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     9f6:	91 05       	cpc	r25, r1
     9f8:	20 f4       	brcc	.+8      	; 0xa02 <main+0x128>
     9fa:	62 e0       	ldi	r22, 0x02	; 2
     9fc:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     9fe:	47 df       	rcall	.-370    	; 0x88e <LL_UpdateClass>
     a00:	24 c0       	rjmp	.+72     	; 0xa4a <main+0x170>
     a02:	08 5c       	subi	r16, 0xC8	; 200
     a04:	11 09       	sbc	r17, r1
     a06:	0d 3b       	cpi	r16, 0xBD	; 189
					{
						LL_UpdateClass(temp, STEEL);
     a08:	12 40       	sbci	r17, 0x02	; 2
     a0a:	f8 f4       	brcc	.+62     	; 0xa4a <main+0x170>
     a0c:	63 e0       	ldi	r22, 0x03	; 3
     a0e:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     a10:	3e df       	rcall	.-388    	; 0x88e <LL_UpdateClass>
     a12:	1b c0       	rjmp	.+54     	; 0xa4a <main+0x170>
     a14:	c8 01       	movw	r24, r16
     a16:	89 58       	subi	r24, 0x89	; 137
     a18:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     a1a:	0b 97       	sbiw	r24, 0x0b	; 11
     a1c:	20 f4       	brcc	.+8      	; 0xa26 <main+0x14c>
     a1e:	60 e0       	ldi	r22, 0x00	; 0
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     a20:	ce 01       	movw	r24, r28
     a22:	35 df       	rcall	.-406    	; 0x88e <LL_UpdateClass>
     a24:	12 c0       	rjmp	.+36     	; 0xa4a <main+0x170>
     a26:	c8 01       	movw	r24, r16
     a28:	80 52       	subi	r24, 0x20	; 32
     a2a:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     a2c:	8b 3a       	cpi	r24, 0xAB	; 171
     a2e:	91 05       	cpc	r25, r1
     a30:	20 f4       	brcc	.+8      	; 0xa3a <main+0x160>
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	ce 01       	movw	r24, r28
				}
				else
				{
					// Unknown non-magnetic object might be aluminum
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     a36:	2b df       	rcall	.-426    	; 0x88e <LL_UpdateClass>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <main+0x170>
     a3a:	0a 50       	subi	r16, 0x0A	; 10
     a3c:	11 09       	sbc	r17, r1
     a3e:	0f 3b       	cpi	r16, 0xBF	; 191
					{
						LL_UpdateClass(temp, ALUMINUM);
     a40:	11 05       	cpc	r17, r1
     a42:	18 f4       	brcc	.+6      	; 0xa4a <main+0x170>
     a44:	62 e0       	ldi	r22, 0x02	; 2
     a46:	ce 01       	movw	r24, r28
					}
				}
			}
			temp = LL_Next(temp);
     a48:	22 df       	rcall	.-444    	; 0x88e <LL_UpdateClass>
     a4a:	ce 01       	movw	r24, r28
     a4c:	df de       	rcall	.-578    	; 0x80c <LL_Next>
     a4e:	ec 01       	movw	r28, r24
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     a50:	89 2b       	or	r24, r25
     a52:	09 f0       	breq	.+2      	; 0xa56 <main+0x17c>
     a54:	ba cf       	rjmp	.-140    	; 0x9ca <main+0xf0>
     a56:	a4 cf       	rjmp	.-184    	; 0x9a0 <main+0xc6>

00000a58 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     a58:	1f 92       	push	r1
     a5a:	0f 92       	push	r0
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	0f 92       	push	r0
     a60:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     a62:	8a ea       	ldi	r24, 0xAA	; 170
     a64:	88 b9       	out	0x08, r24	; 8
     a66:	fe cf       	rjmp	.-4      	; 0xa64 <__vector_default+0xc>

00000a68 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     a68:	84 b5       	in	r24, 0x24	; 36
     a6a:	83 68       	ori	r24, 0x83	; 131
     a6c:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     a6e:	85 b5       	in	r24, 0x25	; 37
     a70:	83 60       	ori	r24, 0x03	; 3
     a72:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     a74:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     a78:	87 bd       	out	0x27, r24	; 39
     a7a:	08 95       	ret

00000a7c <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     a7c:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a7e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a80:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     a82:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     a86:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     a88:	23 2b       	or	r18, r19
     a8a:	31 f0       	breq	.+12     	; 0xa98 <PWM+0x1c>
		{
			g_MotorOn = 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <g_MotorOn>
			PORTB = ~0x0E;
     a92:	81 ef       	ldi	r24, 0xF1	; 241
     a94:	85 b9       	out	0x05, r24	; 5
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     a98:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <g_MotorOn>
			PORTB = ~0x0F;
     a9c:	80 ef       	ldi	r24, 0xF0	; 240
     a9e:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aa0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     aa2:	08 95       	ret

00000aa4 <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     aa4:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     aa6:	ed e2       	ldi	r30, 0x2D	; 45
     aa8:	f5 e0       	ldi	r31, 0x05	; 5
     aaa:	10 82       	st	Z, r1
	stepper.direction = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     ab0:	13 82       	std	Z+3, r1	; 0x03
     ab2:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     ab4:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     ab6:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     ab8:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     aba:	11 86       	std	Z+9, r1	; 0x09
     abc:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     abe:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     ac0:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     ac2:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     ac4:	88 ec       	ldi	r24, 0xC8	; 200
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	96 83       	std	Z+6, r25	; 0x06
     aca:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     acc:	80 e3       	ldi	r24, 0x30	; 48
     ace:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     ad0:	84 e9       	ldi	r24, 0x94	; 148
     ad2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     ad6:	e0 eb       	ldi	r30, 0xB0	; 176
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	82 60       	ori	r24, 0x02	; 2
     ade:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     ae0:	e0 e7       	ldi	r30, 0x70	; 112
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	82 60       	ori	r24, 0x02	; 2
     ae8:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     aea:	e1 eb       	ldi	r30, 0xB1	; 177
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	87 60       	ori	r24, 0x07	; 7
     af2:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     af4:	78 94       	sei
     af6:	08 95       	ret

00000af8 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	86 1b       	sub	r24, r22
     afc:	91 09       	sbc	r25, r1
	if (steps >= 0)
     afe:	52 f0       	brmi	.+20     	; 0xb14 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     b00:	85 36       	cpi	r24, 0x65	; 101
     b02:	91 05       	cpc	r25, r1
     b04:	8c f0       	brlt	.+34     	; 0xb28 <STEPPER_NumSteps+0x30>
     b06:	24 e6       	ldi	r18, 0x64	; 100
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	a9 01       	movw	r20, r18
     b0c:	48 1b       	sub	r20, r24
     b0e:	59 0b       	sbc	r21, r25
     b10:	ca 01       	movw	r24, r20
     b12:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     b14:	8c 39       	cpi	r24, 0x9C	; 156
     b16:	5f ef       	ldi	r21, 0xFF	; 255
     b18:	95 07       	cpc	r25, r21
     b1a:	34 f4       	brge	.+12     	; 0xb28 <STEPPER_NumSteps+0x30>
     b1c:	2c e9       	ldi	r18, 0x9C	; 156
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	a9 01       	movw	r20, r18
     b22:	48 1b       	sub	r20, r24
     b24:	59 0b       	sbc	r21, r25
     b26:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     b28:	08 95       	ret

00000b2a <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     b2e:	cd e2       	ldi	r28, 0x2D	; 45
     b30:	d5 e0       	ldi	r29, 0x05	; 5
     b32:	6c 81       	ldd	r22, Y+4	; 0x04
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	9b 81       	ldd	r25, Y+3	; 0x03
     b38:	df df       	rcall	.-66     	; 0xaf8 <STEPPER_NumSteps>
     b3a:	9e 83       	std	Y+6, r25	; 0x06
     b3c:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     b3e:	6a 81       	ldd	r22, Y+2	; 0x02
     b40:	7b 81       	ldd	r23, Y+3	; 0x03
     b42:	88 85       	ldd	r24, Y+8	; 0x08
     b44:	99 85       	ldd	r25, Y+9	; 0x09
     b46:	d8 df       	rcall	.-80     	; 0xaf8 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     b48:	2d 81       	ldd	r18, Y+5	; 0x05
     b4a:	3e 81       	ldd	r19, Y+6	; 0x06
     b4c:	33 23       	and	r19, r19
     b4e:	14 f4       	brge	.+4      	; 0xb54 <STEPPER_Rotate+0x2a>
     b50:	28 e0       	ldi	r18, 0x08	; 8
     b52:	01 c0       	rjmp	.+2      	; 0xb56 <STEPPER_Rotate+0x2c>
     b54:	24 e0       	ldi	r18, 0x04	; 4
     b56:	ed e2       	ldi	r30, 0x2D	; 45
     b58:	f5 e0       	ldi	r31, 0x05	; 5
     b5a:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     b5c:	45 81       	ldd	r20, Z+5	; 0x05
     b5e:	56 81       	ldd	r21, Z+6	; 0x06
     b60:	84 9f       	mul	r24, r20
     b62:	90 01       	movw	r18, r0
     b64:	85 9f       	mul	r24, r21
     b66:	30 0d       	add	r19, r0
     b68:	94 9f       	mul	r25, r20
     b6a:	30 0d       	add	r19, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	12 16       	cp	r1, r18
     b72:	13 06       	cpc	r1, r19
     b74:	0c f0       	brlt	.+2      	; 0xb78 <STEPPER_Rotate+0x4e>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	ed e2       	ldi	r30, 0x2D	; 45
     b7a:	f5 e0       	ldi	r31, 0x05	; 5
     b7c:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     b7e:	85 81       	ldd	r24, Z+5	; 0x05
     b80:	96 81       	ldd	r25, Z+6	; 0x06
     b82:	99 23       	and	r25, r25
     b84:	1c f4       	brge	.+6      	; 0xb8c <STEPPER_Rotate+0x62>
     b86:	91 95       	neg	r25
     b88:	81 95       	neg	r24
     b8a:	91 09       	sbc	r25, r1
     b8c:	ed e2       	ldi	r30, 0x2D	; 45
     b8e:	f5 e0       	ldi	r31, 0x05	; 5
     b90:	96 83       	std	Z+6, r25	; 0x06
     b92:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     b94:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     b9c:	ed e2       	ldi	r30, 0x2D	; 45
     b9e:	f5 e0       	ldi	r31, 0x05	; 5
     ba0:	24 81       	ldd	r18, Z+4	; 0x04
     ba2:	42 81       	ldd	r20, Z+2	; 0x02
     ba4:	53 81       	ldd	r21, Z+3	; 0x03
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	24 17       	cp	r18, r20
     baa:	35 07       	cpc	r19, r21
     bac:	29 f0       	breq	.+10     	; 0xbb8 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     bb2:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     bb4:	60 8b       	std	Z+16, r22	; 0x10
     bb6:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	ed e2       	ldi	r30, 0x2D	; 45
     bbe:	f5 e0       	ldi	r31, 0x05	; 5
     bc0:	33 83       	std	Z+3, r19	; 0x03
     bc2:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	71 87       	std	Z+9, r23	; 0x09
     bc8:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     bca:	94 81       	ldd	r25, Z+4	; 0x04
     bcc:	89 13       	cpse	r24, r25
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <STEPPER_SetRotation+0x3c>
     bd0:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <STEPPER_SAME>
     bd4:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <stepper+0xa>
		STEPPER_Rotate();
     bd8:	a8 cf       	rjmp	.-176    	; 0xb2a <STEPPER_Rotate>
     bda:	08 95       	ret

00000bdc <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0b b6       	in	r0, 0x3b	; 59
     be8:	0f 92       	push	r0
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	00 d0       	rcall	.+0      	; 0xc08 <__vector_13+0x2c>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <__vector_13+0x2e>
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     c0e:	86 e3       	ldi	r24, 0x36	; 54
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	a0 e0       	ldi	r26, 0x00	; 0
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	9e e2       	ldi	r25, 0x2E	; 46
     c18:	ad e2       	ldi	r26, 0x2D	; 45
     c1a:	b5 e3       	ldi	r27, 0x35	; 53
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	ab 83       	std	Y+3, r26	; 0x03
     c22:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     c24:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     c28:	88 23       	and	r24, r24
     c2a:	29 f0       	breq	.+10     	; 0xc36 <__vector_13+0x5a>
     c2c:	ed e2       	ldi	r30, 0x2D	; 45
     c2e:	f5 e0       	ldi	r31, 0x05	; 5
     c30:	82 85       	ldd	r24, Z+10	; 0x0a
     c32:	81 50       	subi	r24, 0x01	; 1
     c34:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     c36:	ed e2       	ldi	r30, 0x2D	; 45
     c38:	f5 e0       	ldi	r31, 0x05	; 5
     c3a:	87 81       	ldd	r24, Z+7	; 0x07
     c3c:	25 81       	ldd	r18, Z+5	; 0x05
     c3e:	36 81       	ldd	r19, Z+6	; 0x06
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	82 17       	cp	r24, r18
     c44:	93 07       	cpc	r25, r19
     c46:	e1 f4       	brne	.+56     	; 0xc80 <__vector_13+0xa4>
	{

		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     c4e:	86 85       	ldd	r24, Z+14	; 0x0e
     c50:	88 23       	and	r24, r24
     c52:	21 f0       	breq	.+8      	; 0xc5c <__vector_13+0x80>
		{
			stepper.early = 0;
     c54:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     c56:	60 89       	ldd	r22, Z+16	; 0x10
     c58:	87 85       	ldd	r24, Z+15	; 0x0f
     c5a:	a0 df       	rcall	.-192    	; 0xb9c <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     c5c:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <stepper+0xb>
     c60:	88 23       	and	r24, r24
     c62:	19 f0       	breq	.+6      	; 0xc6a <__vector_13+0x8e>
     c64:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <stepper+0xd>
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <__vector_13+0x90>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	ed e2       	ldi	r30, 0x2D	; 45
     c6e:	f5 e0       	ldi	r31, 0x05	; 5
     c70:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     c72:	e5 85       	ldd	r30, Z+13	; 0x0d
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	e0 5f       	subi	r30, 0xF0	; 240
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	80 81       	ld	r24, Z
     c7c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     c80:	ed e2       	ldi	r30, 0x2D	; 45
     c82:	f5 e0       	ldi	r31, 0x05	; 5
     c84:	87 81       	ldd	r24, Z+7	; 0x07
     c86:	25 81       	ldd	r18, Z+5	; 0x05
     c88:	36 81       	ldd	r19, Z+6	; 0x06
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	82 17       	cp	r24, r18
     c8e:	93 07       	cpc	r25, r19
     c90:	0c f0       	brlt	.+2      	; 0xc94 <__vector_13+0xb8>
     c92:	60 c0       	rjmp	.+192    	; 0xd54 <__vector_13+0x178>
     c94:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <stepper+0xa>
     c98:	81 11       	cpse	r24, r1
     c9a:	5c c0       	rjmp	.+184    	; 0xd54 <__vector_13+0x178>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     c9c:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <stepper+0x1>
     ca0:	84 30       	cpi	r24, 0x04	; 4
     ca2:	51 f4       	brne	.+20     	; 0xcb8 <__vector_13+0xdc>
     ca4:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ec 0f       	add	r30, r28
     cae:	fd 1f       	adc	r31, r29
     cb0:	e8 0f       	add	r30, r24
     cb2:	f1 1d       	adc	r31, r1
     cb4:	80 81       	ld	r24, Z
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <__vector_13+0xf6>
     cb8:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     cbc:	e3 e0       	ldi	r30, 0x03	; 3
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	e8 1b       	sub	r30, r24
     cc2:	f1 09       	sbc	r31, r1
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	8c 0f       	add	r24, r28
     cca:	9d 1f       	adc	r25, r29
     ccc:	e8 0f       	add	r30, r24
     cce:	f9 1f       	adc	r31, r25
     cd0:	80 81       	ld	r24, Z
     cd2:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     cd4:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	21 f0       	breq	.+8      	; 0xce4 <__vector_13+0x108>
     cdc:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <stepper>
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <__vector_13+0x10a>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	ed e2       	ldi	r30, 0x2D	; 45
     ce8:	f5 e0       	ldi	r31, 0x05	; 5
     cea:	80 83       	st	Z, r24

		stepper._currentStep++;
     cec:	87 81       	ldd	r24, Z+7	; 0x07
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     cf2:	83 85       	ldd	r24, Z+11	; 0x0b
     cf4:	81 11       	cpse	r24, r1
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <__vector_13+0x146>
     cf8:	85 81       	ldd	r24, Z+5	; 0x05
     cfa:	96 81       	ldd	r25, Z+6	; 0x06
     cfc:	27 81       	ldd	r18, Z+7	; 0x07
     cfe:	82 1b       	sub	r24, r18
     d00:	91 09       	sbc	r25, r1
     d02:	06 97       	sbiw	r24, 0x06	; 6
     d04:	74 f4       	brge	.+28     	; 0xd22 <__vector_13+0x146>
     d06:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	e0 5f       	subi	r30, 0xF0	; 240
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 81       	ld	r24, Z
     d12:	84 39       	cpi	r24, 0x94	; 148
     d14:	30 f4       	brcc	.+12     	; 0xd22 <__vector_13+0x146>
		{
			stepper._accellStep--;
     d16:	ed e2       	ldi	r30, 0x2D	; 45
     d18:	f5 e0       	ldi	r31, 0x05	; 5
     d1a:	85 85       	ldd	r24, Z+13	; 0x0d
     d1c:	81 50       	subi	r24, 0x01	; 1
     d1e:	85 87       	std	Z+13, r24	; 0x0d
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <__vector_13+0x168>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     d22:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <stepper+0x7>
     d26:	86 30       	cpi	r24, 0x06	; 6
     d28:	68 f0       	brcs	.+26     	; 0xd44 <__vector_13+0x168>
     d2a:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	e0 5f       	subi	r30, 0xF0	; 240
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	80 81       	ld	r24, Z
     d36:	81 34       	cpi	r24, 0x41	; 65
     d38:	28 f0       	brcs	.+10     	; 0xd44 <__vector_13+0x168>
		{
			stepper._accellStep++;
     d3a:	ed e2       	ldi	r30, 0x2D	; 45
     d3c:	f5 e0       	ldi	r31, 0x05	; 5
     d3e:	85 85       	ldd	r24, Z+13	; 0x0d
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     d44:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <stepper+0xd>
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	e0 5f       	subi	r30, 0xF0	; 240
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	80 81       	ld	r24, Z
     d50:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     d54:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	29 f1       	breq	.+74     	; 0xda6 <__vector_13+0x1ca>
	{
		if ((PINE & 0x08) == 0)
     d5c:	63 99       	sbic	0x0c, 3	; 12
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__vector_13+0x18c>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     d60:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <STEPPER_OFFSET>
     d64:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     d68:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	28 f0       	brcs	.+10     	; 0xd7a <__vector_13+0x19e>
     d70:	ed e2       	ldi	r30, 0x2D	; 45
     d72:	f5 e0       	ldi	r31, 0x05	; 5
     d74:	84 85       	ldd	r24, Z+12	; 0x0c
     d76:	81 50       	subi	r24, 0x01	; 1
     d78:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     d7a:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <stepper+0xc>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 f4       	brne	.+36     	; 0xda6 <__vector_13+0x1ca>
		{
			stepper._isInitiated = 1;
     d82:	ed e2       	ldi	r30, 0x2D	; 45
     d84:	f5 e0       	ldi	r31, 0x05	; 5
     d86:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     d88:	10 82       	st	Z, r1
			stepper.direction = 1;
     d8a:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     d8c:	13 82       	std	Z+3, r1	; 0x03
     d8e:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     d90:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     d92:	16 82       	std	Z+6, r1	; 0x06
     d94:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     d96:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     d98:	11 86       	std	Z+9, r1	; 0x09
     d9a:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     d9c:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     d9e:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     da0:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     da2:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     da4:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0b be       	out	0x3b, r0	; 59
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Test
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	f8 94       	cli
     de0:	e1 e6       	ldi	r30, 0x61	; 97
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	80 83       	st	Z, r24
     de8:	10 82       	st	Z, r1
     dea:	b1 d3       	rcall	.+1890   	; 0x154e <UART_Init>
     dec:	6b dd       	rcall	.-1322   	; 0x8c4 <GPIO_Init>
     dee:	34 d3       	rcall	.+1640   	; 0x1458 <TIMER_Init>
     df0:	3b de       	rcall	.-906    	; 0xa68 <PWM_Init>
     df2:	71 d9       	rcall	.-3358   	; 0xd6 <ADC_Init>
     df4:	57 de       	rcall	.-850    	; 0xaa4 <STEPPER_Init>
     df6:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <g_ADCCount+0x1>
     dfa:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <g_ADCCount>
     dfe:	84 e1       	ldi	r24, 0x14	; 20
     e00:	e1 ec       	ldi	r30, 0xC1	; 193
     e02:	f4 e0       	ldi	r31, 0x04	; 4
     e04:	df 01       	movw	r26, r30
     e06:	1d 92       	st	X+, r1
     e08:	8a 95       	dec	r24
     e0a:	e9 f7       	brne	.-6      	; 0xe06 <SYS_Init+0x2e>
     e0c:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <g_PauseRequest>
     e10:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <g_WDTimeout>
     e14:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <g_Timer+0x1>
     e18:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <g_Timer>
     e1c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_MissingRequest>
     e20:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_UnclassifiedRequest>
     e24:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <g_TimerLast+0x1>
     e28:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <g_TimerLast>
     e2c:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <HEAD+0x1>
     e30:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <HEAD>
     e34:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <TAIL+0x1>
     e38:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <TAIL>
     e3c:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <STAGE1+0x1>
     e40:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <STAGE1>
     e44:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <STAGE2+0x1>
     e48:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <STAGE2>
     e4c:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <FRONT+0x1>
     e50:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <FRONT>
     e54:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <N_1+0x1>
     e58:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <N_1>
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	44 e0       	ldi	r20, 0x04	; 4
     e60:	6f ef       	ldi	r22, 0xFF	; 255
     e62:	89 ee       	ldi	r24, 0xE9	; 233
     e64:	9d ef       	ldi	r25, 0xFD	; 253
     e66:	a8 dc       	rcall	.-1712   	; 0x7b8 <LL_ItemInit>
     e68:	c1 dc       	rcall	.-1662   	; 0x7ec <LL_ItemListInit>
     e6a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <HEAD+0x1>
     e6e:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <HEAD>
     e72:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <FRONT+0x1>
     e76:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <FRONT>
     e7a:	ca ef       	ldi	r28, 0xFA	; 250
     e7c:	08 ee       	ldi	r16, 0xE8	; 232
     e7e:	1d ef       	ldi	r17, 0xFD	; 253
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	44 e0       	ldi	r20, 0x04	; 4
     e84:	6c 2f       	mov	r22, r28
     e86:	c8 01       	movw	r24, r16
     e88:	97 dc       	rcall	.-1746   	; 0x7b8 <LL_ItemInit>
     e8a:	bc 01       	movw	r22, r24
     e8c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     e90:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     e94:	bf dc       	rcall	.-1666   	; 0x814 <LL_AddBack>
     e96:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <TAIL+0x1>
     e9a:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <TAIL>
     e9e:	01 50       	subi	r16, 0x01	; 1
     ea0:	11 09       	sbc	r17, r1
     ea2:	c1 50       	subi	r28, 0x01	; 1
     ea4:	cb 3c       	cpi	r28, 0xCB	; 203
     ea6:	61 f7       	brne	.-40     	; 0xe80 <SYS_Init+0xa8>
     ea8:	05 e0       	ldi	r16, 0x05	; 5
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	45 e0       	ldi	r20, 0x05	; 5
     eb0:	6a ef       	ldi	r22, 0xFA	; 250
     eb2:	88 ee       	ldi	r24, 0xE8	; 232
     eb4:	9d ef       	ldi	r25, 0xFD	; 253
     eb6:	80 dc       	rcall	.-1792   	; 0x7b8 <LL_ItemInit>
     eb8:	bc 01       	movw	r22, r24
     eba:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     ebe:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     ec2:	a8 dc       	rcall	.-1712   	; 0x814 <LL_AddBack>
     ec4:	01 50       	subi	r16, 0x01	; 1
     ec6:	11 09       	sbc	r17, r1
     ec8:	89 f7       	brne	.-30     	; 0xeac <SYS_Init+0xd4>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	44 e0       	ldi	r20, 0x04	; 4
     ece:	62 ed       	ldi	r22, 0xD2	; 210
     ed0:	88 e9       	ldi	r24, 0x98	; 152
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	71 dc       	rcall	.-1822   	; 0x7b8 <LL_ItemInit>
     ed6:	8a dc       	rcall	.-1772   	; 0x7ec <LL_ItemListInit>
     ed8:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
     edc:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
     ee0:	95 83       	std	Z+5, r25	; 0x05
     ee2:	84 83       	std	Z+4, r24	; 0x04
     ee4:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <N_1+0x1>
     ee8:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <N_1>
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	dd dc       	rcall	.-1606   	; 0x8ac <LL_UpdateTick>
     ef2:	86 e6       	ldi	r24, 0x66	; 102
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	43 d3       	rcall	.+1670   	; 0x157e <UART_SendString>
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <SYS_Pause>:
     f00:	3f 92       	push	r3
     f02:	4f 92       	push	r4
     f04:	5f 92       	push	r5
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	ca 5f       	subi	r28, 0xFA	; 250
     f28:	d1 09       	sbc	r29, r1
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	f8 2e       	mov	r15, r24
     f36:	e9 2e       	mov	r14, r25
     f38:	f8 94       	cli
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9e dd       	rcall	.-1220   	; 0xa7c <PWM>
     f40:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <FRONT>
     f44:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <FRONT+0x1>
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	8c e7       	ldi	r24, 0x7C	; 124
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	7c 01       	movw	r14, r24
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	3e d4       	rcall	.+2172   	; 0x17dc <sprintf>
     f60:	c7 01       	movw	r24, r14
     f62:	0d d3       	rcall	.+1562   	; 0x157e <UART_SendString>
     f64:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
     f68:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
     f6c:	a5 dc       	rcall	.-1718   	; 0x8b8 <LL_GetTick>
     f6e:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
     f72:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
     f7a:	3f 93       	push	r19
     f7c:	2f 93       	push	r18
     f7e:	87 e9       	ldi	r24, 0x97	; 151
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	ff 92       	push	r15
     f88:	ef 92       	push	r14
     f8a:	28 d4       	rcall	.+2128   	; 0x17dc <sprintf>
     f8c:	c7 01       	movw	r24, r14
     f8e:	f7 d2       	rcall	.+1518   	; 0x157e <UART_SendString>
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	e1 2c       	mov	r14, r1
     f9c:	f1 2c       	mov	r15, r1
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f6 eb       	ldi	r31, 0xB6	; 182
     fa2:	af 2e       	mov	r10, r31
     fa4:	f1 e0       	ldi	r31, 0x01	; 1
     fa6:	bf 2e       	mov	r11, r31
     fa8:	f0 2d       	mov	r31, r0
     faa:	6e 01       	movw	r12, r28
     fac:	f7 e9       	ldi	r31, 0x97	; 151
     fae:	cf 0e       	add	r12, r31
     fb0:	d1 1c       	adc	r13, r1
     fb2:	2d c0       	rjmp	.+90     	; 0x100e <SYS_Pause+0x10e>
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	e8 1a       	sub	r14, r24
     fb8:	f8 0a       	sbc	r15, r24
     fba:	c8 01       	movw	r24, r16
     fbc:	7d dc       	rcall	.-1798   	; 0x8b8 <LL_GetTick>
     fbe:	68 2e       	mov	r6, r24
     fc0:	59 2e       	mov	r5, r25
     fc2:	c8 01       	movw	r24, r16
     fc4:	6e dc       	rcall	.-1828   	; 0x8a2 <LL_GetStatus>
     fc6:	78 2e       	mov	r7, r24
     fc8:	c8 01       	movw	r24, r16
     fca:	46 dc       	rcall	.-1908   	; 0x858 <LL_GetClass>
     fcc:	88 2e       	mov	r8, r24
     fce:	c8 01       	movw	r24, r16
     fd0:	4e dc       	rcall	.-1892   	; 0x86e <LL_GetMag>
     fd2:	98 2e       	mov	r9, r24
     fd4:	c8 01       	movw	r24, r16
     fd6:	45 dc       	rcall	.-1910   	; 0x862 <LL_GetRefl>
     fd8:	5f 92       	push	r5
     fda:	6f 92       	push	r6
     fdc:	1f 92       	push	r1
     fde:	7f 92       	push	r7
     fe0:	1f 92       	push	r1
     fe2:	8f 92       	push	r8
     fe4:	1f 92       	push	r1
     fe6:	9f 92       	push	r9
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	ff 92       	push	r15
     fee:	ef 92       	push	r14
     ff0:	bf 92       	push	r11
     ff2:	af 92       	push	r10
     ff4:	df 92       	push	r13
     ff6:	cf 92       	push	r12
     ff8:	f1 d3       	rcall	.+2018   	; 0x17dc <sprintf>
     ffa:	c6 01       	movw	r24, r12
     ffc:	c0 d2       	rcall	.+1408   	; 0x157e <UART_SendString>
     ffe:	c8 01       	movw	r24, r16
    1000:	05 dc       	rcall	.-2038   	; 0x80c <LL_Next>
    1002:	8c 01       	movw	r16, r24
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	c8 01       	movw	r24, r16
    1010:	23 dc       	rcall	.-1978   	; 0x858 <LL_GetClass>
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	79 f6       	brne	.-98     	; 0xfb4 <SYS_Pause+0xb4>
    1016:	0f 2e       	mov	r0, r31
    1018:	f0 ee       	ldi	r31, 0xE0	; 224
    101a:	cf 2e       	mov	r12, r31
    101c:	f4 e0       	ldi	r31, 0x04	; 4
    101e:	df 2e       	mov	r13, r31
    1020:	f0 2d       	mov	r31, r0
    1022:	00 e0       	ldi	r16, 0x00	; 0
    1024:	10 e0       	ldi	r17, 0x00	; 0
    1026:	0f 2e       	mov	r0, r31
    1028:	f4 ef       	ldi	r31, 0xF4	; 244
    102a:	af 2e       	mov	r10, r31
    102c:	f1 e0       	ldi	r31, 0x01	; 1
    102e:	bf 2e       	mov	r11, r31
    1030:	f0 2d       	mov	r31, r0
    1032:	7e 01       	movw	r14, r28
    1034:	f7 e9       	ldi	r31, 0x97	; 151
    1036:	ef 0e       	add	r14, r31
    1038:	f1 1c       	adc	r15, r1
    103a:	f6 01       	movw	r30, r12
    103c:	80 85       	ldd	r24, Z+8	; 0x08
    103e:	1f 92       	push	r1
    1040:	8f 93       	push	r24
    1042:	1f 93       	push	r17
    1044:	0f 93       	push	r16
    1046:	bf 92       	push	r11
    1048:	af 92       	push	r10
    104a:	ff 92       	push	r15
    104c:	ef 92       	push	r14
    104e:	c6 d3       	rcall	.+1932   	; 0x17dc <sprintf>
    1050:	c7 01       	movw	r24, r14
    1052:	95 d2       	rcall	.+1322   	; 0x157e <UART_SendString>
    1054:	0f 5f       	subi	r16, 0xFF	; 255
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	f9 e0       	ldi	r31, 0x09	; 9
    105a:	cf 0e       	add	r12, r31
    105c:	d1 1c       	adc	r13, r1
    105e:	0f b6       	in	r0, 0x3f	; 63
    1060:	f8 94       	cli
    1062:	de bf       	out	0x3e, r29	; 62
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	cd bf       	out	0x3d, r28	; 61
    1068:	07 30       	cpi	r16, 0x07	; 7
    106a:	11 05       	cpc	r17, r1
    106c:	31 f7       	brne	.-52     	; 0x103a <SYS_Pause+0x13a>
    106e:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <STAGE2>
    1072:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <STAGE2+0x1>
    1076:	f5 db       	rcall	.-2070   	; 0x862 <LL_GetRefl>
    1078:	48 2e       	mov	r4, r24
    107a:	39 2e       	mov	r3, r25
    107c:	60 90 2a 05 	lds	r6, 0x052A	; 0x80052a <STAGE2>
    1080:	50 90 2b 05 	lds	r5, 0x052B	; 0x80052b <STAGE2+0x1>
    1084:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <STAGE1>
    1088:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <STAGE1+0x1>
    108c:	f0 db       	rcall	.-2080   	; 0x86e <LL_GetMag>
    108e:	78 2e       	mov	r7, r24
    1090:	90 90 dc 04 	lds	r9, 0x04DC	; 0x8004dc <STAGE1>
    1094:	80 90 dd 04 	lds	r8, 0x04DD	; 0x8004dd <STAGE1+0x1>
    1098:	00 91 bf 04 	lds	r16, 0x04BF	; 0x8004bf <TAIL>
    109c:	10 91 c0 04 	lds	r17, 0x04C0	; 0x8004c0 <TAIL+0x1>
    10a0:	f8 01       	movw	r30, r16
    10a2:	b2 80       	ldd	r11, Z+2	; 0x02
    10a4:	a3 80       	ldd	r10, Z+3	; 0x03
    10a6:	d0 90 bc 04 	lds	r13, 0x04BC	; 0x8004bc <FRONT>
    10aa:	c0 90 bd 04 	lds	r12, 0x04BD	; 0x8004bd <FRONT+0x1>
    10ae:	f0 90 ba 04 	lds	r15, 0x04BA	; 0x8004ba <HEAD>
    10b2:	e0 90 bb 04 	lds	r14, 0x04BB	; 0x8004bb <HEAD+0x1>
    10b6:	8f 2d       	mov	r24, r15
    10b8:	9e 2d       	mov	r25, r14
    10ba:	bd db       	rcall	.-2182   	; 0x836 <LL_Size>
    10bc:	3f 92       	push	r3
    10be:	4f 92       	push	r4
    10c0:	5f 92       	push	r5
    10c2:	6f 92       	push	r6
    10c4:	1f 92       	push	r1
    10c6:	7f 92       	push	r7
    10c8:	8f 92       	push	r8
    10ca:	9f 92       	push	r9
    10cc:	af 92       	push	r10
    10ce:	bf 92       	push	r11
    10d0:	cf 92       	push	r12
    10d2:	df 92       	push	r13
    10d4:	1f 93       	push	r17
    10d6:	0f 93       	push	r16
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	1f 92       	push	r1
    10de:	8f 93       	push	r24
    10e0:	8b e0       	ldi	r24, 0x0B	; 11
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	8e 01       	movw	r16, r28
    10ea:	0b 59       	subi	r16, 0x9B	; 155
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	1f 93       	push	r17
    10f0:	0f 93       	push	r16
    10f2:	74 d3       	rcall	.+1768   	; 0x17dc <sprintf>
    10f4:	c8 01       	movw	r24, r16
    10f6:	43 d2       	rcall	.+1158   	; 0x157e <UART_SendString>
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	89 b1       	in	r24, 0x09	; 9
    1104:	83 70       	andi	r24, 0x03	; 3
    1106:	e9 f7       	brne	.-6      	; 0x1102 <SYS_Pause+0x202>
    1108:	84 e2       	ldi	r24, 0x24	; 36
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	38 d2       	rcall	.+1136   	; 0x157e <UART_SendString>
    110e:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <g_PauseRequest>
    1112:	80 e8       	ldi	r24, 0x80	; 128
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b2 dc       	rcall	.-1692   	; 0xa7c <PWM>
    1118:	78 94       	sei
    111a:	c6 50       	subi	r28, 0x06	; 6
    111c:	df 4f       	sbci	r29, 0xFF	; 255
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	7f 90       	pop	r7
    1142:	6f 90       	pop	r6
    1144:	5f 90       	pop	r5
    1146:	4f 90       	pop	r4
    1148:	3f 90       	pop	r3
    114a:	08 95       	ret

0000114c <SYS_Rampdown>:
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	ca 56       	subi	r28, 0x6A	; 106
    115c:	d1 09       	sbc	r29, r1
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	fe 01       	movw	r30, r28
    116a:	31 96       	adiw	r30, 0x01	; 1
    116c:	86 e0       	ldi	r24, 0x06	; 6
    116e:	df 01       	movw	r26, r30
    1170:	1d 92       	st	X+, r1
    1172:	8a 95       	dec	r24
    1174:	e9 f7       	brne	.-6      	; 0x1170 <SYS_Rampdown+0x24>
    1176:	00 91 bc 04 	lds	r16, 0x04BC	; 0x8004bc <FRONT>
    117a:	10 91 bd 04 	lds	r17, 0x04BD	; 0x8004bd <FRONT+0x1>
    117e:	f8 94       	cli
    1180:	1b b8       	out	0x0b, r1	; 11
    1182:	18 b8       	out	0x08, r1	; 8
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	79 dc       	rcall	.-1806   	; 0xa7c <PWM>
    118a:	81 e9       	ldi	r24, 0x91	; 145
    118c:	92 e0       	ldi	r25, 0x02	; 2
    118e:	f7 d1       	rcall	.+1006   	; 0x157e <UART_SendString>
    1190:	f1 2c       	mov	r15, r1
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <SYS_Rampdown+0x66>
    1194:	f3 94       	inc	r15
    1196:	c8 01       	movw	r24, r16
    1198:	5f db       	rcall	.-2370   	; 0x858 <LL_GetClass>
    119a:	e1 e0       	ldi	r30, 0x01	; 1
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	ec 0f       	add	r30, r28
    11a0:	fd 1f       	adc	r31, r29
    11a2:	e8 0f       	add	r30, r24
    11a4:	f1 1d       	adc	r31, r1
    11a6:	80 81       	ld	r24, Z
    11a8:	8f 5f       	subi	r24, 0xFF	; 255
    11aa:	80 83       	st	Z, r24
    11ac:	c8 01       	movw	r24, r16
    11ae:	2e db       	rcall	.-2468   	; 0x80c <LL_Next>
    11b0:	8c 01       	movw	r16, r24
    11b2:	c8 01       	movw	r24, r16
    11b4:	76 db       	rcall	.-2324   	; 0x8a2 <LL_GetStatus>
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	69 f3       	breq	.-38     	; 0x1194 <SYS_Rampdown+0x48>
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	1f 92       	push	r1
    11be:	8f 93       	push	r24
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	1f 92       	push	r1
    11c4:	8f 93       	push	r24
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	1f 92       	push	r1
    11ca:	8f 93       	push	r24
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	1f 92       	push	r1
    11d0:	8f 93       	push	r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	1f 92       	push	r1
    11d6:	8f 93       	push	r24
    11d8:	1f 92       	push	r1
    11da:	ff 92       	push	r15
    11dc:	86 eb       	ldi	r24, 0xB6	; 182
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	9f 93       	push	r25
    11e2:	8f 93       	push	r24
    11e4:	8e 01       	movw	r16, r28
    11e6:	09 5f       	subi	r16, 0xF9	; 249
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	1f 93       	push	r17
    11ec:	0f 93       	push	r16
    11ee:	f6 d2       	rcall	.+1516   	; 0x17dc <sprintf>
    11f0:	c8 01       	movw	r24, r16
    11f2:	c5 d1       	rcall	.+906    	; 0x157e <UART_SendString>
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	c6 59       	subi	r28, 0x96	; 150
    1200:	df 4f       	sbci	r29, 0xFF	; 255
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	08 95       	ret

00001218 <SYS_Unclassified>:
void SYS_Unclassified()
{
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	e2 97       	sbiw	r28, 0x32	; 50
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
	cli();
    1230:	f8 94       	cli
	PWM(0);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	22 dc       	rcall	.-1980   	; 0xa7c <PWM>
	UART_SendString("\r\n\r\n\r\nUNCLASSIFIED ITEM DETECTED\r\n\r\n\r\n");
    1238:	8c e9       	ldi	r24, 0x9C	; 156
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	a0 d1       	rcall	.+832    	; 0x157e <UART_SendString>
	char buffer[50];
	sprintf(buffer, "Item statistics:\r\nReflectance: %u, Magnetic: %u\r\n", LL_GetRefl(HEAD->prev), LL_GetMag(HEAD->prev));
    123e:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
    1242:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
    1246:	84 81       	ldd	r24, Z+4	; 0x04
    1248:	95 81       	ldd	r25, Z+5	; 0x05
    124a:	11 db       	rcall	.-2526   	; 0x86e <LL_GetMag>
    124c:	18 2f       	mov	r17, r24
    124e:	e0 91 ba 04 	lds	r30, 0x04BA	; 0x8004ba <HEAD>
    1252:	f0 91 bb 04 	lds	r31, 0x04BB	; 0x8004bb <HEAD+0x1>
    1256:	84 81       	ldd	r24, Z+4	; 0x04
    1258:	95 81       	ldd	r25, Z+5	; 0x05
    125a:	03 db       	rcall	.-2554   	; 0x862 <LL_GetRefl>
    125c:	1f 92       	push	r1
    125e:	1f 93       	push	r17
    1260:	9f 93       	push	r25
    1262:	8f 93       	push	r24
    1264:	83 ec       	ldi	r24, 0xC3	; 195
    1266:	93 e0       	ldi	r25, 0x03	; 3
    1268:	9f 93       	push	r25
    126a:	8f 93       	push	r24
    126c:	8e 01       	movw	r16, r28
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
    1272:	1f 93       	push	r17
    1274:	0f 93       	push	r16
	UART_SendString(buffer);
    1276:	b2 d2       	rcall	.+1380   	; 0x17dc <sprintf>
    1278:	c8 01       	movw	r24, r16
    127a:	81 d1       	rcall	.+770    	; 0x157e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nPlease remove item and push both buttons to resume\r\n\r\n\r\n");
    127c:	85 ef       	ldi	r24, 0xF5	; 245
    127e:	93 e0       	ldi	r25, 0x03	; 3
    1280:	7e d1       	rcall	.+764    	; 0x157e <UART_SendString>
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    128c:	89 b1       	in	r24, 0x09	; 9
    128e:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    1290:	e9 f7       	brne	.-6      	; 0x128c <SYS_Unclassified+0x74>
    1292:	84 e2       	ldi	r24, 0x24	; 36
    1294:	91 e0       	ldi	r25, 0x01	; 1
    1296:	73 d1       	rcall	.+742    	; 0x157e <UART_SendString>
			PWM(0x80);
    1298:	80 e8       	ldi	r24, 0x80	; 128
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	ef db       	rcall	.-2082   	; 0xa7c <PWM>
    129e:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <g_UnclassifiedRequest>
			g_UnclassifiedRequest = 0;
    12a2:	78 94       	sei
			sei();
    12a4:	e2 96       	adiw	r28, 0x32	; 50
			break;
		}
	}
	return;
}
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	08 95       	ret

000012ba <SYS_Missing>:
    12ba:	0f 93       	push	r16
void SYS_Missing()
{
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	c4 56       	subi	r28, 0x64	; 100
    12c8:	d1 09       	sbc	r29, r1
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
	cli();
    12d4:	f8 94       	cli
	PWM(0);
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	d0 db       	rcall	.-2144   	; 0xa7c <PWM>
	char buffer[100];
	extern list* HEAD;
	extern list* N_1;
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    12dc:	84 e3       	ldi	r24, 0x34	; 52
    12de:	94 e0       	ldi	r25, 0x04	; 4
    12e0:	4e d1       	rcall	.+668    	; 0x157e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    12e2:	84 e3       	ldi	r24, 0x34	; 52
    12e4:	94 e0       	ldi	r25, 0x04	; 4
    12e6:	4b d1       	rcall	.+662    	; 0x157e <UART_SendString>
	UART_SendString("\r\n\r\n\r\nITEM MISSING\r\n\r\n\r\n");
    12e8:	84 e3       	ldi	r24, 0x34	; 52
    12ea:	94 e0       	ldi	r25, 0x04	; 4
    12ec:	48 d1       	rcall	.+656    	; 0x157e <UART_SendString>
    12ee:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <N_1>
	sprintf(buffer, "System Tick: %u, Last Tick: %u, Head Tick: %u Prev Tick: %u\r\n\r\n\r\n",g_Timer, g_TimerLast, LL_GetTick(HEAD), LL_GetTick(N_1));
    12f2:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <N_1+0x1>
    12f6:	e0 da       	rcall	.-2624   	; 0x8b8 <LL_GetTick>
    12f8:	18 2f       	mov	r17, r24
    12fa:	09 2f       	mov	r16, r25
    12fc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <HEAD>
    1300:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <HEAD+0x1>
    1304:	d9 da       	rcall	.-2638   	; 0x8b8 <LL_GetTick>
    1306:	40 91 28 05 	lds	r20, 0x0528	; 0x800528 <g_TimerLast>
    130a:	50 91 29 05 	lds	r21, 0x0529	; 0x800529 <g_TimerLast+0x1>
    130e:	20 91 d9 04 	lds	r18, 0x04D9	; 0x8004d9 <g_Timer>
    1312:	30 91 da 04 	lds	r19, 0x04DA	; 0x8004da <g_Timer+0x1>
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	9f 93       	push	r25
    131c:	8f 93       	push	r24
    131e:	5f 93       	push	r21
    1320:	4f 93       	push	r20
    1322:	3f 93       	push	r19
    1324:	2f 93       	push	r18
    1326:	8d e4       	ldi	r24, 0x4D	; 77
    1328:	94 e0       	ldi	r25, 0x04	; 4
    132a:	9f 93       	push	r25
    132c:	8f 93       	push	r24
    132e:	8e 01       	movw	r16, r28
    1330:	0f 5f       	subi	r16, 0xFF	; 255
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	1f 93       	push	r17
    1336:	0f 93       	push	r16
    1338:	51 d2       	rcall	.+1186   	; 0x17dc <sprintf>
	UART_SendString(buffer);	
    133a:	c8 01       	movw	r24, r16
    133c:	20 d1       	rcall	.+576    	; 0x157e <UART_SendString>
    133e:	8f e8       	ldi	r24, 0x8F	; 143
	UART_SendString("Press both buttons to resume...\r\n");
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	1d d1       	rcall	.+570    	; 0x157e <UART_SendString>
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    1350:	83 70       	andi	r24, 0x03	; 3
    1352:	e9 f7       	brne	.-6      	; 0x134e <SYS_Missing+0x94>
    1354:	84 e2       	ldi	r24, 0x24	; 36
		{
			UART_SendString("Starting System!\r\n");
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	12 d1       	rcall	.+548    	; 0x157e <UART_SendString>
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    135e:	8e db       	rcall	.-2276   	; 0xa7c <PWM>
    1360:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <g_MissingRequest>
    1364:	78 94       	sei
			g_MissingRequest = 0;
    1366:	cc 59       	subi	r28, 0x9C	; 156
    1368:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    136a:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <__vector_17>:
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	0b b6       	in	r0, 0x3b	; 59
    138a:	0f 92       	push	r0
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	2f 93       	push	r18
    1396:	3f 93       	push	r19
    1398:	4f 93       	push	r20
    139a:	5f 93       	push	r21
    139c:	6f 93       	push	r22
    139e:	7f 93       	push	r23
    13a0:	8f 93       	push	r24
    13a2:	9f 93       	push	r25
    13a4:	af 93       	push	r26
    13a6:	bf 93       	push	r27
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    13b0:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_timer_tick>
    13b4:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	90 93 b9 04 	sts	0x04B9, r25	; 0x8004b9 <_timer_tick+0x1>
    13be:	80 93 b8 04 	sts	0x04B8, r24	; 0x8004b8 <_timer_tick>
    13c2:	c0 ee       	ldi	r28, 0xE0	; 224
    13c4:	d4 e0       	ldi	r29, 0x04	; 4
    13c6:	0f 2e       	mov	r0, r31
    13c8:	f8 e2       	ldi	r31, 0x28	; 40
    13ca:	ef 2e       	mov	r14, r31
    13cc:	f5 e0       	ldi	r31, 0x05	; 5
    13ce:	ff 2e       	mov	r15, r31
    13d0:	f0 2d       	mov	r31, r0
    13d2:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    13d4:	ec 81       	ldd	r30, Y+4	; 0x04
    13d6:	fd 81       	ldd	r31, Y+5	; 0x05
    13d8:	30 97       	sbiw	r30, 0x00	; 0
    13da:	09 f1       	breq	.+66     	; 0x141e <__vector_17+0xa0>
    13dc:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_timer_tick>
    13e0:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    13e4:	28 81       	ld	r18, Y
    13e6:	39 81       	ldd	r19, Y+1	; 0x01
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	c1 f4       	brne	.+48     	; 0x141e <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    13ee:	88 85       	ldd	r24, Y+8	; 0x08
    13f0:	82 30       	cpi	r24, 0x02	; 2
    13f2:	19 f4       	brne	.+6      	; 0x13fa <__vector_17+0x7c>
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    13fa:	d8 01       	movw	r26, r16
    13fc:	12 96       	adiw	r26, 0x02	; 2
    13fe:	8d 91       	ld	r24, X+
    1400:	9c 91       	ld	r25, X
    1402:	13 97       	sbiw	r26, 0x03	; 3
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	41 f0       	breq	.+16     	; 0x1418 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1408:	2d 91       	ld	r18, X+
    140a:	3c 91       	ld	r19, X
    140c:	11 97       	sbiw	r26, 0x01	; 1
    140e:	82 0f       	add	r24, r18
    1410:	93 1f       	adc	r25, r19
    1412:	8d 93       	st	X+, r24
    1414:	9c 93       	st	X, r25
    1416:	03 c0       	rjmp	.+6      	; 0x141e <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1418:	f8 01       	movw	r30, r16
    141a:	15 82       	std	Z+5, r1	; 0x05
    141c:	14 82       	std	Z+4, r1	; 0x04
    141e:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    1420:	ce 15       	cp	r28, r14
    1422:	df 05       	cpc	r29, r15
    1424:	b1 f6       	brne	.-84     	; 0x13d2 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1426:	ff 91       	pop	r31
    1428:	ef 91       	pop	r30
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	0f 90       	pop	r0
    144c:	0b be       	out	0x3b, r0	; 59
    144e:	0f 90       	pop	r0
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	0f 90       	pop	r0
    1454:	1f 90       	pop	r1
    1456:	18 95       	reti

00001458 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1458:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    145c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    1460:	88 e4       	ldi	r24, 0x48	; 72
    1462:	98 e0       	ldi	r25, 0x08	; 8
    1464:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1468:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    146c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1470:	89 e0       	ldi	r24, 0x09	; 9
    1472:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    147c:	88 e4       	ldi	r24, 0x48	; 72
    147e:	e0 ee       	ldi	r30, 0xE0	; 224
    1480:	f4 e0       	ldi	r31, 0x04	; 4
    1482:	df 01       	movw	r26, r30
    1484:	1d 92       	st	X+, r1
    1486:	8a 95       	dec	r24
    1488:	e9 f7       	brne	.-6      	; 0x1484 <TIMER_Init+0x2c>
    148a:	08 95       	ret

0000148c <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1496:	60 91 e4 04 	lds	r22, 0x04E4	; 0x8004e4 <_timer+0x4>
    149a:	70 91 e5 04 	lds	r23, 0x04E5	; 0x8004e5 <_timer+0x5>
    149e:	67 2b       	or	r22, r23
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <TIMER_Create+0x18>
    14a2:	49 c0       	rjmp	.+146    	; 0x1536 <TIMER_Create+0xaa>
    14a4:	e0 ee       	ldi	r30, 0xE0	; 224
    14a6:	f4 e0       	ldi	r31, 0x04	; 4
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    14a8:	a1 e0       	ldi	r26, 0x01	; 1
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    14ac:	c5 85       	ldd	r28, Z+13	; 0x0d
    14ae:	d6 85       	ldd	r29, Z+14	; 0x0e
    14b0:	cd 2b       	or	r28, r29
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <TIMER_Create+0x2a>
    14b4:	42 c0       	rjmp	.+132    	; 0x153a <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	39 96       	adiw	r30, 0x09	; 9
    14ba:	a8 30       	cpi	r26, 0x08	; 8
    14bc:	b1 05       	cpc	r27, r1
    14be:	b1 f7       	brne	.-20     	; 0x14ac <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	3f c0       	rjmp	.+126    	; 0x1544 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    14c6:	fd 01       	movw	r30, r26
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	ee 0f       	add	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	ea 0f       	add	r30, r26
    14d6:	fb 1f       	adc	r31, r27
    14d8:	e0 52       	subi	r30, 0x20	; 32
    14da:	fb 4f       	sbci	r31, 0xFB	; 251
    14dc:	93 83       	std	Z+3, r25	; 0x03
    14de:	82 83       	std	Z+2, r24	; 0x02
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    14e2:	fd 01       	movw	r30, r26
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	ee 0f       	add	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	ea 0f       	add	r30, r26
    14f2:	fb 1f       	adc	r31, r27
    14f4:	e0 52       	subi	r30, 0x20	; 32
    14f6:	fb 4f       	sbci	r31, 0xFB	; 251
    14f8:	13 82       	std	Z+3, r1	; 0x03
    14fa:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    14fc:	fd 01       	movw	r30, r26
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	ee 0f       	add	r30, r30
    1504:	ff 1f       	adc	r31, r31
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	ea 0f       	add	r30, r26
    150c:	fb 1f       	adc	r31, r27
    150e:	e0 52       	subi	r30, 0x20	; 32
    1510:	fb 4f       	sbci	r31, 0xFB	; 251
    1512:	55 83       	std	Z+5, r21	; 0x05
    1514:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1516:	37 83       	std	Z+7, r19	; 0x07
    1518:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    151a:	20 91 b8 04 	lds	r18, 0x04B8	; 0x8004b8 <_timer_tick>
    151e:	30 91 b9 04 	lds	r19, 0x04B9	; 0x8004b9 <_timer_tick+0x1>
    1522:	82 0f       	add	r24, r18
    1524:	93 1f       	adc	r25, r19
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
			_timer[i].state = READY;
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    152e:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    1530:	8a 2f       	mov	r24, r26
    1532:	9b 2f       	mov	r25, r27
    1534:	07 c0       	rjmp	.+14     	; 0x1544 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1536:	a0 e0       	ldi	r26, 0x00	; 0
    1538:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    153a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    153c:	f8 94       	cli
		{
			if (periodic != 0) 
    153e:	01 2b       	or	r16, r17
    1540:	11 f6       	brne	.-124    	; 0x14c6 <TIMER_Create+0x3a>
    1542:	cf cf       	rjmp	.-98     	; 0x14e2 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    154e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1552:	83 e3       	ldi	r24, 0x33	; 51
    1554:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1558:	e9 ec       	ldi	r30, 0xC9	; 201
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	88 61       	ori	r24, 0x18	; 24
    1560:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1562:	ea ec       	ldi	r30, 0xCA	; 202
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	86 60       	ori	r24, 0x06	; 6
    156a:	80 83       	st	Z, r24
    156c:	08 95       	ret

0000156e <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    156e:	e8 ec       	ldi	r30, 0xC8	; 200
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	90 81       	ld	r25, Z
    1574:	95 ff       	sbrs	r25, 5
    1576:	fd cf       	rjmp	.-6      	; 0x1572 <UART_SendChar+0x4>
	UDR1 = c;
    1578:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    157c:	08 95       	ret

0000157e <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1584:	88 81       	ld	r24, Y
    1586:	88 23       	and	r24, r24
    1588:	29 f0       	breq	.+10     	; 0x1594 <UART_SendString+0x16>
    158a:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    158c:	f0 df       	rcall	.-32     	; 0x156e <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    158e:	89 91       	ld	r24, Y+
    1590:	81 11       	cpse	r24, r1
    1592:	fc cf       	rjmp	.-8      	; 0x158c <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <malloc>:
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	91 05       	cpc	r25, r1
    15a6:	10 f4       	brcc	.+4      	; 0x15ac <malloc+0x12>
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <__flp>
    15b0:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <__flp+0x1>
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	19 f1       	breq	.+70     	; 0x1606 <malloc+0x6c>
    15c0:	40 81       	ld	r20, Z
    15c2:	51 81       	ldd	r21, Z+1	; 0x01
    15c4:	02 81       	ldd	r16, Z+2	; 0x02
    15c6:	13 81       	ldd	r17, Z+3	; 0x03
    15c8:	48 17       	cp	r20, r24
    15ca:	59 07       	cpc	r21, r25
    15cc:	c8 f0       	brcs	.+50     	; 0x1600 <malloc+0x66>
    15ce:	84 17       	cp	r24, r20
    15d0:	95 07       	cpc	r25, r21
    15d2:	69 f4       	brne	.+26     	; 0x15ee <malloc+0x54>
    15d4:	10 97       	sbiw	r26, 0x00	; 0
    15d6:	31 f0       	breq	.+12     	; 0x15e4 <malloc+0x4a>
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	0c 93       	st	X, r16
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	1c 93       	st	X, r17
    15e2:	27 c0       	rjmp	.+78     	; 0x1632 <malloc+0x98>
    15e4:	00 93 40 05 	sts	0x0540, r16	; 0x800540 <__flp>
    15e8:	10 93 41 05 	sts	0x0541, r17	; 0x800541 <__flp+0x1>
    15ec:	22 c0       	rjmp	.+68     	; 0x1632 <malloc+0x98>
    15ee:	21 15       	cp	r18, r1
    15f0:	31 05       	cpc	r19, r1
    15f2:	19 f0       	breq	.+6      	; 0x15fa <malloc+0x60>
    15f4:	42 17       	cp	r20, r18
    15f6:	53 07       	cpc	r21, r19
    15f8:	18 f4       	brcc	.+6      	; 0x1600 <malloc+0x66>
    15fa:	9a 01       	movw	r18, r20
    15fc:	bd 01       	movw	r22, r26
    15fe:	ef 01       	movw	r28, r30
    1600:	df 01       	movw	r26, r30
    1602:	f8 01       	movw	r30, r16
    1604:	db cf       	rjmp	.-74     	; 0x15bc <malloc+0x22>
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	f9 f0       	breq	.+62     	; 0x164a <malloc+0xb0>
    160c:	28 1b       	sub	r18, r24
    160e:	39 0b       	sbc	r19, r25
    1610:	24 30       	cpi	r18, 0x04	; 4
    1612:	31 05       	cpc	r19, r1
    1614:	80 f4       	brcc	.+32     	; 0x1636 <malloc+0x9c>
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	9b 81       	ldd	r25, Y+3	; 0x03
    161a:	61 15       	cp	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	21 f0       	breq	.+8      	; 0x1628 <malloc+0x8e>
    1620:	fb 01       	movw	r30, r22
    1622:	93 83       	std	Z+3, r25	; 0x03
    1624:	82 83       	std	Z+2, r24	; 0x02
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <malloc+0x96>
    1628:	90 93 41 05 	sts	0x0541, r25	; 0x800541 <__flp+0x1>
    162c:	80 93 40 05 	sts	0x0540, r24	; 0x800540 <__flp>
    1630:	fe 01       	movw	r30, r28
    1632:	32 96       	adiw	r30, 0x02	; 2
    1634:	44 c0       	rjmp	.+136    	; 0x16be <malloc+0x124>
    1636:	fe 01       	movw	r30, r28
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	81 93       	st	Z+, r24
    163e:	91 93       	st	Z+, r25
    1640:	22 50       	subi	r18, 0x02	; 2
    1642:	31 09       	sbc	r19, r1
    1644:	39 83       	std	Y+1, r19	; 0x01
    1646:	28 83       	st	Y, r18
    1648:	3a c0       	rjmp	.+116    	; 0x16be <malloc+0x124>
    164a:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    164e:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    1652:	23 2b       	or	r18, r19
    1654:	41 f4       	brne	.+16     	; 0x1666 <malloc+0xcc>
    1656:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    165a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    165e:	30 93 3f 05 	sts	0x053F, r19	; 0x80053f <__brkval+0x1>
    1662:	20 93 3e 05 	sts	0x053E, r18	; 0x80053e <__brkval>
    1666:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    166a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    166e:	21 15       	cp	r18, r1
    1670:	31 05       	cpc	r19, r1
    1672:	41 f4       	brne	.+16     	; 0x1684 <malloc+0xea>
    1674:	2d b7       	in	r18, 0x3d	; 61
    1676:	3e b7       	in	r19, 0x3e	; 62
    1678:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    167c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1680:	24 1b       	sub	r18, r20
    1682:	35 0b       	sbc	r19, r21
    1684:	e0 91 3e 05 	lds	r30, 0x053E	; 0x80053e <__brkval>
    1688:	f0 91 3f 05 	lds	r31, 0x053F	; 0x80053f <__brkval+0x1>
    168c:	e2 17       	cp	r30, r18
    168e:	f3 07       	cpc	r31, r19
    1690:	a0 f4       	brcc	.+40     	; 0x16ba <malloc+0x120>
    1692:	2e 1b       	sub	r18, r30
    1694:	3f 0b       	sbc	r19, r31
    1696:	28 17       	cp	r18, r24
    1698:	39 07       	cpc	r19, r25
    169a:	78 f0       	brcs	.+30     	; 0x16ba <malloc+0x120>
    169c:	ac 01       	movw	r20, r24
    169e:	4e 5f       	subi	r20, 0xFE	; 254
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	24 17       	cp	r18, r20
    16a4:	35 07       	cpc	r19, r21
    16a6:	48 f0       	brcs	.+18     	; 0x16ba <malloc+0x120>
    16a8:	4e 0f       	add	r20, r30
    16aa:	5f 1f       	adc	r21, r31
    16ac:	50 93 3f 05 	sts	0x053F, r21	; 0x80053f <__brkval+0x1>
    16b0:	40 93 3e 05 	sts	0x053E, r20	; 0x80053e <__brkval>
    16b4:	81 93       	st	Z+, r24
    16b6:	91 93       	st	Z+, r25
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <malloc+0x124>
    16ba:	e0 e0       	ldi	r30, 0x00	; 0
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	cf 01       	movw	r24, r30
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	08 95       	ret

000016ca <free>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <free+0xa>
    16d2:	81 c0       	rjmp	.+258    	; 0x17d6 <free+0x10c>
    16d4:	fc 01       	movw	r30, r24
    16d6:	32 97       	sbiw	r30, 0x02	; 2
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	12 82       	std	Z+2, r1	; 0x02
    16dc:	a0 91 40 05 	lds	r26, 0x0540	; 0x800540 <__flp>
    16e0:	b0 91 41 05 	lds	r27, 0x0541	; 0x800541 <__flp+0x1>
    16e4:	10 97       	sbiw	r26, 0x00	; 0
    16e6:	81 f4       	brne	.+32     	; 0x1708 <free+0x3e>
    16e8:	20 81       	ld	r18, Z
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    16f4:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	51 f5       	brne	.+84     	; 0x1752 <free+0x88>
    16fe:	f0 93 3f 05 	sts	0x053F, r31	; 0x80053f <__brkval+0x1>
    1702:	e0 93 3e 05 	sts	0x053E, r30	; 0x80053e <__brkval>
    1706:	67 c0       	rjmp	.+206    	; 0x17d6 <free+0x10c>
    1708:	ed 01       	movw	r28, r26
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	ce 17       	cp	r28, r30
    1710:	df 07       	cpc	r29, r31
    1712:	40 f4       	brcc	.+16     	; 0x1724 <free+0x5a>
    1714:	4a 81       	ldd	r20, Y+2	; 0x02
    1716:	5b 81       	ldd	r21, Y+3	; 0x03
    1718:	9e 01       	movw	r18, r28
    171a:	41 15       	cp	r20, r1
    171c:	51 05       	cpc	r21, r1
    171e:	f1 f0       	breq	.+60     	; 0x175c <free+0x92>
    1720:	ea 01       	movw	r28, r20
    1722:	f5 cf       	rjmp	.-22     	; 0x170e <free+0x44>
    1724:	d3 83       	std	Z+3, r29	; 0x03
    1726:	c2 83       	std	Z+2, r28	; 0x02
    1728:	40 81       	ld	r20, Z
    172a:	51 81       	ldd	r21, Z+1	; 0x01
    172c:	84 0f       	add	r24, r20
    172e:	95 1f       	adc	r25, r21
    1730:	c8 17       	cp	r28, r24
    1732:	d9 07       	cpc	r29, r25
    1734:	59 f4       	brne	.+22     	; 0x174c <free+0x82>
    1736:	88 81       	ld	r24, Y
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	84 0f       	add	r24, r20
    173c:	95 1f       	adc	r25, r21
    173e:	02 96       	adiw	r24, 0x02	; 2
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	9b 81       	ldd	r25, Y+3	; 0x03
    1748:	93 83       	std	Z+3, r25	; 0x03
    174a:	82 83       	std	Z+2, r24	; 0x02
    174c:	21 15       	cp	r18, r1
    174e:	31 05       	cpc	r19, r1
    1750:	29 f4       	brne	.+10     	; 0x175c <free+0x92>
    1752:	f0 93 41 05 	sts	0x0541, r31	; 0x800541 <__flp+0x1>
    1756:	e0 93 40 05 	sts	0x0540, r30	; 0x800540 <__flp>
    175a:	3d c0       	rjmp	.+122    	; 0x17d6 <free+0x10c>
    175c:	e9 01       	movw	r28, r18
    175e:	fb 83       	std	Y+3, r31	; 0x03
    1760:	ea 83       	std	Y+2, r30	; 0x02
    1762:	49 91       	ld	r20, Y+
    1764:	59 91       	ld	r21, Y+
    1766:	c4 0f       	add	r28, r20
    1768:	d5 1f       	adc	r29, r21
    176a:	ec 17       	cp	r30, r28
    176c:	fd 07       	cpc	r31, r29
    176e:	61 f4       	brne	.+24     	; 0x1788 <free+0xbe>
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	84 0f       	add	r24, r20
    1776:	95 1f       	adc	r25, r21
    1778:	02 96       	adiw	r24, 0x02	; 2
    177a:	e9 01       	movw	r28, r18
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	88 83       	st	Y, r24
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	e0 e0       	ldi	r30, 0x00	; 0
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	12 96       	adiw	r26, 0x02	; 2
    178e:	8d 91       	ld	r24, X+
    1790:	9c 91       	ld	r25, X
    1792:	13 97       	sbiw	r26, 0x03	; 3
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	19 f0       	breq	.+6      	; 0x179e <free+0xd4>
    1798:	fd 01       	movw	r30, r26
    179a:	dc 01       	movw	r26, r24
    179c:	f7 cf       	rjmp	.-18     	; 0x178c <free+0xc2>
    179e:	8d 91       	ld	r24, X+
    17a0:	9c 91       	ld	r25, X
    17a2:	11 97       	sbiw	r26, 0x01	; 1
    17a4:	9d 01       	movw	r18, r26
    17a6:	2e 5f       	subi	r18, 0xFE	; 254
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	82 0f       	add	r24, r18
    17ac:	93 1f       	adc	r25, r19
    17ae:	20 91 3e 05 	lds	r18, 0x053E	; 0x80053e <__brkval>
    17b2:	30 91 3f 05 	lds	r19, 0x053F	; 0x80053f <__brkval+0x1>
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	69 f4       	brne	.+26     	; 0x17d6 <free+0x10c>
    17bc:	30 97       	sbiw	r30, 0x00	; 0
    17be:	29 f4       	brne	.+10     	; 0x17ca <free+0x100>
    17c0:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <__flp+0x1>
    17c4:	10 92 40 05 	sts	0x0540, r1	; 0x800540 <__flp>
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <free+0x104>
    17ca:	13 82       	std	Z+3, r1	; 0x03
    17cc:	12 82       	std	Z+2, r1	; 0x02
    17ce:	b0 93 3f 05 	sts	0x053F, r27	; 0x80053f <__brkval+0x1>
    17d2:	a0 93 3e 05 	sts	0x053E, r26	; 0x80053e <__brkval>
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <sprintf>:
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	2e 97       	sbiw	r28, 0x0e	; 14
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	0d 89       	ldd	r16, Y+21	; 0x15
    17f6:	1e 89       	ldd	r17, Y+22	; 0x16
    17f8:	86 e0       	ldi	r24, 0x06	; 6
    17fa:	8c 83       	std	Y+4, r24	; 0x04
    17fc:	1a 83       	std	Y+2, r17	; 0x02
    17fe:	09 83       	std	Y+1, r16	; 0x01
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	9f e7       	ldi	r25, 0x7F	; 127
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	ae 01       	movw	r20, r28
    180a:	47 5e       	subi	r20, 0xE7	; 231
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	6f 89       	ldd	r22, Y+23	; 0x17
    1810:	78 8d       	ldd	r23, Y+24	; 0x18
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	10 d0       	rcall	.+32     	; 0x1838 <vfprintf>
    1818:	ef 81       	ldd	r30, Y+7	; 0x07
    181a:	f8 85       	ldd	r31, Y+8	; 0x08
    181c:	e0 0f       	add	r30, r16
    181e:	f1 1f       	adc	r31, r17
    1820:	10 82       	st	Z, r1
    1822:	2e 96       	adiw	r28, 0x0e	; 14
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <vfprintf>:
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2b 97       	sbiw	r28, 0x0b	; 11
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	6c 01       	movw	r12, r24
    186e:	7b 01       	movw	r14, r22
    1870:	8a 01       	movw	r16, r20
    1872:	fc 01       	movw	r30, r24
    1874:	17 82       	std	Z+7, r1	; 0x07
    1876:	16 82       	std	Z+6, r1	; 0x06
    1878:	83 81       	ldd	r24, Z+3	; 0x03
    187a:	81 ff       	sbrs	r24, 1
    187c:	bf c1       	rjmp	.+894    	; 0x1bfc <vfprintf+0x3c4>
    187e:	ce 01       	movw	r24, r28
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	3c 01       	movw	r6, r24
    1884:	f6 01       	movw	r30, r12
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	f7 01       	movw	r30, r14
    188a:	93 fd       	sbrc	r25, 3
    188c:	85 91       	lpm	r24, Z+
    188e:	93 ff       	sbrs	r25, 3
    1890:	81 91       	ld	r24, Z+
    1892:	7f 01       	movw	r14, r30
    1894:	88 23       	and	r24, r24
    1896:	09 f4       	brne	.+2      	; 0x189a <vfprintf+0x62>
    1898:	ad c1       	rjmp	.+858    	; 0x1bf4 <vfprintf+0x3bc>
    189a:	85 32       	cpi	r24, 0x25	; 37
    189c:	39 f4       	brne	.+14     	; 0x18ac <vfprintf+0x74>
    189e:	93 fd       	sbrc	r25, 3
    18a0:	85 91       	lpm	r24, Z+
    18a2:	93 ff       	sbrs	r25, 3
    18a4:	81 91       	ld	r24, Z+
    18a6:	7f 01       	movw	r14, r30
    18a8:	85 32       	cpi	r24, 0x25	; 37
    18aa:	21 f4       	brne	.+8      	; 0x18b4 <vfprintf+0x7c>
    18ac:	b6 01       	movw	r22, r12
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	d6 d1       	rcall	.+940    	; 0x1c5e <fputc>
    18b2:	e8 cf       	rjmp	.-48     	; 0x1884 <vfprintf+0x4c>
    18b4:	91 2c       	mov	r9, r1
    18b6:	21 2c       	mov	r2, r1
    18b8:	31 2c       	mov	r3, r1
    18ba:	ff e1       	ldi	r31, 0x1F	; 31
    18bc:	f3 15       	cp	r31, r3
    18be:	d8 f0       	brcs	.+54     	; 0x18f6 <vfprintf+0xbe>
    18c0:	8b 32       	cpi	r24, 0x2B	; 43
    18c2:	79 f0       	breq	.+30     	; 0x18e2 <vfprintf+0xaa>
    18c4:	38 f4       	brcc	.+14     	; 0x18d4 <vfprintf+0x9c>
    18c6:	80 32       	cpi	r24, 0x20	; 32
    18c8:	79 f0       	breq	.+30     	; 0x18e8 <vfprintf+0xb0>
    18ca:	83 32       	cpi	r24, 0x23	; 35
    18cc:	a1 f4       	brne	.+40     	; 0x18f6 <vfprintf+0xbe>
    18ce:	23 2d       	mov	r18, r3
    18d0:	20 61       	ori	r18, 0x10	; 16
    18d2:	1d c0       	rjmp	.+58     	; 0x190e <vfprintf+0xd6>
    18d4:	8d 32       	cpi	r24, 0x2D	; 45
    18d6:	61 f0       	breq	.+24     	; 0x18f0 <vfprintf+0xb8>
    18d8:	80 33       	cpi	r24, 0x30	; 48
    18da:	69 f4       	brne	.+26     	; 0x18f6 <vfprintf+0xbe>
    18dc:	23 2d       	mov	r18, r3
    18de:	21 60       	ori	r18, 0x01	; 1
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <vfprintf+0xd6>
    18e2:	83 2d       	mov	r24, r3
    18e4:	82 60       	ori	r24, 0x02	; 2
    18e6:	38 2e       	mov	r3, r24
    18e8:	e3 2d       	mov	r30, r3
    18ea:	e4 60       	ori	r30, 0x04	; 4
    18ec:	3e 2e       	mov	r3, r30
    18ee:	2a c0       	rjmp	.+84     	; 0x1944 <vfprintf+0x10c>
    18f0:	f3 2d       	mov	r31, r3
    18f2:	f8 60       	ori	r31, 0x08	; 8
    18f4:	1d c0       	rjmp	.+58     	; 0x1930 <vfprintf+0xf8>
    18f6:	37 fc       	sbrc	r3, 7
    18f8:	2d c0       	rjmp	.+90     	; 0x1954 <vfprintf+0x11c>
    18fa:	20 ed       	ldi	r18, 0xD0	; 208
    18fc:	28 0f       	add	r18, r24
    18fe:	2a 30       	cpi	r18, 0x0A	; 10
    1900:	40 f0       	brcs	.+16     	; 0x1912 <vfprintf+0xda>
    1902:	8e 32       	cpi	r24, 0x2E	; 46
    1904:	b9 f4       	brne	.+46     	; 0x1934 <vfprintf+0xfc>
    1906:	36 fc       	sbrc	r3, 6
    1908:	75 c1       	rjmp	.+746    	; 0x1bf4 <vfprintf+0x3bc>
    190a:	23 2d       	mov	r18, r3
    190c:	20 64       	ori	r18, 0x40	; 64
    190e:	32 2e       	mov	r3, r18
    1910:	19 c0       	rjmp	.+50     	; 0x1944 <vfprintf+0x10c>
    1912:	36 fe       	sbrs	r3, 6
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <vfprintf+0xea>
    1916:	8a e0       	ldi	r24, 0x0A	; 10
    1918:	98 9e       	mul	r9, r24
    191a:	20 0d       	add	r18, r0
    191c:	11 24       	eor	r1, r1
    191e:	92 2e       	mov	r9, r18
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <vfprintf+0x10c>
    1922:	ea e0       	ldi	r30, 0x0A	; 10
    1924:	2e 9e       	mul	r2, r30
    1926:	20 0d       	add	r18, r0
    1928:	11 24       	eor	r1, r1
    192a:	22 2e       	mov	r2, r18
    192c:	f3 2d       	mov	r31, r3
    192e:	f0 62       	ori	r31, 0x20	; 32
    1930:	3f 2e       	mov	r3, r31
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <vfprintf+0x10c>
    1934:	8c 36       	cpi	r24, 0x6C	; 108
    1936:	21 f4       	brne	.+8      	; 0x1940 <vfprintf+0x108>
    1938:	83 2d       	mov	r24, r3
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	38 2e       	mov	r3, r24
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x10c>
    1940:	88 36       	cpi	r24, 0x68	; 104
    1942:	41 f4       	brne	.+16     	; 0x1954 <vfprintf+0x11c>
    1944:	f7 01       	movw	r30, r14
    1946:	93 fd       	sbrc	r25, 3
    1948:	85 91       	lpm	r24, Z+
    194a:	93 ff       	sbrs	r25, 3
    194c:	81 91       	ld	r24, Z+
    194e:	7f 01       	movw	r14, r30
    1950:	81 11       	cpse	r24, r1
    1952:	b3 cf       	rjmp	.-154    	; 0x18ba <vfprintf+0x82>
    1954:	98 2f       	mov	r25, r24
    1956:	9f 7d       	andi	r25, 0xDF	; 223
    1958:	95 54       	subi	r25, 0x45	; 69
    195a:	93 30       	cpi	r25, 0x03	; 3
    195c:	28 f4       	brcc	.+10     	; 0x1968 <vfprintf+0x130>
    195e:	0c 5f       	subi	r16, 0xFC	; 252
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	9f e3       	ldi	r25, 0x3F	; 63
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	0d c0       	rjmp	.+26     	; 0x1982 <vfprintf+0x14a>
    1968:	83 36       	cpi	r24, 0x63	; 99
    196a:	31 f0       	breq	.+12     	; 0x1978 <vfprintf+0x140>
    196c:	83 37       	cpi	r24, 0x73	; 115
    196e:	71 f0       	breq	.+28     	; 0x198c <vfprintf+0x154>
    1970:	83 35       	cpi	r24, 0x53	; 83
    1972:	09 f0       	breq	.+2      	; 0x1976 <vfprintf+0x13e>
    1974:	55 c0       	rjmp	.+170    	; 0x1a20 <vfprintf+0x1e8>
    1976:	20 c0       	rjmp	.+64     	; 0x19b8 <vfprintf+0x180>
    1978:	f8 01       	movw	r30, r16
    197a:	80 81       	ld	r24, Z
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	0e 5f       	subi	r16, 0xFE	; 254
    1980:	1f 4f       	sbci	r17, 0xFF	; 255
    1982:	88 24       	eor	r8, r8
    1984:	83 94       	inc	r8
    1986:	91 2c       	mov	r9, r1
    1988:	53 01       	movw	r10, r6
    198a:	12 c0       	rjmp	.+36     	; 0x19b0 <vfprintf+0x178>
    198c:	28 01       	movw	r4, r16
    198e:	f2 e0       	ldi	r31, 0x02	; 2
    1990:	4f 0e       	add	r4, r31
    1992:	51 1c       	adc	r5, r1
    1994:	f8 01       	movw	r30, r16
    1996:	a0 80       	ld	r10, Z
    1998:	b1 80       	ldd	r11, Z+1	; 0x01
    199a:	36 fe       	sbrs	r3, 6
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <vfprintf+0x16c>
    199e:	69 2d       	mov	r22, r9
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <vfprintf+0x170>
    19a4:	6f ef       	ldi	r22, 0xFF	; 255
    19a6:	7f ef       	ldi	r23, 0xFF	; 255
    19a8:	c5 01       	movw	r24, r10
    19aa:	4e d1       	rcall	.+668    	; 0x1c48 <strnlen>
    19ac:	4c 01       	movw	r8, r24
    19ae:	82 01       	movw	r16, r4
    19b0:	f3 2d       	mov	r31, r3
    19b2:	ff 77       	andi	r31, 0x7F	; 127
    19b4:	3f 2e       	mov	r3, r31
    19b6:	15 c0       	rjmp	.+42     	; 0x19e2 <vfprintf+0x1aa>
    19b8:	28 01       	movw	r4, r16
    19ba:	22 e0       	ldi	r18, 0x02	; 2
    19bc:	42 0e       	add	r4, r18
    19be:	51 1c       	adc	r5, r1
    19c0:	f8 01       	movw	r30, r16
    19c2:	a0 80       	ld	r10, Z
    19c4:	b1 80       	ldd	r11, Z+1	; 0x01
    19c6:	36 fe       	sbrs	r3, 6
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <vfprintf+0x198>
    19ca:	69 2d       	mov	r22, r9
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x19c>
    19d0:	6f ef       	ldi	r22, 0xFF	; 255
    19d2:	7f ef       	ldi	r23, 0xFF	; 255
    19d4:	c5 01       	movw	r24, r10
    19d6:	2d d1       	rcall	.+602    	; 0x1c32 <strnlen_P>
    19d8:	4c 01       	movw	r8, r24
    19da:	f3 2d       	mov	r31, r3
    19dc:	f0 68       	ori	r31, 0x80	; 128
    19de:	3f 2e       	mov	r3, r31
    19e0:	82 01       	movw	r16, r4
    19e2:	33 fc       	sbrc	r3, 3
    19e4:	19 c0       	rjmp	.+50     	; 0x1a18 <vfprintf+0x1e0>
    19e6:	82 2d       	mov	r24, r2
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	88 16       	cp	r8, r24
    19ec:	99 06       	cpc	r9, r25
    19ee:	a0 f4       	brcc	.+40     	; 0x1a18 <vfprintf+0x1e0>
    19f0:	b6 01       	movw	r22, r12
    19f2:	80 e2       	ldi	r24, 0x20	; 32
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	33 d1       	rcall	.+614    	; 0x1c5e <fputc>
    19f8:	2a 94       	dec	r2
    19fa:	f5 cf       	rjmp	.-22     	; 0x19e6 <vfprintf+0x1ae>
    19fc:	f5 01       	movw	r30, r10
    19fe:	37 fc       	sbrc	r3, 7
    1a00:	85 91       	lpm	r24, Z+
    1a02:	37 fe       	sbrs	r3, 7
    1a04:	81 91       	ld	r24, Z+
    1a06:	5f 01       	movw	r10, r30
    1a08:	b6 01       	movw	r22, r12
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	28 d1       	rcall	.+592    	; 0x1c5e <fputc>
    1a0e:	21 10       	cpse	r2, r1
    1a10:	2a 94       	dec	r2
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	82 1a       	sub	r8, r18
    1a16:	91 08       	sbc	r9, r1
    1a18:	81 14       	cp	r8, r1
    1a1a:	91 04       	cpc	r9, r1
    1a1c:	79 f7       	brne	.-34     	; 0x19fc <vfprintf+0x1c4>
    1a1e:	e1 c0       	rjmp	.+450    	; 0x1be2 <vfprintf+0x3aa>
    1a20:	84 36       	cpi	r24, 0x64	; 100
    1a22:	11 f0       	breq	.+4      	; 0x1a28 <vfprintf+0x1f0>
    1a24:	89 36       	cpi	r24, 0x69	; 105
    1a26:	39 f5       	brne	.+78     	; 0x1a76 <vfprintf+0x23e>
    1a28:	f8 01       	movw	r30, r16
    1a2a:	37 fe       	sbrs	r3, 7
    1a2c:	07 c0       	rjmp	.+14     	; 0x1a3c <vfprintf+0x204>
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	0c 5f       	subi	r16, 0xFC	; 252
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <vfprintf+0x214>
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	07 2e       	mov	r0, r23
    1a42:	00 0c       	add	r0, r0
    1a44:	88 0b       	sbc	r24, r24
    1a46:	99 0b       	sbc	r25, r25
    1a48:	0e 5f       	subi	r16, 0xFE	; 254
    1a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4c:	f3 2d       	mov	r31, r3
    1a4e:	ff 76       	andi	r31, 0x6F	; 111
    1a50:	3f 2e       	mov	r3, r31
    1a52:	97 ff       	sbrs	r25, 7
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <vfprintf+0x230>
    1a56:	90 95       	com	r25
    1a58:	80 95       	com	r24
    1a5a:	70 95       	com	r23
    1a5c:	61 95       	neg	r22
    1a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a60:	8f 4f       	sbci	r24, 0xFF	; 255
    1a62:	9f 4f       	sbci	r25, 0xFF	; 255
    1a64:	f0 68       	ori	r31, 0x80	; 128
    1a66:	3f 2e       	mov	r3, r31
    1a68:	2a e0       	ldi	r18, 0x0A	; 10
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	a3 01       	movw	r20, r6
    1a6e:	33 d1       	rcall	.+614    	; 0x1cd6 <__ultoa_invert>
    1a70:	88 2e       	mov	r8, r24
    1a72:	86 18       	sub	r8, r6
    1a74:	44 c0       	rjmp	.+136    	; 0x1afe <vfprintf+0x2c6>
    1a76:	85 37       	cpi	r24, 0x75	; 117
    1a78:	31 f4       	brne	.+12     	; 0x1a86 <vfprintf+0x24e>
    1a7a:	23 2d       	mov	r18, r3
    1a7c:	2f 7e       	andi	r18, 0xEF	; 239
    1a7e:	b2 2e       	mov	r11, r18
    1a80:	2a e0       	ldi	r18, 0x0A	; 10
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	25 c0       	rjmp	.+74     	; 0x1ad0 <vfprintf+0x298>
    1a86:	93 2d       	mov	r25, r3
    1a88:	99 7f       	andi	r25, 0xF9	; 249
    1a8a:	b9 2e       	mov	r11, r25
    1a8c:	8f 36       	cpi	r24, 0x6F	; 111
    1a8e:	c1 f0       	breq	.+48     	; 0x1ac0 <vfprintf+0x288>
    1a90:	18 f4       	brcc	.+6      	; 0x1a98 <vfprintf+0x260>
    1a92:	88 35       	cpi	r24, 0x58	; 88
    1a94:	79 f0       	breq	.+30     	; 0x1ab4 <vfprintf+0x27c>
    1a96:	ae c0       	rjmp	.+348    	; 0x1bf4 <vfprintf+0x3bc>
    1a98:	80 37       	cpi	r24, 0x70	; 112
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <vfprintf+0x26a>
    1a9c:	88 37       	cpi	r24, 0x78	; 120
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <vfprintf+0x270>
    1aa0:	a9 c0       	rjmp	.+338    	; 0x1bf4 <vfprintf+0x3bc>
    1aa2:	e9 2f       	mov	r30, r25
    1aa4:	e0 61       	ori	r30, 0x10	; 16
    1aa6:	be 2e       	mov	r11, r30
    1aa8:	b4 fe       	sbrs	r11, 4
    1aaa:	0d c0       	rjmp	.+26     	; 0x1ac6 <vfprintf+0x28e>
    1aac:	fb 2d       	mov	r31, r11
    1aae:	f4 60       	ori	r31, 0x04	; 4
    1ab0:	bf 2e       	mov	r11, r31
    1ab2:	09 c0       	rjmp	.+18     	; 0x1ac6 <vfprintf+0x28e>
    1ab4:	34 fe       	sbrs	r3, 4
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <vfprintf+0x294>
    1ab8:	29 2f       	mov	r18, r25
    1aba:	26 60       	ori	r18, 0x06	; 6
    1abc:	b2 2e       	mov	r11, r18
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <vfprintf+0x294>
    1ac0:	28 e0       	ldi	r18, 0x08	; 8
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <vfprintf+0x298>
    1ac6:	20 e1       	ldi	r18, 0x10	; 16
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <vfprintf+0x298>
    1acc:	20 e1       	ldi	r18, 0x10	; 16
    1ace:	32 e0       	ldi	r19, 0x02	; 2
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	b7 fe       	sbrs	r11, 7
    1ad4:	07 c0       	rjmp	.+14     	; 0x1ae4 <vfprintf+0x2ac>
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	0c 5f       	subi	r16, 0xFC	; 252
    1ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <vfprintf+0x2b8>
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	0e 5f       	subi	r16, 0xFE	; 254
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	a3 01       	movw	r20, r6
    1af2:	f1 d0       	rcall	.+482    	; 0x1cd6 <__ultoa_invert>
    1af4:	88 2e       	mov	r8, r24
    1af6:	86 18       	sub	r8, r6
    1af8:	fb 2d       	mov	r31, r11
    1afa:	ff 77       	andi	r31, 0x7F	; 127
    1afc:	3f 2e       	mov	r3, r31
    1afe:	36 fe       	sbrs	r3, 6
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <vfprintf+0x2e4>
    1b02:	23 2d       	mov	r18, r3
    1b04:	2e 7f       	andi	r18, 0xFE	; 254
    1b06:	a2 2e       	mov	r10, r18
    1b08:	89 14       	cp	r8, r9
    1b0a:	58 f4       	brcc	.+22     	; 0x1b22 <vfprintf+0x2ea>
    1b0c:	34 fe       	sbrs	r3, 4
    1b0e:	0b c0       	rjmp	.+22     	; 0x1b26 <vfprintf+0x2ee>
    1b10:	32 fc       	sbrc	r3, 2
    1b12:	09 c0       	rjmp	.+18     	; 0x1b26 <vfprintf+0x2ee>
    1b14:	83 2d       	mov	r24, r3
    1b16:	8e 7e       	andi	r24, 0xEE	; 238
    1b18:	a8 2e       	mov	r10, r24
    1b1a:	05 c0       	rjmp	.+10     	; 0x1b26 <vfprintf+0x2ee>
    1b1c:	b8 2c       	mov	r11, r8
    1b1e:	a3 2c       	mov	r10, r3
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <vfprintf+0x2f0>
    1b22:	b8 2c       	mov	r11, r8
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <vfprintf+0x2f0>
    1b26:	b9 2c       	mov	r11, r9
    1b28:	a4 fe       	sbrs	r10, 4
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <vfprintf+0x312>
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e8 0d       	add	r30, r8
    1b30:	f1 1d       	adc	r31, r1
    1b32:	80 81       	ld	r24, Z
    1b34:	80 33       	cpi	r24, 0x30	; 48
    1b36:	21 f4       	brne	.+8      	; 0x1b40 <vfprintf+0x308>
    1b38:	9a 2d       	mov	r25, r10
    1b3a:	99 7e       	andi	r25, 0xE9	; 233
    1b3c:	a9 2e       	mov	r10, r25
    1b3e:	09 c0       	rjmp	.+18     	; 0x1b52 <vfprintf+0x31a>
    1b40:	a2 fe       	sbrs	r10, 2
    1b42:	06 c0       	rjmp	.+12     	; 0x1b50 <vfprintf+0x318>
    1b44:	b3 94       	inc	r11
    1b46:	b3 94       	inc	r11
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <vfprintf+0x31a>
    1b4a:	8a 2d       	mov	r24, r10
    1b4c:	86 78       	andi	r24, 0x86	; 134
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <vfprintf+0x31a>
    1b50:	b3 94       	inc	r11
    1b52:	a3 fc       	sbrc	r10, 3
    1b54:	10 c0       	rjmp	.+32     	; 0x1b76 <vfprintf+0x33e>
    1b56:	a0 fe       	sbrs	r10, 0
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <vfprintf+0x32e>
    1b5a:	b2 14       	cp	r11, r2
    1b5c:	80 f4       	brcc	.+32     	; 0x1b7e <vfprintf+0x346>
    1b5e:	28 0c       	add	r2, r8
    1b60:	92 2c       	mov	r9, r2
    1b62:	9b 18       	sub	r9, r11
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <vfprintf+0x348>
    1b66:	b2 14       	cp	r11, r2
    1b68:	58 f4       	brcc	.+22     	; 0x1b80 <vfprintf+0x348>
    1b6a:	b6 01       	movw	r22, r12
    1b6c:	80 e2       	ldi	r24, 0x20	; 32
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	76 d0       	rcall	.+236    	; 0x1c5e <fputc>
    1b72:	b3 94       	inc	r11
    1b74:	f8 cf       	rjmp	.-16     	; 0x1b66 <vfprintf+0x32e>
    1b76:	b2 14       	cp	r11, r2
    1b78:	18 f4       	brcc	.+6      	; 0x1b80 <vfprintf+0x348>
    1b7a:	2b 18       	sub	r2, r11
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0x34a>
    1b7e:	98 2c       	mov	r9, r8
    1b80:	21 2c       	mov	r2, r1
    1b82:	a4 fe       	sbrs	r10, 4
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <vfprintf+0x36c>
    1b86:	b6 01       	movw	r22, r12
    1b88:	80 e3       	ldi	r24, 0x30	; 48
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	68 d0       	rcall	.+208    	; 0x1c5e <fputc>
    1b8e:	a2 fe       	sbrs	r10, 2
    1b90:	16 c0       	rjmp	.+44     	; 0x1bbe <vfprintf+0x386>
    1b92:	a1 fc       	sbrc	r10, 1
    1b94:	03 c0       	rjmp	.+6      	; 0x1b9c <vfprintf+0x364>
    1b96:	88 e7       	ldi	r24, 0x78	; 120
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <vfprintf+0x368>
    1b9c:	88 e5       	ldi	r24, 0x58	; 88
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	0c c0       	rjmp	.+24     	; 0x1bbc <vfprintf+0x384>
    1ba4:	8a 2d       	mov	r24, r10
    1ba6:	86 78       	andi	r24, 0x86	; 134
    1ba8:	51 f0       	breq	.+20     	; 0x1bbe <vfprintf+0x386>
    1baa:	a1 fe       	sbrs	r10, 1
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x37a>
    1bae:	8b e2       	ldi	r24, 0x2B	; 43
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <vfprintf+0x37c>
    1bb2:	80 e2       	ldi	r24, 0x20	; 32
    1bb4:	a7 fc       	sbrc	r10, 7
    1bb6:	8d e2       	ldi	r24, 0x2D	; 45
    1bb8:	b6 01       	movw	r22, r12
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	50 d0       	rcall	.+160    	; 0x1c5e <fputc>
    1bbe:	89 14       	cp	r8, r9
    1bc0:	30 f4       	brcc	.+12     	; 0x1bce <vfprintf+0x396>
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	80 e3       	ldi	r24, 0x30	; 48
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	4a d0       	rcall	.+148    	; 0x1c5e <fputc>
    1bca:	9a 94       	dec	r9
    1bcc:	f8 cf       	rjmp	.-16     	; 0x1bbe <vfprintf+0x386>
    1bce:	8a 94       	dec	r8
    1bd0:	f3 01       	movw	r30, r6
    1bd2:	e8 0d       	add	r30, r8
    1bd4:	f1 1d       	adc	r31, r1
    1bd6:	80 81       	ld	r24, Z
    1bd8:	b6 01       	movw	r22, r12
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	40 d0       	rcall	.+128    	; 0x1c5e <fputc>
    1bde:	81 10       	cpse	r8, r1
    1be0:	f6 cf       	rjmp	.-20     	; 0x1bce <vfprintf+0x396>
    1be2:	22 20       	and	r2, r2
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <vfprintf+0x3b0>
    1be6:	4e ce       	rjmp	.-868    	; 0x1884 <vfprintf+0x4c>
    1be8:	b6 01       	movw	r22, r12
    1bea:	80 e2       	ldi	r24, 0x20	; 32
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	37 d0       	rcall	.+110    	; 0x1c5e <fputc>
    1bf0:	2a 94       	dec	r2
    1bf2:	f7 cf       	rjmp	.-18     	; 0x1be2 <vfprintf+0x3aa>
    1bf4:	f6 01       	movw	r30, r12
    1bf6:	86 81       	ldd	r24, Z+6	; 0x06
    1bf8:	97 81       	ldd	r25, Z+7	; 0x07
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <vfprintf+0x3c8>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	9f ef       	ldi	r25, 0xFF	; 255
    1c00:	2b 96       	adiw	r28, 0x0b	; 11
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	9f 90       	pop	r9
    1c22:	8f 90       	pop	r8
    1c24:	7f 90       	pop	r7
    1c26:	6f 90       	pop	r6
    1c28:	5f 90       	pop	r5
    1c2a:	4f 90       	pop	r4
    1c2c:	3f 90       	pop	r3
    1c2e:	2f 90       	pop	r2
    1c30:	08 95       	ret

00001c32 <strnlen_P>:
    1c32:	fc 01       	movw	r30, r24
    1c34:	05 90       	lpm	r0, Z+
    1c36:	61 50       	subi	r22, 0x01	; 1
    1c38:	70 40       	sbci	r23, 0x00	; 0
    1c3a:	01 10       	cpse	r0, r1
    1c3c:	d8 f7       	brcc	.-10     	; 0x1c34 <strnlen_P+0x2>
    1c3e:	80 95       	com	r24
    1c40:	90 95       	com	r25
    1c42:	8e 0f       	add	r24, r30
    1c44:	9f 1f       	adc	r25, r31
    1c46:	08 95       	ret

00001c48 <strnlen>:
    1c48:	fc 01       	movw	r30, r24
    1c4a:	61 50       	subi	r22, 0x01	; 1
    1c4c:	70 40       	sbci	r23, 0x00	; 0
    1c4e:	01 90       	ld	r0, Z+
    1c50:	01 10       	cpse	r0, r1
    1c52:	d8 f7       	brcc	.-10     	; 0x1c4a <strnlen+0x2>
    1c54:	80 95       	com	r24
    1c56:	90 95       	com	r25
    1c58:	8e 0f       	add	r24, r30
    1c5a:	9f 1f       	adc	r25, r31
    1c5c:	08 95       	ret

00001c5e <fputc>:
    1c5e:	0f 93       	push	r16
    1c60:	1f 93       	push	r17
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	fb 01       	movw	r30, r22
    1c68:	23 81       	ldd	r18, Z+3	; 0x03
    1c6a:	21 fd       	sbrc	r18, 1
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74 <fputc+0x16>
    1c6e:	8f ef       	ldi	r24, 0xFF	; 255
    1c70:	9f ef       	ldi	r25, 0xFF	; 255
    1c72:	2c c0       	rjmp	.+88     	; 0x1ccc <fputc+0x6e>
    1c74:	22 ff       	sbrs	r18, 2
    1c76:	16 c0       	rjmp	.+44     	; 0x1ca4 <fputc+0x46>
    1c78:	46 81       	ldd	r20, Z+6	; 0x06
    1c7a:	57 81       	ldd	r21, Z+7	; 0x07
    1c7c:	24 81       	ldd	r18, Z+4	; 0x04
    1c7e:	35 81       	ldd	r19, Z+5	; 0x05
    1c80:	42 17       	cp	r20, r18
    1c82:	53 07       	cpc	r21, r19
    1c84:	44 f4       	brge	.+16     	; 0x1c96 <fputc+0x38>
    1c86:	a0 81       	ld	r26, Z
    1c88:	b1 81       	ldd	r27, Z+1	; 0x01
    1c8a:	9d 01       	movw	r18, r26
    1c8c:	2f 5f       	subi	r18, 0xFF	; 255
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	31 83       	std	Z+1, r19	; 0x01
    1c92:	20 83       	st	Z, r18
    1c94:	8c 93       	st	X, r24
    1c96:	26 81       	ldd	r18, Z+6	; 0x06
    1c98:	37 81       	ldd	r19, Z+7	; 0x07
    1c9a:	2f 5f       	subi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	37 83       	std	Z+7, r19	; 0x07
    1ca0:	26 83       	std	Z+6, r18	; 0x06
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <fputc+0x6e>
    1ca4:	8b 01       	movw	r16, r22
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	fb 01       	movw	r30, r22
    1caa:	00 84       	ldd	r0, Z+8	; 0x08
    1cac:	f1 85       	ldd	r31, Z+9	; 0x09
    1cae:	e0 2d       	mov	r30, r0
    1cb0:	09 95       	icall
    1cb2:	89 2b       	or	r24, r25
    1cb4:	e1 f6       	brne	.-72     	; 0x1c6e <fputc+0x10>
    1cb6:	d8 01       	movw	r26, r16
    1cb8:	16 96       	adiw	r26, 0x06	; 6
    1cba:	8d 91       	ld	r24, X+
    1cbc:	9c 91       	ld	r25, X
    1cbe:	17 97       	sbiw	r26, 0x07	; 7
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	17 96       	adiw	r26, 0x07	; 7
    1cc4:	9c 93       	st	X, r25
    1cc6:	8e 93       	st	-X, r24
    1cc8:	16 97       	sbiw	r26, 0x06	; 6
    1cca:	ce 01       	movw	r24, r28
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <__ultoa_invert>:
    1cd6:	fa 01       	movw	r30, r20
    1cd8:	aa 27       	eor	r26, r26
    1cda:	28 30       	cpi	r18, 0x08	; 8
    1cdc:	51 f1       	breq	.+84     	; 0x1d32 <__ultoa_invert+0x5c>
    1cde:	20 31       	cpi	r18, 0x10	; 16
    1ce0:	81 f1       	breq	.+96     	; 0x1d42 <__ultoa_invert+0x6c>
    1ce2:	e8 94       	clt
    1ce4:	6f 93       	push	r22
    1ce6:	6e 7f       	andi	r22, 0xFE	; 254
    1ce8:	6e 5f       	subi	r22, 0xFE	; 254
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	8f 4f       	sbci	r24, 0xFF	; 255
    1cee:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf0:	af 4f       	sbci	r26, 0xFF	; 255
    1cf2:	b1 e0       	ldi	r27, 0x01	; 1
    1cf4:	3e d0       	rcall	.+124    	; 0x1d72 <__ultoa_invert+0x9c>
    1cf6:	b4 e0       	ldi	r27, 0x04	; 4
    1cf8:	3c d0       	rcall	.+120    	; 0x1d72 <__ultoa_invert+0x9c>
    1cfa:	67 0f       	add	r22, r23
    1cfc:	78 1f       	adc	r23, r24
    1cfe:	89 1f       	adc	r24, r25
    1d00:	9a 1f       	adc	r25, r26
    1d02:	a1 1d       	adc	r26, r1
    1d04:	68 0f       	add	r22, r24
    1d06:	79 1f       	adc	r23, r25
    1d08:	8a 1f       	adc	r24, r26
    1d0a:	91 1d       	adc	r25, r1
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	6a 0f       	add	r22, r26
    1d10:	71 1d       	adc	r23, r1
    1d12:	81 1d       	adc	r24, r1
    1d14:	91 1d       	adc	r25, r1
    1d16:	a1 1d       	adc	r26, r1
    1d18:	20 d0       	rcall	.+64     	; 0x1d5a <__ultoa_invert+0x84>
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <__ultoa_invert+0x48>
    1d1c:	68 94       	set
    1d1e:	3f 91       	pop	r19
    1d20:	2a e0       	ldi	r18, 0x0A	; 10
    1d22:	26 9f       	mul	r18, r22
    1d24:	11 24       	eor	r1, r1
    1d26:	30 19       	sub	r19, r0
    1d28:	30 5d       	subi	r19, 0xD0	; 208
    1d2a:	31 93       	st	Z+, r19
    1d2c:	de f6       	brtc	.-74     	; 0x1ce4 <__ultoa_invert+0xe>
    1d2e:	cf 01       	movw	r24, r30
    1d30:	08 95       	ret
    1d32:	46 2f       	mov	r20, r22
    1d34:	47 70       	andi	r20, 0x07	; 7
    1d36:	40 5d       	subi	r20, 0xD0	; 208
    1d38:	41 93       	st	Z+, r20
    1d3a:	b3 e0       	ldi	r27, 0x03	; 3
    1d3c:	0f d0       	rcall	.+30     	; 0x1d5c <__ultoa_invert+0x86>
    1d3e:	c9 f7       	brne	.-14     	; 0x1d32 <__ultoa_invert+0x5c>
    1d40:	f6 cf       	rjmp	.-20     	; 0x1d2e <__ultoa_invert+0x58>
    1d42:	46 2f       	mov	r20, r22
    1d44:	4f 70       	andi	r20, 0x0F	; 15
    1d46:	40 5d       	subi	r20, 0xD0	; 208
    1d48:	4a 33       	cpi	r20, 0x3A	; 58
    1d4a:	18 f0       	brcs	.+6      	; 0x1d52 <__ultoa_invert+0x7c>
    1d4c:	49 5d       	subi	r20, 0xD9	; 217
    1d4e:	31 fd       	sbrc	r19, 1
    1d50:	40 52       	subi	r20, 0x20	; 32
    1d52:	41 93       	st	Z+, r20
    1d54:	02 d0       	rcall	.+4      	; 0x1d5a <__ultoa_invert+0x84>
    1d56:	a9 f7       	brne	.-22     	; 0x1d42 <__ultoa_invert+0x6c>
    1d58:	ea cf       	rjmp	.-44     	; 0x1d2e <__ultoa_invert+0x58>
    1d5a:	b4 e0       	ldi	r27, 0x04	; 4
    1d5c:	a6 95       	lsr	r26
    1d5e:	97 95       	ror	r25
    1d60:	87 95       	ror	r24
    1d62:	77 95       	ror	r23
    1d64:	67 95       	ror	r22
    1d66:	ba 95       	dec	r27
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0x86>
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	61 05       	cpc	r22, r1
    1d6e:	71 05       	cpc	r23, r1
    1d70:	08 95       	ret
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	0a 2e       	mov	r0, r26
    1d78:	06 94       	lsr	r0
    1d7a:	57 95       	ror	r21
    1d7c:	47 95       	ror	r20
    1d7e:	37 95       	ror	r19
    1d80:	27 95       	ror	r18
    1d82:	ba 95       	dec	r27
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__ultoa_invert+0xa2>
    1d86:	62 0f       	add	r22, r18
    1d88:	73 1f       	adc	r23, r19
    1d8a:	84 1f       	adc	r24, r20
    1d8c:	95 1f       	adc	r25, r21
    1d8e:	a0 1d       	adc	r26, r0
    1d90:	08 95       	ret

00001d92 <_exit>:
    1d92:	f8 94       	cli

00001d94 <__stop_program>:
    1d94:	ff cf       	rjmp	.-2      	; 0x1d94 <__stop_program>
