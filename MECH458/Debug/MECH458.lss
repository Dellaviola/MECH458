
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  00001908  0000199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800296  00800296  00001b32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005445  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b2a  00000000  00000000  00007315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003589  00000000  00000000  00008e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  0000c3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aaae  00000000  00000000  0000cb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001883  00000000  00000000  00017622  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00018ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b56  00000000  00000000  0001917d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	9a c4       	rjmp	.+2356   	; 0x96a <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c7       	rjmp	.+3674   	; 0xea0 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e0       	ldi	r30, 0x08	; 8
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a6 39       	cpi	r26, 0x96	; 150
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a6 e9       	ldi	r26, 0x96	; 150
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	aa 36       	cpi	r26, 0x6A	; 106
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	d1 d2       	rcall	.+1442   	; 0x672 <main>
      d0:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <_exit>

000000d4 <__bad_interrupt>:
      d4:	9c c3       	rjmp	.+1848   	; 0x80e <__vector_default>

000000d6 <ADC_Init>:
#include "sys.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		//PORTC ^= 0xFE;
		if (g_ADCCount < 10)
     122:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <g_ADCCount>
     126:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	d8 f4       	brcc	.+54     	; 0x164 <__vector_29+0x5c>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     12e:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <g_ADCCount>
     132:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 df 02 	sts	0x02DF, r19	; 0x8002df <g_ADCCount+0x1>
     140:	20 93 de 02 	sts	0x02DE, r18	; 0x8002de <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	e6 53       	subi	r30, 0x36	; 54
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);	 
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <g_ADCCount>
     168:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <_timer+0x11>
		//ADCSRA &= 0x01111111;
		//PORTC ^= 0xFE;
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	80 ea       	ldi	r24, 0xA0	; 160
     194:	89 27       	eor	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret

0000019a <ADC_Task>:
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	cf 93       	push	r28
     1ac:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <j.2509>
     1b0:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <j.2509+0x1>
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <j.2509+0x1>
     1ba:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <j.2509>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	ba 01       	movw	r22, r20
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2f b7       	in	r18, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	fc 01       	movw	r30, r24
     1ce:	ee 0f       	add	r30, r30
     1d0:	ff 1f       	adc	r31, r31
     1d2:	e6 53       	subi	r30, 0x36	; 54
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	01 90       	ld	r0, Z+
     1d8:	f0 81       	ld	r31, Z
     1da:	e0 2d       	mov	r30, r0
     1dc:	4e 0f       	add	r20, r30
     1de:	5f 1f       	adc	r21, r31
     1e0:	61 1d       	adc	r22, r1
     1e2:	71 1d       	adc	r23, r1
     1e4:	2f bf       	out	0x3f, r18	; 63
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
     1ea:	91 05       	cpc	r25, r1
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <ADC_Task+0x2e>
     1ee:	cf b7       	in	r28, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	cb 01       	movw	r24, r22
     1f4:	ba 01       	movw	r22, r20
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	64 d7       	rcall	.+3784   	; 0x10c8 <__udivmodsi4>
     200:	69 01       	movw	r12, r18
     202:	7a 01       	movw	r14, r20
     204:	cf bf       	out	0x3f, r28	; 63
     206:	cf b7       	in	r28, 0x3f	; 63
     208:	f8 94       	cli
     20a:	da 01       	movw	r26, r20
     20c:	c9 01       	movw	r24, r18
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	a1 09       	sbc	r26, r1
     212:	b1 09       	sbc	r27, r1
     214:	8f 3c       	cpi	r24, 0xCF	; 207
     216:	97 40       	sbci	r25, 0x07	; 7
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	a0 f4       	brcc	.+40     	; 0x246 <ADC_Task+0xac>
     21e:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     222:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     226:	f5 d1       	rcall	.+1002   	; 0x612 <LL_GetRefl>
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	40 f4       	brcc	.+16     	; 0x246 <ADC_Task+0xac>
     236:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     23a:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f0       	breq	.+4      	; 0x246 <ADC_Task+0xac>
     242:	b6 01       	movw	r22, r12
     244:	f1 d1       	rcall	.+994    	; 0x628 <LL_UpdateRefl>
     246:	cf bf       	out	0x3f, r28	; 63
     248:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <g_ADCCount+0x1>
     24c:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <g_ADCCount>
     250:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_timer+0x11>
     254:	66 9b       	sbis	0x0c, 6	; 12
     256:	05 c0       	rjmp	.+10     	; 0x262 <ADC_Task+0xc8>
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 64       	ori	r24, 0x40	; 64
     260:	80 83       	st	Z, r24
     262:	cf 91       	pop	r28
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	bf 90       	pop	r11
     26e:	af 90       	pop	r10
     270:	9f 90       	pop	r9
     272:	8f 90       	pop	r8
     274:	08 95       	ret

00000276 <MAG_Task>:
     276:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <gMotorOn>
     27a:	88 23       	and	r24, r24
     27c:	49 f0       	breq	.+18     	; 0x290 <MAG_Task+0x1a>
     27e:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <tick.2531>
     282:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <tick.2531+0x1>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <tick.2531+0x1>
     28c:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <tick.2531>
     290:	64 99       	sbic	0x0c, 4	; 12
     292:	1c c0       	rjmp	.+56     	; 0x2cc <MAG_Task+0x56>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     29a:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     29e:	d4 d1       	rcall	.+936    	; 0x648 <LL_UpdateStatus>
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     2a6:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     2aa:	c4 d1       	rcall	.+904    	; 0x634 <LL_UpdateMag>
     2ac:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     2b0:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     2b4:	83 d1       	rcall	.+774    	; 0x5bc <LL_Next>
     2b6:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <STAGE1+0x1>
     2ba:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <STAGE1>
     2be:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_timer+0x1a>
     2c2:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <tick.2531+0x1>
     2c6:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <tick.2531>
     2ca:	08 95       	ret
     2cc:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <tick.2531>
     2d0:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <tick.2531+0x1>
     2d4:	45 97       	sbiw	r24, 0x15	; 21
     2d6:	d8 f0       	brcs	.+54     	; 0x30e <MAG_Task+0x98>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     2de:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     2e2:	b2 d1       	rcall	.+868    	; 0x648 <LL_UpdateStatus>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     2ea:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     2ee:	a2 d1       	rcall	.+836    	; 0x634 <LL_UpdateMag>
     2f0:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     2f4:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     2f8:	61 d1       	rcall	.+706    	; 0x5bc <LL_Next>
     2fa:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <STAGE1+0x1>
     2fe:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <STAGE1>
     302:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <_timer+0x1a>
     306:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <tick.2531+0x1>
     30a:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <tick.2531>
     30e:	08 95       	ret

00000310 <EXIT_Task>:
     310:	cf 93       	push	r28
     312:	e7 eb       	ldi	r30, 0xB7	; 183
     314:	f2 e0       	ldi	r31, 0x02	; 2
     316:	85 81       	ldd	r24, Z+5	; 0x05
     318:	96 81       	ldd	r25, Z+6	; 0x06
     31a:	37 81       	ldd	r19, Z+7	; 0x07
     31c:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <memory.2537>
     320:	21 11       	cpse	r18, r1
     322:	69 c0       	rjmp	.+210    	; 0x3f6 <EXIT_Task+0xe6>
     324:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <delay.2538>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <delay.2538>
     32e:	03 c0       	rjmp	.+6      	; 0x336 <EXIT_Task+0x26>
     330:	80 e8       	ldi	r24, 0x80	; 128
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	7d d2       	rcall	.+1274   	; 0x830 <PWM>
     336:	c0 91 bb 02 	lds	r28, 0x02BB	; 0x8002bb <stepper+0x4>
     33a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     33e:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     342:	62 d1       	rcall	.+708    	; 0x608 <LL_GetClass>
     344:	e8 2f       	mov	r30, r24
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	e7 5f       	subi	r30, 0xF7	; 247
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	c8 13       	cpse	r28, r24
     350:	49 c0       	rjmp	.+146    	; 0x3e4 <EXIT_Task+0xd4>
     352:	80 e8       	ldi	r24, 0x80	; 128
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	6c d2       	rcall	.+1240   	; 0x830 <PWM>
     358:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <delay.2538>
     35c:	85 31       	cpi	r24, 0x15	; 21
     35e:	28 f4       	brcc	.+10     	; 0x36a <EXIT_Task+0x5a>
     360:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <memory.2537>
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <EXIT_Task+0x5a>
     368:	40 c0       	rjmp	.+128    	; 0x3ea <EXIT_Task+0xda>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <memory.2537>
     370:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <delay.2538>
     374:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     378:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     37c:	45 d1       	rcall	.+650    	; 0x608 <LL_GetClass>
     37e:	c8 2f       	mov	r28, r24
     380:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <HEAD>
     384:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <HEAD+0x1>
     388:	82 81       	ldd	r24, Z+2	; 0x02
     38a:	93 81       	ldd	r25, Z+3	; 0x03
     38c:	3d d1       	rcall	.+634    	; 0x608 <LL_GetClass>
     38e:	c8 13       	cpse	r28, r24
     390:	02 c0       	rjmp	.+4      	; 0x396 <EXIT_Task+0x86>
     392:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <memory.2537>
     396:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <_timer+0x23>
     39a:	63 e0       	ldi	r22, 0x03	; 3
     39c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     3a0:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     3a4:	51 d1       	rcall	.+674    	; 0x648 <LL_UpdateStatus>
     3a6:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     3aa:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     3ae:	06 d1       	rcall	.+524    	; 0x5bc <LL_Next>
     3b0:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <HEAD+0x1>
     3b4:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <HEAD>
     3b8:	fc 01       	movw	r30, r24
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	93 81       	ldd	r25, Z+3	; 0x03
     3be:	24 d1       	rcall	.+584    	; 0x608 <LL_GetClass>
     3c0:	e8 2f       	mov	r30, r24
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	e7 5f       	subi	r30, 0xF7	; 247
     3c6:	fe 4f       	sbci	r31, 0xFE	; 254
     3c8:	c0 81       	ld	r28, Z
     3ca:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     3ce:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     3d2:	1a d1       	rcall	.+564    	; 0x608 <LL_GetClass>
     3d4:	e8 2f       	mov	r30, r24
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	e7 5f       	subi	r30, 0xF7	; 247
     3da:	fe 4f       	sbci	r31, 0xFE	; 254
     3dc:	80 81       	ld	r24, Z
     3de:	6c 2f       	mov	r22, r28
     3e0:	af d2       	rcall	.+1374   	; 0x940 <STEPPER_SetRotation>
     3e2:	03 c0       	rjmp	.+6      	; 0x3ea <EXIT_Task+0xda>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	23 d2       	rcall	.+1094   	; 0x830 <PWM>
     3ea:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     3ee:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     3f2:	0a d1       	rcall	.+532    	; 0x608 <LL_GetClass>
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
     3f6:	83 1b       	sub	r24, r19
     3f8:	8f 30       	cpi	r24, 0x0F	; 15
     3fa:	08 f0       	brcs	.+2      	; 0x3fe <EXIT_Task+0xee>
     3fc:	9c cf       	rjmp	.-200    	; 0x336 <EXIT_Task+0x26>
     3fe:	98 cf       	rjmp	.-208    	; 0x330 <EXIT_Task+0x20>
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <BTN_Task>:
     404:	89 b1       	in	r24, 0x09	; 9
     406:	83 70       	andi	r24, 0x03	; 3
     408:	69 f1       	breq	.+90     	; 0x464 <BTN_Task+0x60>
     40a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <__data_end>
     414:	83 30       	cpi	r24, 0x03	; 3
     416:	30 f1       	brcs	.+76     	; 0x464 <BTN_Task+0x60>
     418:	89 b1       	in	r24, 0x09	; 9
     41a:	83 70       	andi	r24, 0x03	; 3
     41c:	31 f4       	brne	.+12     	; 0x42a <BTN_Task+0x26>
     41e:	84 e2       	ldi	r24, 0x24	; 36
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	44 d6       	rcall	.+3208   	; 0x10ac <UART_SendString>
     424:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     428:	08 95       	ret
     42a:	89 b1       	in	r24, 0x09	; 9
     42c:	83 70       	andi	r24, 0x03	; 3
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	69 f4       	brne	.+26     	; 0x44c <BTN_Task+0x48>
     432:	8c e3       	ldi	r24, 0x3C	; 60
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	3a d6       	rcall	.+3188   	; 0x10ac <UART_SendString>
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <g_PauseRequest>
     43e:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <g_IdleStartTime+0x1>
     442:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <g_IdleStartTime>
     446:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     44a:	08 95       	ret
     44c:	89 b1       	in	r24, 0x09	; 9
     44e:	83 70       	andi	r24, 0x03	; 3
     450:	82 30       	cpi	r24, 0x02	; 2
     452:	31 f4       	brne	.+12     	; 0x460 <BTN_Task+0x5c>
     454:	82 e6       	ldi	r24, 0x62	; 98
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	29 d6       	rcall	.+3154   	; 0x10ac <UART_SendString>
     45a:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     45e:	08 95       	ret
     460:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     464:	08 95       	ret

00000466 <ADD_Task>:
     466:	08 95       	ret

00000468 <SERVER_Task>:
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 1;
	static uint8_t pin5state = 1;
//	static uint8_t temp = 0;
	
	if((PINE & 0x80) == 0) // E7
     468:	67 99       	sbic	0x0c, 7	; 12
     46a:	16 c0       	rjmp	.+44     	; 0x498 <SERVER_Task+0x30>
	{
		if(pin7state)
     46c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2558>
     470:	88 23       	and	r24, r24
     472:	81 f0       	breq	.+32     	; 0x494 <SERVER_Task+0x2c>
		{
			// Transition Detected O1 High -> Low : Item Enters		
			// Just signal the start of the system by placing the first node into stage 1
			// And enable the watchdog timer
			
			if(STAGE1 == NULL) STAGE1 = HEAD;
     474:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     478:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     47c:	89 2b       	or	r24, r25
     47e:	41 f4       	brne	.+16     	; 0x490 <SERVER_Task+0x28>
     480:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     484:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     488:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <STAGE1+0x1>
     48c:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <STAGE1>
			g_WDTimeout = 0;
     490:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
		}
		pin7state = 0;
     494:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2558>
	}
	
	if((PINE & 0x40) == 0) // E6
     498:	66 99       	sbic	0x0c, 6	; 12
     49a:	0e c0       	rjmp	.+28     	; 0x4b8 <SERVER_Task+0x50>
	{
		if(pin6state)
     49c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2559>
     4a0:	88 23       	and	r24, r24
     4a2:	41 f0       	breq	.+16     	; 0x4b4 <SERVER_Task+0x4c>
		{
			// Transition Detected O2 High -> Low : Stop ADC
				// Once an item leaves the ADC it is ready to sort
				
				LL_UpdateStatus(STAGE2, SORTABLE);
     4a4:	62 e0       	ldi	r22, 0x02	; 2
     4a6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     4aa:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     4ae:	cc d0       	rcall	.+408    	; 0x648 <LL_UpdateStatus>
				g_WDTimeout = 0;
     4b0:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
		}
		pin6state = 0;
     4b4:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2559>
	}
	
	if((PINE & 0x20) == 0) // E5
     4b8:	65 99       	sbic	0x0c, 5	; 12
     4ba:	0b c0       	rjmp	.+22     	; 0x4d2 <SERVER_Task+0x6a>
	{
		if(pin5state)
     4bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2560>
     4c0:	88 23       	and	r24, r24
     4c2:	29 f0       	breq	.+10     	; 0x4ce <SERVER_Task+0x66>
		{
			// Transition Detected O3 High -> Low : Item At End
// 			static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
// 			if(stepper.current != position[LL_GetClass(HEAD)]) PWM(0);
			_timer[3].state = READY;
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <_timer+0x23>
			//g_PauseRequest = 1;
			g_WDTimeout = 0;
     4ca:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
		}
		pin5state = 0;
     4ce:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2560>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     4d2:	67 9b       	sbis	0x0c, 7	; 12
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <SERVER_Task+0x8a>
	{
		if(!pin7state)
     4d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2558>
     4da:	81 11       	cpse	r24, r1
     4dc:	07 c0       	rjmp	.+14     	; 0x4ec <SERVER_Task+0x84>
		{
			// Transition Detected O2 Low -> High : Item Exits O1
			// Unblock the magnetic sensor when the item leaves O1
			// The magnetic sensor blocks once the magnetism of the piece is inferred
			_timer[2].state = READY;	
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <_timer+0x1a>
			_timer[7].state = READY;
     4e4:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <_timer+0x47>
			g_WDTimeout = 0;
     4e8:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
		}
		pin7state = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2558>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     4f2:	66 9b       	sbis	0x0c, 6	; 12
     4f4:	22 c0       	rjmp	.+68     	; 0x53a <SERVER_Task+0xd2>
	{
		if(!pin6state)
     4f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2559>
     4fa:	81 11       	cpse	r24, r1
     4fc:	1b c0       	rjmp	.+54     	; 0x534 <SERVER_Task+0xcc>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			if(STAGE2 == NULL)
     4fe:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
     502:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     506:	00 97       	sbiw	r24, 0x00	; 0
     508:	49 f4       	brne	.+18     	; 0x51c <SERVER_Task+0xb4>
			{
				STAGE2 = HEAD; // First Item enters stage 2
     50a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     50e:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     512:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <STAGE2+0x1>
     516:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <STAGE2>
			}
			else
			{
				STAGE2 = LL_Next(STAGE2); // Increment stage 2
     51a:	05 c0       	rjmp	.+10     	; 0x526 <SERVER_Task+0xbe>
     51c:	4f d0       	rcall	.+158    	; 0x5bc <LL_Next>
     51e:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <STAGE2+0x1>
     522:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <STAGE2>
			}
			g_WDTimeout = 0;
     526:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
			ADCSRA |= (1 << ADSC);
     52a:	ea e7       	ldi	r30, 0x7A	; 122
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	80 64       	ori	r24, 0x40	; 64
     532:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2559>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     53a:	65 9b       	sbis	0x0c, 5	; 12
     53c:	09 c0       	rjmp	.+18     	; 0x550 <SERVER_Task+0xe8>
	{
		if(!pin5state)
     53e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2560>
     542:	81 11       	cpse	r24, r1
     544:	02 c0       	rjmp	.+4      	; 0x54a <SERVER_Task+0xe2>
			
// 			static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
// 			LL_UpdateStatus(HEAD, EXPIRED);
// 			HEAD = LL_Next(HEAD);
// 			STEPPER_SetRotation(position[LL_GetClass(HEAD)], position[LL_GetClass(HEAD->next)]);
			g_WDTimeout = 0;
     546:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <g_WDTimeout>
		}
		pin5state = 1;			
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2560>
     550:	08 95       	ret

00000552 <WATCHDOG_Task>:
}

void WATCHDOG_Task(void* arg)
{
	// If this function runs twice then then no item has triggered an optical sensor for 4 seconds.
	if(g_WDTimeout > 1) SYS_Pause(__FUNCTION__); 
     552:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <g_WDTimeout>
     556:	82 30       	cpi	r24, 0x02	; 2
     558:	18 f0       	brcs	.+6      	; 0x560 <WATCHDOG_Task+0xe>
     55a:	85 e7       	ldi	r24, 0x75	; 117
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	95 d3       	rcall	.+1834   	; 0xc8a <SYS_Pause>
	g_WDTimeout++;
     560:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <g_WDTimeout>
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <g_WDTimeout>
     56a:	08 95       	ret

0000056c <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	7c 01       	movw	r14, r24
     578:	16 2f       	mov	r17, r22
     57a:	d4 2f       	mov	r29, r20
     57c:	c2 2f       	mov	r28, r18
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c4 d5       	rcall	.+2952   	; 0x110c <malloc>
     584:	fc 01       	movw	r30, r24
     586:	f1 82       	std	Z+1, r15	; 0x01
     588:	e0 82       	st	Z, r14
     58a:	12 83       	std	Z+2, r17	; 0x02
     58c:	d3 83       	std	Z+3, r29	; 0x03
     58e:	c4 83       	std	Z+4, r28	; 0x04
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	08 95       	ret

0000059c <LL_ItemListInit>:
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
     5a2:	86 e0       	ldi	r24, 0x06	; 6
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	b2 d5       	rcall	.+2916   	; 0x110c <malloc>
     5a8:	fc 01       	movw	r30, r24
     5aa:	d1 83       	std	Z+1, r29	; 0x01
     5ac:	c0 83       	st	Z, r28
     5ae:	15 82       	std	Z+5, r1	; 0x05
     5b0:	14 82       	std	Z+4, r1	; 0x04
     5b2:	13 82       	std	Z+3, r1	; 0x03
     5b4:	12 82       	std	Z+2, r1	; 0x02
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <LL_Next>:
     5bc:	fc 01       	movw	r30, r24
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	93 81       	ldd	r25, Z+3	; 0x03
     5c2:	08 95       	ret

000005c4 <LL_AddBack>:
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24
     5ca:	cb 01       	movw	r24, r22
     5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <LL_AddBack+0xc>
     5ce:	e9 01       	movw	r28, r18
     5d0:	2a 81       	ldd	r18, Y+2	; 0x02
     5d2:	3b 81       	ldd	r19, Y+3	; 0x03
     5d4:	21 15       	cp	r18, r1
     5d6:	31 05       	cpc	r19, r1
     5d8:	d1 f7       	brne	.-12     	; 0x5ce <LL_AddBack+0xa>
     5da:	e0 df       	rcall	.-64     	; 0x59c <LL_ItemListInit>
     5dc:	9b 83       	std	Y+3, r25	; 0x03
     5de:	8a 83       	std	Y+2, r24	; 0x02
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <LL_Size>:
     5e6:	dc 01       	movw	r26, r24
     5e8:	12 96       	adiw	r26, 0x02	; 2
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	13 97       	sbiw	r26, 0x03	; 3
     5f0:	30 97       	sbiw	r30, 0x00	; 0
     5f2:	41 f0       	breq	.+16     	; 0x604 <LL_Size+0x1e>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	8f 5f       	subi	r24, 0xFF	; 255
     5f8:	02 80       	ldd	r0, Z+2	; 0x02
     5fa:	f3 81       	ldd	r31, Z+3	; 0x03
     5fc:	e0 2d       	mov	r30, r0
     5fe:	30 97       	sbiw	r30, 0x00	; 0
     600:	d1 f7       	brne	.-12     	; 0x5f6 <LL_Size+0x10>
     602:	08 95       	ret
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	08 95       	ret

00000608 <LL_GetClass>:
     608:	dc 01       	movw	r26, r24
     60a:	ed 91       	ld	r30, X+
     60c:	fc 91       	ld	r31, X
     60e:	83 81       	ldd	r24, Z+3	; 0x03
     610:	08 95       	ret

00000612 <LL_GetRefl>:
     612:	dc 01       	movw	r26, r24
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	08 95       	ret

0000061e <LL_GetMag>:
     61e:	dc 01       	movw	r26, r24
     620:	ed 91       	ld	r30, X+
     622:	fc 91       	ld	r31, X
     624:	82 81       	ldd	r24, Z+2	; 0x02
     626:	08 95       	ret

00000628 <LL_UpdateRefl>:
     628:	dc 01       	movw	r26, r24
     62a:	ed 91       	ld	r30, X+
     62c:	fc 91       	ld	r31, X
     62e:	71 83       	std	Z+1, r23	; 0x01
     630:	60 83       	st	Z, r22
     632:	08 95       	ret

00000634 <LL_UpdateMag>:
     634:	dc 01       	movw	r26, r24
     636:	ed 91       	ld	r30, X+
     638:	fc 91       	ld	r31, X
     63a:	62 83       	std	Z+2, r22	; 0x02
     63c:	08 95       	ret

0000063e <LL_UpdateClass>:
     63e:	dc 01       	movw	r26, r24
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	63 83       	std	Z+3, r22	; 0x03
     646:	08 95       	ret

00000648 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     648:	dc 01       	movw	r26, r24
     64a:	ed 91       	ld	r30, X+
     64c:	fc 91       	ld	r31, X
     64e:	64 83       	std	Z+4, r22	; 0x04
     650:	08 95       	ret

00000652 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     652:	dc 01       	movw	r26, r24
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	84 81       	ldd	r24, Z+4	; 0x04
     65a:	08 95       	ret

0000065c <GPIO_Init>:
extern list* TAIL;
extern list* FRONT;

int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     660:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     662:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     664:	80 ef       	ldi	r24, 0xF0	; 240
     666:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     668:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     66a:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
}
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	08 95       	ret

00000672 <main>:
#include "CALIBRATE.h"
CALIBRATE();
return 0;
#endif
	
	SYS_Init();
     672:	50 d2       	rcall	.+1184   	; 0xb14 <SYS_Init>
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     674:	89 b1       	in	r24, 0x09	; 9
     676:	83 70       	andi	r24, 0x03	; 3
     678:	e9 f7       	brne	.-6      	; 0x674 <main+0x2>
		{	
			UART_SendString("Starting System!\r\n");
     67a:	83 e8       	ldi	r24, 0x83	; 131
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	16 d5       	rcall	.+2604   	; 0x10ac <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     680:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	44 e3       	ldi	r20, 0x34	; 52
     688:	52 e0       	ldi	r21, 0x02	; 2
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	93 d4       	rcall	.+2342   	; 0xfba <TIMER_Create>
		_timer[0].state = READY;
     694:	c2 e1       	ldi	r28, 0x12	; 18
     696:	d3 e0       	ldi	r29, 0x03	; 3
     698:	12 e0       	ldi	r17, 0x02	; 2
     69a:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	4d ec       	ldi	r20, 0xCD	; 205
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	86 d4       	rcall	.+2316   	; 0xfba <TIMER_Create>
		_timer[1].state = BLOCKED;
     6ae:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4b e3       	ldi	r20, 0x3B	; 59
     6b6:	51 e0       	ldi	r21, 0x01	; 1
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	7c d4       	rcall	.+2296   	; 0xfba <TIMER_Create>
		_timer[2].state = BLOCKED;
     6c2:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	48 e8       	ldi	r20, 0x88	; 136
     6ca:	51 e0       	ldi	r21, 0x01	; 1
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	72 d4       	rcall	.+2276   	; 0xfba <TIMER_Create>
		_timer[3].state = BLOCKED;
     6d6:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(1, 1, ADD_Task, NULL);		// Item Enter Handling
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	43 e3       	ldi	r20, 0x33	; 51
     6de:	52 e0       	ldi	r21, 0x02	; 2
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	68 d4       	rcall	.+2256   	; 0xfba <TIMER_Create>
		_timer[4].state = BLOCKED;
     6ea:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	42 e0       	ldi	r20, 0x02	; 2
     6f2:	52 e0       	ldi	r21, 0x02	; 2
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	82 e3       	ldi	r24, 0x32	; 50
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	5e d4       	rcall	.+2236   	; 0xfba <TIMER_Create>
		_timer[5].state = READY;
     6fe:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	48 ec       	ldi	r20, 0xC8	; 200
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	88 ee       	ldi	r24, 0xE8	; 232
     70e:	93 e0       	ldi	r25, 0x03	; 3
     710:	54 d4       	rcall	.+2216   	; 0xfba <TIMER_Create>
		_timer[6].state = READY;				
		
		TIMER_Create(4505,1, WATCHDOG_Task, NULL); // Software watchdog (2 seconds)
     712:	1e af       	std	Y+62, r17	; 0x3e
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	49 ea       	ldi	r20, 0xA9	; 169
     71a:	52 e0       	ldi	r21, 0x02	; 2
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	89 e9       	ldi	r24, 0x99	; 153
		_timer[7].state = BLOCKED;
     722:	91 e1       	ldi	r25, 0x11	; 17
     724:	4a d4       	rcall	.+2196   	; 0xfba <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     726:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_timer+0x47>
     72a:	86 e9       	ldi	r24, 0x96	; 150
     72c:	91 e0       	ldi	r25, 0x01	; 1
		
		PWM(0x80);
     72e:	be d4       	rcall	.+2428   	; 0x10ac <UART_SendString>
     730:	80 e8       	ldi	r24, 0x80	; 128
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	7d d0       	rcall	.+250    	; 0x830 <PWM>
	};
	
	int memory = 0;
     736:	78 94       	sei
     738:	e1 2c       	mov	r14, r1
					// Unknown non-magnetic object
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     73a:	f1 2c       	mov	r15, r1
     73c:	cc 24       	eor	r12, r12
     73e:	c3 94       	inc	r12
	while (1)
	{		
		//PORTC = PINE;
		// Check for a pause request
		// Only pause during idle time to properly restart the scheduler on unpause
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     740:	d1 2c       	mov	r13, r1
     742:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <g_PauseRequest>
     746:	88 23       	and	r24, r24
     748:	19 f0       	breq	.+6      	; 0x750 <main+0xde>
     74a:	88 ea       	ldi	r24, 0xA8	; 168
     74c:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     74e:	9d d2       	rcall	.+1338   	; 0xc8a <SYS_Pause>
     750:	c0 91 b5 02 	lds	r28, 0x02B5	; 0x8002b5 <HEAD>
		uint16_t reflVal; 
		

		while(temp)
     754:	d0 91 b6 02 	lds	r29, 0x02B6	; 0x8002b6 <HEAD+0x1>
		{
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     758:	20 97       	sbiw	r28, 0x00	; 0
     75a:	99 f3       	breq	.-26     	; 0x742 <main+0xd0>
     75c:	20 97       	sbiw	r28, 0x00	; 0
     75e:	09 f4       	brne	.+2      	; 0x762 <main+0xf0>
     760:	4f c0       	rjmp	.+158    	; 0x800 <main+0x18e>
     762:	ce 01       	movw	r24, r28
     764:	51 df       	rcall	.-350    	; 0x608 <LL_GetClass>
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	09 f0       	breq	.+2      	; 0x76c <main+0xfa>
     76a:	4a c0       	rjmp	.+148    	; 0x800 <main+0x18e>
     76c:	ce 01       	movw	r24, r28
     76e:	71 df       	rcall	.-286    	; 0x652 <LL_GetStatus>
			{
				//classify temp
				
				reflVal = LL_GetRefl(temp);				
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	09 f0       	breq	.+2      	; 0x776 <main+0x104>
     774:	45 c0       	rjmp	.+138    	; 0x800 <main+0x18e>
     776:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     778:	4c df       	rcall	.-360    	; 0x612 <LL_GetRefl>
     77a:	8c 01       	movw	r16, r24
     77c:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     77e:	4f df       	rcall	.-354    	; 0x61e <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     780:	88 23       	and	r24, r24
     782:	91 f0       	breq	.+36     	; 0x7a8 <main+0x136>
     784:	c8 01       	movw	r24, r16
     786:	44 97       	sbiw	r24, 0x14	; 20
     788:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     78a:	91 05       	cpc	r25, r1
     78c:	20 f4       	brcc	.+8      	; 0x796 <main+0x124>
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     792:	55 df       	rcall	.-342    	; 0x63e <LL_UpdateClass>
     794:	1a c0       	rjmp	.+52     	; 0x7ca <main+0x158>
     796:	0b 52       	subi	r16, 0x2B	; 43
     798:	11 40       	sbci	r17, 0x01	; 1
     79a:	00 36       	cpi	r16, 0x60	; 96
					{
						LL_UpdateClass(temp, STEEL);
     79c:	11 40       	sbci	r17, 0x01	; 1
     79e:	a8 f4       	brcc	.+42     	; 0x7ca <main+0x158>
     7a0:	63 e0       	ldi	r22, 0x03	; 3
     7a2:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     7a4:	4c df       	rcall	.-360    	; 0x63e <LL_UpdateClass>
     7a6:	11 c0       	rjmp	.+34     	; 0x7ca <main+0x158>
     7a8:	c8 01       	movw	r24, r16
     7aa:	86 57       	subi	r24, 0x76	; 118
     7ac:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     7ae:	8e 97       	sbiw	r24, 0x2e	; 46
     7b0:	20 f4       	brcc	.+8      	; 0x7ba <main+0x148>
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7b6:	43 df       	rcall	.-378    	; 0x63e <LL_UpdateClass>
     7b8:	08 c0       	rjmp	.+16     	; 0x7ca <main+0x158>
     7ba:	0b 53       	subi	r16, 0x3B	; 59
     7bc:	13 40       	sbci	r17, 0x03	; 3
     7be:	00 33       	cpi	r16, 0x30	; 48
				{
					LL_UpdateClass(temp, WHITE);
     7c0:	11 05       	cpc	r17, r1
     7c2:	18 f4       	brcc	.+6      	; 0x7ca <main+0x158>
     7c4:	60 e0       	ldi	r22, 0x00	; 0
				}
				else
				{
					// Unknown non-magnetic object
				}
				if(memory == 0)
     7c6:	ce 01       	movw	r24, r28
     7c8:	3a df       	rcall	.-396    	; 0x63e <LL_UpdateClass>
     7ca:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     7cc:	f1 04       	cpc	r15, r1
     7ce:	c1 f4       	brne	.+48     	; 0x800 <main+0x18e>
     7d0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     7d4:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     7d8:	17 df       	rcall	.-466    	; 0x608 <LL_GetClass>
     7da:	e8 2f       	mov	r30, r24
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	e1 5f       	subi	r30, 0xF1	; 241
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	10 81       	ld	r17, Z
     7e4:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
     7e8:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     7ec:	0d df       	rcall	.-486    	; 0x608 <LL_GetClass>
     7ee:	e8 2f       	mov	r30, r24
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	e1 5f       	subi	r30, 0xF1	; 241
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	80 81       	ld	r24, Z
     7f8:	61 2f       	mov	r22, r17
					memory = 1;
     7fa:	a2 d0       	rcall	.+324    	; 0x940 <STEPPER_SetRotation>
     7fc:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     7fe:	fd 2c       	mov	r15, r13
     800:	ce 01       	movw	r24, r28
     802:	dc de       	rcall	.-584    	; 0x5bc <LL_Next>
     804:	ec 01       	movw	r28, r24

		list* temp = HEAD;
		uint16_t reflVal; 
		

		while(temp)
     806:	89 2b       	or	r24, r25
     808:	09 f0       	breq	.+2      	; 0x80c <main+0x19a>
     80a:	a8 cf       	rjmp	.-176    	; 0x75c <main+0xea>
     80c:	9a cf       	rjmp	.-204    	; 0x742 <main+0xd0>

0000080e <__vector_default>:
  	}
	return 0;
}

ISR(BADISR_vect)
{
     80e:	1f 92       	push	r1
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	0f 92       	push	r0
     816:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     818:	8a ea       	ldi	r24, 0xAA	; 170
     81a:	88 b9       	out	0x08, r24	; 8
     81c:	fe cf       	rjmp	.-4      	; 0x81a <__vector_default+0xc>

0000081e <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     81e:	84 b5       	in	r24, 0x24	; 36
     820:	83 68       	ori	r24, 0x83	; 131
     822:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     824:	85 b5       	in	r24, 0x25	; 37
     826:	83 60       	ori	r24, 0x03	; 3
     828:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     82a:	80 e8       	ldi	r24, 0x80	; 128
     82c:	87 bd       	out	0x27, r24	; 39
     82e:	08 95       	ret

00000830 <PWM>:
}

void PWM(const int dutyCycle)
{
    //OCR0A = 90;
	OCR0A = 200;
     830:	28 ec       	ldi	r18, 0xC8	; 200
     832:	27 bd       	out	0x27, r18	; 39
	if (dutyCycle) 
     834:	89 2b       	or	r24, r25
     836:	31 f0       	breq	.+12     	; 0x844 <PWM+0x14>
	{
		gMotorOn = 1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <gMotorOn>
		PORTB = ~0x0E;
     83e:	81 ef       	ldi	r24, 0xF1	; 241
     840:	85 b9       	out	0x05, r24	; 5
     842:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     844:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <gMotorOn>
		PORTB = ~0x0F;
     848:	80 ef       	ldi	r24, 0xF0	; 240
     84a:	85 b9       	out	0x05, r24	; 5
     84c:	08 95       	ret

0000084e <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     84e:	f8 94       	cli
	g_StepperInitialized = 0;
     850:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <g_StepperInitialized>
	stepper._stepNum = 0;
     854:	e7 eb       	ldi	r30, 0xB7	; 183
     856:	f2 e0       	ldi	r31, 0x02	; 2
     858:	10 82       	st	Z, r1
	stepper.direction = 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     85e:	13 82       	std	Z+3, r1	; 0x03
     860:	12 82       	std	Z+2, r1	; 0x02
	//Rotate 200 Steps to find the hall sensor
	stepper.current = 0;
     862:	14 82       	std	Z+4, r1	; 0x04
	stepper._targetStep = 200;
     864:	88 ec       	ldi	r24, 0xC8	; 200
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	96 83       	std	Z+6, r25	; 0x06
     86a:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     86c:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     86e:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     870:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     872:	13 86       	std	Z+11, r1	; 0x0b
	stepper._willContinue = 0;
     874:	11 86       	std	Z+9, r1	; 0x09
	PORTA = 0x30;
     876:	80 e3       	ldi	r24, 0x30	; 48
     878:	82 b9       	out	0x02, r24	; 2
	//Initial delay of 20ms
	OCR2A = 0x94;
     87a:	84 e9       	ldi	r24, 0x94	; 148
     87c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     880:	e0 eb       	ldi	r30, 0xB0	; 176
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	80 81       	ld	r24, Z
     886:	82 60       	ori	r24, 0x02	; 2
     888:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     88a:	e0 e7       	ldi	r30, 0x70	; 112
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	82 60       	ori	r24, 0x02	; 2
     892:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     894:	e1 eb       	ldi	r30, 0xB1	; 177
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	87 60       	ori	r24, 0x07	; 7
     89c:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21))
	// enable interrupts
	sei();
     89e:	78 94       	sei
     8a0:	08 95       	ret

000008a2 <STEPPER_NumSteps>:
}

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	86 1b       	sub	r24, r22
     8a6:	91 09       	sbc	r25, r1
	if (steps >= 0)
     8a8:	52 f0       	brmi	.+20     	; 0x8be <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     8aa:	85 36       	cpi	r24, 0x65	; 101
     8ac:	91 05       	cpc	r25, r1
     8ae:	8c f0       	brlt	.+34     	; 0x8d2 <STEPPER_NumSteps+0x30>
     8b0:	24 e6       	ldi	r18, 0x64	; 100
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	a9 01       	movw	r20, r18
     8b6:	48 1b       	sub	r20, r24
     8b8:	59 0b       	sbc	r21, r25
     8ba:	ca 01       	movw	r24, r20
     8bc:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     8be:	8c 39       	cpi	r24, 0x9C	; 156
     8c0:	5f ef       	ldi	r21, 0xFF	; 255
     8c2:	95 07       	cpc	r25, r21
     8c4:	34 f4       	brge	.+12     	; 0x8d2 <STEPPER_NumSteps+0x30>
     8c6:	2c e9       	ldi	r18, 0x9C	; 156
     8c8:	3f ef       	ldi	r19, 0xFF	; 255
     8ca:	a9 01       	movw	r20, r18
     8cc:	48 1b       	sub	r20, r24
     8ce:	59 0b       	sbc	r21, r25
     8d0:	ca 01       	movw	r24, r20
	}
	return steps;
}
     8d2:	08 95       	ret

000008d4 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     8d8:	c7 eb       	ldi	r28, 0xB7	; 183
     8da:	d2 e0       	ldi	r29, 0x02	; 2
     8dc:	6c 81       	ldd	r22, Y+4	; 0x04
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	9b 81       	ldd	r25, Y+3	; 0x03
     8e2:	df df       	rcall	.-66     	; 0x8a2 <STEPPER_NumSteps>
     8e4:	9e 83       	std	Y+6, r25	; 0x06
     8e6:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     8e8:	6a 81       	ldd	r22, Y+2	; 0x02
     8ea:	7b 81       	ldd	r23, Y+3	; 0x03
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	d9 df       	rcall	.-78     	; 0x8a2 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     8f0:	2d 81       	ldd	r18, Y+5	; 0x05
     8f2:	3e 81       	ldd	r19, Y+6	; 0x06
     8f4:	33 23       	and	r19, r19
     8f6:	14 f4       	brge	.+4      	; 0x8fc <STEPPER_Rotate+0x28>
     8f8:	28 e0       	ldi	r18, 0x08	; 8
     8fa:	01 c0       	rjmp	.+2      	; 0x8fe <STEPPER_Rotate+0x2a>
     8fc:	24 e0       	ldi	r18, 0x04	; 4
     8fe:	e7 eb       	ldi	r30, 0xB7	; 183
     900:	f2 e0       	ldi	r31, 0x02	; 2
     902:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     904:	45 81       	ldd	r20, Z+5	; 0x05
     906:	56 81       	ldd	r21, Z+6	; 0x06
     908:	84 9f       	mul	r24, r20
     90a:	90 01       	movw	r18, r0
     90c:	85 9f       	mul	r24, r21
     90e:	30 0d       	add	r19, r0
     910:	94 9f       	mul	r25, r20
     912:	30 0d       	add	r19, r0
     914:	11 24       	eor	r1, r1
     916:	83 2f       	mov	r24, r19
     918:	80 95       	com	r24
     91a:	88 1f       	adc	r24, r24
     91c:	88 27       	eor	r24, r24
     91e:	88 1f       	adc	r24, r24
     920:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     922:	85 81       	ldd	r24, Z+5	; 0x05
     924:	96 81       	ldd	r25, Z+6	; 0x06
     926:	99 23       	and	r25, r25
     928:	1c f4       	brge	.+6      	; 0x930 <STEPPER_Rotate+0x5c>
     92a:	91 95       	neg	r25
     92c:	81 95       	neg	r24
     92e:	91 09       	sbc	r25, r1
     930:	e7 eb       	ldi	r30, 0xB7	; 183
     932:	f2 e0       	ldi	r31, 0x02	; 2
     934:	96 83       	std	Z+6, r25	; 0x06
     936:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     938:	17 82       	std	Z+7, r1	; 0x07
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
	cli();
     944:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	c7 eb       	ldi	r28, 0xB7	; 183
     94a:	d2 e0       	ldi	r29, 0x02	; 2
     94c:	9b 83       	std	Y+3, r25	; 0x03
     94e:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     950:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     952:	c0 df       	rcall	.-128    	; 0x8d4 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     954:	eb 85       	ldd	r30, Y+11	; 0x0b
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	eb 5e       	subi	r30, 0xEB	; 235
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	80 81       	ld	r24, Z
     95e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     962:	78 94       	sei
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	0b b6       	in	r0, 0x3b	; 59
     976:	0f 92       	push	r0
     978:	2f 93       	push	r18
     97a:	3f 93       	push	r19
     97c:	8f 93       	push	r24
     97e:	9f 93       	push	r25
     980:	af 93       	push	r26
     982:	bf 93       	push	r27
     984:	ef 93       	push	r30
     986:	ff 93       	push	r31
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 d0       	rcall	.+0      	; 0x98e <__vector_13+0x24>
     98e:	00 d0       	rcall	.+0      	; 0x990 <__vector_13+0x26>
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     994:	86 e3       	ldi	r24, 0x36	; 54
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	9e e2       	ldi	r25, 0x2E	; 46
     99e:	ad e2       	ldi	r26, 0x2D	; 45
     9a0:	b5 e3       	ldi	r27, 0x35	; 53
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	9a 83       	std	Y+2, r25	; 0x02
     9a6:	ab 83       	std	Y+3, r26	; 0x03
     9a8:	bc 83       	std	Y+4, r27	; 0x04
		
	if (stepper._currentStep < stepper._targetStep)
     9aa:	e7 eb       	ldi	r30, 0xB7	; 183
     9ac:	f2 e0       	ldi	r31, 0x02	; 2
     9ae:	87 81       	ldd	r24, Z+7	; 0x07
     9b0:	25 81       	ldd	r18, Z+5	; 0x05
     9b2:	36 81       	ldd	r19, Z+6	; 0x06
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	82 17       	cp	r24, r18
     9b8:	93 07       	cpc	r25, r19
     9ba:	0c f0       	brlt	.+2      	; 0x9be <__vector_13+0x54>
     9bc:	5a c0       	rjmp	.+180    	; 0xa72 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     9be:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <stepper+0x1>
     9c2:	84 30       	cpi	r24, 0x04	; 4
     9c4:	51 f4       	brne	.+20     	; 0x9da <__vector_13+0x70>
     9c6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <stepper>
     9ca:	e1 e0       	ldi	r30, 0x01	; 1
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ec 0f       	add	r30, r28
     9d0:	fd 1f       	adc	r31, r29
     9d2:	e8 0f       	add	r30, r24
     9d4:	f1 1d       	adc	r31, r1
     9d6:	80 81       	ld	r24, Z
     9d8:	0d c0       	rjmp	.+26     	; 0x9f4 <__vector_13+0x8a>
     9da:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <stepper>
     9de:	e3 e0       	ldi	r30, 0x03	; 3
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	e8 1b       	sub	r30, r24
     9e4:	f1 09       	sbc	r31, r1
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	8c 0f       	add	r24, r28
     9ec:	9d 1f       	adc	r25, r29
     9ee:	e8 0f       	add	r30, r24
     9f0:	f9 1f       	adc	r31, r25
     9f2:	80 81       	ld	r24, Z
     9f4:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     9f6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <stepper>
     9fa:	83 30       	cpi	r24, 0x03	; 3
     9fc:	21 f0       	breq	.+8      	; 0xa06 <__vector_13+0x9c>
     9fe:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <stepper>
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <__vector_13+0x9e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	e7 eb       	ldi	r30, 0xB7	; 183
     a0a:	f2 e0       	ldi	r31, 0x02	; 2
     a0c:	80 83       	st	Z, r24

		stepper._currentStep++;
     a0e:	87 81       	ldd	r24, Z+7	; 0x07
     a10:	8f 5f       	subi	r24, 0xFF	; 255
     a12:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     a14:	85 81       	ldd	r24, Z+5	; 0x05
     a16:	96 81       	ldd	r25, Z+6	; 0x06
     a18:	27 81       	ldd	r18, Z+7	; 0x07
     a1a:	82 1b       	sub	r24, r18
     a1c:	91 09       	sbc	r25, r1
     a1e:	06 97       	sbiw	r24, 0x06	; 6
     a20:	74 f4       	brge	.+28     	; 0xa3e <__vector_13+0xd4>
     a22:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <stepper+0xb>
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	eb 5e       	subi	r30, 0xEB	; 235
     a2a:	fe 4f       	sbci	r31, 0xFE	; 254
     a2c:	80 81       	ld	r24, Z
     a2e:	84 39       	cpi	r24, 0x94	; 148
     a30:	30 f4       	brcc	.+12     	; 0xa3e <__vector_13+0xd4>
		{
			stepper._accellStep--;
     a32:	e7 eb       	ldi	r30, 0xB7	; 183
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	83 85       	ldd	r24, Z+11	; 0x0b
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	83 87       	std	Z+11, r24	; 0x0b
     a3c:	11 c0       	rjmp	.+34     	; 0xa60 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a3e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <stepper+0x7>
     a42:	86 30       	cpi	r24, 0x06	; 6
     a44:	68 f0       	brcs	.+26     	; 0xa60 <__vector_13+0xf6>
     a46:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <stepper+0xb>
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	eb 5e       	subi	r30, 0xEB	; 235
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	80 81       	ld	r24, Z
     a52:	81 34       	cpi	r24, 0x41	; 65
     a54:	28 f0       	brcs	.+10     	; 0xa60 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     a56:	e7 eb       	ldi	r30, 0xB7	; 183
     a58:	f2 e0       	ldi	r31, 0x02	; 2
     a5a:	83 85       	ldd	r24, Z+11	; 0x0b
     a5c:	8f 5f       	subi	r24, 0xFF	; 255
     a5e:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a60:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <stepper+0xb>
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	eb 5e       	subi	r30, 0xEB	; 235
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	80 81       	ld	r24, Z
     a6c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a70:	29 c0       	rjmp	.+82     	; 0xac4 <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     a72:	e7 eb       	ldi	r30, 0xB7	; 183
     a74:	f2 e0       	ldi	r31, 0x02	; 2
     a76:	87 81       	ldd	r24, Z+7	; 0x07
     a78:	25 81       	ldd	r18, Z+5	; 0x05
     a7a:	36 81       	ldd	r19, Z+6	; 0x06
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	82 17       	cp	r24, r18
     a80:	93 07       	cpc	r25, r19
     a82:	01 f5       	brne	.+64     	; 0xac4 <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a84:	82 81       	ldd	r24, Z+2	; 0x02
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a8a:	81 85       	ldd	r24, Z+9	; 0x09
     a8c:	88 23       	and	r24, r24
     a8e:	19 f0       	breq	.+6      	; 0xa96 <__vector_13+0x12c>
     a90:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <stepper+0xb>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <__vector_13+0x12e>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	a7 eb       	ldi	r26, 0xB7	; 183
     a9a:	b2 e0       	ldi	r27, 0x02	; 2
     a9c:	1b 96       	adiw	r26, 0x0b	; 11
     a9e:	8c 93       	st	X, r24
     aa0:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     aa2:	1b 96       	adiw	r26, 0x0b	; 11
     aa4:	ec 91       	ld	r30, X
     aa6:	1b 97       	sbiw	r26, 0x0b	; 11
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	eb 5e       	subi	r30, 0xEB	; 235
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	80 81       	ld	r24, Z
     ab0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     ab4:	19 96       	adiw	r26, 0x09	; 9
     ab6:	8c 91       	ld	r24, X
     ab8:	81 11       	cpse	r24, r1
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <__vector_13+0x156>
     abc:	82 b1       	in	r24, 0x02	; 2
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <__vector_13+0x158>
     ac0:	82 b1       	in	r24, 0x02	; 2
     ac2:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     ac4:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <stepper+0xa>
     ac8:	81 11       	cpse	r24, r1
     aca:	0f c0       	rjmp	.+30     	; 0xaea <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     acc:	63 99       	sbic	0x0c, 3	; 12
     ace:	0d c0       	rjmp	.+26     	; 0xaea <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     ad0:	e7 eb       	ldi	r30, 0xB7	; 183
     ad2:	f2 e0       	ldi	r31, 0x02	; 2
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     ad8:	10 82       	st	Z, r1
			stepper.direction = 1;
     ada:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     adc:	13 82       	std	Z+3, r1	; 0x03
     ade:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     ae0:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ae2:	16 82       	std	Z+6, r1	; 0x06
     ae4:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ae6:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     ae8:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0b be       	out	0x3b, r0	; 59
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	0f 90       	pop	r0
     b10:	1f 90       	pop	r1
     b12:	18 95       	reti

00000b14 <SYS_Init>:
 */ 

#include "sys.h"

void SYS_Init()
{
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	0f 93       	push	r16
     b22:	1f 93       	push	r17
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	e2 97       	sbiw	r28, 0x32	; 50
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
	// Initialize system
	
		
	cli();
     b38:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
     b3a:	e1 e6       	ldi	r30, 0x61	; 97
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	80 83       	st	Z, r24
	CLKPR = 0;
     b42:	10 82       	st	Z, r1
	UART_Init();
     b44:	9b d2       	rcall	.+1334   	; 0x107c <UART_Init>
	GPIO_Init();
     b46:	8a dd       	rcall	.-1260   	; 0x65c <GPIO_Init>
	ADC_Init();
     b48:	c6 da       	rcall	.-2676   	; 0xd6 <ADC_Init>
	STEPPER_Init();	
     b4a:	81 de       	rcall	.-766    	; 0x84e <STEPPER_Init>
     b4c:	1a d2       	rcall	.+1076   	; 0xf82 <TIMER_Init>
	TIMER_Init();
     b4e:	67 de       	rcall	.-818    	; 0x81e <PWM_Init>
     b50:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <g_ADCCount+0x1>
	PWM_Init();
     b54:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <g_ADCCount>
	g_ADCCount = 0;
     b58:	84 e1       	ldi	r24, 0x14	; 20
     b5a:	ea ec       	ldi	r30, 0xCA	; 202
     b5c:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     b5e:	df 01       	movw	r26, r30
     b60:	1d 92       	st	X+, r1
     b62:	8a 95       	dec	r24
     b64:	e9 f7       	brne	.-6      	; 0xb60 <SYS_Init+0x4c>
     b66:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <g_ADCFlag>
     b6a:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <g_PauseRequest>
	g_ADCFlag = 0;
     b6e:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <HEAD+0x1>
	g_PauseRequest = 0;
     b72:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <HEAD>
// 	extern list* STAGE2;
// 	extern list* TAIL;
//	extern list* FRONT;	
	itemNode* initNode = NULL;
	
	HEAD = NULL;
     b76:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <TAIL+0x1>
     b7a:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <TAIL>
	TAIL = NULL;
     b7e:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <STAGE1+0x1>
     b82:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <STAGE1>
	STAGE1 = NULL;
     b86:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <STAGE2+0x1>
     b8a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <STAGE2>
	STAGE2 = NULL;
     b8e:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <FRONT+0x1>
     b92:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <FRONT>
	FRONT = NULL;
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	44 e0       	ldi	r20, 0x04	; 4

	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     b9a:	6f ef       	ldi	r22, 0xFF	; 255
     b9c:	89 ee       	ldi	r24, 0xE9	; 233
     b9e:	9d ef       	ldi	r25, 0xFD	; 253
     ba0:	e5 dc       	rcall	.-1590   	; 0x56c <LL_ItemInit>
     ba2:	fc dc       	rcall	.-1544   	; 0x59c <LL_ItemListInit>
     ba4:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     ba8:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <HEAD>
     bac:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <FRONT+0x1>
     bb0:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <FRONT>
	FRONT = HEAD;
     bb4:	1a ef       	ldi	r17, 0xFA	; 250
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f8 ee       	ldi	r31, 0xE8	; 232
     bba:	ef 2e       	mov	r14, r31
     bbc:	fd ef       	ldi	r31, 0xFD	; 253
     bbe:	ff 2e       	mov	r15, r31
     bc0:	f0 2d       	mov	r31, r0
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	44 e0       	ldi	r20, 0x04	; 4
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     bc6:	61 2f       	mov	r22, r17
     bc8:	c7 01       	movw	r24, r14
     bca:	d0 dc       	rcall	.-1632   	; 0x56c <LL_ItemInit>
     bcc:	bc 01       	movw	r22, r24
     bce:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     bd2:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     bd6:	f6 dc       	rcall	.-1556   	; 0x5c4 <LL_AddBack>
     bd8:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <TAIL+0x1>
     bdc:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <TAIL>
     be0:	b1 e0       	ldi	r27, 0x01	; 1
     be2:	eb 1a       	sub	r14, r27
     be4:	f1 08       	sbc	r15, r1
     be6:	11 50       	subi	r17, 0x01	; 1
     be8:	1a 3c       	cpi	r17, 0xCA	; 202
     bea:	59 f7       	brne	.-42     	; 0xbc2 <SYS_Init+0xae>
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;
	for(int i = 0; i < 48; i++)
     bec:	05 e0       	ldi	r16, 0x05	; 5
     bee:	10 e0       	ldi	r17, 0x00	; 0
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	45 e0       	ldi	r20, 0x05	; 5
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     bf4:	6a ef       	ldi	r22, 0xFA	; 250
     bf6:	88 ee       	ldi	r24, 0xE8	; 232
     bf8:	9d ef       	ldi	r25, 0xFD	; 253
     bfa:	b8 dc       	rcall	.-1680   	; 0x56c <LL_ItemInit>
     bfc:	bc 01       	movw	r22, r24
     bfe:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <HEAD>
		LL_AddBack(HEAD,initNode);
     c02:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <HEAD+0x1>
     c06:	de dc       	rcall	.-1604   	; 0x5c4 <LL_AddBack>
     c08:	01 50       	subi	r16, 0x01	; 1
     c0a:	11 09       	sbc	r17, r1
     c0c:	89 f7       	brne	.-30     	; 0xbf0 <SYS_Init+0xdc>
     c0e:	00 91 c8 02 	lds	r16, 0x02C8	; 0x8002c8 <TAIL>
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
     c12:	10 91 c9 02 	lds	r17, 0x02C9	; 0x8002c9 <TAIL+0x1>
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}
	
	char temp[50];
	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
     c16:	f8 01       	movw	r30, r16
     c18:	b2 80       	ldd	r11, Z+2	; 0x02
     c1a:	a3 80       	ldd	r10, Z+3	; 0x03
     c1c:	d0 90 c3 02 	lds	r13, 0x02C3	; 0x8002c3 <FRONT>
     c20:	c0 90 c4 02 	lds	r12, 0x02C4	; 0x8002c4 <FRONT+0x1>
     c24:	f0 90 b5 02 	lds	r15, 0x02B5	; 0x8002b5 <HEAD>
     c28:	e0 90 b6 02 	lds	r14, 0x02B6	; 0x8002b6 <HEAD+0x1>
     c2c:	8f 2d       	mov	r24, r15
     c2e:	9e 2d       	mov	r25, r14
     c30:	da dc       	rcall	.-1612   	; 0x5e6 <LL_Size>
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	1f 93       	push	r17
     c3c:	0f 93       	push	r16
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	1f 92       	push	r1
     c44:	8f 93       	push	r24
     c46:	8d ea       	ldi	r24, 0xAD	; 173
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	9f 93       	push	r25
     c4c:	8f 93       	push	r24
     c4e:	8e 01       	movw	r16, r28
     c50:	0f 5f       	subi	r16, 0xFF	; 255
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	1f 93       	push	r17
     c56:	0f 93       	push	r16
     c58:	7a d3       	rcall	.+1780   	; 0x134e <sprintf>
     c5a:	c8 01       	movw	r24, r16
     c5c:	27 d2       	rcall	.+1102   	; 0x10ac <UART_SendString>
	UART_SendString(temp);
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
}
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	e2 96       	adiw	r28, 0x32	; 50
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	08 95       	ret

00000c8a <SYS_Pause>:
     c8a:	3f 92       	push	r3
     c8c:	4f 92       	push	r4
     c8e:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     c90:	6f 92       	push	r6
     c92:	7f 92       	push	r7
     c94:	8f 92       	push	r8
     c96:	9f 92       	push	r9
     c98:	af 92       	push	r10
     c9a:	bf 92       	push	r11
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ef 92       	push	r14
     ca2:	ff 92       	push	r15
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	c8 5c       	subi	r28, 0xC8	; 200
     cb2:	d1 09       	sbc	r29, r1
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	f8 2e       	mov	r15, r24
     cc0:	e9 2e       	mov	r14, r25
	cli();
     cc2:	f8 94       	cli
	PWM(0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	b3 dd       	rcall	.-1178   	; 0x830 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     cca:	00 91 c3 02 	lds	r16, 0x02C3	; 0x8002c3 <FRONT>
     cce:	10 91 c4 02 	lds	r17, 0x02C4	; 0x8002c4 <FRONT+0x1>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	8a ed       	ldi	r24, 0xDA	; 218
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	7c 01       	movw	r14, r24
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	32 d3       	rcall	.+1636   	; 0x134e <sprintf>
	UART_SendString(buffer);
     cea:	c7 01       	movw	r24, r14
     cec:	df d1       	rcall	.+958    	; 0x10ac <UART_SendString>
     cee:	0f 90       	pop	r0

	
	while (LL_GetClass(temp) != END_OF_LIST)
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
     cfa:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     cfc:	f1 2c       	mov	r15, r1
     cfe:	0f 2e       	mov	r0, r31
	
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     d00:	f5 ef       	ldi	r31, 0xF5	; 245
     d02:	af 2e       	mov	r10, r31
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	bf 2e       	mov	r11, r31
     d08:	f0 2d       	mov	r31, r0
     d0a:	6e 01       	movw	r12, r28
     d0c:	97 e9       	ldi	r25, 0x97	; 151
     d0e:	c9 0e       	add	r12, r25
     d10:	d1 1c       	adc	r13, r1
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <SYS_Pause+0xd8>
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	
	while (LL_GetClass(temp) != END_OF_LIST)
     d14:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     d16:	ee 1a       	sub	r14, r30
     d18:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     d1a:	c8 01       	movw	r24, r16
     d1c:	9a dc       	rcall	.-1740   	; 0x652 <LL_GetStatus>
     d1e:	78 2e       	mov	r7, r24
     d20:	c8 01       	movw	r24, r16
     d22:	72 dc       	rcall	.-1820   	; 0x608 <LL_GetClass>
     d24:	88 2e       	mov	r8, r24
     d26:	c8 01       	movw	r24, r16
     d28:	7a dc       	rcall	.-1804   	; 0x61e <LL_GetMag>
     d2a:	98 2e       	mov	r9, r24
     d2c:	c8 01       	movw	r24, r16
     d2e:	71 dc       	rcall	.-1822   	; 0x612 <LL_GetRefl>
     d30:	1f 92       	push	r1
     d32:	7f 92       	push	r7
     d34:	1f 92       	push	r1
     d36:	8f 92       	push	r8
     d38:	1f 92       	push	r1
     d3a:	9f 92       	push	r9
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	ff 92       	push	r15
     d42:	ef 92       	push	r14
     d44:	bf 92       	push	r11
     d46:	af 92       	push	r10
     d48:	df 92       	push	r13
     d4a:	cf 92       	push	r12
     d4c:	00 d3       	rcall	.+1536   	; 0x134e <sprintf>
		UART_SendString(listbuff);
     d4e:	c6 01       	movw	r24, r12
     d50:	ad d1       	rcall	.+858    	; 0x10ac <UART_SendString>
     d52:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     d54:	33 dc       	rcall	.-1946   	; 0x5bc <LL_Next>
     d56:	8c 01       	movw	r16, r24
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	c8 01       	movw	r24, r16
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	
	while (LL_GetClass(temp) != END_OF_LIST)
     d64:	51 dc       	rcall	.-1886   	; 0x608 <LL_GetClass>
     d66:	85 30       	cpi	r24, 0x05	; 5
     d68:	a9 f6       	brne	.-86     	; 0xd14 <SYS_Pause+0x8a>
     d6a:	0f 2e       	mov	r0, r31
     d6c:	f2 e1       	ldi	r31, 0x12	; 18
     d6e:	cf 2e       	mov	r12, r31
     d70:	f3 e0       	ldi	r31, 0x03	; 3
     d72:	df 2e       	mov	r13, r31
     d74:	f0 2d       	mov	r31, r0
     d76:	00 e0       	ldi	r16, 0x00	; 0
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f9 e2       	ldi	r31, 0x29	; 41
	}
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     d7e:	af 2e       	mov	r10, r31
     d80:	f2 e0       	ldi	r31, 0x02	; 2
     d82:	bf 2e       	mov	r11, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	7e 01       	movw	r14, r28
     d88:	97 e9       	ldi	r25, 0x97	; 151
     d8a:	e9 0e       	add	r14, r25
     d8c:	f1 1c       	adc	r15, r1
     d8e:	f6 01       	movw	r30, r12
     d90:	80 85       	ldd	r24, Z+8	; 0x08
     d92:	1f 92       	push	r1
     d94:	8f 93       	push	r24
     d96:	1f 93       	push	r17
     d98:	0f 93       	push	r16
     d9a:	bf 92       	push	r11
     d9c:	af 92       	push	r10
     d9e:	ff 92       	push	r15
     da0:	ef 92       	push	r14
     da2:	d5 d2       	rcall	.+1450   	; 0x134e <sprintf>
     da4:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     da6:	82 d1       	rcall	.+772    	; 0x10ac <UART_SendString>
     da8:	0f 5f       	subi	r16, 0xFF	; 255
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	for(int i = 0; i < 7; i++)
     dac:	f9 e0       	ldi	r31, 0x09	; 9
     dae:	cf 0e       	add	r12, r31
     db0:	d1 1c       	adc	r13, r1
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	07 30       	cpi	r16, 0x07	; 7
     dbe:	11 05       	cpc	r17, r1
     dc0:	31 f7       	brne	.-52     	; 0xd8e <SYS_Pause+0x104>
     dc2:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <STAGE2>
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     dc6:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <STAGE2+0x1>
     dca:	23 dc       	rcall	.-1978   	; 0x612 <LL_GetRefl>
     dcc:	48 2e       	mov	r4, r24
     dce:	39 2e       	mov	r3, r25
     dd0:	60 90 5a 03 	lds	r6, 0x035A	; 0x80035a <STAGE2>
     dd4:	50 90 5b 03 	lds	r5, 0x035B	; 0x80035b <STAGE2+0x1>
     dd8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <STAGE1>
     ddc:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <STAGE1+0x1>
     de0:	1e dc       	rcall	.-1988   	; 0x61e <LL_GetMag>
     de2:	78 2e       	mov	r7, r24
     de4:	90 90 10 03 	lds	r9, 0x0310	; 0x800310 <STAGE1>
     de8:	80 90 11 03 	lds	r8, 0x0311	; 0x800311 <STAGE1+0x1>
     dec:	00 91 c8 02 	lds	r16, 0x02C8	; 0x8002c8 <TAIL>
     df0:	10 91 c9 02 	lds	r17, 0x02C9	; 0x8002c9 <TAIL+0x1>
     df4:	f8 01       	movw	r30, r16
     df6:	b2 80       	ldd	r11, Z+2	; 0x02
     df8:	a3 80       	ldd	r10, Z+3	; 0x03
     dfa:	d0 90 c3 02 	lds	r13, 0x02C3	; 0x8002c3 <FRONT>
     dfe:	c0 90 c4 02 	lds	r12, 0x02C4	; 0x8002c4 <FRONT+0x1>
     e02:	f0 90 b5 02 	lds	r15, 0x02B5	; 0x8002b5 <HEAD>
     e06:	e0 90 b6 02 	lds	r14, 0x02B6	; 0x8002b6 <HEAD+0x1>
     e0a:	8f 2d       	mov	r24, r15
     e0c:	9e 2d       	mov	r25, r14
     e0e:	eb db       	rcall	.-2090   	; 0x5e6 <LL_Size>
     e10:	3f 92       	push	r3
     e12:	4f 92       	push	r4
     e14:	5f 92       	push	r5
     e16:	6f 92       	push	r6
     e18:	1f 92       	push	r1
     e1a:	7f 92       	push	r7
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	1f 93       	push	r17
     e2a:	0f 93       	push	r16
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	1f 92       	push	r1
     e32:	8f 93       	push	r24
     e34:	8e e3       	ldi	r24, 0x3E	; 62
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	8e 01       	movw	r16, r28
     e3e:	0b 59       	subi	r16, 0x9B	; 155
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	1f 93       	push	r17
     e44:	0f 93       	push	r16
     e46:	83 d2       	rcall	.+1286   	; 0x134e <sprintf>
	UART_SendString(anotherbuff);
     e48:	c8 01       	movw	r24, r16
     e4a:	30 d1       	rcall	.+608    	; 0x10ac <UART_SendString>
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     e58:	83 70       	andi	r24, 0x03	; 3
     e5a:	e9 f7       	brne	.-6      	; 0xe56 <SYS_Pause+0x1cc>
     e5c:	83 e8       	ldi	r24, 0x83	; 131
		{
			UART_SendString("Starting System!\r\n");
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	25 d1       	rcall	.+586    	; 0x10ac <UART_SendString>
     e62:	80 e8       	ldi	r24, 0x80	; 128
     e64:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     e66:	e4 dc       	rcall	.-1592   	; 0x830 <PWM>
     e68:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <g_PauseRequest>
     e6c:	78 94       	sei
			g_PauseRequest = 0;
     e6e:	c8 53       	subi	r28, 0x38	; 56
     e70:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     e72:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
}
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	7f 90       	pop	r7
     e96:	6f 90       	pop	r6
     e98:	5f 90       	pop	r5
     e9a:	4f 90       	pop	r4
     e9c:	3f 90       	pop	r3
     e9e:	08 95       	ret

00000ea0 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	0b b6       	in	r0, 0x3b	; 59
     eac:	0f 92       	push	r0
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	ef 93       	push	r30
     ed0:	ff 93       	push	r31
	PORTC ^= 0xFE;
     ed2:	98 b1       	in	r25, 0x08	; 8
     ed4:	8e ef       	ldi	r24, 0xFE	; 254
     ed6:	89 27       	eor	r24, r25
     ed8:	88 b9       	out	0x08, r24	; 8
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     eda:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_timer_tick>
     ede:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_timer_tick+0x1>
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <_timer_tick+0x1>
     ee8:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <_timer_tick>
     eec:	c2 e1       	ldi	r28, 0x12	; 18
     eee:	d3 e0       	ldi	r29, 0x03	; 3
     ef0:	0f 2e       	mov	r0, r31
     ef2:	fa e5       	ldi	r31, 0x5A	; 90
     ef4:	ef 2e       	mov	r14, r31
     ef6:	f3 e0       	ldi	r31, 0x03	; 3
     ef8:	ff 2e       	mov	r15, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     efe:	ec 81       	ldd	r30, Y+4	; 0x04
     f00:	fd 81       	ldd	r31, Y+5	; 0x05
     f02:	30 97       	sbiw	r30, 0x00	; 0
     f04:	e9 f0       	breq	.+58     	; 0xf40 <__vector_17+0xa0>
     f06:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <_timer_tick>
     f0a:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <_timer_tick+0x1>
     f0e:	28 81       	ld	r18, Y
     f10:	39 81       	ldd	r19, Y+1	; 0x01
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	a1 f4       	brne	.+40     	; 0xf40 <__vector_17+0xa0>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     f18:	88 85       	ldd	r24, Y+8	; 0x08
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__vector_17+0x84>
     f1e:	8e 81       	ldd	r24, Y+6	; 0x06
     f20:	9f 81       	ldd	r25, Y+7	; 0x07
     f22:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     f24:	d8 01       	movw	r26, r16
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	13 97       	sbiw	r26, 0x03	; 3
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	39 f0       	breq	.+14     	; 0xf40 <__vector_17+0xa0>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     f32:	2d 91       	ld	r18, X+
     f34:	3c 91       	ld	r19, X
     f36:	11 97       	sbiw	r26, 0x01	; 1
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	8d 93       	st	X+, r24
     f3e:	9c 93       	st	X, r25
     f40:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     f42:	ce 15       	cp	r28, r14
     f44:	df 05       	cpc	r29, r15
     f46:	d1 f6       	brne	.-76     	; 0xefc <__vector_17+0x5c>
	 * sprintf(buf,"%u\r\n", total);
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	PORTC ^= 0xFE;
     f48:	98 b1       	in	r25, 0x08	; 8
     f4a:	8e ef       	ldi	r24, 0xFE	; 254
     f4c:	89 27       	eor	r24, r25
     f4e:	88 b9       	out	0x08, r24	; 8
}
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	0f 90       	pop	r0
     f76:	0b be       	out	0x3b, r0	; 59
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     f82:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f86:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     f8a:	80 ee       	ldi	r24, 0xE0	; 224
     f8c:	9d e0       	ldi	r25, 0x0D	; 13
     f8e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f92:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     f96:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     f9a:	89 e0       	ldi	r24, 0x09	; 9
     f9c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A);			   // Enable timer1 output compare interrupt
     fa0:	82 e0       	ldi	r24, 0x02	; 2
     fa2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     fa6:	88 e4       	ldi	r24, 0x48	; 72
     fa8:	e2 e1       	ldi	r30, 0x12	; 18
     faa:	f3 e0       	ldi	r31, 0x03	; 3
     fac:	df 01       	movw	r26, r30
     fae:	1d 92       	st	X+, r1
     fb0:	8a 95       	dec	r24
     fb2:	e9 f7       	brne	.-6      	; 0xfae <TIMER_Init+0x2c>

	return 0;
}
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	08 95       	ret

00000fba <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     fc4:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <_timer+0x4>
     fc8:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <_timer+0x5>
     fcc:	67 2b       	or	r22, r23
     fce:	09 f4       	brne	.+2      	; 0xfd2 <TIMER_Create+0x18>
     fd0:	49 c0       	rjmp	.+146    	; 0x1064 <TIMER_Create+0xaa>
     fd2:	e2 e1       	ldi	r30, 0x12	; 18
     fd4:	f3 e0       	ldi	r31, 0x03	; 3
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     fd6:	a1 e0       	ldi	r26, 0x01	; 1
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     fda:	c5 85       	ldd	r28, Z+13	; 0x0d
     fdc:	d6 85       	ldd	r29, Z+14	; 0x0e
     fde:	cd 2b       	or	r28, r29
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <TIMER_Create+0x2a>
     fe2:	42 c0       	rjmp	.+132    	; 0x1068 <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     fe4:	11 96       	adiw	r26, 0x01	; 1
     fe6:	39 96       	adiw	r30, 0x09	; 9
     fe8:	a8 30       	cpi	r26, 0x08	; 8
     fea:	b1 05       	cpc	r27, r1
     fec:	b1 f7       	brne	.-20     	; 0xfda <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	3f c0       	rjmp	.+126    	; 0x1072 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     ff4:	fd 01       	movw	r30, r26
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	ee 0f       	add	r30, r30
    1000:	ff 1f       	adc	r31, r31
    1002:	ea 0f       	add	r30, r26
    1004:	fb 1f       	adc	r31, r27
    1006:	ee 5e       	subi	r30, 0xEE	; 238
    1008:	fc 4f       	sbci	r31, 0xFC	; 252
    100a:	93 83       	std	Z+3, r25	; 0x03
    100c:	82 83       	std	Z+2, r24	; 0x02
    100e:	0d c0       	rjmp	.+26     	; 0x102a <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    1010:	fd 01       	movw	r30, r26
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	ea 0f       	add	r30, r26
    1020:	fb 1f       	adc	r31, r27
    1022:	ee 5e       	subi	r30, 0xEE	; 238
    1024:	fc 4f       	sbci	r31, 0xFC	; 252
    1026:	13 82       	std	Z+3, r1	; 0x03
    1028:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    102a:	fd 01       	movw	r30, r26
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	ea 0f       	add	r30, r26
    103a:	fb 1f       	adc	r31, r27
    103c:	ee 5e       	subi	r30, 0xEE	; 238
    103e:	fc 4f       	sbci	r31, 0xFC	; 252
    1040:	55 83       	std	Z+5, r21	; 0x05
    1042:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1044:	37 83       	std	Z+7, r19	; 0x07
    1046:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
    1048:	20 91 9d 02 	lds	r18, 0x029D	; 0x80029d <_timer_tick>
    104c:	30 91 9e 02 	lds	r19, 0x029E	; 0x80029e <_timer_tick+0x1>
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	80 83       	st	Z, r24
			_timer[i].state = READY;
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    105c:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    105e:	8a 2f       	mov	r24, r26
    1060:	9b 2f       	mov	r25, r27
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1068:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    106a:	f8 94       	cli
		{
			
			if (periodic != 0) 
    106c:	01 2b       	or	r16, r17
    106e:	11 f6       	brne	.-124    	; 0xff4 <TIMER_Create+0x3a>
    1070:	cf cf       	rjmp	.-98     	; 0x1010 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    107c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1080:	83 e3       	ldi	r24, 0x33	; 51
    1082:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1086:	e9 ec       	ldi	r30, 0xC9	; 201
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 61       	ori	r24, 0x18	; 24
    108e:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1090:	ea ec       	ldi	r30, 0xCA	; 202
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	86 60       	ori	r24, 0x06	; 6
    1098:	80 83       	st	Z, r24
    109a:	08 95       	ret

0000109c <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    109c:	e8 ec       	ldi	r30, 0xC8	; 200
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	90 81       	ld	r25, Z
    10a2:	95 ff       	sbrs	r25, 5
    10a4:	fd cf       	rjmp	.-6      	; 0x10a0 <UART_SendChar+0x4>
	UDR1 = c;
    10a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    10aa:	08 95       	ret

000010ac <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
    10b2:	88 81       	ld	r24, Y
    10b4:	88 23       	and	r24, r24
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <UART_SendString+0x16>
    10b8:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
    10ba:	f0 df       	rcall	.-32     	; 0x109c <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
    10bc:	89 91       	ld	r24, Y+
    10be:	81 11       	cpse	r24, r1
    10c0:	fc cf       	rjmp	.-8      	; 0x10ba <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <__udivmodsi4>:
    10c8:	a1 e2       	ldi	r26, 0x21	; 33
    10ca:	1a 2e       	mov	r1, r26
    10cc:	aa 1b       	sub	r26, r26
    10ce:	bb 1b       	sub	r27, r27
    10d0:	fd 01       	movw	r30, r26
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <__udivmodsi4_ep>

000010d4 <__udivmodsi4_loop>:
    10d4:	aa 1f       	adc	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	ee 1f       	adc	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	a2 17       	cp	r26, r18
    10de:	b3 07       	cpc	r27, r19
    10e0:	e4 07       	cpc	r30, r20
    10e2:	f5 07       	cpc	r31, r21
    10e4:	20 f0       	brcs	.+8      	; 0x10ee <__udivmodsi4_ep>
    10e6:	a2 1b       	sub	r26, r18
    10e8:	b3 0b       	sbc	r27, r19
    10ea:	e4 0b       	sbc	r30, r20
    10ec:	f5 0b       	sbc	r31, r21

000010ee <__udivmodsi4_ep>:
    10ee:	66 1f       	adc	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	1a 94       	dec	r1
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <__udivmodsi4_loop>
    10fa:	60 95       	com	r22
    10fc:	70 95       	com	r23
    10fe:	80 95       	com	r24
    1100:	90 95       	com	r25
    1102:	9b 01       	movw	r18, r22
    1104:	ac 01       	movw	r20, r24
    1106:	bd 01       	movw	r22, r26
    1108:	cf 01       	movw	r24, r30
    110a:	08 95       	ret

0000110c <malloc>:
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	91 05       	cpc	r25, r1
    1118:	10 f4       	brcc	.+4      	; 0x111e <malloc+0x12>
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	e0 91 68 03 	lds	r30, 0x0368	; 0x800368 <__flp>
    1122:	f0 91 69 03 	lds	r31, 0x0369	; 0x800369 <__flp+0x1>
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	19 f1       	breq	.+70     	; 0x1178 <malloc+0x6c>
    1132:	40 81       	ld	r20, Z
    1134:	51 81       	ldd	r21, Z+1	; 0x01
    1136:	02 81       	ldd	r16, Z+2	; 0x02
    1138:	13 81       	ldd	r17, Z+3	; 0x03
    113a:	48 17       	cp	r20, r24
    113c:	59 07       	cpc	r21, r25
    113e:	c8 f0       	brcs	.+50     	; 0x1172 <malloc+0x66>
    1140:	84 17       	cp	r24, r20
    1142:	95 07       	cpc	r25, r21
    1144:	69 f4       	brne	.+26     	; 0x1160 <malloc+0x54>
    1146:	10 97       	sbiw	r26, 0x00	; 0
    1148:	31 f0       	breq	.+12     	; 0x1156 <malloc+0x4a>
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	0c 93       	st	X, r16
    114e:	12 97       	sbiw	r26, 0x02	; 2
    1150:	13 96       	adiw	r26, 0x03	; 3
    1152:	1c 93       	st	X, r17
    1154:	27 c0       	rjmp	.+78     	; 0x11a4 <malloc+0x98>
    1156:	00 93 68 03 	sts	0x0368, r16	; 0x800368 <__flp>
    115a:	10 93 69 03 	sts	0x0369, r17	; 0x800369 <__flp+0x1>
    115e:	22 c0       	rjmp	.+68     	; 0x11a4 <malloc+0x98>
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	19 f0       	breq	.+6      	; 0x116c <malloc+0x60>
    1166:	42 17       	cp	r20, r18
    1168:	53 07       	cpc	r21, r19
    116a:	18 f4       	brcc	.+6      	; 0x1172 <malloc+0x66>
    116c:	9a 01       	movw	r18, r20
    116e:	bd 01       	movw	r22, r26
    1170:	ef 01       	movw	r28, r30
    1172:	df 01       	movw	r26, r30
    1174:	f8 01       	movw	r30, r16
    1176:	db cf       	rjmp	.-74     	; 0x112e <malloc+0x22>
    1178:	21 15       	cp	r18, r1
    117a:	31 05       	cpc	r19, r1
    117c:	f9 f0       	breq	.+62     	; 0x11bc <malloc+0xb0>
    117e:	28 1b       	sub	r18, r24
    1180:	39 0b       	sbc	r19, r25
    1182:	24 30       	cpi	r18, 0x04	; 4
    1184:	31 05       	cpc	r19, r1
    1186:	80 f4       	brcc	.+32     	; 0x11a8 <malloc+0x9c>
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	61 15       	cp	r22, r1
    118e:	71 05       	cpc	r23, r1
    1190:	21 f0       	breq	.+8      	; 0x119a <malloc+0x8e>
    1192:	fb 01       	movw	r30, r22
    1194:	93 83       	std	Z+3, r25	; 0x03
    1196:	82 83       	std	Z+2, r24	; 0x02
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <malloc+0x96>
    119a:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <__flp+0x1>
    119e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <__flp>
    11a2:	fe 01       	movw	r30, r28
    11a4:	32 96       	adiw	r30, 0x02	; 2
    11a6:	44 c0       	rjmp	.+136    	; 0x1230 <malloc+0x124>
    11a8:	fe 01       	movw	r30, r28
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	81 93       	st	Z+, r24
    11b0:	91 93       	st	Z+, r25
    11b2:	22 50       	subi	r18, 0x02	; 2
    11b4:	31 09       	sbc	r19, r1
    11b6:	39 83       	std	Y+1, r19	; 0x01
    11b8:	28 83       	st	Y, r18
    11ba:	3a c0       	rjmp	.+116    	; 0x1230 <malloc+0x124>
    11bc:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    11c0:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    11c4:	23 2b       	or	r18, r19
    11c6:	41 f4       	brne	.+16     	; 0x11d8 <malloc+0xcc>
    11c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    11cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    11d0:	30 93 67 03 	sts	0x0367, r19	; 0x800367 <__brkval+0x1>
    11d4:	20 93 66 03 	sts	0x0366, r18	; 0x800366 <__brkval>
    11d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    11dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	41 f4       	brne	.+16     	; 0x11f6 <malloc+0xea>
    11e6:	2d b7       	in	r18, 0x3d	; 61
    11e8:	3e b7       	in	r19, 0x3e	; 62
    11ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11f2:	24 1b       	sub	r18, r20
    11f4:	35 0b       	sbc	r19, r21
    11f6:	e0 91 66 03 	lds	r30, 0x0366	; 0x800366 <__brkval>
    11fa:	f0 91 67 03 	lds	r31, 0x0367	; 0x800367 <__brkval+0x1>
    11fe:	e2 17       	cp	r30, r18
    1200:	f3 07       	cpc	r31, r19
    1202:	a0 f4       	brcc	.+40     	; 0x122c <malloc+0x120>
    1204:	2e 1b       	sub	r18, r30
    1206:	3f 0b       	sbc	r19, r31
    1208:	28 17       	cp	r18, r24
    120a:	39 07       	cpc	r19, r25
    120c:	78 f0       	brcs	.+30     	; 0x122c <malloc+0x120>
    120e:	ac 01       	movw	r20, r24
    1210:	4e 5f       	subi	r20, 0xFE	; 254
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	24 17       	cp	r18, r20
    1216:	35 07       	cpc	r19, r21
    1218:	48 f0       	brcs	.+18     	; 0x122c <malloc+0x120>
    121a:	4e 0f       	add	r20, r30
    121c:	5f 1f       	adc	r21, r31
    121e:	50 93 67 03 	sts	0x0367, r21	; 0x800367 <__brkval+0x1>
    1222:	40 93 66 03 	sts	0x0366, r20	; 0x800366 <__brkval>
    1226:	81 93       	st	Z+, r24
    1228:	91 93       	st	Z+, r25
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <malloc+0x124>
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	cf 01       	movw	r24, r30
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	08 95       	ret

0000123c <free>:
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	09 f4       	brne	.+2      	; 0x1246 <free+0xa>
    1244:	81 c0       	rjmp	.+258    	; 0x1348 <free+0x10c>
    1246:	fc 01       	movw	r30, r24
    1248:	32 97       	sbiw	r30, 0x02	; 2
    124a:	13 82       	std	Z+3, r1	; 0x03
    124c:	12 82       	std	Z+2, r1	; 0x02
    124e:	a0 91 68 03 	lds	r26, 0x0368	; 0x800368 <__flp>
    1252:	b0 91 69 03 	lds	r27, 0x0369	; 0x800369 <__flp+0x1>
    1256:	10 97       	sbiw	r26, 0x00	; 0
    1258:	81 f4       	brne	.+32     	; 0x127a <free+0x3e>
    125a:	20 81       	ld	r18, Z
    125c:	31 81       	ldd	r19, Z+1	; 0x01
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    1266:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	51 f5       	brne	.+84     	; 0x12c4 <free+0x88>
    1270:	f0 93 67 03 	sts	0x0367, r31	; 0x800367 <__brkval+0x1>
    1274:	e0 93 66 03 	sts	0x0366, r30	; 0x800366 <__brkval>
    1278:	67 c0       	rjmp	.+206    	; 0x1348 <free+0x10c>
    127a:	ed 01       	movw	r28, r26
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	ce 17       	cp	r28, r30
    1282:	df 07       	cpc	r29, r31
    1284:	40 f4       	brcc	.+16     	; 0x1296 <free+0x5a>
    1286:	4a 81       	ldd	r20, Y+2	; 0x02
    1288:	5b 81       	ldd	r21, Y+3	; 0x03
    128a:	9e 01       	movw	r18, r28
    128c:	41 15       	cp	r20, r1
    128e:	51 05       	cpc	r21, r1
    1290:	f1 f0       	breq	.+60     	; 0x12ce <free+0x92>
    1292:	ea 01       	movw	r28, r20
    1294:	f5 cf       	rjmp	.-22     	; 0x1280 <free+0x44>
    1296:	d3 83       	std	Z+3, r29	; 0x03
    1298:	c2 83       	std	Z+2, r28	; 0x02
    129a:	40 81       	ld	r20, Z
    129c:	51 81       	ldd	r21, Z+1	; 0x01
    129e:	84 0f       	add	r24, r20
    12a0:	95 1f       	adc	r25, r21
    12a2:	c8 17       	cp	r28, r24
    12a4:	d9 07       	cpc	r29, r25
    12a6:	59 f4       	brne	.+22     	; 0x12be <free+0x82>
    12a8:	88 81       	ld	r24, Y
    12aa:	99 81       	ldd	r25, Y+1	; 0x01
    12ac:	84 0f       	add	r24, r20
    12ae:	95 1f       	adc	r25, r21
    12b0:	02 96       	adiw	r24, 0x02	; 2
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	93 83       	std	Z+3, r25	; 0x03
    12bc:	82 83       	std	Z+2, r24	; 0x02
    12be:	21 15       	cp	r18, r1
    12c0:	31 05       	cpc	r19, r1
    12c2:	29 f4       	brne	.+10     	; 0x12ce <free+0x92>
    12c4:	f0 93 69 03 	sts	0x0369, r31	; 0x800369 <__flp+0x1>
    12c8:	e0 93 68 03 	sts	0x0368, r30	; 0x800368 <__flp>
    12cc:	3d c0       	rjmp	.+122    	; 0x1348 <free+0x10c>
    12ce:	e9 01       	movw	r28, r18
    12d0:	fb 83       	std	Y+3, r31	; 0x03
    12d2:	ea 83       	std	Y+2, r30	; 0x02
    12d4:	49 91       	ld	r20, Y+
    12d6:	59 91       	ld	r21, Y+
    12d8:	c4 0f       	add	r28, r20
    12da:	d5 1f       	adc	r29, r21
    12dc:	ec 17       	cp	r30, r28
    12de:	fd 07       	cpc	r31, r29
    12e0:	61 f4       	brne	.+24     	; 0x12fa <free+0xbe>
    12e2:	80 81       	ld	r24, Z
    12e4:	91 81       	ldd	r25, Z+1	; 0x01
    12e6:	84 0f       	add	r24, r20
    12e8:	95 1f       	adc	r25, r21
    12ea:	02 96       	adiw	r24, 0x02	; 2
    12ec:	e9 01       	movw	r28, r18
    12ee:	99 83       	std	Y+1, r25	; 0x01
    12f0:	88 83       	st	Y, r24
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
    12fa:	e0 e0       	ldi	r30, 0x00	; 0
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	12 96       	adiw	r26, 0x02	; 2
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	13 97       	sbiw	r26, 0x03	; 3
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	19 f0       	breq	.+6      	; 0x1310 <free+0xd4>
    130a:	fd 01       	movw	r30, r26
    130c:	dc 01       	movw	r26, r24
    130e:	f7 cf       	rjmp	.-18     	; 0x12fe <free+0xc2>
    1310:	8d 91       	ld	r24, X+
    1312:	9c 91       	ld	r25, X
    1314:	11 97       	sbiw	r26, 0x01	; 1
    1316:	9d 01       	movw	r18, r26
    1318:	2e 5f       	subi	r18, 0xFE	; 254
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	82 0f       	add	r24, r18
    131e:	93 1f       	adc	r25, r19
    1320:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <__brkval>
    1324:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <__brkval+0x1>
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	69 f4       	brne	.+26     	; 0x1348 <free+0x10c>
    132e:	30 97       	sbiw	r30, 0x00	; 0
    1330:	29 f4       	brne	.+10     	; 0x133c <free+0x100>
    1332:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <__flp+0x1>
    1336:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <__flp>
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <free+0x104>
    133c:	13 82       	std	Z+3, r1	; 0x03
    133e:	12 82       	std	Z+2, r1	; 0x02
    1340:	b0 93 67 03 	sts	0x0367, r27	; 0x800367 <__brkval+0x1>
    1344:	a0 93 66 03 	sts	0x0366, r26	; 0x800366 <__brkval>
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	08 95       	ret

0000134e <sprintf>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	2e 97       	sbiw	r28, 0x0e	; 14
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	0d 89       	ldd	r16, Y+21	; 0x15
    1368:	1e 89       	ldd	r17, Y+22	; 0x16
    136a:	86 e0       	ldi	r24, 0x06	; 6
    136c:	8c 83       	std	Y+4, r24	; 0x04
    136e:	1a 83       	std	Y+2, r17	; 0x02
    1370:	09 83       	std	Y+1, r16	; 0x01
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	9f e7       	ldi	r25, 0x7F	; 127
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	ae 01       	movw	r20, r28
    137c:	47 5e       	subi	r20, 0xE7	; 231
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	6f 89       	ldd	r22, Y+23	; 0x17
    1382:	78 8d       	ldd	r23, Y+24	; 0x18
    1384:	ce 01       	movw	r24, r28
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	10 d0       	rcall	.+32     	; 0x13aa <vfprintf>
    138a:	ef 81       	ldd	r30, Y+7	; 0x07
    138c:	f8 85       	ldd	r31, Y+8	; 0x08
    138e:	e0 0f       	add	r30, r16
    1390:	f1 1f       	adc	r31, r17
    1392:	10 82       	st	Z, r1
    1394:	2e 96       	adiw	r28, 0x0e	; 14
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <vfprintf>:
    13aa:	2f 92       	push	r2
    13ac:	3f 92       	push	r3
    13ae:	4f 92       	push	r4
    13b0:	5f 92       	push	r5
    13b2:	6f 92       	push	r6
    13b4:	7f 92       	push	r7
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2b 97       	sbiw	r28, 0x0b	; 11
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	6c 01       	movw	r12, r24
    13e0:	7b 01       	movw	r14, r22
    13e2:	8a 01       	movw	r16, r20
    13e4:	fc 01       	movw	r30, r24
    13e6:	17 82       	std	Z+7, r1	; 0x07
    13e8:	16 82       	std	Z+6, r1	; 0x06
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	81 ff       	sbrs	r24, 1
    13ee:	bf c1       	rjmp	.+894    	; 0x176e <vfprintf+0x3c4>
    13f0:	ce 01       	movw	r24, r28
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	3c 01       	movw	r6, r24
    13f6:	f6 01       	movw	r30, r12
    13f8:	93 81       	ldd	r25, Z+3	; 0x03
    13fa:	f7 01       	movw	r30, r14
    13fc:	93 fd       	sbrc	r25, 3
    13fe:	85 91       	lpm	r24, Z+
    1400:	93 ff       	sbrs	r25, 3
    1402:	81 91       	ld	r24, Z+
    1404:	7f 01       	movw	r14, r30
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <vfprintf+0x62>
    140a:	ad c1       	rjmp	.+858    	; 0x1766 <vfprintf+0x3bc>
    140c:	85 32       	cpi	r24, 0x25	; 37
    140e:	39 f4       	brne	.+14     	; 0x141e <vfprintf+0x74>
    1410:	93 fd       	sbrc	r25, 3
    1412:	85 91       	lpm	r24, Z+
    1414:	93 ff       	sbrs	r25, 3
    1416:	81 91       	ld	r24, Z+
    1418:	7f 01       	movw	r14, r30
    141a:	85 32       	cpi	r24, 0x25	; 37
    141c:	21 f4       	brne	.+8      	; 0x1426 <vfprintf+0x7c>
    141e:	b6 01       	movw	r22, r12
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	d6 d1       	rcall	.+940    	; 0x17d0 <fputc>
    1424:	e8 cf       	rjmp	.-48     	; 0x13f6 <vfprintf+0x4c>
    1426:	91 2c       	mov	r9, r1
    1428:	21 2c       	mov	r2, r1
    142a:	31 2c       	mov	r3, r1
    142c:	ff e1       	ldi	r31, 0x1F	; 31
    142e:	f3 15       	cp	r31, r3
    1430:	d8 f0       	brcs	.+54     	; 0x1468 <vfprintf+0xbe>
    1432:	8b 32       	cpi	r24, 0x2B	; 43
    1434:	79 f0       	breq	.+30     	; 0x1454 <vfprintf+0xaa>
    1436:	38 f4       	brcc	.+14     	; 0x1446 <vfprintf+0x9c>
    1438:	80 32       	cpi	r24, 0x20	; 32
    143a:	79 f0       	breq	.+30     	; 0x145a <vfprintf+0xb0>
    143c:	83 32       	cpi	r24, 0x23	; 35
    143e:	a1 f4       	brne	.+40     	; 0x1468 <vfprintf+0xbe>
    1440:	23 2d       	mov	r18, r3
    1442:	20 61       	ori	r18, 0x10	; 16
    1444:	1d c0       	rjmp	.+58     	; 0x1480 <vfprintf+0xd6>
    1446:	8d 32       	cpi	r24, 0x2D	; 45
    1448:	61 f0       	breq	.+24     	; 0x1462 <vfprintf+0xb8>
    144a:	80 33       	cpi	r24, 0x30	; 48
    144c:	69 f4       	brne	.+26     	; 0x1468 <vfprintf+0xbe>
    144e:	23 2d       	mov	r18, r3
    1450:	21 60       	ori	r18, 0x01	; 1
    1452:	16 c0       	rjmp	.+44     	; 0x1480 <vfprintf+0xd6>
    1454:	83 2d       	mov	r24, r3
    1456:	82 60       	ori	r24, 0x02	; 2
    1458:	38 2e       	mov	r3, r24
    145a:	e3 2d       	mov	r30, r3
    145c:	e4 60       	ori	r30, 0x04	; 4
    145e:	3e 2e       	mov	r3, r30
    1460:	2a c0       	rjmp	.+84     	; 0x14b6 <vfprintf+0x10c>
    1462:	f3 2d       	mov	r31, r3
    1464:	f8 60       	ori	r31, 0x08	; 8
    1466:	1d c0       	rjmp	.+58     	; 0x14a2 <vfprintf+0xf8>
    1468:	37 fc       	sbrc	r3, 7
    146a:	2d c0       	rjmp	.+90     	; 0x14c6 <vfprintf+0x11c>
    146c:	20 ed       	ldi	r18, 0xD0	; 208
    146e:	28 0f       	add	r18, r24
    1470:	2a 30       	cpi	r18, 0x0A	; 10
    1472:	40 f0       	brcs	.+16     	; 0x1484 <vfprintf+0xda>
    1474:	8e 32       	cpi	r24, 0x2E	; 46
    1476:	b9 f4       	brne	.+46     	; 0x14a6 <vfprintf+0xfc>
    1478:	36 fc       	sbrc	r3, 6
    147a:	75 c1       	rjmp	.+746    	; 0x1766 <vfprintf+0x3bc>
    147c:	23 2d       	mov	r18, r3
    147e:	20 64       	ori	r18, 0x40	; 64
    1480:	32 2e       	mov	r3, r18
    1482:	19 c0       	rjmp	.+50     	; 0x14b6 <vfprintf+0x10c>
    1484:	36 fe       	sbrs	r3, 6
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <vfprintf+0xea>
    1488:	8a e0       	ldi	r24, 0x0A	; 10
    148a:	98 9e       	mul	r9, r24
    148c:	20 0d       	add	r18, r0
    148e:	11 24       	eor	r1, r1
    1490:	92 2e       	mov	r9, r18
    1492:	11 c0       	rjmp	.+34     	; 0x14b6 <vfprintf+0x10c>
    1494:	ea e0       	ldi	r30, 0x0A	; 10
    1496:	2e 9e       	mul	r2, r30
    1498:	20 0d       	add	r18, r0
    149a:	11 24       	eor	r1, r1
    149c:	22 2e       	mov	r2, r18
    149e:	f3 2d       	mov	r31, r3
    14a0:	f0 62       	ori	r31, 0x20	; 32
    14a2:	3f 2e       	mov	r3, r31
    14a4:	08 c0       	rjmp	.+16     	; 0x14b6 <vfprintf+0x10c>
    14a6:	8c 36       	cpi	r24, 0x6C	; 108
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <vfprintf+0x108>
    14aa:	83 2d       	mov	r24, r3
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	38 2e       	mov	r3, r24
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x10c>
    14b2:	88 36       	cpi	r24, 0x68	; 104
    14b4:	41 f4       	brne	.+16     	; 0x14c6 <vfprintf+0x11c>
    14b6:	f7 01       	movw	r30, r14
    14b8:	93 fd       	sbrc	r25, 3
    14ba:	85 91       	lpm	r24, Z+
    14bc:	93 ff       	sbrs	r25, 3
    14be:	81 91       	ld	r24, Z+
    14c0:	7f 01       	movw	r14, r30
    14c2:	81 11       	cpse	r24, r1
    14c4:	b3 cf       	rjmp	.-154    	; 0x142c <vfprintf+0x82>
    14c6:	98 2f       	mov	r25, r24
    14c8:	9f 7d       	andi	r25, 0xDF	; 223
    14ca:	95 54       	subi	r25, 0x45	; 69
    14cc:	93 30       	cpi	r25, 0x03	; 3
    14ce:	28 f4       	brcc	.+10     	; 0x14da <vfprintf+0x130>
    14d0:	0c 5f       	subi	r16, 0xFC	; 252
    14d2:	1f 4f       	sbci	r17, 0xFF	; 255
    14d4:	9f e3       	ldi	r25, 0x3F	; 63
    14d6:	99 83       	std	Y+1, r25	; 0x01
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <vfprintf+0x14a>
    14da:	83 36       	cpi	r24, 0x63	; 99
    14dc:	31 f0       	breq	.+12     	; 0x14ea <vfprintf+0x140>
    14de:	83 37       	cpi	r24, 0x73	; 115
    14e0:	71 f0       	breq	.+28     	; 0x14fe <vfprintf+0x154>
    14e2:	83 35       	cpi	r24, 0x53	; 83
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <vfprintf+0x13e>
    14e6:	55 c0       	rjmp	.+170    	; 0x1592 <vfprintf+0x1e8>
    14e8:	20 c0       	rjmp	.+64     	; 0x152a <vfprintf+0x180>
    14ea:	f8 01       	movw	r30, r16
    14ec:	80 81       	ld	r24, Z
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	0e 5f       	subi	r16, 0xFE	; 254
    14f2:	1f 4f       	sbci	r17, 0xFF	; 255
    14f4:	88 24       	eor	r8, r8
    14f6:	83 94       	inc	r8
    14f8:	91 2c       	mov	r9, r1
    14fa:	53 01       	movw	r10, r6
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <vfprintf+0x178>
    14fe:	28 01       	movw	r4, r16
    1500:	f2 e0       	ldi	r31, 0x02	; 2
    1502:	4f 0e       	add	r4, r31
    1504:	51 1c       	adc	r5, r1
    1506:	f8 01       	movw	r30, r16
    1508:	a0 80       	ld	r10, Z
    150a:	b1 80       	ldd	r11, Z+1	; 0x01
    150c:	36 fe       	sbrs	r3, 6
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <vfprintf+0x16c>
    1510:	69 2d       	mov	r22, r9
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <vfprintf+0x170>
    1516:	6f ef       	ldi	r22, 0xFF	; 255
    1518:	7f ef       	ldi	r23, 0xFF	; 255
    151a:	c5 01       	movw	r24, r10
    151c:	4e d1       	rcall	.+668    	; 0x17ba <strnlen>
    151e:	4c 01       	movw	r8, r24
    1520:	82 01       	movw	r16, r4
    1522:	f3 2d       	mov	r31, r3
    1524:	ff 77       	andi	r31, 0x7F	; 127
    1526:	3f 2e       	mov	r3, r31
    1528:	15 c0       	rjmp	.+42     	; 0x1554 <vfprintf+0x1aa>
    152a:	28 01       	movw	r4, r16
    152c:	22 e0       	ldi	r18, 0x02	; 2
    152e:	42 0e       	add	r4, r18
    1530:	51 1c       	adc	r5, r1
    1532:	f8 01       	movw	r30, r16
    1534:	a0 80       	ld	r10, Z
    1536:	b1 80       	ldd	r11, Z+1	; 0x01
    1538:	36 fe       	sbrs	r3, 6
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <vfprintf+0x198>
    153c:	69 2d       	mov	r22, r9
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <vfprintf+0x19c>
    1542:	6f ef       	ldi	r22, 0xFF	; 255
    1544:	7f ef       	ldi	r23, 0xFF	; 255
    1546:	c5 01       	movw	r24, r10
    1548:	2d d1       	rcall	.+602    	; 0x17a4 <strnlen_P>
    154a:	4c 01       	movw	r8, r24
    154c:	f3 2d       	mov	r31, r3
    154e:	f0 68       	ori	r31, 0x80	; 128
    1550:	3f 2e       	mov	r3, r31
    1552:	82 01       	movw	r16, r4
    1554:	33 fc       	sbrc	r3, 3
    1556:	19 c0       	rjmp	.+50     	; 0x158a <vfprintf+0x1e0>
    1558:	82 2d       	mov	r24, r2
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	88 16       	cp	r8, r24
    155e:	99 06       	cpc	r9, r25
    1560:	a0 f4       	brcc	.+40     	; 0x158a <vfprintf+0x1e0>
    1562:	b6 01       	movw	r22, r12
    1564:	80 e2       	ldi	r24, 0x20	; 32
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	33 d1       	rcall	.+614    	; 0x17d0 <fputc>
    156a:	2a 94       	dec	r2
    156c:	f5 cf       	rjmp	.-22     	; 0x1558 <vfprintf+0x1ae>
    156e:	f5 01       	movw	r30, r10
    1570:	37 fc       	sbrc	r3, 7
    1572:	85 91       	lpm	r24, Z+
    1574:	37 fe       	sbrs	r3, 7
    1576:	81 91       	ld	r24, Z+
    1578:	5f 01       	movw	r10, r30
    157a:	b6 01       	movw	r22, r12
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	28 d1       	rcall	.+592    	; 0x17d0 <fputc>
    1580:	21 10       	cpse	r2, r1
    1582:	2a 94       	dec	r2
    1584:	21 e0       	ldi	r18, 0x01	; 1
    1586:	82 1a       	sub	r8, r18
    1588:	91 08       	sbc	r9, r1
    158a:	81 14       	cp	r8, r1
    158c:	91 04       	cpc	r9, r1
    158e:	79 f7       	brne	.-34     	; 0x156e <vfprintf+0x1c4>
    1590:	e1 c0       	rjmp	.+450    	; 0x1754 <vfprintf+0x3aa>
    1592:	84 36       	cpi	r24, 0x64	; 100
    1594:	11 f0       	breq	.+4      	; 0x159a <vfprintf+0x1f0>
    1596:	89 36       	cpi	r24, 0x69	; 105
    1598:	39 f5       	brne	.+78     	; 0x15e8 <vfprintf+0x23e>
    159a:	f8 01       	movw	r30, r16
    159c:	37 fe       	sbrs	r3, 7
    159e:	07 c0       	rjmp	.+14     	; 0x15ae <vfprintf+0x204>
    15a0:	60 81       	ld	r22, Z
    15a2:	71 81       	ldd	r23, Z+1	; 0x01
    15a4:	82 81       	ldd	r24, Z+2	; 0x02
    15a6:	93 81       	ldd	r25, Z+3	; 0x03
    15a8:	0c 5f       	subi	r16, 0xFC	; 252
    15aa:	1f 4f       	sbci	r17, 0xFF	; 255
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <vfprintf+0x214>
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	07 2e       	mov	r0, r23
    15b4:	00 0c       	add	r0, r0
    15b6:	88 0b       	sbc	r24, r24
    15b8:	99 0b       	sbc	r25, r25
    15ba:	0e 5f       	subi	r16, 0xFE	; 254
    15bc:	1f 4f       	sbci	r17, 0xFF	; 255
    15be:	f3 2d       	mov	r31, r3
    15c0:	ff 76       	andi	r31, 0x6F	; 111
    15c2:	3f 2e       	mov	r3, r31
    15c4:	97 ff       	sbrs	r25, 7
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <vfprintf+0x230>
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	f0 68       	ori	r31, 0x80	; 128
    15d8:	3f 2e       	mov	r3, r31
    15da:	2a e0       	ldi	r18, 0x0A	; 10
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	a3 01       	movw	r20, r6
    15e0:	33 d1       	rcall	.+614    	; 0x1848 <__ultoa_invert>
    15e2:	88 2e       	mov	r8, r24
    15e4:	86 18       	sub	r8, r6
    15e6:	44 c0       	rjmp	.+136    	; 0x1670 <vfprintf+0x2c6>
    15e8:	85 37       	cpi	r24, 0x75	; 117
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <vfprintf+0x24e>
    15ec:	23 2d       	mov	r18, r3
    15ee:	2f 7e       	andi	r18, 0xEF	; 239
    15f0:	b2 2e       	mov	r11, r18
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	25 c0       	rjmp	.+74     	; 0x1642 <vfprintf+0x298>
    15f8:	93 2d       	mov	r25, r3
    15fa:	99 7f       	andi	r25, 0xF9	; 249
    15fc:	b9 2e       	mov	r11, r25
    15fe:	8f 36       	cpi	r24, 0x6F	; 111
    1600:	c1 f0       	breq	.+48     	; 0x1632 <vfprintf+0x288>
    1602:	18 f4       	brcc	.+6      	; 0x160a <vfprintf+0x260>
    1604:	88 35       	cpi	r24, 0x58	; 88
    1606:	79 f0       	breq	.+30     	; 0x1626 <vfprintf+0x27c>
    1608:	ae c0       	rjmp	.+348    	; 0x1766 <vfprintf+0x3bc>
    160a:	80 37       	cpi	r24, 0x70	; 112
    160c:	19 f0       	breq	.+6      	; 0x1614 <vfprintf+0x26a>
    160e:	88 37       	cpi	r24, 0x78	; 120
    1610:	21 f0       	breq	.+8      	; 0x161a <vfprintf+0x270>
    1612:	a9 c0       	rjmp	.+338    	; 0x1766 <vfprintf+0x3bc>
    1614:	e9 2f       	mov	r30, r25
    1616:	e0 61       	ori	r30, 0x10	; 16
    1618:	be 2e       	mov	r11, r30
    161a:	b4 fe       	sbrs	r11, 4
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <vfprintf+0x28e>
    161e:	fb 2d       	mov	r31, r11
    1620:	f4 60       	ori	r31, 0x04	; 4
    1622:	bf 2e       	mov	r11, r31
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <vfprintf+0x28e>
    1626:	34 fe       	sbrs	r3, 4
    1628:	0a c0       	rjmp	.+20     	; 0x163e <vfprintf+0x294>
    162a:	29 2f       	mov	r18, r25
    162c:	26 60       	ori	r18, 0x06	; 6
    162e:	b2 2e       	mov	r11, r18
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x294>
    1632:	28 e0       	ldi	r18, 0x08	; 8
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <vfprintf+0x298>
    1638:	20 e1       	ldi	r18, 0x10	; 16
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x298>
    163e:	20 e1       	ldi	r18, 0x10	; 16
    1640:	32 e0       	ldi	r19, 0x02	; 2
    1642:	f8 01       	movw	r30, r16
    1644:	b7 fe       	sbrs	r11, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x2ac>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x2b8>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 5f       	subi	r16, 0xFE	; 254
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	a3 01       	movw	r20, r6
    1664:	f1 d0       	rcall	.+482    	; 0x1848 <__ultoa_invert>
    1666:	88 2e       	mov	r8, r24
    1668:	86 18       	sub	r8, r6
    166a:	fb 2d       	mov	r31, r11
    166c:	ff 77       	andi	r31, 0x7F	; 127
    166e:	3f 2e       	mov	r3, r31
    1670:	36 fe       	sbrs	r3, 6
    1672:	0d c0       	rjmp	.+26     	; 0x168e <vfprintf+0x2e4>
    1674:	23 2d       	mov	r18, r3
    1676:	2e 7f       	andi	r18, 0xFE	; 254
    1678:	a2 2e       	mov	r10, r18
    167a:	89 14       	cp	r8, r9
    167c:	58 f4       	brcc	.+22     	; 0x1694 <vfprintf+0x2ea>
    167e:	34 fe       	sbrs	r3, 4
    1680:	0b c0       	rjmp	.+22     	; 0x1698 <vfprintf+0x2ee>
    1682:	32 fc       	sbrc	r3, 2
    1684:	09 c0       	rjmp	.+18     	; 0x1698 <vfprintf+0x2ee>
    1686:	83 2d       	mov	r24, r3
    1688:	8e 7e       	andi	r24, 0xEE	; 238
    168a:	a8 2e       	mov	r10, r24
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <vfprintf+0x2ee>
    168e:	b8 2c       	mov	r11, r8
    1690:	a3 2c       	mov	r10, r3
    1692:	03 c0       	rjmp	.+6      	; 0x169a <vfprintf+0x2f0>
    1694:	b8 2c       	mov	r11, r8
    1696:	01 c0       	rjmp	.+2      	; 0x169a <vfprintf+0x2f0>
    1698:	b9 2c       	mov	r11, r9
    169a:	a4 fe       	sbrs	r10, 4
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <vfprintf+0x312>
    169e:	fe 01       	movw	r30, r28
    16a0:	e8 0d       	add	r30, r8
    16a2:	f1 1d       	adc	r31, r1
    16a4:	80 81       	ld	r24, Z
    16a6:	80 33       	cpi	r24, 0x30	; 48
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <vfprintf+0x308>
    16aa:	9a 2d       	mov	r25, r10
    16ac:	99 7e       	andi	r25, 0xE9	; 233
    16ae:	a9 2e       	mov	r10, r25
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <vfprintf+0x31a>
    16b2:	a2 fe       	sbrs	r10, 2
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <vfprintf+0x318>
    16b6:	b3 94       	inc	r11
    16b8:	b3 94       	inc	r11
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <vfprintf+0x31a>
    16bc:	8a 2d       	mov	r24, r10
    16be:	86 78       	andi	r24, 0x86	; 134
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <vfprintf+0x31a>
    16c2:	b3 94       	inc	r11
    16c4:	a3 fc       	sbrc	r10, 3
    16c6:	10 c0       	rjmp	.+32     	; 0x16e8 <vfprintf+0x33e>
    16c8:	a0 fe       	sbrs	r10, 0
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x32e>
    16cc:	b2 14       	cp	r11, r2
    16ce:	80 f4       	brcc	.+32     	; 0x16f0 <vfprintf+0x346>
    16d0:	28 0c       	add	r2, r8
    16d2:	92 2c       	mov	r9, r2
    16d4:	9b 18       	sub	r9, r11
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <vfprintf+0x348>
    16d8:	b2 14       	cp	r11, r2
    16da:	58 f4       	brcc	.+22     	; 0x16f2 <vfprintf+0x348>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	76 d0       	rcall	.+236    	; 0x17d0 <fputc>
    16e4:	b3 94       	inc	r11
    16e6:	f8 cf       	rjmp	.-16     	; 0x16d8 <vfprintf+0x32e>
    16e8:	b2 14       	cp	r11, r2
    16ea:	18 f4       	brcc	.+6      	; 0x16f2 <vfprintf+0x348>
    16ec:	2b 18       	sub	r2, r11
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x34a>
    16f0:	98 2c       	mov	r9, r8
    16f2:	21 2c       	mov	r2, r1
    16f4:	a4 fe       	sbrs	r10, 4
    16f6:	0f c0       	rjmp	.+30     	; 0x1716 <vfprintf+0x36c>
    16f8:	b6 01       	movw	r22, r12
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	68 d0       	rcall	.+208    	; 0x17d0 <fputc>
    1700:	a2 fe       	sbrs	r10, 2
    1702:	16 c0       	rjmp	.+44     	; 0x1730 <vfprintf+0x386>
    1704:	a1 fc       	sbrc	r10, 1
    1706:	03 c0       	rjmp	.+6      	; 0x170e <vfprintf+0x364>
    1708:	88 e7       	ldi	r24, 0x78	; 120
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x368>
    170e:	88 e5       	ldi	r24, 0x58	; 88
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b6 01       	movw	r22, r12
    1714:	0c c0       	rjmp	.+24     	; 0x172e <vfprintf+0x384>
    1716:	8a 2d       	mov	r24, r10
    1718:	86 78       	andi	r24, 0x86	; 134
    171a:	51 f0       	breq	.+20     	; 0x1730 <vfprintf+0x386>
    171c:	a1 fe       	sbrs	r10, 1
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <vfprintf+0x37a>
    1720:	8b e2       	ldi	r24, 0x2B	; 43
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <vfprintf+0x37c>
    1724:	80 e2       	ldi	r24, 0x20	; 32
    1726:	a7 fc       	sbrc	r10, 7
    1728:	8d e2       	ldi	r24, 0x2D	; 45
    172a:	b6 01       	movw	r22, r12
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	50 d0       	rcall	.+160    	; 0x17d0 <fputc>
    1730:	89 14       	cp	r8, r9
    1732:	30 f4       	brcc	.+12     	; 0x1740 <vfprintf+0x396>
    1734:	b6 01       	movw	r22, r12
    1736:	80 e3       	ldi	r24, 0x30	; 48
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	4a d0       	rcall	.+148    	; 0x17d0 <fputc>
    173c:	9a 94       	dec	r9
    173e:	f8 cf       	rjmp	.-16     	; 0x1730 <vfprintf+0x386>
    1740:	8a 94       	dec	r8
    1742:	f3 01       	movw	r30, r6
    1744:	e8 0d       	add	r30, r8
    1746:	f1 1d       	adc	r31, r1
    1748:	80 81       	ld	r24, Z
    174a:	b6 01       	movw	r22, r12
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	40 d0       	rcall	.+128    	; 0x17d0 <fputc>
    1750:	81 10       	cpse	r8, r1
    1752:	f6 cf       	rjmp	.-20     	; 0x1740 <vfprintf+0x396>
    1754:	22 20       	and	r2, r2
    1756:	09 f4       	brne	.+2      	; 0x175a <vfprintf+0x3b0>
    1758:	4e ce       	rjmp	.-868    	; 0x13f6 <vfprintf+0x4c>
    175a:	b6 01       	movw	r22, r12
    175c:	80 e2       	ldi	r24, 0x20	; 32
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	37 d0       	rcall	.+110    	; 0x17d0 <fputc>
    1762:	2a 94       	dec	r2
    1764:	f7 cf       	rjmp	.-18     	; 0x1754 <vfprintf+0x3aa>
    1766:	f6 01       	movw	r30, r12
    1768:	86 81       	ldd	r24, Z+6	; 0x06
    176a:	97 81       	ldd	r25, Z+7	; 0x07
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <vfprintf+0x3c8>
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	2b 96       	adiw	r28, 0x0b	; 11
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	ff 90       	pop	r15
    1788:	ef 90       	pop	r14
    178a:	df 90       	pop	r13
    178c:	cf 90       	pop	r12
    178e:	bf 90       	pop	r11
    1790:	af 90       	pop	r10
    1792:	9f 90       	pop	r9
    1794:	8f 90       	pop	r8
    1796:	7f 90       	pop	r7
    1798:	6f 90       	pop	r6
    179a:	5f 90       	pop	r5
    179c:	4f 90       	pop	r4
    179e:	3f 90       	pop	r3
    17a0:	2f 90       	pop	r2
    17a2:	08 95       	ret

000017a4 <strnlen_P>:
    17a4:	fc 01       	movw	r30, r24
    17a6:	05 90       	lpm	r0, Z+
    17a8:	61 50       	subi	r22, 0x01	; 1
    17aa:	70 40       	sbci	r23, 0x00	; 0
    17ac:	01 10       	cpse	r0, r1
    17ae:	d8 f7       	brcc	.-10     	; 0x17a6 <strnlen_P+0x2>
    17b0:	80 95       	com	r24
    17b2:	90 95       	com	r25
    17b4:	8e 0f       	add	r24, r30
    17b6:	9f 1f       	adc	r25, r31
    17b8:	08 95       	ret

000017ba <strnlen>:
    17ba:	fc 01       	movw	r30, r24
    17bc:	61 50       	subi	r22, 0x01	; 1
    17be:	70 40       	sbci	r23, 0x00	; 0
    17c0:	01 90       	ld	r0, Z+
    17c2:	01 10       	cpse	r0, r1
    17c4:	d8 f7       	brcc	.-10     	; 0x17bc <strnlen+0x2>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	8e 0f       	add	r24, r30
    17cc:	9f 1f       	adc	r25, r31
    17ce:	08 95       	ret

000017d0 <fputc>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	fb 01       	movw	r30, r22
    17da:	23 81       	ldd	r18, Z+3	; 0x03
    17dc:	21 fd       	sbrc	r18, 1
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <fputc+0x16>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	2c c0       	rjmp	.+88     	; 0x183e <fputc+0x6e>
    17e6:	22 ff       	sbrs	r18, 2
    17e8:	16 c0       	rjmp	.+44     	; 0x1816 <fputc+0x46>
    17ea:	46 81       	ldd	r20, Z+6	; 0x06
    17ec:	57 81       	ldd	r21, Z+7	; 0x07
    17ee:	24 81       	ldd	r18, Z+4	; 0x04
    17f0:	35 81       	ldd	r19, Z+5	; 0x05
    17f2:	42 17       	cp	r20, r18
    17f4:	53 07       	cpc	r21, r19
    17f6:	44 f4       	brge	.+16     	; 0x1808 <fputc+0x38>
    17f8:	a0 81       	ld	r26, Z
    17fa:	b1 81       	ldd	r27, Z+1	; 0x01
    17fc:	9d 01       	movw	r18, r26
    17fe:	2f 5f       	subi	r18, 0xFF	; 255
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	31 83       	std	Z+1, r19	; 0x01
    1804:	20 83       	st	Z, r18
    1806:	8c 93       	st	X, r24
    1808:	26 81       	ldd	r18, Z+6	; 0x06
    180a:	37 81       	ldd	r19, Z+7	; 0x07
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	37 83       	std	Z+7, r19	; 0x07
    1812:	26 83       	std	Z+6, r18	; 0x06
    1814:	14 c0       	rjmp	.+40     	; 0x183e <fputc+0x6e>
    1816:	8b 01       	movw	r16, r22
    1818:	ec 01       	movw	r28, r24
    181a:	fb 01       	movw	r30, r22
    181c:	00 84       	ldd	r0, Z+8	; 0x08
    181e:	f1 85       	ldd	r31, Z+9	; 0x09
    1820:	e0 2d       	mov	r30, r0
    1822:	09 95       	icall
    1824:	89 2b       	or	r24, r25
    1826:	e1 f6       	brne	.-72     	; 0x17e0 <fputc+0x10>
    1828:	d8 01       	movw	r26, r16
    182a:	16 96       	adiw	r26, 0x06	; 6
    182c:	8d 91       	ld	r24, X+
    182e:	9c 91       	ld	r25, X
    1830:	17 97       	sbiw	r26, 0x07	; 7
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	17 96       	adiw	r26, 0x07	; 7
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
    183a:	16 97       	sbiw	r26, 0x06	; 6
    183c:	ce 01       	movw	r24, r28
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <__ultoa_invert>:
    1848:	fa 01       	movw	r30, r20
    184a:	aa 27       	eor	r26, r26
    184c:	28 30       	cpi	r18, 0x08	; 8
    184e:	51 f1       	breq	.+84     	; 0x18a4 <__ultoa_invert+0x5c>
    1850:	20 31       	cpi	r18, 0x10	; 16
    1852:	81 f1       	breq	.+96     	; 0x18b4 <__ultoa_invert+0x6c>
    1854:	e8 94       	clt
    1856:	6f 93       	push	r22
    1858:	6e 7f       	andi	r22, 0xFE	; 254
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f 4f       	sbci	r24, 0xFF	; 255
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	af 4f       	sbci	r26, 0xFF	; 255
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	3e d0       	rcall	.+124    	; 0x18e4 <__ultoa_invert+0x9c>
    1868:	b4 e0       	ldi	r27, 0x04	; 4
    186a:	3c d0       	rcall	.+120    	; 0x18e4 <__ultoa_invert+0x9c>
    186c:	67 0f       	add	r22, r23
    186e:	78 1f       	adc	r23, r24
    1870:	89 1f       	adc	r24, r25
    1872:	9a 1f       	adc	r25, r26
    1874:	a1 1d       	adc	r26, r1
    1876:	68 0f       	add	r22, r24
    1878:	79 1f       	adc	r23, r25
    187a:	8a 1f       	adc	r24, r26
    187c:	91 1d       	adc	r25, r1
    187e:	a1 1d       	adc	r26, r1
    1880:	6a 0f       	add	r22, r26
    1882:	71 1d       	adc	r23, r1
    1884:	81 1d       	adc	r24, r1
    1886:	91 1d       	adc	r25, r1
    1888:	a1 1d       	adc	r26, r1
    188a:	20 d0       	rcall	.+64     	; 0x18cc <__ultoa_invert+0x84>
    188c:	09 f4       	brne	.+2      	; 0x1890 <__ultoa_invert+0x48>
    188e:	68 94       	set
    1890:	3f 91       	pop	r19
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	26 9f       	mul	r18, r22
    1896:	11 24       	eor	r1, r1
    1898:	30 19       	sub	r19, r0
    189a:	30 5d       	subi	r19, 0xD0	; 208
    189c:	31 93       	st	Z+, r19
    189e:	de f6       	brtc	.-74     	; 0x1856 <__ultoa_invert+0xe>
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret
    18a4:	46 2f       	mov	r20, r22
    18a6:	47 70       	andi	r20, 0x07	; 7
    18a8:	40 5d       	subi	r20, 0xD0	; 208
    18aa:	41 93       	st	Z+, r20
    18ac:	b3 e0       	ldi	r27, 0x03	; 3
    18ae:	0f d0       	rcall	.+30     	; 0x18ce <__ultoa_invert+0x86>
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__ultoa_invert+0x5c>
    18b2:	f6 cf       	rjmp	.-20     	; 0x18a0 <__ultoa_invert+0x58>
    18b4:	46 2f       	mov	r20, r22
    18b6:	4f 70       	andi	r20, 0x0F	; 15
    18b8:	40 5d       	subi	r20, 0xD0	; 208
    18ba:	4a 33       	cpi	r20, 0x3A	; 58
    18bc:	18 f0       	brcs	.+6      	; 0x18c4 <__ultoa_invert+0x7c>
    18be:	49 5d       	subi	r20, 0xD9	; 217
    18c0:	31 fd       	sbrc	r19, 1
    18c2:	40 52       	subi	r20, 0x20	; 32
    18c4:	41 93       	st	Z+, r20
    18c6:	02 d0       	rcall	.+4      	; 0x18cc <__ultoa_invert+0x84>
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__ultoa_invert+0x6c>
    18ca:	ea cf       	rjmp	.-44     	; 0x18a0 <__ultoa_invert+0x58>
    18cc:	b4 e0       	ldi	r27, 0x04	; 4
    18ce:	a6 95       	lsr	r26
    18d0:	97 95       	ror	r25
    18d2:	87 95       	ror	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__ultoa_invert+0x86>
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	08 95       	ret
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	0a 2e       	mov	r0, r26
    18ea:	06 94       	lsr	r0
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	ba 95       	dec	r27
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0xa2>
    18f8:	62 0f       	add	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	95 1f       	adc	r25, r21
    1900:	a0 1d       	adc	r26, r0
    1902:	08 95       	ret

00001904 <_exit>:
    1904:	f8 94       	cli

00001906 <__stop_program>:
    1906:	ff cf       	rjmp	.-2      	; 0x1906 <__stop_program>
