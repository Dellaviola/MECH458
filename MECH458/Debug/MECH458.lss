
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  0000181a  000018ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000181a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800230  00800230  000019de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000444e  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a55  00000000  00000000  000061ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003086  00000000  00000000  00007c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  0000aca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009127  00000000  00000000  0000b438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000179f  00000000  00000000  0001455f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00015cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  00015fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	6d c4       	rjmp	.+2266   	; 0x910 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	bc c6       	rjmp	.+3448   	; 0xdbe <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e1       	ldi	r30, 0x1A	; 26
      ac:	f8 e1       	ldi	r31, 0x18	; 24
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 33       	cpi	r26, 0x30	; 48
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a0 e3       	ldi	r26, 0x30	; 48
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a1 3b       	cpi	r26, 0xB1	; 177
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	a2 d2       	rcall	.+1348   	; 0x614 <main>
      d0:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <_exit>

000000d4 <__bad_interrupt>:
      d4:	6d c3       	rjmp	.+1754   	; 0x7b0 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 10 samples	
	if (g_ADCCount < 10)
     11c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     120:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     124:	0a 97       	sbiw	r24, 0x0a	; 10
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     12c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <g_ADCCount+0x1>
     13a:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e4 5c       	subi	r30, 0xC4	; 196
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	} // if

	// Unblock ADC task
	if (g_ADCCount == 10) _timer[1].state = READY;
     15e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     162:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     166:	0a 97       	sbiw	r24, 0x0a	; 10
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_timer+0x11>

}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     19a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     1a6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     1aa:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     1ae:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     1b2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2347>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     1cc:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     1d0:	0c d2       	rcall	.+1048   	; 0x5ea <LL_UpdateStatus>
     1d2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2348>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2349>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <_timer+0x23>
     1ec:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2349>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_timer+0x1a>
     206:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2347>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     220:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     22c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     230:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     234:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	91 d1       	rcall	.+802    	; 0x55e <LL_Next>
     23c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     240:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2348>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	03 c0       	rjmp	.+6      	; 0x25e <SERVER_Task+0xd4>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2349>
     25e:	08 95       	ret

00000260 <ADC_Task>:
     260:	8f 92       	push	r8
     262:	9f 92       	push	r9
     264:	af 92       	push	r10
     266:	bf 92       	push	r11
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	cf 93       	push	r28
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	ba 01       	movw	r22, r20
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	2f b7       	in	r18, 0x3f	; 63
     27e:	f8 94       	cli
     280:	fc 01       	movw	r30, r24
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	e4 5c       	subi	r30, 0xC4	; 196
     288:	fd 4f       	sbci	r31, 0xFD	; 253
     28a:	01 90       	ld	r0, Z+
     28c:	f0 81       	ld	r31, Z
     28e:	e0 2d       	mov	r30, r0
     290:	4e 0f       	add	r20, r30
     292:	5f 1f       	adc	r21, r31
     294:	61 1d       	adc	r22, r1
     296:	71 1d       	adc	r23, r1
     298:	2f bf       	out	0x3f, r18	; 63
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	8a 30       	cpi	r24, 0x0A	; 10
     29e:	91 05       	cpc	r25, r1
     2a0:	69 f7       	brne	.-38     	; 0x27c <ADC_Task+0x1c>
     2a2:	cf b7       	in	r28, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	cb 01       	movw	r24, r22
     2a8:	ba 01       	movw	r22, r20
     2aa:	2a e0       	ldi	r18, 0x0A	; 10
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	93 d6       	rcall	.+3366   	; 0xfda <__udivmodsi4>
     2b4:	69 01       	movw	r12, r18
     2b6:	7a 01       	movw	r14, r20
     2b8:	cf bf       	out	0x3f, r28	; 63
     2ba:	cf b7       	in	r28, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	da 01       	movw	r26, r20
     2c0:	c9 01       	movw	r24, r18
     2c2:	0b 97       	sbiw	r24, 0x0b	; 11
     2c4:	a1 09       	sbc	r26, r1
     2c6:	b1 09       	sbc	r27, r1
     2c8:	89 37       	cpi	r24, 0x79	; 121
     2ca:	93 40       	sbci	r25, 0x03	; 3
     2cc:	a1 05       	cpc	r26, r1
     2ce:	b1 05       	cpc	r27, r1
     2d0:	a0 f4       	brcc	.+40     	; 0x2fa <ADC_Task+0x9a>
     2d2:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     2d6:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     2da:	6c d1       	rcall	.+728    	; 0x5b4 <LL_GetRefl>
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b0 e0       	ldi	r27, 0x00	; 0
     2e0:	c8 16       	cp	r12, r24
     2e2:	d9 06       	cpc	r13, r25
     2e4:	ea 06       	cpc	r14, r26
     2e6:	fb 06       	cpc	r15, r27
     2e8:	40 f4       	brcc	.+16     	; 0x2fa <ADC_Task+0x9a>
     2ea:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     2ee:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     2f2:	00 97       	sbiw	r24, 0x00	; 0
     2f4:	11 f0       	breq	.+4      	; 0x2fa <ADC_Task+0x9a>
     2f6:	b6 01       	movw	r22, r12
     2f8:	68 d1       	rcall	.+720    	; 0x5ca <LL_UpdateRefl>
     2fa:	cf bf       	out	0x3f, r28	; 63
     2fc:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
     300:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
     304:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_timer+0x11>
     308:	66 9b       	sbis	0x0c, 6	; 12
     30a:	05 c0       	rjmp	.+10     	; 0x316 <ADC_Task+0xb6>
     30c:	ea e7       	ldi	r30, 0x7A	; 122
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	80 64       	ori	r24, 0x40	; 64
     314:	80 83       	st	Z, r24
     316:	cf 91       	pop	r28
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	bf 90       	pop	r11
     322:	af 90       	pop	r10
     324:	9f 90       	pop	r9
     326:	8f 90       	pop	r8
     328:	08 95       	ret

0000032a <MAG_Task>:
     32a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <g_MotorOn>
     32e:	88 23       	and	r24, r24
     330:	29 f0       	breq	.+10     	; 0x33c <MAG_Task+0x12>
     332:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2376>
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <tick.2376>
     33c:	64 99       	sbic	0x0c, 4	; 12
     33e:	1a c0       	rjmp	.+52     	; 0x374 <MAG_Task+0x4a>
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     346:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     34a:	4f d1       	rcall	.+670    	; 0x5ea <LL_UpdateStatus>
     34c:	61 e0       	ldi	r22, 0x01	; 1
     34e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     352:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     356:	3f d1       	rcall	.+638    	; 0x5d6 <LL_UpdateMag>
     358:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     35c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     360:	fe d0       	rcall	.+508    	; 0x55e <LL_Next>
     362:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     366:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     36a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     36e:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2376>
     372:	08 95       	ret
     374:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2376>
     378:	8f 31       	cpi	r24, 0x1F	; 31
     37a:	c8 f0       	brcs	.+50     	; 0x3ae <MAG_Task+0x84>
     37c:	61 e0       	ldi	r22, 0x01	; 1
     37e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     382:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     386:	31 d1       	rcall	.+610    	; 0x5ea <LL_UpdateStatus>
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     38e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     392:	21 d1       	rcall	.+578    	; 0x5d6 <LL_UpdateMag>
     394:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     398:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     39c:	e0 d0       	rcall	.+448    	; 0x55e <LL_Next>
     39e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     3a2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     3a6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     3aa:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2376>
     3ae:	08 95       	ret

000003b0 <EXIT_Task>:
     3b0:	cf 93       	push	r28
     3b2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2382>
     3b6:	81 11       	cpse	r24, r1
     3b8:	6e c0       	rjmp	.+220    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     3ba:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2383>
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <delay.2383>
     3c4:	e1 ea       	ldi	r30, 0xA1	; 161
     3c6:	f2 e0       	ldi	r31, 0x02	; 2
     3c8:	85 81       	ldd	r24, Z+5	; 0x05
     3ca:	96 81       	ldd	r25, Z+6	; 0x06
     3cc:	87 81       	ldd	r24, Z+7	; 0x07
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <EXIT_Task+0x26>
     3d0:	80 e8       	ldi	r24, 0x80	; 128
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fe d1       	rcall	.+1020   	; 0x7d2 <PWM>
     3d6:	c0 91 a5 02 	lds	r28, 0x02A5	; 0x8002a5 <stepper+0x4>
     3da:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     3de:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     3e2:	e3 d0       	rcall	.+454    	; 0x5aa <LL_GetClass>
     3e4:	e8 2f       	mov	r30, r24
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	ea 5f       	subi	r30, 0xFA	; 250
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 81       	ld	r24, Z
     3ee:	c8 13       	cpse	r28, r24
     3f0:	49 c0       	rjmp	.+146    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     3f2:	80 e8       	ldi	r24, 0x80	; 128
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	ed d1       	rcall	.+986    	; 0x7d2 <PWM>
     3f8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2383>
     3fc:	85 31       	cpi	r24, 0x15	; 21
     3fe:	28 f4       	brcc	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2382>
     404:	88 23       	and	r24, r24
     406:	09 f4       	brne	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	40 c0       	rjmp	.+128    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <memory.2382>
     410:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <delay.2383>
     414:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     418:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     41c:	c6 d0       	rcall	.+396    	; 0x5aa <LL_GetClass>
     41e:	c8 2f       	mov	r28, r24
     420:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <HEAD>
     424:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <HEAD+0x1>
     428:	82 81       	ldd	r24, Z+2	; 0x02
     42a:	93 81       	ldd	r25, Z+3	; 0x03
     42c:	be d0       	rcall	.+380    	; 0x5aa <LL_GetClass>
     42e:	c8 13       	cpse	r28, r24
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <memory.2382>
     436:	63 e0       	ldi	r22, 0x03	; 3
     438:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     43c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     440:	d4 d0       	rcall	.+424    	; 0x5ea <LL_UpdateStatus>
     442:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     446:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     44a:	89 d0       	rcall	.+274    	; 0x55e <LL_Next>
     44c:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
     450:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     454:	fc 01       	movw	r30, r24
     456:	82 81       	ldd	r24, Z+2	; 0x02
     458:	93 81       	ldd	r25, Z+3	; 0x03
     45a:	a7 d0       	rcall	.+334    	; 0x5aa <LL_GetClass>
     45c:	e8 2f       	mov	r30, r24
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	ea 5f       	subi	r30, 0xFA	; 250
     462:	fe 4f       	sbci	r31, 0xFE	; 254
     464:	c0 81       	ld	r28, Z
     466:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     46a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     46e:	9d d0       	rcall	.+314    	; 0x5aa <LL_GetClass>
     470:	e8 2f       	mov	r30, r24
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	ea 5f       	subi	r30, 0xFA	; 250
     476:	fe 4f       	sbci	r31, 0xFE	; 254
     478:	80 81       	ld	r24, Z
     47a:	6c 2f       	mov	r22, r28
     47c:	34 d2       	rcall	.+1128   	; 0x8e6 <STEPPER_SetRotation>
     47e:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_timer+0x23>
     482:	03 c0       	rjmp	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	a4 d1       	rcall	.+840    	; 0x7d2 <PWM>
     48a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     48e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     492:	8b d0       	rcall	.+278    	; 0x5aa <LL_GetClass>
     494:	0a c0       	rjmp	.+20     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     496:	e1 ea       	ldi	r30, 0xA1	; 161
     498:	f2 e0       	ldi	r31, 0x02	; 2
     49a:	85 81       	ldd	r24, Z+5	; 0x05
     49c:	96 81       	ldd	r25, Z+6	; 0x06
     49e:	97 81       	ldd	r25, Z+7	; 0x07
     4a0:	89 1b       	sub	r24, r25
     4a2:	8f 30       	cpi	r24, 0x0F	; 15
     4a4:	08 f0       	brcs	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	97 cf       	rjmp	.-210    	; 0x3d6 <EXIT_Task+0x26>
     4a8:	93 cf       	rjmp	.-218    	; 0x3d0 <EXIT_Task+0x20>
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <BTN_Task>:
     4ae:	89 b1       	in	r24, 0x09	; 9
     4b0:	83 70       	andi	r24, 0x03	; 3
     4b2:	c9 f0       	breq	.+50     	; 0x4e6 <BTN_Task+0x38>
     4b4:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	90 f0       	brcs	.+36     	; 0x4e6 <BTN_Task+0x38>
     4c2:	89 b1       	in	r24, 0x09	; 9
     4c4:	83 70       	andi	r24, 0x03	; 3
     4c6:	19 f4       	brne	.+6      	; 0x4ce <BTN_Task+0x20>
     4c8:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     4cc:	08 95       	ret
     4ce:	89 b1       	in	r24, 0x09	; 9
     4d0:	83 70       	andi	r24, 0x03	; 3
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	29 f4       	brne	.+10     	; 0x4e0 <BTN_Task+0x32>
     4d6:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <g_PauseRequest>
     4da:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     4de:	08 95       	ret
     4e0:	89 b1       	in	r24, 0x09	; 9
     4e2:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     4e6:	08 95       	ret

000004e8 <WATCHDOG_Task>:
     4e8:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	18 f0       	brcs	.+6      	; 0x4f6 <WATCHDOG_Task+0xe>
     4f0:	8b e1       	ldi	r24, 0x1B	; 27
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	59 d3       	rcall	.+1714   	; 0xba8 <SYS_Pause>
     4f6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <g_WDTimeout>
     500:	08 95       	ret

00000502 <D_Blinky>:
     502:	9b b1       	in	r25, 0x0b	; 11
     504:	80 ea       	ldi	r24, 0xA0	; 160
     506:	89 27       	eor	r24, r25
     508:	8b b9       	out	0x0b, r24	; 11
     50a:	08 95       	ret

0000050c <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
     50c:	08 95       	ret

0000050e <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	7c 01       	movw	r14, r24
     51a:	16 2f       	mov	r17, r22
     51c:	d4 2f       	mov	r29, r20
     51e:	c2 2f       	mov	r28, r18
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	7c d5       	rcall	.+2808   	; 0x101e <malloc>
     526:	fc 01       	movw	r30, r24
     528:	f1 82       	std	Z+1, r15	; 0x01
     52a:	e0 82       	st	Z, r14
     52c:	12 83       	std	Z+2, r17	; 0x02
     52e:	d3 83       	std	Z+3, r29	; 0x03
     530:	c4 83       	std	Z+4, r28	; 0x04
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	08 95       	ret

0000053e <LL_ItemListInit>:
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	6a d5       	rcall	.+2772   	; 0x101e <malloc>
     54a:	fc 01       	movw	r30, r24
     54c:	d1 83       	std	Z+1, r29	; 0x01
     54e:	c0 83       	st	Z, r28
     550:	15 82       	std	Z+5, r1	; 0x05
     552:	14 82       	std	Z+4, r1	; 0x04
     554:	13 82       	std	Z+3, r1	; 0x03
     556:	12 82       	std	Z+2, r1	; 0x02
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <LL_Next>:
     55e:	fc 01       	movw	r30, r24
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	08 95       	ret

00000566 <LL_AddBack>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
     56c:	cb 01       	movw	r24, r22
     56e:	01 c0       	rjmp	.+2      	; 0x572 <LL_AddBack+0xc>
     570:	e9 01       	movw	r28, r18
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	3b 81       	ldd	r19, Y+3	; 0x03
     576:	21 15       	cp	r18, r1
     578:	31 05       	cpc	r19, r1
     57a:	d1 f7       	brne	.-12     	; 0x570 <LL_AddBack+0xa>
     57c:	e0 df       	rcall	.-64     	; 0x53e <LL_ItemListInit>
     57e:	9b 83       	std	Y+3, r25	; 0x03
     580:	8a 83       	std	Y+2, r24	; 0x02
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <LL_Size>:
     588:	dc 01       	movw	r26, r24
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	13 97       	sbiw	r26, 0x03	; 3
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	41 f0       	breq	.+16     	; 0x5a6 <LL_Size+0x1e>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	02 80       	ldd	r0, Z+2	; 0x02
     59c:	f3 81       	ldd	r31, Z+3	; 0x03
     59e:	e0 2d       	mov	r30, r0
     5a0:	30 97       	sbiw	r30, 0x00	; 0
     5a2:	d1 f7       	brne	.-12     	; 0x598 <LL_Size+0x10>
     5a4:	08 95       	ret
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	08 95       	ret

000005aa <LL_GetClass>:
     5aa:	dc 01       	movw	r26, r24
     5ac:	ed 91       	ld	r30, X+
     5ae:	fc 91       	ld	r31, X
     5b0:	83 81       	ldd	r24, Z+3	; 0x03
     5b2:	08 95       	ret

000005b4 <LL_GetRefl>:
     5b4:	dc 01       	movw	r26, r24
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	08 95       	ret

000005c0 <LL_GetMag>:
     5c0:	dc 01       	movw	r26, r24
     5c2:	ed 91       	ld	r30, X+
     5c4:	fc 91       	ld	r31, X
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	08 95       	ret

000005ca <LL_UpdateRefl>:
     5ca:	dc 01       	movw	r26, r24
     5cc:	ed 91       	ld	r30, X+
     5ce:	fc 91       	ld	r31, X
     5d0:	71 83       	std	Z+1, r23	; 0x01
     5d2:	60 83       	st	Z, r22
     5d4:	08 95       	ret

000005d6 <LL_UpdateMag>:
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	62 83       	std	Z+2, r22	; 0x02
     5de:	08 95       	ret

000005e0 <LL_UpdateClass>:
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	63 83       	std	Z+3, r22	; 0x03
     5e8:	08 95       	ret

000005ea <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5ea:	dc 01       	movw	r26, r24
     5ec:	ed 91       	ld	r30, X+
     5ee:	fc 91       	ld	r31, X
     5f0:	64 83       	std	Z+4, r22	; 0x04
     5f2:	08 95       	ret

000005f4 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5f4:	dc 01       	movw	r26, r24
     5f6:	ed 91       	ld	r30, X+
     5f8:	fc 91       	ld	r31, X
     5fa:	84 81       	ldd	r24, Z+4	; 0x04
     5fc:	08 95       	ret

000005fe <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     602:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     604:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     606:	80 ef       	ldi	r24, 0xF0	; 240
     608:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     60a:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     60c:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret

00000614 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     614:	52 d2       	rcall	.+1188   	; 0xaba <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     616:	89 b1       	in	r24, 0x09	; 9
     618:	83 70       	andi	r24, 0x03	; 3
     61a:	e9 f7       	brne	.-6      	; 0x616 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     61c:	89 e2       	ldi	r24, 0x29	; 41
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	ce d4       	rcall	.+2460   	; 0xfbe <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     622:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	45 ec       	ldi	r20, 0xC5	; 197
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	4b d4       	rcall	.+2198   	; 0xecc <TIMER_Create>
		_timer[0].state = READY;
     636:	c6 e5       	ldi	r28, 0x56	; 86
     638:	d2 e0       	ldi	r29, 0x02	; 2
     63a:	12 e0       	ldi	r17, 0x02	; 2
     63c:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e3       	ldi	r20, 0x30	; 48
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	3e d4       	rcall	.+2172   	; 0xecc <TIMER_Create>
		_timer[1].state = BLOCKED;
     650:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	45 e9       	ldi	r20, 0x95	; 149
     658:	51 e0       	ldi	r21, 0x01	; 1
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	34 d4       	rcall	.+2152   	; 0xecc <TIMER_Create>
		_timer[2].state = BLOCKED;
     664:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	48 ed       	ldi	r20, 0xD8	; 216
     66c:	51 e0       	ldi	r21, 0x01	; 1
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	2a d4       	rcall	.+2132   	; 0xecc <TIMER_Create>
		_timer[3].state = BLOCKED;
     678:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(180, 1, ADD_Task, NULL);		// Item Enter Handling
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	46 e8       	ldi	r20, 0x86	; 134
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	84 eb       	ldi	r24, 0xB4	; 180
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	20 d4       	rcall	.+2112   	; 0xecc <TIMER_Create>
		_timer[4].state = BLOCKED;
     68c:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	47 e5       	ldi	r20, 0x57	; 87
     694:	52 e0       	ldi	r21, 0x02	; 2
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	82 e3       	ldi	r24, 0x32	; 50
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	16 d4       	rcall	.+2092   	; 0xecc <TIMER_Create>
		_timer[5].state = READY;
     6a0:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);		// Blinky Leds
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	41 e8       	ldi	r20, 0x81	; 129
     6a8:	52 e0       	ldi	r21, 0x02	; 2
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	88 ee       	ldi	r24, 0xE8	; 232
     6b0:	93 e0       	ldi	r25, 0x03	; 3
     6b2:	0c d4       	rcall	.+2072   	; 0xecc <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]

		TIMER_Create(4505, 1, WATCHDOG_Task, NULL);
     6b4:	1e af       	std	Y+62, r17	; 0x3e
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	44 e7       	ldi	r20, 0x74	; 116
     6bc:	52 e0       	ldi	r21, 0x02	; 2
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	89 e9       	ldi	r24, 0x99	; 153
		_timer[7].state = BLOCKED;
     6c4:	91 e1       	ldi	r25, 0x11	; 17
     6c6:	02 d4       	rcall	.+2052   	; 0xecc <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     6c8:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_timer+0x47>
     6cc:	8c e3       	ldi	r24, 0x3C	; 60
     6ce:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     6d0:	76 d4       	rcall	.+2284   	; 0xfbe <UART_SendString>
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	7d d0       	rcall	.+250    	; 0x7d2 <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     6d8:	78 94       	sei
     6da:	e1 2c       	mov	r14, r1
					// Unknown non-magnetic object
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     6dc:	f1 2c       	mov	r15, r1
     6de:	cc 24       	eor	r12, r12
     6e0:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6e2:	d1 2c       	mov	r13, r1
     6e4:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <g_PauseRequest>
     6e8:	88 23       	and	r24, r24
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <main+0xde>
     6ec:	8e e4       	ldi	r24, 0x4E	; 78
     6ee:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     6f0:	5b d2       	rcall	.+1206   	; 0xba8 <SYS_Pause>
     6f2:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     6f6:	d0 91 37 02 	lds	r29, 0x0237	; 0x800237 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6fa:	20 97       	sbiw	r28, 0x00	; 0
     6fc:	99 f3       	breq	.-26     	; 0x6e4 <main+0xd0>
     6fe:	20 97       	sbiw	r28, 0x00	; 0
     700:	09 f4       	brne	.+2      	; 0x704 <main+0xf0>
     702:	4f c0       	rjmp	.+158    	; 0x7a2 <main+0x18e>
     704:	ce 01       	movw	r24, r28
     706:	51 df       	rcall	.-350    	; 0x5aa <LL_GetClass>
     708:	84 30       	cpi	r24, 0x04	; 4
     70a:	09 f0       	breq	.+2      	; 0x70e <main+0xfa>
     70c:	4a c0       	rjmp	.+148    	; 0x7a2 <main+0x18e>
     70e:	ce 01       	movw	r24, r28
     710:	71 df       	rcall	.-286    	; 0x5f4 <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	09 f0       	breq	.+2      	; 0x718 <main+0x104>
     716:	45 c0       	rjmp	.+138    	; 0x7a2 <main+0x18e>
     718:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     71a:	4c df       	rcall	.-360    	; 0x5b4 <LL_GetRefl>
     71c:	8c 01       	movw	r16, r24
     71e:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     720:	4f df       	rcall	.-354    	; 0x5c0 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     722:	88 23       	and	r24, r24
     724:	91 f0       	breq	.+36     	; 0x74a <main+0x136>
     726:	c8 01       	movw	r24, r16
     728:	44 97       	sbiw	r24, 0x14	; 20
     72a:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     72c:	91 05       	cpc	r25, r1
     72e:	20 f4       	brcc	.+8      	; 0x738 <main+0x124>
     730:	62 e0       	ldi	r22, 0x02	; 2
     732:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     734:	55 df       	rcall	.-342    	; 0x5e0 <LL_UpdateClass>
     736:	1a c0       	rjmp	.+52     	; 0x76c <main+0x158>
     738:	0b 52       	subi	r16, 0x2B	; 43
     73a:	11 40       	sbci	r17, 0x01	; 1
     73c:	00 36       	cpi	r16, 0x60	; 96
					{
						LL_UpdateClass(temp, STEEL);
     73e:	11 40       	sbci	r17, 0x01	; 1
     740:	a8 f4       	brcc	.+42     	; 0x76c <main+0x158>
     742:	63 e0       	ldi	r22, 0x03	; 3
     744:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     746:	4c df       	rcall	.-360    	; 0x5e0 <LL_UpdateClass>
     748:	11 c0       	rjmp	.+34     	; 0x76c <main+0x158>
     74a:	c8 01       	movw	r24, r16
     74c:	86 57       	subi	r24, 0x76	; 118
     74e:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     750:	8e 97       	sbiw	r24, 0x2e	; 46
     752:	20 f4       	brcc	.+8      	; 0x75c <main+0x148>
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     758:	43 df       	rcall	.-378    	; 0x5e0 <LL_UpdateClass>
     75a:	08 c0       	rjmp	.+16     	; 0x76c <main+0x158>
     75c:	0b 53       	subi	r16, 0x3B	; 59
     75e:	13 40       	sbci	r17, 0x03	; 3
     760:	00 33       	cpi	r16, 0x30	; 48
				{
					LL_UpdateClass(temp, WHITE);
     762:	11 05       	cpc	r17, r1
     764:	18 f4       	brcc	.+6      	; 0x76c <main+0x158>
     766:	60 e0       	ldi	r22, 0x00	; 0
				}
				else
				{
					// Unknown non-magnetic object
				}
				if(memory == 0)
     768:	ce 01       	movw	r24, r28
     76a:	3a df       	rcall	.-396    	; 0x5e0 <LL_UpdateClass>
     76c:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     76e:	f1 04       	cpc	r15, r1
     770:	c1 f4       	brne	.+48     	; 0x7a2 <main+0x18e>
     772:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     776:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     77a:	17 df       	rcall	.-466    	; 0x5aa <LL_GetClass>
     77c:	e8 2f       	mov	r30, r24
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	e1 5f       	subi	r30, 0xF1	; 241
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	10 81       	ld	r17, Z
     786:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     78a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     78e:	0d df       	rcall	.-486    	; 0x5aa <LL_GetClass>
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	e1 5f       	subi	r30, 0xF1	; 241
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	80 81       	ld	r24, Z
     79a:	61 2f       	mov	r22, r17
					memory = 1;
     79c:	a4 d0       	rcall	.+328    	; 0x8e6 <STEPPER_SetRotation>
     79e:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     7a0:	fd 2c       	mov	r15, r13
     7a2:	ce 01       	movw	r24, r28
     7a4:	dc de       	rcall	.-584    	; 0x55e <LL_Next>
     7a6:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <main+0x19a>
     7ac:	a8 cf       	rjmp	.-176    	; 0x6fe <main+0xea>
     7ae:	9a cf       	rjmp	.-204    	; 0x6e4 <main+0xd0>

000007b0 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     7ba:	8a ea       	ldi	r24, 0xAA	; 170
     7bc:	88 b9       	out	0x08, r24	; 8
     7be:	fe cf       	rjmp	.-4      	; 0x7bc <__vector_default+0xc>

000007c0 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     7c0:	84 b5       	in	r24, 0x24	; 36
     7c2:	83 68       	ori	r24, 0x83	; 131
     7c4:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     7c6:	85 b5       	in	r24, 0x25	; 37
     7c8:	83 60       	ori	r24, 0x03	; 3
     7ca:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     7cc:	80 e8       	ldi	r24, 0x80	; 128
     7ce:	87 bd       	out	0x27, r24	; 39
     7d0:	08 95       	ret

000007d2 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     7d2:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     7d4:	9f b7       	in	r25, 0x3f	; 63
     7d6:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     7d8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <BELT_SPEED>
     7dc:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     7de:	23 2b       	or	r18, r19
     7e0:	31 f0       	breq	.+12     	; 0x7ee <PWM+0x1c>
		{
			g_MotorOn = 1;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <g_MotorOn>
			PORTB = ~0x0E;
     7e8:	81 ef       	ldi	r24, 0xF1	; 241
     7ea:	85 b9       	out	0x05, r24	; 5
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     7ee:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <g_MotorOn>
			PORTB = ~0x0F;
     7f2:	80 ef       	ldi	r24, 0xF0	; 240
     7f4:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7f6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     7f8:	08 95       	ret

000007fa <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     7fa:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     7fc:	e1 ea       	ldi	r30, 0xA1	; 161
     7fe:	f2 e0       	ldi	r31, 0x02	; 2
     800:	10 82       	st	Z, r1
	stepper.direction = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     806:	13 82       	std	Z+3, r1	; 0x03
     808:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     80a:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     80c:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     80e:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     810:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     812:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     814:	88 ec       	ldi	r24, 0xC8	; 200
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	96 83       	std	Z+6, r25	; 0x06
     81a:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     81c:	80 e3       	ldi	r24, 0x30	; 48
     81e:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     820:	84 e9       	ldi	r24, 0x94	; 148
     822:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     826:	e0 eb       	ldi	r30, 0xB0	; 176
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     830:	e0 e7       	ldi	r30, 0x70	; 112
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	82 60       	ori	r24, 0x02	; 2
     838:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     83a:	e1 eb       	ldi	r30, 0xB1	; 177
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	87 60       	ori	r24, 0x07	; 7
     842:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     844:	78 94       	sei
     846:	08 95       	ret

00000848 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	86 1b       	sub	r24, r22
     84c:	91 09       	sbc	r25, r1
	if (steps >= 0)
     84e:	52 f0       	brmi	.+20     	; 0x864 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     850:	85 36       	cpi	r24, 0x65	; 101
     852:	91 05       	cpc	r25, r1
     854:	8c f0       	brlt	.+34     	; 0x878 <STEPPER_NumSteps+0x30>
     856:	24 e6       	ldi	r18, 0x64	; 100
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	a9 01       	movw	r20, r18
     85c:	48 1b       	sub	r20, r24
     85e:	59 0b       	sbc	r21, r25
     860:	ca 01       	movw	r24, r20
     862:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     864:	8c 39       	cpi	r24, 0x9C	; 156
     866:	5f ef       	ldi	r21, 0xFF	; 255
     868:	95 07       	cpc	r25, r21
     86a:	34 f4       	brge	.+12     	; 0x878 <STEPPER_NumSteps+0x30>
     86c:	2c e9       	ldi	r18, 0x9C	; 156
     86e:	3f ef       	ldi	r19, 0xFF	; 255
     870:	a9 01       	movw	r20, r18
     872:	48 1b       	sub	r20, r24
     874:	59 0b       	sbc	r21, r25
     876:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     878:	08 95       	ret

0000087a <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     87e:	c1 ea       	ldi	r28, 0xA1	; 161
     880:	d2 e0       	ldi	r29, 0x02	; 2
     882:	6c 81       	ldd	r22, Y+4	; 0x04
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	df df       	rcall	.-66     	; 0x848 <STEPPER_NumSteps>
     88a:	9e 83       	std	Y+6, r25	; 0x06
     88c:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     88e:	6a 81       	ldd	r22, Y+2	; 0x02
     890:	7b 81       	ldd	r23, Y+3	; 0x03
     892:	88 85       	ldd	r24, Y+8	; 0x08
     894:	d9 df       	rcall	.-78     	; 0x848 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     896:	2d 81       	ldd	r18, Y+5	; 0x05
     898:	3e 81       	ldd	r19, Y+6	; 0x06
     89a:	33 23       	and	r19, r19
     89c:	14 f4       	brge	.+4      	; 0x8a2 <STEPPER_Rotate+0x28>
     89e:	28 e0       	ldi	r18, 0x08	; 8
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <STEPPER_Rotate+0x2a>
     8a2:	24 e0       	ldi	r18, 0x04	; 4
     8a4:	e1 ea       	ldi	r30, 0xA1	; 161
     8a6:	f2 e0       	ldi	r31, 0x02	; 2
     8a8:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     8aa:	45 81       	ldd	r20, Z+5	; 0x05
     8ac:	56 81       	ldd	r21, Z+6	; 0x06
     8ae:	84 9f       	mul	r24, r20
     8b0:	90 01       	movw	r18, r0
     8b2:	85 9f       	mul	r24, r21
     8b4:	30 0d       	add	r19, r0
     8b6:	94 9f       	mul	r25, r20
     8b8:	30 0d       	add	r19, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	83 2f       	mov	r24, r19
     8be:	80 95       	com	r24
     8c0:	88 1f       	adc	r24, r24
     8c2:	88 27       	eor	r24, r24
     8c4:	88 1f       	adc	r24, r24
     8c6:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     8c8:	85 81       	ldd	r24, Z+5	; 0x05
     8ca:	96 81       	ldd	r25, Z+6	; 0x06
     8cc:	99 23       	and	r25, r25
     8ce:	1c f4       	brge	.+6      	; 0x8d6 <STEPPER_Rotate+0x5c>
     8d0:	91 95       	neg	r25
     8d2:	81 95       	neg	r24
     8d4:	91 09       	sbc	r25, r1
     8d6:	e1 ea       	ldi	r30, 0xA1	; 161
     8d8:	f2 e0       	ldi	r31, 0x02	; 2
     8da:	96 83       	std	Z+6, r25	; 0x06
     8dc:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     8de:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
	cli();
     8ea:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	c1 ea       	ldi	r28, 0xA1	; 161
     8f0:	d2 e0       	ldi	r29, 0x02	; 2
     8f2:	9b 83       	std	Y+3, r25	; 0x03
     8f4:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     8f6:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     8f8:	c0 df       	rcall	.-128    	; 0x87a <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     8fa:	eb 85       	ldd	r30, Y+11	; 0x0b
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	eb 5e       	subi	r30, 0xEB	; 235
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	80 81       	ld	r24, Z
     904:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     908:	78 94       	sei
}
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	0b b6       	in	r0, 0x3b	; 59
     91c:	0f 92       	push	r0
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <__vector_13+0x24>
     934:	00 d0       	rcall	.+0      	; 0x936 <__vector_13+0x26>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     93a:	86 e3       	ldi	r24, 0x36	; 54
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	9e e2       	ldi	r25, 0x2E	; 46
     944:	ad e2       	ldi	r26, 0x2D	; 45
     946:	b5 e3       	ldi	r27, 0x35	; 53
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	ab 83       	std	Y+3, r26	; 0x03
     94e:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     950:	e1 ea       	ldi	r30, 0xA1	; 161
     952:	f2 e0       	ldi	r31, 0x02	; 2
     954:	87 81       	ldd	r24, Z+7	; 0x07
     956:	25 81       	ldd	r18, Z+5	; 0x05
     958:	36 81       	ldd	r19, Z+6	; 0x06
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 17       	cp	r24, r18
     95e:	93 07       	cpc	r25, r19
     960:	0c f0       	brlt	.+2      	; 0x964 <__vector_13+0x54>
     962:	5a c0       	rjmp	.+180    	; 0xa18 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     964:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <stepper+0x1>
     968:	84 30       	cpi	r24, 0x04	; 4
     96a:	51 f4       	brne	.+20     	; 0x980 <__vector_13+0x70>
     96c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     970:	e1 e0       	ldi	r30, 0x01	; 1
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	ec 0f       	add	r30, r28
     976:	fd 1f       	adc	r31, r29
     978:	e8 0f       	add	r30, r24
     97a:	f1 1d       	adc	r31, r1
     97c:	80 81       	ld	r24, Z
     97e:	0d c0       	rjmp	.+26     	; 0x99a <__vector_13+0x8a>
     980:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     984:	e3 e0       	ldi	r30, 0x03	; 3
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	e8 1b       	sub	r30, r24
     98a:	f1 09       	sbc	r31, r1
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	8c 0f       	add	r24, r28
     992:	9d 1f       	adc	r25, r29
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	80 81       	ld	r24, Z
     99a:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     99c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9a0:	83 30       	cpi	r24, 0x03	; 3
     9a2:	21 f0       	breq	.+8      	; 0x9ac <__vector_13+0x9c>
     9a4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9a8:	8f 5f       	subi	r24, 0xFF	; 255
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <__vector_13+0x9e>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	e1 ea       	ldi	r30, 0xA1	; 161
     9b0:	f2 e0       	ldi	r31, 0x02	; 2
     9b2:	80 83       	st	Z, r24

		stepper._currentStep++;
     9b4:	87 81       	ldd	r24, Z+7	; 0x07
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     9ba:	85 81       	ldd	r24, Z+5	; 0x05
     9bc:	96 81       	ldd	r25, Z+6	; 0x06
     9be:	27 81       	ldd	r18, Z+7	; 0x07
     9c0:	82 1b       	sub	r24, r18
     9c2:	91 09       	sbc	r25, r1
     9c4:	06 97       	sbiw	r24, 0x06	; 6
     9c6:	74 f4       	brge	.+28     	; 0x9e4 <__vector_13+0xd4>
     9c8:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	eb 5e       	subi	r30, 0xEB	; 235
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	80 81       	ld	r24, Z
     9d4:	84 39       	cpi	r24, 0x94	; 148
     9d6:	30 f4       	brcc	.+12     	; 0x9e4 <__vector_13+0xd4>
		{
			stepper._accellStep--;
     9d8:	e1 ea       	ldi	r30, 0xA1	; 161
     9da:	f2 e0       	ldi	r31, 0x02	; 2
     9dc:	83 85       	ldd	r24, Z+11	; 0x0b
     9de:	81 50       	subi	r24, 0x01	; 1
     9e0:	83 87       	std	Z+11, r24	; 0x0b
     9e2:	11 c0       	rjmp	.+34     	; 0xa06 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     9e4:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <stepper+0x7>
     9e8:	86 30       	cpi	r24, 0x06	; 6
     9ea:	68 f0       	brcs	.+26     	; 0xa06 <__vector_13+0xf6>
     9ec:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	eb 5e       	subi	r30, 0xEB	; 235
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	80 81       	ld	r24, Z
     9f8:	81 34       	cpi	r24, 0x41	; 65
     9fa:	28 f0       	brcs	.+10     	; 0xa06 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     9fc:	e1 ea       	ldi	r30, 0xA1	; 161
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	83 85       	ldd	r24, Z+11	; 0x0b
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a06:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	eb 5e       	subi	r30, 0xEB	; 235
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	80 81       	ld	r24, Z
     a12:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a16:	29 c0       	rjmp	.+82     	; 0xa6a <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     a18:	e1 ea       	ldi	r30, 0xA1	; 161
     a1a:	f2 e0       	ldi	r31, 0x02	; 2
     a1c:	87 81       	ldd	r24, Z+7	; 0x07
     a1e:	25 81       	ldd	r18, Z+5	; 0x05
     a20:	36 81       	ldd	r19, Z+6	; 0x06
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	82 17       	cp	r24, r18
     a26:	93 07       	cpc	r25, r19
     a28:	01 f5       	brne	.+64     	; 0xa6a <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a30:	81 85       	ldd	r24, Z+9	; 0x09
     a32:	88 23       	and	r24, r24
     a34:	19 f0       	breq	.+6      	; 0xa3c <__vector_13+0x12c>
     a36:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepper+0xb>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__vector_13+0x12e>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	a1 ea       	ldi	r26, 0xA1	; 161
     a40:	b2 e0       	ldi	r27, 0x02	; 2
     a42:	1b 96       	adiw	r26, 0x0b	; 11
     a44:	8c 93       	st	X, r24
     a46:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a48:	1b 96       	adiw	r26, 0x0b	; 11
     a4a:	ec 91       	ld	r30, X
     a4c:	1b 97       	sbiw	r26, 0x0b	; 11
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	eb 5e       	subi	r30, 0xEB	; 235
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	80 81       	ld	r24, Z
     a56:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     a5a:	19 96       	adiw	r26, 0x09	; 9
     a5c:	8c 91       	ld	r24, X
     a5e:	81 11       	cpse	r24, r1
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <__vector_13+0x156>
     a62:	82 b1       	in	r24, 0x02	; 2
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <__vector_13+0x158>
     a66:	82 b1       	in	r24, 0x02	; 2
     a68:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     a6a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <stepper+0xa>
     a6e:	81 11       	cpse	r24, r1
     a70:	0f c0       	rjmp	.+30     	; 0xa90 <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     a72:	63 99       	sbic	0x0c, 3	; 12
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     a76:	e1 ea       	ldi	r30, 0xA1	; 161
     a78:	f2 e0       	ldi	r31, 0x02	; 2
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     a7e:	10 82       	st	Z, r1
			stepper.direction = 1;
     a80:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     a82:	13 82       	std	Z+3, r1	; 0x03
     a84:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     a86:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     a88:	16 82       	std	Z+6, r1	; 0x06
     a8a:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     a8c:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     a8e:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	3f 91       	pop	r19
     aaa:	2f 91       	pop	r18
     aac:	0f 90       	pop	r0
     aae:	0b be       	out	0x3b, r0	; 59
     ab0:	0f 90       	pop	r0
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	0f 90       	pop	r0
     ab6:	1f 90       	pop	r1
     ab8:	18 95       	reti

00000aba <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     ac4:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     ac6:	e1 e6       	ldi	r30, 0x61	; 97
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 e8       	ldi	r24, 0x80	; 128
     acc:	80 83       	st	Z, r24
	CLKPR = 0;
     ace:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     ad0:	5e d2       	rcall	.+1212   	; 0xf8e <UART_Init>
	GPIO_Init();
     ad2:	95 dd       	rcall	.-1238   	; 0x5fe <GPIO_Init>
	TIMER_Init();
     ad4:	e1 d1       	rcall	.+962    	; 0xe98 <TIMER_Init>
	PWM_Init();
     ad6:	74 de       	rcall	.-792    	; 0x7c0 <PWM_Init>
     ad8:	fe da       	rcall	.-2564   	; 0xd6 <ADC_Init>
	ADC_Init();
     ada:	8f de       	rcall	.-738    	; 0x7fa <STEPPER_Init>
     adc:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
	STEPPER_Init();
     ae0:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     ae4:	84 e1       	ldi	r24, 0x14	; 20
     ae6:	ec e3       	ldi	r30, 0x3C	; 60
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     aea:	df 01       	movw	r26, r30
     aec:	1d 92       	st	X+, r1
     aee:	8a 95       	dec	r24
     af0:	e9 f7       	brne	.-6      	; 0xaec <SYS_Init+0x32>
     af2:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <HEAD+0x1>
     af6:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <HEAD>

	HEAD = NULL;
     afa:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TAIL+0x1>
     afe:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <TAIL>
	TAIL = NULL;
     b02:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <STAGE1+0x1>
     b06:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STAGE1>
	STAGE1 = NULL;
     b0a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <STAGE2+0x1>
     b0e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <STAGE2>
	STAGE2 = NULL;
     b12:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <FRONT+0x1>
     b16:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <FRONT>
	FRONT = NULL;
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     b1e:	6f ef       	ldi	r22, 0xFF	; 255
     b20:	89 ee       	ldi	r24, 0xE9	; 233
     b22:	9d ef       	ldi	r25, 0xFD	; 253
     b24:	f4 dc       	rcall	.-1560   	; 0x50e <LL_ItemInit>
     b26:	0b dd       	rcall	.-1514   	; 0x53e <LL_ItemListInit>
     b28:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     b2c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     b30:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <FRONT+0x1>
     b34:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <FRONT>
	FRONT = HEAD;
     b38:	1a ef       	ldi	r17, 0xFA	; 250
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
     b3e:	0f 2e       	mov	r0, r31

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i--)
     b40:	f8 ee       	ldi	r31, 0xE8	; 232
     b42:	ef 2e       	mov	r14, r31
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     b44:	fd ef       	ldi	r31, 0xFD	; 253
     b46:	ff 2e       	mov	r15, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	44 e0       	ldi	r20, 0x04	; 4
     b4e:	61 2f       	mov	r22, r17
     b50:	c7 01       	movw	r24, r14
     b52:	8c 1b       	sub	r24, r28
     b54:	9d 0b       	sbc	r25, r29
     b56:	db dc       	rcall	.-1610   	; 0x50e <LL_ItemInit>
     b58:	bc 01       	movw	r22, r24
     b5a:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     b5e:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     b62:	01 dd       	rcall	.-1534   	; 0x566 <LL_AddBack>
     b64:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TAIL+0x1>
     b68:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TAIL>
     b6c:	21 97       	sbiw	r28, 0x01	; 1
     b6e:	1f 5f       	subi	r17, 0xFF	; 255
     b70:	cf 32       	cpi	r28, 0x2F	; 47
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i--)
     b72:	d1 05       	cpc	r29, r1
     b74:	54 f3       	brlt	.-44     	; 0xb4a <SYS_Init+0x90>
     b76:	c5 e0       	ldi	r28, 0x05	; 5
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     b7e:	6a ef       	ldi	r22, 0xFA	; 250
     b80:	88 ee       	ldi	r24, 0xE8	; 232
     b82:	9d ef       	ldi	r25, 0xFD	; 253
     b84:	c4 dc       	rcall	.-1656   	; 0x50e <LL_ItemInit>
     b86:	bc 01       	movw	r22, r24
     b88:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		LL_AddBack(HEAD,initNode);
     b8c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     b90:	ea dc       	rcall	.-1580   	; 0x566 <LL_AddBack>
     b92:	21 97       	sbiw	r28, 0x01	; 1
     b94:	91 f7       	brne	.-28     	; 0xb7a <SYS_Init+0xc0>
     b96:	84 e5       	ldi	r24, 0x54	; 84
     b98:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     b9a:	11 d2       	rcall	.+1058   	; 0xfbe <UART_SendString>
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	ff 90       	pop	r15

} // SYS_Init
     ba4:	ef 90       	pop	r14
     ba6:	08 95       	ret

00000ba8 <SYS_Pause>:
     ba8:	3f 92       	push	r3
     baa:	4f 92       	push	r4
     bac:	5f 92       	push	r5
     bae:	6f 92       	push	r6

void SYS_Pause(char str[20])
{
     bb0:	7f 92       	push	r7
     bb2:	8f 92       	push	r8
     bb4:	9f 92       	push	r9
     bb6:	af 92       	push	r10
     bb8:	bf 92       	push	r11
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	c8 5c       	subi	r28, 0xC8	; 200
     bd0:	d1 09       	sbc	r29, r1
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	98 2e       	mov	r9, r24
     bde:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     be0:	f8 94       	cli

	// Turn off motor
	PWM(0);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	f5 dd       	rcall	.-1046   	; 0x7d2 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     be8:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <FRONT>
     bec:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9
     bf4:	8a e6       	ldi	r24, 0x6A	; 106
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	7c 01       	movw	r14, r24
     c02:	9f 93       	push	r25
     c04:	8f 93       	push	r24
     c06:	2c d3       	rcall	.+1624   	; 0x1260 <sprintf>
	UART_SendString(buffer);
     c08:	c7 01       	movw	r24, r14
     c0a:	d9 d1       	rcall	.+946    	; 0xfbe <UART_SendString>
     c0c:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     c1a:	f1 2c       	mov	r15, r1
     c1c:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c1e:	f5 e8       	ldi	r31, 0x85	; 133
     c20:	af 2e       	mov	r10, r31
     c22:	f1 e0       	ldi	r31, 0x01	; 1
     c24:	bf 2e       	mov	r11, r31
     c26:	f0 2d       	mov	r31, r0
     c28:	6e 01       	movw	r12, r28
     c2a:	97 e9       	ldi	r25, 0x97	; 151
     c2c:	c9 0e       	add	r12, r25
     c2e:	d1 1c       	adc	r13, r1
     c30:	27 c0       	rjmp	.+78     	; 0xc80 <SYS_Pause+0xd8>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c32:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     c34:	ee 1a       	sub	r14, r30
     c36:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c38:	c8 01       	movw	r24, r16
     c3a:	dc dc       	rcall	.-1608   	; 0x5f4 <LL_GetStatus>
     c3c:	58 2e       	mov	r5, r24
     c3e:	c8 01       	movw	r24, r16
     c40:	b4 dc       	rcall	.-1688   	; 0x5aa <LL_GetClass>
     c42:	68 2e       	mov	r6, r24
     c44:	c8 01       	movw	r24, r16
     c46:	bc dc       	rcall	.-1672   	; 0x5c0 <LL_GetMag>
     c48:	78 2e       	mov	r7, r24
     c4a:	c8 01       	movw	r24, r16
     c4c:	b3 dc       	rcall	.-1690   	; 0x5b4 <LL_GetRefl>
     c4e:	1f 92       	push	r1
     c50:	5f 92       	push	r5
     c52:	1f 92       	push	r1
     c54:	6f 92       	push	r6
     c56:	1f 92       	push	r1
     c58:	7f 92       	push	r7
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	ff 92       	push	r15
     c60:	ef 92       	push	r14
     c62:	bf 92       	push	r11
     c64:	af 92       	push	r10
     c66:	df 92       	push	r13
     c68:	cf 92       	push	r12
     c6a:	fa d2       	rcall	.+1524   	; 0x1260 <sprintf>
		UART_SendString(listbuff);
     c6c:	c6 01       	movw	r24, r12
     c6e:	a7 d1       	rcall	.+846    	; 0xfbe <UART_SendString>
     c70:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     c72:	75 dc       	rcall	.-1814   	; 0x55e <LL_Next>
     c74:	8c 01       	movw	r16, r24
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	c8 01       	movw	r24, r16
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c82:	93 dc       	rcall	.-1754   	; 0x5aa <LL_GetClass>
     c84:	85 30       	cpi	r24, 0x05	; 5
     c86:	a9 f6       	brne	.-86     	; 0xc32 <SYS_Pause+0x8a>
     c88:	0f 2e       	mov	r0, r31
     c8a:	f6 e5       	ldi	r31, 0x56	; 86
     c8c:	cf 2e       	mov	r12, r31
     c8e:	f2 e0       	ldi	r31, 0x02	; 2
     c90:	df 2e       	mov	r13, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	00 e0       	ldi	r16, 0x00	; 0
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	0f 2e       	mov	r0, r31
     c9a:	f9 eb       	ldi	r31, 0xB9	; 185
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     c9c:	af 2e       	mov	r10, r31
     c9e:	f1 e0       	ldi	r31, 0x01	; 1
     ca0:	bf 2e       	mov	r11, r31
     ca2:	f0 2d       	mov	r31, r0
     ca4:	7e 01       	movw	r14, r28
     ca6:	97 e9       	ldi	r25, 0x97	; 151
     ca8:	e9 0e       	add	r14, r25
     caa:	f1 1c       	adc	r15, r1
     cac:	f6 01       	movw	r30, r12
     cae:	80 85       	ldd	r24, Z+8	; 0x08
     cb0:	1f 92       	push	r1
     cb2:	8f 93       	push	r24
     cb4:	1f 93       	push	r17
     cb6:	0f 93       	push	r16
     cb8:	8f 92       	push	r8
     cba:	9f 92       	push	r9
     cbc:	bf 92       	push	r11
     cbe:	af 92       	push	r10
     cc0:	ff 92       	push	r15
     cc2:	ef 92       	push	r14
     cc4:	cd d2       	rcall	.+1434   	; 0x1260 <sprintf>
     cc6:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     cc8:	7a d1       	rcall	.+756    	; 0xfbe <UART_SendString>
     cca:	0f 5f       	subi	r16, 0xFF	; 255
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     cce:	f9 e0       	ldi	r31, 0x09	; 9
     cd0:	cf 0e       	add	r12, r31
     cd2:	d1 1c       	adc	r13, r1
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	07 30       	cpi	r16, 0x07	; 7
     ce0:	11 05       	cpc	r17, r1
     ce2:	21 f7       	brne	.-56     	; 0xcac <SYS_Pause+0x104>
     ce4:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     ce8:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     cec:	63 dc       	rcall	.-1850   	; 0x5b4 <LL_GetRefl>
     cee:	48 2e       	mov	r4, r24
     cf0:	39 2e       	mov	r3, r25
     cf2:	60 90 9e 02 	lds	r6, 0x029E	; 0x80029e <STAGE2>
     cf6:	50 90 9f 02 	lds	r5, 0x029F	; 0x80029f <STAGE2+0x1>
     cfa:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     cfe:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     d02:	5e dc       	rcall	.-1860   	; 0x5c0 <LL_GetMag>
     d04:	78 2e       	mov	r7, r24
     d06:	90 90 54 02 	lds	r9, 0x0254	; 0x800254 <STAGE1>
     d0a:	80 90 55 02 	lds	r8, 0x0255	; 0x800255 <STAGE1+0x1>
     d0e:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <TAIL>
     d12:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <TAIL+0x1>
     d16:	f8 01       	movw	r30, r16
     d18:	b2 80       	ldd	r11, Z+2	; 0x02
     d1a:	a3 80       	ldd	r10, Z+3	; 0x03
     d1c:	d0 90 38 02 	lds	r13, 0x0238	; 0x800238 <FRONT>
     d20:	c0 90 39 02 	lds	r12, 0x0239	; 0x800239 <FRONT+0x1>
     d24:	f0 90 36 02 	lds	r15, 0x0236	; 0x800236 <HEAD>
     d28:	e0 90 37 02 	lds	r14, 0x0237	; 0x800237 <HEAD+0x1>
     d2c:	8f 2d       	mov	r24, r15
     d2e:	9e 2d       	mov	r25, r14
     d30:	2b dc       	rcall	.-1962   	; 0x588 <LL_Size>
     d32:	3f 92       	push	r3
     d34:	4f 92       	push	r4
     d36:	5f 92       	push	r5
     d38:	6f 92       	push	r6
     d3a:	1f 92       	push	r1
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	1f 93       	push	r17
     d4c:	0f 93       	push	r16
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	1f 92       	push	r1
     d54:	8f 93       	push	r24
     d56:	88 ed       	ldi	r24, 0xD8	; 216
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	8e 01       	movw	r16, r28
     d60:	0b 59       	subi	r16, 0x9B	; 155
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	1f 93       	push	r17
     d66:	0f 93       	push	r16
     d68:	7b d2       	rcall	.+1270   	; 0x1260 <sprintf>
	UART_SendString(anotherbuff);
     d6a:	c8 01       	movw	r24, r16
     d6c:	28 d1       	rcall	.+592    	; 0xfbe <UART_SendString>
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	89 b1       	in	r24, 0x09	; 9

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     d7a:	83 70       	andi	r24, 0x03	; 3
     d7c:	e9 f7       	brne	.-6      	; 0xd78 <SYS_Pause+0x1d0>
     d7e:	89 e2       	ldi	r24, 0x29	; 41
		{
			UART_SendString("Starting System!\r\n");
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	1d d1       	rcall	.+570    	; 0xfbe <UART_SendString>
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     d88:	24 dd       	rcall	.-1464   	; 0x7d2 <PWM>
     d8a:	78 94       	sei
     d8c:	c8 53       	subi	r28, 0x38	; 56
     d8e:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     d90:	0f b6       	in	r0, 0x3f	; 63
			return;
		}
	}
} // SYS_Pause
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	6f 90       	pop	r6
     db6:	5f 90       	pop	r5
     db8:	4f 90       	pop	r4
     dba:	3f 90       	pop	r3
     dbc:	08 95       	ret

00000dbe <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     dbe:	1f 92       	push	r1
     dc0:	0f 92       	push	r0
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	0f 92       	push	r0
     dc6:	11 24       	eor	r1, r1
     dc8:	0b b6       	in	r0, 0x3b	; 59
     dca:	0f 92       	push	r0
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     df0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     df4:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <_timer_tick+0x1>
     dfe:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <_timer_tick>
     e02:	c6 e5       	ldi	r28, 0x56	; 86
     e04:	d2 e0       	ldi	r29, 0x02	; 2
     e06:	0f 2e       	mov	r0, r31
     e08:	fe e9       	ldi	r31, 0x9E	; 158
     e0a:	ef 2e       	mov	r14, r31
     e0c:	f2 e0       	ldi	r31, 0x02	; 2
     e0e:	ff 2e       	mov	r15, r31
     e10:	f0 2d       	mov	r31, r0
     e12:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     e14:	ec 81       	ldd	r30, Y+4	; 0x04
     e16:	fd 81       	ldd	r31, Y+5	; 0x05
     e18:	30 97       	sbiw	r30, 0x00	; 0
     e1a:	09 f1       	breq	.+66     	; 0xe5e <__vector_17+0xa0>
     e1c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     e20:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     e24:	28 81       	ld	r18, Y
     e26:	39 81       	ldd	r19, Y+1	; 0x01
     e28:	28 17       	cp	r18, r24
     e2a:	39 07       	cpc	r19, r25
     e2c:	c1 f4       	brne	.+48     	; 0xe5e <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     e2e:	88 85       	ldd	r24, Y+8	; 0x08
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	19 f4       	brne	.+6      	; 0xe3a <__vector_17+0x7c>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     e3a:	d8 01       	movw	r26, r16
     e3c:	12 96       	adiw	r26, 0x02	; 2
     e3e:	8d 91       	ld	r24, X+
     e40:	9c 91       	ld	r25, X
     e42:	13 97       	sbiw	r26, 0x03	; 3
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	41 f0       	breq	.+16     	; 0xe58 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     e48:	2d 91       	ld	r18, X+
     e4a:	3c 91       	ld	r19, X
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	8d 93       	st	X+, r24
     e54:	9c 93       	st	X, r25
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     e58:	f8 01       	movw	r30, r16
     e5a:	15 82       	std	Z+5, r1	; 0x05
     e5c:	14 82       	std	Z+4, r1	; 0x04
     e5e:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     e60:	ce 15       	cp	r28, r14
     e62:	df 05       	cpc	r29, r15
     e64:	b1 f6       	brne	.-84     	; 0xe12 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     e66:	ff 91       	pop	r31
     e68:	ef 91       	pop	r30
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	bf 91       	pop	r27
     e70:	af 91       	pop	r26
     e72:	9f 91       	pop	r25
     e74:	8f 91       	pop	r24
     e76:	7f 91       	pop	r23
     e78:	6f 91       	pop	r22
     e7a:	5f 91       	pop	r21
     e7c:	4f 91       	pop	r20
     e7e:	3f 91       	pop	r19
     e80:	2f 91       	pop	r18
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	ff 90       	pop	r15
     e88:	ef 90       	pop	r14
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <TIMER_Init>:
	/*! 
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
    TCNT1 = 0x0000;
     e98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us
    OCR1A = 0x0DE0;
     ea0:	80 ee       	ldi	r24, 0xE0	; 224
     ea2:	9d e0       	ldi	r25, 0x0D	; 13
     ea4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ea8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     eac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     eb0:	89 e0       	ldi	r24, 0x09	; 9
     eb2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     ebc:	88 e4       	ldi	r24, 0x48	; 72
     ebe:	e6 e5       	ldi	r30, 0x56	; 86
     ec0:	f2 e0       	ldi	r31, 0x02	; 2
     ec2:	df 01       	movw	r26, r30
     ec4:	1d 92       	st	X+, r1
     ec6:	8a 95       	dec	r24
     ec8:	e9 f7       	brne	.-6      	; 0xec4 <TIMER_Init+0x2c>
     eca:	08 95       	ret

00000ecc <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     ed6:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <_timer+0x4>
     eda:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <_timer+0x5>
     ede:	67 2b       	or	r22, r23
     ee0:	09 f4       	brne	.+2      	; 0xee4 <TIMER_Create+0x18>
     ee2:	49 c0       	rjmp	.+146    	; 0xf76 <TIMER_Create+0xaa>
     ee4:	e6 e5       	ldi	r30, 0x56	; 86
     ee6:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     ee8:	a1 e0       	ldi	r26, 0x01	; 1
     eea:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     eec:	c5 85       	ldd	r28, Z+13	; 0x0d
     eee:	d6 85       	ldd	r29, Z+14	; 0x0e
     ef0:	cd 2b       	or	r28, r29
     ef2:	09 f4       	brne	.+2      	; 0xef6 <TIMER_Create+0x2a>
     ef4:	42 c0       	rjmp	.+132    	; 0xf7a <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	39 96       	adiw	r30, 0x09	; 9
     efa:	a8 30       	cpi	r26, 0x08	; 8
     efc:	b1 05       	cpc	r27, r1
     efe:	b1 f7       	brne	.-20     	; 0xeec <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	3f c0       	rjmp	.+126    	; 0xf84 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
     f06:	fd 01       	movw	r30, r26
     f08:	ee 0f       	add	r30, r30
     f0a:	ff 1f       	adc	r31, r31
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ea 0f       	add	r30, r26
     f16:	fb 1f       	adc	r31, r27
     f18:	ea 5a       	subi	r30, 0xAA	; 170
     f1a:	fd 4f       	sbci	r31, 0xFD	; 253
     f1c:	93 83       	std	Z+3, r25	; 0x03
     f1e:	82 83       	std	Z+2, r24	; 0x02
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     f22:	fd 01       	movw	r30, r26
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ee 0f       	add	r30, r30
     f2a:	ff 1f       	adc	r31, r31
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ea 0f       	add	r30, r26
     f32:	fb 1f       	adc	r31, r27
     f34:	ea 5a       	subi	r30, 0xAA	; 170
     f36:	fd 4f       	sbci	r31, 0xFD	; 253
     f38:	13 82       	std	Z+3, r1	; 0x03
     f3a:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     f3c:	fd 01       	movw	r30, r26
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ea 0f       	add	r30, r26
     f4c:	fb 1f       	adc	r31, r27
     f4e:	ea 5a       	subi	r30, 0xAA	; 170
     f50:	fd 4f       	sbci	r31, 0xFD	; 253
     f52:	55 83       	std	Z+5, r21	; 0x05
     f54:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     f56:	37 83       	std	Z+7, r19	; 0x07
     f58:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
     f5a:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <_timer_tick>
     f5e:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <_timer_tick+0x1>
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	91 83       	std	Z+1, r25	; 0x01
     f68:	80 83       	st	Z, r24
			_timer[i].state = READY;
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f6e:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     f70:	8a 2f       	mov	r24, r26
     f72:	9b 2f       	mov	r25, r27
     f74:	07 c0       	rjmp	.+14     	; 0xf84 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     f7a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f7c:	f8 94       	cli
		{
			if (periodic != 0) 
     f7e:	01 2b       	or	r16, r17
     f80:	11 f6       	brne	.-124    	; 0xf06 <TIMER_Create+0x3a>
     f82:	cf cf       	rjmp	.-98     	; 0xf22 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	08 95       	ret

00000f8e <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     f8e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     f92:	83 e3       	ldi	r24, 0x33	; 51
     f94:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     f98:	e9 ec       	ldi	r30, 0xC9	; 201
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 61       	ori	r24, 0x18	; 24
     fa0:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     fa2:	ea ec       	ldi	r30, 0xCA	; 202
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	86 60       	ori	r24, 0x06	; 6
     faa:	80 83       	st	Z, r24
     fac:	08 95       	ret

00000fae <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     fae:	e8 ec       	ldi	r30, 0xC8	; 200
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	90 81       	ld	r25, Z
     fb4:	95 ff       	sbrs	r25, 5
     fb6:	fd cf       	rjmp	.-6      	; 0xfb2 <UART_SendChar+0x4>
	UDR1 = c;
     fb8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     fbc:	08 95       	ret

00000fbe <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     fc4:	88 81       	ld	r24, Y
     fc6:	88 23       	and	r24, r24
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <UART_SendString+0x16>
     fca:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
     fcc:	f0 df       	rcall	.-32     	; 0xfae <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     fce:	89 91       	ld	r24, Y+
     fd0:	81 11       	cpse	r24, r1
     fd2:	fc cf       	rjmp	.-8      	; 0xfcc <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <__udivmodsi4>:
     fda:	a1 e2       	ldi	r26, 0x21	; 33
     fdc:	1a 2e       	mov	r1, r26
     fde:	aa 1b       	sub	r26, r26
     fe0:	bb 1b       	sub	r27, r27
     fe2:	fd 01       	movw	r30, r26
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <__udivmodsi4_ep>

00000fe6 <__udivmodsi4_loop>:
     fe6:	aa 1f       	adc	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	ee 1f       	adc	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	a2 17       	cp	r26, r18
     ff0:	b3 07       	cpc	r27, r19
     ff2:	e4 07       	cpc	r30, r20
     ff4:	f5 07       	cpc	r31, r21
     ff6:	20 f0       	brcs	.+8      	; 0x1000 <__udivmodsi4_ep>
     ff8:	a2 1b       	sub	r26, r18
     ffa:	b3 0b       	sbc	r27, r19
     ffc:	e4 0b       	sbc	r30, r20
     ffe:	f5 0b       	sbc	r31, r21

00001000 <__udivmodsi4_ep>:
    1000:	66 1f       	adc	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	1a 94       	dec	r1
    100a:	69 f7       	brne	.-38     	; 0xfe6 <__udivmodsi4_loop>
    100c:	60 95       	com	r22
    100e:	70 95       	com	r23
    1010:	80 95       	com	r24
    1012:	90 95       	com	r25
    1014:	9b 01       	movw	r18, r22
    1016:	ac 01       	movw	r20, r24
    1018:	bd 01       	movw	r22, r26
    101a:	cf 01       	movw	r24, r30
    101c:	08 95       	ret

0000101e <malloc>:
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	91 05       	cpc	r25, r1
    102a:	10 f4       	brcc	.+4      	; 0x1030 <malloc+0x12>
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <__flp>
    1034:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <__flp+0x1>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	30 97       	sbiw	r30, 0x00	; 0
    1042:	19 f1       	breq	.+70     	; 0x108a <malloc+0x6c>
    1044:	40 81       	ld	r20, Z
    1046:	51 81       	ldd	r21, Z+1	; 0x01
    1048:	02 81       	ldd	r16, Z+2	; 0x02
    104a:	13 81       	ldd	r17, Z+3	; 0x03
    104c:	48 17       	cp	r20, r24
    104e:	59 07       	cpc	r21, r25
    1050:	c8 f0       	brcs	.+50     	; 0x1084 <malloc+0x66>
    1052:	84 17       	cp	r24, r20
    1054:	95 07       	cpc	r25, r21
    1056:	69 f4       	brne	.+26     	; 0x1072 <malloc+0x54>
    1058:	10 97       	sbiw	r26, 0x00	; 0
    105a:	31 f0       	breq	.+12     	; 0x1068 <malloc+0x4a>
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	0c 93       	st	X, r16
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	13 96       	adiw	r26, 0x03	; 3
    1064:	1c 93       	st	X, r17
    1066:	27 c0       	rjmp	.+78     	; 0x10b6 <malloc+0x98>
    1068:	00 93 af 02 	sts	0x02AF, r16	; 0x8002af <__flp>
    106c:	10 93 b0 02 	sts	0x02B0, r17	; 0x8002b0 <__flp+0x1>
    1070:	22 c0       	rjmp	.+68     	; 0x10b6 <malloc+0x98>
    1072:	21 15       	cp	r18, r1
    1074:	31 05       	cpc	r19, r1
    1076:	19 f0       	breq	.+6      	; 0x107e <malloc+0x60>
    1078:	42 17       	cp	r20, r18
    107a:	53 07       	cpc	r21, r19
    107c:	18 f4       	brcc	.+6      	; 0x1084 <malloc+0x66>
    107e:	9a 01       	movw	r18, r20
    1080:	bd 01       	movw	r22, r26
    1082:	ef 01       	movw	r28, r30
    1084:	df 01       	movw	r26, r30
    1086:	f8 01       	movw	r30, r16
    1088:	db cf       	rjmp	.-74     	; 0x1040 <malloc+0x22>
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	f9 f0       	breq	.+62     	; 0x10ce <malloc+0xb0>
    1090:	28 1b       	sub	r18, r24
    1092:	39 0b       	sbc	r19, r25
    1094:	24 30       	cpi	r18, 0x04	; 4
    1096:	31 05       	cpc	r19, r1
    1098:	80 f4       	brcc	.+32     	; 0x10ba <malloc+0x9c>
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	61 15       	cp	r22, r1
    10a0:	71 05       	cpc	r23, r1
    10a2:	21 f0       	breq	.+8      	; 0x10ac <malloc+0x8e>
    10a4:	fb 01       	movw	r30, r22
    10a6:	93 83       	std	Z+3, r25	; 0x03
    10a8:	82 83       	std	Z+2, r24	; 0x02
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <malloc+0x96>
    10ac:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <__flp+0x1>
    10b0:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <__flp>
    10b4:	fe 01       	movw	r30, r28
    10b6:	32 96       	adiw	r30, 0x02	; 2
    10b8:	44 c0       	rjmp	.+136    	; 0x1142 <malloc+0x124>
    10ba:	fe 01       	movw	r30, r28
    10bc:	e2 0f       	add	r30, r18
    10be:	f3 1f       	adc	r31, r19
    10c0:	81 93       	st	Z+, r24
    10c2:	91 93       	st	Z+, r25
    10c4:	22 50       	subi	r18, 0x02	; 2
    10c6:	31 09       	sbc	r19, r1
    10c8:	39 83       	std	Y+1, r19	; 0x01
    10ca:	28 83       	st	Y, r18
    10cc:	3a c0       	rjmp	.+116    	; 0x1142 <malloc+0x124>
    10ce:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    10d2:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    10d6:	23 2b       	or	r18, r19
    10d8:	41 f4       	brne	.+16     	; 0x10ea <malloc+0xcc>
    10da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10e2:	30 93 ae 02 	sts	0x02AE, r19	; 0x8002ae <__brkval+0x1>
    10e6:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <__brkval>
    10ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10f2:	21 15       	cp	r18, r1
    10f4:	31 05       	cpc	r19, r1
    10f6:	41 f4       	brne	.+16     	; 0x1108 <malloc+0xea>
    10f8:	2d b7       	in	r18, 0x3d	; 61
    10fa:	3e b7       	in	r19, 0x3e	; 62
    10fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1100:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1104:	24 1b       	sub	r18, r20
    1106:	35 0b       	sbc	r19, r21
    1108:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <__brkval>
    110c:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <__brkval+0x1>
    1110:	e2 17       	cp	r30, r18
    1112:	f3 07       	cpc	r31, r19
    1114:	a0 f4       	brcc	.+40     	; 0x113e <malloc+0x120>
    1116:	2e 1b       	sub	r18, r30
    1118:	3f 0b       	sbc	r19, r31
    111a:	28 17       	cp	r18, r24
    111c:	39 07       	cpc	r19, r25
    111e:	78 f0       	brcs	.+30     	; 0x113e <malloc+0x120>
    1120:	ac 01       	movw	r20, r24
    1122:	4e 5f       	subi	r20, 0xFE	; 254
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	24 17       	cp	r18, r20
    1128:	35 07       	cpc	r19, r21
    112a:	48 f0       	brcs	.+18     	; 0x113e <malloc+0x120>
    112c:	4e 0f       	add	r20, r30
    112e:	5f 1f       	adc	r21, r31
    1130:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <__brkval+0x1>
    1134:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <__brkval>
    1138:	81 93       	st	Z+, r24
    113a:	91 93       	st	Z+, r25
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <malloc+0x124>
    113e:	e0 e0       	ldi	r30, 0x00	; 0
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	cf 01       	movw	r24, r30
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <free>:
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	09 f4       	brne	.+2      	; 0x1158 <free+0xa>
    1156:	81 c0       	rjmp	.+258    	; 0x125a <free+0x10c>
    1158:	fc 01       	movw	r30, r24
    115a:	32 97       	sbiw	r30, 0x02	; 2
    115c:	13 82       	std	Z+3, r1	; 0x03
    115e:	12 82       	std	Z+2, r1	; 0x02
    1160:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <__flp>
    1164:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <__flp+0x1>
    1168:	10 97       	sbiw	r26, 0x00	; 0
    116a:	81 f4       	brne	.+32     	; 0x118c <free+0x3e>
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    1178:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    117c:	28 17       	cp	r18, r24
    117e:	39 07       	cpc	r19, r25
    1180:	51 f5       	brne	.+84     	; 0x11d6 <free+0x88>
    1182:	f0 93 ae 02 	sts	0x02AE, r31	; 0x8002ae <__brkval+0x1>
    1186:	e0 93 ad 02 	sts	0x02AD, r30	; 0x8002ad <__brkval>
    118a:	67 c0       	rjmp	.+206    	; 0x125a <free+0x10c>
    118c:	ed 01       	movw	r28, r26
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ce 17       	cp	r28, r30
    1194:	df 07       	cpc	r29, r31
    1196:	40 f4       	brcc	.+16     	; 0x11a8 <free+0x5a>
    1198:	4a 81       	ldd	r20, Y+2	; 0x02
    119a:	5b 81       	ldd	r21, Y+3	; 0x03
    119c:	9e 01       	movw	r18, r28
    119e:	41 15       	cp	r20, r1
    11a0:	51 05       	cpc	r21, r1
    11a2:	f1 f0       	breq	.+60     	; 0x11e0 <free+0x92>
    11a4:	ea 01       	movw	r28, r20
    11a6:	f5 cf       	rjmp	.-22     	; 0x1192 <free+0x44>
    11a8:	d3 83       	std	Z+3, r29	; 0x03
    11aa:	c2 83       	std	Z+2, r28	; 0x02
    11ac:	40 81       	ld	r20, Z
    11ae:	51 81       	ldd	r21, Z+1	; 0x01
    11b0:	84 0f       	add	r24, r20
    11b2:	95 1f       	adc	r25, r21
    11b4:	c8 17       	cp	r28, r24
    11b6:	d9 07       	cpc	r29, r25
    11b8:	59 f4       	brne	.+22     	; 0x11d0 <free+0x82>
    11ba:	88 81       	ld	r24, Y
    11bc:	99 81       	ldd	r25, Y+1	; 0x01
    11be:	84 0f       	add	r24, r20
    11c0:	95 1f       	adc	r25, r21
    11c2:	02 96       	adiw	r24, 0x02	; 2
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	80 83       	st	Z, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	93 83       	std	Z+3, r25	; 0x03
    11ce:	82 83       	std	Z+2, r24	; 0x02
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	29 f4       	brne	.+10     	; 0x11e0 <free+0x92>
    11d6:	f0 93 b0 02 	sts	0x02B0, r31	; 0x8002b0 <__flp+0x1>
    11da:	e0 93 af 02 	sts	0x02AF, r30	; 0x8002af <__flp>
    11de:	3d c0       	rjmp	.+122    	; 0x125a <free+0x10c>
    11e0:	e9 01       	movw	r28, r18
    11e2:	fb 83       	std	Y+3, r31	; 0x03
    11e4:	ea 83       	std	Y+2, r30	; 0x02
    11e6:	49 91       	ld	r20, Y+
    11e8:	59 91       	ld	r21, Y+
    11ea:	c4 0f       	add	r28, r20
    11ec:	d5 1f       	adc	r29, r21
    11ee:	ec 17       	cp	r30, r28
    11f0:	fd 07       	cpc	r31, r29
    11f2:	61 f4       	brne	.+24     	; 0x120c <free+0xbe>
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	84 0f       	add	r24, r20
    11fa:	95 1f       	adc	r25, r21
    11fc:	02 96       	adiw	r24, 0x02	; 2
    11fe:	e9 01       	movw	r28, r18
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	88 83       	st	Y, r24
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	9b 83       	std	Y+3, r25	; 0x03
    120a:	8a 83       	std	Y+2, r24	; 0x02
    120c:	e0 e0       	ldi	r30, 0x00	; 0
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	12 96       	adiw	r26, 0x02	; 2
    1212:	8d 91       	ld	r24, X+
    1214:	9c 91       	ld	r25, X
    1216:	13 97       	sbiw	r26, 0x03	; 3
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	19 f0       	breq	.+6      	; 0x1222 <free+0xd4>
    121c:	fd 01       	movw	r30, r26
    121e:	dc 01       	movw	r26, r24
    1220:	f7 cf       	rjmp	.-18     	; 0x1210 <free+0xc2>
    1222:	8d 91       	ld	r24, X+
    1224:	9c 91       	ld	r25, X
    1226:	11 97       	sbiw	r26, 0x01	; 1
    1228:	9d 01       	movw	r18, r26
    122a:	2e 5f       	subi	r18, 0xFE	; 254
    122c:	3f 4f       	sbci	r19, 0xFF	; 255
    122e:	82 0f       	add	r24, r18
    1230:	93 1f       	adc	r25, r19
    1232:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    1236:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	69 f4       	brne	.+26     	; 0x125a <free+0x10c>
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	29 f4       	brne	.+10     	; 0x124e <free+0x100>
    1244:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__flp+0x1>
    1248:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <__flp>
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <free+0x104>
    124e:	13 82       	std	Z+3, r1	; 0x03
    1250:	12 82       	std	Z+2, r1	; 0x02
    1252:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <__brkval+0x1>
    1256:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <__brkval>
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <sprintf>:
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	2e 97       	sbiw	r28, 0x0e	; 14
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	0d 89       	ldd	r16, Y+21	; 0x15
    127a:	1e 89       	ldd	r17, Y+22	; 0x16
    127c:	86 e0       	ldi	r24, 0x06	; 6
    127e:	8c 83       	std	Y+4, r24	; 0x04
    1280:	1a 83       	std	Y+2, r17	; 0x02
    1282:	09 83       	std	Y+1, r16	; 0x01
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	9f e7       	ldi	r25, 0x7F	; 127
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	ae 01       	movw	r20, r28
    128e:	47 5e       	subi	r20, 0xE7	; 231
    1290:	5f 4f       	sbci	r21, 0xFF	; 255
    1292:	6f 89       	ldd	r22, Y+23	; 0x17
    1294:	78 8d       	ldd	r23, Y+24	; 0x18
    1296:	ce 01       	movw	r24, r28
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	10 d0       	rcall	.+32     	; 0x12bc <vfprintf>
    129c:	ef 81       	ldd	r30, Y+7	; 0x07
    129e:	f8 85       	ldd	r31, Y+8	; 0x08
    12a0:	e0 0f       	add	r30, r16
    12a2:	f1 1f       	adc	r31, r17
    12a4:	10 82       	st	Z, r1
    12a6:	2e 96       	adiw	r28, 0x0e	; 14
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <vfprintf>:
    12bc:	2f 92       	push	r2
    12be:	3f 92       	push	r3
    12c0:	4f 92       	push	r4
    12c2:	5f 92       	push	r5
    12c4:	6f 92       	push	r6
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	2b 97       	sbiw	r28, 0x0b	; 11
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	6c 01       	movw	r12, r24
    12f2:	7b 01       	movw	r14, r22
    12f4:	8a 01       	movw	r16, r20
    12f6:	fc 01       	movw	r30, r24
    12f8:	17 82       	std	Z+7, r1	; 0x07
    12fa:	16 82       	std	Z+6, r1	; 0x06
    12fc:	83 81       	ldd	r24, Z+3	; 0x03
    12fe:	81 ff       	sbrs	r24, 1
    1300:	bf c1       	rjmp	.+894    	; 0x1680 <vfprintf+0x3c4>
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	3c 01       	movw	r6, r24
    1308:	f6 01       	movw	r30, r12
    130a:	93 81       	ldd	r25, Z+3	; 0x03
    130c:	f7 01       	movw	r30, r14
    130e:	93 fd       	sbrc	r25, 3
    1310:	85 91       	lpm	r24, Z+
    1312:	93 ff       	sbrs	r25, 3
    1314:	81 91       	ld	r24, Z+
    1316:	7f 01       	movw	r14, r30
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <vfprintf+0x62>
    131c:	ad c1       	rjmp	.+858    	; 0x1678 <vfprintf+0x3bc>
    131e:	85 32       	cpi	r24, 0x25	; 37
    1320:	39 f4       	brne	.+14     	; 0x1330 <vfprintf+0x74>
    1322:	93 fd       	sbrc	r25, 3
    1324:	85 91       	lpm	r24, Z+
    1326:	93 ff       	sbrs	r25, 3
    1328:	81 91       	ld	r24, Z+
    132a:	7f 01       	movw	r14, r30
    132c:	85 32       	cpi	r24, 0x25	; 37
    132e:	21 f4       	brne	.+8      	; 0x1338 <vfprintf+0x7c>
    1330:	b6 01       	movw	r22, r12
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	d6 d1       	rcall	.+940    	; 0x16e2 <fputc>
    1336:	e8 cf       	rjmp	.-48     	; 0x1308 <vfprintf+0x4c>
    1338:	91 2c       	mov	r9, r1
    133a:	21 2c       	mov	r2, r1
    133c:	31 2c       	mov	r3, r1
    133e:	ff e1       	ldi	r31, 0x1F	; 31
    1340:	f3 15       	cp	r31, r3
    1342:	d8 f0       	brcs	.+54     	; 0x137a <vfprintf+0xbe>
    1344:	8b 32       	cpi	r24, 0x2B	; 43
    1346:	79 f0       	breq	.+30     	; 0x1366 <vfprintf+0xaa>
    1348:	38 f4       	brcc	.+14     	; 0x1358 <vfprintf+0x9c>
    134a:	80 32       	cpi	r24, 0x20	; 32
    134c:	79 f0       	breq	.+30     	; 0x136c <vfprintf+0xb0>
    134e:	83 32       	cpi	r24, 0x23	; 35
    1350:	a1 f4       	brne	.+40     	; 0x137a <vfprintf+0xbe>
    1352:	23 2d       	mov	r18, r3
    1354:	20 61       	ori	r18, 0x10	; 16
    1356:	1d c0       	rjmp	.+58     	; 0x1392 <vfprintf+0xd6>
    1358:	8d 32       	cpi	r24, 0x2D	; 45
    135a:	61 f0       	breq	.+24     	; 0x1374 <vfprintf+0xb8>
    135c:	80 33       	cpi	r24, 0x30	; 48
    135e:	69 f4       	brne	.+26     	; 0x137a <vfprintf+0xbe>
    1360:	23 2d       	mov	r18, r3
    1362:	21 60       	ori	r18, 0x01	; 1
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <vfprintf+0xd6>
    1366:	83 2d       	mov	r24, r3
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	38 2e       	mov	r3, r24
    136c:	e3 2d       	mov	r30, r3
    136e:	e4 60       	ori	r30, 0x04	; 4
    1370:	3e 2e       	mov	r3, r30
    1372:	2a c0       	rjmp	.+84     	; 0x13c8 <vfprintf+0x10c>
    1374:	f3 2d       	mov	r31, r3
    1376:	f8 60       	ori	r31, 0x08	; 8
    1378:	1d c0       	rjmp	.+58     	; 0x13b4 <vfprintf+0xf8>
    137a:	37 fc       	sbrc	r3, 7
    137c:	2d c0       	rjmp	.+90     	; 0x13d8 <vfprintf+0x11c>
    137e:	20 ed       	ldi	r18, 0xD0	; 208
    1380:	28 0f       	add	r18, r24
    1382:	2a 30       	cpi	r18, 0x0A	; 10
    1384:	40 f0       	brcs	.+16     	; 0x1396 <vfprintf+0xda>
    1386:	8e 32       	cpi	r24, 0x2E	; 46
    1388:	b9 f4       	brne	.+46     	; 0x13b8 <vfprintf+0xfc>
    138a:	36 fc       	sbrc	r3, 6
    138c:	75 c1       	rjmp	.+746    	; 0x1678 <vfprintf+0x3bc>
    138e:	23 2d       	mov	r18, r3
    1390:	20 64       	ori	r18, 0x40	; 64
    1392:	32 2e       	mov	r3, r18
    1394:	19 c0       	rjmp	.+50     	; 0x13c8 <vfprintf+0x10c>
    1396:	36 fe       	sbrs	r3, 6
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0xea>
    139a:	8a e0       	ldi	r24, 0x0A	; 10
    139c:	98 9e       	mul	r9, r24
    139e:	20 0d       	add	r18, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	92 2e       	mov	r9, r18
    13a4:	11 c0       	rjmp	.+34     	; 0x13c8 <vfprintf+0x10c>
    13a6:	ea e0       	ldi	r30, 0x0A	; 10
    13a8:	2e 9e       	mul	r2, r30
    13aa:	20 0d       	add	r18, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	22 2e       	mov	r2, r18
    13b0:	f3 2d       	mov	r31, r3
    13b2:	f0 62       	ori	r31, 0x20	; 32
    13b4:	3f 2e       	mov	r3, r31
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <vfprintf+0x10c>
    13b8:	8c 36       	cpi	r24, 0x6C	; 108
    13ba:	21 f4       	brne	.+8      	; 0x13c4 <vfprintf+0x108>
    13bc:	83 2d       	mov	r24, r3
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	38 2e       	mov	r3, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <vfprintf+0x10c>
    13c4:	88 36       	cpi	r24, 0x68	; 104
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <vfprintf+0x11c>
    13c8:	f7 01       	movw	r30, r14
    13ca:	93 fd       	sbrc	r25, 3
    13cc:	85 91       	lpm	r24, Z+
    13ce:	93 ff       	sbrs	r25, 3
    13d0:	81 91       	ld	r24, Z+
    13d2:	7f 01       	movw	r14, r30
    13d4:	81 11       	cpse	r24, r1
    13d6:	b3 cf       	rjmp	.-154    	; 0x133e <vfprintf+0x82>
    13d8:	98 2f       	mov	r25, r24
    13da:	9f 7d       	andi	r25, 0xDF	; 223
    13dc:	95 54       	subi	r25, 0x45	; 69
    13de:	93 30       	cpi	r25, 0x03	; 3
    13e0:	28 f4       	brcc	.+10     	; 0x13ec <vfprintf+0x130>
    13e2:	0c 5f       	subi	r16, 0xFC	; 252
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	9f e3       	ldi	r25, 0x3F	; 63
    13e8:	99 83       	std	Y+1, r25	; 0x01
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <vfprintf+0x14a>
    13ec:	83 36       	cpi	r24, 0x63	; 99
    13ee:	31 f0       	breq	.+12     	; 0x13fc <vfprintf+0x140>
    13f0:	83 37       	cpi	r24, 0x73	; 115
    13f2:	71 f0       	breq	.+28     	; 0x1410 <vfprintf+0x154>
    13f4:	83 35       	cpi	r24, 0x53	; 83
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfprintf+0x13e>
    13f8:	55 c0       	rjmp	.+170    	; 0x14a4 <vfprintf+0x1e8>
    13fa:	20 c0       	rjmp	.+64     	; 0x143c <vfprintf+0x180>
    13fc:	f8 01       	movw	r30, r16
    13fe:	80 81       	ld	r24, Z
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	0e 5f       	subi	r16, 0xFE	; 254
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	88 24       	eor	r8, r8
    1408:	83 94       	inc	r8
    140a:	91 2c       	mov	r9, r1
    140c:	53 01       	movw	r10, r6
    140e:	12 c0       	rjmp	.+36     	; 0x1434 <vfprintf+0x178>
    1410:	28 01       	movw	r4, r16
    1412:	f2 e0       	ldi	r31, 0x02	; 2
    1414:	4f 0e       	add	r4, r31
    1416:	51 1c       	adc	r5, r1
    1418:	f8 01       	movw	r30, r16
    141a:	a0 80       	ld	r10, Z
    141c:	b1 80       	ldd	r11, Z+1	; 0x01
    141e:	36 fe       	sbrs	r3, 6
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <vfprintf+0x16c>
    1422:	69 2d       	mov	r22, r9
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x170>
    1428:	6f ef       	ldi	r22, 0xFF	; 255
    142a:	7f ef       	ldi	r23, 0xFF	; 255
    142c:	c5 01       	movw	r24, r10
    142e:	4e d1       	rcall	.+668    	; 0x16cc <strnlen>
    1430:	4c 01       	movw	r8, r24
    1432:	82 01       	movw	r16, r4
    1434:	f3 2d       	mov	r31, r3
    1436:	ff 77       	andi	r31, 0x7F	; 127
    1438:	3f 2e       	mov	r3, r31
    143a:	15 c0       	rjmp	.+42     	; 0x1466 <vfprintf+0x1aa>
    143c:	28 01       	movw	r4, r16
    143e:	22 e0       	ldi	r18, 0x02	; 2
    1440:	42 0e       	add	r4, r18
    1442:	51 1c       	adc	r5, r1
    1444:	f8 01       	movw	r30, r16
    1446:	a0 80       	ld	r10, Z
    1448:	b1 80       	ldd	r11, Z+1	; 0x01
    144a:	36 fe       	sbrs	r3, 6
    144c:	03 c0       	rjmp	.+6      	; 0x1454 <vfprintf+0x198>
    144e:	69 2d       	mov	r22, r9
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <vfprintf+0x19c>
    1454:	6f ef       	ldi	r22, 0xFF	; 255
    1456:	7f ef       	ldi	r23, 0xFF	; 255
    1458:	c5 01       	movw	r24, r10
    145a:	2d d1       	rcall	.+602    	; 0x16b6 <strnlen_P>
    145c:	4c 01       	movw	r8, r24
    145e:	f3 2d       	mov	r31, r3
    1460:	f0 68       	ori	r31, 0x80	; 128
    1462:	3f 2e       	mov	r3, r31
    1464:	82 01       	movw	r16, r4
    1466:	33 fc       	sbrc	r3, 3
    1468:	19 c0       	rjmp	.+50     	; 0x149c <vfprintf+0x1e0>
    146a:	82 2d       	mov	r24, r2
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	88 16       	cp	r8, r24
    1470:	99 06       	cpc	r9, r25
    1472:	a0 f4       	brcc	.+40     	; 0x149c <vfprintf+0x1e0>
    1474:	b6 01       	movw	r22, r12
    1476:	80 e2       	ldi	r24, 0x20	; 32
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	33 d1       	rcall	.+614    	; 0x16e2 <fputc>
    147c:	2a 94       	dec	r2
    147e:	f5 cf       	rjmp	.-22     	; 0x146a <vfprintf+0x1ae>
    1480:	f5 01       	movw	r30, r10
    1482:	37 fc       	sbrc	r3, 7
    1484:	85 91       	lpm	r24, Z+
    1486:	37 fe       	sbrs	r3, 7
    1488:	81 91       	ld	r24, Z+
    148a:	5f 01       	movw	r10, r30
    148c:	b6 01       	movw	r22, r12
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	28 d1       	rcall	.+592    	; 0x16e2 <fputc>
    1492:	21 10       	cpse	r2, r1
    1494:	2a 94       	dec	r2
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	82 1a       	sub	r8, r18
    149a:	91 08       	sbc	r9, r1
    149c:	81 14       	cp	r8, r1
    149e:	91 04       	cpc	r9, r1
    14a0:	79 f7       	brne	.-34     	; 0x1480 <vfprintf+0x1c4>
    14a2:	e1 c0       	rjmp	.+450    	; 0x1666 <vfprintf+0x3aa>
    14a4:	84 36       	cpi	r24, 0x64	; 100
    14a6:	11 f0       	breq	.+4      	; 0x14ac <vfprintf+0x1f0>
    14a8:	89 36       	cpi	r24, 0x69	; 105
    14aa:	39 f5       	brne	.+78     	; 0x14fa <vfprintf+0x23e>
    14ac:	f8 01       	movw	r30, r16
    14ae:	37 fe       	sbrs	r3, 7
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <vfprintf+0x204>
    14b2:	60 81       	ld	r22, Z
    14b4:	71 81       	ldd	r23, Z+1	; 0x01
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	0c 5f       	subi	r16, 0xFC	; 252
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <vfprintf+0x214>
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	07 2e       	mov	r0, r23
    14c6:	00 0c       	add	r0, r0
    14c8:	88 0b       	sbc	r24, r24
    14ca:	99 0b       	sbc	r25, r25
    14cc:	0e 5f       	subi	r16, 0xFE	; 254
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	f3 2d       	mov	r31, r3
    14d2:	ff 76       	andi	r31, 0x6F	; 111
    14d4:	3f 2e       	mov	r3, r31
    14d6:	97 ff       	sbrs	r25, 7
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <vfprintf+0x230>
    14da:	90 95       	com	r25
    14dc:	80 95       	com	r24
    14de:	70 95       	com	r23
    14e0:	61 95       	neg	r22
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	8f 4f       	sbci	r24, 0xFF	; 255
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	f0 68       	ori	r31, 0x80	; 128
    14ea:	3f 2e       	mov	r3, r31
    14ec:	2a e0       	ldi	r18, 0x0A	; 10
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	a3 01       	movw	r20, r6
    14f2:	33 d1       	rcall	.+614    	; 0x175a <__ultoa_invert>
    14f4:	88 2e       	mov	r8, r24
    14f6:	86 18       	sub	r8, r6
    14f8:	44 c0       	rjmp	.+136    	; 0x1582 <vfprintf+0x2c6>
    14fa:	85 37       	cpi	r24, 0x75	; 117
    14fc:	31 f4       	brne	.+12     	; 0x150a <vfprintf+0x24e>
    14fe:	23 2d       	mov	r18, r3
    1500:	2f 7e       	andi	r18, 0xEF	; 239
    1502:	b2 2e       	mov	r11, r18
    1504:	2a e0       	ldi	r18, 0x0A	; 10
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	25 c0       	rjmp	.+74     	; 0x1554 <vfprintf+0x298>
    150a:	93 2d       	mov	r25, r3
    150c:	99 7f       	andi	r25, 0xF9	; 249
    150e:	b9 2e       	mov	r11, r25
    1510:	8f 36       	cpi	r24, 0x6F	; 111
    1512:	c1 f0       	breq	.+48     	; 0x1544 <vfprintf+0x288>
    1514:	18 f4       	brcc	.+6      	; 0x151c <vfprintf+0x260>
    1516:	88 35       	cpi	r24, 0x58	; 88
    1518:	79 f0       	breq	.+30     	; 0x1538 <vfprintf+0x27c>
    151a:	ae c0       	rjmp	.+348    	; 0x1678 <vfprintf+0x3bc>
    151c:	80 37       	cpi	r24, 0x70	; 112
    151e:	19 f0       	breq	.+6      	; 0x1526 <vfprintf+0x26a>
    1520:	88 37       	cpi	r24, 0x78	; 120
    1522:	21 f0       	breq	.+8      	; 0x152c <vfprintf+0x270>
    1524:	a9 c0       	rjmp	.+338    	; 0x1678 <vfprintf+0x3bc>
    1526:	e9 2f       	mov	r30, r25
    1528:	e0 61       	ori	r30, 0x10	; 16
    152a:	be 2e       	mov	r11, r30
    152c:	b4 fe       	sbrs	r11, 4
    152e:	0d c0       	rjmp	.+26     	; 0x154a <vfprintf+0x28e>
    1530:	fb 2d       	mov	r31, r11
    1532:	f4 60       	ori	r31, 0x04	; 4
    1534:	bf 2e       	mov	r11, r31
    1536:	09 c0       	rjmp	.+18     	; 0x154a <vfprintf+0x28e>
    1538:	34 fe       	sbrs	r3, 4
    153a:	0a c0       	rjmp	.+20     	; 0x1550 <vfprintf+0x294>
    153c:	29 2f       	mov	r18, r25
    153e:	26 60       	ori	r18, 0x06	; 6
    1540:	b2 2e       	mov	r11, r18
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <vfprintf+0x294>
    1544:	28 e0       	ldi	r18, 0x08	; 8
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <vfprintf+0x298>
    154a:	20 e1       	ldi	r18, 0x10	; 16
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x298>
    1550:	20 e1       	ldi	r18, 0x10	; 16
    1552:	32 e0       	ldi	r19, 0x02	; 2
    1554:	f8 01       	movw	r30, r16
    1556:	b7 fe       	sbrs	r11, 7
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <vfprintf+0x2ac>
    155a:	60 81       	ld	r22, Z
    155c:	71 81       	ldd	r23, Z+1	; 0x01
    155e:	82 81       	ldd	r24, Z+2	; 0x02
    1560:	93 81       	ldd	r25, Z+3	; 0x03
    1562:	0c 5f       	subi	r16, 0xFC	; 252
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <vfprintf+0x2b8>
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 5f       	subi	r16, 0xFE	; 254
    1572:	1f 4f       	sbci	r17, 0xFF	; 255
    1574:	a3 01       	movw	r20, r6
    1576:	f1 d0       	rcall	.+482    	; 0x175a <__ultoa_invert>
    1578:	88 2e       	mov	r8, r24
    157a:	86 18       	sub	r8, r6
    157c:	fb 2d       	mov	r31, r11
    157e:	ff 77       	andi	r31, 0x7F	; 127
    1580:	3f 2e       	mov	r3, r31
    1582:	36 fe       	sbrs	r3, 6
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <vfprintf+0x2e4>
    1586:	23 2d       	mov	r18, r3
    1588:	2e 7f       	andi	r18, 0xFE	; 254
    158a:	a2 2e       	mov	r10, r18
    158c:	89 14       	cp	r8, r9
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <vfprintf+0x2ea>
    1590:	34 fe       	sbrs	r3, 4
    1592:	0b c0       	rjmp	.+22     	; 0x15aa <vfprintf+0x2ee>
    1594:	32 fc       	sbrc	r3, 2
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <vfprintf+0x2ee>
    1598:	83 2d       	mov	r24, r3
    159a:	8e 7e       	andi	r24, 0xEE	; 238
    159c:	a8 2e       	mov	r10, r24
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <vfprintf+0x2ee>
    15a0:	b8 2c       	mov	r11, r8
    15a2:	a3 2c       	mov	r10, r3
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <vfprintf+0x2f0>
    15a6:	b8 2c       	mov	r11, r8
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <vfprintf+0x2f0>
    15aa:	b9 2c       	mov	r11, r9
    15ac:	a4 fe       	sbrs	r10, 4
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <vfprintf+0x312>
    15b0:	fe 01       	movw	r30, r28
    15b2:	e8 0d       	add	r30, r8
    15b4:	f1 1d       	adc	r31, r1
    15b6:	80 81       	ld	r24, Z
    15b8:	80 33       	cpi	r24, 0x30	; 48
    15ba:	21 f4       	brne	.+8      	; 0x15c4 <vfprintf+0x308>
    15bc:	9a 2d       	mov	r25, r10
    15be:	99 7e       	andi	r25, 0xE9	; 233
    15c0:	a9 2e       	mov	r10, r25
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <vfprintf+0x31a>
    15c4:	a2 fe       	sbrs	r10, 2
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0x318>
    15c8:	b3 94       	inc	r11
    15ca:	b3 94       	inc	r11
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <vfprintf+0x31a>
    15ce:	8a 2d       	mov	r24, r10
    15d0:	86 78       	andi	r24, 0x86	; 134
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <vfprintf+0x31a>
    15d4:	b3 94       	inc	r11
    15d6:	a3 fc       	sbrc	r10, 3
    15d8:	10 c0       	rjmp	.+32     	; 0x15fa <vfprintf+0x33e>
    15da:	a0 fe       	sbrs	r10, 0
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x32e>
    15de:	b2 14       	cp	r11, r2
    15e0:	80 f4       	brcc	.+32     	; 0x1602 <vfprintf+0x346>
    15e2:	28 0c       	add	r2, r8
    15e4:	92 2c       	mov	r9, r2
    15e6:	9b 18       	sub	r9, r11
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <vfprintf+0x348>
    15ea:	b2 14       	cp	r11, r2
    15ec:	58 f4       	brcc	.+22     	; 0x1604 <vfprintf+0x348>
    15ee:	b6 01       	movw	r22, r12
    15f0:	80 e2       	ldi	r24, 0x20	; 32
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	76 d0       	rcall	.+236    	; 0x16e2 <fputc>
    15f6:	b3 94       	inc	r11
    15f8:	f8 cf       	rjmp	.-16     	; 0x15ea <vfprintf+0x32e>
    15fa:	b2 14       	cp	r11, r2
    15fc:	18 f4       	brcc	.+6      	; 0x1604 <vfprintf+0x348>
    15fe:	2b 18       	sub	r2, r11
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <vfprintf+0x34a>
    1602:	98 2c       	mov	r9, r8
    1604:	21 2c       	mov	r2, r1
    1606:	a4 fe       	sbrs	r10, 4
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <vfprintf+0x36c>
    160a:	b6 01       	movw	r22, r12
    160c:	80 e3       	ldi	r24, 0x30	; 48
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	68 d0       	rcall	.+208    	; 0x16e2 <fputc>
    1612:	a2 fe       	sbrs	r10, 2
    1614:	16 c0       	rjmp	.+44     	; 0x1642 <vfprintf+0x386>
    1616:	a1 fc       	sbrc	r10, 1
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <vfprintf+0x364>
    161a:	88 e7       	ldi	r24, 0x78	; 120
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x368>
    1620:	88 e5       	ldi	r24, 0x58	; 88
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	b6 01       	movw	r22, r12
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <vfprintf+0x384>
    1628:	8a 2d       	mov	r24, r10
    162a:	86 78       	andi	r24, 0x86	; 134
    162c:	51 f0       	breq	.+20     	; 0x1642 <vfprintf+0x386>
    162e:	a1 fe       	sbrs	r10, 1
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vfprintf+0x37a>
    1632:	8b e2       	ldi	r24, 0x2B	; 43
    1634:	01 c0       	rjmp	.+2      	; 0x1638 <vfprintf+0x37c>
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	a7 fc       	sbrc	r10, 7
    163a:	8d e2       	ldi	r24, 0x2D	; 45
    163c:	b6 01       	movw	r22, r12
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	50 d0       	rcall	.+160    	; 0x16e2 <fputc>
    1642:	89 14       	cp	r8, r9
    1644:	30 f4       	brcc	.+12     	; 0x1652 <vfprintf+0x396>
    1646:	b6 01       	movw	r22, r12
    1648:	80 e3       	ldi	r24, 0x30	; 48
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	4a d0       	rcall	.+148    	; 0x16e2 <fputc>
    164e:	9a 94       	dec	r9
    1650:	f8 cf       	rjmp	.-16     	; 0x1642 <vfprintf+0x386>
    1652:	8a 94       	dec	r8
    1654:	f3 01       	movw	r30, r6
    1656:	e8 0d       	add	r30, r8
    1658:	f1 1d       	adc	r31, r1
    165a:	80 81       	ld	r24, Z
    165c:	b6 01       	movw	r22, r12
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	40 d0       	rcall	.+128    	; 0x16e2 <fputc>
    1662:	81 10       	cpse	r8, r1
    1664:	f6 cf       	rjmp	.-20     	; 0x1652 <vfprintf+0x396>
    1666:	22 20       	and	r2, r2
    1668:	09 f4       	brne	.+2      	; 0x166c <vfprintf+0x3b0>
    166a:	4e ce       	rjmp	.-868    	; 0x1308 <vfprintf+0x4c>
    166c:	b6 01       	movw	r22, r12
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	37 d0       	rcall	.+110    	; 0x16e2 <fputc>
    1674:	2a 94       	dec	r2
    1676:	f7 cf       	rjmp	.-18     	; 0x1666 <vfprintf+0x3aa>
    1678:	f6 01       	movw	r30, r12
    167a:	86 81       	ldd	r24, Z+6	; 0x06
    167c:	97 81       	ldd	r25, Z+7	; 0x07
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0x3c8>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	2b 96       	adiw	r28, 0x0b	; 11
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	df 90       	pop	r13
    169e:	cf 90       	pop	r12
    16a0:	bf 90       	pop	r11
    16a2:	af 90       	pop	r10
    16a4:	9f 90       	pop	r9
    16a6:	8f 90       	pop	r8
    16a8:	7f 90       	pop	r7
    16aa:	6f 90       	pop	r6
    16ac:	5f 90       	pop	r5
    16ae:	4f 90       	pop	r4
    16b0:	3f 90       	pop	r3
    16b2:	2f 90       	pop	r2
    16b4:	08 95       	ret

000016b6 <strnlen_P>:
    16b6:	fc 01       	movw	r30, r24
    16b8:	05 90       	lpm	r0, Z+
    16ba:	61 50       	subi	r22, 0x01	; 1
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	01 10       	cpse	r0, r1
    16c0:	d8 f7       	brcc	.-10     	; 0x16b8 <strnlen_P+0x2>
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	8e 0f       	add	r24, r30
    16c8:	9f 1f       	adc	r25, r31
    16ca:	08 95       	ret

000016cc <strnlen>:
    16cc:	fc 01       	movw	r30, r24
    16ce:	61 50       	subi	r22, 0x01	; 1
    16d0:	70 40       	sbci	r23, 0x00	; 0
    16d2:	01 90       	ld	r0, Z+
    16d4:	01 10       	cpse	r0, r1
    16d6:	d8 f7       	brcc	.-10     	; 0x16ce <strnlen+0x2>
    16d8:	80 95       	com	r24
    16da:	90 95       	com	r25
    16dc:	8e 0f       	add	r24, r30
    16de:	9f 1f       	adc	r25, r31
    16e0:	08 95       	ret

000016e2 <fputc>:
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	fb 01       	movw	r30, r22
    16ec:	23 81       	ldd	r18, Z+3	; 0x03
    16ee:	21 fd       	sbrc	r18, 1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <fputc+0x16>
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	2c c0       	rjmp	.+88     	; 0x1750 <fputc+0x6e>
    16f8:	22 ff       	sbrs	r18, 2
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <fputc+0x46>
    16fc:	46 81       	ldd	r20, Z+6	; 0x06
    16fe:	57 81       	ldd	r21, Z+7	; 0x07
    1700:	24 81       	ldd	r18, Z+4	; 0x04
    1702:	35 81       	ldd	r19, Z+5	; 0x05
    1704:	42 17       	cp	r20, r18
    1706:	53 07       	cpc	r21, r19
    1708:	44 f4       	brge	.+16     	; 0x171a <fputc+0x38>
    170a:	a0 81       	ld	r26, Z
    170c:	b1 81       	ldd	r27, Z+1	; 0x01
    170e:	9d 01       	movw	r18, r26
    1710:	2f 5f       	subi	r18, 0xFF	; 255
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	31 83       	std	Z+1, r19	; 0x01
    1716:	20 83       	st	Z, r18
    1718:	8c 93       	st	X, r24
    171a:	26 81       	ldd	r18, Z+6	; 0x06
    171c:	37 81       	ldd	r19, Z+7	; 0x07
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	37 83       	std	Z+7, r19	; 0x07
    1724:	26 83       	std	Z+6, r18	; 0x06
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <fputc+0x6e>
    1728:	8b 01       	movw	r16, r22
    172a:	ec 01       	movw	r28, r24
    172c:	fb 01       	movw	r30, r22
    172e:	00 84       	ldd	r0, Z+8	; 0x08
    1730:	f1 85       	ldd	r31, Z+9	; 0x09
    1732:	e0 2d       	mov	r30, r0
    1734:	09 95       	icall
    1736:	89 2b       	or	r24, r25
    1738:	e1 f6       	brne	.-72     	; 0x16f2 <fputc+0x10>
    173a:	d8 01       	movw	r26, r16
    173c:	16 96       	adiw	r26, 0x06	; 6
    173e:	8d 91       	ld	r24, X+
    1740:	9c 91       	ld	r25, X
    1742:	17 97       	sbiw	r26, 0x07	; 7
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	17 96       	adiw	r26, 0x07	; 7
    1748:	9c 93       	st	X, r25
    174a:	8e 93       	st	-X, r24
    174c:	16 97       	sbiw	r26, 0x06	; 6
    174e:	ce 01       	movw	r24, r28
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <__ultoa_invert>:
    175a:	fa 01       	movw	r30, r20
    175c:	aa 27       	eor	r26, r26
    175e:	28 30       	cpi	r18, 0x08	; 8
    1760:	51 f1       	breq	.+84     	; 0x17b6 <__ultoa_invert+0x5c>
    1762:	20 31       	cpi	r18, 0x10	; 16
    1764:	81 f1       	breq	.+96     	; 0x17c6 <__ultoa_invert+0x6c>
    1766:	e8 94       	clt
    1768:	6f 93       	push	r22
    176a:	6e 7f       	andi	r22, 0xFE	; 254
    176c:	6e 5f       	subi	r22, 0xFE	; 254
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	af 4f       	sbci	r26, 0xFF	; 255
    1776:	b1 e0       	ldi	r27, 0x01	; 1
    1778:	3e d0       	rcall	.+124    	; 0x17f6 <__ultoa_invert+0x9c>
    177a:	b4 e0       	ldi	r27, 0x04	; 4
    177c:	3c d0       	rcall	.+120    	; 0x17f6 <__ultoa_invert+0x9c>
    177e:	67 0f       	add	r22, r23
    1780:	78 1f       	adc	r23, r24
    1782:	89 1f       	adc	r24, r25
    1784:	9a 1f       	adc	r25, r26
    1786:	a1 1d       	adc	r26, r1
    1788:	68 0f       	add	r22, r24
    178a:	79 1f       	adc	r23, r25
    178c:	8a 1f       	adc	r24, r26
    178e:	91 1d       	adc	r25, r1
    1790:	a1 1d       	adc	r26, r1
    1792:	6a 0f       	add	r22, r26
    1794:	71 1d       	adc	r23, r1
    1796:	81 1d       	adc	r24, r1
    1798:	91 1d       	adc	r25, r1
    179a:	a1 1d       	adc	r26, r1
    179c:	20 d0       	rcall	.+64     	; 0x17de <__ultoa_invert+0x84>
    179e:	09 f4       	brne	.+2      	; 0x17a2 <__ultoa_invert+0x48>
    17a0:	68 94       	set
    17a2:	3f 91       	pop	r19
    17a4:	2a e0       	ldi	r18, 0x0A	; 10
    17a6:	26 9f       	mul	r18, r22
    17a8:	11 24       	eor	r1, r1
    17aa:	30 19       	sub	r19, r0
    17ac:	30 5d       	subi	r19, 0xD0	; 208
    17ae:	31 93       	st	Z+, r19
    17b0:	de f6       	brtc	.-74     	; 0x1768 <__ultoa_invert+0xe>
    17b2:	cf 01       	movw	r24, r30
    17b4:	08 95       	ret
    17b6:	46 2f       	mov	r20, r22
    17b8:	47 70       	andi	r20, 0x07	; 7
    17ba:	40 5d       	subi	r20, 0xD0	; 208
    17bc:	41 93       	st	Z+, r20
    17be:	b3 e0       	ldi	r27, 0x03	; 3
    17c0:	0f d0       	rcall	.+30     	; 0x17e0 <__ultoa_invert+0x86>
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <__ultoa_invert+0x5c>
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <__ultoa_invert+0x58>
    17c6:	46 2f       	mov	r20, r22
    17c8:	4f 70       	andi	r20, 0x0F	; 15
    17ca:	40 5d       	subi	r20, 0xD0	; 208
    17cc:	4a 33       	cpi	r20, 0x3A	; 58
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <__ultoa_invert+0x7c>
    17d0:	49 5d       	subi	r20, 0xD9	; 217
    17d2:	31 fd       	sbrc	r19, 1
    17d4:	40 52       	subi	r20, 0x20	; 32
    17d6:	41 93       	st	Z+, r20
    17d8:	02 d0       	rcall	.+4      	; 0x17de <__ultoa_invert+0x84>
    17da:	a9 f7       	brne	.-22     	; 0x17c6 <__ultoa_invert+0x6c>
    17dc:	ea cf       	rjmp	.-44     	; 0x17b2 <__ultoa_invert+0x58>
    17de:	b4 e0       	ldi	r27, 0x04	; 4
    17e0:	a6 95       	lsr	r26
    17e2:	97 95       	ror	r25
    17e4:	87 95       	ror	r24
    17e6:	77 95       	ror	r23
    17e8:	67 95       	ror	r22
    17ea:	ba 95       	dec	r27
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__ultoa_invert+0x86>
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	61 05       	cpc	r22, r1
    17f2:	71 05       	cpc	r23, r1
    17f4:	08 95       	ret
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	0a 2e       	mov	r0, r26
    17fc:	06 94       	lsr	r0
    17fe:	57 95       	ror	r21
    1800:	47 95       	ror	r20
    1802:	37 95       	ror	r19
    1804:	27 95       	ror	r18
    1806:	ba 95       	dec	r27
    1808:	c9 f7       	brne	.-14     	; 0x17fc <__ultoa_invert+0xa2>
    180a:	62 0f       	add	r22, r18
    180c:	73 1f       	adc	r23, r19
    180e:	84 1f       	adc	r24, r20
    1810:	95 1f       	adc	r25, r21
    1812:	a0 1d       	adc	r26, r0
    1814:	08 95       	ret

00001816 <_exit>:
    1816:	f8 94       	cli

00001818 <__stop_program>:
    1818:	ff cf       	rjmp	.-2      	; 0x1818 <__stop_program>
