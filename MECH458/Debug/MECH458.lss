
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000188  00800100  000016ca  0000175e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800288  00800288  000018e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b5a  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aeb  00000000  00000000  000067ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000336f  00000000  00000000  000082b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000075c  00000000  00000000  0000b628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a92a  00000000  00000000  0000bd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001649  00000000  00000000  000166ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00017cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b47  00000000  00000000  00017f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bc c3       	rjmp	.+1912   	; 0x7ae <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c6       	rjmp	.+3116   	; 0xc72 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea ec       	ldi	r30, 0xCA	; 202
      ac:	f6 e1       	ldi	r31, 0x16	; 22
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 38       	cpi	r26, 0x88	; 136
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a8 e8       	ldi	r26, 0x88	; 136
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a4 35       	cpi	r26, 0x54	; 84
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	82 d2       	rcall	.+1284   	; 0x5d4 <main>
      d0:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <_exit>

000000d4 <__bad_interrupt>:
      d4:	d8 c2       	rjmp	.+1456   	; 0x686 <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		//PORTC ^= 0xFE;
		if (g_ADCCount < 10)
     122:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <g_ADCCount>
     126:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	d8 f4       	brcc	.+54     	; 0x164 <__vector_29+0x5c>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     12e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <g_ADCCount>
     132:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 c2 02 	sts	0x02C2, r19	; 0x8002c2 <g_ADCCount+0x1>
     140:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	e3 55       	subi	r30, 0x53	; 83
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);	 
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <g_ADCCount>
     168:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <_timer+0x11>
		//ADCSRA &= 0x01111111;
		//PORTC ^= 0xFE;
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	80 ea       	ldi	r24, 0xA0	; 160
     194:	89 27       	eor	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret

0000019a <ADC_Task>:
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <ADC_Task+0x1a>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <ADC_Task+0x1c>
     1b6:	1f 92       	push	r1
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <j.2503>
     1c0:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <j.2503+0x1>
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <j.2503+0x1>
     1ca:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <j.2503>
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	ba 01       	movw	r22, r20
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	2f b7       	in	r18, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	fc 01       	movw	r30, r24
     1de:	ee 0f       	add	r30, r30
     1e0:	ff 1f       	adc	r31, r31
     1e2:	e3 55       	subi	r30, 0x53	; 83
     1e4:	fd 4f       	sbci	r31, 0xFD	; 253
     1e6:	01 90       	ld	r0, Z+
     1e8:	f0 81       	ld	r31, Z
     1ea:	e0 2d       	mov	r30, r0
     1ec:	4e 0f       	add	r20, r30
     1ee:	5f 1f       	adc	r21, r31
     1f0:	61 1d       	adc	r22, r1
     1f2:	71 1d       	adc	r23, r1
     1f4:	2f bf       	out	0x3f, r18	; 63
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	8a 30       	cpi	r24, 0x0A	; 10
     1fa:	91 05       	cpc	r25, r1
     1fc:	69 f7       	brne	.-38     	; 0x1d8 <ADC_Task+0x3e>
     1fe:	1f b7       	in	r17, 0x3f	; 63
     200:	f8 94       	cli
     202:	cb 01       	movw	r24, r22
     204:	ba 01       	movw	r22, r20
     206:	2a e0       	ldi	r18, 0x0A	; 10
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	50 e0       	ldi	r21, 0x00	; 0
     20e:	3d d6       	rcall	.+3194   	; 0xe8a <__udivmodsi4>
     210:	69 01       	movw	r12, r18
     212:	7a 01       	movw	r14, r20
     214:	1f bf       	out	0x3f, r17	; 63
     216:	1f b7       	in	r17, 0x3f	; 63
     218:	f8 94       	cli
     21a:	da 01       	movw	r26, r20
     21c:	c9 01       	movw	r24, r18
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	a1 09       	sbc	r26, r1
     222:	b1 09       	sbc	r27, r1
     224:	8f 3c       	cpi	r24, 0xCF	; 207
     226:	97 40       	sbci	r25, 0x07	; 7
     228:	a1 05       	cpc	r26, r1
     22a:	b1 05       	cpc	r27, r1
     22c:	a0 f4       	brcc	.+40     	; 0x256 <ADC_Task+0xbc>
     22e:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <STAGE2>
     232:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <STAGE2+0x1>
     236:	a3 d1       	rcall	.+838    	; 0x57e <LL_GetRefl>
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	c8 16       	cp	r12, r24
     23e:	d9 06       	cpc	r13, r25
     240:	ea 06       	cpc	r14, r26
     242:	fb 06       	cpc	r15, r27
     244:	40 f4       	brcc	.+16     	; 0x256 <ADC_Task+0xbc>
     246:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <STAGE2>
     24a:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <STAGE2+0x1>
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	11 f0       	breq	.+4      	; 0x256 <ADC_Task+0xbc>
     252:	b6 01       	movw	r22, r12
     254:	9f d1       	rcall	.+830    	; 0x594 <LL_UpdateRefl>
     256:	1f bf       	out	0x3f, r17	; 63
     258:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <g_ADCCount+0x1>
     25c:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <g_ADCCount>
     260:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <_timer+0x11>
     264:	66 9b       	sbis	0x0c, 6	; 12
     266:	06 c0       	rjmp	.+12     	; 0x274 <ADC_Task+0xda>
     268:	ea e7       	ldi	r30, 0x7A	; 122
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	80 64       	ori	r24, 0x40	; 64
     270:	80 83       	st	Z, r24
     272:	18 c0       	rjmp	.+48     	; 0x2a4 <ADC_Task+0x10a>
     274:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <j.2503+0x1>
     278:	8f 93       	push	r24
     27a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <j.2503>
     27e:	8f 93       	push	r24
     280:	82 e1       	ldi	r24, 0x12	; 18
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	8e 01       	movw	r16, r28
     28a:	0f 5f       	subi	r16, 0xFF	; 255
     28c:	1f 4f       	sbci	r17, 0xFF	; 255
     28e:	1f 93       	push	r17
     290:	0f 93       	push	r16
     292:	3e d7       	rcall	.+3708   	; 0x1110 <sprintf>
     294:	c8 01       	movw	r24, r16
     296:	eb d5       	rcall	.+3030   	; 0xe6e <UART_SendString>
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	bf 90       	pop	r11
     2c0:	af 90       	pop	r10
     2c2:	9f 90       	pop	r9
     2c4:	8f 90       	pop	r8
     2c6:	08 95       	ret

000002c8 <MAG_Task>:
     2c8:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <gMotorOn>
     2cc:	88 23       	and	r24, r24
     2ce:	49 f0       	breq	.+18     	; 0x2e2 <MAG_Task+0x1a>
     2d0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <tick.2526>
     2d4:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <tick.2526+0x1>
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <tick.2526+0x1>
     2de:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <tick.2526>
     2e2:	64 99       	sbic	0x0c, 4	; 12
     2e4:	1c c0       	rjmp	.+56     	; 0x31e <MAG_Task+0x56>
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     2ec:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     2f0:	5c d1       	rcall	.+696    	; 0x5aa <LL_UpdateStatus>
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     2f8:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     2fc:	51 d1       	rcall	.+674    	; 0x5a0 <LL_UpdateMag>
     2fe:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     302:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     306:	10 d1       	rcall	.+544    	; 0x528 <LL_Next>
     308:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <STAGE1+0x1>
     30c:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <STAGE1>
     310:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_timer+0x1a>
     314:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <tick.2526+0x1>
     318:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tick.2526>
     31c:	08 95       	ret
     31e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <tick.2526>
     322:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <tick.2526+0x1>
     326:	4f 97       	sbiw	r24, 0x1f	; 31
     328:	d8 f0       	brcs	.+54     	; 0x360 <MAG_Task+0x98>
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     330:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     334:	3a d1       	rcall	.+628    	; 0x5aa <LL_UpdateStatus>
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     33c:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     340:	2f d1       	rcall	.+606    	; 0x5a0 <LL_UpdateMag>
     342:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     346:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     34a:	ee d0       	rcall	.+476    	; 0x528 <LL_Next>
     34c:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <STAGE1+0x1>
     350:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <STAGE1>
     354:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <_timer+0x1a>
     358:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <tick.2526+0x1>
     35c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tick.2526>
     360:	08 95       	ret

00000362 <EXIT_Task>:
     362:	cf 93       	push	r28
     364:	c0 91 4a 03 	lds	r28, 0x034A	; 0x80034a <stepper+0x3>
     368:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     36c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     370:	01 d1       	rcall	.+514    	; 0x574 <LL_GetClass>
     372:	c8 13       	cpse	r28, r24
     374:	1d c0       	rjmp	.+58     	; 0x3b0 <EXIT_Task+0x4e>
     376:	62 e0       	ldi	r22, 0x02	; 2
     378:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     37c:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     380:	14 d1       	rcall	.+552    	; 0x5aa <LL_UpdateStatus>
     382:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     386:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     38a:	ce d0       	rcall	.+412    	; 0x528 <LL_Next>
     38c:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <HEAD+0x1>
     390:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <HEAD>
     394:	fc 01       	movw	r30, r24
     396:	82 81       	ldd	r24, Z+2	; 0x02
     398:	93 81       	ldd	r25, Z+3	; 0x03
     39a:	ec d0       	rcall	.+472    	; 0x574 <LL_GetClass>
     39c:	c8 2f       	mov	r28, r24
     39e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     3a2:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     3a6:	e6 d0       	rcall	.+460    	; 0x574 <LL_GetClass>
     3a8:	6c 2f       	mov	r22, r28
     3aa:	ed d1       	rcall	.+986    	; 0x786 <STEPPER_SetRotation>
     3ac:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <_timer+0x23>
     3b0:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     3b4:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     3b8:	dd d0       	rcall	.+442    	; 0x574 <LL_GetClass>
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <BTN_Task>:
     3be:	89 b1       	in	r24, 0x09	; 9
     3c0:	83 70       	andi	r24, 0x03	; 3
     3c2:	69 f1       	breq	.+90     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3c4:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <__data_end>
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__data_end>
     3ce:	83 30       	cpi	r24, 0x03	; 3
     3d0:	30 f1       	brcs	.+76     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3d2:	89 b1       	in	r24, 0x09	; 9
     3d4:	83 70       	andi	r24, 0x03	; 3
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <BTN_Task+0x26>
     3d8:	8f e1       	ldi	r24, 0x1F	; 31
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	48 d5       	rcall	.+2704   	; 0xe6e <UART_SendString>
     3de:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
     3e2:	08 95       	ret
     3e4:	89 b1       	in	r24, 0x09	; 9
     3e6:	83 70       	andi	r24, 0x03	; 3
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	69 f4       	brne	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ec:	87 e3       	ldi	r24, 0x37	; 55
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	3e d5       	rcall	.+2684   	; 0xe6e <UART_SendString>
     3f2:	8d e5       	ldi	r24, 0x5D	; 93
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	46 d3       	rcall	.+1676   	; 0xa84 <SYS_Pause>
     3f8:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <g_IdleStartTime+0x1>
     3fc:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <g_IdleStartTime>
     400:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
     404:	08 95       	ret
     406:	89 b1       	in	r24, 0x09	; 9
     408:	83 70       	andi	r24, 0x03	; 3
     40a:	82 30       	cpi	r24, 0x02	; 2
     40c:	31 f4       	brne	.+12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40e:	8d e6       	ldi	r24, 0x6D	; 109
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	2d d5       	rcall	.+2650   	; 0xe6e <UART_SendString>
     414:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
     418:	08 95       	ret
     41a:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__data_end>
     41e:	08 95       	ret

00000420 <ADD_Task>:
     420:	08 95       	ret

00000422 <SERVER_Task>:
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 1;
	static uint8_t pin5state = 1;
//	static uint8_t temp = 0;
	
	if((PINE & 0x80) == 0) // E7
     422:	67 99       	sbic	0x0c, 7	; 12
     424:	14 c0       	rjmp	.+40     	; 0x44e <SERVER_Task+0x2c>
	{
		if(pin7state)
     426:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2548>
     42a:	88 23       	and	r24, r24
     42c:	71 f0       	breq	.+28     	; 0x44a <SERVER_Task+0x28>
		{
			// Transition Detected O1 High -> Low : Item Enters		
			// Just signal the start of the system by placing the first node into stage 1
			if(STAGE1 == NULL) STAGE1 = HEAD;
     42e:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     432:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     436:	89 2b       	or	r24, r25
     438:	41 f4       	brne	.+16     	; 0x44a <SERVER_Task+0x28>
     43a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     43e:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     442:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <STAGE1+0x1>
     446:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <STAGE1>

		}
		pin7state = 0;
     44a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2548>
	}
	
	if((PINE & 0x40) == 0) // E6
     44e:	66 9b       	sbis	0x0c, 6	; 12
				// Once the ADC finishes ten conversions it enables the ADC handling task
				// The ADC handling task restarts conversions as long as this pin is high
				// If the pin goes High -> Low, the ADC task will finish and wont restart the ADC
				// So nothing happens here.
		}
		pin6state = 0;
     450:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2549>
	}
	
	if((PINE & 0x20) == 0) // E5
     454:	65 99       	sbic	0x0c, 5	; 12
     456:	0c c0       	rjmp	.+24     	; 0x470 <SERVER_Task+0x4e>
	{
		if(pin5state)
     458:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2550>
     45c:	88 23       	and	r24, r24
     45e:	31 f0       	breq	.+12     	; 0x46c <SERVER_Task+0x4a>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_timer+0x23>
			SYS_Pause(__FUNCTION__);
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0c d3       	rcall	.+1560   	; 0xa84 <SYS_Pause>
		}
		pin5state = 0;
     46c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2550>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     470:	67 9b       	sbis	0x0c, 7	; 12
     472:	0a c0       	rjmp	.+20     	; 0x488 <SERVER_Task+0x66>
	{
		if(!pin7state)
     474:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2548>
     478:	81 11       	cpse	r24, r1
     47a:	03 c0       	rjmp	.+6      	; 0x482 <SERVER_Task+0x60>
		{
			// Transition Detected O2 Low -> High : Item Exits O1
			// Unblock the magnetic sensor when the item leaves O1
			// The magnetic sensor blocks once the magnetism of the piece is inferred
			_timer[2].state = READY;	
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <_timer+0x1a>
		}
		pin7state = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2548>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     488:	66 9b       	sbis	0x0c, 6	; 12
     48a:	20 c0       	rjmp	.+64     	; 0x4cc <SERVER_Task+0xaa>
	{
		if(!pin6state)
     48c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2549>
     490:	81 11       	cpse	r24, r1
     492:	19 c0       	rjmp	.+50     	; 0x4c6 <SERVER_Task+0xa4>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			if(STAGE2 == NULL)
     494:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <STAGE2>
     498:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <STAGE2+0x1>
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	49 f4       	brne	.+18     	; 0x4b2 <SERVER_Task+0x90>
			{
				STAGE2 = HEAD; // First Item enters stage 2
     4a0:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
     4a4:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     4a8:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <STAGE2+0x1>
     4ac:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <STAGE2>
			}
			else
			{
				STAGE2 = LL_Next(STAGE2); // Increment stage 2
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <SERVER_Task+0x9a>
     4b2:	3a d0       	rcall	.+116    	; 0x528 <LL_Next>
     4b4:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <STAGE2+0x1>
     4b8:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <STAGE2>
			}
			ADCSRA |= (1 << ADSC);
     4bc:	ea e7       	ldi	r30, 0x7A	; 122
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2549>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     4cc:	65 9b       	sbis	0x0c, 5	; 12
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <SERVER_Task+0xb4>
	{
		if(!pin5state)
		{
			// Transition Detected O3 Low -> High : Item Exits System
		}
		pin5state = 1;			
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2550>
     4d6:	08 95       	ret

000004d8 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     4d8:	ef 92       	push	r14
     4da:	ff 92       	push	r15
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	7c 01       	movw	r14, r24
     4e4:	16 2f       	mov	r17, r22
     4e6:	d4 2f       	mov	r29, r20
     4e8:	c2 2f       	mov	r28, r18
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	ef d4       	rcall	.+2526   	; 0xece <malloc>
     4f0:	fc 01       	movw	r30, r24
     4f2:	f1 82       	std	Z+1, r15	; 0x01
     4f4:	e0 82       	st	Z, r14
     4f6:	12 83       	std	Z+2, r17	; 0x02
     4f8:	d3 83       	std	Z+3, r29	; 0x03
     4fa:	c4 83       	std	Z+4, r28	; 0x04
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	08 95       	ret

00000508 <LL_ItemListInit>:
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	ec 01       	movw	r28, r24
     50e:	86 e0       	ldi	r24, 0x06	; 6
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	dd d4       	rcall	.+2490   	; 0xece <malloc>
     514:	fc 01       	movw	r30, r24
     516:	d1 83       	std	Z+1, r29	; 0x01
     518:	c0 83       	st	Z, r28
     51a:	15 82       	std	Z+5, r1	; 0x05
     51c:	14 82       	std	Z+4, r1	; 0x04
     51e:	13 82       	std	Z+3, r1	; 0x03
     520:	12 82       	std	Z+2, r1	; 0x02
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <LL_Next>:
     528:	fc 01       	movw	r30, r24
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	08 95       	ret

00000530 <LL_AddBack>:
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	ec 01       	movw	r28, r24
     536:	cb 01       	movw	r24, r22
     538:	01 c0       	rjmp	.+2      	; 0x53c <LL_AddBack+0xc>
     53a:	e9 01       	movw	r28, r18
     53c:	2a 81       	ldd	r18, Y+2	; 0x02
     53e:	3b 81       	ldd	r19, Y+3	; 0x03
     540:	21 15       	cp	r18, r1
     542:	31 05       	cpc	r19, r1
     544:	d1 f7       	brne	.-12     	; 0x53a <LL_AddBack+0xa>
     546:	e0 df       	rcall	.-64     	; 0x508 <LL_ItemListInit>
     548:	9b 83       	std	Y+3, r25	; 0x03
     54a:	8a 83       	std	Y+2, r24	; 0x02
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <LL_Size>:
     552:	dc 01       	movw	r26, r24
     554:	12 96       	adiw	r26, 0x02	; 2
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	13 97       	sbiw	r26, 0x03	; 3
     55c:	30 97       	sbiw	r30, 0x00	; 0
     55e:	41 f0       	breq	.+16     	; 0x570 <LL_Size+0x1e>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	8f 5f       	subi	r24, 0xFF	; 255
     564:	02 80       	ldd	r0, Z+2	; 0x02
     566:	f3 81       	ldd	r31, Z+3	; 0x03
     568:	e0 2d       	mov	r30, r0
     56a:	30 97       	sbiw	r30, 0x00	; 0
     56c:	d1 f7       	brne	.-12     	; 0x562 <LL_Size+0x10>
     56e:	08 95       	ret
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	08 95       	ret

00000574 <LL_GetClass>:
     574:	dc 01       	movw	r26, r24
     576:	ed 91       	ld	r30, X+
     578:	fc 91       	ld	r31, X
     57a:	83 81       	ldd	r24, Z+3	; 0x03
     57c:	08 95       	ret

0000057e <LL_GetRefl>:
     57e:	dc 01       	movw	r26, r24
     580:	ed 91       	ld	r30, X+
     582:	fc 91       	ld	r31, X
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	08 95       	ret

0000058a <LL_GetMag>:
     58a:	dc 01       	movw	r26, r24
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	82 81       	ldd	r24, Z+2	; 0x02
     592:	08 95       	ret

00000594 <LL_UpdateRefl>:
     594:	dc 01       	movw	r26, r24
     596:	ed 91       	ld	r30, X+
     598:	fc 91       	ld	r31, X
     59a:	71 83       	std	Z+1, r23	; 0x01
     59c:	60 83       	st	Z, r22
     59e:	08 95       	ret

000005a0 <LL_UpdateMag>:
     5a0:	dc 01       	movw	r26, r24
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	62 83       	std	Z+2, r22	; 0x02
     5a8:	08 95       	ret

000005aa <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5aa:	dc 01       	movw	r26, r24
     5ac:	ed 91       	ld	r30, X+
     5ae:	fc 91       	ld	r31, X
     5b0:	64 83       	std	Z+4, r22	; 0x04
     5b2:	08 95       	ret

000005b4 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5b4:	dc 01       	movw	r26, r24
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	84 81       	ldd	r24, Z+4	; 0x04
     5bc:	08 95       	ret

000005be <GPIO_Init>:
extern list* TAIL;
extern list* FRONT;

int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     5c2:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     5c4:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     5c6:	80 ef       	ldi	r24, 0xF0	; 240
     5c8:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     5ca:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     5cc:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
}
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	08 95       	ret

000005d4 <main>:
	#include "EXECACQ.h"
	EXECACQ();
	return 0;
#endif
	
	SYS_Init();
     5d4:	95 d1       	rcall	.+810    	; 0x900 <SYS_Init>

	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     5d6:	89 b1       	in	r24, 0x09	; 9
     5d8:	83 70       	andi	r24, 0x03	; 3
     5da:	e9 f7       	brne	.-6      	; 0x5d6 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     5dc:	8c e8       	ldi	r24, 0x8C	; 140
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	46 d4       	rcall	.+2188   	; 0xe6e <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5e2:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	41 e1       	ldi	r20, 0x11	; 17
     5ea:	52 e0       	ldi	r21, 0x02	; 2
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	c3 d3       	rcall	.+1926   	; 0xd7c <TIMER_Create>
		_timer[0].state = READY;
     5f6:	c4 ef       	ldi	r28, 0xF4	; 244
     5f8:	d2 e0       	ldi	r29, 0x02	; 2
     5fa:	12 e0       	ldi	r17, 0x02	; 2
     5fc:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	4d ec       	ldi	r20, 0xCD	; 205
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	61 e0       	ldi	r22, 0x01	; 1
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	b6 d3       	rcall	.+1900   	; 0xd7c <TIMER_Create>
		_timer[1].state = BLOCKED;
     610:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	44 e6       	ldi	r20, 0x64	; 100
     618:	51 e0       	ldi	r21, 0x01	; 1
     61a:	61 e0       	ldi	r22, 0x01	; 1
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	ac d3       	rcall	.+1880   	; 0xd7c <TIMER_Create>
		_timer[2].state = BLOCKED;
     624:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	41 eb       	ldi	r20, 0xB1	; 177
     62c:	51 e0       	ldi	r21, 0x01	; 1
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	a2 d3       	rcall	.+1860   	; 0xd7c <TIMER_Create>
		_timer[3].state = BLOCKED;
     638:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(180, 1, ADD_Task, NULL);		// Item Enter Handling
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e1       	ldi	r20, 0x10	; 16
     640:	52 e0       	ldi	r21, 0x02	; 2
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	84 eb       	ldi	r24, 0xB4	; 180
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	98 d3       	rcall	.+1840   	; 0xd7c <TIMER_Create>
		_timer[4].state = BLOCKED;
     64c:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	4f ed       	ldi	r20, 0xDF	; 223
     654:	51 e0       	ldi	r21, 0x01	; 1
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	82 e3       	ldi	r24, 0x32	; 50
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	8e d3       	rcall	.+1820   	; 0xd7c <TIMER_Create>
		_timer[5].state = READY;
     660:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	48 ec       	ldi	r20, 0xC8	; 200
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	61 e0       	ldi	r22, 0x01	; 1
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	88 ee       	ldi	r24, 0xE8	; 232
		_timer[6].state = READY;				//_timer[6]
     670:	93 e0       	ldi	r25, 0x03	; 3

		UART_SendString("System Ready...\r\n");
     672:	84 d3       	rcall	.+1800   	; 0xd7c <TIMER_Create>
     674:	1e af       	std	Y+62, r17	; 0x3e
     676:	8f e9       	ldi	r24, 0x9F	; 159
     678:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     67a:	f9 d3       	rcall	.+2034   	; 0xe6e <UART_SendString>
     67c:	80 e8       	ldi	r24, 0x80	; 128
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	13 d0       	rcall	.+38     	; 0x6a8 <PWM>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     682:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     684:	ff cf       	rjmp	.-2      	; 0x684 <main+0xb0>

00000686 <__vector_default>:
	
	return 0;
}

ISR(BADISR_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     690:	8a ea       	ldi	r24, 0xAA	; 170
     692:	88 b9       	out	0x08, r24	; 8
     694:	fe cf       	rjmp	.-4      	; 0x692 <__vector_default+0xc>

00000696 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     696:	84 b5       	in	r24, 0x24	; 36
     698:	83 68       	ori	r24, 0x83	; 131
     69a:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     69c:	85 b5       	in	r24, 0x25	; 37
     69e:	83 60       	ori	r24, 0x03	; 3
     6a0:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	87 bd       	out	0x27, r24	; 39
     6a6:	08 95       	ret

000006a8 <PWM>:
}

void PWM(const int dutyCycle)
{
    //OCR0A = 90;
	OCR0A = 0x80;
     6a8:	20 e8       	ldi	r18, 0x80	; 128
     6aa:	27 bd       	out	0x27, r18	; 39
	if (dutyCycle) 
     6ac:	89 2b       	or	r24, r25
     6ae:	31 f0       	breq	.+12     	; 0x6bc <PWM+0x14>
	{
		gMotorOn = 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <gMotorOn>
		PORTB = ~0x0E;
     6b6:	81 ef       	ldi	r24, 0xF1	; 241
     6b8:	85 b9       	out	0x05, r24	; 5
     6ba:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     6bc:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <gMotorOn>
		PORTB = ~0x0F;
     6c0:	80 ef       	ldi	r24, 0xF0	; 240
     6c2:	85 b9       	out	0x05, r24	; 5
     6c4:	08 95       	ret

000006c6 <STEPPER_Init>:
//TODO; Write spin down


void STEPPER_Init()
{
	stepper._stepNum = 0;
     6c6:	e7 e4       	ldi	r30, 0x47	; 71
     6c8:	f3 e0       	ldi	r31, 0x03	; 3
     6ca:	10 82       	st	Z, r1
	stepper.direction = 1;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     6d0:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     6d2:	13 82       	std	Z+3, r1	; 0x03
	stepper._targetStep = 200;
     6d4:	88 ec       	ldi	r24, 0xC8	; 200
     6d6:	84 83       	std	Z+4, r24	; 0x04
	stepper._currentStep = 0;
     6d8:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
     6da:	16 82       	std	Z+6, r1	; 0x06
	stepper._delay = 0x14;
     6dc:	84 e1       	ldi	r24, 0x14	; 20
     6de:	87 83       	std	Z+7, r24	; 0x07
	PORTA = 0x30;
     6e0:	80 e3       	ldi	r24, 0x30	; 48
     6e2:	82 b9       	out	0x02, r24	; 2
	cli();
     6e4:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x90;
     6e6:	80 e9       	ldi	r24, 0x90	; 144
     6e8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     6ec:	e0 eb       	ldi	r30, 0xB0	; 176
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     6f6:	e0 e7       	ldi	r30, 0x70	; 112
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	82 60       	ori	r24, 0x02	; 2
     6fe:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     700:	e1 eb       	ldi	r30, 0xB1	; 177
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	87 60       	ori	r24, 0x07	; 7
     708:	80 83       	st	Z, r24
	
	sei();
     70a:	78 94       	sei
     70c:	08 95       	ret

0000070e <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	86 1b       	sub	r24, r22
     712:	91 09       	sbc	r25, r1
	if (steps >= 0)
     714:	52 f0       	brmi	.+20     	; 0x72a <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     716:	85 36       	cpi	r24, 0x65	; 101
     718:	91 05       	cpc	r25, r1
     71a:	8c f0       	brlt	.+34     	; 0x73e <STEPPER_NumSteps+0x30>
     71c:	24 e6       	ldi	r18, 0x64	; 100
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	a9 01       	movw	r20, r18
     722:	48 1b       	sub	r20, r24
     724:	59 0b       	sbc	r21, r25
     726:	ca 01       	movw	r24, r20
     728:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     72a:	8c 39       	cpi	r24, 0x9C	; 156
     72c:	5f ef       	ldi	r21, 0xFF	; 255
     72e:	95 07       	cpc	r25, r21
     730:	34 f0       	brlt	.+12     	; 0x73e <STEPPER_NumSteps+0x30>
     732:	2c e9       	ldi	r18, 0x9C	; 156
     734:	3f ef       	ldi	r19, 0xFF	; 255
     736:	a9 01       	movw	r20, r18
     738:	48 1b       	sub	r20, r24
     73a:	59 0b       	sbc	r21, r25
     73c:	ca 01       	movw	r24, r20
	}
	return steps;
}
     73e:	08 95       	ret

00000740 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     748:	c7 e4       	ldi	r28, 0x47	; 71
     74a:	d3 e0       	ldi	r29, 0x03	; 3
     74c:	0a 81       	ldd	r16, Y+2	; 0x02
     74e:	6b 81       	ldd	r22, Y+3	; 0x03
     750:	80 2f       	mov	r24, r16
     752:	dd df       	rcall	.-70     	; 0x70e <STEPPER_NumSteps>
     754:	18 2f       	mov	r17, r24
     756:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next pos
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     758:	60 2f       	mov	r22, r16
     75a:	8e 81       	ldd	r24, Y+6	; 0x06
     75c:	d8 df       	rcall	.-80     	; 0x70e <STEPPER_NumSteps>
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     75e:	24 e0       	ldi	r18, 0x04	; 4
     760:	29 83       	std	Y+1, r18	; 0x01
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     762:	9c 01       	movw	r18, r24
     764:	12 9f       	mul	r17, r18
     766:	c0 01       	movw	r24, r0
     768:	13 9f       	mul	r17, r19
     76a:	90 0d       	add	r25, r0
     76c:	11 24       	eor	r1, r1
     76e:	89 2f       	mov	r24, r25
     770:	80 95       	com	r24
     772:	88 1f       	adc	r24, r24
     774:	88 27       	eor	r24, r24
     776:	88 1f       	adc	r24, r24
     778:	88 87       	std	Y+8, r24	; 0x08

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
     77a:	1d 82       	std	Y+5, r1	; 0x05
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	08 95       	ret

00000786 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
	cli();
     78a:	f8 94       	cli
	//Use this to set the target positions
	stepper.target = target;
     78c:	c7 e4       	ldi	r28, 0x47	; 71
     78e:	d3 e0       	ldi	r29, 0x03	; 3
     790:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     792:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
     794:	d5 df       	rcall	.-86     	; 0x740 <STEPPER_Rotate>
	OCR2A = 0x07 * stepper._delay;
     796:	9f 81       	ldd	r25, Y+7	; 0x07
     798:	89 2f       	mov	r24, r25
     79a:	88 0f       	add	r24, r24
     79c:	88 0f       	add	r24, r24
     79e:	88 0f       	add	r24, r24
     7a0:	89 1b       	sub	r24, r25
     7a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     7a6:	78 94       	sei
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <__vector_13>:

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	0b b6       	in	r0, 0x3b	; 59
     7ba:	0f 92       	push	r0
     7bc:	2f 93       	push	r18
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <__vector_13+0x22>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <__vector_13+0x24>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
// 	PORTC ^= 0xFE;
// 	PORTC |= 0x01;  
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     7d6:	86 e3       	ldi	r24, 0x36	; 54
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	a0 e0       	ldi	r26, 0x00	; 0
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	9e e2       	ldi	r25, 0x2E	; 46
     7e0:	ad e2       	ldi	r26, 0x2D	; 45
     7e2:	b5 e3       	ldi	r27, 0x35	; 53
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	9a 83       	std	Y+2, r25	; 0x02
     7e8:	ab 83       	std	Y+3, r26	; 0x03
     7ea:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
     7ec:	e7 e4       	ldi	r30, 0x47	; 71
     7ee:	f3 e0       	ldi	r31, 0x03	; 3
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	84 81       	ldd	r24, Z+4	; 0x04
     7f4:	98 17       	cp	r25, r24
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <__vector_13+0x4c>
     7f8:	51 c0       	rjmp	.+162    	; 0x89c <__vector_13+0xee>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     7fa:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <stepper+0x1>
     7fe:	84 30       	cpi	r24, 0x04	; 4
     800:	51 f4       	brne	.+20     	; 0x816 <__vector_13+0x68>
     802:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <stepper>
     806:	e1 e0       	ldi	r30, 0x01	; 1
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	ec 0f       	add	r30, r28
     80c:	fd 1f       	adc	r31, r29
     80e:	e8 0f       	add	r30, r24
     810:	f1 1d       	adc	r31, r1
     812:	80 81       	ld	r24, Z
     814:	0d c0       	rjmp	.+26     	; 0x830 <__vector_13+0x82>
     816:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <stepper>
     81a:	e3 e0       	ldi	r30, 0x03	; 3
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e8 1b       	sub	r30, r24
     820:	f1 09       	sbc	r31, r1
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	8c 0f       	add	r24, r28
     828:	9d 1f       	adc	r25, r29
     82a:	e8 0f       	add	r30, r24
     82c:	f9 1f       	adc	r31, r25
     82e:	80 81       	ld	r24, Z
     830:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     832:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <stepper>
     836:	83 30       	cpi	r24, 0x03	; 3
     838:	11 f0       	breq	.+4      	; 0x83e <__vector_13+0x90>
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	01 c0       	rjmp	.+2      	; 0x840 <__vector_13+0x92>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	e7 e4       	ldi	r30, 0x47	; 71
     842:	f3 e0       	ldi	r31, 0x03	; 3
     844:	80 83       	st	Z, r24

		stepper._currentStep++;
     846:	85 81       	ldd	r24, Z+5	; 0x05
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	85 83       	std	Z+5, r24	; 0x05

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
     84c:	86 30       	cpi	r24, 0x06	; 6
     84e:	70 f0       	brcs	.+28     	; 0x86c <__vector_13+0xbe>
     850:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <stepper+0x7>
     854:	87 30       	cpi	r24, 0x07	; 7
     856:	50 f0       	brcs	.+20     	; 0x86c <__vector_13+0xbe>
			stepper._delay--;
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     85e:	98 2f       	mov	r25, r24
     860:	99 0f       	add	r25, r25
     862:	99 0f       	add	r25, r25
     864:	99 0f       	add	r25, r25
     866:	98 1b       	sub	r25, r24
     868:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
     86c:	e7 e4       	ldi	r30, 0x47	; 71
     86e:	f3 e0       	ldi	r31, 0x03	; 3
     870:	84 81       	ldd	r24, Z+4	; 0x04
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	25 81       	ldd	r18, Z+5	; 0x05
     876:	82 1b       	sub	r24, r18
     878:	91 09       	sbc	r25, r1
     87a:	06 97       	sbiw	r24, 0x06	; 6
     87c:	6c f5       	brge	.+90     	; 0x8d8 <__vector_13+0x12a>
     87e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <stepper+0x7>
     882:	83 31       	cpi	r24, 0x13	; 19
     884:	48 f5       	brcc	.+82     	; 0x8d8 <__vector_13+0x12a>
			stepper._delay++;
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     88c:	98 2f       	mov	r25, r24
     88e:	99 0f       	add	r25, r25
     890:	99 0f       	add	r25, r25
     892:	99 0f       	add	r25, r25
     894:	98 1b       	sub	r25, r24
     896:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     89a:	1e c0       	rjmp	.+60     	; 0x8d8 <__vector_13+0x12a>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
     89c:	98 13       	cpse	r25, r24
     89e:	1c c0       	rjmp	.+56     	; 0x8d8 <__vector_13+0x12a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     8a0:	e7 e4       	ldi	r30, 0x47	; 71
     8a2:	f3 e0       	ldi	r31, 0x03	; 3
     8a4:	82 81       	ldd	r24, Z+2	; 0x02
     8a6:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
     8a8:	80 85       	ldd	r24, Z+8	; 0x08
     8aa:	88 23       	and	r24, r24
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <__vector_13+0x106>
     8ae:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <stepper+0x7>
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__vector_13+0x108>
     8b4:	94 e1       	ldi	r25, 0x14	; 20
     8b6:	e7 e4       	ldi	r30, 0x47	; 71
     8b8:	f3 e0       	ldi	r31, 0x03	; 3
     8ba:	97 83       	std	Z+7, r25	; 0x07
		OCR2A = 0x07 * stepper._delay;
     8bc:	89 2f       	mov	r24, r25
     8be:	88 0f       	add	r24, r24
     8c0:	88 0f       	add	r24, r24
     8c2:	88 0f       	add	r24, r24
     8c4:	89 1b       	sub	r24, r25
     8c6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     8ca:	80 85       	ldd	r24, Z+8	; 0x08
     8cc:	88 23       	and	r24, r24
     8ce:	11 f0       	breq	.+4      	; 0x8d4 <__vector_13+0x126>
     8d0:	82 b1       	in	r24, 0x02	; 2
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__vector_13+0x128>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	82 b9       	out	0x02, r24	; 2
	}
	//PORTC &= 0xFE;
	//PORTC ^= 0xFF;
     8d8:	0f 90       	pop	r0
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <SYS_Init>:

#include "sys.h"
#include "timer.h"

void SYS_Init()
{
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	e2 97       	sbiw	r28, 0x32	; 50
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	de bf       	out	0x3e, r29	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	cd bf       	out	0x3d, r28	; 61
	// Initialize system
	
	cli();
     924:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
     926:	e1 e6       	ldi	r30, 0x61	; 97
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 e8       	ldi	r24, 0x80	; 128
     92c:	80 83       	st	Z, r24
	CLKPR = 0;
     92e:	10 82       	st	Z, r1
	
	UART_Init();
     930:	86 d2       	rcall	.+1292   	; 0xe3e <UART_Init>
	GPIO_Init();
     932:	45 de       	rcall	.-886    	; 0x5be <GPIO_Init>
	TIMER_Init();
     934:	07 d2       	rcall	.+1038   	; 0xd44 <TIMER_Init>
	PWM_Init();
     936:	af de       	rcall	.-674    	; 0x696 <PWM_Init>
     938:	ce db       	rcall	.-2148   	; 0xd6 <ADC_Init>
	ADC_Init();
     93a:	c5 de       	rcall	.-630    	; 0x6c6 <STEPPER_Init>
     93c:	8f ef       	ldi	r24, 0xFF	; 255
	STEPPER_Init();
     93e:	9f ef       	ldi	r25, 0xFF	; 255
     940:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <stepper_handle+0x1>
	
	stepper_handle = -1;
     944:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <stepper_handle>
     948:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <timer_handle+0x1>
     94c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <timer_handle>
	timer_handle = -1;
     950:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <delay_flag+0x1>
     954:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <delay_flag>
	delay_flag = -1;
     958:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <g_ADCCount+0x1>
     95c:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <g_ADCCount>
	
	g_ADCCount = 0;
     960:	84 e1       	ldi	r24, 0x14	; 20
     962:	ed ea       	ldi	r30, 0xAD	; 173
     964:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     966:	df 01       	movw	r26, r30
     968:	1d 92       	st	X+, r1
     96a:	8a 95       	dec	r24
     96c:	e9 f7       	brne	.-6      	; 0x968 <SYS_Init+0x68>
     96e:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <g_ADCFlag>
     972:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <HEAD+0x1>
	g_ADCFlag = 0;
     976:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <HEAD>
// 	extern list* STAGE2;
// 	extern list* TAIL;
//	extern list* FRONT;	
	itemNode* initNode = NULL;
	
	HEAD = NULL;
     97a:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <TAIL+0x1>
     97e:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <TAIL>
	TAIL = NULL;
     982:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <STAGE1+0x1>
     986:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <STAGE1>
	STAGE1 = NULL;
     98a:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <STAGE2+0x1>
     98e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <STAGE2>
	STAGE2 = NULL;
     992:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <FRONT+0x1>
     996:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <FRONT>
	FRONT = NULL;
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	44 e0       	ldi	r20, 0x04	; 4
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     99e:	6f ef       	ldi	r22, 0xFF	; 255
     9a0:	89 ee       	ldi	r24, 0xE9	; 233
     9a2:	9d ef       	ldi	r25, 0xFD	; 253
     9a4:	99 dd       	rcall	.-1230   	; 0x4d8 <LL_ItemInit>
     9a6:	b0 dd       	rcall	.-1184   	; 0x508 <LL_ItemListInit>
     9a8:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     9ac:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <HEAD>
     9b0:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <FRONT+0x1>
     9b4:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <FRONT>
	FRONT = HEAD;
     9b8:	1b ec       	ldi	r17, 0xCB	; 203
     9ba:	0f 2e       	mov	r0, r31
     9bc:	f9 eb       	ldi	r31, 0xB9	; 185
     9be:	ef 2e       	mov	r14, r31
     9c0:	fd ef       	ldi	r31, 0xFD	; 253
     9c2:	ff 2e       	mov	r15, r31
     9c4:	f0 2d       	mov	r31, r0
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	44 e0       	ldi	r20, 0x04	; 4
	for(int i = 47; i > 0; i--)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     9ca:	61 2f       	mov	r22, r17
     9cc:	c7 01       	movw	r24, r14
     9ce:	84 dd       	rcall	.-1272   	; 0x4d8 <LL_ItemInit>
     9d0:	bc 01       	movw	r22, r24
     9d2:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     9d6:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     9da:	aa dd       	rcall	.-1196   	; 0x530 <LL_AddBack>
     9dc:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <TAIL+0x1>
     9e0:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <TAIL>
     9e4:	bf ef       	ldi	r27, 0xFF	; 255
     9e6:	eb 1a       	sub	r14, r27
     9e8:	fb 0a       	sbc	r15, r27
     9ea:	1f 5f       	subi	r17, 0xFF	; 255
     9ec:	1a 3f       	cpi	r17, 0xFA	; 250
     9ee:	59 f7       	brne	.-42     	; 0x9c6 <SYS_Init+0xc6>
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;
	for(int i = 47; i > 0; i--)
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	45 e0       	ldi	r20, 0x05	; 5
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	
	initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     9f4:	6a ef       	ldi	r22, 0xFA	; 250
     9f6:	88 ee       	ldi	r24, 0xE8	; 232
     9f8:	9d ef       	ldi	r25, 0xFD	; 253
     9fa:	6e dd       	rcall	.-1316   	; 0x4d8 <LL_ItemInit>
     9fc:	bc 01       	movw	r22, r24
     9fe:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <HEAD>
	LL_AddBack(HEAD,initNode);
     a02:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <HEAD+0x1>
     a06:	94 dd       	rcall	.-1240   	; 0x530 <LL_AddBack>
     a08:	e0 90 ab 02 	lds	r14, 0x02AB	; 0x8002ab <TAIL>
     a0c:	f0 90 ac 02 	lds	r15, 0x02AC	; 0x8002ac <TAIL+0x1>
	
	//PORTC = LL_Size(HEAD);
	char temp[50];
	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
     a10:	f7 01       	movw	r30, r14
     a12:	b2 80       	ldd	r11, Z+2	; 0x02
     a14:	a3 80       	ldd	r10, Z+3	; 0x03
     a16:	d0 90 a7 02 	lds	r13, 0x02A7	; 0x8002a7 <FRONT>
     a1a:	c0 90 a8 02 	lds	r12, 0x02A8	; 0x8002a8 <FRONT+0x1>
     a1e:	10 91 a5 02 	lds	r17, 0x02A5	; 0x8002a5 <HEAD>
     a22:	00 91 a6 02 	lds	r16, 0x02A6	; 0x8002a6 <HEAD+0x1>
     a26:	81 2f       	mov	r24, r17
     a28:	90 2f       	mov	r25, r16
     a2a:	93 dd       	rcall	.-1242   	; 0x552 <LL_Size>
     a2c:	af 92       	push	r10
     a2e:	bf 92       	push	r11
     a30:	cf 92       	push	r12
     a32:	df 92       	push	r13
     a34:	ff 92       	push	r15
     a36:	ef 92       	push	r14
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	1f 92       	push	r1
     a3e:	8f 93       	push	r24
     a40:	81 eb       	ldi	r24, 0xB1	; 177
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	8e 01       	movw	r16, r28
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	1f 93       	push	r17
     a50:	0f 93       	push	r16
     a52:	5e d3       	rcall	.+1724   	; 0x1110 <sprintf>
     a54:	c8 01       	movw	r24, r16
     a56:	0b d2       	rcall	.+1046   	; 0xe6e <UART_SendString>
	UART_SendString(temp);
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
	//sei();

}
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	e2 96       	adiw	r28, 0x32	; 50
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de bf       	out	0x3e, r29	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd bf       	out	0x3d, r28	; 61
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	08 95       	ret

00000a84 <SYS_Pause>:
     a84:	3f 92       	push	r3
     a86:	4f 92       	push	r4
     a88:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     a8a:	6f 92       	push	r6
     a8c:	7f 92       	push	r7
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	c4 56       	subi	r28, 0x64	; 100
     aac:	d1 09       	sbc	r29, r1
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	98 2e       	mov	r9, r24
     aba:	89 2e       	mov	r8, r25
	cli();
     abc:	f8 94       	cli
	PWM(0);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	f2 dd       	rcall	.-1052   	; 0x6a8 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     ac4:	00 91 a7 02 	lds	r16, 0x02A7	; 0x8002a7 <FRONT>
     ac8:	10 91 a8 02 	lds	r17, 0x02A8	; 0x8002a8 <FRONT+0x1>
	int c = 0;
     acc:	e1 2c       	mov	r14, r1
     ace:	f1 2c       	mov	r15, r1
	
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fe ed       	ldi	r31, 0xDE	; 222
     ad4:	af 2e       	mov	r10, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	bf 2e       	mov	r11, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	6e 01       	movw	r12, r28
     ade:	83 e3       	ldi	r24, 0x33	; 51
     ae0:	c8 0e       	add	r12, r24
     ae2:	d1 1c       	adc	r13, r1
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     ae4:	27 c0       	rjmp	.+78     	; 0xb34 <SYS_Pause+0xb0>
	{
		char listbuff[50];
		c++;
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	e9 1a       	sub	r14, r25
     aea:	f9 0a       	sbc	r15, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     aec:	c8 01       	movw	r24, r16
     aee:	62 dd       	rcall	.-1340   	; 0x5b4 <LL_GetStatus>
     af0:	58 2e       	mov	r5, r24
     af2:	c8 01       	movw	r24, r16
     af4:	3f dd       	rcall	.-1410   	; 0x574 <LL_GetClass>
     af6:	68 2e       	mov	r6, r24
     af8:	c8 01       	movw	r24, r16
     afa:	47 dd       	rcall	.-1394   	; 0x58a <LL_GetMag>
     afc:	78 2e       	mov	r7, r24
     afe:	c8 01       	movw	r24, r16
     b00:	3e dd       	rcall	.-1412   	; 0x57e <LL_GetRefl>
     b02:	1f 92       	push	r1
     b04:	5f 92       	push	r5
     b06:	1f 92       	push	r1
     b08:	6f 92       	push	r6
     b0a:	1f 92       	push	r1
     b0c:	7f 92       	push	r7
     b0e:	9f 93       	push	r25
     b10:	8f 93       	push	r24
     b12:	ff 92       	push	r15
     b14:	ef 92       	push	r14
     b16:	bf 92       	push	r11
     b18:	af 92       	push	r10
     b1a:	df 92       	push	r13
     b1c:	cf 92       	push	r12
     b1e:	f8 d2       	rcall	.+1520   	; 0x1110 <sprintf>
		UART_SendString(listbuff);
     b20:	c6 01       	movw	r24, r12
     b22:	a5 d1       	rcall	.+842    	; 0xe6e <UART_SendString>
     b24:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     b26:	00 dd       	rcall	.-1536   	; 0x528 <LL_Next>
     b28:	8c 01       	movw	r16, r24
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	c8 01       	movw	r24, r16
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     b36:	1e dd       	rcall	.-1476   	; 0x574 <LL_GetClass>
     b38:	85 30       	cpi	r24, 0x05	; 5
     b3a:	a9 f6       	brne	.-86     	; 0xae6 <SYS_Pause+0x62>
     b3c:	0f 2e       	mov	r0, r31
     b3e:	f4 ef       	ldi	r31, 0xF4	; 244
     b40:	cf 2e       	mov	r12, r31
     b42:	f2 e0       	ldi	r31, 0x02	; 2
     b44:	df 2e       	mov	r13, r31
     b46:	f0 2d       	mov	r31, r0
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	0f 2e       	mov	r0, r31
     b4e:	f2 e1       	ldi	r31, 0x12	; 18
	}
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     b50:	af 2e       	mov	r10, r31
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	bf 2e       	mov	r11, r31
     b56:	f0 2d       	mov	r31, r0
     b58:	7e 01       	movw	r14, r28
     b5a:	f3 e3       	ldi	r31, 0x33	; 51
     b5c:	ef 0e       	add	r14, r31
     b5e:	f1 1c       	adc	r15, r1
     b60:	f6 01       	movw	r30, r12
     b62:	80 85       	ldd	r24, Z+8	; 0x08
     b64:	1f 92       	push	r1
     b66:	8f 93       	push	r24
     b68:	1f 93       	push	r17
     b6a:	0f 93       	push	r16
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	bf 92       	push	r11
     b72:	af 92       	push	r10
     b74:	ff 92       	push	r15
     b76:	ef 92       	push	r14
     b78:	cb d2       	rcall	.+1430   	; 0x1110 <sprintf>
     b7a:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     b7c:	78 d1       	rcall	.+752    	; 0xe6e <UART_SendString>
     b7e:	0f 5f       	subi	r16, 0xFF	; 255
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	for(int i = 0; i < 7; i++)
     b82:	f9 e0       	ldi	r31, 0x09	; 9
     b84:	cf 0e       	add	r12, r31
     b86:	d1 1c       	adc	r13, r1
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	07 30       	cpi	r16, 0x07	; 7
     b94:	11 05       	cpc	r17, r1
     b96:	21 f7       	brne	.-56     	; 0xb60 <SYS_Pause+0xdc>
     b98:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <STAGE2>
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
		UART_SendString(statebuff);
	}
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     b9c:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <STAGE2+0x1>
     ba0:	ee dc       	rcall	.-1572   	; 0x57e <LL_GetRefl>
     ba2:	48 2e       	mov	r4, r24
     ba4:	39 2e       	mov	r3, r25
     ba6:	60 90 3c 03 	lds	r6, 0x033C	; 0x80033c <STAGE2>
     baa:	50 90 3d 03 	lds	r5, 0x033D	; 0x80033d <STAGE2+0x1>
     bae:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <STAGE1>
     bb2:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     bb6:	e9 dc       	rcall	.-1582   	; 0x58a <LL_GetMag>
     bb8:	78 2e       	mov	r7, r24
     bba:	90 90 f2 02 	lds	r9, 0x02F2	; 0x8002f2 <STAGE1>
     bbe:	80 90 f3 02 	lds	r8, 0x02F3	; 0x8002f3 <STAGE1+0x1>
     bc2:	00 91 ab 02 	lds	r16, 0x02AB	; 0x8002ab <TAIL>
     bc6:	10 91 ac 02 	lds	r17, 0x02AC	; 0x8002ac <TAIL+0x1>
     bca:	f8 01       	movw	r30, r16
     bcc:	b2 80       	ldd	r11, Z+2	; 0x02
     bce:	a3 80       	ldd	r10, Z+3	; 0x03
     bd0:	d0 90 a7 02 	lds	r13, 0x02A7	; 0x8002a7 <FRONT>
     bd4:	c0 90 a8 02 	lds	r12, 0x02A8	; 0x8002a8 <FRONT+0x1>
     bd8:	f0 90 a5 02 	lds	r15, 0x02A5	; 0x8002a5 <HEAD>
     bdc:	e0 90 a6 02 	lds	r14, 0x02A6	; 0x8002a6 <HEAD+0x1>
     be0:	8f 2d       	mov	r24, r15
     be2:	9e 2d       	mov	r25, r14
     be4:	b6 dc       	rcall	.-1684   	; 0x552 <LL_Size>
     be6:	3f 92       	push	r3
     be8:	4f 92       	push	r4
     bea:	5f 92       	push	r5
     bec:	6f 92       	push	r6
     bee:	1f 92       	push	r1
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	1f 93       	push	r17
     c00:	0f 93       	push	r16
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	1f 92       	push	r1
     c08:	8f 93       	push	r24
     c0a:	81 e3       	ldi	r24, 0x31	; 49
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	9f 93       	push	r25
     c10:	8f 93       	push	r24
     c12:	8e 01       	movw	r16, r28
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	1f 93       	push	r17
     c1a:	0f 93       	push	r16
     c1c:	79 d2       	rcall	.+1266   	; 0x1110 <sprintf>
     c1e:	c8 01       	movw	r24, r16
	UART_SendString(anotherbuff);
     c20:	26 d1       	rcall	.+588    	; 0xe6e <UART_SendString>
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     c2e:	83 70       	andi	r24, 0x03	; 3
     c30:	e9 f7       	brne	.-6      	; 0xc2c <SYS_Pause+0x1a8>
     c32:	8c e8       	ldi	r24, 0x8C	; 140
		{
			UART_SendString("Starting System!\r\n");
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	1b d1       	rcall	.+566    	; 0xe6e <UART_SendString>
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     c3c:	35 dd       	rcall	.-1430   	; 0x6a8 <PWM>
     c3e:	78 94       	sei
     c40:	cc 59       	subi	r28, 0x9C	; 156
     c42:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     c44:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	5f 90       	pop	r5
     c6c:	4f 90       	pop	r4
     c6e:	3f 90       	pop	r3
     c70:	08 95       	ret

00000c72 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	0b b6       	in	r0, 0x3b	; 59
     c7e:	0f 92       	push	r0
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     ca4:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_timer_tick>
     ca8:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_timer_tick+0x1>
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <_timer_tick+0x1>
     cb2:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_timer_tick>
     cb6:	c4 ef       	ldi	r28, 0xF4	; 244
     cb8:	d2 e0       	ldi	r29, 0x02	; 2
     cba:	0f 2e       	mov	r0, r31
     cbc:	fc e3       	ldi	r31, 0x3C	; 60
     cbe:	ef 2e       	mov	r14, r31
     cc0:	f3 e0       	ldi	r31, 0x03	; 3
     cc2:	ff 2e       	mov	r15, r31
     cc4:	f0 2d       	mov	r31, r0
     cc6:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     cc8:	ec 81       	ldd	r30, Y+4	; 0x04
     cca:	fd 81       	ldd	r31, Y+5	; 0x05
     ccc:	30 97       	sbiw	r30, 0x00	; 0
     cce:	e9 f0       	breq	.+58     	; 0xd0a <__vector_17+0x98>
     cd0:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_timer_tick>
     cd4:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <_timer_tick+0x1>
     cd8:	28 81       	ld	r18, Y
     cda:	39 81       	ldd	r19, Y+1	; 0x01
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	a1 f4       	brne	.+40     	; 0xd0a <__vector_17+0x98>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     ce2:	88 85       	ldd	r24, Y+8	; 0x08
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	19 f4       	brne	.+6      	; 0xcee <__vector_17+0x7c>
     ce8:	8e 81       	ldd	r24, Y+6	; 0x06
     cea:	9f 81       	ldd	r25, Y+7	; 0x07
     cec:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     cee:	d8 01       	movw	r26, r16
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	8d 91       	ld	r24, X+
     cf4:	9c 91       	ld	r25, X
     cf6:	13 97       	sbiw	r26, 0x03	; 3
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	39 f0       	breq	.+14     	; 0xd0a <__vector_17+0x98>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     cfc:	2d 91       	ld	r18, X+
     cfe:	3c 91       	ld	r19, X
     d00:	11 97       	sbiw	r26, 0x01	; 1
     d02:	82 0f       	add	r24, r18
     d04:	93 1f       	adc	r25, r19
     d06:	8d 93       	st	X+, r24
     d08:	9c 93       	st	X, r25
     d0a:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     d0c:	ce 15       	cp	r28, r14
     d0e:	df 05       	cpc	r29, r15
     d10:	d1 f6       	brne	.-76     	; 0xcc6 <__vector_17+0x54>
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	//PORTC ^= 0xFE;
}
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     d44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d48:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     d4c:	80 ee       	ldi	r24, 0xE0	; 224
     d4e:	9d e0       	ldi	r25, 0x0D	; 13
     d50:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d54:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     d58:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     d5c:	89 e0       	ldi	r24, 0x09	; 9
     d5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     d68:	88 e4       	ldi	r24, 0x48	; 72
     d6a:	e4 ef       	ldi	r30, 0xF4	; 244
     d6c:	f2 e0       	ldi	r31, 0x02	; 2
     d6e:	df 01       	movw	r26, r30
     d70:	1d 92       	st	X+, r1
     d72:	8a 95       	dec	r24
     d74:	e9 f7       	brne	.-6      	; 0xd70 <TIMER_Init+0x2c>

	return 0;
}
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	08 95       	ret

00000d7c <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     d86:	60 91 f8 02 	lds	r22, 0x02F8	; 0x8002f8 <_timer+0x4>
     d8a:	70 91 f9 02 	lds	r23, 0x02F9	; 0x8002f9 <_timer+0x5>
     d8e:	67 2b       	or	r22, r23
     d90:	09 f4       	brne	.+2      	; 0xd94 <TIMER_Create+0x18>
     d92:	49 c0       	rjmp	.+146    	; 0xe26 <TIMER_Create+0xaa>
     d94:	e4 ef       	ldi	r30, 0xF4	; 244
     d96:	f2 e0       	ldi	r31, 0x02	; 2
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     d98:	a1 e0       	ldi	r26, 0x01	; 1
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     d9c:	c5 85       	ldd	r28, Z+13	; 0x0d
     d9e:	d6 85       	ldd	r29, Z+14	; 0x0e
     da0:	cd 2b       	or	r28, r29
     da2:	09 f4       	brne	.+2      	; 0xda6 <TIMER_Create+0x2a>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     da6:	11 96       	adiw	r26, 0x01	; 1
     da8:	39 96       	adiw	r30, 0x09	; 9
     daa:	a8 30       	cpi	r26, 0x08	; 8
     dac:	b1 05       	cpc	r27, r1
     dae:	b1 f7       	brne	.-20     	; 0xd9c <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	3f c0       	rjmp	.+126    	; 0xe34 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     db6:	fd 01       	movw	r30, r26
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	ea 0f       	add	r30, r26
     dc6:	fb 1f       	adc	r31, r27
     dc8:	ec 50       	subi	r30, 0x0C	; 12
     dca:	fd 4f       	sbci	r31, 0xFD	; 253
     dcc:	93 83       	std	Z+3, r25	; 0x03
     dce:	82 83       	std	Z+2, r24	; 0x02
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     dd2:	fd 01       	movw	r30, r26
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	ea 0f       	add	r30, r26
     de2:	fb 1f       	adc	r31, r27
     de4:	ec 50       	subi	r30, 0x0C	; 12
     de6:	fd 4f       	sbci	r31, 0xFD	; 253
     de8:	13 82       	std	Z+3, r1	; 0x03
     dea:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     dec:	fd 01       	movw	r30, r26
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	ea 0f       	add	r30, r26
     dfc:	fb 1f       	adc	r31, r27
     dfe:	ec 50       	subi	r30, 0x0C	; 12
     e00:	fd 4f       	sbci	r31, 0xFD	; 253
     e02:	55 83       	std	Z+5, r21	; 0x05
     e04:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     e06:	37 83       	std	Z+7, r19	; 0x07
     e08:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     e0a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <_timer_tick>
     e0e:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <_timer_tick+0x1>
     e12:	82 0f       	add	r24, r18
     e14:	93 1f       	adc	r25, r19
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
			_timer[i].state = READY;
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e1e:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     e20:	8a 2f       	mov	r24, r26
     e22:	9b 2f       	mov	r25, r27
     e24:	07 c0       	rjmp	.+14     	; 0xe34 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     e2a:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e2c:	f8 94       	cli
		{
			
			if (periodic != 0) 
     e2e:	01 2b       	or	r16, r17
     e30:	11 f6       	brne	.-124    	; 0xdb6 <TIMER_Create+0x3a>
     e32:	cf cf       	rjmp	.-98     	; 0xdd2 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     e3e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     e42:	83 e3       	ldi	r24, 0x33	; 51
     e44:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     e48:	e9 ec       	ldi	r30, 0xC9	; 201
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	88 61       	ori	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     e52:	ea ec       	ldi	r30, 0xCA	; 202
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	86 60       	ori	r24, 0x06	; 6
     e5a:	80 83       	st	Z, r24
     e5c:	08 95       	ret

00000e5e <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     e5e:	e8 ec       	ldi	r30, 0xC8	; 200
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	90 81       	ld	r25, Z
     e64:	95 ff       	sbrs	r25, 5
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <UART_SendChar+0x4>
	UDR1 = c;
     e68:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     e6c:	08 95       	ret

00000e6e <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     e74:	88 81       	ld	r24, Y
     e76:	88 23       	and	r24, r24
     e78:	29 f0       	breq	.+10     	; 0xe84 <UART_SendString+0x16>
     e7a:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
     e7c:	f0 df       	rcall	.-32     	; 0xe5e <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     e7e:	89 91       	ld	r24, Y+
     e80:	81 11       	cpse	r24, r1
     e82:	fc cf       	rjmp	.-8      	; 0xe7c <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <__udivmodsi4>:
     e8a:	a1 e2       	ldi	r26, 0x21	; 33
     e8c:	1a 2e       	mov	r1, r26
     e8e:	aa 1b       	sub	r26, r26
     e90:	bb 1b       	sub	r27, r27
     e92:	fd 01       	movw	r30, r26
     e94:	0d c0       	rjmp	.+26     	; 0xeb0 <__udivmodsi4_ep>

00000e96 <__udivmodsi4_loop>:
     e96:	aa 1f       	adc	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	ee 1f       	adc	r30, r30
     e9c:	ff 1f       	adc	r31, r31
     e9e:	a2 17       	cp	r26, r18
     ea0:	b3 07       	cpc	r27, r19
     ea2:	e4 07       	cpc	r30, r20
     ea4:	f5 07       	cpc	r31, r21
     ea6:	20 f0       	brcs	.+8      	; 0xeb0 <__udivmodsi4_ep>
     ea8:	a2 1b       	sub	r26, r18
     eaa:	b3 0b       	sbc	r27, r19
     eac:	e4 0b       	sbc	r30, r20
     eae:	f5 0b       	sbc	r31, r21

00000eb0 <__udivmodsi4_ep>:
     eb0:	66 1f       	adc	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	1a 94       	dec	r1
     eba:	69 f7       	brne	.-38     	; 0xe96 <__udivmodsi4_loop>
     ebc:	60 95       	com	r22
     ebe:	70 95       	com	r23
     ec0:	80 95       	com	r24
     ec2:	90 95       	com	r25
     ec4:	9b 01       	movw	r18, r22
     ec6:	ac 01       	movw	r20, r24
     ec8:	bd 01       	movw	r22, r26
     eca:	cf 01       	movw	r24, r30
     ecc:	08 95       	ret

00000ece <malloc>:
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	91 05       	cpc	r25, r1
     eda:	10 f4       	brcc	.+4      	; 0xee0 <malloc+0x12>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	e0 91 52 03 	lds	r30, 0x0352	; 0x800352 <__flp>
     ee4:	f0 91 53 03 	lds	r31, 0x0353	; 0x800353 <__flp+0x1>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	30 97       	sbiw	r30, 0x00	; 0
     ef2:	19 f1       	breq	.+70     	; 0xf3a <malloc+0x6c>
     ef4:	40 81       	ld	r20, Z
     ef6:	51 81       	ldd	r21, Z+1	; 0x01
     ef8:	02 81       	ldd	r16, Z+2	; 0x02
     efa:	13 81       	ldd	r17, Z+3	; 0x03
     efc:	48 17       	cp	r20, r24
     efe:	59 07       	cpc	r21, r25
     f00:	c8 f0       	brcs	.+50     	; 0xf34 <malloc+0x66>
     f02:	84 17       	cp	r24, r20
     f04:	95 07       	cpc	r25, r21
     f06:	69 f4       	brne	.+26     	; 0xf22 <malloc+0x54>
     f08:	10 97       	sbiw	r26, 0x00	; 0
     f0a:	31 f0       	breq	.+12     	; 0xf18 <malloc+0x4a>
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	0c 93       	st	X, r16
     f10:	12 97       	sbiw	r26, 0x02	; 2
     f12:	13 96       	adiw	r26, 0x03	; 3
     f14:	1c 93       	st	X, r17
     f16:	27 c0       	rjmp	.+78     	; 0xf66 <malloc+0x98>
     f18:	00 93 52 03 	sts	0x0352, r16	; 0x800352 <__flp>
     f1c:	10 93 53 03 	sts	0x0353, r17	; 0x800353 <__flp+0x1>
     f20:	22 c0       	rjmp	.+68     	; 0xf66 <malloc+0x98>
     f22:	21 15       	cp	r18, r1
     f24:	31 05       	cpc	r19, r1
     f26:	19 f0       	breq	.+6      	; 0xf2e <malloc+0x60>
     f28:	42 17       	cp	r20, r18
     f2a:	53 07       	cpc	r21, r19
     f2c:	18 f4       	brcc	.+6      	; 0xf34 <malloc+0x66>
     f2e:	9a 01       	movw	r18, r20
     f30:	bd 01       	movw	r22, r26
     f32:	ef 01       	movw	r28, r30
     f34:	df 01       	movw	r26, r30
     f36:	f8 01       	movw	r30, r16
     f38:	db cf       	rjmp	.-74     	; 0xef0 <malloc+0x22>
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	f9 f0       	breq	.+62     	; 0xf7e <malloc+0xb0>
     f40:	28 1b       	sub	r18, r24
     f42:	39 0b       	sbc	r19, r25
     f44:	24 30       	cpi	r18, 0x04	; 4
     f46:	31 05       	cpc	r19, r1
     f48:	80 f4       	brcc	.+32     	; 0xf6a <malloc+0x9c>
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	9b 81       	ldd	r25, Y+3	; 0x03
     f4e:	61 15       	cp	r22, r1
     f50:	71 05       	cpc	r23, r1
     f52:	21 f0       	breq	.+8      	; 0xf5c <malloc+0x8e>
     f54:	fb 01       	movw	r30, r22
     f56:	93 83       	std	Z+3, r25	; 0x03
     f58:	82 83       	std	Z+2, r24	; 0x02
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <malloc+0x96>
     f5c:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <__flp+0x1>
     f60:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <__flp>
     f64:	fe 01       	movw	r30, r28
     f66:	32 96       	adiw	r30, 0x02	; 2
     f68:	44 c0       	rjmp	.+136    	; 0xff2 <malloc+0x124>
     f6a:	fe 01       	movw	r30, r28
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	81 93       	st	Z+, r24
     f72:	91 93       	st	Z+, r25
     f74:	22 50       	subi	r18, 0x02	; 2
     f76:	31 09       	sbc	r19, r1
     f78:	39 83       	std	Y+1, r19	; 0x01
     f7a:	28 83       	st	Y, r18
     f7c:	3a c0       	rjmp	.+116    	; 0xff2 <malloc+0x124>
     f7e:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
     f82:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
     f86:	23 2b       	or	r18, r19
     f88:	41 f4       	brne	.+16     	; 0xf9a <malloc+0xcc>
     f8a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f8e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f92:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <__brkval+0x1>
     f96:	20 93 50 03 	sts	0x0350, r18	; 0x800350 <__brkval>
     f9a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f9e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     fa2:	21 15       	cp	r18, r1
     fa4:	31 05       	cpc	r19, r1
     fa6:	41 f4       	brne	.+16     	; 0xfb8 <malloc+0xea>
     fa8:	2d b7       	in	r18, 0x3d	; 61
     faa:	3e b7       	in	r19, 0x3e	; 62
     fac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     fb0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     fb4:	24 1b       	sub	r18, r20
     fb6:	35 0b       	sbc	r19, r21
     fb8:	e0 91 50 03 	lds	r30, 0x0350	; 0x800350 <__brkval>
     fbc:	f0 91 51 03 	lds	r31, 0x0351	; 0x800351 <__brkval+0x1>
     fc0:	e2 17       	cp	r30, r18
     fc2:	f3 07       	cpc	r31, r19
     fc4:	a0 f4       	brcc	.+40     	; 0xfee <malloc+0x120>
     fc6:	2e 1b       	sub	r18, r30
     fc8:	3f 0b       	sbc	r19, r31
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	78 f0       	brcs	.+30     	; 0xfee <malloc+0x120>
     fd0:	ac 01       	movw	r20, r24
     fd2:	4e 5f       	subi	r20, 0xFE	; 254
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	24 17       	cp	r18, r20
     fd8:	35 07       	cpc	r19, r21
     fda:	48 f0       	brcs	.+18     	; 0xfee <malloc+0x120>
     fdc:	4e 0f       	add	r20, r30
     fde:	5f 1f       	adc	r21, r31
     fe0:	50 93 51 03 	sts	0x0351, r21	; 0x800351 <__brkval+0x1>
     fe4:	40 93 50 03 	sts	0x0350, r20	; 0x800350 <__brkval>
     fe8:	81 93       	st	Z+, r24
     fea:	91 93       	st	Z+, r25
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <malloc+0x124>
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	cf 01       	movw	r24, r30
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <free>:
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	09 f4       	brne	.+2      	; 0x1008 <free+0xa>
    1006:	81 c0       	rjmp	.+258    	; 0x110a <free+0x10c>
    1008:	fc 01       	movw	r30, r24
    100a:	32 97       	sbiw	r30, 0x02	; 2
    100c:	13 82       	std	Z+3, r1	; 0x03
    100e:	12 82       	std	Z+2, r1	; 0x02
    1010:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <__flp>
    1014:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <__flp+0x1>
    1018:	10 97       	sbiw	r26, 0x00	; 0
    101a:	81 f4       	brne	.+32     	; 0x103c <free+0x3e>
    101c:	20 81       	ld	r18, Z
    101e:	31 81       	ldd	r19, Z+1	; 0x01
    1020:	82 0f       	add	r24, r18
    1022:	93 1f       	adc	r25, r19
    1024:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
    1028:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
    102c:	28 17       	cp	r18, r24
    102e:	39 07       	cpc	r19, r25
    1030:	51 f5       	brne	.+84     	; 0x1086 <free+0x88>
    1032:	f0 93 51 03 	sts	0x0351, r31	; 0x800351 <__brkval+0x1>
    1036:	e0 93 50 03 	sts	0x0350, r30	; 0x800350 <__brkval>
    103a:	67 c0       	rjmp	.+206    	; 0x110a <free+0x10c>
    103c:	ed 01       	movw	r28, r26
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	ce 17       	cp	r28, r30
    1044:	df 07       	cpc	r29, r31
    1046:	40 f4       	brcc	.+16     	; 0x1058 <free+0x5a>
    1048:	4a 81       	ldd	r20, Y+2	; 0x02
    104a:	5b 81       	ldd	r21, Y+3	; 0x03
    104c:	9e 01       	movw	r18, r28
    104e:	41 15       	cp	r20, r1
    1050:	51 05       	cpc	r21, r1
    1052:	f1 f0       	breq	.+60     	; 0x1090 <free+0x92>
    1054:	ea 01       	movw	r28, r20
    1056:	f5 cf       	rjmp	.-22     	; 0x1042 <free+0x44>
    1058:	d3 83       	std	Z+3, r29	; 0x03
    105a:	c2 83       	std	Z+2, r28	; 0x02
    105c:	40 81       	ld	r20, Z
    105e:	51 81       	ldd	r21, Z+1	; 0x01
    1060:	84 0f       	add	r24, r20
    1062:	95 1f       	adc	r25, r21
    1064:	c8 17       	cp	r28, r24
    1066:	d9 07       	cpc	r29, r25
    1068:	59 f4       	brne	.+22     	; 0x1080 <free+0x82>
    106a:	88 81       	ld	r24, Y
    106c:	99 81       	ldd	r25, Y+1	; 0x01
    106e:	84 0f       	add	r24, r20
    1070:	95 1f       	adc	r25, r21
    1072:	02 96       	adiw	r24, 0x02	; 2
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	93 83       	std	Z+3, r25	; 0x03
    107e:	82 83       	std	Z+2, r24	; 0x02
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	29 f4       	brne	.+10     	; 0x1090 <free+0x92>
    1086:	f0 93 53 03 	sts	0x0353, r31	; 0x800353 <__flp+0x1>
    108a:	e0 93 52 03 	sts	0x0352, r30	; 0x800352 <__flp>
    108e:	3d c0       	rjmp	.+122    	; 0x110a <free+0x10c>
    1090:	e9 01       	movw	r28, r18
    1092:	fb 83       	std	Y+3, r31	; 0x03
    1094:	ea 83       	std	Y+2, r30	; 0x02
    1096:	49 91       	ld	r20, Y+
    1098:	59 91       	ld	r21, Y+
    109a:	c4 0f       	add	r28, r20
    109c:	d5 1f       	adc	r29, r21
    109e:	ec 17       	cp	r30, r28
    10a0:	fd 07       	cpc	r31, r29
    10a2:	61 f4       	brne	.+24     	; 0x10bc <free+0xbe>
    10a4:	80 81       	ld	r24, Z
    10a6:	91 81       	ldd	r25, Z+1	; 0x01
    10a8:	84 0f       	add	r24, r20
    10aa:	95 1f       	adc	r25, r21
    10ac:	02 96       	adiw	r24, 0x02	; 2
    10ae:	e9 01       	movw	r28, r18
    10b0:	99 83       	std	Y+1, r25	; 0x01
    10b2:	88 83       	st	Y, r24
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	e0 e0       	ldi	r30, 0x00	; 0
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	12 96       	adiw	r26, 0x02	; 2
    10c2:	8d 91       	ld	r24, X+
    10c4:	9c 91       	ld	r25, X
    10c6:	13 97       	sbiw	r26, 0x03	; 3
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <free+0xd4>
    10cc:	fd 01       	movw	r30, r26
    10ce:	dc 01       	movw	r26, r24
    10d0:	f7 cf       	rjmp	.-18     	; 0x10c0 <free+0xc2>
    10d2:	8d 91       	ld	r24, X+
    10d4:	9c 91       	ld	r25, X
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	9d 01       	movw	r18, r26
    10da:	2e 5f       	subi	r18, 0xFE	; 254
    10dc:	3f 4f       	sbci	r19, 0xFF	; 255
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	20 91 50 03 	lds	r18, 0x0350	; 0x800350 <__brkval>
    10e6:	30 91 51 03 	lds	r19, 0x0351	; 0x800351 <__brkval+0x1>
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	69 f4       	brne	.+26     	; 0x110a <free+0x10c>
    10f0:	30 97       	sbiw	r30, 0x00	; 0
    10f2:	29 f4       	brne	.+10     	; 0x10fe <free+0x100>
    10f4:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <__flp+0x1>
    10f8:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <__flp>
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <free+0x104>
    10fe:	13 82       	std	Z+3, r1	; 0x03
    1100:	12 82       	std	Z+2, r1	; 0x02
    1102:	b0 93 51 03 	sts	0x0351, r27	; 0x800351 <__brkval+0x1>
    1106:	a0 93 50 03 	sts	0x0350, r26	; 0x800350 <__brkval>
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <sprintf>:
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	2e 97       	sbiw	r28, 0x0e	; 14
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	0d 89       	ldd	r16, Y+21	; 0x15
    112a:	1e 89       	ldd	r17, Y+22	; 0x16
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	8c 83       	std	Y+4, r24	; 0x04
    1130:	1a 83       	std	Y+2, r17	; 0x02
    1132:	09 83       	std	Y+1, r16	; 0x01
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	9f e7       	ldi	r25, 0x7F	; 127
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	ae 01       	movw	r20, r28
    113e:	47 5e       	subi	r20, 0xE7	; 231
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	6f 89       	ldd	r22, Y+23	; 0x17
    1144:	78 8d       	ldd	r23, Y+24	; 0x18
    1146:	ce 01       	movw	r24, r28
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	10 d0       	rcall	.+32     	; 0x116c <vfprintf>
    114c:	ef 81       	ldd	r30, Y+7	; 0x07
    114e:	f8 85       	ldd	r31, Y+8	; 0x08
    1150:	e0 0f       	add	r30, r16
    1152:	f1 1f       	adc	r31, r17
    1154:	10 82       	st	Z, r1
    1156:	2e 96       	adiw	r28, 0x0e	; 14
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

0000116c <vfprintf>:
    116c:	2f 92       	push	r2
    116e:	3f 92       	push	r3
    1170:	4f 92       	push	r4
    1172:	5f 92       	push	r5
    1174:	6f 92       	push	r6
    1176:	7f 92       	push	r7
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	2b 97       	sbiw	r28, 0x0b	; 11
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	6c 01       	movw	r12, r24
    11a2:	7b 01       	movw	r14, r22
    11a4:	8a 01       	movw	r16, r20
    11a6:	fc 01       	movw	r30, r24
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	16 82       	std	Z+6, r1	; 0x06
    11ac:	83 81       	ldd	r24, Z+3	; 0x03
    11ae:	81 ff       	sbrs	r24, 1
    11b0:	bf c1       	rjmp	.+894    	; 0x1530 <vfprintf+0x3c4>
    11b2:	ce 01       	movw	r24, r28
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	3c 01       	movw	r6, r24
    11b8:	f6 01       	movw	r30, r12
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	f7 01       	movw	r30, r14
    11be:	93 fd       	sbrc	r25, 3
    11c0:	85 91       	lpm	r24, Z+
    11c2:	93 ff       	sbrs	r25, 3
    11c4:	81 91       	ld	r24, Z+
    11c6:	7f 01       	movw	r14, r30
    11c8:	88 23       	and	r24, r24
    11ca:	09 f4       	brne	.+2      	; 0x11ce <vfprintf+0x62>
    11cc:	ad c1       	rjmp	.+858    	; 0x1528 <vfprintf+0x3bc>
    11ce:	85 32       	cpi	r24, 0x25	; 37
    11d0:	39 f4       	brne	.+14     	; 0x11e0 <vfprintf+0x74>
    11d2:	93 fd       	sbrc	r25, 3
    11d4:	85 91       	lpm	r24, Z+
    11d6:	93 ff       	sbrs	r25, 3
    11d8:	81 91       	ld	r24, Z+
    11da:	7f 01       	movw	r14, r30
    11dc:	85 32       	cpi	r24, 0x25	; 37
    11de:	21 f4       	brne	.+8      	; 0x11e8 <vfprintf+0x7c>
    11e0:	b6 01       	movw	r22, r12
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	d6 d1       	rcall	.+940    	; 0x1592 <fputc>
    11e6:	e8 cf       	rjmp	.-48     	; 0x11b8 <vfprintf+0x4c>
    11e8:	91 2c       	mov	r9, r1
    11ea:	21 2c       	mov	r2, r1
    11ec:	31 2c       	mov	r3, r1
    11ee:	ff e1       	ldi	r31, 0x1F	; 31
    11f0:	f3 15       	cp	r31, r3
    11f2:	d8 f0       	brcs	.+54     	; 0x122a <vfprintf+0xbe>
    11f4:	8b 32       	cpi	r24, 0x2B	; 43
    11f6:	79 f0       	breq	.+30     	; 0x1216 <vfprintf+0xaa>
    11f8:	38 f4       	brcc	.+14     	; 0x1208 <vfprintf+0x9c>
    11fa:	80 32       	cpi	r24, 0x20	; 32
    11fc:	79 f0       	breq	.+30     	; 0x121c <vfprintf+0xb0>
    11fe:	83 32       	cpi	r24, 0x23	; 35
    1200:	a1 f4       	brne	.+40     	; 0x122a <vfprintf+0xbe>
    1202:	23 2d       	mov	r18, r3
    1204:	20 61       	ori	r18, 0x10	; 16
    1206:	1d c0       	rjmp	.+58     	; 0x1242 <vfprintf+0xd6>
    1208:	8d 32       	cpi	r24, 0x2D	; 45
    120a:	61 f0       	breq	.+24     	; 0x1224 <vfprintf+0xb8>
    120c:	80 33       	cpi	r24, 0x30	; 48
    120e:	69 f4       	brne	.+26     	; 0x122a <vfprintf+0xbe>
    1210:	23 2d       	mov	r18, r3
    1212:	21 60       	ori	r18, 0x01	; 1
    1214:	16 c0       	rjmp	.+44     	; 0x1242 <vfprintf+0xd6>
    1216:	83 2d       	mov	r24, r3
    1218:	82 60       	ori	r24, 0x02	; 2
    121a:	38 2e       	mov	r3, r24
    121c:	e3 2d       	mov	r30, r3
    121e:	e4 60       	ori	r30, 0x04	; 4
    1220:	3e 2e       	mov	r3, r30
    1222:	2a c0       	rjmp	.+84     	; 0x1278 <vfprintf+0x10c>
    1224:	f3 2d       	mov	r31, r3
    1226:	f8 60       	ori	r31, 0x08	; 8
    1228:	1d c0       	rjmp	.+58     	; 0x1264 <vfprintf+0xf8>
    122a:	37 fc       	sbrc	r3, 7
    122c:	2d c0       	rjmp	.+90     	; 0x1288 <vfprintf+0x11c>
    122e:	20 ed       	ldi	r18, 0xD0	; 208
    1230:	28 0f       	add	r18, r24
    1232:	2a 30       	cpi	r18, 0x0A	; 10
    1234:	40 f0       	brcs	.+16     	; 0x1246 <vfprintf+0xda>
    1236:	8e 32       	cpi	r24, 0x2E	; 46
    1238:	b9 f4       	brne	.+46     	; 0x1268 <vfprintf+0xfc>
    123a:	36 fc       	sbrc	r3, 6
    123c:	75 c1       	rjmp	.+746    	; 0x1528 <vfprintf+0x3bc>
    123e:	23 2d       	mov	r18, r3
    1240:	20 64       	ori	r18, 0x40	; 64
    1242:	32 2e       	mov	r3, r18
    1244:	19 c0       	rjmp	.+50     	; 0x1278 <vfprintf+0x10c>
    1246:	36 fe       	sbrs	r3, 6
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0xea>
    124a:	8a e0       	ldi	r24, 0x0A	; 10
    124c:	98 9e       	mul	r9, r24
    124e:	20 0d       	add	r18, r0
    1250:	11 24       	eor	r1, r1
    1252:	92 2e       	mov	r9, r18
    1254:	11 c0       	rjmp	.+34     	; 0x1278 <vfprintf+0x10c>
    1256:	ea e0       	ldi	r30, 0x0A	; 10
    1258:	2e 9e       	mul	r2, r30
    125a:	20 0d       	add	r18, r0
    125c:	11 24       	eor	r1, r1
    125e:	22 2e       	mov	r2, r18
    1260:	f3 2d       	mov	r31, r3
    1262:	f0 62       	ori	r31, 0x20	; 32
    1264:	3f 2e       	mov	r3, r31
    1266:	08 c0       	rjmp	.+16     	; 0x1278 <vfprintf+0x10c>
    1268:	8c 36       	cpi	r24, 0x6C	; 108
    126a:	21 f4       	brne	.+8      	; 0x1274 <vfprintf+0x108>
    126c:	83 2d       	mov	r24, r3
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	38 2e       	mov	r3, r24
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <vfprintf+0x10c>
    1274:	88 36       	cpi	r24, 0x68	; 104
    1276:	41 f4       	brne	.+16     	; 0x1288 <vfprintf+0x11c>
    1278:	f7 01       	movw	r30, r14
    127a:	93 fd       	sbrc	r25, 3
    127c:	85 91       	lpm	r24, Z+
    127e:	93 ff       	sbrs	r25, 3
    1280:	81 91       	ld	r24, Z+
    1282:	7f 01       	movw	r14, r30
    1284:	81 11       	cpse	r24, r1
    1286:	b3 cf       	rjmp	.-154    	; 0x11ee <vfprintf+0x82>
    1288:	98 2f       	mov	r25, r24
    128a:	9f 7d       	andi	r25, 0xDF	; 223
    128c:	95 54       	subi	r25, 0x45	; 69
    128e:	93 30       	cpi	r25, 0x03	; 3
    1290:	28 f4       	brcc	.+10     	; 0x129c <vfprintf+0x130>
    1292:	0c 5f       	subi	r16, 0xFC	; 252
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	9f e3       	ldi	r25, 0x3F	; 63
    1298:	99 83       	std	Y+1, r25	; 0x01
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <vfprintf+0x14a>
    129c:	83 36       	cpi	r24, 0x63	; 99
    129e:	31 f0       	breq	.+12     	; 0x12ac <vfprintf+0x140>
    12a0:	83 37       	cpi	r24, 0x73	; 115
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <vfprintf+0x154>
    12a4:	83 35       	cpi	r24, 0x53	; 83
    12a6:	09 f0       	breq	.+2      	; 0x12aa <vfprintf+0x13e>
    12a8:	55 c0       	rjmp	.+170    	; 0x1354 <vfprintf+0x1e8>
    12aa:	20 c0       	rjmp	.+64     	; 0x12ec <vfprintf+0x180>
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 81       	ld	r24, Z
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	0e 5f       	subi	r16, 0xFE	; 254
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	88 24       	eor	r8, r8
    12b8:	83 94       	inc	r8
    12ba:	91 2c       	mov	r9, r1
    12bc:	53 01       	movw	r10, r6
    12be:	12 c0       	rjmp	.+36     	; 0x12e4 <vfprintf+0x178>
    12c0:	28 01       	movw	r4, r16
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
    12c4:	4f 0e       	add	r4, r31
    12c6:	51 1c       	adc	r5, r1
    12c8:	f8 01       	movw	r30, r16
    12ca:	a0 80       	ld	r10, Z
    12cc:	b1 80       	ldd	r11, Z+1	; 0x01
    12ce:	36 fe       	sbrs	r3, 6
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <vfprintf+0x16c>
    12d2:	69 2d       	mov	r22, r9
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x170>
    12d8:	6f ef       	ldi	r22, 0xFF	; 255
    12da:	7f ef       	ldi	r23, 0xFF	; 255
    12dc:	c5 01       	movw	r24, r10
    12de:	4e d1       	rcall	.+668    	; 0x157c <strnlen>
    12e0:	4c 01       	movw	r8, r24
    12e2:	82 01       	movw	r16, r4
    12e4:	f3 2d       	mov	r31, r3
    12e6:	ff 77       	andi	r31, 0x7F	; 127
    12e8:	3f 2e       	mov	r3, r31
    12ea:	15 c0       	rjmp	.+42     	; 0x1316 <vfprintf+0x1aa>
    12ec:	28 01       	movw	r4, r16
    12ee:	22 e0       	ldi	r18, 0x02	; 2
    12f0:	42 0e       	add	r4, r18
    12f2:	51 1c       	adc	r5, r1
    12f4:	f8 01       	movw	r30, r16
    12f6:	a0 80       	ld	r10, Z
    12f8:	b1 80       	ldd	r11, Z+1	; 0x01
    12fa:	36 fe       	sbrs	r3, 6
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <vfprintf+0x198>
    12fe:	69 2d       	mov	r22, r9
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x19c>
    1304:	6f ef       	ldi	r22, 0xFF	; 255
    1306:	7f ef       	ldi	r23, 0xFF	; 255
    1308:	c5 01       	movw	r24, r10
    130a:	2d d1       	rcall	.+602    	; 0x1566 <strnlen_P>
    130c:	4c 01       	movw	r8, r24
    130e:	f3 2d       	mov	r31, r3
    1310:	f0 68       	ori	r31, 0x80	; 128
    1312:	3f 2e       	mov	r3, r31
    1314:	82 01       	movw	r16, r4
    1316:	33 fc       	sbrc	r3, 3
    1318:	19 c0       	rjmp	.+50     	; 0x134c <vfprintf+0x1e0>
    131a:	82 2d       	mov	r24, r2
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	88 16       	cp	r8, r24
    1320:	99 06       	cpc	r9, r25
    1322:	a0 f4       	brcc	.+40     	; 0x134c <vfprintf+0x1e0>
    1324:	b6 01       	movw	r22, r12
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	33 d1       	rcall	.+614    	; 0x1592 <fputc>
    132c:	2a 94       	dec	r2
    132e:	f5 cf       	rjmp	.-22     	; 0x131a <vfprintf+0x1ae>
    1330:	f5 01       	movw	r30, r10
    1332:	37 fc       	sbrc	r3, 7
    1334:	85 91       	lpm	r24, Z+
    1336:	37 fe       	sbrs	r3, 7
    1338:	81 91       	ld	r24, Z+
    133a:	5f 01       	movw	r10, r30
    133c:	b6 01       	movw	r22, r12
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	28 d1       	rcall	.+592    	; 0x1592 <fputc>
    1342:	21 10       	cpse	r2, r1
    1344:	2a 94       	dec	r2
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	82 1a       	sub	r8, r18
    134a:	91 08       	sbc	r9, r1
    134c:	81 14       	cp	r8, r1
    134e:	91 04       	cpc	r9, r1
    1350:	79 f7       	brne	.-34     	; 0x1330 <vfprintf+0x1c4>
    1352:	e1 c0       	rjmp	.+450    	; 0x1516 <vfprintf+0x3aa>
    1354:	84 36       	cpi	r24, 0x64	; 100
    1356:	11 f0       	breq	.+4      	; 0x135c <vfprintf+0x1f0>
    1358:	89 36       	cpi	r24, 0x69	; 105
    135a:	39 f5       	brne	.+78     	; 0x13aa <vfprintf+0x23e>
    135c:	f8 01       	movw	r30, r16
    135e:	37 fe       	sbrs	r3, 7
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <vfprintf+0x204>
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	82 81       	ldd	r24, Z+2	; 0x02
    1368:	93 81       	ldd	r25, Z+3	; 0x03
    136a:	0c 5f       	subi	r16, 0xFC	; 252
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	08 c0       	rjmp	.+16     	; 0x1380 <vfprintf+0x214>
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	07 2e       	mov	r0, r23
    1376:	00 0c       	add	r0, r0
    1378:	88 0b       	sbc	r24, r24
    137a:	99 0b       	sbc	r25, r25
    137c:	0e 5f       	subi	r16, 0xFE	; 254
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	f3 2d       	mov	r31, r3
    1382:	ff 76       	andi	r31, 0x6F	; 111
    1384:	3f 2e       	mov	r3, r31
    1386:	97 ff       	sbrs	r25, 7
    1388:	09 c0       	rjmp	.+18     	; 0x139c <vfprintf+0x230>
    138a:	90 95       	com	r25
    138c:	80 95       	com	r24
    138e:	70 95       	com	r23
    1390:	61 95       	neg	r22
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	f0 68       	ori	r31, 0x80	; 128
    139a:	3f 2e       	mov	r3, r31
    139c:	2a e0       	ldi	r18, 0x0A	; 10
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	a3 01       	movw	r20, r6
    13a2:	33 d1       	rcall	.+614    	; 0x160a <__ultoa_invert>
    13a4:	88 2e       	mov	r8, r24
    13a6:	86 18       	sub	r8, r6
    13a8:	44 c0       	rjmp	.+136    	; 0x1432 <vfprintf+0x2c6>
    13aa:	85 37       	cpi	r24, 0x75	; 117
    13ac:	31 f4       	brne	.+12     	; 0x13ba <vfprintf+0x24e>
    13ae:	23 2d       	mov	r18, r3
    13b0:	2f 7e       	andi	r18, 0xEF	; 239
    13b2:	b2 2e       	mov	r11, r18
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	25 c0       	rjmp	.+74     	; 0x1404 <vfprintf+0x298>
    13ba:	93 2d       	mov	r25, r3
    13bc:	99 7f       	andi	r25, 0xF9	; 249
    13be:	b9 2e       	mov	r11, r25
    13c0:	8f 36       	cpi	r24, 0x6F	; 111
    13c2:	c1 f0       	breq	.+48     	; 0x13f4 <vfprintf+0x288>
    13c4:	18 f4       	brcc	.+6      	; 0x13cc <vfprintf+0x260>
    13c6:	88 35       	cpi	r24, 0x58	; 88
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <vfprintf+0x27c>
    13ca:	ae c0       	rjmp	.+348    	; 0x1528 <vfprintf+0x3bc>
    13cc:	80 37       	cpi	r24, 0x70	; 112
    13ce:	19 f0       	breq	.+6      	; 0x13d6 <vfprintf+0x26a>
    13d0:	88 37       	cpi	r24, 0x78	; 120
    13d2:	21 f0       	breq	.+8      	; 0x13dc <vfprintf+0x270>
    13d4:	a9 c0       	rjmp	.+338    	; 0x1528 <vfprintf+0x3bc>
    13d6:	e9 2f       	mov	r30, r25
    13d8:	e0 61       	ori	r30, 0x10	; 16
    13da:	be 2e       	mov	r11, r30
    13dc:	b4 fe       	sbrs	r11, 4
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <vfprintf+0x28e>
    13e0:	fb 2d       	mov	r31, r11
    13e2:	f4 60       	ori	r31, 0x04	; 4
    13e4:	bf 2e       	mov	r11, r31
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <vfprintf+0x28e>
    13e8:	34 fe       	sbrs	r3, 4
    13ea:	0a c0       	rjmp	.+20     	; 0x1400 <vfprintf+0x294>
    13ec:	29 2f       	mov	r18, r25
    13ee:	26 60       	ori	r18, 0x06	; 6
    13f0:	b2 2e       	mov	r11, r18
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0x294>
    13f4:	28 e0       	ldi	r18, 0x08	; 8
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <vfprintf+0x298>
    13fa:	20 e1       	ldi	r18, 0x10	; 16
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <vfprintf+0x298>
    1400:	20 e1       	ldi	r18, 0x10	; 16
    1402:	32 e0       	ldi	r19, 0x02	; 2
    1404:	f8 01       	movw	r30, r16
    1406:	b7 fe       	sbrs	r11, 7
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <vfprintf+0x2ac>
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0c 5f       	subi	r16, 0xFC	; 252
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	06 c0       	rjmp	.+12     	; 0x1424 <vfprintf+0x2b8>
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 5f       	subi	r16, 0xFE	; 254
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	a3 01       	movw	r20, r6
    1426:	f1 d0       	rcall	.+482    	; 0x160a <__ultoa_invert>
    1428:	88 2e       	mov	r8, r24
    142a:	86 18       	sub	r8, r6
    142c:	fb 2d       	mov	r31, r11
    142e:	ff 77       	andi	r31, 0x7F	; 127
    1430:	3f 2e       	mov	r3, r31
    1432:	36 fe       	sbrs	r3, 6
    1434:	0d c0       	rjmp	.+26     	; 0x1450 <vfprintf+0x2e4>
    1436:	23 2d       	mov	r18, r3
    1438:	2e 7f       	andi	r18, 0xFE	; 254
    143a:	a2 2e       	mov	r10, r18
    143c:	89 14       	cp	r8, r9
    143e:	58 f4       	brcc	.+22     	; 0x1456 <vfprintf+0x2ea>
    1440:	34 fe       	sbrs	r3, 4
    1442:	0b c0       	rjmp	.+22     	; 0x145a <vfprintf+0x2ee>
    1444:	32 fc       	sbrc	r3, 2
    1446:	09 c0       	rjmp	.+18     	; 0x145a <vfprintf+0x2ee>
    1448:	83 2d       	mov	r24, r3
    144a:	8e 7e       	andi	r24, 0xEE	; 238
    144c:	a8 2e       	mov	r10, r24
    144e:	05 c0       	rjmp	.+10     	; 0x145a <vfprintf+0x2ee>
    1450:	b8 2c       	mov	r11, r8
    1452:	a3 2c       	mov	r10, r3
    1454:	03 c0       	rjmp	.+6      	; 0x145c <vfprintf+0x2f0>
    1456:	b8 2c       	mov	r11, r8
    1458:	01 c0       	rjmp	.+2      	; 0x145c <vfprintf+0x2f0>
    145a:	b9 2c       	mov	r11, r9
    145c:	a4 fe       	sbrs	r10, 4
    145e:	0f c0       	rjmp	.+30     	; 0x147e <vfprintf+0x312>
    1460:	fe 01       	movw	r30, r28
    1462:	e8 0d       	add	r30, r8
    1464:	f1 1d       	adc	r31, r1
    1466:	80 81       	ld	r24, Z
    1468:	80 33       	cpi	r24, 0x30	; 48
    146a:	21 f4       	brne	.+8      	; 0x1474 <vfprintf+0x308>
    146c:	9a 2d       	mov	r25, r10
    146e:	99 7e       	andi	r25, 0xE9	; 233
    1470:	a9 2e       	mov	r10, r25
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <vfprintf+0x31a>
    1474:	a2 fe       	sbrs	r10, 2
    1476:	06 c0       	rjmp	.+12     	; 0x1484 <vfprintf+0x318>
    1478:	b3 94       	inc	r11
    147a:	b3 94       	inc	r11
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <vfprintf+0x31a>
    147e:	8a 2d       	mov	r24, r10
    1480:	86 78       	andi	r24, 0x86	; 134
    1482:	09 f0       	breq	.+2      	; 0x1486 <vfprintf+0x31a>
    1484:	b3 94       	inc	r11
    1486:	a3 fc       	sbrc	r10, 3
    1488:	10 c0       	rjmp	.+32     	; 0x14aa <vfprintf+0x33e>
    148a:	a0 fe       	sbrs	r10, 0
    148c:	06 c0       	rjmp	.+12     	; 0x149a <vfprintf+0x32e>
    148e:	b2 14       	cp	r11, r2
    1490:	80 f4       	brcc	.+32     	; 0x14b2 <vfprintf+0x346>
    1492:	28 0c       	add	r2, r8
    1494:	92 2c       	mov	r9, r2
    1496:	9b 18       	sub	r9, r11
    1498:	0d c0       	rjmp	.+26     	; 0x14b4 <vfprintf+0x348>
    149a:	b2 14       	cp	r11, r2
    149c:	58 f4       	brcc	.+22     	; 0x14b4 <vfprintf+0x348>
    149e:	b6 01       	movw	r22, r12
    14a0:	80 e2       	ldi	r24, 0x20	; 32
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	76 d0       	rcall	.+236    	; 0x1592 <fputc>
    14a6:	b3 94       	inc	r11
    14a8:	f8 cf       	rjmp	.-16     	; 0x149a <vfprintf+0x32e>
    14aa:	b2 14       	cp	r11, r2
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <vfprintf+0x348>
    14ae:	2b 18       	sub	r2, r11
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x34a>
    14b2:	98 2c       	mov	r9, r8
    14b4:	21 2c       	mov	r2, r1
    14b6:	a4 fe       	sbrs	r10, 4
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <vfprintf+0x36c>
    14ba:	b6 01       	movw	r22, r12
    14bc:	80 e3       	ldi	r24, 0x30	; 48
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	68 d0       	rcall	.+208    	; 0x1592 <fputc>
    14c2:	a2 fe       	sbrs	r10, 2
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <vfprintf+0x386>
    14c6:	a1 fc       	sbrc	r10, 1
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <vfprintf+0x364>
    14ca:	88 e7       	ldi	r24, 0x78	; 120
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <vfprintf+0x368>
    14d0:	88 e5       	ldi	r24, 0x58	; 88
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	b6 01       	movw	r22, r12
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <vfprintf+0x384>
    14d8:	8a 2d       	mov	r24, r10
    14da:	86 78       	andi	r24, 0x86	; 134
    14dc:	51 f0       	breq	.+20     	; 0x14f2 <vfprintf+0x386>
    14de:	a1 fe       	sbrs	r10, 1
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x37a>
    14e2:	8b e2       	ldi	r24, 0x2B	; 43
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x37c>
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	a7 fc       	sbrc	r10, 7
    14ea:	8d e2       	ldi	r24, 0x2D	; 45
    14ec:	b6 01       	movw	r22, r12
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	50 d0       	rcall	.+160    	; 0x1592 <fputc>
    14f2:	89 14       	cp	r8, r9
    14f4:	30 f4       	brcc	.+12     	; 0x1502 <vfprintf+0x396>
    14f6:	b6 01       	movw	r22, r12
    14f8:	80 e3       	ldi	r24, 0x30	; 48
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	4a d0       	rcall	.+148    	; 0x1592 <fputc>
    14fe:	9a 94       	dec	r9
    1500:	f8 cf       	rjmp	.-16     	; 0x14f2 <vfprintf+0x386>
    1502:	8a 94       	dec	r8
    1504:	f3 01       	movw	r30, r6
    1506:	e8 0d       	add	r30, r8
    1508:	f1 1d       	adc	r31, r1
    150a:	80 81       	ld	r24, Z
    150c:	b6 01       	movw	r22, r12
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	40 d0       	rcall	.+128    	; 0x1592 <fputc>
    1512:	81 10       	cpse	r8, r1
    1514:	f6 cf       	rjmp	.-20     	; 0x1502 <vfprintf+0x396>
    1516:	22 20       	and	r2, r2
    1518:	09 f4       	brne	.+2      	; 0x151c <vfprintf+0x3b0>
    151a:	4e ce       	rjmp	.-868    	; 0x11b8 <vfprintf+0x4c>
    151c:	b6 01       	movw	r22, r12
    151e:	80 e2       	ldi	r24, 0x20	; 32
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	37 d0       	rcall	.+110    	; 0x1592 <fputc>
    1524:	2a 94       	dec	r2
    1526:	f7 cf       	rjmp	.-18     	; 0x1516 <vfprintf+0x3aa>
    1528:	f6 01       	movw	r30, r12
    152a:	86 81       	ldd	r24, Z+6	; 0x06
    152c:	97 81       	ldd	r25, Z+7	; 0x07
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <vfprintf+0x3c8>
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	9f ef       	ldi	r25, 0xFF	; 255
    1534:	2b 96       	adiw	r28, 0x0b	; 11
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	bf 90       	pop	r11
    1552:	af 90       	pop	r10
    1554:	9f 90       	pop	r9
    1556:	8f 90       	pop	r8
    1558:	7f 90       	pop	r7
    155a:	6f 90       	pop	r6
    155c:	5f 90       	pop	r5
    155e:	4f 90       	pop	r4
    1560:	3f 90       	pop	r3
    1562:	2f 90       	pop	r2
    1564:	08 95       	ret

00001566 <strnlen_P>:
    1566:	fc 01       	movw	r30, r24
    1568:	05 90       	lpm	r0, Z+
    156a:	61 50       	subi	r22, 0x01	; 1
    156c:	70 40       	sbci	r23, 0x00	; 0
    156e:	01 10       	cpse	r0, r1
    1570:	d8 f7       	brcc	.-10     	; 0x1568 <strnlen_P+0x2>
    1572:	80 95       	com	r24
    1574:	90 95       	com	r25
    1576:	8e 0f       	add	r24, r30
    1578:	9f 1f       	adc	r25, r31
    157a:	08 95       	ret

0000157c <strnlen>:
    157c:	fc 01       	movw	r30, r24
    157e:	61 50       	subi	r22, 0x01	; 1
    1580:	70 40       	sbci	r23, 0x00	; 0
    1582:	01 90       	ld	r0, Z+
    1584:	01 10       	cpse	r0, r1
    1586:	d8 f7       	brcc	.-10     	; 0x157e <strnlen+0x2>
    1588:	80 95       	com	r24
    158a:	90 95       	com	r25
    158c:	8e 0f       	add	r24, r30
    158e:	9f 1f       	adc	r25, r31
    1590:	08 95       	ret

00001592 <fputc>:
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	fb 01       	movw	r30, r22
    159c:	23 81       	ldd	r18, Z+3	; 0x03
    159e:	21 fd       	sbrc	r18, 1
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <fputc+0x16>
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	9f ef       	ldi	r25, 0xFF	; 255
    15a6:	2c c0       	rjmp	.+88     	; 0x1600 <fputc+0x6e>
    15a8:	22 ff       	sbrs	r18, 2
    15aa:	16 c0       	rjmp	.+44     	; 0x15d8 <fputc+0x46>
    15ac:	46 81       	ldd	r20, Z+6	; 0x06
    15ae:	57 81       	ldd	r21, Z+7	; 0x07
    15b0:	24 81       	ldd	r18, Z+4	; 0x04
    15b2:	35 81       	ldd	r19, Z+5	; 0x05
    15b4:	42 17       	cp	r20, r18
    15b6:	53 07       	cpc	r21, r19
    15b8:	44 f4       	brge	.+16     	; 0x15ca <fputc+0x38>
    15ba:	a0 81       	ld	r26, Z
    15bc:	b1 81       	ldd	r27, Z+1	; 0x01
    15be:	9d 01       	movw	r18, r26
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	31 83       	std	Z+1, r19	; 0x01
    15c6:	20 83       	st	Z, r18
    15c8:	8c 93       	st	X, r24
    15ca:	26 81       	ldd	r18, Z+6	; 0x06
    15cc:	37 81       	ldd	r19, Z+7	; 0x07
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	37 83       	std	Z+7, r19	; 0x07
    15d4:	26 83       	std	Z+6, r18	; 0x06
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <fputc+0x6e>
    15d8:	8b 01       	movw	r16, r22
    15da:	ec 01       	movw	r28, r24
    15dc:	fb 01       	movw	r30, r22
    15de:	00 84       	ldd	r0, Z+8	; 0x08
    15e0:	f1 85       	ldd	r31, Z+9	; 0x09
    15e2:	e0 2d       	mov	r30, r0
    15e4:	09 95       	icall
    15e6:	89 2b       	or	r24, r25
    15e8:	e1 f6       	brne	.-72     	; 0x15a2 <fputc+0x10>
    15ea:	d8 01       	movw	r26, r16
    15ec:	16 96       	adiw	r26, 0x06	; 6
    15ee:	8d 91       	ld	r24, X+
    15f0:	9c 91       	ld	r25, X
    15f2:	17 97       	sbiw	r26, 0x07	; 7
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	17 96       	adiw	r26, 0x07	; 7
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24
    15fc:	16 97       	sbiw	r26, 0x06	; 6
    15fe:	ce 01       	movw	r24, r28
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <__ultoa_invert>:
    160a:	fa 01       	movw	r30, r20
    160c:	aa 27       	eor	r26, r26
    160e:	28 30       	cpi	r18, 0x08	; 8
    1610:	51 f1       	breq	.+84     	; 0x1666 <__ultoa_invert+0x5c>
    1612:	20 31       	cpi	r18, 0x10	; 16
    1614:	81 f1       	breq	.+96     	; 0x1676 <__ultoa_invert+0x6c>
    1616:	e8 94       	clt
    1618:	6f 93       	push	r22
    161a:	6e 7f       	andi	r22, 0xFE	; 254
    161c:	6e 5f       	subi	r22, 0xFE	; 254
    161e:	7f 4f       	sbci	r23, 0xFF	; 255
    1620:	8f 4f       	sbci	r24, 0xFF	; 255
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	af 4f       	sbci	r26, 0xFF	; 255
    1626:	b1 e0       	ldi	r27, 0x01	; 1
    1628:	3e d0       	rcall	.+124    	; 0x16a6 <__ultoa_invert+0x9c>
    162a:	b4 e0       	ldi	r27, 0x04	; 4
    162c:	3c d0       	rcall	.+120    	; 0x16a6 <__ultoa_invert+0x9c>
    162e:	67 0f       	add	r22, r23
    1630:	78 1f       	adc	r23, r24
    1632:	89 1f       	adc	r24, r25
    1634:	9a 1f       	adc	r25, r26
    1636:	a1 1d       	adc	r26, r1
    1638:	68 0f       	add	r22, r24
    163a:	79 1f       	adc	r23, r25
    163c:	8a 1f       	adc	r24, r26
    163e:	91 1d       	adc	r25, r1
    1640:	a1 1d       	adc	r26, r1
    1642:	6a 0f       	add	r22, r26
    1644:	71 1d       	adc	r23, r1
    1646:	81 1d       	adc	r24, r1
    1648:	91 1d       	adc	r25, r1
    164a:	a1 1d       	adc	r26, r1
    164c:	20 d0       	rcall	.+64     	; 0x168e <__ultoa_invert+0x84>
    164e:	09 f4       	brne	.+2      	; 0x1652 <__ultoa_invert+0x48>
    1650:	68 94       	set
    1652:	3f 91       	pop	r19
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	26 9f       	mul	r18, r22
    1658:	11 24       	eor	r1, r1
    165a:	30 19       	sub	r19, r0
    165c:	30 5d       	subi	r19, 0xD0	; 208
    165e:	31 93       	st	Z+, r19
    1660:	de f6       	brtc	.-74     	; 0x1618 <__ultoa_invert+0xe>
    1662:	cf 01       	movw	r24, r30
    1664:	08 95       	ret
    1666:	46 2f       	mov	r20, r22
    1668:	47 70       	andi	r20, 0x07	; 7
    166a:	40 5d       	subi	r20, 0xD0	; 208
    166c:	41 93       	st	Z+, r20
    166e:	b3 e0       	ldi	r27, 0x03	; 3
    1670:	0f d0       	rcall	.+30     	; 0x1690 <__ultoa_invert+0x86>
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__ultoa_invert+0x5c>
    1674:	f6 cf       	rjmp	.-20     	; 0x1662 <__ultoa_invert+0x58>
    1676:	46 2f       	mov	r20, r22
    1678:	4f 70       	andi	r20, 0x0F	; 15
    167a:	40 5d       	subi	r20, 0xD0	; 208
    167c:	4a 33       	cpi	r20, 0x3A	; 58
    167e:	18 f0       	brcs	.+6      	; 0x1686 <__ultoa_invert+0x7c>
    1680:	49 5d       	subi	r20, 0xD9	; 217
    1682:	31 fd       	sbrc	r19, 1
    1684:	40 52       	subi	r20, 0x20	; 32
    1686:	41 93       	st	Z+, r20
    1688:	02 d0       	rcall	.+4      	; 0x168e <__ultoa_invert+0x84>
    168a:	a9 f7       	brne	.-22     	; 0x1676 <__ultoa_invert+0x6c>
    168c:	ea cf       	rjmp	.-44     	; 0x1662 <__ultoa_invert+0x58>
    168e:	b4 e0       	ldi	r27, 0x04	; 4
    1690:	a6 95       	lsr	r26
    1692:	97 95       	ror	r25
    1694:	87 95       	ror	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	ba 95       	dec	r27
    169c:	c9 f7       	brne	.-14     	; 0x1690 <__ultoa_invert+0x86>
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	61 05       	cpc	r22, r1
    16a2:	71 05       	cpc	r23, r1
    16a4:	08 95       	ret
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	0a 2e       	mov	r0, r26
    16ac:	06 94       	lsr	r0
    16ae:	57 95       	ror	r21
    16b0:	47 95       	ror	r20
    16b2:	37 95       	ror	r19
    16b4:	27 95       	ror	r18
    16b6:	ba 95       	dec	r27
    16b8:	c9 f7       	brne	.-14     	; 0x16ac <__ultoa_invert+0xa2>
    16ba:	62 0f       	add	r22, r18
    16bc:	73 1f       	adc	r23, r19
    16be:	84 1f       	adc	r24, r20
    16c0:	95 1f       	adc	r25, r21
    16c2:	a0 1d       	adc	r26, r0
    16c4:	08 95       	ret

000016c6 <_exit>:
    16c6:	f8 94       	cli

000016c8 <__stop_program>:
    16c8:	ff cf       	rjmp	.-2      	; 0x16c8 <__stop_program>
