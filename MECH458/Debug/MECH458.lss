
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fc  00800100  00001aec  00001b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  008002fc  008002fc  00001d7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046ce  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ade  00000000  00000000  000067ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003132  00000000  00000000  000082cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  0000b400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000914f  00000000  00000000  0000bbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c4  00000000  00000000  00014cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  000165bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  000168b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	6e c4       	rjmp	.+2268   	; 0x912 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	56 c7       	rjmp	.+3756   	; 0xef2 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec ee       	ldi	r30, 0xEC	; 236
      ac:	fa e1       	ldi	r31, 0x1A	; 26
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ac 3f       	cpi	r26, 0xFC	; 252
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	ac ef       	ldi	r26, 0xFC	; 252
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ae 37       	cpi	r26, 0x7E	; 126
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	a2 d2       	rcall	.+1348   	; 0x614 <main>
      d0:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <_exit>

000000d4 <__bad_interrupt>:
      d4:	6d c3       	rjmp	.+1754   	; 0x7b0 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_ADCCount>
     120:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_ADCCount>
     12c:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 1c 03 	sts	0x031C, r19	; 0x80031c <g_ADCCount+0x1>
     13a:	20 93 1b 03 	sts	0x031B, r18	; 0x80031b <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e9 5f       	subi	r30, 0xF9	; 249
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_ADCCount>
     162:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     19a:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     1a6:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     1aa:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <STAGE1+0x1>
     1ae:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <STAGE1>
     1b2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2351>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <STAGE2>
     1cc:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <STAGE2+0x1>
     1d0:	0c d2       	rcall	.+1048   	; 0x5ea <LL_UpdateStatus>
     1d2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2352>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <_timer+0x23>
     1ec:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2353>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_timer+0x1a>
     206:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2351>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <STAGE2>
     220:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     22c:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     230:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <STAGE2+0x1>
     234:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	91 d1       	rcall	.+802    	; 0x55e <LL_Next>
     23c:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <STAGE2+0x1>
     240:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2352>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	0f c0       	rjmp	.+30     	; 0x276 <SERVER_Task+0xec>
     258:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     25c:	81 11       	cpse	r24, r1
     25e:	08 c0       	rjmp	.+16     	; 0x270 <SERVER_Task+0xe6>
     260:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     264:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     268:	a0 d1       	rcall	.+832    	; 0x5aa <LL_GetClass>
     26a:	85 30       	cpi	r24, 0x05	; 5
     26c:	09 f4       	brne	.+2      	; 0x270 <SERVER_Task+0xe6>
     26e:	c2 d5       	rcall	.+2948   	; 0xdf4 <SYS_Rampdown>
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2353>
     276:	08 95       	ret

00000278 <ADC_Task>:
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	cf 93       	push	r28
     282:	e7 e0       	ldi	r30, 0x07	; 7
     284:	f3 e0       	ldi	r31, 0x03	; 3
     286:	a0 81       	ld	r26, Z
     288:	b1 81       	ldd	r27, Z+1	; 0x01
     28a:	60 81       	ld	r22, Z
     28c:	71 81       	ldd	r23, Z+1	; 0x01
     28e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <ticks.2361>
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <ticks.2361>
     298:	c1 2c       	mov	r12, r1
     29a:	d1 2c       	mov	r13, r1
     29c:	76 01       	movw	r14, r12
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	4f b7       	in	r20, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	fc 01       	movw	r30, r24
     2a8:	ee 0f       	add	r30, r30
     2aa:	ff 1f       	adc	r31, r31
     2ac:	e9 5f       	subi	r30, 0xF9	; 249
     2ae:	fc 4f       	sbci	r31, 0xFC	; 252
     2b0:	20 81       	ld	r18, Z
     2b2:	31 81       	ldd	r19, Z+1	; 0x01
     2b4:	c2 0e       	add	r12, r18
     2b6:	d3 1e       	adc	r13, r19
     2b8:	e1 1c       	adc	r14, r1
     2ba:	f1 1c       	adc	r15, r1
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	26 17       	cp	r18, r22
     2c2:	37 07       	cpc	r19, r23
     2c4:	38 f4       	brcc	.+14     	; 0x2d4 <ADC_Task+0x5c>
     2c6:	fc 01       	movw	r30, r24
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	e9 5f       	subi	r30, 0xF9	; 249
     2ce:	fc 4f       	sbci	r31, 0xFC	; 252
     2d0:	60 81       	ld	r22, Z
     2d2:	71 81       	ldd	r23, Z+1	; 0x01
     2d4:	fc 01       	movw	r30, r24
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	e9 5f       	subi	r30, 0xF9	; 249
     2dc:	fc 4f       	sbci	r31, 0xFC	; 252
     2de:	20 81       	ld	r18, Z
     2e0:	31 81       	ldd	r19, Z+1	; 0x01
     2e2:	a2 17       	cp	r26, r18
     2e4:	b3 07       	cpc	r27, r19
     2e6:	08 f0       	brcs	.+2      	; 0x2ea <ADC_Task+0x72>
     2e8:	4d c0       	rjmp	.+154    	; 0x384 <ADC_Task+0x10c>
     2ea:	fc 01       	movw	r30, r24
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e9 5f       	subi	r30, 0xF9	; 249
     2f2:	fc 4f       	sbci	r31, 0xFC	; 252
     2f4:	a0 81       	ld	r26, Z
     2f6:	b1 81       	ldd	r27, Z+1	; 0x01
     2f8:	45 c0       	rjmp	.+138    	; 0x384 <ADC_Task+0x10c>
     2fa:	8f b7       	in	r24, 0x3f	; 63
     2fc:	f8 94       	cli
     2fe:	ca 1a       	sub	r12, r26
     300:	db 0a       	sbc	r13, r27
     302:	e1 08       	sbc	r14, r1
     304:	f1 08       	sbc	r15, r1
     306:	c6 1a       	sub	r12, r22
     308:	d7 0a       	sbc	r13, r23
     30a:	e1 08       	sbc	r14, r1
     30c:	f1 08       	sbc	r15, r1
     30e:	f6 94       	lsr	r15
     310:	e7 94       	ror	r14
     312:	d7 94       	ror	r13
     314:	c7 94       	ror	r12
     316:	f6 94       	lsr	r15
     318:	e7 94       	ror	r14
     31a:	d7 94       	ror	r13
     31c:	c7 94       	ror	r12
     31e:	8f bf       	out	0x3f, r24	; 63
     320:	cf b7       	in	r28, 0x3f	; 63
     322:	f8 94       	cli
     324:	d7 01       	movw	r26, r14
     326:	c6 01       	movw	r24, r12
     328:	0b 97       	sbiw	r24, 0x0b	; 11
     32a:	a1 09       	sbc	r26, r1
     32c:	b1 09       	sbc	r27, r1
     32e:	8d 3d       	cpi	r24, 0xDD	; 221
     330:	93 40       	sbci	r25, 0x03	; 3
     332:	a1 05       	cpc	r26, r1
     334:	b1 05       	cpc	r27, r1
     336:	a0 f4       	brcc	.+40     	; 0x360 <ADC_Task+0xe8>
     338:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <STAGE2>
     33c:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <STAGE2+0x1>
     340:	39 d1       	rcall	.+626    	; 0x5b4 <LL_GetRefl>
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	c8 16       	cp	r12, r24
     348:	d9 06       	cpc	r13, r25
     34a:	ea 06       	cpc	r14, r26
     34c:	fb 06       	cpc	r15, r27
     34e:	40 f4       	brcc	.+16     	; 0x360 <ADC_Task+0xe8>
     350:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <STAGE2>
     354:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <STAGE2+0x1>
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	11 f0       	breq	.+4      	; 0x360 <ADC_Task+0xe8>
     35c:	b6 01       	movw	r22, r12
     35e:	35 d1       	rcall	.+618    	; 0x5ca <LL_UpdateRefl>
     360:	cf bf       	out	0x3f, r28	; 63
     362:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <g_ADCCount+0x1>
     366:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <g_ADCCount>
     36a:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <_timer+0x11>
     36e:	66 9b       	sbis	0x0c, 6	; 12
     370:	06 c0       	rjmp	.+12     	; 0x37e <ADC_Task+0x106>
     372:	ea e7       	ldi	r30, 0x7A	; 122
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	80 83       	st	Z, r24
     37c:	0a c0       	rjmp	.+20     	; 0x392 <ADC_Task+0x11a>
     37e:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <ticks.2361>
     382:	07 c0       	rjmp	.+14     	; 0x392 <ADC_Task+0x11a>
     384:	4f bf       	out	0x3f, r20	; 63
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	86 30       	cpi	r24, 0x06	; 6
     38a:	91 05       	cpc	r25, r1
     38c:	09 f0       	breq	.+2      	; 0x390 <ADC_Task+0x118>
     38e:	89 cf       	rjmp	.-238    	; 0x2a2 <ADC_Task+0x2a>
     390:	b4 cf       	rjmp	.-152    	; 0x2fa <ADC_Task+0x82>
     392:	cf 91       	pop	r28
     394:	ff 90       	pop	r15
     396:	ef 90       	pop	r14
     398:	df 90       	pop	r13
     39a:	cf 90       	pop	r12
     39c:	08 95       	ret

0000039e <MAG_Task>:
     39e:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <tick.2383>
     3a2:	8f 5f       	subi	r24, 0xFF	; 255
     3a4:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <tick.2383>
     3a8:	64 99       	sbic	0x0c, 4	; 12
     3aa:	1a c0       	rjmp	.+52     	; 0x3e0 <MAG_Task+0x42>
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     3b2:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     3b6:	19 d1       	rcall	.+562    	; 0x5ea <LL_UpdateStatus>
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     3be:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     3c2:	09 d1       	rcall	.+530    	; 0x5d6 <LL_UpdateMag>
     3c4:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     3c8:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     3cc:	c8 d0       	rcall	.+400    	; 0x55e <LL_Next>
     3ce:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <STAGE1+0x1>
     3d2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <STAGE1>
     3d6:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <tick.2383>
     3da:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <_timer+0x1a>
     3de:	08 95       	ret
     3e0:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <tick.2383>
     3e4:	8d 33       	cpi	r24, 0x3D	; 61
     3e6:	c8 f0       	brcs	.+50     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     3ee:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     3f2:	fb d0       	rcall	.+502    	; 0x5ea <LL_UpdateStatus>
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     3fa:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     3fe:	eb d0       	rcall	.+470    	; 0x5d6 <LL_UpdateMag>
     400:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     404:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     408:	aa d0       	rcall	.+340    	; 0x55e <LL_Next>
     40a:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <STAGE1+0x1>
     40e:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <STAGE1>
     412:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <tick.2383>
     416:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <_timer+0x1a>
     41a:	08 95       	ret

0000041c <EXIT_Task>:
     41c:	cf 93       	push	r28
     41e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g_ExitBuffer>
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	09 f4       	brne	.+2      	; 0x428 <EXIT_Task+0xc>
     426:	3e c0       	rjmp	.+124    	; 0x4a4 <EXIT_Task+0x88>
     428:	c0 91 72 03 	lds	r28, 0x0372	; 0x800372 <stepper+0x4>
     42c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     430:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     434:	ba d0       	rcall	.+372    	; 0x5aa <LL_GetClass>
     436:	e8 2f       	mov	r30, r24
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	ea 5f       	subi	r30, 0xFA	; 250
     43c:	fe 4f       	sbci	r31, 0xFE	; 254
     43e:	80 81       	ld	r24, Z
     440:	c8 13       	cpse	r28, r24
     442:	2a c0       	rjmp	.+84     	; 0x498 <EXIT_Task+0x7c>
     444:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <HEAD>
     448:	f0 91 02 03 	lds	r31, 0x0302	; 0x800302 <HEAD+0x1>
     44c:	82 81       	ldd	r24, Z+2	; 0x02
     44e:	93 81       	ldd	r25, Z+3	; 0x03
     450:	ac d0       	rcall	.+344    	; 0x5aa <LL_GetClass>
     452:	e8 2f       	mov	r30, r24
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	ea 5f       	subi	r30, 0xFA	; 250
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	c0 81       	ld	r28, Z
     45c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     460:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     464:	a2 d0       	rcall	.+324    	; 0x5aa <LL_GetClass>
     466:	e8 2f       	mov	r30, r24
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	ea 5f       	subi	r30, 0xFA	; 250
     46c:	fe 4f       	sbci	r31, 0xFE	; 254
     46e:	80 81       	ld	r24, Z
     470:	6c 2f       	mov	r22, r28
     472:	3a d2       	rcall	.+1140   	; 0x8e8 <STEPPER_SetRotation>
     474:	63 e0       	ldi	r22, 0x03	; 3
     476:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     47a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     47e:	b5 d0       	rcall	.+362    	; 0x5ea <LL_UpdateStatus>
     480:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     484:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     488:	6a d0       	rcall	.+212    	; 0x55e <LL_Next>
     48a:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <HEAD+0x1>
     48e:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <HEAD>
     492:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_timer+0x23>
     496:	06 c0       	rjmp	.+12     	; 0x4a4 <EXIT_Task+0x88>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <g_ExitBuffer>
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	98 d1       	rcall	.+816    	; 0x7d4 <PWM>
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <BTN_Task>:
     4a8:	89 b1       	in	r24, 0x09	; 9
     4aa:	83 70       	andi	r24, 0x03	; 3
     4ac:	b9 f0       	breq	.+46     	; 0x4dc <BTN_Task+0x34>
     4ae:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <__data_end>
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <__data_end>
     4b8:	83 30       	cpi	r24, 0x03	; 3
     4ba:	90 f0       	brcs	.+36     	; 0x4e0 <BTN_Task+0x38>
     4bc:	89 b1       	in	r24, 0x09	; 9
     4be:	83 70       	andi	r24, 0x03	; 3
     4c0:	79 f0       	breq	.+30     	; 0x4e0 <BTN_Task+0x38>
     4c2:	89 b1       	in	r24, 0x09	; 9
     4c4:	83 70       	andi	r24, 0x03	; 3
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <BTN_Task+0x28>
     4ca:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <g_PauseRequest>
     4ce:	08 95       	ret
     4d0:	89 b1       	in	r24, 0x09	; 9
     4d2:	83 70       	andi	r24, 0x03	; 3
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <BTN_Task+0x38>
     4d8:	8d c4       	rjmp	.+2330   	; 0xdf4 <SYS_Rampdown>
     4da:	08 95       	ret
     4dc:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <__data_end>
     4e0:	08 95       	ret

000004e2 <WATCHDOG_Task>:
     4e2:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_WDTimeout>
     4e6:	82 30       	cpi	r24, 0x02	; 2
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <WATCHDOG_Task+0xa>
     4ea:	84 d4       	rcall	.+2312   	; 0xdf4 <SYS_Rampdown>
     4ec:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_WDTimeout>
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <g_WDTimeout>
     4f6:	08 95       	ret

000004f8 <D_Blinky>:
     4f8:	9b b1       	in	r25, 0x0b	; 11
     4fa:	80 ea       	ldi	r24, 0xA0	; 160
     4fc:	89 27       	eor	r24, r25
     4fe:	8b b9       	out	0x0b, r24	; 11
     500:	08 95       	ret

00000502 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	g_Timer++;
     502:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <g_Timer>
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <g_Timer>
     50c:	08 95       	ret

0000050e <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	7c 01       	movw	r14, r24
     51a:	16 2f       	mov	r17, r22
     51c:	d4 2f       	mov	r29, r20
     51e:	c2 2f       	mov	r28, r18
     520:	85 e0       	ldi	r24, 0x05	; 5
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	e5 d6       	rcall	.+3530   	; 0x12f0 <malloc>
     526:	fc 01       	movw	r30, r24
     528:	f1 82       	std	Z+1, r15	; 0x01
     52a:	e0 82       	st	Z, r14
     52c:	12 83       	std	Z+2, r17	; 0x02
     52e:	d3 83       	std	Z+3, r29	; 0x03
     530:	c4 83       	std	Z+4, r28	; 0x04
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	08 95       	ret

0000053e <LL_ItemListInit>:
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	ec 01       	movw	r28, r24
     544:	86 e0       	ldi	r24, 0x06	; 6
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	d3 d6       	rcall	.+3494   	; 0x12f0 <malloc>
     54a:	fc 01       	movw	r30, r24
     54c:	d1 83       	std	Z+1, r29	; 0x01
     54e:	c0 83       	st	Z, r28
     550:	15 82       	std	Z+5, r1	; 0x05
     552:	14 82       	std	Z+4, r1	; 0x04
     554:	13 82       	std	Z+3, r1	; 0x03
     556:	12 82       	std	Z+2, r1	; 0x02
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <LL_Next>:
     55e:	fc 01       	movw	r30, r24
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	08 95       	ret

00000566 <LL_AddBack>:
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	ec 01       	movw	r28, r24
     56c:	cb 01       	movw	r24, r22
     56e:	01 c0       	rjmp	.+2      	; 0x572 <LL_AddBack+0xc>
     570:	e9 01       	movw	r28, r18
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	3b 81       	ldd	r19, Y+3	; 0x03
     576:	21 15       	cp	r18, r1
     578:	31 05       	cpc	r19, r1
     57a:	d1 f7       	brne	.-12     	; 0x570 <LL_AddBack+0xa>
     57c:	e0 df       	rcall	.-64     	; 0x53e <LL_ItemListInit>
     57e:	9b 83       	std	Y+3, r25	; 0x03
     580:	8a 83       	std	Y+2, r24	; 0x02
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <LL_Size>:
     588:	dc 01       	movw	r26, r24
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	ed 91       	ld	r30, X+
     58e:	fc 91       	ld	r31, X
     590:	13 97       	sbiw	r26, 0x03	; 3
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	41 f0       	breq	.+16     	; 0x5a6 <LL_Size+0x1e>
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	02 80       	ldd	r0, Z+2	; 0x02
     59c:	f3 81       	ldd	r31, Z+3	; 0x03
     59e:	e0 2d       	mov	r30, r0
     5a0:	30 97       	sbiw	r30, 0x00	; 0
     5a2:	d1 f7       	brne	.-12     	; 0x598 <LL_Size+0x10>
     5a4:	08 95       	ret
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	08 95       	ret

000005aa <LL_GetClass>:
     5aa:	dc 01       	movw	r26, r24
     5ac:	ed 91       	ld	r30, X+
     5ae:	fc 91       	ld	r31, X
     5b0:	83 81       	ldd	r24, Z+3	; 0x03
     5b2:	08 95       	ret

000005b4 <LL_GetRefl>:
     5b4:	dc 01       	movw	r26, r24
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	80 81       	ld	r24, Z
     5bc:	91 81       	ldd	r25, Z+1	; 0x01
     5be:	08 95       	ret

000005c0 <LL_GetMag>:
     5c0:	dc 01       	movw	r26, r24
     5c2:	ed 91       	ld	r30, X+
     5c4:	fc 91       	ld	r31, X
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	08 95       	ret

000005ca <LL_UpdateRefl>:
     5ca:	dc 01       	movw	r26, r24
     5cc:	ed 91       	ld	r30, X+
     5ce:	fc 91       	ld	r31, X
     5d0:	71 83       	std	Z+1, r23	; 0x01
     5d2:	60 83       	st	Z, r22
     5d4:	08 95       	ret

000005d6 <LL_UpdateMag>:
     5d6:	dc 01       	movw	r26, r24
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	62 83       	std	Z+2, r22	; 0x02
     5de:	08 95       	ret

000005e0 <LL_UpdateClass>:
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	63 83       	std	Z+3, r22	; 0x03
     5e8:	08 95       	ret

000005ea <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5ea:	dc 01       	movw	r26, r24
     5ec:	ed 91       	ld	r30, X+
     5ee:	fc 91       	ld	r31, X
     5f0:	64 83       	std	Z+4, r22	; 0x04
     5f2:	08 95       	ret

000005f4 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5f4:	dc 01       	movw	r26, r24
     5f6:	ed 91       	ld	r30, X+
     5f8:	fc 91       	ld	r31, X
     5fa:	84 81       	ldd	r24, Z+4	; 0x04
     5fc:	08 95       	ret

000005fe <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     602:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     604:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     606:	80 ef       	ldi	r24, 0xF0	; 240
     608:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     60a:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     60c:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret

00000614 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     614:	72 d2       	rcall	.+1252   	; 0xafa <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     616:	89 b1       	in	r24, 0x09	; 9
     618:	83 70       	andi	r24, 0x03	; 3
     61a:	e9 f7       	brne	.-6      	; 0x616 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     61c:	8b e1       	ldi	r24, 0x1B	; 27
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	68 d5       	rcall	.+2768   	; 0x10f2 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     622:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	45 ec       	ldi	r20, 0xC5	; 197
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	e5 d4       	rcall	.+2506   	; 0x1000 <TIMER_Create>
		_timer[0].state = READY;
     636:	c3 e2       	ldi	r28, 0x23	; 35
     638:	d3 e0       	ldi	r29, 0x03	; 3
     63a:	12 e0       	ldi	r17, 0x02	; 2
     63c:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4c e3       	ldi	r20, 0x3C	; 60
     644:	51 e0       	ldi	r21, 0x01	; 1
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	d8 d4       	rcall	.+2480   	; 0x1000 <TIMER_Create>
		_timer[1].state = BLOCKED;
     650:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	4f ec       	ldi	r20, 0xCF	; 207
     658:	51 e0       	ldi	r21, 0x01	; 1
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	ce d4       	rcall	.+2460   	; 0x1000 <TIMER_Create>
		_timer[2].state = BLOCKED;
     664:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	4e e0       	ldi	r20, 0x0E	; 14
     66c:	52 e0       	ldi	r21, 0x02	; 2
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	c4 d4       	rcall	.+2440   	; 0x1000 <TIMER_Create>
		_timer[3].state = BLOCKED;
     678:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(943, 1, ADD_Task, NULL);		// Item Enter Handling
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	41 e8       	ldi	r20, 0x81	; 129
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	8f ea       	ldi	r24, 0xAF	; 175
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	ba d4       	rcall	.+2420   	; 0x1000 <TIMER_Create>
		_timer[4].state = BLOCKED;
     68c:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	44 e5       	ldi	r20, 0x54	; 84
     694:	52 e0       	ldi	r21, 0x02	; 2
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	84 e6       	ldi	r24, 0x64	; 100
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	b0 d4       	rcall	.+2400   	; 0x1000 <TIMER_Create>
		_timer[5].state = READY;
     6a0:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	4c e7       	ldi	r20, 0x7C	; 124
     6a8:	52 e0       	ldi	r21, 0x02	; 2
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	80 ed       	ldi	r24, 0xD0	; 208
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	a6 d4       	rcall	.+2380   	; 0x1000 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     6b4:	1e af       	std	Y+62, r17	; 0x3e
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	41 e7       	ldi	r20, 0x71	; 113
     6bc:	52 e0       	ldi	r21, 0x02	; 2
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     6c4:	93 e1       	ldi	r25, 0x13	; 19
     6c6:	9c d4       	rcall	.+2360   	; 0x1000 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     6c8:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <_timer+0x47>
     6cc:	8e e2       	ldi	r24, 0x2E	; 46
     6ce:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     6d0:	10 d5       	rcall	.+2592   	; 0x10f2 <UART_SendString>
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	7e d0       	rcall	.+252    	; 0x7d4 <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     6d8:	78 94       	sei
     6da:	e1 2c       	mov	r14, r1
// 					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     6dc:	f1 2c       	mov	r15, r1
     6de:	cc 24       	eor	r12, r12
     6e0:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6e2:	d1 2c       	mov	r13, r1
     6e4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <g_PauseRequest>
     6e8:	88 23       	and	r24, r24
     6ea:	19 f0       	breq	.+6      	; 0x6f2 <main+0xde>
     6ec:	80 e4       	ldi	r24, 0x40	; 64
     6ee:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     6f0:	78 d2       	rcall	.+1264   	; 0xbe2 <SYS_Pause>
     6f2:	c0 91 01 03 	lds	r28, 0x0301	; 0x800301 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     6f6:	d0 91 02 03 	lds	r29, 0x0302	; 0x800302 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6fa:	20 97       	sbiw	r28, 0x00	; 0
     6fc:	99 f3       	breq	.-26     	; 0x6e4 <main+0xd0>
     6fe:	20 97       	sbiw	r28, 0x00	; 0
     700:	09 f4       	brne	.+2      	; 0x704 <main+0xf0>
     702:	4f c0       	rjmp	.+158    	; 0x7a2 <main+0x18e>
     704:	ce 01       	movw	r24, r28
     706:	51 df       	rcall	.-350    	; 0x5aa <LL_GetClass>
     708:	84 30       	cpi	r24, 0x04	; 4
     70a:	09 f0       	breq	.+2      	; 0x70e <main+0xfa>
     70c:	4a c0       	rjmp	.+148    	; 0x7a2 <main+0x18e>
     70e:	ce 01       	movw	r24, r28
     710:	71 df       	rcall	.-286    	; 0x5f4 <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	09 f0       	breq	.+2      	; 0x718 <main+0x104>
     716:	45 c0       	rjmp	.+138    	; 0x7a2 <main+0x18e>
     718:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     71a:	4c df       	rcall	.-360    	; 0x5b4 <LL_GetRefl>
     71c:	8c 01       	movw	r16, r24
     71e:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     720:	4f df       	rcall	.-354    	; 0x5c0 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     722:	88 23       	and	r24, r24
     724:	91 f0       	breq	.+36     	; 0x74a <main+0x136>
     726:	c8 01       	movw	r24, r16
     728:	44 97       	sbiw	r24, 0x14	; 20
     72a:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     72c:	91 05       	cpc	r25, r1
     72e:	20 f4       	brcc	.+8      	; 0x738 <main+0x124>
     730:	62 e0       	ldi	r22, 0x02	; 2
     732:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     734:	55 df       	rcall	.-342    	; 0x5e0 <LL_UpdateClass>
     736:	1a c0       	rjmp	.+52     	; 0x76c <main+0x158>
     738:	0c 52       	subi	r16, 0x2C	; 44
     73a:	11 40       	sbci	r17, 0x01	; 1
     73c:	0f 35       	cpi	r16, 0x5F	; 95
					{
						LL_UpdateClass(temp, STEEL);
     73e:	11 40       	sbci	r17, 0x01	; 1
     740:	a8 f4       	brcc	.+42     	; 0x76c <main+0x158>
     742:	63 e0       	ldi	r22, 0x03	; 3
     744:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     746:	4c df       	rcall	.-360    	; 0x5e0 <LL_UpdateClass>
     748:	11 c0       	rjmp	.+34     	; 0x76c <main+0x158>
     74a:	c8 01       	movw	r24, r16
     74c:	89 58       	subi	r24, 0x89	; 137
     74e:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     750:	0b 97       	sbiw	r24, 0x0b	; 11
     752:	20 f4       	brcc	.+8      	; 0x75c <main+0x148>
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     758:	43 df       	rcall	.-378    	; 0x5e0 <LL_UpdateClass>
     75a:	08 c0       	rjmp	.+16     	; 0x76c <main+0x158>
     75c:	00 52       	subi	r16, 0x20	; 32
     75e:	13 40       	sbci	r17, 0x03	; 3
     760:	07 39       	cpi	r16, 0x97	; 151
				{
					LL_UpdateClass(temp, BLACK);
     762:	11 05       	cpc	r17, r1
     764:	18 f4       	brcc	.+6      	; 0x76c <main+0x158>
     766:	61 e0       	ldi	r22, 0x01	; 1
// 					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
				if(memory == 0)
     768:	ce 01       	movw	r24, r28
     76a:	3a df       	rcall	.-396    	; 0x5e0 <LL_UpdateClass>
     76c:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     76e:	f1 04       	cpc	r15, r1
     770:	c1 f4       	brne	.+48     	; 0x7a2 <main+0x18e>
     772:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     776:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     77a:	17 df       	rcall	.-466    	; 0x5aa <LL_GetClass>
     77c:	e8 2f       	mov	r30, r24
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	e1 5f       	subi	r30, 0xF1	; 241
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	10 81       	ld	r17, Z
     786:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     78a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     78e:	0d df       	rcall	.-486    	; 0x5aa <LL_GetClass>
     790:	e8 2f       	mov	r30, r24
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	e1 5f       	subi	r30, 0xF1	; 241
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	80 81       	ld	r24, Z
     79a:	61 2f       	mov	r22, r17
					memory = 1;
     79c:	a5 d0       	rcall	.+330    	; 0x8e8 <STEPPER_SetRotation>
     79e:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     7a0:	fd 2c       	mov	r15, r13
     7a2:	ce 01       	movw	r24, r28
     7a4:	dc de       	rcall	.-584    	; 0x55e <LL_Next>
     7a6:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     7a8:	89 2b       	or	r24, r25
     7aa:	09 f0       	breq	.+2      	; 0x7ae <main+0x19a>
     7ac:	a8 cf       	rjmp	.-176    	; 0x6fe <main+0xea>
     7ae:	9a cf       	rjmp	.-204    	; 0x6e4 <main+0xd0>

000007b0 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     7ba:	8a ea       	ldi	r24, 0xAA	; 170
     7bc:	88 b9       	out	0x08, r24	; 8
     7be:	fe cf       	rjmp	.-4      	; 0x7bc <__vector_default+0xc>

000007c0 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     7c0:	84 b5       	in	r24, 0x24	; 36
     7c2:	83 68       	ori	r24, 0x83	; 131
     7c4:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     7c6:	85 b5       	in	r24, 0x25	; 37
     7c8:	83 60       	ori	r24, 0x03	; 3
     7ca:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     7cc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     7d0:	87 bd       	out	0x27, r24	; 39
     7d2:	08 95       	ret

000007d4 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     7d4:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     7d6:	9f b7       	in	r25, 0x3f	; 63
     7d8:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     7da:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     7de:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     7e0:	23 2b       	or	r18, r19
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <PWM+0x1c>
		{
			g_MotorOn = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <g_MotorOn>
			PORTB = ~0x0E;
     7ea:	81 ef       	ldi	r24, 0xF1	; 241
     7ec:	85 b9       	out	0x05, r24	; 5
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     7f0:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <g_MotorOn>
			PORTB = ~0x0F;
     7f4:	80 ef       	ldi	r24, 0xF0	; 240
     7f6:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7f8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     7fa:	08 95       	ret

000007fc <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     7fc:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     7fe:	ee e6       	ldi	r30, 0x6E	; 110
     800:	f3 e0       	ldi	r31, 0x03	; 3
     802:	10 82       	st	Z, r1
	stepper.direction = 1;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     808:	13 82       	std	Z+3, r1	; 0x03
     80a:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     80c:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     80e:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     810:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     812:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     814:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	96 83       	std	Z+6, r25	; 0x06
     81c:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     81e:	80 e3       	ldi	r24, 0x30	; 48
     820:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     822:	84 e9       	ldi	r24, 0x94	; 148
     824:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     828:	e0 eb       	ldi	r30, 0xB0	; 176
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	82 60       	ori	r24, 0x02	; 2
     830:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     832:	e0 e7       	ldi	r30, 0x70	; 112
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	82 60       	ori	r24, 0x02	; 2
     83a:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     83c:	e1 eb       	ldi	r30, 0xB1	; 177
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	87 60       	ori	r24, 0x07	; 7
     844:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     846:	78 94       	sei
     848:	08 95       	ret

0000084a <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	86 1b       	sub	r24, r22
     84e:	91 09       	sbc	r25, r1
	if (steps >= 0)
     850:	52 f0       	brmi	.+20     	; 0x866 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     852:	85 36       	cpi	r24, 0x65	; 101
     854:	91 05       	cpc	r25, r1
     856:	8c f0       	brlt	.+34     	; 0x87a <STEPPER_NumSteps+0x30>
     858:	24 e6       	ldi	r18, 0x64	; 100
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	a9 01       	movw	r20, r18
     85e:	48 1b       	sub	r20, r24
     860:	59 0b       	sbc	r21, r25
     862:	ca 01       	movw	r24, r20
     864:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     866:	8c 39       	cpi	r24, 0x9C	; 156
     868:	5f ef       	ldi	r21, 0xFF	; 255
     86a:	95 07       	cpc	r25, r21
     86c:	34 f4       	brge	.+12     	; 0x87a <STEPPER_NumSteps+0x30>
     86e:	2c e9       	ldi	r18, 0x9C	; 156
     870:	3f ef       	ldi	r19, 0xFF	; 255
     872:	a9 01       	movw	r20, r18
     874:	48 1b       	sub	r20, r24
     876:	59 0b       	sbc	r21, r25
     878:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     87a:	08 95       	ret

0000087c <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     880:	ce e6       	ldi	r28, 0x6E	; 110
     882:	d3 e0       	ldi	r29, 0x03	; 3
     884:	6c 81       	ldd	r22, Y+4	; 0x04
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	9b 81       	ldd	r25, Y+3	; 0x03
     88a:	df df       	rcall	.-66     	; 0x84a <STEPPER_NumSteps>
     88c:	9e 83       	std	Y+6, r25	; 0x06
     88e:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     890:	6a 81       	ldd	r22, Y+2	; 0x02
     892:	7b 81       	ldd	r23, Y+3	; 0x03
     894:	88 85       	ldd	r24, Y+8	; 0x08
     896:	d9 df       	rcall	.-78     	; 0x84a <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     898:	2d 81       	ldd	r18, Y+5	; 0x05
     89a:	3e 81       	ldd	r19, Y+6	; 0x06
     89c:	33 23       	and	r19, r19
     89e:	14 f4       	brge	.+4      	; 0x8a4 <STEPPER_Rotate+0x28>
     8a0:	28 e0       	ldi	r18, 0x08	; 8
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <STEPPER_Rotate+0x2a>
     8a4:	24 e0       	ldi	r18, 0x04	; 4
     8a6:	ee e6       	ldi	r30, 0x6E	; 110
     8a8:	f3 e0       	ldi	r31, 0x03	; 3
     8aa:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     8ac:	45 81       	ldd	r20, Z+5	; 0x05
     8ae:	56 81       	ldd	r21, Z+6	; 0x06
     8b0:	84 9f       	mul	r24, r20
     8b2:	90 01       	movw	r18, r0
     8b4:	85 9f       	mul	r24, r21
     8b6:	30 0d       	add	r19, r0
     8b8:	94 9f       	mul	r25, r20
     8ba:	30 0d       	add	r19, r0
     8bc:	11 24       	eor	r1, r1
     8be:	83 2f       	mov	r24, r19
     8c0:	80 95       	com	r24
     8c2:	88 1f       	adc	r24, r24
     8c4:	88 27       	eor	r24, r24
     8c6:	88 1f       	adc	r24, r24
     8c8:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     8ca:	85 81       	ldd	r24, Z+5	; 0x05
     8cc:	96 81       	ldd	r25, Z+6	; 0x06
     8ce:	99 23       	and	r25, r25
     8d0:	1c f4       	brge	.+6      	; 0x8d8 <STEPPER_Rotate+0x5c>
     8d2:	91 95       	neg	r25
     8d4:	81 95       	neg	r24
     8d6:	91 09       	sbc	r25, r1
     8d8:	ee e6       	ldi	r30, 0x6E	; 110
     8da:	f3 e0       	ldi	r31, 0x03	; 3
     8dc:	96 83       	std	Z+6, r25	; 0x06
     8de:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     8e0:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
	cli();
     8ec:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	ce e6       	ldi	r28, 0x6E	; 110
     8f2:	d3 e0       	ldi	r29, 0x03	; 3
     8f4:	9b 83       	std	Y+3, r25	; 0x03
     8f6:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     8f8:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     8fa:	c0 df       	rcall	.-128    	; 0x87c <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     8fc:	eb 85       	ldd	r30, Y+11	; 0x0b
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	eb 5e       	subi	r30, 0xEB	; 235
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	80 81       	ld	r24, Z
     906:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     90a:	78 94       	sei
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	0b b6       	in	r0, 0x3b	; 59
     91e:	0f 92       	push	r0
     920:	2f 93       	push	r18
     922:	3f 93       	push	r19
     924:	4f 93       	push	r20
     926:	5f 93       	push	r21
     928:	6f 93       	push	r22
     92a:	7f 93       	push	r23
     92c:	8f 93       	push	r24
     92e:	9f 93       	push	r25
     930:	af 93       	push	r26
     932:	bf 93       	push	r27
     934:	ef 93       	push	r30
     936:	ff 93       	push	r31
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	00 d0       	rcall	.+0      	; 0x93e <__vector_13+0x2c>
     93e:	00 d0       	rcall	.+0      	; 0x940 <__vector_13+0x2e>
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     944:	86 e3       	ldi	r24, 0x36	; 54
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	9e e2       	ldi	r25, 0x2E	; 46
     94e:	ad e2       	ldi	r26, 0x2D	; 45
     950:	b5 e3       	ldi	r27, 0x35	; 53
     952:	89 83       	std	Y+1, r24	; 0x01
     954:	9a 83       	std	Y+2, r25	; 0x02
     956:	ab 83       	std	Y+3, r26	; 0x03
     958:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     95a:	ee e6       	ldi	r30, 0x6E	; 110
     95c:	f3 e0       	ldi	r31, 0x03	; 3
     95e:	87 81       	ldd	r24, Z+7	; 0x07
     960:	25 81       	ldd	r18, Z+5	; 0x05
     962:	36 81       	ldd	r19, Z+6	; 0x06
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	82 17       	cp	r24, r18
     968:	93 07       	cpc	r25, r19
     96a:	0c f0       	brlt	.+2      	; 0x96e <__vector_13+0x5c>
     96c:	71 c0       	rjmp	.+226    	; 0xa50 <__vector_13+0x13e>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     96e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <stepper+0x1>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	51 f4       	brne	.+20     	; 0x98a <__vector_13+0x78>
     976:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stepper>
     97a:	e1 e0       	ldi	r30, 0x01	; 1
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ec 0f       	add	r30, r28
     980:	fd 1f       	adc	r31, r29
     982:	e8 0f       	add	r30, r24
     984:	f1 1d       	adc	r31, r1
     986:	80 81       	ld	r24, Z
     988:	0d c0       	rjmp	.+26     	; 0x9a4 <__vector_13+0x92>
     98a:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stepper>
     98e:	e3 e0       	ldi	r30, 0x03	; 3
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	e8 1b       	sub	r30, r24
     994:	f1 09       	sbc	r31, r1
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	8c 0f       	add	r24, r28
     99c:	9d 1f       	adc	r25, r29
     99e:	e8 0f       	add	r30, r24
     9a0:	f9 1f       	adc	r31, r25
     9a2:	80 81       	ld	r24, Z
     9a4:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     9a6:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stepper>
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	21 f0       	breq	.+8      	; 0x9b6 <__vector_13+0xa4>
     9ae:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stepper>
     9b2:	8f 5f       	subi	r24, 0xFF	; 255
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__vector_13+0xa6>
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	ee e6       	ldi	r30, 0x6E	; 110
     9ba:	f3 e0       	ldi	r31, 0x03	; 3
     9bc:	80 83       	st	Z, r24

		stepper._currentStep++;
     9be:	87 81       	ldd	r24, Z+7	; 0x07
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	87 83       	std	Z+7, r24	; 0x07
		if((LL_GetStatus(HEAD) != UNINITIALIZED) && ((stepper._targetStep - stepper._currentStep) < 15)) 
     9c4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     9c8:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     9cc:	13 de       	rcall	.-986    	; 0x5f4 <LL_GetStatus>
     9ce:	88 23       	and	r24, r24
     9d0:	71 f0       	breq	.+28     	; 0x9ee <__vector_13+0xdc>
     9d2:	ee e6       	ldi	r30, 0x6E	; 110
     9d4:	f3 e0       	ldi	r31, 0x03	; 3
     9d6:	85 81       	ldd	r24, Z+5	; 0x05
     9d8:	96 81       	ldd	r25, Z+6	; 0x06
     9da:	27 81       	ldd	r18, Z+7	; 0x07
     9dc:	82 1b       	sub	r24, r18
     9de:	91 09       	sbc	r25, r1
     9e0:	0f 97       	sbiw	r24, 0x0f	; 15
     9e2:	2c f4       	brge	.+10     	; 0x9ee <__vector_13+0xdc>
		{
			PWM(1);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	f5 de       	rcall	.-534    	; 0x7d4 <PWM>
			g_ExitBuffer = 0;
     9ea:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ExitBuffer>
		}
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     9ee:	ee e6       	ldi	r30, 0x6E	; 110
     9f0:	f3 e0       	ldi	r31, 0x03	; 3
     9f2:	85 81       	ldd	r24, Z+5	; 0x05
     9f4:	96 81       	ldd	r25, Z+6	; 0x06
     9f6:	27 81       	ldd	r18, Z+7	; 0x07
     9f8:	82 1b       	sub	r24, r18
     9fa:	91 09       	sbc	r25, r1
     9fc:	06 97       	sbiw	r24, 0x06	; 6
     9fe:	74 f4       	brge	.+28     	; 0xa1c <__vector_13+0x10a>
     a00:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <stepper+0xb>
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	eb 5e       	subi	r30, 0xEB	; 235
     a08:	fe 4f       	sbci	r31, 0xFE	; 254
     a0a:	80 81       	ld	r24, Z
     a0c:	84 39       	cpi	r24, 0x94	; 148
     a0e:	30 f4       	brcc	.+12     	; 0xa1c <__vector_13+0x10a>
		{
			stepper._accellStep--;
     a10:	ee e6       	ldi	r30, 0x6E	; 110
     a12:	f3 e0       	ldi	r31, 0x03	; 3
     a14:	83 85       	ldd	r24, Z+11	; 0x0b
     a16:	81 50       	subi	r24, 0x01	; 1
     a18:	83 87       	std	Z+11, r24	; 0x0b
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <__vector_13+0x12c>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a1c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <stepper+0x7>
     a20:	86 30       	cpi	r24, 0x06	; 6
     a22:	68 f0       	brcs	.+26     	; 0xa3e <__vector_13+0x12c>
     a24:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <stepper+0xb>
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	eb 5e       	subi	r30, 0xEB	; 235
     a2c:	fe 4f       	sbci	r31, 0xFE	; 254
     a2e:	80 81       	ld	r24, Z
     a30:	81 34       	cpi	r24, 0x41	; 65
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__vector_13+0x12c>
		{
			stepper._accellStep++;
     a34:	ee e6       	ldi	r30, 0x6E	; 110
     a36:	f3 e0       	ldi	r31, 0x03	; 3
     a38:	83 85       	ldd	r24, Z+11	; 0x0b
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a3e:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <stepper+0xb>
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	eb 5e       	subi	r30, 0xEB	; 235
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	80 81       	ld	r24, Z
     a4a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a4e:	29 c0       	rjmp	.+82     	; 0xaa2 <__vector_13+0x190>
	}
	else if (stepper._currentStep == stepper._targetStep)
     a50:	ee e6       	ldi	r30, 0x6E	; 110
     a52:	f3 e0       	ldi	r31, 0x03	; 3
     a54:	87 81       	ldd	r24, Z+7	; 0x07
     a56:	25 81       	ldd	r18, Z+5	; 0x05
     a58:	36 81       	ldd	r19, Z+6	; 0x06
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	82 17       	cp	r24, r18
     a5e:	93 07       	cpc	r25, r19
     a60:	01 f5       	brne	.+64     	; 0xaa2 <__vector_13+0x190>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a62:	82 81       	ldd	r24, Z+2	; 0x02
     a64:	93 81       	ldd	r25, Z+3	; 0x03
     a66:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a68:	81 85       	ldd	r24, Z+9	; 0x09
     a6a:	88 23       	and	r24, r24
     a6c:	19 f0       	breq	.+6      	; 0xa74 <__vector_13+0x162>
     a6e:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <stepper+0xb>
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__vector_13+0x164>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	ae e6       	ldi	r26, 0x6E	; 110
     a78:	b3 e0       	ldi	r27, 0x03	; 3
     a7a:	1b 96       	adiw	r26, 0x0b	; 11
     a7c:	8c 93       	st	X, r24
     a7e:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a80:	1b 96       	adiw	r26, 0x0b	; 11
     a82:	ec 91       	ld	r30, X
     a84:	1b 97       	sbiw	r26, 0x0b	; 11
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	eb 5e       	subi	r30, 0xEB	; 235
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	80 81       	ld	r24, Z
     a8e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     a92:	19 96       	adiw	r26, 0x09	; 9
     a94:	8c 91       	ld	r24, X
     a96:	81 11       	cpse	r24, r1
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__vector_13+0x18c>
     a9a:	82 b1       	in	r24, 0x02	; 2
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <__vector_13+0x18e>
     a9e:	82 b1       	in	r24, 0x02	; 2
     aa0:	82 b9       	out	0x02, r24	; 2
		//if(HEAD->prev) STEPPER_SetRotation(position[LL_GetClass(HEAD->prev)], position[LL_GetClass(HEAD)]);
	}
	if (stepper._isInitiated == 0)
     aa2:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper+0xa>
     aa6:	81 11       	cpse	r24, r1
     aa8:	0f c0       	rjmp	.+30     	; 0xac8 <__vector_13+0x1b6>
	{
		if ((PINE & 0x08) == 0)
     aaa:	63 99       	sbic	0x0c, 3	; 12
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <__vector_13+0x1b6>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     aae:	ee e6       	ldi	r30, 0x6E	; 110
     ab0:	f3 e0       	ldi	r31, 0x03	; 3
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     ab6:	10 82       	st	Z, r1
			stepper.direction = 1;
     ab8:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     aba:	13 82       	std	Z+3, r1	; 0x03
     abc:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     abe:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ac0:	16 82       	std	Z+6, r1	; 0x06
     ac2:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ac4:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     ac6:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	ff 91       	pop	r31
     ad6:	ef 91       	pop	r30
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	0f 90       	pop	r0
     aee:	0b be       	out	0x3b, r0	; 59
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	f8 94       	cli
     b02:	e1 e6       	ldi	r30, 0x61	; 97
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 e8       	ldi	r24, 0x80	; 128
     b08:	80 83       	st	Z, r24
     b0a:	10 82       	st	Z, r1
     b0c:	da d2       	rcall	.+1460   	; 0x10c2 <UART_Init>
     b0e:	77 dd       	rcall	.-1298   	; 0x5fe <GPIO_Init>
     b10:	5d d2       	rcall	.+1210   	; 0xfcc <TIMER_Init>
     b12:	56 de       	rcall	.-852    	; 0x7c0 <PWM_Init>
     b14:	e0 da       	rcall	.-2624   	; 0xd6 <ADC_Init>
     b16:	72 de       	rcall	.-796    	; 0x7fc <STEPPER_Init>
     b18:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <g_ADCCount+0x1>
     b1c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <g_ADCCount>
     b20:	84 e1       	ldi	r24, 0x14	; 20
     b22:	e7 e0       	ldi	r30, 0x07	; 7
     b24:	f3 e0       	ldi	r31, 0x03	; 3
     b26:	df 01       	movw	r26, r30
     b28:	1d 92       	st	X+, r1
     b2a:	8a 95       	dec	r24
     b2c:	e9 f7       	brne	.-6      	; 0xb28 <SYS_Init+0x2e>
     b2e:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <g_PauseRequest>
     b32:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_WDTimeout>
     b36:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <g_Timer>
     b3a:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ExitBuffer>
     b3e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <HEAD+0x1>
     b42:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <HEAD>
     b46:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <TAIL+0x1>
     b4a:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <TAIL>
     b4e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <STAGE1+0x1>
     b52:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <STAGE1>
     b56:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <STAGE2+0x1>
     b5a:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <STAGE2>
     b5e:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <FRONT+0x1>
     b62:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <FRONT>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	44 e0       	ldi	r20, 0x04	; 4
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	89 ee       	ldi	r24, 0xE9	; 233
     b6e:	9d ef       	ldi	r25, 0xFD	; 253
     b70:	ce dc       	rcall	.-1636   	; 0x50e <LL_ItemInit>
     b72:	e5 dc       	rcall	.-1590   	; 0x53e <LL_ItemListInit>
     b74:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <HEAD+0x1>
     b78:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <HEAD>
     b7c:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <FRONT+0x1>
     b80:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <FRONT>
     b84:	ca ef       	ldi	r28, 0xFA	; 250
     b86:	08 ee       	ldi	r16, 0xE8	; 232
     b88:	1d ef       	ldi	r17, 0xFD	; 253
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	44 e0       	ldi	r20, 0x04	; 4
     b8e:	6c 2f       	mov	r22, r28
     b90:	c8 01       	movw	r24, r16
     b92:	bd dc       	rcall	.-1670   	; 0x50e <LL_ItemInit>
     b94:	bc 01       	movw	r22, r24
     b96:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     b9a:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     b9e:	e3 dc       	rcall	.-1594   	; 0x566 <LL_AddBack>
     ba0:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <TAIL+0x1>
     ba4:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <TAIL>
     ba8:	01 50       	subi	r16, 0x01	; 1
     baa:	11 09       	sbc	r17, r1
     bac:	c1 50       	subi	r28, 0x01	; 1
     bae:	cb 3c       	cpi	r28, 0xCB	; 203
     bb0:	61 f7       	brne	.-40     	; 0xb8a <SYS_Init+0x90>
     bb2:	05 e0       	ldi	r16, 0x05	; 5
     bb4:	10 e0       	ldi	r17, 0x00	; 0
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	45 e0       	ldi	r20, 0x05	; 5
     bba:	6a ef       	ldi	r22, 0xFA	; 250
     bbc:	88 ee       	ldi	r24, 0xE8	; 232
     bbe:	9d ef       	ldi	r25, 0xFD	; 253
     bc0:	a6 dc       	rcall	.-1716   	; 0x50e <LL_ItemInit>
     bc2:	bc 01       	movw	r22, r24
     bc4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <HEAD>
     bc8:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <HEAD+0x1>
     bcc:	cc dc       	rcall	.-1640   	; 0x566 <LL_AddBack>
     bce:	01 50       	subi	r16, 0x01	; 1
     bd0:	11 09       	sbc	r17, r1
     bd2:	89 f7       	brne	.-30     	; 0xbb6 <SYS_Init+0xbc>
     bd4:	86 e4       	ldi	r24, 0x46	; 70
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	8c d2       	rcall	.+1304   	; 0x10f2 <UART_SendString>
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	08 95       	ret

00000be2 <SYS_Pause>:
     be2:	3f 92       	push	r3
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	ca 5f       	subi	r28, 0xFA	; 250
     c0a:	d1 09       	sbc	r29, r1
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	f8 2e       	mov	r15, r24
     c18:	e9 2e       	mov	r14, r25
     c1a:	f8 94       	cli
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	d9 dd       	rcall	.-1102   	; 0x7d4 <PWM>
     c22:	00 91 03 03 	lds	r16, 0x0303	; 0x800303 <FRONT>
     c26:	10 91 04 03 	lds	r17, 0x0304	; 0x800304 <FRONT+0x1>
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	8c e5       	ldi	r24, 0x5C	; 92
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	9f 93       	push	r25
     c34:	8f 93       	push	r24
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	7c 01       	movw	r14, r24
     c3c:	9f 93       	push	r25
     c3e:	8f 93       	push	r24
     c40:	78 d4       	rcall	.+2288   	; 0x1532 <sprintf>
     c42:	c7 01       	movw	r24, r14
     c44:	56 d2       	rcall	.+1196   	; 0x10f2 <UART_SendString>
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	e1 2c       	mov	r14, r1
     c54:	f1 2c       	mov	r15, r1
     c56:	0f 2e       	mov	r0, r31
     c58:	f7 e7       	ldi	r31, 0x77	; 119
     c5a:	af 2e       	mov	r10, r31
     c5c:	f1 e0       	ldi	r31, 0x01	; 1
     c5e:	bf 2e       	mov	r11, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	6e 01       	movw	r12, r28
     c64:	97 e9       	ldi	r25, 0x97	; 151
     c66:	c9 0e       	add	r12, r25
     c68:	d1 1c       	adc	r13, r1
     c6a:	27 c0       	rjmp	.+78     	; 0xcba <SYS_Pause+0xd8>
     c6c:	ef ef       	ldi	r30, 0xFF	; 255
     c6e:	ee 1a       	sub	r14, r30
     c70:	fe 0a       	sbc	r15, r30
     c72:	c8 01       	movw	r24, r16
     c74:	bf dc       	rcall	.-1666   	; 0x5f4 <LL_GetStatus>
     c76:	78 2e       	mov	r7, r24
     c78:	c8 01       	movw	r24, r16
     c7a:	97 dc       	rcall	.-1746   	; 0x5aa <LL_GetClass>
     c7c:	88 2e       	mov	r8, r24
     c7e:	c8 01       	movw	r24, r16
     c80:	9f dc       	rcall	.-1730   	; 0x5c0 <LL_GetMag>
     c82:	98 2e       	mov	r9, r24
     c84:	c8 01       	movw	r24, r16
     c86:	96 dc       	rcall	.-1748   	; 0x5b4 <LL_GetRefl>
     c88:	1f 92       	push	r1
     c8a:	7f 92       	push	r7
     c8c:	1f 92       	push	r1
     c8e:	8f 92       	push	r8
     c90:	1f 92       	push	r1
     c92:	9f 92       	push	r9
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	ff 92       	push	r15
     c9a:	ef 92       	push	r14
     c9c:	bf 92       	push	r11
     c9e:	af 92       	push	r10
     ca0:	df 92       	push	r13
     ca2:	cf 92       	push	r12
     ca4:	46 d4       	rcall	.+2188   	; 0x1532 <sprintf>
     ca6:	c6 01       	movw	r24, r12
     ca8:	24 d2       	rcall	.+1096   	; 0x10f2 <UART_SendString>
     caa:	c8 01       	movw	r24, r16
     cac:	58 dc       	rcall	.-1872   	; 0x55e <LL_Next>
     cae:	8c 01       	movw	r16, r24
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	c8 01       	movw	r24, r16
     cbc:	76 dc       	rcall	.-1812   	; 0x5aa <LL_GetClass>
     cbe:	85 30       	cpi	r24, 0x05	; 5
     cc0:	a9 f6       	brne	.-86     	; 0xc6c <SYS_Pause+0x8a>
     cc2:	0f 2e       	mov	r0, r31
     cc4:	f3 e2       	ldi	r31, 0x23	; 35
     cc6:	cf 2e       	mov	r12, r31
     cc8:	f3 e0       	ldi	r31, 0x03	; 3
     cca:	df 2e       	mov	r13, r31
     ccc:	f0 2d       	mov	r31, r0
     cce:	00 e0       	ldi	r16, 0x00	; 0
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	0f 2e       	mov	r0, r31
     cd4:	fb ea       	ldi	r31, 0xAB	; 171
     cd6:	af 2e       	mov	r10, r31
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	bf 2e       	mov	r11, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	7e 01       	movw	r14, r28
     ce0:	97 e9       	ldi	r25, 0x97	; 151
     ce2:	e9 0e       	add	r14, r25
     ce4:	f1 1c       	adc	r15, r1
     ce6:	f6 01       	movw	r30, r12
     ce8:	80 85       	ldd	r24, Z+8	; 0x08
     cea:	1f 92       	push	r1
     cec:	8f 93       	push	r24
     cee:	1f 93       	push	r17
     cf0:	0f 93       	push	r16
     cf2:	bf 92       	push	r11
     cf4:	af 92       	push	r10
     cf6:	ff 92       	push	r15
     cf8:	ef 92       	push	r14
     cfa:	1b d4       	rcall	.+2102   	; 0x1532 <sprintf>
     cfc:	c7 01       	movw	r24, r14
     cfe:	f9 d1       	rcall	.+1010   	; 0x10f2 <UART_SendString>
     d00:	0f 5f       	subi	r16, 0xFF	; 255
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	f9 e0       	ldi	r31, 0x09	; 9
     d06:	cf 0e       	add	r12, r31
     d08:	d1 1c       	adc	r13, r1
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	07 30       	cpi	r16, 0x07	; 7
     d16:	11 05       	cpc	r17, r1
     d18:	31 f7       	brne	.-52     	; 0xce6 <SYS_Pause+0x104>
     d1a:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <STAGE2>
     d1e:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <STAGE2+0x1>
     d22:	48 dc       	rcall	.-1904   	; 0x5b4 <LL_GetRefl>
     d24:	48 2e       	mov	r4, r24
     d26:	39 2e       	mov	r3, r25
     d28:	60 90 6b 03 	lds	r6, 0x036B	; 0x80036b <STAGE2>
     d2c:	50 90 6c 03 	lds	r5, 0x036C	; 0x80036c <STAGE2+0x1>
     d30:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <STAGE1>
     d34:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <STAGE1+0x1>
     d38:	43 dc       	rcall	.-1914   	; 0x5c0 <LL_GetMag>
     d3a:	78 2e       	mov	r7, r24
     d3c:	90 90 21 03 	lds	r9, 0x0321	; 0x800321 <STAGE1>
     d40:	80 90 22 03 	lds	r8, 0x0322	; 0x800322 <STAGE1+0x1>
     d44:	00 91 05 03 	lds	r16, 0x0305	; 0x800305 <TAIL>
     d48:	10 91 06 03 	lds	r17, 0x0306	; 0x800306 <TAIL+0x1>
     d4c:	f8 01       	movw	r30, r16
     d4e:	b2 80       	ldd	r11, Z+2	; 0x02
     d50:	a3 80       	ldd	r10, Z+3	; 0x03
     d52:	d0 90 03 03 	lds	r13, 0x0303	; 0x800303 <FRONT>
     d56:	c0 90 04 03 	lds	r12, 0x0304	; 0x800304 <FRONT+0x1>
     d5a:	f0 90 01 03 	lds	r15, 0x0301	; 0x800301 <HEAD>
     d5e:	e0 90 02 03 	lds	r14, 0x0302	; 0x800302 <HEAD+0x1>
     d62:	8f 2d       	mov	r24, r15
     d64:	9e 2d       	mov	r25, r14
     d66:	10 dc       	rcall	.-2016   	; 0x588 <LL_Size>
     d68:	3f 92       	push	r3
     d6a:	4f 92       	push	r4
     d6c:	5f 92       	push	r5
     d6e:	6f 92       	push	r6
     d70:	1f 92       	push	r1
     d72:	7f 92       	push	r7
     d74:	8f 92       	push	r8
     d76:	9f 92       	push	r9
     d78:	af 92       	push	r10
     d7a:	bf 92       	push	r11
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	1f 93       	push	r17
     d82:	0f 93       	push	r16
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	1f 92       	push	r1
     d8a:	8f 93       	push	r24
     d8c:	82 ec       	ldi	r24, 0xC2	; 194
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	8e 01       	movw	r16, r28
     d96:	0b 59       	subi	r16, 0x9B	; 155
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	1f 93       	push	r17
     d9c:	0f 93       	push	r16
     d9e:	c9 d3       	rcall	.+1938   	; 0x1532 <sprintf>
     da0:	c8 01       	movw	r24, r16
     da2:	a7 d1       	rcall	.+846    	; 0x10f2 <UART_SendString>
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	89 b1       	in	r24, 0x09	; 9
     db0:	83 70       	andi	r24, 0x03	; 3
     db2:	e9 f7       	brne	.-6      	; 0xdae <SYS_Pause+0x1cc>
     db4:	8b e1       	ldi	r24, 0x1B	; 27
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	9c d1       	rcall	.+824    	; 0x10f2 <UART_SendString>
     dba:	80 e8       	ldi	r24, 0x80	; 128
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0a dd       	rcall	.-1516   	; 0x7d4 <PWM>
     dc0:	78 94       	sei
     dc2:	c6 50       	subi	r28, 0x06	; 6
     dc4:	df 4f       	sbci	r29, 0xFF	; 255
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	ff 90       	pop	r15
     dda:	ef 90       	pop	r14
     ddc:	df 90       	pop	r13
     dde:	cf 90       	pop	r12
     de0:	bf 90       	pop	r11
     de2:	af 90       	pop	r10
     de4:	9f 90       	pop	r9
     de6:	8f 90       	pop	r8
     de8:	7f 90       	pop	r7
     dea:	6f 90       	pop	r6
     dec:	5f 90       	pop	r5
     dee:	4f 90       	pop	r4
     df0:	3f 90       	pop	r3
     df2:	08 95       	ret

00000df4 <SYS_Rampdown>:

void SYS_Rampdown()
{
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	e8 97       	sbiw	r28, 0x38	; 56
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
     e0e:	fe 01       	movw	r30, r28
     e10:	31 96       	adiw	r30, 0x01	; 1
     e12:	86 e0       	ldi	r24, 0x06	; 6
     e14:	df 01       	movw	r26, r30
     e16:	1d 92       	st	X+, r1
     e18:	8a 95       	dec	r24
     e1a:	e9 f7       	brne	.-6      	; 0xe16 <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
     e1c:	00 91 03 03 	lds	r16, 0x0303	; 0x800303 <FRONT>
     e20:	10 91 04 03 	lds	r17, 0x0304	; 0x800304 <FRONT+0x1>
	
	cli();
     e24:	f8 94       	cli
	PORTD = 0;
     e26:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
     e28:	18 b8       	out	0x08, r1	; 8
	PWM(0);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	d2 dc       	rcall	.-1628   	; 0x7d4 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
     e30:	87 e3       	ldi	r24, 0x37	; 55
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	5e d1       	rcall	.+700    	; 0x10f2 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
     e36:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e38:	0f c0       	rjmp	.+30     	; 0xe58 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
     e3a:	f3 94       	inc	r15
     e3c:	c8 01       	movw	r24, r16
     e3e:	b5 db       	rcall	.-2198   	; 0x5aa <LL_GetClass>
     e40:	e1 e0       	ldi	r30, 0x01	; 1
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ec 0f       	add	r30, r28
     e46:	fd 1f       	adc	r31, r29
     e48:	e8 0f       	add	r30, r24
     e4a:	f1 1d       	adc	r31, r1
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
     e50:	80 83       	st	Z, r24
     e52:	c8 01       	movw	r24, r16
     e54:	84 db       	rcall	.-2296   	; 0x55e <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e56:	8c 01       	movw	r16, r24
     e58:	c8 01       	movw	r24, r16
     e5a:	cc db       	rcall	.-2152   	; 0x5f4 <LL_GetStatus>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	69 f3       	breq	.-38     	; 0xe3a <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	1f 92       	push	r1
     e64:	8f 93       	push	r24
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	1f 92       	push	r1
     e6a:	8f 93       	push	r24
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	1f 92       	push	r1
     e70:	8f 93       	push	r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	1f 92       	push	r1
     e76:	8f 93       	push	r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	1f 92       	push	r1
     e7c:	8f 93       	push	r24
     e7e:	1f 92       	push	r1
     e80:	ff 92       	push	r15
     e82:	8c e5       	ldi	r24, 0x5C	; 92
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	9f 93       	push	r25
     e88:	8f 93       	push	r24
     e8a:	8e 01       	movw	r16, r28
     e8c:	09 5f       	subi	r16, 0xF9	; 249
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	1f 93       	push	r17
     e92:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
     e94:	4e d3       	rcall	.+1692   	; 0x1532 <sprintf>
     e96:	c8 01       	movw	r24, r16
     e98:	2c d1       	rcall	.+600    	; 0x10f2 <UART_SendString>
	UART_SendString("Total time elapsed since item entered the first stage: ");
     e9a:	8b eb       	ldi	r24, 0xBB	; 187
     e9c:	92 e0       	ldi	r25, 0x02	; 2
     e9e:	29 d1       	rcall	.+594    	; 0x10f2 <UART_SendString>
	sprintf(str,"%.2f s\r\n",g_Timer*.25);
     ea0:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <g_Timer>
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	33 d1       	rcall	.+614    	; 0x1112 <__floatsisf>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e8       	ldi	r20, 0x80	; 128
     eb2:	5e e3       	ldi	r21, 0x3E	; 62
     eb4:	69 d1       	rcall	.+722    	; 0x1188 <__mulsf3>
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	7f 93       	push	r23
     ebc:	6f 93       	push	r22
     ebe:	83 ef       	ldi	r24, 0xF3	; 243
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	9f 93       	push	r25
     ec4:	8f 93       	push	r24
     ec6:	1f 93       	push	r17
     ec8:	0f 93       	push	r16
     eca:	33 d3       	rcall	.+1638   	; 0x1532 <sprintf>
	UART_SendString(str);
     ecc:	c8 01       	movw	r24, r16
     ece:	11 d1       	rcall	.+546    	; 0x10f2 <UART_SendString>
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	e8 96       	adiw	r28, 0x38	; 56
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	08 95       	ret

00000ef2 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	0b b6       	in	r0, 0x3b	; 59
     efe:	0f 92       	push	r0
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	2f 93       	push	r18
     f0a:	3f 93       	push	r19
     f0c:	4f 93       	push	r20
     f0e:	5f 93       	push	r21
     f10:	6f 93       	push	r22
     f12:	7f 93       	push	r23
     f14:	8f 93       	push	r24
     f16:	9f 93       	push	r25
     f18:	af 93       	push	r26
     f1a:	bf 93       	push	r27
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ef 93       	push	r30
     f22:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     f24:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_timer_tick>
     f28:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_timer_tick+0x1>
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <_timer_tick+0x1>
     f32:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <_timer_tick>
     f36:	c3 e2       	ldi	r28, 0x23	; 35
     f38:	d3 e0       	ldi	r29, 0x03	; 3
     f3a:	0f 2e       	mov	r0, r31
     f3c:	fb e6       	ldi	r31, 0x6B	; 107
     f3e:	ef 2e       	mov	r14, r31
     f40:	f3 e0       	ldi	r31, 0x03	; 3
     f42:	ff 2e       	mov	r15, r31
     f44:	f0 2d       	mov	r31, r0
     f46:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     f48:	ec 81       	ldd	r30, Y+4	; 0x04
     f4a:	fd 81       	ldd	r31, Y+5	; 0x05
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	09 f1       	breq	.+66     	; 0xf92 <__vector_17+0xa0>
     f50:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_timer_tick>
     f54:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <_timer_tick+0x1>
     f58:	28 81       	ld	r18, Y
     f5a:	39 81       	ldd	r19, Y+1	; 0x01
     f5c:	28 17       	cp	r18, r24
     f5e:	39 07       	cpc	r19, r25
     f60:	c1 f4       	brne	.+48     	; 0xf92 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     f62:	88 85       	ldd	r24, Y+8	; 0x08
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	19 f4       	brne	.+6      	; 0xf6e <__vector_17+0x7c>
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
     f6a:	9f 81       	ldd	r25, Y+7	; 0x07
     f6c:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     f6e:	d8 01       	movw	r26, r16
     f70:	12 96       	adiw	r26, 0x02	; 2
     f72:	8d 91       	ld	r24, X+
     f74:	9c 91       	ld	r25, X
     f76:	13 97       	sbiw	r26, 0x03	; 3
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	41 f0       	breq	.+16     	; 0xf8c <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     f7c:	2d 91       	ld	r18, X+
     f7e:	3c 91       	ld	r19, X
     f80:	11 97       	sbiw	r26, 0x01	; 1
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	8d 93       	st	X+, r24
     f88:	9c 93       	st	X, r25
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     f8c:	f8 01       	movw	r30, r16
     f8e:	15 82       	std	Z+5, r1	; 0x05
     f90:	14 82       	std	Z+4, r1	; 0x04
     f92:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     f94:	ce 15       	cp	r28, r14
     f96:	df 05       	cpc	r29, r15
     f98:	b1 f6       	brne	.-84     	; 0xf46 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	bf 91       	pop	r27
     fa4:	af 91       	pop	r26
     fa6:	9f 91       	pop	r25
     fa8:	8f 91       	pop	r24
     faa:	7f 91       	pop	r23
     fac:	6f 91       	pop	r22
     fae:	5f 91       	pop	r21
     fb0:	4f 91       	pop	r20
     fb2:	3f 91       	pop	r19
     fb4:	2f 91       	pop	r18
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	0f 90       	pop	r0
     fc0:	0b be       	out	0x3b, r0	; 59
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
     fcc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fd0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
     fd4:	88 e4       	ldi	r24, 0x48	; 72
     fd6:	98 e0       	ldi	r25, 0x08	; 8
     fd8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fdc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     fe0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     fe4:	89 e0       	ldi	r24, 0x09	; 9
     fe6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     ff0:	88 e4       	ldi	r24, 0x48	; 72
     ff2:	e3 e2       	ldi	r30, 0x23	; 35
     ff4:	f3 e0       	ldi	r31, 0x03	; 3
     ff6:	df 01       	movw	r26, r30
     ff8:	1d 92       	st	X+, r1
     ffa:	8a 95       	dec	r24
     ffc:	e9 f7       	brne	.-6      	; 0xff8 <TIMER_Init+0x2c>
     ffe:	08 95       	ret

00001000 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    100a:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <_timer+0x4>
    100e:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <_timer+0x5>
    1012:	67 2b       	or	r22, r23
    1014:	09 f4       	brne	.+2      	; 0x1018 <TIMER_Create+0x18>
    1016:	49 c0       	rjmp	.+146    	; 0x10aa <TIMER_Create+0xaa>
    1018:	e3 e2       	ldi	r30, 0x23	; 35
    101a:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    101c:	a1 e0       	ldi	r26, 0x01	; 1
    101e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1020:	c5 85       	ldd	r28, Z+13	; 0x0d
    1022:	d6 85       	ldd	r29, Z+14	; 0x0e
    1024:	cd 2b       	or	r28, r29
    1026:	09 f4       	brne	.+2      	; 0x102a <TIMER_Create+0x2a>
    1028:	42 c0       	rjmp	.+132    	; 0x10ae <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    102a:	11 96       	adiw	r26, 0x01	; 1
    102c:	39 96       	adiw	r30, 0x09	; 9
    102e:	a8 30       	cpi	r26, 0x08	; 8
    1030:	b1 05       	cpc	r27, r1
    1032:	b1 f7       	brne	.-20     	; 0x1020 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    103a:	fd 01       	movw	r30, r26
    103c:	ee 0f       	add	r30, r30
    103e:	ff 1f       	adc	r31, r31
    1040:	ee 0f       	add	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	ea 0f       	add	r30, r26
    104a:	fb 1f       	adc	r31, r27
    104c:	ed 5d       	subi	r30, 0xDD	; 221
    104e:	fc 4f       	sbci	r31, 0xFC	; 252
    1050:	93 83       	std	Z+3, r25	; 0x03
    1052:	82 83       	std	Z+2, r24	; 0x02
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    1056:	fd 01       	movw	r30, r26
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ea 0f       	add	r30, r26
    1066:	fb 1f       	adc	r31, r27
    1068:	ed 5d       	subi	r30, 0xDD	; 221
    106a:	fc 4f       	sbci	r31, 0xFC	; 252
    106c:	13 82       	std	Z+3, r1	; 0x03
    106e:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1070:	fd 01       	movw	r30, r26
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ea 0f       	add	r30, r26
    1080:	fb 1f       	adc	r31, r27
    1082:	ed 5d       	subi	r30, 0xDD	; 221
    1084:	fc 4f       	sbci	r31, 0xFC	; 252
    1086:	55 83       	std	Z+5, r21	; 0x05
    1088:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    108a:	37 83       	std	Z+7, r19	; 0x07
    108c:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    108e:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <_timer_tick>
    1092:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <_timer_tick+0x1>
    1096:	82 0f       	add	r24, r18
    1098:	93 1f       	adc	r25, r19
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
			_timer[i].state = READY;
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10a2:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    10a4:	8a 2f       	mov	r24, r26
    10a6:	9b 2f       	mov	r25, r27
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    10ae:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b0:	f8 94       	cli
		{
			if (periodic != 0) 
    10b2:	01 2b       	or	r16, r17
    10b4:	11 f6       	brne	.-124    	; 0x103a <TIMER_Create+0x3a>
    10b6:	cf cf       	rjmp	.-98     	; 0x1056 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    10c2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    10c6:	83 e3       	ldi	r24, 0x33	; 51
    10c8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    10cc:	e9 ec       	ldi	r30, 0xC9	; 201
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 61       	ori	r24, 0x18	; 24
    10d4:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    10d6:	ea ec       	ldi	r30, 0xCA	; 202
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	86 60       	ori	r24, 0x06	; 6
    10de:	80 83       	st	Z, r24
    10e0:	08 95       	ret

000010e2 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    10e2:	e8 ec       	ldi	r30, 0xC8	; 200
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	90 81       	ld	r25, Z
    10e8:	95 ff       	sbrs	r25, 5
    10ea:	fd cf       	rjmp	.-6      	; 0x10e6 <UART_SendChar+0x4>
	UDR1 = c;
    10ec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    10f0:	08 95       	ret

000010f2 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    10f8:	88 81       	ld	r24, Y
    10fa:	88 23       	and	r24, r24
    10fc:	29 f0       	breq	.+10     	; 0x1108 <UART_SendString+0x16>
    10fe:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1100:	f0 df       	rcall	.-32     	; 0x10e2 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1102:	89 91       	ld	r24, Y+
    1104:	81 11       	cpse	r24, r1
    1106:	fc cf       	rjmp	.-8      	; 0x1100 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <__floatunsisf>:
    110e:	e8 94       	clt
    1110:	09 c0       	rjmp	.+18     	; 0x1124 <__floatsisf+0x12>

00001112 <__floatsisf>:
    1112:	97 fb       	bst	r25, 7
    1114:	3e f4       	brtc	.+14     	; 0x1124 <__floatsisf+0x12>
    1116:	90 95       	com	r25
    1118:	80 95       	com	r24
    111a:	70 95       	com	r23
    111c:	61 95       	neg	r22
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	99 23       	and	r25, r25
    1126:	a9 f0       	breq	.+42     	; 0x1152 <__floatsisf+0x40>
    1128:	f9 2f       	mov	r31, r25
    112a:	96 e9       	ldi	r25, 0x96	; 150
    112c:	bb 27       	eor	r27, r27
    112e:	93 95       	inc	r25
    1130:	f6 95       	lsr	r31
    1132:	87 95       	ror	r24
    1134:	77 95       	ror	r23
    1136:	67 95       	ror	r22
    1138:	b7 95       	ror	r27
    113a:	f1 11       	cpse	r31, r1
    113c:	f8 cf       	rjmp	.-16     	; 0x112e <__floatsisf+0x1c>
    113e:	fa f4       	brpl	.+62     	; 0x117e <__floatsisf+0x6c>
    1140:	bb 0f       	add	r27, r27
    1142:	11 f4       	brne	.+4      	; 0x1148 <__floatsisf+0x36>
    1144:	60 ff       	sbrs	r22, 0
    1146:	1b c0       	rjmp	.+54     	; 0x117e <__floatsisf+0x6c>
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	8f 4f       	sbci	r24, 0xFF	; 255
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	16 c0       	rjmp	.+44     	; 0x117e <__floatsisf+0x6c>
    1152:	88 23       	and	r24, r24
    1154:	11 f0       	breq	.+4      	; 0x115a <__floatsisf+0x48>
    1156:	96 e9       	ldi	r25, 0x96	; 150
    1158:	11 c0       	rjmp	.+34     	; 0x117c <__floatsisf+0x6a>
    115a:	77 23       	and	r23, r23
    115c:	21 f0       	breq	.+8      	; 0x1166 <__floatsisf+0x54>
    115e:	9e e8       	ldi	r25, 0x8E	; 142
    1160:	87 2f       	mov	r24, r23
    1162:	76 2f       	mov	r23, r22
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <__floatsisf+0x5e>
    1166:	66 23       	and	r22, r22
    1168:	71 f0       	breq	.+28     	; 0x1186 <__floatsisf+0x74>
    116a:	96 e8       	ldi	r25, 0x86	; 134
    116c:	86 2f       	mov	r24, r22
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	2a f0       	brmi	.+10     	; 0x117e <__floatsisf+0x6c>
    1174:	9a 95       	dec	r25
    1176:	66 0f       	add	r22, r22
    1178:	77 1f       	adc	r23, r23
    117a:	88 1f       	adc	r24, r24
    117c:	da f7       	brpl	.-10     	; 0x1174 <__floatsisf+0x62>
    117e:	88 0f       	add	r24, r24
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret

00001188 <__mulsf3>:
    1188:	0b d0       	rcall	.+22     	; 0x11a0 <__mulsf3x>
    118a:	78 c0       	rjmp	.+240    	; 0x127c <__fp_round>
    118c:	69 d0       	rcall	.+210    	; 0x1260 <__fp_pscA>
    118e:	28 f0       	brcs	.+10     	; 0x119a <__mulsf3+0x12>
    1190:	6e d0       	rcall	.+220    	; 0x126e <__fp_pscB>
    1192:	18 f0       	brcs	.+6      	; 0x119a <__mulsf3+0x12>
    1194:	95 23       	and	r25, r21
    1196:	09 f0       	breq	.+2      	; 0x119a <__mulsf3+0x12>
    1198:	5a c0       	rjmp	.+180    	; 0x124e <__fp_inf>
    119a:	5f c0       	rjmp	.+190    	; 0x125a <__fp_nan>
    119c:	11 24       	eor	r1, r1
    119e:	a2 c0       	rjmp	.+324    	; 0x12e4 <__fp_szero>

000011a0 <__mulsf3x>:
    11a0:	7e d0       	rcall	.+252    	; 0x129e <__fp_split3>
    11a2:	a0 f3       	brcs	.-24     	; 0x118c <__mulsf3+0x4>

000011a4 <__mulsf3_pse>:
    11a4:	95 9f       	mul	r25, r21
    11a6:	d1 f3       	breq	.-12     	; 0x119c <__mulsf3+0x14>
    11a8:	95 0f       	add	r25, r21
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	55 1f       	adc	r21, r21
    11ae:	62 9f       	mul	r22, r18
    11b0:	f0 01       	movw	r30, r0
    11b2:	72 9f       	mul	r23, r18
    11b4:	bb 27       	eor	r27, r27
    11b6:	f0 0d       	add	r31, r0
    11b8:	b1 1d       	adc	r27, r1
    11ba:	63 9f       	mul	r22, r19
    11bc:	aa 27       	eor	r26, r26
    11be:	f0 0d       	add	r31, r0
    11c0:	b1 1d       	adc	r27, r1
    11c2:	aa 1f       	adc	r26, r26
    11c4:	64 9f       	mul	r22, r20
    11c6:	66 27       	eor	r22, r22
    11c8:	b0 0d       	add	r27, r0
    11ca:	a1 1d       	adc	r26, r1
    11cc:	66 1f       	adc	r22, r22
    11ce:	82 9f       	mul	r24, r18
    11d0:	22 27       	eor	r18, r18
    11d2:	b0 0d       	add	r27, r0
    11d4:	a1 1d       	adc	r26, r1
    11d6:	62 1f       	adc	r22, r18
    11d8:	73 9f       	mul	r23, r19
    11da:	b0 0d       	add	r27, r0
    11dc:	a1 1d       	adc	r26, r1
    11de:	62 1f       	adc	r22, r18
    11e0:	83 9f       	mul	r24, r19
    11e2:	a0 0d       	add	r26, r0
    11e4:	61 1d       	adc	r22, r1
    11e6:	22 1f       	adc	r18, r18
    11e8:	74 9f       	mul	r23, r20
    11ea:	33 27       	eor	r19, r19
    11ec:	a0 0d       	add	r26, r0
    11ee:	61 1d       	adc	r22, r1
    11f0:	23 1f       	adc	r18, r19
    11f2:	84 9f       	mul	r24, r20
    11f4:	60 0d       	add	r22, r0
    11f6:	21 1d       	adc	r18, r1
    11f8:	82 2f       	mov	r24, r18
    11fa:	76 2f       	mov	r23, r22
    11fc:	6a 2f       	mov	r22, r26
    11fe:	11 24       	eor	r1, r1
    1200:	9f 57       	subi	r25, 0x7F	; 127
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	8a f0       	brmi	.+34     	; 0x1228 <__mulsf3_pse+0x84>
    1206:	e1 f0       	breq	.+56     	; 0x1240 <__mulsf3_pse+0x9c>
    1208:	88 23       	and	r24, r24
    120a:	4a f0       	brmi	.+18     	; 0x121e <__mulsf3_pse+0x7a>
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	bb 1f       	adc	r27, r27
    1212:	66 1f       	adc	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	88 1f       	adc	r24, r24
    1218:	91 50       	subi	r25, 0x01	; 1
    121a:	50 40       	sbci	r21, 0x00	; 0
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__mulsf3_pse+0x64>
    121e:	9e 3f       	cpi	r25, 0xFE	; 254
    1220:	51 05       	cpc	r21, r1
    1222:	70 f0       	brcs	.+28     	; 0x1240 <__mulsf3_pse+0x9c>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <__fp_inf>
    1226:	5e c0       	rjmp	.+188    	; 0x12e4 <__fp_szero>
    1228:	5f 3f       	cpi	r21, 0xFF	; 255
    122a:	ec f3       	brlt	.-6      	; 0x1226 <__mulsf3_pse+0x82>
    122c:	98 3e       	cpi	r25, 0xE8	; 232
    122e:	dc f3       	brlt	.-10     	; 0x1226 <__mulsf3_pse+0x82>
    1230:	86 95       	lsr	r24
    1232:	77 95       	ror	r23
    1234:	67 95       	ror	r22
    1236:	b7 95       	ror	r27
    1238:	f7 95       	ror	r31
    123a:	e7 95       	ror	r30
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	c1 f7       	brne	.-16     	; 0x1230 <__mulsf3_pse+0x8c>
    1240:	fe 2b       	or	r31, r30
    1242:	88 0f       	add	r24, r24
    1244:	91 1d       	adc	r25, r1
    1246:	96 95       	lsr	r25
    1248:	87 95       	ror	r24
    124a:	97 f9       	bld	r25, 7
    124c:	08 95       	ret

0000124e <__fp_inf>:
    124e:	97 f9       	bld	r25, 7
    1250:	9f 67       	ori	r25, 0x7F	; 127
    1252:	80 e8       	ldi	r24, 0x80	; 128
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	08 95       	ret

0000125a <__fp_nan>:
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	80 ec       	ldi	r24, 0xC0	; 192
    125e:	08 95       	ret

00001260 <__fp_pscA>:
    1260:	00 24       	eor	r0, r0
    1262:	0a 94       	dec	r0
    1264:	16 16       	cp	r1, r22
    1266:	17 06       	cpc	r1, r23
    1268:	18 06       	cpc	r1, r24
    126a:	09 06       	cpc	r0, r25
    126c:	08 95       	ret

0000126e <__fp_pscB>:
    126e:	00 24       	eor	r0, r0
    1270:	0a 94       	dec	r0
    1272:	12 16       	cp	r1, r18
    1274:	13 06       	cpc	r1, r19
    1276:	14 06       	cpc	r1, r20
    1278:	05 06       	cpc	r0, r21
    127a:	08 95       	ret

0000127c <__fp_round>:
    127c:	09 2e       	mov	r0, r25
    127e:	03 94       	inc	r0
    1280:	00 0c       	add	r0, r0
    1282:	11 f4       	brne	.+4      	; 0x1288 <__fp_round+0xc>
    1284:	88 23       	and	r24, r24
    1286:	52 f0       	brmi	.+20     	; 0x129c <__fp_round+0x20>
    1288:	bb 0f       	add	r27, r27
    128a:	40 f4       	brcc	.+16     	; 0x129c <__fp_round+0x20>
    128c:	bf 2b       	or	r27, r31
    128e:	11 f4       	brne	.+4      	; 0x1294 <__fp_round+0x18>
    1290:	60 ff       	sbrs	r22, 0
    1292:	04 c0       	rjmp	.+8      	; 0x129c <__fp_round+0x20>
    1294:	6f 5f       	subi	r22, 0xFF	; 255
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__fp_split3>:
    129e:	57 fd       	sbrc	r21, 7
    12a0:	90 58       	subi	r25, 0x80	; 128
    12a2:	44 0f       	add	r20, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	59 f0       	breq	.+22     	; 0x12be <__fp_splitA+0x10>
    12a8:	5f 3f       	cpi	r21, 0xFF	; 255
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__fp_splitA+0x1a>
    12ac:	47 95       	ror	r20

000012ae <__fp_splitA>:
    12ae:	88 0f       	add	r24, r24
    12b0:	97 fb       	bst	r25, 7
    12b2:	99 1f       	adc	r25, r25
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_splitA+0x20>
    12b6:	9f 3f       	cpi	r25, 0xFF	; 255
    12b8:	79 f0       	breq	.+30     	; 0x12d8 <__fp_splitA+0x2a>
    12ba:	87 95       	ror	r24
    12bc:	08 95       	ret
    12be:	12 16       	cp	r1, r18
    12c0:	13 06       	cpc	r1, r19
    12c2:	14 06       	cpc	r1, r20
    12c4:	55 1f       	adc	r21, r21
    12c6:	f2 cf       	rjmp	.-28     	; 0x12ac <__fp_split3+0xe>
    12c8:	46 95       	lsr	r20
    12ca:	f1 df       	rcall	.-30     	; 0x12ae <__fp_splitA>
    12cc:	08 c0       	rjmp	.+16     	; 0x12de <__fp_splitA+0x30>
    12ce:	16 16       	cp	r1, r22
    12d0:	17 06       	cpc	r1, r23
    12d2:	18 06       	cpc	r1, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	f1 cf       	rjmp	.-30     	; 0x12ba <__fp_splitA+0xc>
    12d8:	86 95       	lsr	r24
    12da:	71 05       	cpc	r23, r1
    12dc:	61 05       	cpc	r22, r1
    12de:	08 94       	sec
    12e0:	08 95       	ret

000012e2 <__fp_zero>:
    12e2:	e8 94       	clt

000012e4 <__fp_szero>:
    12e4:	bb 27       	eor	r27, r27
    12e6:	66 27       	eor	r22, r22
    12e8:	77 27       	eor	r23, r23
    12ea:	cb 01       	movw	r24, r22
    12ec:	97 f9       	bld	r25, 7
    12ee:	08 95       	ret

000012f0 <malloc>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	91 05       	cpc	r25, r1
    12fc:	10 f4       	brcc	.+4      	; 0x1302 <malloc+0x12>
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <__flp>
    1306:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <__flp+0x1>
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	30 97       	sbiw	r30, 0x00	; 0
    1314:	19 f1       	breq	.+70     	; 0x135c <malloc+0x6c>
    1316:	40 81       	ld	r20, Z
    1318:	51 81       	ldd	r21, Z+1	; 0x01
    131a:	02 81       	ldd	r16, Z+2	; 0x02
    131c:	13 81       	ldd	r17, Z+3	; 0x03
    131e:	48 17       	cp	r20, r24
    1320:	59 07       	cpc	r21, r25
    1322:	c8 f0       	brcs	.+50     	; 0x1356 <malloc+0x66>
    1324:	84 17       	cp	r24, r20
    1326:	95 07       	cpc	r25, r21
    1328:	69 f4       	brne	.+26     	; 0x1344 <malloc+0x54>
    132a:	10 97       	sbiw	r26, 0x00	; 0
    132c:	31 f0       	breq	.+12     	; 0x133a <malloc+0x4a>
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	0c 93       	st	X, r16
    1332:	12 97       	sbiw	r26, 0x02	; 2
    1334:	13 96       	adiw	r26, 0x03	; 3
    1336:	1c 93       	st	X, r17
    1338:	27 c0       	rjmp	.+78     	; 0x1388 <malloc+0x98>
    133a:	00 93 7c 03 	sts	0x037C, r16	; 0x80037c <__flp>
    133e:	10 93 7d 03 	sts	0x037D, r17	; 0x80037d <__flp+0x1>
    1342:	22 c0       	rjmp	.+68     	; 0x1388 <malloc+0x98>
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	19 f0       	breq	.+6      	; 0x1350 <malloc+0x60>
    134a:	42 17       	cp	r20, r18
    134c:	53 07       	cpc	r21, r19
    134e:	18 f4       	brcc	.+6      	; 0x1356 <malloc+0x66>
    1350:	9a 01       	movw	r18, r20
    1352:	bd 01       	movw	r22, r26
    1354:	ef 01       	movw	r28, r30
    1356:	df 01       	movw	r26, r30
    1358:	f8 01       	movw	r30, r16
    135a:	db cf       	rjmp	.-74     	; 0x1312 <malloc+0x22>
    135c:	21 15       	cp	r18, r1
    135e:	31 05       	cpc	r19, r1
    1360:	f9 f0       	breq	.+62     	; 0x13a0 <malloc+0xb0>
    1362:	28 1b       	sub	r18, r24
    1364:	39 0b       	sbc	r19, r25
    1366:	24 30       	cpi	r18, 0x04	; 4
    1368:	31 05       	cpc	r19, r1
    136a:	80 f4       	brcc	.+32     	; 0x138c <malloc+0x9c>
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	61 15       	cp	r22, r1
    1372:	71 05       	cpc	r23, r1
    1374:	21 f0       	breq	.+8      	; 0x137e <malloc+0x8e>
    1376:	fb 01       	movw	r30, r22
    1378:	93 83       	std	Z+3, r25	; 0x03
    137a:	82 83       	std	Z+2, r24	; 0x02
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <malloc+0x96>
    137e:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <__flp+0x1>
    1382:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <__flp>
    1386:	fe 01       	movw	r30, r28
    1388:	32 96       	adiw	r30, 0x02	; 2
    138a:	44 c0       	rjmp	.+136    	; 0x1414 <malloc+0x124>
    138c:	fe 01       	movw	r30, r28
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	81 93       	st	Z+, r24
    1394:	91 93       	st	Z+, r25
    1396:	22 50       	subi	r18, 0x02	; 2
    1398:	31 09       	sbc	r19, r1
    139a:	39 83       	std	Y+1, r19	; 0x01
    139c:	28 83       	st	Y, r18
    139e:	3a c0       	rjmp	.+116    	; 0x1414 <malloc+0x124>
    13a0:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <__brkval>
    13a4:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <__brkval+0x1>
    13a8:	23 2b       	or	r18, r19
    13aa:	41 f4       	brne	.+16     	; 0x13bc <malloc+0xcc>
    13ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13b4:	30 93 7b 03 	sts	0x037B, r19	; 0x80037b <__brkval+0x1>
    13b8:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <__brkval>
    13bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	41 f4       	brne	.+16     	; 0x13da <malloc+0xea>
    13ca:	2d b7       	in	r18, 0x3d	; 61
    13cc:	3e b7       	in	r19, 0x3e	; 62
    13ce:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13d2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13d6:	24 1b       	sub	r18, r20
    13d8:	35 0b       	sbc	r19, r21
    13da:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <__brkval>
    13de:	f0 91 7b 03 	lds	r31, 0x037B	; 0x80037b <__brkval+0x1>
    13e2:	e2 17       	cp	r30, r18
    13e4:	f3 07       	cpc	r31, r19
    13e6:	a0 f4       	brcc	.+40     	; 0x1410 <malloc+0x120>
    13e8:	2e 1b       	sub	r18, r30
    13ea:	3f 0b       	sbc	r19, r31
    13ec:	28 17       	cp	r18, r24
    13ee:	39 07       	cpc	r19, r25
    13f0:	78 f0       	brcs	.+30     	; 0x1410 <malloc+0x120>
    13f2:	ac 01       	movw	r20, r24
    13f4:	4e 5f       	subi	r20, 0xFE	; 254
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	24 17       	cp	r18, r20
    13fa:	35 07       	cpc	r19, r21
    13fc:	48 f0       	brcs	.+18     	; 0x1410 <malloc+0x120>
    13fe:	4e 0f       	add	r20, r30
    1400:	5f 1f       	adc	r21, r31
    1402:	50 93 7b 03 	sts	0x037B, r21	; 0x80037b <__brkval+0x1>
    1406:	40 93 7a 03 	sts	0x037A, r20	; 0x80037a <__brkval>
    140a:	81 93       	st	Z+, r24
    140c:	91 93       	st	Z+, r25
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <malloc+0x124>
    1410:	e0 e0       	ldi	r30, 0x00	; 0
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	cf 01       	movw	r24, r30
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <free>:
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	09 f4       	brne	.+2      	; 0x142a <free+0xa>
    1428:	81 c0       	rjmp	.+258    	; 0x152c <free+0x10c>
    142a:	fc 01       	movw	r30, r24
    142c:	32 97       	sbiw	r30, 0x02	; 2
    142e:	13 82       	std	Z+3, r1	; 0x03
    1430:	12 82       	std	Z+2, r1	; 0x02
    1432:	a0 91 7c 03 	lds	r26, 0x037C	; 0x80037c <__flp>
    1436:	b0 91 7d 03 	lds	r27, 0x037D	; 0x80037d <__flp+0x1>
    143a:	10 97       	sbiw	r26, 0x00	; 0
    143c:	81 f4       	brne	.+32     	; 0x145e <free+0x3e>
    143e:	20 81       	ld	r18, Z
    1440:	31 81       	ldd	r19, Z+1	; 0x01
    1442:	82 0f       	add	r24, r18
    1444:	93 1f       	adc	r25, r19
    1446:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <__brkval>
    144a:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <__brkval+0x1>
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	51 f5       	brne	.+84     	; 0x14a8 <free+0x88>
    1454:	f0 93 7b 03 	sts	0x037B, r31	; 0x80037b <__brkval+0x1>
    1458:	e0 93 7a 03 	sts	0x037A, r30	; 0x80037a <__brkval>
    145c:	67 c0       	rjmp	.+206    	; 0x152c <free+0x10c>
    145e:	ed 01       	movw	r28, r26
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	ce 17       	cp	r28, r30
    1466:	df 07       	cpc	r29, r31
    1468:	40 f4       	brcc	.+16     	; 0x147a <free+0x5a>
    146a:	4a 81       	ldd	r20, Y+2	; 0x02
    146c:	5b 81       	ldd	r21, Y+3	; 0x03
    146e:	9e 01       	movw	r18, r28
    1470:	41 15       	cp	r20, r1
    1472:	51 05       	cpc	r21, r1
    1474:	f1 f0       	breq	.+60     	; 0x14b2 <free+0x92>
    1476:	ea 01       	movw	r28, r20
    1478:	f5 cf       	rjmp	.-22     	; 0x1464 <free+0x44>
    147a:	d3 83       	std	Z+3, r29	; 0x03
    147c:	c2 83       	std	Z+2, r28	; 0x02
    147e:	40 81       	ld	r20, Z
    1480:	51 81       	ldd	r21, Z+1	; 0x01
    1482:	84 0f       	add	r24, r20
    1484:	95 1f       	adc	r25, r21
    1486:	c8 17       	cp	r28, r24
    1488:	d9 07       	cpc	r29, r25
    148a:	59 f4       	brne	.+22     	; 0x14a2 <free+0x82>
    148c:	88 81       	ld	r24, Y
    148e:	99 81       	ldd	r25, Y+1	; 0x01
    1490:	84 0f       	add	r24, r20
    1492:	95 1f       	adc	r25, r21
    1494:	02 96       	adiw	r24, 0x02	; 2
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	9b 81       	ldd	r25, Y+3	; 0x03
    149e:	93 83       	std	Z+3, r25	; 0x03
    14a0:	82 83       	std	Z+2, r24	; 0x02
    14a2:	21 15       	cp	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <free+0x92>
    14a8:	f0 93 7d 03 	sts	0x037D, r31	; 0x80037d <__flp+0x1>
    14ac:	e0 93 7c 03 	sts	0x037C, r30	; 0x80037c <__flp>
    14b0:	3d c0       	rjmp	.+122    	; 0x152c <free+0x10c>
    14b2:	e9 01       	movw	r28, r18
    14b4:	fb 83       	std	Y+3, r31	; 0x03
    14b6:	ea 83       	std	Y+2, r30	; 0x02
    14b8:	49 91       	ld	r20, Y+
    14ba:	59 91       	ld	r21, Y+
    14bc:	c4 0f       	add	r28, r20
    14be:	d5 1f       	adc	r29, r21
    14c0:	ec 17       	cp	r30, r28
    14c2:	fd 07       	cpc	r31, r29
    14c4:	61 f4       	brne	.+24     	; 0x14de <free+0xbe>
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	84 0f       	add	r24, r20
    14cc:	95 1f       	adc	r25, r21
    14ce:	02 96       	adiw	r24, 0x02	; 2
    14d0:	e9 01       	movw	r28, r18
    14d2:	99 83       	std	Y+1, r25	; 0x01
    14d4:	88 83       	st	Y, r24
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	e0 e0       	ldi	r30, 0x00	; 0
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	12 96       	adiw	r26, 0x02	; 2
    14e4:	8d 91       	ld	r24, X+
    14e6:	9c 91       	ld	r25, X
    14e8:	13 97       	sbiw	r26, 0x03	; 3
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <free+0xd4>
    14ee:	fd 01       	movw	r30, r26
    14f0:	dc 01       	movw	r26, r24
    14f2:	f7 cf       	rjmp	.-18     	; 0x14e2 <free+0xc2>
    14f4:	8d 91       	ld	r24, X+
    14f6:	9c 91       	ld	r25, X
    14f8:	11 97       	sbiw	r26, 0x01	; 1
    14fa:	9d 01       	movw	r18, r26
    14fc:	2e 5f       	subi	r18, 0xFE	; 254
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <__brkval>
    1508:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <__brkval+0x1>
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	69 f4       	brne	.+26     	; 0x152c <free+0x10c>
    1512:	30 97       	sbiw	r30, 0x00	; 0
    1514:	29 f4       	brne	.+10     	; 0x1520 <free+0x100>
    1516:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <__flp+0x1>
    151a:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <__flp>
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <free+0x104>
    1520:	13 82       	std	Z+3, r1	; 0x03
    1522:	12 82       	std	Z+2, r1	; 0x02
    1524:	b0 93 7b 03 	sts	0x037B, r27	; 0x80037b <__brkval+0x1>
    1528:	a0 93 7a 03 	sts	0x037A, r26	; 0x80037a <__brkval>
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <sprintf>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	2e 97       	sbiw	r28, 0x0e	; 14
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	0d 89       	ldd	r16, Y+21	; 0x15
    154c:	1e 89       	ldd	r17, Y+22	; 0x16
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	8c 83       	std	Y+4, r24	; 0x04
    1552:	1a 83       	std	Y+2, r17	; 0x02
    1554:	09 83       	std	Y+1, r16	; 0x01
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f e7       	ldi	r25, 0x7F	; 127
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	ae 01       	movw	r20, r28
    1560:	47 5e       	subi	r20, 0xE7	; 231
    1562:	5f 4f       	sbci	r21, 0xFF	; 255
    1564:	6f 89       	ldd	r22, Y+23	; 0x17
    1566:	78 8d       	ldd	r23, Y+24	; 0x18
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	10 d0       	rcall	.+32     	; 0x158e <vfprintf>
    156e:	ef 81       	ldd	r30, Y+7	; 0x07
    1570:	f8 85       	ldd	r31, Y+8	; 0x08
    1572:	e0 0f       	add	r30, r16
    1574:	f1 1f       	adc	r31, r17
    1576:	10 82       	st	Z, r1
    1578:	2e 96       	adiw	r28, 0x0e	; 14
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <vfprintf>:
    158e:	2f 92       	push	r2
    1590:	3f 92       	push	r3
    1592:	4f 92       	push	r4
    1594:	5f 92       	push	r5
    1596:	6f 92       	push	r6
    1598:	7f 92       	push	r7
    159a:	8f 92       	push	r8
    159c:	9f 92       	push	r9
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	2b 97       	sbiw	r28, 0x0b	; 11
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	6c 01       	movw	r12, r24
    15c4:	7b 01       	movw	r14, r22
    15c6:	8a 01       	movw	r16, r20
    15c8:	fc 01       	movw	r30, r24
    15ca:	17 82       	std	Z+7, r1	; 0x07
    15cc:	16 82       	std	Z+6, r1	; 0x06
    15ce:	83 81       	ldd	r24, Z+3	; 0x03
    15d0:	81 ff       	sbrs	r24, 1
    15d2:	bf c1       	rjmp	.+894    	; 0x1952 <vfprintf+0x3c4>
    15d4:	ce 01       	movw	r24, r28
    15d6:	01 96       	adiw	r24, 0x01	; 1
    15d8:	3c 01       	movw	r6, r24
    15da:	f6 01       	movw	r30, r12
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	f7 01       	movw	r30, r14
    15e0:	93 fd       	sbrc	r25, 3
    15e2:	85 91       	lpm	r24, Z+
    15e4:	93 ff       	sbrs	r25, 3
    15e6:	81 91       	ld	r24, Z+
    15e8:	7f 01       	movw	r14, r30
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <vfprintf+0x62>
    15ee:	ad c1       	rjmp	.+858    	; 0x194a <vfprintf+0x3bc>
    15f0:	85 32       	cpi	r24, 0x25	; 37
    15f2:	39 f4       	brne	.+14     	; 0x1602 <vfprintf+0x74>
    15f4:	93 fd       	sbrc	r25, 3
    15f6:	85 91       	lpm	r24, Z+
    15f8:	93 ff       	sbrs	r25, 3
    15fa:	81 91       	ld	r24, Z+
    15fc:	7f 01       	movw	r14, r30
    15fe:	85 32       	cpi	r24, 0x25	; 37
    1600:	21 f4       	brne	.+8      	; 0x160a <vfprintf+0x7c>
    1602:	b6 01       	movw	r22, r12
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	d6 d1       	rcall	.+940    	; 0x19b4 <fputc>
    1608:	e8 cf       	rjmp	.-48     	; 0x15da <vfprintf+0x4c>
    160a:	91 2c       	mov	r9, r1
    160c:	21 2c       	mov	r2, r1
    160e:	31 2c       	mov	r3, r1
    1610:	ff e1       	ldi	r31, 0x1F	; 31
    1612:	f3 15       	cp	r31, r3
    1614:	d8 f0       	brcs	.+54     	; 0x164c <vfprintf+0xbe>
    1616:	8b 32       	cpi	r24, 0x2B	; 43
    1618:	79 f0       	breq	.+30     	; 0x1638 <vfprintf+0xaa>
    161a:	38 f4       	brcc	.+14     	; 0x162a <vfprintf+0x9c>
    161c:	80 32       	cpi	r24, 0x20	; 32
    161e:	79 f0       	breq	.+30     	; 0x163e <vfprintf+0xb0>
    1620:	83 32       	cpi	r24, 0x23	; 35
    1622:	a1 f4       	brne	.+40     	; 0x164c <vfprintf+0xbe>
    1624:	23 2d       	mov	r18, r3
    1626:	20 61       	ori	r18, 0x10	; 16
    1628:	1d c0       	rjmp	.+58     	; 0x1664 <vfprintf+0xd6>
    162a:	8d 32       	cpi	r24, 0x2D	; 45
    162c:	61 f0       	breq	.+24     	; 0x1646 <vfprintf+0xb8>
    162e:	80 33       	cpi	r24, 0x30	; 48
    1630:	69 f4       	brne	.+26     	; 0x164c <vfprintf+0xbe>
    1632:	23 2d       	mov	r18, r3
    1634:	21 60       	ori	r18, 0x01	; 1
    1636:	16 c0       	rjmp	.+44     	; 0x1664 <vfprintf+0xd6>
    1638:	83 2d       	mov	r24, r3
    163a:	82 60       	ori	r24, 0x02	; 2
    163c:	38 2e       	mov	r3, r24
    163e:	e3 2d       	mov	r30, r3
    1640:	e4 60       	ori	r30, 0x04	; 4
    1642:	3e 2e       	mov	r3, r30
    1644:	2a c0       	rjmp	.+84     	; 0x169a <vfprintf+0x10c>
    1646:	f3 2d       	mov	r31, r3
    1648:	f8 60       	ori	r31, 0x08	; 8
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <vfprintf+0xf8>
    164c:	37 fc       	sbrc	r3, 7
    164e:	2d c0       	rjmp	.+90     	; 0x16aa <vfprintf+0x11c>
    1650:	20 ed       	ldi	r18, 0xD0	; 208
    1652:	28 0f       	add	r18, r24
    1654:	2a 30       	cpi	r18, 0x0A	; 10
    1656:	40 f0       	brcs	.+16     	; 0x1668 <vfprintf+0xda>
    1658:	8e 32       	cpi	r24, 0x2E	; 46
    165a:	b9 f4       	brne	.+46     	; 0x168a <vfprintf+0xfc>
    165c:	36 fc       	sbrc	r3, 6
    165e:	75 c1       	rjmp	.+746    	; 0x194a <vfprintf+0x3bc>
    1660:	23 2d       	mov	r18, r3
    1662:	20 64       	ori	r18, 0x40	; 64
    1664:	32 2e       	mov	r3, r18
    1666:	19 c0       	rjmp	.+50     	; 0x169a <vfprintf+0x10c>
    1668:	36 fe       	sbrs	r3, 6
    166a:	06 c0       	rjmp	.+12     	; 0x1678 <vfprintf+0xea>
    166c:	8a e0       	ldi	r24, 0x0A	; 10
    166e:	98 9e       	mul	r9, r24
    1670:	20 0d       	add	r18, r0
    1672:	11 24       	eor	r1, r1
    1674:	92 2e       	mov	r9, r18
    1676:	11 c0       	rjmp	.+34     	; 0x169a <vfprintf+0x10c>
    1678:	ea e0       	ldi	r30, 0x0A	; 10
    167a:	2e 9e       	mul	r2, r30
    167c:	20 0d       	add	r18, r0
    167e:	11 24       	eor	r1, r1
    1680:	22 2e       	mov	r2, r18
    1682:	f3 2d       	mov	r31, r3
    1684:	f0 62       	ori	r31, 0x20	; 32
    1686:	3f 2e       	mov	r3, r31
    1688:	08 c0       	rjmp	.+16     	; 0x169a <vfprintf+0x10c>
    168a:	8c 36       	cpi	r24, 0x6C	; 108
    168c:	21 f4       	brne	.+8      	; 0x1696 <vfprintf+0x108>
    168e:	83 2d       	mov	r24, r3
    1690:	80 68       	ori	r24, 0x80	; 128
    1692:	38 2e       	mov	r3, r24
    1694:	02 c0       	rjmp	.+4      	; 0x169a <vfprintf+0x10c>
    1696:	88 36       	cpi	r24, 0x68	; 104
    1698:	41 f4       	brne	.+16     	; 0x16aa <vfprintf+0x11c>
    169a:	f7 01       	movw	r30, r14
    169c:	93 fd       	sbrc	r25, 3
    169e:	85 91       	lpm	r24, Z+
    16a0:	93 ff       	sbrs	r25, 3
    16a2:	81 91       	ld	r24, Z+
    16a4:	7f 01       	movw	r14, r30
    16a6:	81 11       	cpse	r24, r1
    16a8:	b3 cf       	rjmp	.-154    	; 0x1610 <vfprintf+0x82>
    16aa:	98 2f       	mov	r25, r24
    16ac:	9f 7d       	andi	r25, 0xDF	; 223
    16ae:	95 54       	subi	r25, 0x45	; 69
    16b0:	93 30       	cpi	r25, 0x03	; 3
    16b2:	28 f4       	brcc	.+10     	; 0x16be <vfprintf+0x130>
    16b4:	0c 5f       	subi	r16, 0xFC	; 252
    16b6:	1f 4f       	sbci	r17, 0xFF	; 255
    16b8:	9f e3       	ldi	r25, 0x3F	; 63
    16ba:	99 83       	std	Y+1, r25	; 0x01
    16bc:	0d c0       	rjmp	.+26     	; 0x16d8 <vfprintf+0x14a>
    16be:	83 36       	cpi	r24, 0x63	; 99
    16c0:	31 f0       	breq	.+12     	; 0x16ce <vfprintf+0x140>
    16c2:	83 37       	cpi	r24, 0x73	; 115
    16c4:	71 f0       	breq	.+28     	; 0x16e2 <vfprintf+0x154>
    16c6:	83 35       	cpi	r24, 0x53	; 83
    16c8:	09 f0       	breq	.+2      	; 0x16cc <vfprintf+0x13e>
    16ca:	55 c0       	rjmp	.+170    	; 0x1776 <vfprintf+0x1e8>
    16cc:	20 c0       	rjmp	.+64     	; 0x170e <vfprintf+0x180>
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 81       	ld	r24, Z
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	0e 5f       	subi	r16, 0xFE	; 254
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	88 24       	eor	r8, r8
    16da:	83 94       	inc	r8
    16dc:	91 2c       	mov	r9, r1
    16de:	53 01       	movw	r10, r6
    16e0:	12 c0       	rjmp	.+36     	; 0x1706 <vfprintf+0x178>
    16e2:	28 01       	movw	r4, r16
    16e4:	f2 e0       	ldi	r31, 0x02	; 2
    16e6:	4f 0e       	add	r4, r31
    16e8:	51 1c       	adc	r5, r1
    16ea:	f8 01       	movw	r30, r16
    16ec:	a0 80       	ld	r10, Z
    16ee:	b1 80       	ldd	r11, Z+1	; 0x01
    16f0:	36 fe       	sbrs	r3, 6
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <vfprintf+0x16c>
    16f4:	69 2d       	mov	r22, r9
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <vfprintf+0x170>
    16fa:	6f ef       	ldi	r22, 0xFF	; 255
    16fc:	7f ef       	ldi	r23, 0xFF	; 255
    16fe:	c5 01       	movw	r24, r10
    1700:	4e d1       	rcall	.+668    	; 0x199e <strnlen>
    1702:	4c 01       	movw	r8, r24
    1704:	82 01       	movw	r16, r4
    1706:	f3 2d       	mov	r31, r3
    1708:	ff 77       	andi	r31, 0x7F	; 127
    170a:	3f 2e       	mov	r3, r31
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <vfprintf+0x1aa>
    170e:	28 01       	movw	r4, r16
    1710:	22 e0       	ldi	r18, 0x02	; 2
    1712:	42 0e       	add	r4, r18
    1714:	51 1c       	adc	r5, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	36 fe       	sbrs	r3, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x198>
    1720:	69 2d       	mov	r22, r9
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x19c>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	2d d1       	rcall	.+602    	; 0x1988 <strnlen_P>
    172e:	4c 01       	movw	r8, r24
    1730:	f3 2d       	mov	r31, r3
    1732:	f0 68       	ori	r31, 0x80	; 128
    1734:	3f 2e       	mov	r3, r31
    1736:	82 01       	movw	r16, r4
    1738:	33 fc       	sbrc	r3, 3
    173a:	19 c0       	rjmp	.+50     	; 0x176e <vfprintf+0x1e0>
    173c:	82 2d       	mov	r24, r2
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	88 16       	cp	r8, r24
    1742:	99 06       	cpc	r9, r25
    1744:	a0 f4       	brcc	.+40     	; 0x176e <vfprintf+0x1e0>
    1746:	b6 01       	movw	r22, r12
    1748:	80 e2       	ldi	r24, 0x20	; 32
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	33 d1       	rcall	.+614    	; 0x19b4 <fputc>
    174e:	2a 94       	dec	r2
    1750:	f5 cf       	rjmp	.-22     	; 0x173c <vfprintf+0x1ae>
    1752:	f5 01       	movw	r30, r10
    1754:	37 fc       	sbrc	r3, 7
    1756:	85 91       	lpm	r24, Z+
    1758:	37 fe       	sbrs	r3, 7
    175a:	81 91       	ld	r24, Z+
    175c:	5f 01       	movw	r10, r30
    175e:	b6 01       	movw	r22, r12
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	28 d1       	rcall	.+592    	; 0x19b4 <fputc>
    1764:	21 10       	cpse	r2, r1
    1766:	2a 94       	dec	r2
    1768:	21 e0       	ldi	r18, 0x01	; 1
    176a:	82 1a       	sub	r8, r18
    176c:	91 08       	sbc	r9, r1
    176e:	81 14       	cp	r8, r1
    1770:	91 04       	cpc	r9, r1
    1772:	79 f7       	brne	.-34     	; 0x1752 <vfprintf+0x1c4>
    1774:	e1 c0       	rjmp	.+450    	; 0x1938 <vfprintf+0x3aa>
    1776:	84 36       	cpi	r24, 0x64	; 100
    1778:	11 f0       	breq	.+4      	; 0x177e <vfprintf+0x1f0>
    177a:	89 36       	cpi	r24, 0x69	; 105
    177c:	39 f5       	brne	.+78     	; 0x17cc <vfprintf+0x23e>
    177e:	f8 01       	movw	r30, r16
    1780:	37 fe       	sbrs	r3, 7
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <vfprintf+0x204>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	0c 5f       	subi	r16, 0xFC	; 252
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	08 c0       	rjmp	.+16     	; 0x17a2 <vfprintf+0x214>
    1792:	60 81       	ld	r22, Z
    1794:	71 81       	ldd	r23, Z+1	; 0x01
    1796:	07 2e       	mov	r0, r23
    1798:	00 0c       	add	r0, r0
    179a:	88 0b       	sbc	r24, r24
    179c:	99 0b       	sbc	r25, r25
    179e:	0e 5f       	subi	r16, 0xFE	; 254
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	f3 2d       	mov	r31, r3
    17a4:	ff 76       	andi	r31, 0x6F	; 111
    17a6:	3f 2e       	mov	r3, r31
    17a8:	97 ff       	sbrs	r25, 7
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <vfprintf+0x230>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	f0 68       	ori	r31, 0x80	; 128
    17bc:	3f 2e       	mov	r3, r31
    17be:	2a e0       	ldi	r18, 0x0A	; 10
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	a3 01       	movw	r20, r6
    17c4:	33 d1       	rcall	.+614    	; 0x1a2c <__ultoa_invert>
    17c6:	88 2e       	mov	r8, r24
    17c8:	86 18       	sub	r8, r6
    17ca:	44 c0       	rjmp	.+136    	; 0x1854 <vfprintf+0x2c6>
    17cc:	85 37       	cpi	r24, 0x75	; 117
    17ce:	31 f4       	brne	.+12     	; 0x17dc <vfprintf+0x24e>
    17d0:	23 2d       	mov	r18, r3
    17d2:	2f 7e       	andi	r18, 0xEF	; 239
    17d4:	b2 2e       	mov	r11, r18
    17d6:	2a e0       	ldi	r18, 0x0A	; 10
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	25 c0       	rjmp	.+74     	; 0x1826 <vfprintf+0x298>
    17dc:	93 2d       	mov	r25, r3
    17de:	99 7f       	andi	r25, 0xF9	; 249
    17e0:	b9 2e       	mov	r11, r25
    17e2:	8f 36       	cpi	r24, 0x6F	; 111
    17e4:	c1 f0       	breq	.+48     	; 0x1816 <vfprintf+0x288>
    17e6:	18 f4       	brcc	.+6      	; 0x17ee <vfprintf+0x260>
    17e8:	88 35       	cpi	r24, 0x58	; 88
    17ea:	79 f0       	breq	.+30     	; 0x180a <vfprintf+0x27c>
    17ec:	ae c0       	rjmp	.+348    	; 0x194a <vfprintf+0x3bc>
    17ee:	80 37       	cpi	r24, 0x70	; 112
    17f0:	19 f0       	breq	.+6      	; 0x17f8 <vfprintf+0x26a>
    17f2:	88 37       	cpi	r24, 0x78	; 120
    17f4:	21 f0       	breq	.+8      	; 0x17fe <vfprintf+0x270>
    17f6:	a9 c0       	rjmp	.+338    	; 0x194a <vfprintf+0x3bc>
    17f8:	e9 2f       	mov	r30, r25
    17fa:	e0 61       	ori	r30, 0x10	; 16
    17fc:	be 2e       	mov	r11, r30
    17fe:	b4 fe       	sbrs	r11, 4
    1800:	0d c0       	rjmp	.+26     	; 0x181c <vfprintf+0x28e>
    1802:	fb 2d       	mov	r31, r11
    1804:	f4 60       	ori	r31, 0x04	; 4
    1806:	bf 2e       	mov	r11, r31
    1808:	09 c0       	rjmp	.+18     	; 0x181c <vfprintf+0x28e>
    180a:	34 fe       	sbrs	r3, 4
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <vfprintf+0x294>
    180e:	29 2f       	mov	r18, r25
    1810:	26 60       	ori	r18, 0x06	; 6
    1812:	b2 2e       	mov	r11, r18
    1814:	06 c0       	rjmp	.+12     	; 0x1822 <vfprintf+0x294>
    1816:	28 e0       	ldi	r18, 0x08	; 8
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <vfprintf+0x298>
    181c:	20 e1       	ldi	r18, 0x10	; 16
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x298>
    1822:	20 e1       	ldi	r18, 0x10	; 16
    1824:	32 e0       	ldi	r19, 0x02	; 2
    1826:	f8 01       	movw	r30, r16
    1828:	b7 fe       	sbrs	r11, 7
    182a:	07 c0       	rjmp	.+14     	; 0x183a <vfprintf+0x2ac>
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	0c 5f       	subi	r16, 0xFC	; 252
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <vfprintf+0x2b8>
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 5f       	subi	r16, 0xFE	; 254
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	a3 01       	movw	r20, r6
    1848:	f1 d0       	rcall	.+482    	; 0x1a2c <__ultoa_invert>
    184a:	88 2e       	mov	r8, r24
    184c:	86 18       	sub	r8, r6
    184e:	fb 2d       	mov	r31, r11
    1850:	ff 77       	andi	r31, 0x7F	; 127
    1852:	3f 2e       	mov	r3, r31
    1854:	36 fe       	sbrs	r3, 6
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <vfprintf+0x2e4>
    1858:	23 2d       	mov	r18, r3
    185a:	2e 7f       	andi	r18, 0xFE	; 254
    185c:	a2 2e       	mov	r10, r18
    185e:	89 14       	cp	r8, r9
    1860:	58 f4       	brcc	.+22     	; 0x1878 <vfprintf+0x2ea>
    1862:	34 fe       	sbrs	r3, 4
    1864:	0b c0       	rjmp	.+22     	; 0x187c <vfprintf+0x2ee>
    1866:	32 fc       	sbrc	r3, 2
    1868:	09 c0       	rjmp	.+18     	; 0x187c <vfprintf+0x2ee>
    186a:	83 2d       	mov	r24, r3
    186c:	8e 7e       	andi	r24, 0xEE	; 238
    186e:	a8 2e       	mov	r10, r24
    1870:	05 c0       	rjmp	.+10     	; 0x187c <vfprintf+0x2ee>
    1872:	b8 2c       	mov	r11, r8
    1874:	a3 2c       	mov	r10, r3
    1876:	03 c0       	rjmp	.+6      	; 0x187e <vfprintf+0x2f0>
    1878:	b8 2c       	mov	r11, r8
    187a:	01 c0       	rjmp	.+2      	; 0x187e <vfprintf+0x2f0>
    187c:	b9 2c       	mov	r11, r9
    187e:	a4 fe       	sbrs	r10, 4
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <vfprintf+0x312>
    1882:	fe 01       	movw	r30, r28
    1884:	e8 0d       	add	r30, r8
    1886:	f1 1d       	adc	r31, r1
    1888:	80 81       	ld	r24, Z
    188a:	80 33       	cpi	r24, 0x30	; 48
    188c:	21 f4       	brne	.+8      	; 0x1896 <vfprintf+0x308>
    188e:	9a 2d       	mov	r25, r10
    1890:	99 7e       	andi	r25, 0xE9	; 233
    1892:	a9 2e       	mov	r10, r25
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <vfprintf+0x31a>
    1896:	a2 fe       	sbrs	r10, 2
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0x318>
    189a:	b3 94       	inc	r11
    189c:	b3 94       	inc	r11
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <vfprintf+0x31a>
    18a0:	8a 2d       	mov	r24, r10
    18a2:	86 78       	andi	r24, 0x86	; 134
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <vfprintf+0x31a>
    18a6:	b3 94       	inc	r11
    18a8:	a3 fc       	sbrc	r10, 3
    18aa:	10 c0       	rjmp	.+32     	; 0x18cc <vfprintf+0x33e>
    18ac:	a0 fe       	sbrs	r10, 0
    18ae:	06 c0       	rjmp	.+12     	; 0x18bc <vfprintf+0x32e>
    18b0:	b2 14       	cp	r11, r2
    18b2:	80 f4       	brcc	.+32     	; 0x18d4 <vfprintf+0x346>
    18b4:	28 0c       	add	r2, r8
    18b6:	92 2c       	mov	r9, r2
    18b8:	9b 18       	sub	r9, r11
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <vfprintf+0x348>
    18bc:	b2 14       	cp	r11, r2
    18be:	58 f4       	brcc	.+22     	; 0x18d6 <vfprintf+0x348>
    18c0:	b6 01       	movw	r22, r12
    18c2:	80 e2       	ldi	r24, 0x20	; 32
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	76 d0       	rcall	.+236    	; 0x19b4 <fputc>
    18c8:	b3 94       	inc	r11
    18ca:	f8 cf       	rjmp	.-16     	; 0x18bc <vfprintf+0x32e>
    18cc:	b2 14       	cp	r11, r2
    18ce:	18 f4       	brcc	.+6      	; 0x18d6 <vfprintf+0x348>
    18d0:	2b 18       	sub	r2, r11
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x34a>
    18d4:	98 2c       	mov	r9, r8
    18d6:	21 2c       	mov	r2, r1
    18d8:	a4 fe       	sbrs	r10, 4
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <vfprintf+0x36c>
    18dc:	b6 01       	movw	r22, r12
    18de:	80 e3       	ldi	r24, 0x30	; 48
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	68 d0       	rcall	.+208    	; 0x19b4 <fputc>
    18e4:	a2 fe       	sbrs	r10, 2
    18e6:	16 c0       	rjmp	.+44     	; 0x1914 <vfprintf+0x386>
    18e8:	a1 fc       	sbrc	r10, 1
    18ea:	03 c0       	rjmp	.+6      	; 0x18f2 <vfprintf+0x364>
    18ec:	88 e7       	ldi	r24, 0x78	; 120
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <vfprintf+0x368>
    18f2:	88 e5       	ldi	r24, 0x58	; 88
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b6 01       	movw	r22, r12
    18f8:	0c c0       	rjmp	.+24     	; 0x1912 <vfprintf+0x384>
    18fa:	8a 2d       	mov	r24, r10
    18fc:	86 78       	andi	r24, 0x86	; 134
    18fe:	51 f0       	breq	.+20     	; 0x1914 <vfprintf+0x386>
    1900:	a1 fe       	sbrs	r10, 1
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <vfprintf+0x37a>
    1904:	8b e2       	ldi	r24, 0x2B	; 43
    1906:	01 c0       	rjmp	.+2      	; 0x190a <vfprintf+0x37c>
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	a7 fc       	sbrc	r10, 7
    190c:	8d e2       	ldi	r24, 0x2D	; 45
    190e:	b6 01       	movw	r22, r12
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	50 d0       	rcall	.+160    	; 0x19b4 <fputc>
    1914:	89 14       	cp	r8, r9
    1916:	30 f4       	brcc	.+12     	; 0x1924 <vfprintf+0x396>
    1918:	b6 01       	movw	r22, r12
    191a:	80 e3       	ldi	r24, 0x30	; 48
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	4a d0       	rcall	.+148    	; 0x19b4 <fputc>
    1920:	9a 94       	dec	r9
    1922:	f8 cf       	rjmp	.-16     	; 0x1914 <vfprintf+0x386>
    1924:	8a 94       	dec	r8
    1926:	f3 01       	movw	r30, r6
    1928:	e8 0d       	add	r30, r8
    192a:	f1 1d       	adc	r31, r1
    192c:	80 81       	ld	r24, Z
    192e:	b6 01       	movw	r22, r12
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	40 d0       	rcall	.+128    	; 0x19b4 <fputc>
    1934:	81 10       	cpse	r8, r1
    1936:	f6 cf       	rjmp	.-20     	; 0x1924 <vfprintf+0x396>
    1938:	22 20       	and	r2, r2
    193a:	09 f4       	brne	.+2      	; 0x193e <vfprintf+0x3b0>
    193c:	4e ce       	rjmp	.-868    	; 0x15da <vfprintf+0x4c>
    193e:	b6 01       	movw	r22, r12
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	37 d0       	rcall	.+110    	; 0x19b4 <fputc>
    1946:	2a 94       	dec	r2
    1948:	f7 cf       	rjmp	.-18     	; 0x1938 <vfprintf+0x3aa>
    194a:	f6 01       	movw	r30, r12
    194c:	86 81       	ldd	r24, Z+6	; 0x06
    194e:	97 81       	ldd	r25, Z+7	; 0x07
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x3c8>
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	2b 96       	adiw	r28, 0x0b	; 11
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	9f 90       	pop	r9
    1978:	8f 90       	pop	r8
    197a:	7f 90       	pop	r7
    197c:	6f 90       	pop	r6
    197e:	5f 90       	pop	r5
    1980:	4f 90       	pop	r4
    1982:	3f 90       	pop	r3
    1984:	2f 90       	pop	r2
    1986:	08 95       	ret

00001988 <strnlen_P>:
    1988:	fc 01       	movw	r30, r24
    198a:	05 90       	lpm	r0, Z+
    198c:	61 50       	subi	r22, 0x01	; 1
    198e:	70 40       	sbci	r23, 0x00	; 0
    1990:	01 10       	cpse	r0, r1
    1992:	d8 f7       	brcc	.-10     	; 0x198a <strnlen_P+0x2>
    1994:	80 95       	com	r24
    1996:	90 95       	com	r25
    1998:	8e 0f       	add	r24, r30
    199a:	9f 1f       	adc	r25, r31
    199c:	08 95       	ret

0000199e <strnlen>:
    199e:	fc 01       	movw	r30, r24
    19a0:	61 50       	subi	r22, 0x01	; 1
    19a2:	70 40       	sbci	r23, 0x00	; 0
    19a4:	01 90       	ld	r0, Z+
    19a6:	01 10       	cpse	r0, r1
    19a8:	d8 f7       	brcc	.-10     	; 0x19a0 <strnlen+0x2>
    19aa:	80 95       	com	r24
    19ac:	90 95       	com	r25
    19ae:	8e 0f       	add	r24, r30
    19b0:	9f 1f       	adc	r25, r31
    19b2:	08 95       	ret

000019b4 <fputc>:
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	fb 01       	movw	r30, r22
    19be:	23 81       	ldd	r18, Z+3	; 0x03
    19c0:	21 fd       	sbrc	r18, 1
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <fputc+0x16>
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	9f ef       	ldi	r25, 0xFF	; 255
    19c8:	2c c0       	rjmp	.+88     	; 0x1a22 <fputc+0x6e>
    19ca:	22 ff       	sbrs	r18, 2
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <fputc+0x46>
    19ce:	46 81       	ldd	r20, Z+6	; 0x06
    19d0:	57 81       	ldd	r21, Z+7	; 0x07
    19d2:	24 81       	ldd	r18, Z+4	; 0x04
    19d4:	35 81       	ldd	r19, Z+5	; 0x05
    19d6:	42 17       	cp	r20, r18
    19d8:	53 07       	cpc	r21, r19
    19da:	44 f4       	brge	.+16     	; 0x19ec <fputc+0x38>
    19dc:	a0 81       	ld	r26, Z
    19de:	b1 81       	ldd	r27, Z+1	; 0x01
    19e0:	9d 01       	movw	r18, r26
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	31 83       	std	Z+1, r19	; 0x01
    19e8:	20 83       	st	Z, r18
    19ea:	8c 93       	st	X, r24
    19ec:	26 81       	ldd	r18, Z+6	; 0x06
    19ee:	37 81       	ldd	r19, Z+7	; 0x07
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	37 83       	std	Z+7, r19	; 0x07
    19f6:	26 83       	std	Z+6, r18	; 0x06
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <fputc+0x6e>
    19fa:	8b 01       	movw	r16, r22
    19fc:	ec 01       	movw	r28, r24
    19fe:	fb 01       	movw	r30, r22
    1a00:	00 84       	ldd	r0, Z+8	; 0x08
    1a02:	f1 85       	ldd	r31, Z+9	; 0x09
    1a04:	e0 2d       	mov	r30, r0
    1a06:	09 95       	icall
    1a08:	89 2b       	or	r24, r25
    1a0a:	e1 f6       	brne	.-72     	; 0x19c4 <fputc+0x10>
    1a0c:	d8 01       	movw	r26, r16
    1a0e:	16 96       	adiw	r26, 0x06	; 6
    1a10:	8d 91       	ld	r24, X+
    1a12:	9c 91       	ld	r25, X
    1a14:	17 97       	sbiw	r26, 0x07	; 7
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	17 96       	adiw	r26, 0x07	; 7
    1a1a:	9c 93       	st	X, r25
    1a1c:	8e 93       	st	-X, r24
    1a1e:	16 97       	sbiw	r26, 0x06	; 6
    1a20:	ce 01       	movw	r24, r28
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	08 95       	ret

00001a2c <__ultoa_invert>:
    1a2c:	fa 01       	movw	r30, r20
    1a2e:	aa 27       	eor	r26, r26
    1a30:	28 30       	cpi	r18, 0x08	; 8
    1a32:	51 f1       	breq	.+84     	; 0x1a88 <__ultoa_invert+0x5c>
    1a34:	20 31       	cpi	r18, 0x10	; 16
    1a36:	81 f1       	breq	.+96     	; 0x1a98 <__ultoa_invert+0x6c>
    1a38:	e8 94       	clt
    1a3a:	6f 93       	push	r22
    1a3c:	6e 7f       	andi	r22, 0xFE	; 254
    1a3e:	6e 5f       	subi	r22, 0xFE	; 254
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	8f 4f       	sbci	r24, 0xFF	; 255
    1a44:	9f 4f       	sbci	r25, 0xFF	; 255
    1a46:	af 4f       	sbci	r26, 0xFF	; 255
    1a48:	b1 e0       	ldi	r27, 0x01	; 1
    1a4a:	3e d0       	rcall	.+124    	; 0x1ac8 <__ultoa_invert+0x9c>
    1a4c:	b4 e0       	ldi	r27, 0x04	; 4
    1a4e:	3c d0       	rcall	.+120    	; 0x1ac8 <__ultoa_invert+0x9c>
    1a50:	67 0f       	add	r22, r23
    1a52:	78 1f       	adc	r23, r24
    1a54:	89 1f       	adc	r24, r25
    1a56:	9a 1f       	adc	r25, r26
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	68 0f       	add	r22, r24
    1a5c:	79 1f       	adc	r23, r25
    1a5e:	8a 1f       	adc	r24, r26
    1a60:	91 1d       	adc	r25, r1
    1a62:	a1 1d       	adc	r26, r1
    1a64:	6a 0f       	add	r22, r26
    1a66:	71 1d       	adc	r23, r1
    1a68:	81 1d       	adc	r24, r1
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	a1 1d       	adc	r26, r1
    1a6e:	20 d0       	rcall	.+64     	; 0x1ab0 <__ultoa_invert+0x84>
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <__ultoa_invert+0x48>
    1a72:	68 94       	set
    1a74:	3f 91       	pop	r19
    1a76:	2a e0       	ldi	r18, 0x0A	; 10
    1a78:	26 9f       	mul	r18, r22
    1a7a:	11 24       	eor	r1, r1
    1a7c:	30 19       	sub	r19, r0
    1a7e:	30 5d       	subi	r19, 0xD0	; 208
    1a80:	31 93       	st	Z+, r19
    1a82:	de f6       	brtc	.-74     	; 0x1a3a <__ultoa_invert+0xe>
    1a84:	cf 01       	movw	r24, r30
    1a86:	08 95       	ret
    1a88:	46 2f       	mov	r20, r22
    1a8a:	47 70       	andi	r20, 0x07	; 7
    1a8c:	40 5d       	subi	r20, 0xD0	; 208
    1a8e:	41 93       	st	Z+, r20
    1a90:	b3 e0       	ldi	r27, 0x03	; 3
    1a92:	0f d0       	rcall	.+30     	; 0x1ab2 <__ultoa_invert+0x86>
    1a94:	c9 f7       	brne	.-14     	; 0x1a88 <__ultoa_invert+0x5c>
    1a96:	f6 cf       	rjmp	.-20     	; 0x1a84 <__ultoa_invert+0x58>
    1a98:	46 2f       	mov	r20, r22
    1a9a:	4f 70       	andi	r20, 0x0F	; 15
    1a9c:	40 5d       	subi	r20, 0xD0	; 208
    1a9e:	4a 33       	cpi	r20, 0x3A	; 58
    1aa0:	18 f0       	brcs	.+6      	; 0x1aa8 <__ultoa_invert+0x7c>
    1aa2:	49 5d       	subi	r20, 0xD9	; 217
    1aa4:	31 fd       	sbrc	r19, 1
    1aa6:	40 52       	subi	r20, 0x20	; 32
    1aa8:	41 93       	st	Z+, r20
    1aaa:	02 d0       	rcall	.+4      	; 0x1ab0 <__ultoa_invert+0x84>
    1aac:	a9 f7       	brne	.-22     	; 0x1a98 <__ultoa_invert+0x6c>
    1aae:	ea cf       	rjmp	.-44     	; 0x1a84 <__ultoa_invert+0x58>
    1ab0:	b4 e0       	ldi	r27, 0x04	; 4
    1ab2:	a6 95       	lsr	r26
    1ab4:	97 95       	ror	r25
    1ab6:	87 95       	ror	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	ba 95       	dec	r27
    1abe:	c9 f7       	brne	.-14     	; 0x1ab2 <__ultoa_invert+0x86>
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	61 05       	cpc	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	08 95       	ret
    1ac8:	9b 01       	movw	r18, r22
    1aca:	ac 01       	movw	r20, r24
    1acc:	0a 2e       	mov	r0, r26
    1ace:	06 94       	lsr	r0
    1ad0:	57 95       	ror	r21
    1ad2:	47 95       	ror	r20
    1ad4:	37 95       	ror	r19
    1ad6:	27 95       	ror	r18
    1ad8:	ba 95       	dec	r27
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__ultoa_invert+0xa2>
    1adc:	62 0f       	add	r22, r18
    1ade:	73 1f       	adc	r23, r19
    1ae0:	84 1f       	adc	r24, r20
    1ae2:	95 1f       	adc	r25, r21
    1ae4:	a0 1d       	adc	r26, r0
    1ae6:	08 95       	ret

00001ae8 <_exit>:
    1ae8:	f8 94       	cli

00001aea <__stop_program>:
    1aea:	ff cf       	rjmp	.-2      	; 0x1aea <__stop_program>
