
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  0000180e  000018a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  00800230  00800230  000019d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004465  00000000  00000000  00001d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a5e  00000000  00000000  000061d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030be  00000000  00000000  00007c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000acf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009127  00000000  00000000  0000b468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f8  00000000  00000000  0001458f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00015d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  00016077  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	94 c4       	rjmp	.+2344   	; 0x95e <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c6       	rjmp	.+3504   	; 0xdf6 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e0       	ldi	r30, 0x0E	; 14
      ac:	f8 e1       	ldi	r31, 0x18	; 24
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 33       	cpi	r26, 0x30	; 48
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a0 e3       	ldi	r26, 0x30	; 48
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a1 3b       	cpi	r26, 0xB1	; 177
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	c8 d2       	rcall	.+1424   	; 0x660 <main>
      d0:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_exit>

000000d4 <__bad_interrupt>:
      d4:	93 c3       	rjmp	.+1830   	; 0x7fc <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     120:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     12c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <g_ADCCount+0x1>
     13a:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e4 5c       	subi	r30, 0xC4	; 196
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <g_ADCCount>
     162:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     19a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     1a6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     1aa:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     1ae:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     1b2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2347>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     1cc:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     1d0:	32 d2       	rcall	.+1124   	; 0x636 <LL_UpdateStatus>
     1d2:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2348>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2349>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <_timer+0x23>
     1ec:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2349>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_timer+0x1a>
     206:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2347>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     220:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     22c:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     230:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     234:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	b7 d1       	rcall	.+878    	; 0x5aa <LL_Next>
     23c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <STAGE2+0x1>
     240:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2348>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	03 c0       	rjmp	.+6      	; 0x25e <SERVER_Task+0xd4>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2349>
     25e:	08 95       	ret

00000260 <ADC_Task>:
     260:	cf 92       	push	r12
     262:	df 92       	push	r13
     264:	ef 92       	push	r14
     266:	ff 92       	push	r15
     268:	cf 93       	push	r28
     26a:	ec e3       	ldi	r30, 0x3C	; 60
     26c:	f2 e0       	ldi	r31, 0x02	; 2
     26e:	a0 81       	ld	r26, Z
     270:	b1 81       	ldd	r27, Z+1	; 0x01
     272:	60 81       	ld	r22, Z
     274:	71 81       	ldd	r23, Z+1	; 0x01
     276:	c1 2c       	mov	r12, r1
     278:	d1 2c       	mov	r13, r1
     27a:	76 01       	movw	r14, r12
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	4f b7       	in	r20, 0x3f	; 63
     282:	f8 94       	cli
     284:	fc 01       	movw	r30, r24
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e4 5c       	subi	r30, 0xC4	; 196
     28c:	fd 4f       	sbci	r31, 0xFD	; 253
     28e:	20 81       	ld	r18, Z
     290:	31 81       	ldd	r19, Z+1	; 0x01
     292:	c2 0e       	add	r12, r18
     294:	d3 1e       	adc	r13, r19
     296:	e1 1c       	adc	r14, r1
     298:	f1 1c       	adc	r15, r1
     29a:	20 81       	ld	r18, Z
     29c:	31 81       	ldd	r19, Z+1	; 0x01
     29e:	26 17       	cp	r18, r22
     2a0:	37 07       	cpc	r19, r23
     2a2:	38 f4       	brcc	.+14     	; 0x2b2 <ADC_Task+0x52>
     2a4:	fc 01       	movw	r30, r24
     2a6:	ee 0f       	add	r30, r30
     2a8:	ff 1f       	adc	r31, r31
     2aa:	e4 5c       	subi	r30, 0xC4	; 196
     2ac:	fd 4f       	sbci	r31, 0xFD	; 253
     2ae:	60 81       	ld	r22, Z
     2b0:	71 81       	ldd	r23, Z+1	; 0x01
     2b2:	fc 01       	movw	r30, r24
     2b4:	ee 0f       	add	r30, r30
     2b6:	ff 1f       	adc	r31, r31
     2b8:	e4 5c       	subi	r30, 0xC4	; 196
     2ba:	fd 4f       	sbci	r31, 0xFD	; 253
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	a2 17       	cp	r26, r18
     2c2:	b3 07       	cpc	r27, r19
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <ADC_Task+0x68>
     2c6:	4a c0       	rjmp	.+148    	; 0x35c <ADC_Task+0xfc>
     2c8:	fc 01       	movw	r30, r24
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	e4 5c       	subi	r30, 0xC4	; 196
     2d0:	fd 4f       	sbci	r31, 0xFD	; 253
     2d2:	a0 81       	ld	r26, Z
     2d4:	b1 81       	ldd	r27, Z+1	; 0x01
     2d6:	42 c0       	rjmp	.+132    	; 0x35c <ADC_Task+0xfc>
     2d8:	8f b7       	in	r24, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	ca 1a       	sub	r12, r26
     2de:	db 0a       	sbc	r13, r27
     2e0:	e1 08       	sbc	r14, r1
     2e2:	f1 08       	sbc	r15, r1
     2e4:	c6 1a       	sub	r12, r22
     2e6:	d7 0a       	sbc	r13, r23
     2e8:	e1 08       	sbc	r14, r1
     2ea:	f1 08       	sbc	r15, r1
     2ec:	f6 94       	lsr	r15
     2ee:	e7 94       	ror	r14
     2f0:	d7 94       	ror	r13
     2f2:	c7 94       	ror	r12
     2f4:	f6 94       	lsr	r15
     2f6:	e7 94       	ror	r14
     2f8:	d7 94       	ror	r13
     2fa:	c7 94       	ror	r12
     2fc:	8f bf       	out	0x3f, r24	; 63
     2fe:	cf b7       	in	r28, 0x3f	; 63
     300:	f8 94       	cli
     302:	d7 01       	movw	r26, r14
     304:	c6 01       	movw	r24, r12
     306:	0b 97       	sbiw	r24, 0x0b	; 11
     308:	a1 09       	sbc	r26, r1
     30a:	b1 09       	sbc	r27, r1
     30c:	8d 3d       	cpi	r24, 0xDD	; 221
     30e:	93 40       	sbci	r25, 0x03	; 3
     310:	a1 05       	cpc	r26, r1
     312:	b1 05       	cpc	r27, r1
     314:	a0 f4       	brcc	.+40     	; 0x33e <ADC_Task+0xde>
     316:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     31a:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     31e:	70 d1       	rcall	.+736    	; 0x600 <LL_GetRefl>
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	c8 16       	cp	r12, r24
     326:	d9 06       	cpc	r13, r25
     328:	ea 06       	cpc	r14, r26
     32a:	fb 06       	cpc	r15, r27
     32c:	40 f4       	brcc	.+16     	; 0x33e <ADC_Task+0xde>
     32e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
     332:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     336:	00 97       	sbiw	r24, 0x00	; 0
     338:	11 f0       	breq	.+4      	; 0x33e <ADC_Task+0xde>
     33a:	b6 01       	movw	r22, r12
     33c:	6c d1       	rcall	.+728    	; 0x616 <LL_UpdateRefl>
     33e:	cf bf       	out	0x3f, r28	; 63
     340:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
     344:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
     348:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_timer+0x11>
     34c:	66 9b       	sbis	0x0c, 6	; 12
     34e:	0d c0       	rjmp	.+26     	; 0x36a <ADC_Task+0x10a>
     350:	ea e7       	ldi	r30, 0x7A	; 122
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	80 64       	ori	r24, 0x40	; 64
     358:	80 83       	st	Z, r24
     35a:	07 c0       	rjmp	.+14     	; 0x36a <ADC_Task+0x10a>
     35c:	4f bf       	out	0x3f, r20	; 63
     35e:	01 96       	adiw	r24, 0x01	; 1
     360:	86 30       	cpi	r24, 0x06	; 6
     362:	91 05       	cpc	r25, r1
     364:	09 f0       	breq	.+2      	; 0x368 <ADC_Task+0x108>
     366:	8c cf       	rjmp	.-232    	; 0x280 <ADC_Task+0x20>
     368:	b7 cf       	rjmp	.-146    	; 0x2d8 <ADC_Task+0x78>
     36a:	cf 91       	pop	r28
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret

00000376 <MAG_Task>:
     376:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <g_MotorOn>
     37a:	88 23       	and	r24, r24
     37c:	29 f0       	breq	.+10     	; 0x388 <MAG_Task+0x12>
     37e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2378>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <tick.2378>
     388:	64 99       	sbic	0x0c, 4	; 12
     38a:	1a c0       	rjmp	.+52     	; 0x3c0 <MAG_Task+0x4a>
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     392:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     396:	4f d1       	rcall	.+670    	; 0x636 <LL_UpdateStatus>
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     39e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3a2:	3f d1       	rcall	.+638    	; 0x622 <LL_UpdateMag>
     3a4:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3a8:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3ac:	fe d0       	rcall	.+508    	; 0x5aa <LL_Next>
     3ae:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     3b2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     3b6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     3ba:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2378>
     3be:	08 95       	ret
     3c0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <tick.2378>
     3c4:	8f 31       	cpi	r24, 0x1F	; 31
     3c6:	c8 f0       	brcs	.+50     	; 0x3fa <MAG_Task+0x84>
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3ce:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3d2:	31 d1       	rcall	.+610    	; 0x636 <LL_UpdateStatus>
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3da:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3de:	21 d1       	rcall	.+578    	; 0x622 <LL_UpdateMag>
     3e0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     3e4:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     3e8:	e0 d0       	rcall	.+448    	; 0x5aa <LL_Next>
     3ea:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <STAGE1+0x1>
     3ee:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <STAGE1>
     3f2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_timer+0x1a>
     3f6:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <tick.2378>
     3fa:	08 95       	ret

000003fc <EXIT_Task>:
     3fc:	cf 93       	push	r28
     3fe:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2384>
     402:	81 11       	cpse	r24, r1
     404:	6e c0       	rjmp	.+220    	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     406:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2385>
     40a:	8f 5f       	subi	r24, 0xFF	; 255
     40c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <delay.2385>
     410:	e1 ea       	ldi	r30, 0xA1	; 161
     412:	f2 e0       	ldi	r31, 0x02	; 2
     414:	85 81       	ldd	r24, Z+5	; 0x05
     416:	96 81       	ldd	r25, Z+6	; 0x06
     418:	87 81       	ldd	r24, Z+7	; 0x07
     41a:	03 c0       	rjmp	.+6      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41c:	80 e8       	ldi	r24, 0x80	; 128
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	ff d1       	rcall	.+1022   	; 0x820 <PWM>
     422:	c0 91 a5 02 	lds	r28, 0x02A5	; 0x8002a5 <stepper+0x4>
     426:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     42a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     42e:	e3 d0       	rcall	.+454    	; 0x5f6 <LL_GetClass>
     430:	e8 2f       	mov	r30, r24
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	ea 5f       	subi	r30, 0xFA	; 250
     436:	fe 4f       	sbci	r31, 0xFE	; 254
     438:	80 81       	ld	r24, Z
     43a:	c8 13       	cpse	r28, r24
     43c:	49 c0       	rjmp	.+146    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	ee d1       	rcall	.+988    	; 0x820 <PWM>
     444:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <delay.2385>
     448:	85 31       	cpi	r24, 0x15	; 21
     44a:	28 f4       	brcc	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     44c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <memory.2384>
     450:	88 23       	and	r24, r24
     452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	40 c0       	rjmp	.+128    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <memory.2384>
     45c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <delay.2385>
     460:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     464:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     468:	c6 d0       	rcall	.+396    	; 0x5f6 <LL_GetClass>
     46a:	c8 2f       	mov	r28, r24
     46c:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <HEAD>
     470:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <HEAD+0x1>
     474:	82 81       	ldd	r24, Z+2	; 0x02
     476:	93 81       	ldd	r25, Z+3	; 0x03
     478:	be d0       	rcall	.+380    	; 0x5f6 <LL_GetClass>
     47a:	c8 13       	cpse	r28, r24
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     47e:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <memory.2384>
     482:	63 e0       	ldi	r22, 0x03	; 3
     484:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     488:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     48c:	d4 d0       	rcall	.+424    	; 0x636 <LL_UpdateStatus>
     48e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     492:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     496:	89 d0       	rcall	.+274    	; 0x5aa <LL_Next>
     498:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
     49c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     4a0:	fc 01       	movw	r30, r24
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	93 81       	ldd	r25, Z+3	; 0x03
     4a6:	a7 d0       	rcall	.+334    	; 0x5f6 <LL_GetClass>
     4a8:	e8 2f       	mov	r30, r24
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	ea 5f       	subi	r30, 0xFA	; 250
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	c0 81       	ld	r28, Z
     4b2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     4b6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     4ba:	9d d0       	rcall	.+314    	; 0x5f6 <LL_GetClass>
     4bc:	e8 2f       	mov	r30, r24
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	ea 5f       	subi	r30, 0xFA	; 250
     4c2:	fe 4f       	sbci	r31, 0xFE	; 254
     4c4:	80 81       	ld	r24, Z
     4c6:	6c 2f       	mov	r22, r28
     4c8:	35 d2       	rcall	.+1130   	; 0x934 <STEPPER_SetRotation>
     4ca:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <_timer+0x23>
     4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	a5 d1       	rcall	.+842    	; 0x820 <PWM>
     4d6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     4da:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     4de:	8b d0       	rcall	.+278    	; 0x5f6 <LL_GetClass>
     4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4e2:	e1 ea       	ldi	r30, 0xA1	; 161
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	85 81       	ldd	r24, Z+5	; 0x05
     4e8:	96 81       	ldd	r25, Z+6	; 0x06
     4ea:	97 81       	ldd	r25, Z+7	; 0x07
     4ec:	89 1b       	sub	r24, r25
     4ee:	8f 30       	cpi	r24, 0x0F	; 15
     4f0:	08 f0       	brcs	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	97 cf       	rjmp	.-210    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     4f4:	93 cf       	rjmp	.-218    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <BTN_Task>:
     4fa:	89 b1       	in	r24, 0x09	; 9
     4fc:	83 70       	andi	r24, 0x03	; 3
     4fe:	c9 f0       	breq	.+50     	; 0x532 <BTN_Task+0x38>
     500:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end>
     504:	8f 5f       	subi	r24, 0xFF	; 255
     506:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	90 f0       	brcs	.+36     	; 0x532 <BTN_Task+0x38>
     50e:	89 b1       	in	r24, 0x09	; 9
     510:	83 70       	andi	r24, 0x03	; 3
     512:	19 f4       	brne	.+6      	; 0x51a <BTN_Task+0x20>
     514:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     518:	08 95       	ret
     51a:	89 b1       	in	r24, 0x09	; 9
     51c:	83 70       	andi	r24, 0x03	; 3
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	29 f4       	brne	.+10     	; 0x52c <BTN_Task+0x32>
     522:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <g_PauseRequest>
     526:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     52a:	08 95       	ret
     52c:	89 b1       	in	r24, 0x09	; 9
     52e:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <__data_end>
     532:	08 95       	ret

00000534 <WATCHDOG_Task>:
     534:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	18 f0       	brcs	.+6      	; 0x542 <WATCHDOG_Task+0xe>
     53c:	8b e1       	ldi	r24, 0x1B	; 27
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	4f d3       	rcall	.+1694   	; 0xbe0 <SYS_Pause>
     542:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <g_WDTimeout>
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <g_WDTimeout>
     54c:	08 95       	ret

0000054e <D_Blinky>:
     54e:	9b b1       	in	r25, 0x0b	; 11
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	89 27       	eor	r24, r25
     554:	8b b9       	out	0x0b, r24	; 11
     556:	08 95       	ret

00000558 <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
     558:	08 95       	ret

0000055a <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	7c 01       	movw	r14, r24
     566:	16 2f       	mov	r17, r22
     568:	d4 2f       	mov	r29, r20
     56a:	c2 2f       	mov	r28, r18
     56c:	85 e0       	ldi	r24, 0x05	; 5
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	50 d5       	rcall	.+2720   	; 0x1012 <malloc>
     572:	fc 01       	movw	r30, r24
     574:	f1 82       	std	Z+1, r15	; 0x01
     576:	e0 82       	st	Z, r14
     578:	12 83       	std	Z+2, r17	; 0x02
     57a:	d3 83       	std	Z+3, r29	; 0x03
     57c:	c4 83       	std	Z+4, r28	; 0x04
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	08 95       	ret

0000058a <LL_ItemListInit>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	3e d5       	rcall	.+2684   	; 0x1012 <malloc>
     596:	fc 01       	movw	r30, r24
     598:	d1 83       	std	Z+1, r29	; 0x01
     59a:	c0 83       	st	Z, r28
     59c:	15 82       	std	Z+5, r1	; 0x05
     59e:	14 82       	std	Z+4, r1	; 0x04
     5a0:	13 82       	std	Z+3, r1	; 0x03
     5a2:	12 82       	std	Z+2, r1	; 0x02
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <LL_Next>:
     5aa:	fc 01       	movw	r30, r24
     5ac:	82 81       	ldd	r24, Z+2	; 0x02
     5ae:	93 81       	ldd	r25, Z+3	; 0x03
     5b0:	08 95       	ret

000005b2 <LL_AddBack>:
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	cb 01       	movw	r24, r22
     5ba:	01 c0       	rjmp	.+2      	; 0x5be <LL_AddBack+0xc>
     5bc:	e9 01       	movw	r28, r18
     5be:	2a 81       	ldd	r18, Y+2	; 0x02
     5c0:	3b 81       	ldd	r19, Y+3	; 0x03
     5c2:	21 15       	cp	r18, r1
     5c4:	31 05       	cpc	r19, r1
     5c6:	d1 f7       	brne	.-12     	; 0x5bc <LL_AddBack+0xa>
     5c8:	e0 df       	rcall	.-64     	; 0x58a <LL_ItemListInit>
     5ca:	9b 83       	std	Y+3, r25	; 0x03
     5cc:	8a 83       	std	Y+2, r24	; 0x02
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <LL_Size>:
     5d4:	dc 01       	movw	r26, r24
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	ed 91       	ld	r30, X+
     5da:	fc 91       	ld	r31, X
     5dc:	13 97       	sbiw	r26, 0x03	; 3
     5de:	30 97       	sbiw	r30, 0x00	; 0
     5e0:	41 f0       	breq	.+16     	; 0x5f2 <LL_Size+0x1e>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	8f 5f       	subi	r24, 0xFF	; 255
     5e6:	02 80       	ldd	r0, Z+2	; 0x02
     5e8:	f3 81       	ldd	r31, Z+3	; 0x03
     5ea:	e0 2d       	mov	r30, r0
     5ec:	30 97       	sbiw	r30, 0x00	; 0
     5ee:	d1 f7       	brne	.-12     	; 0x5e4 <LL_Size+0x10>
     5f0:	08 95       	ret
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	08 95       	ret

000005f6 <LL_GetClass>:
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	83 81       	ldd	r24, Z+3	; 0x03
     5fe:	08 95       	ret

00000600 <LL_GetRefl>:
     600:	dc 01       	movw	r26, r24
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	80 81       	ld	r24, Z
     608:	91 81       	ldd	r25, Z+1	; 0x01
     60a:	08 95       	ret

0000060c <LL_GetMag>:
     60c:	dc 01       	movw	r26, r24
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	82 81       	ldd	r24, Z+2	; 0x02
     614:	08 95       	ret

00000616 <LL_UpdateRefl>:
     616:	dc 01       	movw	r26, r24
     618:	ed 91       	ld	r30, X+
     61a:	fc 91       	ld	r31, X
     61c:	71 83       	std	Z+1, r23	; 0x01
     61e:	60 83       	st	Z, r22
     620:	08 95       	ret

00000622 <LL_UpdateMag>:
     622:	dc 01       	movw	r26, r24
     624:	ed 91       	ld	r30, X+
     626:	fc 91       	ld	r31, X
     628:	62 83       	std	Z+2, r22	; 0x02
     62a:	08 95       	ret

0000062c <LL_UpdateClass>:
     62c:	dc 01       	movw	r26, r24
     62e:	ed 91       	ld	r30, X+
     630:	fc 91       	ld	r31, X
     632:	63 83       	std	Z+3, r22	; 0x03
     634:	08 95       	ret

00000636 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     636:	dc 01       	movw	r26, r24
     638:	ed 91       	ld	r30, X+
     63a:	fc 91       	ld	r31, X
     63c:	64 83       	std	Z+4, r22	; 0x04
     63e:	08 95       	ret

00000640 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     640:	dc 01       	movw	r26, r24
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	84 81       	ldd	r24, Z+4	; 0x04
     648:	08 95       	ret

0000064a <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     64e:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     650:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     652:	80 ef       	ldi	r24, 0xF0	; 240
     654:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     656:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     658:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	08 95       	ret

00000660 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     660:	53 d2       	rcall	.+1190   	; 0xb08 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     662:	89 b1       	in	r24, 0x09	; 9
     664:	83 70       	andi	r24, 0x03	; 3
     666:	e9 f7       	brne	.-6      	; 0x662 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     668:	89 e2       	ldi	r24, 0x29	; 41
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	c4 d4       	rcall	.+2440   	; 0xff6 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     66e:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	45 ec       	ldi	r20, 0xC5	; 197
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	41 d4       	rcall	.+2178   	; 0xf04 <TIMER_Create>
		_timer[0].state = READY;
     682:	c6 e5       	ldi	r28, 0x56	; 86
     684:	d2 e0       	ldi	r29, 0x02	; 2
     686:	12 e0       	ldi	r17, 0x02	; 2
     688:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e3       	ldi	r20, 0x30	; 48
     690:	51 e0       	ldi	r21, 0x01	; 1
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	34 d4       	rcall	.+2152   	; 0xf04 <TIMER_Create>
		_timer[1].state = BLOCKED;
     69c:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	4b eb       	ldi	r20, 0xBB	; 187
     6a4:	51 e0       	ldi	r21, 0x01	; 1
     6a6:	61 e0       	ldi	r22, 0x01	; 1
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	2a d4       	rcall	.+2132   	; 0xf04 <TIMER_Create>
		_timer[2].state = BLOCKED;
     6b0:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	4e ef       	ldi	r20, 0xFE	; 254
     6b8:	51 e0       	ldi	r21, 0x01	; 1
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	20 d4       	rcall	.+2112   	; 0xf04 <TIMER_Create>
		_timer[3].state = BLOCKED;
     6c4:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(1, 0, ADD_Task, NULL);		// Item Enter Handling
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4c ea       	ldi	r20, 0xAC	; 172
     6cc:	52 e0       	ldi	r21, 0x02	; 2
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	16 d4       	rcall	.+2092   	; 0xf04 <TIMER_Create>
		_timer[4].state = BLOCKED;
     6d8:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	4d e7       	ldi	r20, 0x7D	; 125
     6e0:	52 e0       	ldi	r21, 0x02	; 2
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0c d4       	rcall	.+2072   	; 0xf04 <TIMER_Create>
		_timer[5].state = READY;
     6ec:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     6ee:	20 e0       	ldi	r18, 0x00	; 0
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	47 ea       	ldi	r20, 0xA7	; 167
     6f4:	52 e0       	ldi	r21, 0x02	; 2
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 ed       	ldi	r24, 0xD0	; 208
     6fc:	97 e0       	ldi	r25, 0x07	; 7
     6fe:	02 d4       	rcall	.+2052   	; 0xf04 <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL);
     700:	1e af       	std	Y+62, r17	; 0x3e
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4a e9       	ldi	r20, 0x9A	; 154
     708:	52 e0       	ldi	r21, 0x02	; 2
     70a:	61 e0       	ldi	r22, 0x01	; 1
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     710:	93 e1       	ldi	r25, 0x13	; 19
     712:	f8 d3       	rcall	.+2032   	; 0xf04 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     714:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_timer+0x47>
     718:	8c e3       	ldi	r24, 0x3C	; 60
     71a:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     71c:	6c d4       	rcall	.+2264   	; 0xff6 <UART_SendString>
     71e:	80 e8       	ldi	r24, 0x80	; 128
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	7e d0       	rcall	.+252    	; 0x820 <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     724:	78 94       	sei
     726:	e1 2c       	mov	r14, r1
					// Unknown non-magnetic object
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     728:	f1 2c       	mov	r15, r1
     72a:	cc 24       	eor	r12, r12
     72c:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     72e:	d1 2c       	mov	r13, r1
     730:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <g_PauseRequest>
     734:	88 23       	and	r24, r24
     736:	19 f0       	breq	.+6      	; 0x73e <main+0xde>
     738:	8e e4       	ldi	r24, 0x4E	; 78
     73a:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     73c:	51 d2       	rcall	.+1186   	; 0xbe0 <SYS_Pause>
     73e:	c0 91 36 02 	lds	r28, 0x0236	; 0x800236 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     742:	d0 91 37 02 	lds	r29, 0x0237	; 0x800237 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     746:	20 97       	sbiw	r28, 0x00	; 0
     748:	99 f3       	breq	.-26     	; 0x730 <main+0xd0>
     74a:	20 97       	sbiw	r28, 0x00	; 0
     74c:	09 f4       	brne	.+2      	; 0x750 <main+0xf0>
     74e:	4f c0       	rjmp	.+158    	; 0x7ee <main+0x18e>
     750:	ce 01       	movw	r24, r28
     752:	51 df       	rcall	.-350    	; 0x5f6 <LL_GetClass>
     754:	84 30       	cpi	r24, 0x04	; 4
     756:	09 f0       	breq	.+2      	; 0x75a <main+0xfa>
     758:	4a c0       	rjmp	.+148    	; 0x7ee <main+0x18e>
     75a:	ce 01       	movw	r24, r28
     75c:	71 df       	rcall	.-286    	; 0x640 <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	09 f0       	breq	.+2      	; 0x764 <main+0x104>
     762:	45 c0       	rjmp	.+138    	; 0x7ee <main+0x18e>
     764:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     766:	4c df       	rcall	.-360    	; 0x600 <LL_GetRefl>
     768:	8c 01       	movw	r16, r24
     76a:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     76c:	4f df       	rcall	.-354    	; 0x60c <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     76e:	88 23       	and	r24, r24
     770:	91 f0       	breq	.+36     	; 0x796 <main+0x136>
     772:	c8 01       	movw	r24, r16
     774:	44 97       	sbiw	r24, 0x14	; 20
     776:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     778:	91 05       	cpc	r25, r1
     77a:	20 f4       	brcc	.+8      	; 0x784 <main+0x124>
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     780:	55 df       	rcall	.-342    	; 0x62c <LL_UpdateClass>
     782:	1a c0       	rjmp	.+52     	; 0x7b8 <main+0x158>
     784:	0b 52       	subi	r16, 0x2B	; 43
     786:	11 40       	sbci	r17, 0x01	; 1
     788:	00 36       	cpi	r16, 0x60	; 96
					{
						LL_UpdateClass(temp, STEEL);
     78a:	11 40       	sbci	r17, 0x01	; 1
     78c:	a8 f4       	brcc	.+42     	; 0x7b8 <main+0x158>
     78e:	63 e0       	ldi	r22, 0x03	; 3
     790:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     792:	4c df       	rcall	.-360    	; 0x62c <LL_UpdateClass>
     794:	11 c0       	rjmp	.+34     	; 0x7b8 <main+0x158>
     796:	c8 01       	movw	r24, r16
     798:	86 57       	subi	r24, 0x76	; 118
     79a:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     79c:	8e 97       	sbiw	r24, 0x2e	; 46
     79e:	20 f4       	brcc	.+8      	; 0x7a8 <main+0x148>
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7a4:	43 df       	rcall	.-378    	; 0x62c <LL_UpdateClass>
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <main+0x158>
     7a8:	0b 53       	subi	r16, 0x3B	; 59
     7aa:	13 40       	sbci	r17, 0x03	; 3
     7ac:	00 33       	cpi	r16, 0x30	; 48
				{
					LL_UpdateClass(temp, WHITE);
     7ae:	11 05       	cpc	r17, r1
     7b0:	18 f4       	brcc	.+6      	; 0x7b8 <main+0x158>
     7b2:	60 e0       	ldi	r22, 0x00	; 0
				}
				else
				{
					// Unknown non-magnetic object
				}
				if(memory == 0)
     7b4:	ce 01       	movw	r24, r28
     7b6:	3a df       	rcall	.-396    	; 0x62c <LL_UpdateClass>
     7b8:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     7ba:	f1 04       	cpc	r15, r1
     7bc:	c1 f4       	brne	.+48     	; 0x7ee <main+0x18e>
     7be:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     7c2:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     7c6:	17 df       	rcall	.-466    	; 0x5f6 <LL_GetClass>
     7c8:	e8 2f       	mov	r30, r24
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e1 5f       	subi	r30, 0xF1	; 241
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	10 81       	ld	r17, Z
     7d2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
     7d6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     7da:	0d df       	rcall	.-486    	; 0x5f6 <LL_GetClass>
     7dc:	e8 2f       	mov	r30, r24
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	e1 5f       	subi	r30, 0xF1	; 241
     7e2:	fe 4f       	sbci	r31, 0xFE	; 254
     7e4:	80 81       	ld	r24, Z
     7e6:	61 2f       	mov	r22, r17
					memory = 1;
     7e8:	a5 d0       	rcall	.+330    	; 0x934 <STEPPER_SetRotation>
     7ea:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     7ec:	fd 2c       	mov	r15, r13
     7ee:	ce 01       	movw	r24, r28
     7f0:	dc de       	rcall	.-584    	; 0x5aa <LL_Next>
     7f2:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     7f4:	89 2b       	or	r24, r25
     7f6:	09 f0       	breq	.+2      	; 0x7fa <main+0x19a>
     7f8:	a8 cf       	rjmp	.-176    	; 0x74a <main+0xea>
     7fa:	9a cf       	rjmp	.-204    	; 0x730 <main+0xd0>

000007fc <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     806:	8a ea       	ldi	r24, 0xAA	; 170
     808:	88 b9       	out	0x08, r24	; 8
     80a:	fe cf       	rjmp	.-4      	; 0x808 <__vector_default+0xc>

0000080c <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     80c:	84 b5       	in	r24, 0x24	; 36
     80e:	83 68       	ori	r24, 0x83	; 131
     810:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     812:	85 b5       	in	r24, 0x25	; 37
     814:	83 60       	ori	r24, 0x03	; 3
     816:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     818:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <BELT_SPEED>
     81c:	87 bd       	out	0x27, r24	; 39
     81e:	08 95       	ret

00000820 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     820:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     822:	9f b7       	in	r25, 0x3f	; 63
     824:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     826:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <BELT_SPEED>
     82a:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     82c:	23 2b       	or	r18, r19
     82e:	31 f0       	breq	.+12     	; 0x83c <PWM+0x1c>
		{
			g_MotorOn = 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <g_MotorOn>
			PORTB = ~0x0E;
     836:	81 ef       	ldi	r24, 0xF1	; 241
     838:	85 b9       	out	0x05, r24	; 5
     83a:	04 c0       	rjmp	.+8      	; 0x844 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     83c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <g_MotorOn>
			PORTB = ~0x0F;
     840:	80 ef       	ldi	r24, 0xF0	; 240
     842:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     844:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     846:	08 95       	ret

00000848 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     848:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     84a:	e1 ea       	ldi	r30, 0xA1	; 161
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	10 82       	st	Z, r1
	stepper.direction = 1;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     854:	13 82       	std	Z+3, r1	; 0x03
     856:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     858:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     85a:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     85c:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     85e:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     860:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     862:	88 ec       	ldi	r24, 0xC8	; 200
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	96 83       	std	Z+6, r25	; 0x06
     868:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     86a:	80 e3       	ldi	r24, 0x30	; 48
     86c:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     86e:	84 e9       	ldi	r24, 0x94	; 148
     870:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     874:	e0 eb       	ldi	r30, 0xB0	; 176
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	80 81       	ld	r24, Z
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     87e:	e0 e7       	ldi	r30, 0x70	; 112
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	82 60       	ori	r24, 0x02	; 2
     886:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     888:	e1 eb       	ldi	r30, 0xB1	; 177
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	87 60       	ori	r24, 0x07	; 7
     890:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     892:	78 94       	sei
     894:	08 95       	ret

00000896 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	86 1b       	sub	r24, r22
     89a:	91 09       	sbc	r25, r1
	if (steps >= 0)
     89c:	52 f0       	brmi	.+20     	; 0x8b2 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     89e:	85 36       	cpi	r24, 0x65	; 101
     8a0:	91 05       	cpc	r25, r1
     8a2:	8c f0       	brlt	.+34     	; 0x8c6 <STEPPER_NumSteps+0x30>
     8a4:	24 e6       	ldi	r18, 0x64	; 100
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	a9 01       	movw	r20, r18
     8aa:	48 1b       	sub	r20, r24
     8ac:	59 0b       	sbc	r21, r25
     8ae:	ca 01       	movw	r24, r20
     8b0:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     8b2:	8c 39       	cpi	r24, 0x9C	; 156
     8b4:	5f ef       	ldi	r21, 0xFF	; 255
     8b6:	95 07       	cpc	r25, r21
     8b8:	34 f4       	brge	.+12     	; 0x8c6 <STEPPER_NumSteps+0x30>
     8ba:	2c e9       	ldi	r18, 0x9C	; 156
     8bc:	3f ef       	ldi	r19, 0xFF	; 255
     8be:	a9 01       	movw	r20, r18
     8c0:	48 1b       	sub	r20, r24
     8c2:	59 0b       	sbc	r21, r25
     8c4:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     8c6:	08 95       	ret

000008c8 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     8cc:	c1 ea       	ldi	r28, 0xA1	; 161
     8ce:	d2 e0       	ldi	r29, 0x02	; 2
     8d0:	6c 81       	ldd	r22, Y+4	; 0x04
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	df df       	rcall	.-66     	; 0x896 <STEPPER_NumSteps>
     8d8:	9e 83       	std	Y+6, r25	; 0x06
     8da:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     8dc:	6a 81       	ldd	r22, Y+2	; 0x02
     8de:	7b 81       	ldd	r23, Y+3	; 0x03
     8e0:	88 85       	ldd	r24, Y+8	; 0x08
     8e2:	d9 df       	rcall	.-78     	; 0x896 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     8e4:	2d 81       	ldd	r18, Y+5	; 0x05
     8e6:	3e 81       	ldd	r19, Y+6	; 0x06
     8e8:	33 23       	and	r19, r19
     8ea:	14 f4       	brge	.+4      	; 0x8f0 <STEPPER_Rotate+0x28>
     8ec:	28 e0       	ldi	r18, 0x08	; 8
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <STEPPER_Rotate+0x2a>
     8f0:	24 e0       	ldi	r18, 0x04	; 4
     8f2:	e1 ea       	ldi	r30, 0xA1	; 161
     8f4:	f2 e0       	ldi	r31, 0x02	; 2
     8f6:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     8f8:	45 81       	ldd	r20, Z+5	; 0x05
     8fa:	56 81       	ldd	r21, Z+6	; 0x06
     8fc:	84 9f       	mul	r24, r20
     8fe:	90 01       	movw	r18, r0
     900:	85 9f       	mul	r24, r21
     902:	30 0d       	add	r19, r0
     904:	94 9f       	mul	r25, r20
     906:	30 0d       	add	r19, r0
     908:	11 24       	eor	r1, r1
     90a:	83 2f       	mov	r24, r19
     90c:	80 95       	com	r24
     90e:	88 1f       	adc	r24, r24
     910:	88 27       	eor	r24, r24
     912:	88 1f       	adc	r24, r24
     914:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     916:	85 81       	ldd	r24, Z+5	; 0x05
     918:	96 81       	ldd	r25, Z+6	; 0x06
     91a:	99 23       	and	r25, r25
     91c:	1c f4       	brge	.+6      	; 0x924 <STEPPER_Rotate+0x5c>
     91e:	91 95       	neg	r25
     920:	81 95       	neg	r24
     922:	91 09       	sbc	r25, r1
     924:	e1 ea       	ldi	r30, 0xA1	; 161
     926:	f2 e0       	ldi	r31, 0x02	; 2
     928:	96 83       	std	Z+6, r25	; 0x06
     92a:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     92c:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	cli();
     938:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	c1 ea       	ldi	r28, 0xA1	; 161
     93e:	d2 e0       	ldi	r29, 0x02	; 2
     940:	9b 83       	std	Y+3, r25	; 0x03
     942:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     944:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     946:	c0 df       	rcall	.-128    	; 0x8c8 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     948:	eb 85       	ldd	r30, Y+11	; 0x0b
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	eb 5e       	subi	r30, 0xEB	; 235
     94e:	fe 4f       	sbci	r31, 0xFE	; 254
     950:	80 81       	ld	r24, Z
     952:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     956:	78 94       	sei
}
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     95e:	1f 92       	push	r1
     960:	0f 92       	push	r0
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	0f 92       	push	r0
     966:	11 24       	eor	r1, r1
     968:	0b b6       	in	r0, 0x3b	; 59
     96a:	0f 92       	push	r0
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	00 d0       	rcall	.+0      	; 0x982 <__vector_13+0x24>
     982:	00 d0       	rcall	.+0      	; 0x984 <__vector_13+0x26>
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     988:	86 e3       	ldi	r24, 0x36	; 54
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	9e e2       	ldi	r25, 0x2E	; 46
     992:	ad e2       	ldi	r26, 0x2D	; 45
     994:	b5 e3       	ldi	r27, 0x35	; 53
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	9a 83       	std	Y+2, r25	; 0x02
     99a:	ab 83       	std	Y+3, r26	; 0x03
     99c:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     99e:	e1 ea       	ldi	r30, 0xA1	; 161
     9a0:	f2 e0       	ldi	r31, 0x02	; 2
     9a2:	87 81       	ldd	r24, Z+7	; 0x07
     9a4:	25 81       	ldd	r18, Z+5	; 0x05
     9a6:	36 81       	ldd	r19, Z+6	; 0x06
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	82 17       	cp	r24, r18
     9ac:	93 07       	cpc	r25, r19
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__vector_13+0x54>
     9b0:	5a c0       	rjmp	.+180    	; 0xa66 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     9b2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <stepper+0x1>
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	51 f4       	brne	.+20     	; 0x9ce <__vector_13+0x70>
     9ba:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9be:	e1 e0       	ldi	r30, 0x01	; 1
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	ec 0f       	add	r30, r28
     9c4:	fd 1f       	adc	r31, r29
     9c6:	e8 0f       	add	r30, r24
     9c8:	f1 1d       	adc	r31, r1
     9ca:	80 81       	ld	r24, Z
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__vector_13+0x8a>
     9ce:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9d2:	e3 e0       	ldi	r30, 0x03	; 3
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	e8 1b       	sub	r30, r24
     9d8:	f1 09       	sbc	r31, r1
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	8c 0f       	add	r24, r28
     9e0:	9d 1f       	adc	r25, r29
     9e2:	e8 0f       	add	r30, r24
     9e4:	f9 1f       	adc	r31, r25
     9e6:	80 81       	ld	r24, Z
     9e8:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     9ea:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	21 f0       	breq	.+8      	; 0x9fa <__vector_13+0x9c>
     9f2:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <stepper>
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__vector_13+0x9e>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	e1 ea       	ldi	r30, 0xA1	; 161
     9fe:	f2 e0       	ldi	r31, 0x02	; 2
     a00:	80 83       	st	Z, r24

		stepper._currentStep++;
     a02:	87 81       	ldd	r24, Z+7	; 0x07
     a04:	8f 5f       	subi	r24, 0xFF	; 255
     a06:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     a08:	85 81       	ldd	r24, Z+5	; 0x05
     a0a:	96 81       	ldd	r25, Z+6	; 0x06
     a0c:	27 81       	ldd	r18, Z+7	; 0x07
     a0e:	82 1b       	sub	r24, r18
     a10:	91 09       	sbc	r25, r1
     a12:	06 97       	sbiw	r24, 0x06	; 6
     a14:	74 f4       	brge	.+28     	; 0xa32 <__vector_13+0xd4>
     a16:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	eb 5e       	subi	r30, 0xEB	; 235
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	80 81       	ld	r24, Z
     a22:	84 39       	cpi	r24, 0x94	; 148
     a24:	30 f4       	brcc	.+12     	; 0xa32 <__vector_13+0xd4>
		{
			stepper._accellStep--;
     a26:	e1 ea       	ldi	r30, 0xA1	; 161
     a28:	f2 e0       	ldi	r31, 0x02	; 2
     a2a:	83 85       	ldd	r24, Z+11	; 0x0b
     a2c:	81 50       	subi	r24, 0x01	; 1
     a2e:	83 87       	std	Z+11, r24	; 0x0b
     a30:	11 c0       	rjmp	.+34     	; 0xa54 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a32:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <stepper+0x7>
     a36:	86 30       	cpi	r24, 0x06	; 6
     a38:	68 f0       	brcs	.+26     	; 0xa54 <__vector_13+0xf6>
     a3a:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	eb 5e       	subi	r30, 0xEB	; 235
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	80 81       	ld	r24, Z
     a46:	81 34       	cpi	r24, 0x41	; 65
     a48:	28 f0       	brcs	.+10     	; 0xa54 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     a4a:	e1 ea       	ldi	r30, 0xA1	; 161
     a4c:	f2 e0       	ldi	r31, 0x02	; 2
     a4e:	83 85       	ldd	r24, Z+11	; 0x0b
     a50:	8f 5f       	subi	r24, 0xFF	; 255
     a52:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     a54:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <stepper+0xb>
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	eb 5e       	subi	r30, 0xEB	; 235
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	80 81       	ld	r24, Z
     a60:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a64:	29 c0       	rjmp	.+82     	; 0xab8 <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     a66:	e1 ea       	ldi	r30, 0xA1	; 161
     a68:	f2 e0       	ldi	r31, 0x02	; 2
     a6a:	87 81       	ldd	r24, Z+7	; 0x07
     a6c:	25 81       	ldd	r18, Z+5	; 0x05
     a6e:	36 81       	ldd	r19, Z+6	; 0x06
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	82 17       	cp	r24, r18
     a74:	93 07       	cpc	r25, r19
     a76:	01 f5       	brne	.+64     	; 0xab8 <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a7e:	81 85       	ldd	r24, Z+9	; 0x09
     a80:	88 23       	and	r24, r24
     a82:	19 f0       	breq	.+6      	; 0xa8a <__vector_13+0x12c>
     a84:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <stepper+0xb>
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <__vector_13+0x12e>
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	a1 ea       	ldi	r26, 0xA1	; 161
     a8e:	b2 e0       	ldi	r27, 0x02	; 2
     a90:	1b 96       	adiw	r26, 0x0b	; 11
     a92:	8c 93       	st	X, r24
     a94:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a96:	1b 96       	adiw	r26, 0x0b	; 11
     a98:	ec 91       	ld	r30, X
     a9a:	1b 97       	sbiw	r26, 0x0b	; 11
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	eb 5e       	subi	r30, 0xEB	; 235
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	80 81       	ld	r24, Z
     aa4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     aa8:	19 96       	adiw	r26, 0x09	; 9
     aaa:	8c 91       	ld	r24, X
     aac:	81 11       	cpse	r24, r1
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <__vector_13+0x156>
     ab0:	82 b1       	in	r24, 0x02	; 2
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <__vector_13+0x158>
     ab4:	82 b1       	in	r24, 0x02	; 2
     ab6:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     ab8:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <stepper+0xa>
     abc:	81 11       	cpse	r24, r1
     abe:	0f c0       	rjmp	.+30     	; 0xade <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     ac0:	63 99       	sbic	0x0c, 3	; 12
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     ac4:	e1 ea       	ldi	r30, 0xA1	; 161
     ac6:	f2 e0       	ldi	r31, 0x02	; 2
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     acc:	10 82       	st	Z, r1
			stepper.direction = 1;
     ace:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     ad0:	13 82       	std	Z+3, r1	; 0x03
     ad2:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     ad4:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ad6:	16 82       	std	Z+6, r1	; 0x06
     ad8:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ada:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     adc:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	bf 91       	pop	r27
     af0:	af 91       	pop	r26
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0b be       	out	0x3b, r0	; 59
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     b0e:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     b10:	e1 e6       	ldi	r30, 0x61	; 97
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	80 83       	st	Z, r24
	CLKPR = 0;
     b18:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     b1a:	55 d2       	rcall	.+1194   	; 0xfc6 <UART_Init>
	GPIO_Init();
     b1c:	96 dd       	rcall	.-1236   	; 0x64a <GPIO_Init>
	TIMER_Init();
     b1e:	d8 d1       	rcall	.+944    	; 0xed0 <TIMER_Init>
	PWM_Init();
     b20:	75 de       	rcall	.-790    	; 0x80c <PWM_Init>
     b22:	d9 da       	rcall	.-2638   	; 0xd6 <ADC_Init>
	ADC_Init();
     b24:	91 de       	rcall	.-734    	; 0x848 <STEPPER_Init>
     b26:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <g_ADCCount+0x1>
	STEPPER_Init();
     b2a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     b2e:	84 e1       	ldi	r24, 0x14	; 20
     b30:	ec e3       	ldi	r30, 0x3C	; 60
     b32:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     b34:	df 01       	movw	r26, r30
     b36:	1d 92       	st	X+, r1
     b38:	8a 95       	dec	r24
     b3a:	e9 f7       	brne	.-6      	; 0xb36 <SYS_Init+0x2e>
     b3c:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <HEAD+0x1>
     b40:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <HEAD>

	HEAD = NULL;
     b44:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <TAIL+0x1>
     b48:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <TAIL>
	TAIL = NULL;
     b4c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <STAGE1+0x1>
     b50:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <STAGE1>
	STAGE1 = NULL;
     b54:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <STAGE2+0x1>
     b58:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <STAGE2>
	STAGE2 = NULL;
     b5c:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <FRONT+0x1>
     b60:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <FRONT>
	FRONT = NULL;
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     b68:	6f ef       	ldi	r22, 0xFF	; 255
     b6a:	89 ee       	ldi	r24, 0xE9	; 233
     b6c:	9d ef       	ldi	r25, 0xFD	; 253
     b6e:	f5 dc       	rcall	.-1558   	; 0x55a <LL_ItemInit>
     b70:	0c dd       	rcall	.-1512   	; 0x58a <LL_ItemListInit>
     b72:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     b76:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <HEAD>
     b7a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <FRONT+0x1>
     b7e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <FRONT>
	FRONT = HEAD;
     b82:	ca ef       	ldi	r28, 0xFA	; 250
     b84:	08 ee       	ldi	r16, 0xE8	; 232
     b86:	1d ef       	ldi	r17, 0xFD	; 253
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     b8c:	6c 2f       	mov	r22, r28
     b8e:	c8 01       	movw	r24, r16
     b90:	e4 dc       	rcall	.-1592   	; 0x55a <LL_ItemInit>
     b92:	bc 01       	movw	r22, r24
     b94:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     b98:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     b9c:	0a dd       	rcall	.-1516   	; 0x5b2 <LL_AddBack>
     b9e:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <TAIL+0x1>
     ba2:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <TAIL>
     ba6:	01 50       	subi	r16, 0x01	; 1
     ba8:	11 09       	sbc	r17, r1
     baa:	c1 50       	subi	r28, 0x01	; 1
     bac:	cb 3c       	cpi	r28, 0xCB	; 203
     bae:	61 f7       	brne	.-40     	; 0xb88 <SYS_Init+0x80>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     bb0:	05 e0       	ldi	r16, 0x05	; 5
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     bb8:	6a ef       	ldi	r22, 0xFA	; 250
     bba:	88 ee       	ldi	r24, 0xE8	; 232
     bbc:	9d ef       	ldi	r25, 0xFD	; 253
     bbe:	cd dc       	rcall	.-1638   	; 0x55a <LL_ItemInit>
     bc0:	bc 01       	movw	r22, r24
     bc2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <HEAD>
		LL_AddBack(HEAD,initNode);
     bc6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <HEAD+0x1>
     bca:	f3 dc       	rcall	.-1562   	; 0x5b2 <LL_AddBack>
     bcc:	01 50       	subi	r16, 0x01	; 1
     bce:	11 09       	sbc	r17, r1
     bd0:	89 f7       	brne	.-30     	; 0xbb4 <SYS_Init+0xac>
     bd2:	84 e5       	ldi	r24, 0x54	; 84
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     bd4:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     bd6:	0f d2       	rcall	.+1054   	; 0xff6 <UART_SendString>
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16

} // SYS_Init
     bde:	08 95       	ret

00000be0 <SYS_Pause>:
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	c8 5c       	subi	r28, 0xC8	; 200
     c08:	d1 09       	sbc	r29, r1
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	98 2e       	mov	r9, r24
     c16:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     c18:	f8 94       	cli

	// Turn off motor
	PWM(0);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	00 de       	rcall	.-1024   	; 0x820 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     c20:	00 91 38 02 	lds	r16, 0x0238	; 0x800238 <FRONT>
     c24:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     c28:	8f 92       	push	r8
     c2a:	9f 92       	push	r9
     c2c:	8a e6       	ldi	r24, 0x6A	; 106
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	7c 01       	movw	r14, r24
     c3a:	9f 93       	push	r25
     c3c:	8f 93       	push	r24
     c3e:	0a d3       	rcall	.+1556   	; 0x1254 <sprintf>
	UART_SendString(buffer);
     c40:	c7 01       	movw	r24, r14
     c42:	d9 d1       	rcall	.+946    	; 0xff6 <UART_SendString>
     c44:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     c52:	f1 2c       	mov	r15, r1
     c54:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c56:	f5 e8       	ldi	r31, 0x85	; 133
     c58:	af 2e       	mov	r10, r31
     c5a:	f1 e0       	ldi	r31, 0x01	; 1
     c5c:	bf 2e       	mov	r11, r31
     c5e:	f0 2d       	mov	r31, r0
     c60:	6e 01       	movw	r12, r28
     c62:	97 e9       	ldi	r25, 0x97	; 151
     c64:	c9 0e       	add	r12, r25
     c66:	d1 1c       	adc	r13, r1
     c68:	27 c0       	rjmp	.+78     	; 0xcb8 <SYS_Pause+0xd8>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     c6a:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     c6c:	ee 1a       	sub	r14, r30
     c6e:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c70:	c8 01       	movw	r24, r16
     c72:	e6 dc       	rcall	.-1588   	; 0x640 <LL_GetStatus>
     c74:	58 2e       	mov	r5, r24
     c76:	c8 01       	movw	r24, r16
     c78:	be dc       	rcall	.-1668   	; 0x5f6 <LL_GetClass>
     c7a:	68 2e       	mov	r6, r24
     c7c:	c8 01       	movw	r24, r16
     c7e:	c6 dc       	rcall	.-1652   	; 0x60c <LL_GetMag>
     c80:	78 2e       	mov	r7, r24
     c82:	c8 01       	movw	r24, r16
     c84:	bd dc       	rcall	.-1670   	; 0x600 <LL_GetRefl>
     c86:	1f 92       	push	r1
     c88:	5f 92       	push	r5
     c8a:	1f 92       	push	r1
     c8c:	6f 92       	push	r6
     c8e:	1f 92       	push	r1
     c90:	7f 92       	push	r7
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	ff 92       	push	r15
     c98:	ef 92       	push	r14
     c9a:	bf 92       	push	r11
     c9c:	af 92       	push	r10
     c9e:	df 92       	push	r13
     ca0:	cf 92       	push	r12
     ca2:	d8 d2       	rcall	.+1456   	; 0x1254 <sprintf>
		UART_SendString(listbuff);
     ca4:	c6 01       	movw	r24, r12
     ca6:	a7 d1       	rcall	.+846    	; 0xff6 <UART_SendString>
     ca8:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     caa:	7f dc       	rcall	.-1794   	; 0x5aa <LL_Next>
     cac:	8c 01       	movw	r16, r24
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	c8 01       	movw	r24, r16
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     cba:	9d dc       	rcall	.-1734   	; 0x5f6 <LL_GetClass>
     cbc:	85 30       	cpi	r24, 0x05	; 5
     cbe:	a9 f6       	brne	.-86     	; 0xc6a <SYS_Pause+0x8a>
     cc0:	0f 2e       	mov	r0, r31
     cc2:	f6 e5       	ldi	r31, 0x56	; 86
     cc4:	cf 2e       	mov	r12, r31
     cc6:	f2 e0       	ldi	r31, 0x02	; 2
     cc8:	df 2e       	mov	r13, r31
     cca:	f0 2d       	mov	r31, r0
     ccc:	00 e0       	ldi	r16, 0x00	; 0
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	0f 2e       	mov	r0, r31
     cd2:	f9 eb       	ldi	r31, 0xB9	; 185
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     cd4:	af 2e       	mov	r10, r31
     cd6:	f1 e0       	ldi	r31, 0x01	; 1
     cd8:	bf 2e       	mov	r11, r31
     cda:	f0 2d       	mov	r31, r0
     cdc:	7e 01       	movw	r14, r28
     cde:	97 e9       	ldi	r25, 0x97	; 151
     ce0:	e9 0e       	add	r14, r25
     ce2:	f1 1c       	adc	r15, r1
     ce4:	f6 01       	movw	r30, r12
     ce6:	80 85       	ldd	r24, Z+8	; 0x08
     ce8:	1f 92       	push	r1
     cea:	8f 93       	push	r24
     cec:	1f 93       	push	r17
     cee:	0f 93       	push	r16
     cf0:	8f 92       	push	r8
     cf2:	9f 92       	push	r9
     cf4:	bf 92       	push	r11
     cf6:	af 92       	push	r10
     cf8:	ff 92       	push	r15
     cfa:	ef 92       	push	r14
     cfc:	ab d2       	rcall	.+1366   	; 0x1254 <sprintf>
     cfe:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     d00:	7a d1       	rcall	.+756    	; 0xff6 <UART_SendString>
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     d06:	f9 e0       	ldi	r31, 0x09	; 9
     d08:	cf 0e       	add	r12, r31
     d0a:	d1 1c       	adc	r13, r1
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	07 30       	cpi	r16, 0x07	; 7
     d18:	11 05       	cpc	r17, r1
     d1a:	21 f7       	brne	.-56     	; 0xce4 <SYS_Pause+0x104>
     d1c:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <STAGE2>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     d20:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <STAGE2+0x1>
     d24:	6d dc       	rcall	.-1830   	; 0x600 <LL_GetRefl>
     d26:	48 2e       	mov	r4, r24
     d28:	39 2e       	mov	r3, r25
     d2a:	60 90 9e 02 	lds	r6, 0x029E	; 0x80029e <STAGE2>
     d2e:	50 90 9f 02 	lds	r5, 0x029F	; 0x80029f <STAGE2+0x1>
     d32:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <STAGE1>
     d36:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <STAGE1+0x1>
     d3a:	68 dc       	rcall	.-1840   	; 0x60c <LL_GetMag>
     d3c:	78 2e       	mov	r7, r24
     d3e:	90 90 54 02 	lds	r9, 0x0254	; 0x800254 <STAGE1>
     d42:	80 90 55 02 	lds	r8, 0x0255	; 0x800255 <STAGE1+0x1>
     d46:	00 91 3a 02 	lds	r16, 0x023A	; 0x80023a <TAIL>
     d4a:	10 91 3b 02 	lds	r17, 0x023B	; 0x80023b <TAIL+0x1>
     d4e:	f8 01       	movw	r30, r16
     d50:	b2 80       	ldd	r11, Z+2	; 0x02
     d52:	a3 80       	ldd	r10, Z+3	; 0x03
     d54:	d0 90 38 02 	lds	r13, 0x0238	; 0x800238 <FRONT>
     d58:	c0 90 39 02 	lds	r12, 0x0239	; 0x800239 <FRONT+0x1>
     d5c:	f0 90 36 02 	lds	r15, 0x0236	; 0x800236 <HEAD>
     d60:	e0 90 37 02 	lds	r14, 0x0237	; 0x800237 <HEAD+0x1>
     d64:	8f 2d       	mov	r24, r15
     d66:	9e 2d       	mov	r25, r14
     d68:	35 dc       	rcall	.-1942   	; 0x5d4 <LL_Size>
     d6a:	3f 92       	push	r3
     d6c:	4f 92       	push	r4
     d6e:	5f 92       	push	r5
     d70:	6f 92       	push	r6
     d72:	1f 92       	push	r1
     d74:	7f 92       	push	r7
     d76:	8f 92       	push	r8
     d78:	9f 92       	push	r9
     d7a:	af 92       	push	r10
     d7c:	bf 92       	push	r11
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	1f 93       	push	r17
     d84:	0f 93       	push	r16
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	1f 92       	push	r1
     d8c:	8f 93       	push	r24
     d8e:	88 ed       	ldi	r24, 0xD8	; 216
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	9f 93       	push	r25
     d94:	8f 93       	push	r24
     d96:	8e 01       	movw	r16, r28
     d98:	0b 59       	subi	r16, 0x9B	; 155
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	1f 93       	push	r17
     d9e:	0f 93       	push	r16
     da0:	59 d2       	rcall	.+1202   	; 0x1254 <sprintf>
	UART_SendString(anotherbuff);
     da2:	c8 01       	movw	r24, r16
     da4:	28 d1       	rcall	.+592    	; 0xff6 <UART_SendString>
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	89 b1       	in	r24, 0x09	; 9

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     db2:	83 70       	andi	r24, 0x03	; 3
     db4:	e9 f7       	brne	.-6      	; 0xdb0 <SYS_Pause+0x1d0>
     db6:	89 e2       	ldi	r24, 0x29	; 41
		{
			UART_SendString("Starting System!\r\n");
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	1d d1       	rcall	.+570    	; 0xff6 <UART_SendString>
     dbc:	80 e8       	ldi	r24, 0x80	; 128
     dbe:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     dc0:	2f dd       	rcall	.-1442   	; 0x820 <PWM>
     dc2:	78 94       	sei
     dc4:	c8 53       	subi	r28, 0x38	; 56
     dc6:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     dc8:	0f b6       	in	r0, 0x3f	; 63
			return;
		}
	}
} // SYS_Pause
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	08 95       	ret

00000df6 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     e28:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     e2c:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <_timer_tick+0x1>
     e36:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <_timer_tick>
     e3a:	c6 e5       	ldi	r28, 0x56	; 86
     e3c:	d2 e0       	ldi	r29, 0x02	; 2
     e3e:	0f 2e       	mov	r0, r31
     e40:	fe e9       	ldi	r31, 0x9E	; 158
     e42:	ef 2e       	mov	r14, r31
     e44:	f2 e0       	ldi	r31, 0x02	; 2
     e46:	ff 2e       	mov	r15, r31
     e48:	f0 2d       	mov	r31, r0
     e4a:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     e4c:	ec 81       	ldd	r30, Y+4	; 0x04
     e4e:	fd 81       	ldd	r31, Y+5	; 0x05
     e50:	30 97       	sbiw	r30, 0x00	; 0
     e52:	09 f1       	breq	.+66     	; 0xe96 <__vector_17+0xa0>
     e54:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <_timer_tick>
     e58:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <_timer_tick+0x1>
     e5c:	28 81       	ld	r18, Y
     e5e:	39 81       	ldd	r19, Y+1	; 0x01
     e60:	28 17       	cp	r18, r24
     e62:	39 07       	cpc	r19, r25
     e64:	c1 f4       	brne	.+48     	; 0xe96 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     e66:	88 85       	ldd	r24, Y+8	; 0x08
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	19 f4       	brne	.+6      	; 0xe72 <__vector_17+0x7c>
     e6c:	8e 81       	ldd	r24, Y+6	; 0x06
     e6e:	9f 81       	ldd	r25, Y+7	; 0x07
     e70:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     e72:	d8 01       	movw	r26, r16
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	8d 91       	ld	r24, X+
     e78:	9c 91       	ld	r25, X
     e7a:	13 97       	sbiw	r26, 0x03	; 3
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	41 f0       	breq	.+16     	; 0xe90 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     e80:	2d 91       	ld	r18, X+
     e82:	3c 91       	ld	r19, X
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	8d 93       	st	X+, r24
     e8c:	9c 93       	st	X, r25
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     e90:	f8 01       	movw	r30, r16
     e92:	15 82       	std	Z+5, r1	; 0x05
     e94:	14 82       	std	Z+4, r1	; 0x04
     e96:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     e98:	ce 15       	cp	r28, r14
     e9a:	df 05       	cpc	r29, r15
     e9c:	b1 f6       	brne	.-84     	; 0xe4a <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	0f 90       	pop	r0
     ec4:	0b be       	out	0x3b, r0	; 59
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
     ed0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ed4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
     ed8:	88 e4       	ldi	r24, 0x48	; 72
     eda:	98 e0       	ldi	r25, 0x08	; 8
     edc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ee0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     ee4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     ee8:	89 e0       	ldi	r24, 0x09	; 9
     eea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     ef4:	88 e4       	ldi	r24, 0x48	; 72
     ef6:	e6 e5       	ldi	r30, 0x56	; 86
     ef8:	f2 e0       	ldi	r31, 0x02	; 2
     efa:	df 01       	movw	r26, r30
     efc:	1d 92       	st	X+, r1
     efe:	8a 95       	dec	r24
     f00:	e9 f7       	brne	.-6      	; 0xefc <TIMER_Init+0x2c>
     f02:	08 95       	ret

00000f04 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     f0e:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <_timer+0x4>
     f12:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <_timer+0x5>
     f16:	67 2b       	or	r22, r23
     f18:	09 f4       	brne	.+2      	; 0xf1c <TIMER_Create+0x18>
     f1a:	49 c0       	rjmp	.+146    	; 0xfae <TIMER_Create+0xaa>
     f1c:	e6 e5       	ldi	r30, 0x56	; 86
     f1e:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     f20:	a1 e0       	ldi	r26, 0x01	; 1
     f22:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     f24:	c5 85       	ldd	r28, Z+13	; 0x0d
     f26:	d6 85       	ldd	r29, Z+14	; 0x0e
     f28:	cd 2b       	or	r28, r29
     f2a:	09 f4       	brne	.+2      	; 0xf2e <TIMER_Create+0x2a>
     f2c:	42 c0       	rjmp	.+132    	; 0xfb2 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	39 96       	adiw	r30, 0x09	; 9
     f32:	a8 30       	cpi	r26, 0x08	; 8
     f34:	b1 05       	cpc	r27, r1
     f36:	b1 f7       	brne	.-20     	; 0xf24 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	3f c0       	rjmp	.+126    	; 0xfbc <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
     f3e:	fd 01       	movw	r30, r26
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	ee 0f       	add	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	ea 0f       	add	r30, r26
     f4e:	fb 1f       	adc	r31, r27
     f50:	ea 5a       	subi	r30, 0xAA	; 170
     f52:	fd 4f       	sbci	r31, 0xFD	; 253
     f54:	93 83       	std	Z+3, r25	; 0x03
     f56:	82 83       	std	Z+2, r24	; 0x02
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     f5a:	fd 01       	movw	r30, r26
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	ee 0f       	add	r30, r30
     f62:	ff 1f       	adc	r31, r31
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	ea 0f       	add	r30, r26
     f6a:	fb 1f       	adc	r31, r27
     f6c:	ea 5a       	subi	r30, 0xAA	; 170
     f6e:	fd 4f       	sbci	r31, 0xFD	; 253
     f70:	13 82       	std	Z+3, r1	; 0x03
     f72:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     f74:	fd 01       	movw	r30, r26
     f76:	ee 0f       	add	r30, r30
     f78:	ff 1f       	adc	r31, r31
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ea 0f       	add	r30, r26
     f84:	fb 1f       	adc	r31, r27
     f86:	ea 5a       	subi	r30, 0xAA	; 170
     f88:	fd 4f       	sbci	r31, 0xFD	; 253
     f8a:	55 83       	std	Z+5, r21	; 0x05
     f8c:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     f8e:	37 83       	std	Z+7, r19	; 0x07
     f90:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
     f92:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <_timer_tick>
     f96:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <_timer_tick+0x1>
     f9a:	82 0f       	add	r24, r18
     f9c:	93 1f       	adc	r25, r19
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	80 83       	st	Z, r24
			_timer[i].state = READY;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fa6:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     fa8:	8a 2f       	mov	r24, r26
     faa:	9b 2f       	mov	r25, r27
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fb2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fb4:	f8 94       	cli
		{
			if (periodic != 0) 
     fb6:	01 2b       	or	r16, r17
     fb8:	11 f6       	brne	.-124    	; 0xf3e <TIMER_Create+0x3a>
     fba:	cf cf       	rjmp	.-98     	; 0xf5a <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     fc6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     fca:	83 e3       	ldi	r24, 0x33	; 51
     fcc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     fd0:	e9 ec       	ldi	r30, 0xC9	; 201
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 61       	ori	r24, 0x18	; 24
     fd8:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     fda:	ea ec       	ldi	r30, 0xCA	; 202
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	86 60       	ori	r24, 0x06	; 6
     fe2:	80 83       	st	Z, r24
     fe4:	08 95       	ret

00000fe6 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     fe6:	e8 ec       	ldi	r30, 0xC8	; 200
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	90 81       	ld	r25, Z
     fec:	95 ff       	sbrs	r25, 5
     fee:	fd cf       	rjmp	.-6      	; 0xfea <UART_SendChar+0x4>
	UDR1 = c;
     ff0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     ff4:	08 95       	ret

00000ff6 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     ffc:	88 81       	ld	r24, Y
     ffe:	88 23       	and	r24, r24
    1000:	29 f0       	breq	.+10     	; 0x100c <UART_SendString+0x16>
    1002:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1004:	f0 df       	rcall	.-32     	; 0xfe6 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1006:	89 91       	ld	r24, Y+
    1008:	81 11       	cpse	r24, r1
    100a:	fc cf       	rjmp	.-8      	; 0x1004 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <malloc>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	91 05       	cpc	r25, r1
    101e:	10 f4       	brcc	.+4      	; 0x1024 <malloc+0x12>
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <__flp>
    1028:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <__flp+0x1>
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	19 f1       	breq	.+70     	; 0x107e <malloc+0x6c>
    1038:	40 81       	ld	r20, Z
    103a:	51 81       	ldd	r21, Z+1	; 0x01
    103c:	02 81       	ldd	r16, Z+2	; 0x02
    103e:	13 81       	ldd	r17, Z+3	; 0x03
    1040:	48 17       	cp	r20, r24
    1042:	59 07       	cpc	r21, r25
    1044:	c8 f0       	brcs	.+50     	; 0x1078 <malloc+0x66>
    1046:	84 17       	cp	r24, r20
    1048:	95 07       	cpc	r25, r21
    104a:	69 f4       	brne	.+26     	; 0x1066 <malloc+0x54>
    104c:	10 97       	sbiw	r26, 0x00	; 0
    104e:	31 f0       	breq	.+12     	; 0x105c <malloc+0x4a>
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	0c 93       	st	X, r16
    1054:	12 97       	sbiw	r26, 0x02	; 2
    1056:	13 96       	adiw	r26, 0x03	; 3
    1058:	1c 93       	st	X, r17
    105a:	27 c0       	rjmp	.+78     	; 0x10aa <malloc+0x98>
    105c:	00 93 af 02 	sts	0x02AF, r16	; 0x8002af <__flp>
    1060:	10 93 b0 02 	sts	0x02B0, r17	; 0x8002b0 <__flp+0x1>
    1064:	22 c0       	rjmp	.+68     	; 0x10aa <malloc+0x98>
    1066:	21 15       	cp	r18, r1
    1068:	31 05       	cpc	r19, r1
    106a:	19 f0       	breq	.+6      	; 0x1072 <malloc+0x60>
    106c:	42 17       	cp	r20, r18
    106e:	53 07       	cpc	r21, r19
    1070:	18 f4       	brcc	.+6      	; 0x1078 <malloc+0x66>
    1072:	9a 01       	movw	r18, r20
    1074:	bd 01       	movw	r22, r26
    1076:	ef 01       	movw	r28, r30
    1078:	df 01       	movw	r26, r30
    107a:	f8 01       	movw	r30, r16
    107c:	db cf       	rjmp	.-74     	; 0x1034 <malloc+0x22>
    107e:	21 15       	cp	r18, r1
    1080:	31 05       	cpc	r19, r1
    1082:	f9 f0       	breq	.+62     	; 0x10c2 <malloc+0xb0>
    1084:	28 1b       	sub	r18, r24
    1086:	39 0b       	sbc	r19, r25
    1088:	24 30       	cpi	r18, 0x04	; 4
    108a:	31 05       	cpc	r19, r1
    108c:	80 f4       	brcc	.+32     	; 0x10ae <malloc+0x9c>
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	61 15       	cp	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	21 f0       	breq	.+8      	; 0x10a0 <malloc+0x8e>
    1098:	fb 01       	movw	r30, r22
    109a:	93 83       	std	Z+3, r25	; 0x03
    109c:	82 83       	std	Z+2, r24	; 0x02
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <malloc+0x96>
    10a0:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <__flp+0x1>
    10a4:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <__flp>
    10a8:	fe 01       	movw	r30, r28
    10aa:	32 96       	adiw	r30, 0x02	; 2
    10ac:	44 c0       	rjmp	.+136    	; 0x1136 <malloc+0x124>
    10ae:	fe 01       	movw	r30, r28
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	81 93       	st	Z+, r24
    10b6:	91 93       	st	Z+, r25
    10b8:	22 50       	subi	r18, 0x02	; 2
    10ba:	31 09       	sbc	r19, r1
    10bc:	39 83       	std	Y+1, r19	; 0x01
    10be:	28 83       	st	Y, r18
    10c0:	3a c0       	rjmp	.+116    	; 0x1136 <malloc+0x124>
    10c2:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    10c6:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    10ca:	23 2b       	or	r18, r19
    10cc:	41 f4       	brne	.+16     	; 0x10de <malloc+0xcc>
    10ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    10d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    10d6:	30 93 ae 02 	sts	0x02AE, r19	; 0x8002ae <__brkval+0x1>
    10da:	20 93 ad 02 	sts	0x02AD, r18	; 0x8002ad <__brkval>
    10de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    10e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	41 f4       	brne	.+16     	; 0x10fc <malloc+0xea>
    10ec:	2d b7       	in	r18, 0x3d	; 61
    10ee:	3e b7       	in	r19, 0x3e	; 62
    10f0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10f4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10f8:	24 1b       	sub	r18, r20
    10fa:	35 0b       	sbc	r19, r21
    10fc:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <__brkval>
    1100:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <__brkval+0x1>
    1104:	e2 17       	cp	r30, r18
    1106:	f3 07       	cpc	r31, r19
    1108:	a0 f4       	brcc	.+40     	; 0x1132 <malloc+0x120>
    110a:	2e 1b       	sub	r18, r30
    110c:	3f 0b       	sbc	r19, r31
    110e:	28 17       	cp	r18, r24
    1110:	39 07       	cpc	r19, r25
    1112:	78 f0       	brcs	.+30     	; 0x1132 <malloc+0x120>
    1114:	ac 01       	movw	r20, r24
    1116:	4e 5f       	subi	r20, 0xFE	; 254
    1118:	5f 4f       	sbci	r21, 0xFF	; 255
    111a:	24 17       	cp	r18, r20
    111c:	35 07       	cpc	r19, r21
    111e:	48 f0       	brcs	.+18     	; 0x1132 <malloc+0x120>
    1120:	4e 0f       	add	r20, r30
    1122:	5f 1f       	adc	r21, r31
    1124:	50 93 ae 02 	sts	0x02AE, r21	; 0x8002ae <__brkval+0x1>
    1128:	40 93 ad 02 	sts	0x02AD, r20	; 0x8002ad <__brkval>
    112c:	81 93       	st	Z+, r24
    112e:	91 93       	st	Z+, r25
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <malloc+0x124>
    1132:	e0 e0       	ldi	r30, 0x00	; 0
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	cf 01       	movw	r24, r30
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <free>:
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	09 f4       	brne	.+2      	; 0x114c <free+0xa>
    114a:	81 c0       	rjmp	.+258    	; 0x124e <free+0x10c>
    114c:	fc 01       	movw	r30, r24
    114e:	32 97       	sbiw	r30, 0x02	; 2
    1150:	13 82       	std	Z+3, r1	; 0x03
    1152:	12 82       	std	Z+2, r1	; 0x02
    1154:	a0 91 af 02 	lds	r26, 0x02AF	; 0x8002af <__flp>
    1158:	b0 91 b0 02 	lds	r27, 0x02B0	; 0x8002b0 <__flp+0x1>
    115c:	10 97       	sbiw	r26, 0x00	; 0
    115e:	81 f4       	brne	.+32     	; 0x1180 <free+0x3e>
    1160:	20 81       	ld	r18, Z
    1162:	31 81       	ldd	r19, Z+1	; 0x01
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    116c:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	51 f5       	brne	.+84     	; 0x11ca <free+0x88>
    1176:	f0 93 ae 02 	sts	0x02AE, r31	; 0x8002ae <__brkval+0x1>
    117a:	e0 93 ad 02 	sts	0x02AD, r30	; 0x8002ad <__brkval>
    117e:	67 c0       	rjmp	.+206    	; 0x124e <free+0x10c>
    1180:	ed 01       	movw	r28, r26
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	ce 17       	cp	r28, r30
    1188:	df 07       	cpc	r29, r31
    118a:	40 f4       	brcc	.+16     	; 0x119c <free+0x5a>
    118c:	4a 81       	ldd	r20, Y+2	; 0x02
    118e:	5b 81       	ldd	r21, Y+3	; 0x03
    1190:	9e 01       	movw	r18, r28
    1192:	41 15       	cp	r20, r1
    1194:	51 05       	cpc	r21, r1
    1196:	f1 f0       	breq	.+60     	; 0x11d4 <free+0x92>
    1198:	ea 01       	movw	r28, r20
    119a:	f5 cf       	rjmp	.-22     	; 0x1186 <free+0x44>
    119c:	d3 83       	std	Z+3, r29	; 0x03
    119e:	c2 83       	std	Z+2, r28	; 0x02
    11a0:	40 81       	ld	r20, Z
    11a2:	51 81       	ldd	r21, Z+1	; 0x01
    11a4:	84 0f       	add	r24, r20
    11a6:	95 1f       	adc	r25, r21
    11a8:	c8 17       	cp	r28, r24
    11aa:	d9 07       	cpc	r29, r25
    11ac:	59 f4       	brne	.+22     	; 0x11c4 <free+0x82>
    11ae:	88 81       	ld	r24, Y
    11b0:	99 81       	ldd	r25, Y+1	; 0x01
    11b2:	84 0f       	add	r24, r20
    11b4:	95 1f       	adc	r25, r21
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	93 83       	std	Z+3, r25	; 0x03
    11c2:	82 83       	std	Z+2, r24	; 0x02
    11c4:	21 15       	cp	r18, r1
    11c6:	31 05       	cpc	r19, r1
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <free+0x92>
    11ca:	f0 93 b0 02 	sts	0x02B0, r31	; 0x8002b0 <__flp+0x1>
    11ce:	e0 93 af 02 	sts	0x02AF, r30	; 0x8002af <__flp>
    11d2:	3d c0       	rjmp	.+122    	; 0x124e <free+0x10c>
    11d4:	e9 01       	movw	r28, r18
    11d6:	fb 83       	std	Y+3, r31	; 0x03
    11d8:	ea 83       	std	Y+2, r30	; 0x02
    11da:	49 91       	ld	r20, Y+
    11dc:	59 91       	ld	r21, Y+
    11de:	c4 0f       	add	r28, r20
    11e0:	d5 1f       	adc	r29, r21
    11e2:	ec 17       	cp	r30, r28
    11e4:	fd 07       	cpc	r31, r29
    11e6:	61 f4       	brne	.+24     	; 0x1200 <free+0xbe>
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	84 0f       	add	r24, r20
    11ee:	95 1f       	adc	r25, r21
    11f0:	02 96       	adiw	r24, 0x02	; 2
    11f2:	e9 01       	movw	r28, r18
    11f4:	99 83       	std	Y+1, r25	; 0x01
    11f6:	88 83       	st	Y, r24
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	e0 e0       	ldi	r30, 0x00	; 0
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	12 96       	adiw	r26, 0x02	; 2
    1206:	8d 91       	ld	r24, X+
    1208:	9c 91       	ld	r25, X
    120a:	13 97       	sbiw	r26, 0x03	; 3
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	19 f0       	breq	.+6      	; 0x1216 <free+0xd4>
    1210:	fd 01       	movw	r30, r26
    1212:	dc 01       	movw	r26, r24
    1214:	f7 cf       	rjmp	.-18     	; 0x1204 <free+0xc2>
    1216:	8d 91       	ld	r24, X+
    1218:	9c 91       	ld	r25, X
    121a:	11 97       	sbiw	r26, 0x01	; 1
    121c:	9d 01       	movw	r18, r26
    121e:	2e 5f       	subi	r18, 0xFE	; 254
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <__brkval>
    122a:	30 91 ae 02 	lds	r19, 0x02AE	; 0x8002ae <__brkval+0x1>
    122e:	28 17       	cp	r18, r24
    1230:	39 07       	cpc	r19, r25
    1232:	69 f4       	brne	.+26     	; 0x124e <free+0x10c>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	29 f4       	brne	.+10     	; 0x1242 <free+0x100>
    1238:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__flp+0x1>
    123c:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <__flp>
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <free+0x104>
    1242:	13 82       	std	Z+3, r1	; 0x03
    1244:	12 82       	std	Z+2, r1	; 0x02
    1246:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <__brkval+0x1>
    124a:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <__brkval>
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <sprintf>:
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	2e 97       	sbiw	r28, 0x0e	; 14
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
    126c:	0d 89       	ldd	r16, Y+21	; 0x15
    126e:	1e 89       	ldd	r17, Y+22	; 0x16
    1270:	86 e0       	ldi	r24, 0x06	; 6
    1272:	8c 83       	std	Y+4, r24	; 0x04
    1274:	1a 83       	std	Y+2, r17	; 0x02
    1276:	09 83       	std	Y+1, r16	; 0x01
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	9f e7       	ldi	r25, 0x7F	; 127
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	8d 83       	std	Y+5, r24	; 0x05
    1280:	ae 01       	movw	r20, r28
    1282:	47 5e       	subi	r20, 0xE7	; 231
    1284:	5f 4f       	sbci	r21, 0xFF	; 255
    1286:	6f 89       	ldd	r22, Y+23	; 0x17
    1288:	78 8d       	ldd	r23, Y+24	; 0x18
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	10 d0       	rcall	.+32     	; 0x12b0 <vfprintf>
    1290:	ef 81       	ldd	r30, Y+7	; 0x07
    1292:	f8 85       	ldd	r31, Y+8	; 0x08
    1294:	e0 0f       	add	r30, r16
    1296:	f1 1f       	adc	r31, r17
    1298:	10 82       	st	Z, r1
    129a:	2e 96       	adiw	r28, 0x0e	; 14
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	08 95       	ret

000012b0 <vfprintf>:
    12b0:	2f 92       	push	r2
    12b2:	3f 92       	push	r3
    12b4:	4f 92       	push	r4
    12b6:	5f 92       	push	r5
    12b8:	6f 92       	push	r6
    12ba:	7f 92       	push	r7
    12bc:	8f 92       	push	r8
    12be:	9f 92       	push	r9
    12c0:	af 92       	push	r10
    12c2:	bf 92       	push	r11
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	2b 97       	sbiw	r28, 0x0b	; 11
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	6c 01       	movw	r12, r24
    12e6:	7b 01       	movw	r14, r22
    12e8:	8a 01       	movw	r16, r20
    12ea:	fc 01       	movw	r30, r24
    12ec:	17 82       	std	Z+7, r1	; 0x07
    12ee:	16 82       	std	Z+6, r1	; 0x06
    12f0:	83 81       	ldd	r24, Z+3	; 0x03
    12f2:	81 ff       	sbrs	r24, 1
    12f4:	bf c1       	rjmp	.+894    	; 0x1674 <vfprintf+0x3c4>
    12f6:	ce 01       	movw	r24, r28
    12f8:	01 96       	adiw	r24, 0x01	; 1
    12fa:	3c 01       	movw	r6, r24
    12fc:	f6 01       	movw	r30, r12
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	f7 01       	movw	r30, r14
    1302:	93 fd       	sbrc	r25, 3
    1304:	85 91       	lpm	r24, Z+
    1306:	93 ff       	sbrs	r25, 3
    1308:	81 91       	ld	r24, Z+
    130a:	7f 01       	movw	r14, r30
    130c:	88 23       	and	r24, r24
    130e:	09 f4       	brne	.+2      	; 0x1312 <vfprintf+0x62>
    1310:	ad c1       	rjmp	.+858    	; 0x166c <vfprintf+0x3bc>
    1312:	85 32       	cpi	r24, 0x25	; 37
    1314:	39 f4       	brne	.+14     	; 0x1324 <vfprintf+0x74>
    1316:	93 fd       	sbrc	r25, 3
    1318:	85 91       	lpm	r24, Z+
    131a:	93 ff       	sbrs	r25, 3
    131c:	81 91       	ld	r24, Z+
    131e:	7f 01       	movw	r14, r30
    1320:	85 32       	cpi	r24, 0x25	; 37
    1322:	21 f4       	brne	.+8      	; 0x132c <vfprintf+0x7c>
    1324:	b6 01       	movw	r22, r12
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	d6 d1       	rcall	.+940    	; 0x16d6 <fputc>
    132a:	e8 cf       	rjmp	.-48     	; 0x12fc <vfprintf+0x4c>
    132c:	91 2c       	mov	r9, r1
    132e:	21 2c       	mov	r2, r1
    1330:	31 2c       	mov	r3, r1
    1332:	ff e1       	ldi	r31, 0x1F	; 31
    1334:	f3 15       	cp	r31, r3
    1336:	d8 f0       	brcs	.+54     	; 0x136e <vfprintf+0xbe>
    1338:	8b 32       	cpi	r24, 0x2B	; 43
    133a:	79 f0       	breq	.+30     	; 0x135a <vfprintf+0xaa>
    133c:	38 f4       	brcc	.+14     	; 0x134c <vfprintf+0x9c>
    133e:	80 32       	cpi	r24, 0x20	; 32
    1340:	79 f0       	breq	.+30     	; 0x1360 <vfprintf+0xb0>
    1342:	83 32       	cpi	r24, 0x23	; 35
    1344:	a1 f4       	brne	.+40     	; 0x136e <vfprintf+0xbe>
    1346:	23 2d       	mov	r18, r3
    1348:	20 61       	ori	r18, 0x10	; 16
    134a:	1d c0       	rjmp	.+58     	; 0x1386 <vfprintf+0xd6>
    134c:	8d 32       	cpi	r24, 0x2D	; 45
    134e:	61 f0       	breq	.+24     	; 0x1368 <vfprintf+0xb8>
    1350:	80 33       	cpi	r24, 0x30	; 48
    1352:	69 f4       	brne	.+26     	; 0x136e <vfprintf+0xbe>
    1354:	23 2d       	mov	r18, r3
    1356:	21 60       	ori	r18, 0x01	; 1
    1358:	16 c0       	rjmp	.+44     	; 0x1386 <vfprintf+0xd6>
    135a:	83 2d       	mov	r24, r3
    135c:	82 60       	ori	r24, 0x02	; 2
    135e:	38 2e       	mov	r3, r24
    1360:	e3 2d       	mov	r30, r3
    1362:	e4 60       	ori	r30, 0x04	; 4
    1364:	3e 2e       	mov	r3, r30
    1366:	2a c0       	rjmp	.+84     	; 0x13bc <vfprintf+0x10c>
    1368:	f3 2d       	mov	r31, r3
    136a:	f8 60       	ori	r31, 0x08	; 8
    136c:	1d c0       	rjmp	.+58     	; 0x13a8 <vfprintf+0xf8>
    136e:	37 fc       	sbrc	r3, 7
    1370:	2d c0       	rjmp	.+90     	; 0x13cc <vfprintf+0x11c>
    1372:	20 ed       	ldi	r18, 0xD0	; 208
    1374:	28 0f       	add	r18, r24
    1376:	2a 30       	cpi	r18, 0x0A	; 10
    1378:	40 f0       	brcs	.+16     	; 0x138a <vfprintf+0xda>
    137a:	8e 32       	cpi	r24, 0x2E	; 46
    137c:	b9 f4       	brne	.+46     	; 0x13ac <vfprintf+0xfc>
    137e:	36 fc       	sbrc	r3, 6
    1380:	75 c1       	rjmp	.+746    	; 0x166c <vfprintf+0x3bc>
    1382:	23 2d       	mov	r18, r3
    1384:	20 64       	ori	r18, 0x40	; 64
    1386:	32 2e       	mov	r3, r18
    1388:	19 c0       	rjmp	.+50     	; 0x13bc <vfprintf+0x10c>
    138a:	36 fe       	sbrs	r3, 6
    138c:	06 c0       	rjmp	.+12     	; 0x139a <vfprintf+0xea>
    138e:	8a e0       	ldi	r24, 0x0A	; 10
    1390:	98 9e       	mul	r9, r24
    1392:	20 0d       	add	r18, r0
    1394:	11 24       	eor	r1, r1
    1396:	92 2e       	mov	r9, r18
    1398:	11 c0       	rjmp	.+34     	; 0x13bc <vfprintf+0x10c>
    139a:	ea e0       	ldi	r30, 0x0A	; 10
    139c:	2e 9e       	mul	r2, r30
    139e:	20 0d       	add	r18, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	22 2e       	mov	r2, r18
    13a4:	f3 2d       	mov	r31, r3
    13a6:	f0 62       	ori	r31, 0x20	; 32
    13a8:	3f 2e       	mov	r3, r31
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <vfprintf+0x10c>
    13ac:	8c 36       	cpi	r24, 0x6C	; 108
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <vfprintf+0x108>
    13b0:	83 2d       	mov	r24, r3
    13b2:	80 68       	ori	r24, 0x80	; 128
    13b4:	38 2e       	mov	r3, r24
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x10c>
    13b8:	88 36       	cpi	r24, 0x68	; 104
    13ba:	41 f4       	brne	.+16     	; 0x13cc <vfprintf+0x11c>
    13bc:	f7 01       	movw	r30, r14
    13be:	93 fd       	sbrc	r25, 3
    13c0:	85 91       	lpm	r24, Z+
    13c2:	93 ff       	sbrs	r25, 3
    13c4:	81 91       	ld	r24, Z+
    13c6:	7f 01       	movw	r14, r30
    13c8:	81 11       	cpse	r24, r1
    13ca:	b3 cf       	rjmp	.-154    	; 0x1332 <vfprintf+0x82>
    13cc:	98 2f       	mov	r25, r24
    13ce:	9f 7d       	andi	r25, 0xDF	; 223
    13d0:	95 54       	subi	r25, 0x45	; 69
    13d2:	93 30       	cpi	r25, 0x03	; 3
    13d4:	28 f4       	brcc	.+10     	; 0x13e0 <vfprintf+0x130>
    13d6:	0c 5f       	subi	r16, 0xFC	; 252
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	9f e3       	ldi	r25, 0x3F	; 63
    13dc:	99 83       	std	Y+1, r25	; 0x01
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <vfprintf+0x14a>
    13e0:	83 36       	cpi	r24, 0x63	; 99
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <vfprintf+0x140>
    13e4:	83 37       	cpi	r24, 0x73	; 115
    13e6:	71 f0       	breq	.+28     	; 0x1404 <vfprintf+0x154>
    13e8:	83 35       	cpi	r24, 0x53	; 83
    13ea:	09 f0       	breq	.+2      	; 0x13ee <vfprintf+0x13e>
    13ec:	55 c0       	rjmp	.+170    	; 0x1498 <vfprintf+0x1e8>
    13ee:	20 c0       	rjmp	.+64     	; 0x1430 <vfprintf+0x180>
    13f0:	f8 01       	movw	r30, r16
    13f2:	80 81       	ld	r24, Z
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	0e 5f       	subi	r16, 0xFE	; 254
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
    13fa:	88 24       	eor	r8, r8
    13fc:	83 94       	inc	r8
    13fe:	91 2c       	mov	r9, r1
    1400:	53 01       	movw	r10, r6
    1402:	12 c0       	rjmp	.+36     	; 0x1428 <vfprintf+0x178>
    1404:	28 01       	movw	r4, r16
    1406:	f2 e0       	ldi	r31, 0x02	; 2
    1408:	4f 0e       	add	r4, r31
    140a:	51 1c       	adc	r5, r1
    140c:	f8 01       	movw	r30, r16
    140e:	a0 80       	ld	r10, Z
    1410:	b1 80       	ldd	r11, Z+1	; 0x01
    1412:	36 fe       	sbrs	r3, 6
    1414:	03 c0       	rjmp	.+6      	; 0x141c <vfprintf+0x16c>
    1416:	69 2d       	mov	r22, r9
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0x170>
    141c:	6f ef       	ldi	r22, 0xFF	; 255
    141e:	7f ef       	ldi	r23, 0xFF	; 255
    1420:	c5 01       	movw	r24, r10
    1422:	4e d1       	rcall	.+668    	; 0x16c0 <strnlen>
    1424:	4c 01       	movw	r8, r24
    1426:	82 01       	movw	r16, r4
    1428:	f3 2d       	mov	r31, r3
    142a:	ff 77       	andi	r31, 0x7F	; 127
    142c:	3f 2e       	mov	r3, r31
    142e:	15 c0       	rjmp	.+42     	; 0x145a <vfprintf+0x1aa>
    1430:	28 01       	movw	r4, r16
    1432:	22 e0       	ldi	r18, 0x02	; 2
    1434:	42 0e       	add	r4, r18
    1436:	51 1c       	adc	r5, r1
    1438:	f8 01       	movw	r30, r16
    143a:	a0 80       	ld	r10, Z
    143c:	b1 80       	ldd	r11, Z+1	; 0x01
    143e:	36 fe       	sbrs	r3, 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x198>
    1442:	69 2d       	mov	r22, r9
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0x19c>
    1448:	6f ef       	ldi	r22, 0xFF	; 255
    144a:	7f ef       	ldi	r23, 0xFF	; 255
    144c:	c5 01       	movw	r24, r10
    144e:	2d d1       	rcall	.+602    	; 0x16aa <strnlen_P>
    1450:	4c 01       	movw	r8, r24
    1452:	f3 2d       	mov	r31, r3
    1454:	f0 68       	ori	r31, 0x80	; 128
    1456:	3f 2e       	mov	r3, r31
    1458:	82 01       	movw	r16, r4
    145a:	33 fc       	sbrc	r3, 3
    145c:	19 c0       	rjmp	.+50     	; 0x1490 <vfprintf+0x1e0>
    145e:	82 2d       	mov	r24, r2
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 16       	cp	r8, r24
    1464:	99 06       	cpc	r9, r25
    1466:	a0 f4       	brcc	.+40     	; 0x1490 <vfprintf+0x1e0>
    1468:	b6 01       	movw	r22, r12
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	33 d1       	rcall	.+614    	; 0x16d6 <fputc>
    1470:	2a 94       	dec	r2
    1472:	f5 cf       	rjmp	.-22     	; 0x145e <vfprintf+0x1ae>
    1474:	f5 01       	movw	r30, r10
    1476:	37 fc       	sbrc	r3, 7
    1478:	85 91       	lpm	r24, Z+
    147a:	37 fe       	sbrs	r3, 7
    147c:	81 91       	ld	r24, Z+
    147e:	5f 01       	movw	r10, r30
    1480:	b6 01       	movw	r22, r12
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	28 d1       	rcall	.+592    	; 0x16d6 <fputc>
    1486:	21 10       	cpse	r2, r1
    1488:	2a 94       	dec	r2
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	82 1a       	sub	r8, r18
    148e:	91 08       	sbc	r9, r1
    1490:	81 14       	cp	r8, r1
    1492:	91 04       	cpc	r9, r1
    1494:	79 f7       	brne	.-34     	; 0x1474 <vfprintf+0x1c4>
    1496:	e1 c0       	rjmp	.+450    	; 0x165a <vfprintf+0x3aa>
    1498:	84 36       	cpi	r24, 0x64	; 100
    149a:	11 f0       	breq	.+4      	; 0x14a0 <vfprintf+0x1f0>
    149c:	89 36       	cpi	r24, 0x69	; 105
    149e:	39 f5       	brne	.+78     	; 0x14ee <vfprintf+0x23e>
    14a0:	f8 01       	movw	r30, r16
    14a2:	37 fe       	sbrs	r3, 7
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <vfprintf+0x204>
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	0c 5f       	subi	r16, 0xFC	; 252
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <vfprintf+0x214>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	07 2e       	mov	r0, r23
    14ba:	00 0c       	add	r0, r0
    14bc:	88 0b       	sbc	r24, r24
    14be:	99 0b       	sbc	r25, r25
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	f3 2d       	mov	r31, r3
    14c6:	ff 76       	andi	r31, 0x6F	; 111
    14c8:	3f 2e       	mov	r3, r31
    14ca:	97 ff       	sbrs	r25, 7
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x230>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	f0 68       	ori	r31, 0x80	; 128
    14de:	3f 2e       	mov	r3, r31
    14e0:	2a e0       	ldi	r18, 0x0A	; 10
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	a3 01       	movw	r20, r6
    14e6:	33 d1       	rcall	.+614    	; 0x174e <__ultoa_invert>
    14e8:	88 2e       	mov	r8, r24
    14ea:	86 18       	sub	r8, r6
    14ec:	44 c0       	rjmp	.+136    	; 0x1576 <vfprintf+0x2c6>
    14ee:	85 37       	cpi	r24, 0x75	; 117
    14f0:	31 f4       	brne	.+12     	; 0x14fe <vfprintf+0x24e>
    14f2:	23 2d       	mov	r18, r3
    14f4:	2f 7e       	andi	r18, 0xEF	; 239
    14f6:	b2 2e       	mov	r11, r18
    14f8:	2a e0       	ldi	r18, 0x0A	; 10
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	25 c0       	rjmp	.+74     	; 0x1548 <vfprintf+0x298>
    14fe:	93 2d       	mov	r25, r3
    1500:	99 7f       	andi	r25, 0xF9	; 249
    1502:	b9 2e       	mov	r11, r25
    1504:	8f 36       	cpi	r24, 0x6F	; 111
    1506:	c1 f0       	breq	.+48     	; 0x1538 <vfprintf+0x288>
    1508:	18 f4       	brcc	.+6      	; 0x1510 <vfprintf+0x260>
    150a:	88 35       	cpi	r24, 0x58	; 88
    150c:	79 f0       	breq	.+30     	; 0x152c <vfprintf+0x27c>
    150e:	ae c0       	rjmp	.+348    	; 0x166c <vfprintf+0x3bc>
    1510:	80 37       	cpi	r24, 0x70	; 112
    1512:	19 f0       	breq	.+6      	; 0x151a <vfprintf+0x26a>
    1514:	88 37       	cpi	r24, 0x78	; 120
    1516:	21 f0       	breq	.+8      	; 0x1520 <vfprintf+0x270>
    1518:	a9 c0       	rjmp	.+338    	; 0x166c <vfprintf+0x3bc>
    151a:	e9 2f       	mov	r30, r25
    151c:	e0 61       	ori	r30, 0x10	; 16
    151e:	be 2e       	mov	r11, r30
    1520:	b4 fe       	sbrs	r11, 4
    1522:	0d c0       	rjmp	.+26     	; 0x153e <vfprintf+0x28e>
    1524:	fb 2d       	mov	r31, r11
    1526:	f4 60       	ori	r31, 0x04	; 4
    1528:	bf 2e       	mov	r11, r31
    152a:	09 c0       	rjmp	.+18     	; 0x153e <vfprintf+0x28e>
    152c:	34 fe       	sbrs	r3, 4
    152e:	0a c0       	rjmp	.+20     	; 0x1544 <vfprintf+0x294>
    1530:	29 2f       	mov	r18, r25
    1532:	26 60       	ori	r18, 0x06	; 6
    1534:	b2 2e       	mov	r11, r18
    1536:	06 c0       	rjmp	.+12     	; 0x1544 <vfprintf+0x294>
    1538:	28 e0       	ldi	r18, 0x08	; 8
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	05 c0       	rjmp	.+10     	; 0x1548 <vfprintf+0x298>
    153e:	20 e1       	ldi	r18, 0x10	; 16
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <vfprintf+0x298>
    1544:	20 e1       	ldi	r18, 0x10	; 16
    1546:	32 e0       	ldi	r19, 0x02	; 2
    1548:	f8 01       	movw	r30, r16
    154a:	b7 fe       	sbrs	r11, 7
    154c:	07 c0       	rjmp	.+14     	; 0x155c <vfprintf+0x2ac>
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	0c 5f       	subi	r16, 0xFC	; 252
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x2b8>
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 5f       	subi	r16, 0xFE	; 254
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	a3 01       	movw	r20, r6
    156a:	f1 d0       	rcall	.+482    	; 0x174e <__ultoa_invert>
    156c:	88 2e       	mov	r8, r24
    156e:	86 18       	sub	r8, r6
    1570:	fb 2d       	mov	r31, r11
    1572:	ff 77       	andi	r31, 0x7F	; 127
    1574:	3f 2e       	mov	r3, r31
    1576:	36 fe       	sbrs	r3, 6
    1578:	0d c0       	rjmp	.+26     	; 0x1594 <vfprintf+0x2e4>
    157a:	23 2d       	mov	r18, r3
    157c:	2e 7f       	andi	r18, 0xFE	; 254
    157e:	a2 2e       	mov	r10, r18
    1580:	89 14       	cp	r8, r9
    1582:	58 f4       	brcc	.+22     	; 0x159a <vfprintf+0x2ea>
    1584:	34 fe       	sbrs	r3, 4
    1586:	0b c0       	rjmp	.+22     	; 0x159e <vfprintf+0x2ee>
    1588:	32 fc       	sbrc	r3, 2
    158a:	09 c0       	rjmp	.+18     	; 0x159e <vfprintf+0x2ee>
    158c:	83 2d       	mov	r24, r3
    158e:	8e 7e       	andi	r24, 0xEE	; 238
    1590:	a8 2e       	mov	r10, r24
    1592:	05 c0       	rjmp	.+10     	; 0x159e <vfprintf+0x2ee>
    1594:	b8 2c       	mov	r11, r8
    1596:	a3 2c       	mov	r10, r3
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <vfprintf+0x2f0>
    159a:	b8 2c       	mov	r11, r8
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <vfprintf+0x2f0>
    159e:	b9 2c       	mov	r11, r9
    15a0:	a4 fe       	sbrs	r10, 4
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <vfprintf+0x312>
    15a4:	fe 01       	movw	r30, r28
    15a6:	e8 0d       	add	r30, r8
    15a8:	f1 1d       	adc	r31, r1
    15aa:	80 81       	ld	r24, Z
    15ac:	80 33       	cpi	r24, 0x30	; 48
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <vfprintf+0x308>
    15b0:	9a 2d       	mov	r25, r10
    15b2:	99 7e       	andi	r25, 0xE9	; 233
    15b4:	a9 2e       	mov	r10, r25
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <vfprintf+0x31a>
    15b8:	a2 fe       	sbrs	r10, 2
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <vfprintf+0x318>
    15bc:	b3 94       	inc	r11
    15be:	b3 94       	inc	r11
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <vfprintf+0x31a>
    15c2:	8a 2d       	mov	r24, r10
    15c4:	86 78       	andi	r24, 0x86	; 134
    15c6:	09 f0       	breq	.+2      	; 0x15ca <vfprintf+0x31a>
    15c8:	b3 94       	inc	r11
    15ca:	a3 fc       	sbrc	r10, 3
    15cc:	10 c0       	rjmp	.+32     	; 0x15ee <vfprintf+0x33e>
    15ce:	a0 fe       	sbrs	r10, 0
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0x32e>
    15d2:	b2 14       	cp	r11, r2
    15d4:	80 f4       	brcc	.+32     	; 0x15f6 <vfprintf+0x346>
    15d6:	28 0c       	add	r2, r8
    15d8:	92 2c       	mov	r9, r2
    15da:	9b 18       	sub	r9, r11
    15dc:	0d c0       	rjmp	.+26     	; 0x15f8 <vfprintf+0x348>
    15de:	b2 14       	cp	r11, r2
    15e0:	58 f4       	brcc	.+22     	; 0x15f8 <vfprintf+0x348>
    15e2:	b6 01       	movw	r22, r12
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	76 d0       	rcall	.+236    	; 0x16d6 <fputc>
    15ea:	b3 94       	inc	r11
    15ec:	f8 cf       	rjmp	.-16     	; 0x15de <vfprintf+0x32e>
    15ee:	b2 14       	cp	r11, r2
    15f0:	18 f4       	brcc	.+6      	; 0x15f8 <vfprintf+0x348>
    15f2:	2b 18       	sub	r2, r11
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <vfprintf+0x34a>
    15f6:	98 2c       	mov	r9, r8
    15f8:	21 2c       	mov	r2, r1
    15fa:	a4 fe       	sbrs	r10, 4
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <vfprintf+0x36c>
    15fe:	b6 01       	movw	r22, r12
    1600:	80 e3       	ldi	r24, 0x30	; 48
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	68 d0       	rcall	.+208    	; 0x16d6 <fputc>
    1606:	a2 fe       	sbrs	r10, 2
    1608:	16 c0       	rjmp	.+44     	; 0x1636 <vfprintf+0x386>
    160a:	a1 fc       	sbrc	r10, 1
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <vfprintf+0x364>
    160e:	88 e7       	ldi	r24, 0x78	; 120
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <vfprintf+0x368>
    1614:	88 e5       	ldi	r24, 0x58	; 88
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	b6 01       	movw	r22, r12
    161a:	0c c0       	rjmp	.+24     	; 0x1634 <vfprintf+0x384>
    161c:	8a 2d       	mov	r24, r10
    161e:	86 78       	andi	r24, 0x86	; 134
    1620:	51 f0       	breq	.+20     	; 0x1636 <vfprintf+0x386>
    1622:	a1 fe       	sbrs	r10, 1
    1624:	02 c0       	rjmp	.+4      	; 0x162a <vfprintf+0x37a>
    1626:	8b e2       	ldi	r24, 0x2B	; 43
    1628:	01 c0       	rjmp	.+2      	; 0x162c <vfprintf+0x37c>
    162a:	80 e2       	ldi	r24, 0x20	; 32
    162c:	a7 fc       	sbrc	r10, 7
    162e:	8d e2       	ldi	r24, 0x2D	; 45
    1630:	b6 01       	movw	r22, r12
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	50 d0       	rcall	.+160    	; 0x16d6 <fputc>
    1636:	89 14       	cp	r8, r9
    1638:	30 f4       	brcc	.+12     	; 0x1646 <vfprintf+0x396>
    163a:	b6 01       	movw	r22, r12
    163c:	80 e3       	ldi	r24, 0x30	; 48
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	4a d0       	rcall	.+148    	; 0x16d6 <fputc>
    1642:	9a 94       	dec	r9
    1644:	f8 cf       	rjmp	.-16     	; 0x1636 <vfprintf+0x386>
    1646:	8a 94       	dec	r8
    1648:	f3 01       	movw	r30, r6
    164a:	e8 0d       	add	r30, r8
    164c:	f1 1d       	adc	r31, r1
    164e:	80 81       	ld	r24, Z
    1650:	b6 01       	movw	r22, r12
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	40 d0       	rcall	.+128    	; 0x16d6 <fputc>
    1656:	81 10       	cpse	r8, r1
    1658:	f6 cf       	rjmp	.-20     	; 0x1646 <vfprintf+0x396>
    165a:	22 20       	and	r2, r2
    165c:	09 f4       	brne	.+2      	; 0x1660 <vfprintf+0x3b0>
    165e:	4e ce       	rjmp	.-868    	; 0x12fc <vfprintf+0x4c>
    1660:	b6 01       	movw	r22, r12
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	37 d0       	rcall	.+110    	; 0x16d6 <fputc>
    1668:	2a 94       	dec	r2
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <vfprintf+0x3aa>
    166c:	f6 01       	movw	r30, r12
    166e:	86 81       	ldd	r24, Z+6	; 0x06
    1670:	97 81       	ldd	r25, Z+7	; 0x07
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <vfprintf+0x3c8>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	9f ef       	ldi	r25, 0xFF	; 255
    1678:	2b 96       	adiw	r28, 0x0b	; 11
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	1f 91       	pop	r17
    168a:	0f 91       	pop	r16
    168c:	ff 90       	pop	r15
    168e:	ef 90       	pop	r14
    1690:	df 90       	pop	r13
    1692:	cf 90       	pop	r12
    1694:	bf 90       	pop	r11
    1696:	af 90       	pop	r10
    1698:	9f 90       	pop	r9
    169a:	8f 90       	pop	r8
    169c:	7f 90       	pop	r7
    169e:	6f 90       	pop	r6
    16a0:	5f 90       	pop	r5
    16a2:	4f 90       	pop	r4
    16a4:	3f 90       	pop	r3
    16a6:	2f 90       	pop	r2
    16a8:	08 95       	ret

000016aa <strnlen_P>:
    16aa:	fc 01       	movw	r30, r24
    16ac:	05 90       	lpm	r0, Z+
    16ae:	61 50       	subi	r22, 0x01	; 1
    16b0:	70 40       	sbci	r23, 0x00	; 0
    16b2:	01 10       	cpse	r0, r1
    16b4:	d8 f7       	brcc	.-10     	; 0x16ac <strnlen_P+0x2>
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	8e 0f       	add	r24, r30
    16bc:	9f 1f       	adc	r25, r31
    16be:	08 95       	ret

000016c0 <strnlen>:
    16c0:	fc 01       	movw	r30, r24
    16c2:	61 50       	subi	r22, 0x01	; 1
    16c4:	70 40       	sbci	r23, 0x00	; 0
    16c6:	01 90       	ld	r0, Z+
    16c8:	01 10       	cpse	r0, r1
    16ca:	d8 f7       	brcc	.-10     	; 0x16c2 <strnlen+0x2>
    16cc:	80 95       	com	r24
    16ce:	90 95       	com	r25
    16d0:	8e 0f       	add	r24, r30
    16d2:	9f 1f       	adc	r25, r31
    16d4:	08 95       	ret

000016d6 <fputc>:
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	fb 01       	movw	r30, r22
    16e0:	23 81       	ldd	r18, Z+3	; 0x03
    16e2:	21 fd       	sbrc	r18, 1
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <fputc+0x16>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	2c c0       	rjmp	.+88     	; 0x1744 <fputc+0x6e>
    16ec:	22 ff       	sbrs	r18, 2
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <fputc+0x46>
    16f0:	46 81       	ldd	r20, Z+6	; 0x06
    16f2:	57 81       	ldd	r21, Z+7	; 0x07
    16f4:	24 81       	ldd	r18, Z+4	; 0x04
    16f6:	35 81       	ldd	r19, Z+5	; 0x05
    16f8:	42 17       	cp	r20, r18
    16fa:	53 07       	cpc	r21, r19
    16fc:	44 f4       	brge	.+16     	; 0x170e <fputc+0x38>
    16fe:	a0 81       	ld	r26, Z
    1700:	b1 81       	ldd	r27, Z+1	; 0x01
    1702:	9d 01       	movw	r18, r26
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	31 83       	std	Z+1, r19	; 0x01
    170a:	20 83       	st	Z, r18
    170c:	8c 93       	st	X, r24
    170e:	26 81       	ldd	r18, Z+6	; 0x06
    1710:	37 81       	ldd	r19, Z+7	; 0x07
    1712:	2f 5f       	subi	r18, 0xFF	; 255
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	37 83       	std	Z+7, r19	; 0x07
    1718:	26 83       	std	Z+6, r18	; 0x06
    171a:	14 c0       	rjmp	.+40     	; 0x1744 <fputc+0x6e>
    171c:	8b 01       	movw	r16, r22
    171e:	ec 01       	movw	r28, r24
    1720:	fb 01       	movw	r30, r22
    1722:	00 84       	ldd	r0, Z+8	; 0x08
    1724:	f1 85       	ldd	r31, Z+9	; 0x09
    1726:	e0 2d       	mov	r30, r0
    1728:	09 95       	icall
    172a:	89 2b       	or	r24, r25
    172c:	e1 f6       	brne	.-72     	; 0x16e6 <fputc+0x10>
    172e:	d8 01       	movw	r26, r16
    1730:	16 96       	adiw	r26, 0x06	; 6
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	17 97       	sbiw	r26, 0x07	; 7
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	17 96       	adiw	r26, 0x07	; 7
    173c:	9c 93       	st	X, r25
    173e:	8e 93       	st	-X, r24
    1740:	16 97       	sbiw	r26, 0x06	; 6
    1742:	ce 01       	movw	r24, r28
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <__ultoa_invert>:
    174e:	fa 01       	movw	r30, r20
    1750:	aa 27       	eor	r26, r26
    1752:	28 30       	cpi	r18, 0x08	; 8
    1754:	51 f1       	breq	.+84     	; 0x17aa <__ultoa_invert+0x5c>
    1756:	20 31       	cpi	r18, 0x10	; 16
    1758:	81 f1       	breq	.+96     	; 0x17ba <__ultoa_invert+0x6c>
    175a:	e8 94       	clt
    175c:	6f 93       	push	r22
    175e:	6e 7f       	andi	r22, 0xFE	; 254
    1760:	6e 5f       	subi	r22, 0xFE	; 254
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	8f 4f       	sbci	r24, 0xFF	; 255
    1766:	9f 4f       	sbci	r25, 0xFF	; 255
    1768:	af 4f       	sbci	r26, 0xFF	; 255
    176a:	b1 e0       	ldi	r27, 0x01	; 1
    176c:	3e d0       	rcall	.+124    	; 0x17ea <__ultoa_invert+0x9c>
    176e:	b4 e0       	ldi	r27, 0x04	; 4
    1770:	3c d0       	rcall	.+120    	; 0x17ea <__ultoa_invert+0x9c>
    1772:	67 0f       	add	r22, r23
    1774:	78 1f       	adc	r23, r24
    1776:	89 1f       	adc	r24, r25
    1778:	9a 1f       	adc	r25, r26
    177a:	a1 1d       	adc	r26, r1
    177c:	68 0f       	add	r22, r24
    177e:	79 1f       	adc	r23, r25
    1780:	8a 1f       	adc	r24, r26
    1782:	91 1d       	adc	r25, r1
    1784:	a1 1d       	adc	r26, r1
    1786:	6a 0f       	add	r22, r26
    1788:	71 1d       	adc	r23, r1
    178a:	81 1d       	adc	r24, r1
    178c:	91 1d       	adc	r25, r1
    178e:	a1 1d       	adc	r26, r1
    1790:	20 d0       	rcall	.+64     	; 0x17d2 <__ultoa_invert+0x84>
    1792:	09 f4       	brne	.+2      	; 0x1796 <__ultoa_invert+0x48>
    1794:	68 94       	set
    1796:	3f 91       	pop	r19
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	26 9f       	mul	r18, r22
    179c:	11 24       	eor	r1, r1
    179e:	30 19       	sub	r19, r0
    17a0:	30 5d       	subi	r19, 0xD0	; 208
    17a2:	31 93       	st	Z+, r19
    17a4:	de f6       	brtc	.-74     	; 0x175c <__ultoa_invert+0xe>
    17a6:	cf 01       	movw	r24, r30
    17a8:	08 95       	ret
    17aa:	46 2f       	mov	r20, r22
    17ac:	47 70       	andi	r20, 0x07	; 7
    17ae:	40 5d       	subi	r20, 0xD0	; 208
    17b0:	41 93       	st	Z+, r20
    17b2:	b3 e0       	ldi	r27, 0x03	; 3
    17b4:	0f d0       	rcall	.+30     	; 0x17d4 <__ultoa_invert+0x86>
    17b6:	c9 f7       	brne	.-14     	; 0x17aa <__ultoa_invert+0x5c>
    17b8:	f6 cf       	rjmp	.-20     	; 0x17a6 <__ultoa_invert+0x58>
    17ba:	46 2f       	mov	r20, r22
    17bc:	4f 70       	andi	r20, 0x0F	; 15
    17be:	40 5d       	subi	r20, 0xD0	; 208
    17c0:	4a 33       	cpi	r20, 0x3A	; 58
    17c2:	18 f0       	brcs	.+6      	; 0x17ca <__ultoa_invert+0x7c>
    17c4:	49 5d       	subi	r20, 0xD9	; 217
    17c6:	31 fd       	sbrc	r19, 1
    17c8:	40 52       	subi	r20, 0x20	; 32
    17ca:	41 93       	st	Z+, r20
    17cc:	02 d0       	rcall	.+4      	; 0x17d2 <__ultoa_invert+0x84>
    17ce:	a9 f7       	brne	.-22     	; 0x17ba <__ultoa_invert+0x6c>
    17d0:	ea cf       	rjmp	.-44     	; 0x17a6 <__ultoa_invert+0x58>
    17d2:	b4 e0       	ldi	r27, 0x04	; 4
    17d4:	a6 95       	lsr	r26
    17d6:	97 95       	ror	r25
    17d8:	87 95       	ror	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	ba 95       	dec	r27
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__ultoa_invert+0x86>
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	61 05       	cpc	r22, r1
    17e6:	71 05       	cpc	r23, r1
    17e8:	08 95       	ret
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	0a 2e       	mov	r0, r26
    17f0:	06 94       	lsr	r0
    17f2:	57 95       	ror	r21
    17f4:	47 95       	ror	r20
    17f6:	37 95       	ror	r19
    17f8:	27 95       	ror	r18
    17fa:	ba 95       	dec	r27
    17fc:	c9 f7       	brne	.-14     	; 0x17f0 <__ultoa_invert+0xa2>
    17fe:	62 0f       	add	r22, r18
    1800:	73 1f       	adc	r23, r19
    1802:	84 1f       	adc	r24, r20
    1804:	95 1f       	adc	r25, r21
    1806:	a0 1d       	adc	r26, r0
    1808:	08 95       	ret

0000180a <_exit>:
    180a:	f8 94       	cli

0000180c <__stop_program>:
    180c:	ff cf       	rjmp	.-2      	; 0x180c <__stop_program>
