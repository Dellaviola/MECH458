
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023a  00800100  00001990  00001a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  0080033a  0080033a  00001c5e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046fa  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a78  00000000  00000000  000066fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000031af  00000000  00000000  00008176  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  0000b328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000915d  00000000  00000000  0000bac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018eb  00000000  00000000  00014c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  00016510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  00016808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c4       	rjmp	.+2452   	; 0x9ca <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c7       	rjmp	.+3890   	; 0xf78 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 e9       	ldi	r30, 0x90	; 144
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	aa 33       	cpi	r26, 0x3A	; 58
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	aa e3       	ldi	r26, 0x3A	; 58
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 3b       	cpi	r26, 0xBD	; 189
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	f4 d2       	rcall	.+1512   	; 0x6b8 <main>
      d0:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <_exit>

000000d4 <__bad_interrupt>:
      d4:	c9 c3       	rjmp	.+1938   	; 0x868 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <g_ADCCount>
     120:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <g_ADCCount>
     12c:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 5c 03 	sts	0x035C, r19	; 0x80035c <g_ADCCount+0x1>
     13a:	20 93 5b 03 	sts	0x035B, r18	; 0x80035b <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e9 5b       	subi	r30, 0xB9	; 185
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <g_ADCCount>
     162:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     19a:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     1a6:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     1aa:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <STAGE1+0x1>
     1ae:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <STAGE1>
     1b2:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2351>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <STAGE2>
     1cc:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <STAGE2+0x1>
     1d0:	5e d2       	rcall	.+1212   	; 0x68e <LL_UpdateStatus>
     1d2:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2352>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <SERVER_Task+0x6e>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     1e2:	88 23       	and	r24, r24
     1e4:	39 f0       	breq	.+14     	; 0x1f4 <SERVER_Task+0x6a>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <_timer+0x23>
     1ec:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <g_WDTimeout>
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	88 b9       	out	0x08, r24	; 8
     1f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2353>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0c c0       	rjmp	.+24     	; 0x214 <SERVER_Task+0x8a>
     1fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     200:	81 11       	cpse	r24, r1
     202:	05 c0       	rjmp	.+10     	; 0x20e <SERVER_Task+0x84>
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <_timer+0x1a>
     20a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <_timer+0x47>
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2351>
     214:	66 9b       	sbis	0x0c, 6	; 12
     216:	20 c0       	rjmp	.+64     	; 0x258 <SERVER_Task+0xce>
     218:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     21c:	81 11       	cpse	r24, r1
     21e:	19 c0       	rjmp	.+50     	; 0x252 <SERVER_Task+0xc8>
     220:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <STAGE2>
     224:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <STAGE2+0x1>
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	49 f4       	brne	.+18     	; 0x23e <SERVER_Task+0xb4>
     22c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     230:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     234:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <STAGE2+0x1>
     238:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <STAGE2>
     23c:	05 c0       	rjmp	.+10     	; 0x248 <SERVER_Task+0xbe>
     23e:	e1 d1       	rcall	.+962    	; 0x602 <LL_Next>
     240:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <STAGE2+0x1>
     244:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <STAGE2>
     248:	ea e7       	ldi	r30, 0x7A	; 122
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	80 64       	ori	r24, 0x40	; 64
     250:	80 83       	st	Z, r24
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2352>
     258:	65 9b       	sbis	0x0c, 5	; 12
     25a:	08 c0       	rjmp	.+16     	; 0x26c <SERVER_Task+0xe2>
     25c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     260:	81 11       	cpse	r24, r1
     262:	01 c0       	rjmp	.+2      	; 0x266 <SERVER_Task+0xdc>
     264:	18 b8       	out	0x08, r1	; 8
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2353>
     26c:	08 95       	ret

0000026e <ADC_Task>:
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	cf 93       	push	r28
     278:	e7 e4       	ldi	r30, 0x47	; 71
     27a:	f3 e0       	ldi	r31, 0x03	; 3
     27c:	a0 81       	ld	r26, Z
     27e:	b1 81       	ldd	r27, Z+1	; 0x01
     280:	60 81       	ld	r22, Z
     282:	71 81       	ldd	r23, Z+1	; 0x01
     284:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <ticks.2361>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <ticks.2361>
     28e:	c1 2c       	mov	r12, r1
     290:	d1 2c       	mov	r13, r1
     292:	76 01       	movw	r14, r12
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	4f b7       	in	r20, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	fc 01       	movw	r30, r24
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	e9 5b       	subi	r30, 0xB9	; 185
     2a4:	fc 4f       	sbci	r31, 0xFC	; 252
     2a6:	20 81       	ld	r18, Z
     2a8:	31 81       	ldd	r19, Z+1	; 0x01
     2aa:	c2 0e       	add	r12, r18
     2ac:	d3 1e       	adc	r13, r19
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	26 17       	cp	r18, r22
     2b8:	37 07       	cpc	r19, r23
     2ba:	38 f4       	brcc	.+14     	; 0x2ca <ADC_Task+0x5c>
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e9 5b       	subi	r30, 0xB9	; 185
     2c4:	fc 4f       	sbci	r31, 0xFC	; 252
     2c6:	60 81       	ld	r22, Z
     2c8:	71 81       	ldd	r23, Z+1	; 0x01
     2ca:	fc 01       	movw	r30, r24
     2cc:	ee 0f       	add	r30, r30
     2ce:	ff 1f       	adc	r31, r31
     2d0:	e9 5b       	subi	r30, 0xB9	; 185
     2d2:	fc 4f       	sbci	r31, 0xFC	; 252
     2d4:	20 81       	ld	r18, Z
     2d6:	31 81       	ldd	r19, Z+1	; 0x01
     2d8:	a2 17       	cp	r26, r18
     2da:	b3 07       	cpc	r27, r19
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <ADC_Task+0x72>
     2de:	57 c0       	rjmp	.+174    	; 0x38e <ADC_Task+0x120>
     2e0:	fc 01       	movw	r30, r24
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e9 5b       	subi	r30, 0xB9	; 185
     2e8:	fc 4f       	sbci	r31, 0xFC	; 252
     2ea:	a0 81       	ld	r26, Z
     2ec:	b1 81       	ldd	r27, Z+1	; 0x01
     2ee:	4f c0       	rjmp	.+158    	; 0x38e <ADC_Task+0x120>
     2f0:	8f b7       	in	r24, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	ca 1a       	sub	r12, r26
     2f6:	db 0a       	sbc	r13, r27
     2f8:	e1 08       	sbc	r14, r1
     2fa:	f1 08       	sbc	r15, r1
     2fc:	c6 1a       	sub	r12, r22
     2fe:	d7 0a       	sbc	r13, r23
     300:	e1 08       	sbc	r14, r1
     302:	f1 08       	sbc	r15, r1
     304:	f6 94       	lsr	r15
     306:	e7 94       	ror	r14
     308:	d7 94       	ror	r13
     30a:	c7 94       	ror	r12
     30c:	f6 94       	lsr	r15
     30e:	e7 94       	ror	r14
     310:	d7 94       	ror	r13
     312:	c7 94       	ror	r12
     314:	8f bf       	out	0x3f, r24	; 63
     316:	cf b7       	in	r28, 0x3f	; 63
     318:	f8 94       	cli
     31a:	d7 01       	movw	r26, r14
     31c:	c6 01       	movw	r24, r12
     31e:	0b 97       	sbiw	r24, 0x0b	; 11
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	8d 3d       	cpi	r24, 0xDD	; 221
     326:	93 40       	sbci	r25, 0x03	; 3
     328:	a1 05       	cpc	r26, r1
     32a:	b1 05       	cpc	r27, r1
     32c:	a0 f4       	brcc	.+40     	; 0x356 <ADC_Task+0xe8>
     32e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <STAGE2>
     332:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <STAGE2+0x1>
     336:	90 d1       	rcall	.+800    	; 0x658 <LL_GetRefl>
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	c8 16       	cp	r12, r24
     33e:	d9 06       	cpc	r13, r25
     340:	ea 06       	cpc	r14, r26
     342:	fb 06       	cpc	r15, r27
     344:	40 f4       	brcc	.+16     	; 0x356 <ADC_Task+0xe8>
     346:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <STAGE2>
     34a:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <STAGE2+0x1>
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	11 f0       	breq	.+4      	; 0x356 <ADC_Task+0xe8>
     352:	b6 01       	movw	r22, r12
     354:	8c d1       	rcall	.+792    	; 0x66e <LL_UpdateRefl>
     356:	cf bf       	out	0x3f, r28	; 63
     358:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_ADCCount+0x1>
     35c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <g_ADCCount>
     360:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <_timer+0x11>
     364:	66 9b       	sbis	0x0c, 6	; 12
     366:	06 c0       	rjmp	.+12     	; 0x374 <ADC_Task+0x106>
     368:	ea e7       	ldi	r30, 0x7A	; 122
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	80 64       	ori	r24, 0x40	; 64
     370:	80 83       	st	Z, r24
     372:	14 c0       	rjmp	.+40     	; 0x39c <ADC_Task+0x12e>
     374:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <STAGE2>
     378:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <STAGE2+0x1>
     37c:	01 90       	ld	r0, Z+
     37e:	f0 81       	ld	r31, Z
     380:	e0 2d       	mov	r30, r0
     382:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <ticks.2361>
     386:	82 83       	std	Z+2, r24	; 0x02
     388:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <ticks.2361>
     38c:	07 c0       	rjmp	.+14     	; 0x39c <ADC_Task+0x12e>
     38e:	4f bf       	out	0x3f, r20	; 63
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	86 30       	cpi	r24, 0x06	; 6
     394:	91 05       	cpc	r25, r1
     396:	09 f0       	breq	.+2      	; 0x39a <ADC_Task+0x12c>
     398:	7f cf       	rjmp	.-258    	; 0x298 <ADC_Task+0x2a>
     39a:	aa cf       	rjmp	.-172    	; 0x2f0 <ADC_Task+0x82>
     39c:	cf 91       	pop	r28
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <MAG_Task>:
     3a8:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <tick.2383>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <tick.2383>
     3b2:	64 99       	sbic	0x0c, 4	; 12
     3b4:	20 c0       	rjmp	.+64     	; 0x3f6 <MAG_Task+0x4e>
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     3bc:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     3c0:	66 d1       	rcall	.+716    	; 0x68e <LL_UpdateStatus>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     3c8:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     3cc:	56 d1       	rcall	.+684    	; 0x67a <LL_UpdateMag>
     3ce:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     3d2:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     3d6:	dc 01       	movw	r26, r24
     3d8:	ed 91       	ld	r30, X+
     3da:	fc 91       	ld	r31, X
     3dc:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <tick.2383>
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	0f d1       	rcall	.+542    	; 0x602 <LL_Next>
     3e4:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <STAGE1+0x1>
     3e8:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <STAGE1>
     3ec:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <tick.2383>
     3f0:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_timer+0x1a>
     3f4:	08 95       	ret
     3f6:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <tick.2383>
     3fa:	8d 33       	cpi	r24, 0x3D	; 61
     3fc:	18 f1       	brcs	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     404:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     408:	42 d1       	rcall	.+644    	; 0x68e <LL_UpdateStatus>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     410:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     414:	32 d1       	rcall	.+612    	; 0x67a <LL_UpdateMag>
     416:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <STAGE2>
     41a:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <STAGE2+0x1>
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <tick.2383>
     428:	84 83       	std	Z+4, r24	; 0x04
     42a:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     42e:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     432:	e7 d0       	rcall	.+462    	; 0x602 <LL_Next>
     434:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <STAGE1+0x1>
     438:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <STAGE1>
     43c:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <tick.2383>
     440:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <_timer+0x1a>
     444:	08 95       	ret

00000446 <EXIT_Task>:
     446:	cf 93       	push	r28
     448:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <memory.2389>
     44c:	81 11       	cpse	r24, r1
     44e:	6e c0       	rjmp	.+220    	; 0x52c <EXIT_Task+0xe6>
     450:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <delay.2390>
     454:	8f 5f       	subi	r24, 0xFF	; 255
     456:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <delay.2390>
     45a:	ed ea       	ldi	r30, 0xAD	; 173
     45c:	f3 e0       	ldi	r31, 0x03	; 3
     45e:	85 81       	ldd	r24, Z+5	; 0x05
     460:	96 81       	ldd	r25, Z+6	; 0x06
     462:	87 81       	ldd	r24, Z+7	; 0x07
     464:	03 c0       	rjmp	.+6      	; 0x46c <EXIT_Task+0x26>
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	10 d2       	rcall	.+1056   	; 0x88c <PWM>
     46c:	c0 91 b1 03 	lds	r28, 0x03B1	; 0x8003b1 <stepper+0x4>
     470:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     474:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     478:	ea d0       	rcall	.+468    	; 0x64e <LL_GetClass>
     47a:	e8 2f       	mov	r30, r24
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	ea 5f       	subi	r30, 0xFA	; 250
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	80 81       	ld	r24, Z
     484:	c8 13       	cpse	r28, r24
     486:	49 c0       	rjmp	.+146    	; 0x51a <EXIT_Task+0xd4>
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	ff d1       	rcall	.+1022   	; 0x88c <PWM>
     48e:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <delay.2390>
     492:	89 32       	cpi	r24, 0x29	; 41
     494:	28 f4       	brcc	.+10     	; 0x4a0 <EXIT_Task+0x5a>
     496:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <memory.2389>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <EXIT_Task+0x5a>
     49e:	40 c0       	rjmp	.+128    	; 0x520 <EXIT_Task+0xda>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <memory.2389>
     4a6:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <delay.2390>
     4aa:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     4ae:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     4b2:	cd d0       	rcall	.+410    	; 0x64e <LL_GetClass>
     4b4:	c8 2f       	mov	r28, r24
     4b6:	e0 91 41 03 	lds	r30, 0x0341	; 0x800341 <HEAD>
     4ba:	f0 91 42 03 	lds	r31, 0x0342	; 0x800342 <HEAD+0x1>
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	93 81       	ldd	r25, Z+3	; 0x03
     4c2:	c5 d0       	rcall	.+394    	; 0x64e <LL_GetClass>
     4c4:	c8 13       	cpse	r28, r24
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <EXIT_Task+0x86>
     4c8:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <memory.2389>
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     4d2:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     4d6:	db d0       	rcall	.+438    	; 0x68e <LL_UpdateStatus>
     4d8:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     4dc:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     4e0:	90 d0       	rcall	.+288    	; 0x602 <LL_Next>
     4e2:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <HEAD+0x1>
     4e6:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <HEAD>
     4ea:	fc 01       	movw	r30, r24
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	ae d0       	rcall	.+348    	; 0x64e <LL_GetClass>
     4f2:	e8 2f       	mov	r30, r24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ea 5f       	subi	r30, 0xFA	; 250
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	c0 81       	ld	r28, Z
     4fc:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     500:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     504:	a4 d0       	rcall	.+328    	; 0x64e <LL_GetClass>
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ea 5f       	subi	r30, 0xFA	; 250
     50c:	fe 4f       	sbci	r31, 0xFE	; 254
     50e:	80 81       	ld	r24, Z
     510:	6c 2f       	mov	r22, r28
     512:	46 d2       	rcall	.+1164   	; 0x9a0 <STEPPER_SetRotation>
     514:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <_timer+0x23>
     518:	03 c0       	rjmp	.+6      	; 0x520 <EXIT_Task+0xda>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	b6 d1       	rcall	.+876    	; 0x88c <PWM>
     520:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     524:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     528:	92 d0       	rcall	.+292    	; 0x64e <LL_GetClass>
     52a:	0a c0       	rjmp	.+20     	; 0x540 <EXIT_Task+0xfa>
     52c:	ed ea       	ldi	r30, 0xAD	; 173
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	85 81       	ldd	r24, Z+5	; 0x05
     532:	96 81       	ldd	r25, Z+6	; 0x06
     534:	97 81       	ldd	r25, Z+7	; 0x07
     536:	89 1b       	sub	r24, r25
     538:	89 31       	cpi	r24, 0x19	; 25
     53a:	08 f0       	brcs	.+2      	; 0x53e <EXIT_Task+0xf8>
     53c:	97 cf       	rjmp	.-210    	; 0x46c <EXIT_Task+0x26>
     53e:	93 cf       	rjmp	.-218    	; 0x466 <EXIT_Task+0x20>
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <BTN_Task>:
     544:	89 b1       	in	r24, 0x09	; 9
     546:	83 70       	andi	r24, 0x03	; 3
     548:	c9 f0       	breq	.+50     	; 0x57c <BTN_Task+0x38>
     54a:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <__data_end>
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <__data_end>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	90 f0       	brcs	.+36     	; 0x57c <BTN_Task+0x38>
     558:	89 b1       	in	r24, 0x09	; 9
     55a:	83 70       	andi	r24, 0x03	; 3
     55c:	19 f4       	brne	.+6      	; 0x564 <BTN_Task+0x20>
     55e:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
     562:	08 95       	ret
     564:	89 b1       	in	r24, 0x09	; 9
     566:	83 70       	andi	r24, 0x03	; 3
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	29 f4       	brne	.+10     	; 0x576 <BTN_Task+0x32>
     56c:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <g_PauseRequest>
     570:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
     574:	08 95       	ret
     576:	89 b1       	in	r24, 0x09	; 9
     578:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <__data_end>
     57c:	08 95       	ret

0000057e <WATCHDOG_Task>:
     57e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <g_WDTimeout>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	18 f0       	brcs	.+6      	; 0x58c <WATCHDOG_Task+0xe>
     586:	8b e1       	ldi	r24, 0x1B	; 27
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	66 d3       	rcall	.+1740   	; 0xc58 <SYS_Pause>
     58c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <g_WDTimeout>
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <g_WDTimeout>
     596:	08 95       	ret

00000598 <D_Blinky>:
     598:	9b b1       	in	r25, 0x0b	; 11
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	89 27       	eor	r24, r25
     59e:	8b b9       	out	0x0b, r24	; 11
     5a0:	08 95       	ret

000005a2 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	g_Timer++;
     5a2:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <g_Timer>
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <g_Timer>
     5ac:	08 95       	ret

000005ae <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	7c 01       	movw	r14, r24
     5ba:	16 2f       	mov	r17, r22
     5bc:	d4 2f       	mov	r29, r20
     5be:	c2 2f       	mov	r28, r18
     5c0:	87 e0       	ldi	r24, 0x07	; 7
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	e7 d5       	rcall	.+3022   	; 0x1194 <malloc>
     5c6:	fc 01       	movw	r30, r24
     5c8:	f1 82       	std	Z+1, r15	; 0x01
     5ca:	e0 82       	st	Z, r14
     5cc:	13 83       	std	Z+3, r17	; 0x03
     5ce:	d5 83       	std	Z+5, r29	; 0x05
     5d0:	c6 83       	std	Z+6, r28	; 0x06
     5d2:	12 82       	std	Z+2, r1	; 0x02
     5d4:	14 82       	std	Z+4, r1	; 0x04
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <LL_ItemListInit>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	ec 01       	movw	r28, r24
     5e8:	86 e0       	ldi	r24, 0x06	; 6
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	d3 d5       	rcall	.+2982   	; 0x1194 <malloc>
     5ee:	fc 01       	movw	r30, r24
     5f0:	d1 83       	std	Z+1, r29	; 0x01
     5f2:	c0 83       	st	Z, r28
     5f4:	15 82       	std	Z+5, r1	; 0x05
     5f6:	14 82       	std	Z+4, r1	; 0x04
     5f8:	13 82       	std	Z+3, r1	; 0x03
     5fa:	12 82       	std	Z+2, r1	; 0x02
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <LL_Next>:
     602:	fc 01       	movw	r30, r24
     604:	82 81       	ldd	r24, Z+2	; 0x02
     606:	93 81       	ldd	r25, Z+3	; 0x03
     608:	08 95       	ret

0000060a <LL_AddBack>:
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	ec 01       	movw	r28, r24
     610:	cb 01       	movw	r24, r22
     612:	01 c0       	rjmp	.+2      	; 0x616 <LL_AddBack+0xc>
     614:	e9 01       	movw	r28, r18
     616:	2a 81       	ldd	r18, Y+2	; 0x02
     618:	3b 81       	ldd	r19, Y+3	; 0x03
     61a:	21 15       	cp	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	d1 f7       	brne	.-12     	; 0x614 <LL_AddBack+0xa>
     620:	e0 df       	rcall	.-64     	; 0x5e2 <LL_ItemListInit>
     622:	9b 83       	std	Y+3, r25	; 0x03
     624:	8a 83       	std	Y+2, r24	; 0x02
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <LL_Size>:
     62c:	dc 01       	movw	r26, r24
     62e:	12 96       	adiw	r26, 0x02	; 2
     630:	ed 91       	ld	r30, X+
     632:	fc 91       	ld	r31, X
     634:	13 97       	sbiw	r26, 0x03	; 3
     636:	30 97       	sbiw	r30, 0x00	; 0
     638:	41 f0       	breq	.+16     	; 0x64a <LL_Size+0x1e>
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	02 80       	ldd	r0, Z+2	; 0x02
     640:	f3 81       	ldd	r31, Z+3	; 0x03
     642:	e0 2d       	mov	r30, r0
     644:	30 97       	sbiw	r30, 0x00	; 0
     646:	d1 f7       	brne	.-12     	; 0x63c <LL_Size+0x10>
     648:	08 95       	ret
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	08 95       	ret

0000064e <LL_GetClass>:
     64e:	dc 01       	movw	r26, r24
     650:	ed 91       	ld	r30, X+
     652:	fc 91       	ld	r31, X
     654:	85 81       	ldd	r24, Z+5	; 0x05
     656:	08 95       	ret

00000658 <LL_GetRefl>:
     658:	dc 01       	movw	r26, r24
     65a:	ed 91       	ld	r30, X+
     65c:	fc 91       	ld	r31, X
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	08 95       	ret

00000664 <LL_GetMag>:
     664:	dc 01       	movw	r26, r24
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	83 81       	ldd	r24, Z+3	; 0x03
     66c:	08 95       	ret

0000066e <LL_UpdateRefl>:
     66e:	dc 01       	movw	r26, r24
     670:	ed 91       	ld	r30, X+
     672:	fc 91       	ld	r31, X
     674:	71 83       	std	Z+1, r23	; 0x01
     676:	60 83       	st	Z, r22
     678:	08 95       	ret

0000067a <LL_UpdateMag>:
     67a:	dc 01       	movw	r26, r24
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	63 83       	std	Z+3, r22	; 0x03
     682:	08 95       	ret

00000684 <LL_UpdateClass>:
     684:	dc 01       	movw	r26, r24
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	65 83       	std	Z+5, r22	; 0x05
     68c:	08 95       	ret

0000068e <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     68e:	dc 01       	movw	r26, r24
     690:	ed 91       	ld	r30, X+
     692:	fc 91       	ld	r31, X
     694:	66 83       	std	Z+6, r22	; 0x06
     696:	08 95       	ret

00000698 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     698:	dc 01       	movw	r26, r24
     69a:	ed 91       	ld	r30, X+
     69c:	fc 91       	ld	r31, X
     69e:	86 81       	ldd	r24, Z+6	; 0x06
     6a0:	08 95       	ret

000006a2 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     6a6:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     6a8:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     6aa:	80 ef       	ldi	r24, 0xF0	; 240
     6ac:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     6ae:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     6b0:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret

000006b8 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     6b8:	5d d2       	rcall	.+1210   	; 0xb74 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     6ba:	89 b1       	in	r24, 0x09	; 9
     6bc:	83 70       	andi	r24, 0x03	; 3
     6be:	e9 f7       	brne	.-6      	; 0x6ba <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     6c0:	89 e2       	ldi	r24, 0x29	; 41
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	59 d5       	rcall	.+2738   	; 0x1178 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6c6:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	45 ec       	ldi	r20, 0xC5	; 197
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	d6 d4       	rcall	.+2476   	; 0x1086 <TIMER_Create>
		_timer[0].state = READY;
     6da:	c2 e6       	ldi	r28, 0x62	; 98
     6dc:	d3 e0       	ldi	r29, 0x03	; 3
     6de:	12 e0       	ldi	r17, 0x02	; 2
     6e0:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	47 e3       	ldi	r20, 0x37	; 55
     6e8:	51 e0       	ldi	r21, 0x01	; 1
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	c9 d4       	rcall	.+2450   	; 0x1086 <TIMER_Create>
		_timer[1].state = BLOCKED;
     6f4:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	44 ed       	ldi	r20, 0xD4	; 212
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	bf d4       	rcall	.+2430   	; 0x1086 <TIMER_Create>
		_timer[2].state = BLOCKED;
     708:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	43 e2       	ldi	r20, 0x23	; 35
     710:	52 e0       	ldi	r21, 0x02	; 2
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	b5 d4       	rcall	.+2410   	; 0x1086 <TIMER_Create>
		_timer[3].state = BLOCKED;
     71c:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(943, 1, ADD_Task, NULL);		// Item Enter Handling
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	41 ed       	ldi	r20, 0xD1	; 209
     724:	52 e0       	ldi	r21, 0x02	; 2
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	8f ea       	ldi	r24, 0xAF	; 175
     72c:	93 e0       	ldi	r25, 0x03	; 3
     72e:	ab d4       	rcall	.+2390   	; 0x1086 <TIMER_Create>
		_timer[4].state = BLOCKED;
     730:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	42 ea       	ldi	r20, 0xA2	; 162
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	84 e6       	ldi	r24, 0x64	; 100
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a1 d4       	rcall	.+2370   	; 0x1086 <TIMER_Create>
		_timer[5].state = READY;
     744:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	4c ec       	ldi	r20, 0xCC	; 204
     74c:	52 e0       	ldi	r21, 0x02	; 2
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 ed       	ldi	r24, 0xD0	; 208
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	97 d4       	rcall	.+2350   	; 0x1086 <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL);
     758:	1e af       	std	Y+62, r17	; 0x3e
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	4f eb       	ldi	r20, 0xBF	; 191
     760:	52 e0       	ldi	r21, 0x02	; 2
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     768:	93 e1       	ldi	r25, 0x13	; 19
     76a:	8d d4       	rcall	.+2330   	; 0x1086 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     76c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <_timer+0x47>
     770:	8c e3       	ldi	r24, 0x3C	; 60
     772:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     774:	01 d5       	rcall	.+2562   	; 0x1178 <UART_SendString>
     776:	80 e8       	ldi	r24, 0x80	; 128
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	88 d0       	rcall	.+272    	; 0x88c <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     77c:	78 94       	sei
     77e:	e1 2c       	mov	r14, r1
					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     780:	f1 2c       	mov	r15, r1
     782:	cc 24       	eor	r12, r12
     784:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Calibrate("SET\r\n");
     786:	d1 2c       	mov	r13, r1
     788:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <g_PauseRequest>
     78c:	88 23       	and	r24, r24
     78e:	19 f0       	breq	.+6      	; 0x796 <main+0xde>
     790:	8e e4       	ldi	r24, 0x4E	; 78
     792:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     794:	79 d3       	rcall	.+1778   	; 0xe88 <SYS_Calibrate>
     796:	c0 91 41 03 	lds	r28, 0x0341	; 0x800341 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     79a:	d0 91 42 03 	lds	r29, 0x0342	; 0x800342 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     79e:	20 97       	sbiw	r28, 0x00	; 0
     7a0:	99 f3       	breq	.-26     	; 0x788 <main+0xd0>
     7a2:	20 97       	sbiw	r28, 0x00	; 0
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <main+0xf0>
     7a6:	59 c0       	rjmp	.+178    	; 0x85a <main+0x1a2>
     7a8:	ce 01       	movw	r24, r28
     7aa:	51 df       	rcall	.-350    	; 0x64e <LL_GetClass>
     7ac:	84 30       	cpi	r24, 0x04	; 4
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <main+0xfa>
     7b0:	54 c0       	rjmp	.+168    	; 0x85a <main+0x1a2>
     7b2:	ce 01       	movw	r24, r28
     7b4:	71 df       	rcall	.-286    	; 0x698 <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x104>
     7ba:	4f c0       	rjmp	.+158    	; 0x85a <main+0x1a2>
     7bc:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     7be:	4c df       	rcall	.-360    	; 0x658 <LL_GetRefl>
     7c0:	8c 01       	movw	r16, r24
     7c2:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     7c4:	4f df       	rcall	.-354    	; 0x664 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     7c6:	88 23       	and	r24, r24
     7c8:	91 f0       	breq	.+36     	; 0x7ee <main+0x136>
     7ca:	c8 01       	movw	r24, r16
     7cc:	44 97       	sbiw	r24, 0x14	; 20
     7ce:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     7d0:	91 05       	cpc	r25, r1
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <main+0x124>
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     7d8:	55 df       	rcall	.-342    	; 0x684 <LL_UpdateClass>
     7da:	24 c0       	rjmp	.+72     	; 0x824 <main+0x16c>
     7dc:	0c 52       	subi	r16, 0x2C	; 44
     7de:	11 40       	sbci	r17, 0x01	; 1
     7e0:	0f 35       	cpi	r16, 0x5F	; 95
					{
						LL_UpdateClass(temp, STEEL);
     7e2:	11 40       	sbci	r17, 0x01	; 1
     7e4:	f8 f4       	brcc	.+62     	; 0x824 <main+0x16c>
     7e6:	63 e0       	ldi	r22, 0x03	; 3
     7e8:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7ea:	4c df       	rcall	.-360    	; 0x684 <LL_UpdateClass>
     7ec:	1b c0       	rjmp	.+54     	; 0x824 <main+0x16c>
     7ee:	c8 01       	movw	r24, r16
     7f0:	89 58       	subi	r24, 0x89	; 137
     7f2:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     7f4:	0b 97       	sbiw	r24, 0x0b	; 11
     7f6:	20 f4       	brcc	.+8      	; 0x800 <main+0x148>
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     7fc:	43 df       	rcall	.-378    	; 0x684 <LL_UpdateClass>
     7fe:	12 c0       	rjmp	.+36     	; 0x824 <main+0x16c>
     800:	c8 01       	movw	r24, r16
     802:	80 52       	subi	r24, 0x20	; 32
     804:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     806:	87 39       	cpi	r24, 0x97	; 151
     808:	91 05       	cpc	r25, r1
     80a:	20 f4       	brcc	.+8      	; 0x814 <main+0x15c>
     80c:	61 e0       	ldi	r22, 0x01	; 1
     80e:	ce 01       	movw	r24, r28
				}
				else
				{
					// Unknown non-magnetic object might be aluminum
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     810:	39 df       	rcall	.-398    	; 0x684 <LL_UpdateClass>
     812:	08 c0       	rjmp	.+16     	; 0x824 <main+0x16c>
     814:	04 51       	subi	r16, 0x14	; 20
     816:	11 09       	sbc	r17, r1
					{
						LL_UpdateClass(temp, ALUMINUM);
     818:	01 35       	cpi	r16, 0x51	; 81
     81a:	11 05       	cpc	r17, r1
     81c:	18 f4       	brcc	.+6      	; 0x824 <main+0x16c>
     81e:	62 e0       	ldi	r22, 0x02	; 2
					}
				}
				if(memory == 0)
     820:	ce 01       	movw	r24, r28
     822:	30 df       	rcall	.-416    	; 0x684 <LL_UpdateClass>
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     824:	e1 14       	cp	r14, r1
     826:	f1 04       	cpc	r15, r1
     828:	c1 f4       	brne	.+48     	; 0x85a <main+0x1a2>
     82a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     82e:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     832:	0d df       	rcall	.-486    	; 0x64e <LL_GetClass>
     834:	e8 2f       	mov	r30, r24
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	e1 5f       	subi	r30, 0xF1	; 241
     83a:	fe 4f       	sbci	r31, 0xFE	; 254
     83c:	10 81       	ld	r17, Z
     83e:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
     842:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     846:	03 df       	rcall	.-506    	; 0x64e <LL_GetClass>
     848:	e8 2f       	mov	r30, r24
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e1 5f       	subi	r30, 0xF1	; 241
     84e:	fe 4f       	sbci	r31, 0xFE	; 254
     850:	80 81       	ld	r24, Z
     852:	61 2f       	mov	r22, r17
					memory = 1;
     854:	a5 d0       	rcall	.+330    	; 0x9a0 <STEPPER_SetRotation>
     856:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     858:	fd 2c       	mov	r15, r13
     85a:	ce 01       	movw	r24, r28
     85c:	d2 de       	rcall	.-604    	; 0x602 <LL_Next>
     85e:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Calibrate("SET\r\n");

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     860:	89 2b       	or	r24, r25
     862:	09 f0       	breq	.+2      	; 0x866 <main+0x1ae>
     864:	9e cf       	rjmp	.-196    	; 0x7a2 <main+0xea>
     866:	90 cf       	rjmp	.-224    	; 0x788 <main+0xd0>

00000868 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     868:	1f 92       	push	r1
     86a:	0f 92       	push	r0
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	0f 92       	push	r0
     870:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     872:	8a ea       	ldi	r24, 0xAA	; 170
     874:	88 b9       	out	0x08, r24	; 8
     876:	fe cf       	rjmp	.-4      	; 0x874 <__vector_default+0xc>

00000878 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     878:	84 b5       	in	r24, 0x24	; 36
     87a:	83 68       	ori	r24, 0x83	; 131
     87c:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     87e:	85 b5       	in	r24, 0x25	; 37
     880:	83 60       	ori	r24, 0x03	; 3
     882:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     884:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <BELT_SPEED>
     888:	87 bd       	out	0x27, r24	; 39
     88a:	08 95       	ret

0000088c <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     88c:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     88e:	9f b7       	in	r25, 0x3f	; 63
     890:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     892:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <BELT_SPEED>
     896:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     898:	23 2b       	or	r18, r19
     89a:	31 f0       	breq	.+12     	; 0x8a8 <PWM+0x1c>
		{
			g_MotorOn = 1;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <g_MotorOn>
			PORTB = ~0x0E;
     8a2:	81 ef       	ldi	r24, 0xF1	; 241
     8a4:	85 b9       	out	0x05, r24	; 5
     8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     8a8:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <g_MotorOn>
			PORTB = ~0x0F;
     8ac:	80 ef       	ldi	r24, 0xF0	; 240
     8ae:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8b0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8b2:	08 95       	ret

000008b4 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     8b4:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     8b6:	ed ea       	ldi	r30, 0xAD	; 173
     8b8:	f3 e0       	ldi	r31, 0x03	; 3
     8ba:	10 82       	st	Z, r1
	stepper.direction = 1;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     8c0:	13 82       	std	Z+3, r1	; 0x03
     8c2:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     8c4:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     8c6:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     8c8:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     8ca:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     8cc:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     8ce:	88 ec       	ldi	r24, 0xC8	; 200
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	96 83       	std	Z+6, r25	; 0x06
     8d4:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     8d6:	80 e3       	ldi	r24, 0x30	; 48
     8d8:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     8da:	84 e9       	ldi	r24, 0x94	; 148
     8dc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     8e0:	e0 eb       	ldi	r30, 0xB0	; 176
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     8ea:	e0 e7       	ldi	r30, 0x70	; 112
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	82 60       	ori	r24, 0x02	; 2
     8f2:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     8f4:	e1 eb       	ldi	r30, 0xB1	; 177
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	87 60       	ori	r24, 0x07	; 7
     8fc:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     8fe:	78 94       	sei
     900:	08 95       	ret

00000902 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	86 1b       	sub	r24, r22
     906:	91 09       	sbc	r25, r1
	if (steps >= 0)
     908:	52 f0       	brmi	.+20     	; 0x91e <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     90a:	85 36       	cpi	r24, 0x65	; 101
     90c:	91 05       	cpc	r25, r1
     90e:	8c f0       	brlt	.+34     	; 0x932 <STEPPER_NumSteps+0x30>
     910:	24 e6       	ldi	r18, 0x64	; 100
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	a9 01       	movw	r20, r18
     916:	48 1b       	sub	r20, r24
     918:	59 0b       	sbc	r21, r25
     91a:	ca 01       	movw	r24, r20
     91c:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     91e:	8c 39       	cpi	r24, 0x9C	; 156
     920:	5f ef       	ldi	r21, 0xFF	; 255
     922:	95 07       	cpc	r25, r21
     924:	34 f4       	brge	.+12     	; 0x932 <STEPPER_NumSteps+0x30>
     926:	2c e9       	ldi	r18, 0x9C	; 156
     928:	3f ef       	ldi	r19, 0xFF	; 255
     92a:	a9 01       	movw	r20, r18
     92c:	48 1b       	sub	r20, r24
     92e:	59 0b       	sbc	r21, r25
     930:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     932:	08 95       	ret

00000934 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     938:	cd ea       	ldi	r28, 0xAD	; 173
     93a:	d3 e0       	ldi	r29, 0x03	; 3
     93c:	6c 81       	ldd	r22, Y+4	; 0x04
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	9b 81       	ldd	r25, Y+3	; 0x03
     942:	df df       	rcall	.-66     	; 0x902 <STEPPER_NumSteps>
     944:	9e 83       	std	Y+6, r25	; 0x06
     946:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     948:	6a 81       	ldd	r22, Y+2	; 0x02
     94a:	7b 81       	ldd	r23, Y+3	; 0x03
     94c:	88 85       	ldd	r24, Y+8	; 0x08
     94e:	d9 df       	rcall	.-78     	; 0x902 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     950:	2d 81       	ldd	r18, Y+5	; 0x05
     952:	3e 81       	ldd	r19, Y+6	; 0x06
     954:	33 23       	and	r19, r19
     956:	14 f4       	brge	.+4      	; 0x95c <STEPPER_Rotate+0x28>
     958:	28 e0       	ldi	r18, 0x08	; 8
     95a:	01 c0       	rjmp	.+2      	; 0x95e <STEPPER_Rotate+0x2a>
     95c:	24 e0       	ldi	r18, 0x04	; 4
     95e:	ed ea       	ldi	r30, 0xAD	; 173
     960:	f3 e0       	ldi	r31, 0x03	; 3
     962:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     964:	45 81       	ldd	r20, Z+5	; 0x05
     966:	56 81       	ldd	r21, Z+6	; 0x06
     968:	84 9f       	mul	r24, r20
     96a:	90 01       	movw	r18, r0
     96c:	85 9f       	mul	r24, r21
     96e:	30 0d       	add	r19, r0
     970:	94 9f       	mul	r25, r20
     972:	30 0d       	add	r19, r0
     974:	11 24       	eor	r1, r1
     976:	83 2f       	mov	r24, r19
     978:	80 95       	com	r24
     97a:	88 1f       	adc	r24, r24
     97c:	88 27       	eor	r24, r24
     97e:	88 1f       	adc	r24, r24
     980:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     982:	85 81       	ldd	r24, Z+5	; 0x05
     984:	96 81       	ldd	r25, Z+6	; 0x06
     986:	99 23       	and	r25, r25
     988:	1c f4       	brge	.+6      	; 0x990 <STEPPER_Rotate+0x5c>
     98a:	91 95       	neg	r25
     98c:	81 95       	neg	r24
     98e:	91 09       	sbc	r25, r1
     990:	ed ea       	ldi	r30, 0xAD	; 173
     992:	f3 e0       	ldi	r31, 0x03	; 3
     994:	96 83       	std	Z+6, r25	; 0x06
     996:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     998:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
	cli();
     9a4:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	cd ea       	ldi	r28, 0xAD	; 173
     9aa:	d3 e0       	ldi	r29, 0x03	; 3
     9ac:	9b 83       	std	Y+3, r25	; 0x03
     9ae:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     9b0:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     9b2:	c0 df       	rcall	.-128    	; 0x934 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     9b4:	eb 85       	ldd	r30, Y+11	; 0x0b
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	eb 5e       	subi	r30, 0xEB	; 235
     9ba:	fe 4f       	sbci	r31, 0xFE	; 254
     9bc:	80 81       	ld	r24, Z
     9be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     9c2:	78 94       	sei
}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	08 95       	ret

000009ca <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	2f 93       	push	r18
     9da:	3f 93       	push	r19
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <__vector_13+0x24>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <__vector_13+0x26>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     9f4:	86 e3       	ldi	r24, 0x36	; 54
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	9e e2       	ldi	r25, 0x2E	; 46
     9fe:	ad e2       	ldi	r26, 0x2D	; 45
     a00:	b5 e3       	ldi	r27, 0x35	; 53
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	ab 83       	std	Y+3, r26	; 0x03
     a08:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     a0a:	ed ea       	ldi	r30, 0xAD	; 173
     a0c:	f3 e0       	ldi	r31, 0x03	; 3
     a0e:	87 81       	ldd	r24, Z+7	; 0x07
     a10:	25 81       	ldd	r18, Z+5	; 0x05
     a12:	36 81       	ldd	r19, Z+6	; 0x06
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	82 17       	cp	r24, r18
     a18:	93 07       	cpc	r25, r19
     a1a:	0c f0       	brlt	.+2      	; 0xa1e <__vector_13+0x54>
     a1c:	5a c0       	rjmp	.+180    	; 0xad2 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     a1e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <stepper+0x1>
     a22:	84 30       	cpi	r24, 0x04	; 4
     a24:	51 f4       	brne	.+20     	; 0xa3a <__vector_13+0x70>
     a26:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <stepper>
     a2a:	e1 e0       	ldi	r30, 0x01	; 1
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	ec 0f       	add	r30, r28
     a30:	fd 1f       	adc	r31, r29
     a32:	e8 0f       	add	r30, r24
     a34:	f1 1d       	adc	r31, r1
     a36:	80 81       	ld	r24, Z
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <__vector_13+0x8a>
     a3a:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <stepper>
     a3e:	e3 e0       	ldi	r30, 0x03	; 3
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	e8 1b       	sub	r30, r24
     a44:	f1 09       	sbc	r31, r1
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	8c 0f       	add	r24, r28
     a4c:	9d 1f       	adc	r25, r29
     a4e:	e8 0f       	add	r30, r24
     a50:	f9 1f       	adc	r31, r25
     a52:	80 81       	ld	r24, Z
     a54:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     a56:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <stepper>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	21 f0       	breq	.+8      	; 0xa66 <__vector_13+0x9c>
     a5e:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <stepper>
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <__vector_13+0x9e>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	ed ea       	ldi	r30, 0xAD	; 173
     a6a:	f3 e0       	ldi	r31, 0x03	; 3
     a6c:	80 83       	st	Z, r24

		stepper._currentStep++;
     a6e:	87 81       	ldd	r24, Z+7	; 0x07
     a70:	8f 5f       	subi	r24, 0xFF	; 255
     a72:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     a74:	85 81       	ldd	r24, Z+5	; 0x05
     a76:	96 81       	ldd	r25, Z+6	; 0x06
     a78:	27 81       	ldd	r18, Z+7	; 0x07
     a7a:	82 1b       	sub	r24, r18
     a7c:	91 09       	sbc	r25, r1
     a7e:	06 97       	sbiw	r24, 0x06	; 6
     a80:	74 f4       	brge	.+28     	; 0xa9e <__vector_13+0xd4>
     a82:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <stepper+0xb>
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	eb 5e       	subi	r30, 0xEB	; 235
     a8a:	fe 4f       	sbci	r31, 0xFE	; 254
     a8c:	80 81       	ld	r24, Z
     a8e:	84 39       	cpi	r24, 0x94	; 148
     a90:	30 f4       	brcc	.+12     	; 0xa9e <__vector_13+0xd4>
		{
			stepper._accellStep--;
     a92:	ed ea       	ldi	r30, 0xAD	; 173
     a94:	f3 e0       	ldi	r31, 0x03	; 3
     a96:	83 85       	ldd	r24, Z+11	; 0x0b
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	83 87       	std	Z+11, r24	; 0x0b
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a9e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <stepper+0x7>
     aa2:	86 30       	cpi	r24, 0x06	; 6
     aa4:	68 f0       	brcs	.+26     	; 0xac0 <__vector_13+0xf6>
     aa6:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <stepper+0xb>
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	eb 5e       	subi	r30, 0xEB	; 235
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	80 81       	ld	r24, Z
     ab2:	81 34       	cpi	r24, 0x41	; 65
     ab4:	28 f0       	brcs	.+10     	; 0xac0 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     ab6:	ed ea       	ldi	r30, 0xAD	; 173
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	83 85       	ldd	r24, Z+11	; 0x0b
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     ac0:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <stepper+0xb>
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	eb 5e       	subi	r30, 0xEB	; 235
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	80 81       	ld	r24, Z
     acc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ad0:	29 c0       	rjmp	.+82     	; 0xb24 <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     ad2:	ed ea       	ldi	r30, 0xAD	; 173
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	87 81       	ldd	r24, Z+7	; 0x07
     ad8:	25 81       	ldd	r18, Z+5	; 0x05
     ada:	36 81       	ldd	r19, Z+6	; 0x06
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	82 17       	cp	r24, r18
     ae0:	93 07       	cpc	r25, r19
     ae2:	01 f5       	brne	.+64     	; 0xb24 <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     aea:	81 85       	ldd	r24, Z+9	; 0x09
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <__vector_13+0x12c>
     af0:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <stepper+0xb>
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <__vector_13+0x12e>
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	ad ea       	ldi	r26, 0xAD	; 173
     afa:	b3 e0       	ldi	r27, 0x03	; 3
     afc:	1b 96       	adiw	r26, 0x0b	; 11
     afe:	8c 93       	st	X, r24
     b00:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     b02:	1b 96       	adiw	r26, 0x0b	; 11
     b04:	ec 91       	ld	r30, X
     b06:	1b 97       	sbiw	r26, 0x0b	; 11
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	eb 5e       	subi	r30, 0xEB	; 235
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     b14:	19 96       	adiw	r26, 0x09	; 9
     b16:	8c 91       	ld	r24, X
     b18:	81 11       	cpse	r24, r1
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <__vector_13+0x156>
     b1c:	82 b1       	in	r24, 0x02	; 2
     b1e:	01 c0       	rjmp	.+2      	; 0xb22 <__vector_13+0x158>
     b20:	82 b1       	in	r24, 0x02	; 2
     b22:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     b24:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <stepper+0xa>
     b28:	81 11       	cpse	r24, r1
     b2a:	0f c0       	rjmp	.+30     	; 0xb4a <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     b2c:	63 99       	sbic	0x0c, 3	; 12
     b2e:	0d c0       	rjmp	.+26     	; 0xb4a <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     b30:	ed ea       	ldi	r30, 0xAD	; 173
     b32:	f3 e0       	ldi	r31, 0x03	; 3
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     b38:	10 82       	st	Z, r1
			stepper.direction = 1;
     b3a:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     b3c:	13 82       	std	Z+3, r1	; 0x03
     b3e:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     b40:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     b42:	16 82       	std	Z+6, r1	; 0x06
     b44:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     b46:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     b48:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	3f 91       	pop	r19
     b64:	2f 91       	pop	r18
     b66:	0f 90       	pop	r0
     b68:	0b be       	out	0x3b, r0	; 59
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     b7a:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     b7c:	e1 e6       	ldi	r30, 0x61	; 97
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	80 83       	st	Z, r24
	CLKPR = 0;
     b84:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     b86:	e0 d2       	rcall	.+1472   	; 0x1148 <UART_Init>
	GPIO_Init();
     b88:	8c dd       	rcall	.-1256   	; 0x6a2 <GPIO_Init>
	TIMER_Init();
     b8a:	63 d2       	rcall	.+1222   	; 0x1052 <TIMER_Init>
	PWM_Init();
     b8c:	75 de       	rcall	.-790    	; 0x878 <PWM_Init>
     b8e:	a3 da       	rcall	.-2746   	; 0xd6 <ADC_Init>
	ADC_Init();
     b90:	91 de       	rcall	.-734    	; 0x8b4 <STEPPER_Init>
     b92:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <g_ADCCount+0x1>
	STEPPER_Init();
     b96:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     b9a:	84 e1       	ldi	r24, 0x14	; 20
     b9c:	e7 e4       	ldi	r30, 0x47	; 71
     b9e:	f3 e0       	ldi	r31, 0x03	; 3
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     ba0:	df 01       	movw	r26, r30
     ba2:	1d 92       	st	X+, r1
     ba4:	8a 95       	dec	r24
     ba6:	e9 f7       	brne	.-6      	; 0xba2 <SYS_Init+0x2e>
     ba8:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <g_PauseRequest>
     bac:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <g_WDTimeout>
	g_PauseRequest = 0;
     bb0:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <g_Timer>
	g_WDTimeout = 0;
     bb4:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <HEAD+0x1>
	g_Timer = 0;
     bb8:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <HEAD>

	HEAD = NULL;
     bbc:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <TAIL+0x1>
     bc0:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <TAIL>
	TAIL = NULL;
     bc4:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <STAGE1+0x1>
     bc8:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <STAGE1>
	STAGE1 = NULL;
     bcc:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <STAGE2+0x1>
     bd0:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <STAGE2>
	STAGE2 = NULL;
     bd4:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <FRONT+0x1>
     bd8:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <FRONT>
	FRONT = NULL;
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     be0:	6f ef       	ldi	r22, 0xFF	; 255
     be2:	89 ee       	ldi	r24, 0xE9	; 233
     be4:	9d ef       	ldi	r25, 0xFD	; 253
     be6:	e3 dc       	rcall	.-1594   	; 0x5ae <LL_ItemInit>
     be8:	fc dc       	rcall	.-1544   	; 0x5e2 <LL_ItemListInit>
     bea:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     bee:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <HEAD>
     bf2:	90 93 44 03 	sts	0x0344, r25	; 0x800344 <FRONT+0x1>
     bf6:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <FRONT>
	FRONT = HEAD;
     bfa:	ca ef       	ldi	r28, 0xFA	; 250
     bfc:	08 ee       	ldi	r16, 0xE8	; 232
     bfe:	1d ef       	ldi	r17, 0xFD	; 253
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     c04:	6c 2f       	mov	r22, r28
     c06:	c8 01       	movw	r24, r16
     c08:	d2 dc       	rcall	.-1628   	; 0x5ae <LL_ItemInit>
     c0a:	bc 01       	movw	r22, r24
     c0c:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     c10:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     c14:	fa dc       	rcall	.-1548   	; 0x60a <LL_AddBack>
     c16:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <TAIL+0x1>
     c1a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <TAIL>
     c1e:	01 50       	subi	r16, 0x01	; 1
     c20:	11 09       	sbc	r17, r1
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	cb 3c       	cpi	r28, 0xCB	; 203
     c26:	61 f7       	brne	.-40     	; 0xc00 <SYS_Init+0x8c>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     c28:	05 e0       	ldi	r16, 0x05	; 5
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     c30:	6a ef       	ldi	r22, 0xFA	; 250
     c32:	88 ee       	ldi	r24, 0xE8	; 232
     c34:	9d ef       	ldi	r25, 0xFD	; 253
     c36:	bb dc       	rcall	.-1674   	; 0x5ae <LL_ItemInit>
     c38:	bc 01       	movw	r22, r24
     c3a:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <HEAD>
		LL_AddBack(HEAD,initNode);
     c3e:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <HEAD+0x1>
     c42:	e3 dc       	rcall	.-1594   	; 0x60a <LL_AddBack>
     c44:	01 50       	subi	r16, 0x01	; 1
     c46:	11 09       	sbc	r17, r1
     c48:	89 f7       	brne	.-30     	; 0xc2c <SYS_Init+0xb8>
     c4a:	85 e5       	ldi	r24, 0x55	; 85
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     c4c:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     c4e:	94 d2       	rcall	.+1320   	; 0x1178 <UART_SendString>
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16

} // SYS_Init
     c56:	08 95       	ret

00000c58 <SYS_Pause>:
     c58:	3f 92       	push	r3
     c5a:	4f 92       	push	r4
     c5c:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     c5e:	6f 92       	push	r6
     c60:	7f 92       	push	r7
     c62:	8f 92       	push	r8
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	ca 5f       	subi	r28, 0xFA	; 250
     c80:	d1 09       	sbc	r29, r1
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	98 2e       	mov	r9, r24
     c8e:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     c90:	f8 94       	cli

	// Turn off motor
	PWM(0);
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fa dd       	rcall	.-1036   	; 0x88c <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     c98:	00 91 43 03 	lds	r16, 0x0343	; 0x800343 <FRONT>
     c9c:	10 91 44 03 	lds	r17, 0x0344	; 0x800344 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	8b e6       	ldi	r24, 0x6B	; 107
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	7c 01       	movw	r14, r24
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	8f d3       	rcall	.+1822   	; 0x13d6 <sprintf>
	UART_SendString(buffer);
     cb8:	c7 01       	movw	r24, r14
     cba:	5e d2       	rcall	.+1212   	; 0x1178 <UART_SendString>
     cbc:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     cca:	f1 2c       	mov	r15, r1
     ccc:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     cce:	f6 e8       	ldi	r31, 0x86	; 134
     cd0:	af 2e       	mov	r10, r31
     cd2:	f1 e0       	ldi	r31, 0x01	; 1
     cd4:	bf 2e       	mov	r11, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	6e 01       	movw	r12, r28
     cda:	97 e9       	ldi	r25, 0x97	; 151
     cdc:	c9 0e       	add	r12, r25
     cde:	d1 1c       	adc	r13, r1
     ce0:	30 c0       	rjmp	.+96     	; 0xd42 <SYS_Pause+0xea>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     ce2:	af ef       	ldi	r26, 0xFF	; 255
	{
		char listbuff[100];
		c++;
     ce4:	ea 1a       	sub	r14, r26
     ce6:	fa 0a       	sbc	r15, r26
     ce8:	d8 01       	movw	r26, r16
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
					 ((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
     cea:	ed 91       	ld	r30, X+
     cec:	fc 91       	ld	r31, X
     cee:	44 80       	ldd	r4, Z+4	; 0x04
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     cf0:	32 80       	ldd	r3, Z+2	; 0x02
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
     cf2:	c8 01       	movw	r24, r16
     cf4:	d1 dc       	rcall	.-1630   	; 0x698 <LL_GetStatus>
     cf6:	58 2e       	mov	r5, r24
     cf8:	c8 01       	movw	r24, r16
     cfa:	a9 dc       	rcall	.-1710   	; 0x64e <LL_GetClass>
     cfc:	68 2e       	mov	r6, r24
     cfe:	c8 01       	movw	r24, r16
     d00:	b1 dc       	rcall	.-1694   	; 0x664 <LL_GetMag>
     d02:	78 2e       	mov	r7, r24
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     d04:	c8 01       	movw	r24, r16
     d06:	a8 dc       	rcall	.-1712   	; 0x658 <LL_GetRefl>
     d08:	1f 92       	push	r1
     d0a:	4f 92       	push	r4
     d0c:	1f 92       	push	r1
     d0e:	3f 92       	push	r3
     d10:	1f 92       	push	r1
     d12:	5f 92       	push	r5
     d14:	1f 92       	push	r1
     d16:	6f 92       	push	r6
     d18:	1f 92       	push	r1
     d1a:	7f 92       	push	r7
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	ff 92       	push	r15
     d22:	ef 92       	push	r14
     d24:	bf 92       	push	r11
     d26:	af 92       	push	r10
     d28:	df 92       	push	r13
     d2a:	cf 92       	push	r12
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
					 ((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
		UART_SendString(listbuff);
     d2c:	54 d3       	rcall	.+1704   	; 0x13d6 <sprintf>
     d2e:	c6 01       	movw	r24, r12
     d30:	23 d2       	rcall	.+1094   	; 0x1178 <UART_SendString>
		temp = LL_Next(temp);	
     d32:	c8 01       	movw	r24, r16
     d34:	66 dc       	rcall	.-1844   	; 0x602 <LL_Next>
     d36:	8c 01       	movw	r16, r24
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     d42:	c8 01       	movw	r24, r16
     d44:	84 dc       	rcall	.-1784   	; 0x64e <LL_GetClass>
     d46:	85 30       	cpi	r24, 0x05	; 5
     d48:	61 f6       	brne	.-104    	; 0xce2 <SYS_Pause+0x8a>
     d4a:	0f 2e       	mov	r0, r31
     d4c:	f2 e6       	ldi	r31, 0x62	; 98
     d4e:	cf 2e       	mov	r12, r31
     d50:	f3 e0       	ldi	r31, 0x03	; 3
     d52:	df 2e       	mov	r13, r31
     d54:	f0 2d       	mov	r31, r0
     d56:	00 e0       	ldi	r16, 0x00	; 0
     d58:	10 e0       	ldi	r17, 0x00	; 0
     d5a:	0f 2e       	mov	r0, r31
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     d5c:	fb ec       	ldi	r31, 0xCB	; 203
     d5e:	af 2e       	mov	r10, r31
     d60:	f1 e0       	ldi	r31, 0x01	; 1
     d62:	bf 2e       	mov	r11, r31
     d64:	f0 2d       	mov	r31, r0
     d66:	7e 01       	movw	r14, r28
     d68:	f7 e9       	ldi	r31, 0x97	; 151
     d6a:	ef 0e       	add	r14, r31
     d6c:	f1 1c       	adc	r15, r1
     d6e:	d6 01       	movw	r26, r12
     d70:	18 96       	adiw	r26, 0x08	; 8
     d72:	8c 91       	ld	r24, X
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	1f 93       	push	r17
     d7a:	0f 93       	push	r16
     d7c:	8f 92       	push	r8
     d7e:	9f 92       	push	r9
     d80:	bf 92       	push	r11
     d82:	af 92       	push	r10
     d84:	ff 92       	push	r15
     d86:	ef 92       	push	r14
     d88:	26 d3       	rcall	.+1612   	; 0x13d6 <sprintf>
		UART_SendString(statebuff);
     d8a:	c7 01       	movw	r24, r14
     d8c:	f5 d1       	rcall	.+1002   	; 0x1178 <UART_SendString>
     d8e:	0f 5f       	subi	r16, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     d90:	1f 4f       	sbci	r17, 0xFF	; 255
     d92:	b9 e0       	ldi	r27, 0x09	; 9
     d94:	cb 0e       	add	r12, r27
     d96:	d1 1c       	adc	r13, r1
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	07 30       	cpi	r16, 0x07	; 7
     da4:	11 05       	cpc	r17, r1
     da6:	19 f7       	brne	.-58     	; 0xd6e <SYS_Pause+0x116>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     da8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <STAGE2>
     dac:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <STAGE2+0x1>
     db0:	53 dc       	rcall	.-1882   	; 0x658 <LL_GetRefl>
     db2:	48 2e       	mov	r4, r24
     db4:	39 2e       	mov	r3, r25
     db6:	60 90 aa 03 	lds	r6, 0x03AA	; 0x8003aa <STAGE2>
     dba:	50 90 ab 03 	lds	r5, 0x03AB	; 0x8003ab <STAGE2+0x1>
     dbe:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <STAGE1>
     dc2:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <STAGE1+0x1>
     dc6:	4e dc       	rcall	.-1892   	; 0x664 <LL_GetMag>
     dc8:	78 2e       	mov	r7, r24
     dca:	90 90 60 03 	lds	r9, 0x0360	; 0x800360 <STAGE1>
     dce:	80 90 61 03 	lds	r8, 0x0361	; 0x800361 <STAGE1+0x1>
     dd2:	00 91 45 03 	lds	r16, 0x0345	; 0x800345 <TAIL>
     dd6:	10 91 46 03 	lds	r17, 0x0346	; 0x800346 <TAIL+0x1>
     dda:	d8 01       	movw	r26, r16
     ddc:	12 96       	adiw	r26, 0x02	; 2
     dde:	bc 90       	ld	r11, X
     de0:	12 97       	sbiw	r26, 0x02	; 2
     de2:	13 96       	adiw	r26, 0x03	; 3
     de4:	ac 90       	ld	r10, X
     de6:	d0 90 43 03 	lds	r13, 0x0343	; 0x800343 <FRONT>
     dea:	c0 90 44 03 	lds	r12, 0x0344	; 0x800344 <FRONT+0x1>
     dee:	f0 90 41 03 	lds	r15, 0x0341	; 0x800341 <HEAD>
     df2:	e0 90 42 03 	lds	r14, 0x0342	; 0x800342 <HEAD+0x1>
     df6:	8f 2d       	mov	r24, r15
     df8:	9e 2d       	mov	r25, r14
     dfa:	18 dc       	rcall	.-2000   	; 0x62c <LL_Size>
     dfc:	3f 92       	push	r3
     dfe:	4f 92       	push	r4
     e00:	5f 92       	push	r5
     e02:	6f 92       	push	r6
     e04:	1f 92       	push	r1
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	1f 93       	push	r17
     e16:	0f 93       	push	r16
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	1f 92       	push	r1
     e1e:	8f 93       	push	r24
     e20:	8a ee       	ldi	r24, 0xEA	; 234
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	8e 01       	movw	r16, r28
     e2a:	0b 59       	subi	r16, 0x9B	; 155
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	1f 93       	push	r17
     e30:	0f 93       	push	r16
	UART_SendString(anotherbuff);
     e32:	d1 d2       	rcall	.+1442   	; 0x13d6 <sprintf>
     e34:	c8 01       	movw	r24, r16
     e36:	a0 d1       	rcall	.+832    	; 0x1178 <UART_SendString>
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     e42:	89 b1       	in	r24, 0x09	; 9
     e44:	83 70       	andi	r24, 0x03	; 3
     e46:	e9 f7       	brne	.-6      	; 0xe42 <SYS_Pause+0x1ea>
		{
			UART_SendString("Starting System!\r\n");
     e48:	89 e2       	ldi	r24, 0x29	; 41
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	95 d1       	rcall	.+810    	; 0x1178 <UART_SendString>
     e4e:	80 e8       	ldi	r24, 0x80	; 128
			PWM(0x80);
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	1c dd       	rcall	.-1480   	; 0x88c <PWM>
     e54:	78 94       	sei
     e56:	c6 50       	subi	r28, 0x06	; 6
			sei();
     e58:	df 4f       	sbci	r29, 0xFF	; 255
			return;
		}
	}
} // SYS_Pause
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	bf 90       	pop	r11
     e76:	af 90       	pop	r10
     e78:	9f 90       	pop	r9
     e7a:	8f 90       	pop	r8
     e7c:	7f 90       	pop	r7
     e7e:	6f 90       	pop	r6
     e80:	5f 90       	pop	r5
     e82:	4f 90       	pop	r4
     e84:	3f 90       	pop	r3
     e86:	08 95       	ret

00000e88 <SYS_Calibrate>:
     e88:	7f 92       	push	r7
     e8a:	8f 92       	push	r8

void SYS_Calibrate(char str[20])
{
     e8c:	9f 92       	push	r9
     e8e:	af 92       	push	r10
     e90:	bf 92       	push	r11
     e92:	cf 92       	push	r12
     e94:	df 92       	push	r13
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	c4 56       	subi	r28, 0x64	; 100
     ea8:	d1 09       	sbc	r29, r1
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	7c 01       	movw	r14, r24
	//
	cli();
     eb6:	f8 94       	cli
	PWM(0);
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	e7 dc       	rcall	.-1586   	; 0x88c <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     ebe:	00 91 43 03 	lds	r16, 0x0343	; 0x800343 <FRONT>
     ec2:	10 91 44 03 	lds	r17, 0x0344	; 0x800344 <FRONT+0x1>
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
     ec6:	c7 01       	movw	r24, r14
     ec8:	57 d1       	rcall	.+686    	; 0x1178 <UART_SendString>
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     eca:	e1 2c       	mov	r14, r1
     ecc:	f1 2c       	mov	r15, r1
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     ece:	0f 2e       	mov	r0, r31
     ed0:	f1 e4       	ldi	r31, 0x41	; 65
     ed2:	af 2e       	mov	r10, r31
     ed4:	f2 e0       	ldi	r31, 0x02	; 2
     ed6:	bf 2e       	mov	r11, r31
     ed8:	f0 2d       	mov	r31, r0
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	6c 01       	movw	r12, r24
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     ee0:	26 c0       	rjmp	.+76     	; 0xf2e <SYS_Calibrate+0xa6>
	{
		char listbuff[100];
		c++;
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	e9 1a       	sub	r14, r25
     ee6:	f9 0a       	sbc	r15, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
				c, LL_GetRefl(temp), LL_GetMag(temp),
				((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
     ee8:	d8 01       	movw	r26, r16
     eea:	ed 91       	ld	r30, X+
     eec:	fc 91       	ld	r31, X
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     eee:	74 80       	ldd	r7, Z+4	; 0x04
				c, LL_GetRefl(temp), LL_GetMag(temp),
     ef0:	82 80       	ldd	r8, Z+2	; 0x02
     ef2:	c8 01       	movw	r24, r16
     ef4:	b7 db       	rcall	.-2194   	; 0x664 <LL_GetMag>
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     ef6:	98 2e       	mov	r9, r24
     ef8:	c8 01       	movw	r24, r16
     efa:	ae db       	rcall	.-2212   	; 0x658 <LL_GetRefl>
     efc:	1f 92       	push	r1
     efe:	7f 92       	push	r7
     f00:	1f 92       	push	r1
     f02:	8f 92       	push	r8
     f04:	1f 92       	push	r1
     f06:	9f 92       	push	r9
     f08:	9f 93       	push	r25
     f0a:	8f 93       	push	r24
     f0c:	ff 92       	push	r15
     f0e:	ef 92       	push	r14
     f10:	bf 92       	push	r11
     f12:	af 92       	push	r10
     f14:	df 92       	push	r13
     f16:	cf 92       	push	r12
				c, LL_GetRefl(temp), LL_GetMag(temp),
				((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
		UART_SendString(listbuff);
     f18:	5e d2       	rcall	.+1212   	; 0x13d6 <sprintf>
     f1a:	c6 01       	movw	r24, r12
     f1c:	2d d1       	rcall	.+602    	; 0x1178 <UART_SendString>
		temp = LL_Next(temp);
     f1e:	c8 01       	movw	r24, r16
     f20:	70 db       	rcall	.-2336   	; 0x602 <LL_Next>
     f22:	8c 01       	movw	r16, r24
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     f2e:	c8 01       	movw	r24, r16
     f30:	b3 db       	rcall	.-2202   	; 0x698 <LL_GetStatus>
     f32:	81 11       	cpse	r24, r1
     f34:	d6 cf       	rjmp	.-84     	; 0xee2 <SYS_Calibrate+0x5a>
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     f36:	89 b1       	in	r24, 0x09	; 9
     f38:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
     f3a:	e9 f7       	brne	.-6      	; 0xf36 <SYS_Calibrate+0xae>
     f3c:	89 e2       	ldi	r24, 0x29	; 41
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	1b d1       	rcall	.+566    	; 0x1178 <UART_SendString>
			PWM(0x80);
     f42:	80 e8       	ldi	r24, 0x80	; 128
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a2 dc       	rcall	.-1724   	; 0x88c <PWM>
     f48:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <g_PauseRequest>
			g_PauseRequest = 0;
     f4c:	78 94       	sei
			sei();
     f4e:	cc 59       	subi	r28, 0x9C	; 156
			break;
		}
	}
	return;
} // SYS_Calibrate
     f50:	df 4f       	sbci	r29, 0xFF	; 255
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	cd bf       	out	0x3d, r28	; 61
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	9f 90       	pop	r9
     f72:	8f 90       	pop	r8
     f74:	7f 90       	pop	r7
     f76:	08 95       	ret

00000f78 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     f78:	1f 92       	push	r1
     f7a:	0f 92       	push	r0
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	0f 92       	push	r0
     f80:	11 24       	eor	r1, r1
     f82:	0b b6       	in	r0, 0x3b	; 59
     f84:	0f 92       	push	r0
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	ef 93       	push	r30
     fa8:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     faa:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <_timer_tick>
     fae:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <_timer_tick+0x1>
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <_timer_tick+0x1>
     fb8:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <_timer_tick>
     fbc:	c2 e6       	ldi	r28, 0x62	; 98
     fbe:	d3 e0       	ldi	r29, 0x03	; 3
     fc0:	0f 2e       	mov	r0, r31
     fc2:	fa ea       	ldi	r31, 0xAA	; 170
     fc4:	ef 2e       	mov	r14, r31
     fc6:	f3 e0       	ldi	r31, 0x03	; 3
     fc8:	ff 2e       	mov	r15, r31
     fca:	f0 2d       	mov	r31, r0
     fcc:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     fce:	ec 81       	ldd	r30, Y+4	; 0x04
     fd0:	fd 81       	ldd	r31, Y+5	; 0x05
     fd2:	30 97       	sbiw	r30, 0x00	; 0
     fd4:	09 f1       	breq	.+66     	; 0x1018 <__vector_17+0xa0>
     fd6:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <_timer_tick>
     fda:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <_timer_tick+0x1>
     fde:	28 81       	ld	r18, Y
     fe0:	39 81       	ldd	r19, Y+1	; 0x01
     fe2:	28 17       	cp	r18, r24
     fe4:	39 07       	cpc	r19, r25
     fe6:	c1 f4       	brne	.+48     	; 0x1018 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     fe8:	88 85       	ldd	r24, Y+8	; 0x08
     fea:	82 30       	cpi	r24, 0x02	; 2
     fec:	19 f4       	brne	.+6      	; 0xff4 <__vector_17+0x7c>
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     ff4:	d8 01       	movw	r26, r16
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	8d 91       	ld	r24, X+
     ffa:	9c 91       	ld	r25, X
     ffc:	13 97       	sbiw	r26, 0x03	; 3
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	41 f0       	breq	.+16     	; 0x1012 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1002:	2d 91       	ld	r18, X+
    1004:	3c 91       	ld	r19, X
    1006:	11 97       	sbiw	r26, 0x01	; 1
    1008:	82 0f       	add	r24, r18
    100a:	93 1f       	adc	r25, r19
    100c:	8d 93       	st	X+, r24
    100e:	9c 93       	st	X, r25
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1012:	f8 01       	movw	r30, r16
    1014:	15 82       	std	Z+5, r1	; 0x05
    1016:	14 82       	std	Z+4, r1	; 0x04
    1018:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    101a:	ce 15       	cp	r28, r14
    101c:	df 05       	cpc	r29, r15
    101e:	b1 f6       	brne	.-84     	; 0xfcc <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	0f 90       	pop	r0
    1046:	0b be       	out	0x3b, r0	; 59
    1048:	0f 90       	pop	r0
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	0f 90       	pop	r0
    104e:	1f 90       	pop	r1
    1050:	18 95       	reti

00001052 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1052:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1056:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    105a:	88 e4       	ldi	r24, 0x48	; 72
    105c:	98 e0       	ldi	r25, 0x08	; 8
    105e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1062:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1066:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    106a:	89 e0       	ldi	r24, 0x09	; 9
    106c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1076:	88 e4       	ldi	r24, 0x48	; 72
    1078:	e2 e6       	ldi	r30, 0x62	; 98
    107a:	f3 e0       	ldi	r31, 0x03	; 3
    107c:	df 01       	movw	r26, r30
    107e:	1d 92       	st	X+, r1
    1080:	8a 95       	dec	r24
    1082:	e9 f7       	brne	.-6      	; 0x107e <TIMER_Init+0x2c>
    1084:	08 95       	ret

00001086 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1090:	60 91 66 03 	lds	r22, 0x0366	; 0x800366 <_timer+0x4>
    1094:	70 91 67 03 	lds	r23, 0x0367	; 0x800367 <_timer+0x5>
    1098:	67 2b       	or	r22, r23
    109a:	09 f4       	brne	.+2      	; 0x109e <TIMER_Create+0x18>
    109c:	49 c0       	rjmp	.+146    	; 0x1130 <TIMER_Create+0xaa>
    109e:	e2 e6       	ldi	r30, 0x62	; 98
    10a0:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10a2:	a1 e0       	ldi	r26, 0x01	; 1
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    10a6:	c5 85       	ldd	r28, Z+13	; 0x0d
    10a8:	d6 85       	ldd	r29, Z+14	; 0x0e
    10aa:	cd 2b       	or	r28, r29
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <TIMER_Create+0x2a>
    10ae:	42 c0       	rjmp	.+132    	; 0x1134 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10b0:	11 96       	adiw	r26, 0x01	; 1
    10b2:	39 96       	adiw	r30, 0x09	; 9
    10b4:	a8 30       	cpi	r26, 0x08	; 8
    10b6:	b1 05       	cpc	r27, r1
    10b8:	b1 f7       	brne	.-20     	; 0x10a6 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	3f c0       	rjmp	.+126    	; 0x113e <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    10c0:	fd 01       	movw	r30, r26
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ea 0f       	add	r30, r26
    10d0:	fb 1f       	adc	r31, r27
    10d2:	ee 59       	subi	r30, 0x9E	; 158
    10d4:	fc 4f       	sbci	r31, 0xFC	; 252
    10d6:	93 83       	std	Z+3, r25	; 0x03
    10d8:	82 83       	std	Z+2, r24	; 0x02
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    10dc:	fd 01       	movw	r30, r26
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	ea 0f       	add	r30, r26
    10ec:	fb 1f       	adc	r31, r27
    10ee:	ee 59       	subi	r30, 0x9E	; 158
    10f0:	fc 4f       	sbci	r31, 0xFC	; 252
    10f2:	13 82       	std	Z+3, r1	; 0x03
    10f4:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    10f6:	fd 01       	movw	r30, r26
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	ee 0f       	add	r30, r30
    1102:	ff 1f       	adc	r31, r31
    1104:	ea 0f       	add	r30, r26
    1106:	fb 1f       	adc	r31, r27
    1108:	ee 59       	subi	r30, 0x9E	; 158
    110a:	fc 4f       	sbci	r31, 0xFC	; 252
    110c:	55 83       	std	Z+5, r21	; 0x05
    110e:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1110:	37 83       	std	Z+7, r19	; 0x07
    1112:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    1114:	20 91 3f 03 	lds	r18, 0x033F	; 0x80033f <_timer_tick>
    1118:	30 91 40 03 	lds	r19, 0x0340	; 0x800340 <_timer_tick+0x1>
    111c:	82 0f       	add	r24, r18
    111e:	93 1f       	adc	r25, r19
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
			_timer[i].state = READY;
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1128:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    112a:	8a 2f       	mov	r24, r26
    112c:	9b 2f       	mov	r25, r27
    112e:	07 c0       	rjmp	.+14     	; 0x113e <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1134:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1136:	f8 94       	cli
		{
			if (periodic != 0) 
    1138:	01 2b       	or	r16, r17
    113a:	11 f6       	brne	.-124    	; 0x10c0 <TIMER_Create+0x3a>
    113c:	cf cf       	rjmp	.-98     	; 0x10dc <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1148:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    114c:	83 e3       	ldi	r24, 0x33	; 51
    114e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1152:	e9 ec       	ldi	r30, 0xC9	; 201
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	88 61       	ori	r24, 0x18	; 24
    115a:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    115c:	ea ec       	ldi	r30, 0xCA	; 202
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	86 60       	ori	r24, 0x06	; 6
    1164:	80 83       	st	Z, r24
    1166:	08 95       	ret

00001168 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    1168:	e8 ec       	ldi	r30, 0xC8	; 200
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	90 81       	ld	r25, Z
    116e:	95 ff       	sbrs	r25, 5
    1170:	fd cf       	rjmp	.-6      	; 0x116c <UART_SendChar+0x4>
	UDR1 = c;
    1172:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1176:	08 95       	ret

00001178 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    117e:	88 81       	ld	r24, Y
    1180:	88 23       	and	r24, r24
    1182:	29 f0       	breq	.+10     	; 0x118e <UART_SendString+0x16>
    1184:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1186:	f0 df       	rcall	.-32     	; 0x1168 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1188:	89 91       	ld	r24, Y+
    118a:	81 11       	cpse	r24, r1
    118c:	fc cf       	rjmp	.-8      	; 0x1186 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <malloc>:
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	91 05       	cpc	r25, r1
    11a0:	10 f4       	brcc	.+4      	; 0x11a6 <malloc+0x12>
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	e0 91 bb 03 	lds	r30, 0x03BB	; 0x8003bb <__flp>
    11aa:	f0 91 bc 03 	lds	r31, 0x03BC	; 0x8003bc <__flp+0x1>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	30 97       	sbiw	r30, 0x00	; 0
    11b8:	19 f1       	breq	.+70     	; 0x1200 <malloc+0x6c>
    11ba:	40 81       	ld	r20, Z
    11bc:	51 81       	ldd	r21, Z+1	; 0x01
    11be:	02 81       	ldd	r16, Z+2	; 0x02
    11c0:	13 81       	ldd	r17, Z+3	; 0x03
    11c2:	48 17       	cp	r20, r24
    11c4:	59 07       	cpc	r21, r25
    11c6:	c8 f0       	brcs	.+50     	; 0x11fa <malloc+0x66>
    11c8:	84 17       	cp	r24, r20
    11ca:	95 07       	cpc	r25, r21
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <malloc+0x54>
    11ce:	10 97       	sbiw	r26, 0x00	; 0
    11d0:	31 f0       	breq	.+12     	; 0x11de <malloc+0x4a>
    11d2:	12 96       	adiw	r26, 0x02	; 2
    11d4:	0c 93       	st	X, r16
    11d6:	12 97       	sbiw	r26, 0x02	; 2
    11d8:	13 96       	adiw	r26, 0x03	; 3
    11da:	1c 93       	st	X, r17
    11dc:	27 c0       	rjmp	.+78     	; 0x122c <malloc+0x98>
    11de:	00 93 bb 03 	sts	0x03BB, r16	; 0x8003bb <__flp>
    11e2:	10 93 bc 03 	sts	0x03BC, r17	; 0x8003bc <__flp+0x1>
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <malloc+0x98>
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <malloc+0x60>
    11ee:	42 17       	cp	r20, r18
    11f0:	53 07       	cpc	r21, r19
    11f2:	18 f4       	brcc	.+6      	; 0x11fa <malloc+0x66>
    11f4:	9a 01       	movw	r18, r20
    11f6:	bd 01       	movw	r22, r26
    11f8:	ef 01       	movw	r28, r30
    11fa:	df 01       	movw	r26, r30
    11fc:	f8 01       	movw	r30, r16
    11fe:	db cf       	rjmp	.-74     	; 0x11b6 <malloc+0x22>
    1200:	21 15       	cp	r18, r1
    1202:	31 05       	cpc	r19, r1
    1204:	f9 f0       	breq	.+62     	; 0x1244 <malloc+0xb0>
    1206:	28 1b       	sub	r18, r24
    1208:	39 0b       	sbc	r19, r25
    120a:	24 30       	cpi	r18, 0x04	; 4
    120c:	31 05       	cpc	r19, r1
    120e:	80 f4       	brcc	.+32     	; 0x1230 <malloc+0x9c>
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	61 15       	cp	r22, r1
    1216:	71 05       	cpc	r23, r1
    1218:	21 f0       	breq	.+8      	; 0x1222 <malloc+0x8e>
    121a:	fb 01       	movw	r30, r22
    121c:	93 83       	std	Z+3, r25	; 0x03
    121e:	82 83       	std	Z+2, r24	; 0x02
    1220:	04 c0       	rjmp	.+8      	; 0x122a <malloc+0x96>
    1222:	90 93 bc 03 	sts	0x03BC, r25	; 0x8003bc <__flp+0x1>
    1226:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <__flp>
    122a:	fe 01       	movw	r30, r28
    122c:	32 96       	adiw	r30, 0x02	; 2
    122e:	44 c0       	rjmp	.+136    	; 0x12b8 <malloc+0x124>
    1230:	fe 01       	movw	r30, r28
    1232:	e2 0f       	add	r30, r18
    1234:	f3 1f       	adc	r31, r19
    1236:	81 93       	st	Z+, r24
    1238:	91 93       	st	Z+, r25
    123a:	22 50       	subi	r18, 0x02	; 2
    123c:	31 09       	sbc	r19, r1
    123e:	39 83       	std	Y+1, r19	; 0x01
    1240:	28 83       	st	Y, r18
    1242:	3a c0       	rjmp	.+116    	; 0x12b8 <malloc+0x124>
    1244:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <__brkval>
    1248:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <__brkval+0x1>
    124c:	23 2b       	or	r18, r19
    124e:	41 f4       	brne	.+16     	; 0x1260 <malloc+0xcc>
    1250:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1254:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1258:	30 93 ba 03 	sts	0x03BA, r19	; 0x8003ba <__brkval+0x1>
    125c:	20 93 b9 03 	sts	0x03B9, r18	; 0x8003b9 <__brkval>
    1260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1264:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1268:	21 15       	cp	r18, r1
    126a:	31 05       	cpc	r19, r1
    126c:	41 f4       	brne	.+16     	; 0x127e <malloc+0xea>
    126e:	2d b7       	in	r18, 0x3d	; 61
    1270:	3e b7       	in	r19, 0x3e	; 62
    1272:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1276:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    127a:	24 1b       	sub	r18, r20
    127c:	35 0b       	sbc	r19, r21
    127e:	e0 91 b9 03 	lds	r30, 0x03B9	; 0x8003b9 <__brkval>
    1282:	f0 91 ba 03 	lds	r31, 0x03BA	; 0x8003ba <__brkval+0x1>
    1286:	e2 17       	cp	r30, r18
    1288:	f3 07       	cpc	r31, r19
    128a:	a0 f4       	brcc	.+40     	; 0x12b4 <malloc+0x120>
    128c:	2e 1b       	sub	r18, r30
    128e:	3f 0b       	sbc	r19, r31
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	78 f0       	brcs	.+30     	; 0x12b4 <malloc+0x120>
    1296:	ac 01       	movw	r20, r24
    1298:	4e 5f       	subi	r20, 0xFE	; 254
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	24 17       	cp	r18, r20
    129e:	35 07       	cpc	r19, r21
    12a0:	48 f0       	brcs	.+18     	; 0x12b4 <malloc+0x120>
    12a2:	4e 0f       	add	r20, r30
    12a4:	5f 1f       	adc	r21, r31
    12a6:	50 93 ba 03 	sts	0x03BA, r21	; 0x8003ba <__brkval+0x1>
    12aa:	40 93 b9 03 	sts	0x03B9, r20	; 0x8003b9 <__brkval>
    12ae:	81 93       	st	Z+, r24
    12b0:	91 93       	st	Z+, r25
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <malloc+0x124>
    12b4:	e0 e0       	ldi	r30, 0x00	; 0
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	cf 01       	movw	r24, r30
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <free>:
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	09 f4       	brne	.+2      	; 0x12ce <free+0xa>
    12cc:	81 c0       	rjmp	.+258    	; 0x13d0 <free+0x10c>
    12ce:	fc 01       	movw	r30, r24
    12d0:	32 97       	sbiw	r30, 0x02	; 2
    12d2:	13 82       	std	Z+3, r1	; 0x03
    12d4:	12 82       	std	Z+2, r1	; 0x02
    12d6:	a0 91 bb 03 	lds	r26, 0x03BB	; 0x8003bb <__flp>
    12da:	b0 91 bc 03 	lds	r27, 0x03BC	; 0x8003bc <__flp+0x1>
    12de:	10 97       	sbiw	r26, 0x00	; 0
    12e0:	81 f4       	brne	.+32     	; 0x1302 <free+0x3e>
    12e2:	20 81       	ld	r18, Z
    12e4:	31 81       	ldd	r19, Z+1	; 0x01
    12e6:	82 0f       	add	r24, r18
    12e8:	93 1f       	adc	r25, r19
    12ea:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <__brkval>
    12ee:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <__brkval+0x1>
    12f2:	28 17       	cp	r18, r24
    12f4:	39 07       	cpc	r19, r25
    12f6:	51 f5       	brne	.+84     	; 0x134c <free+0x88>
    12f8:	f0 93 ba 03 	sts	0x03BA, r31	; 0x8003ba <__brkval+0x1>
    12fc:	e0 93 b9 03 	sts	0x03B9, r30	; 0x8003b9 <__brkval>
    1300:	67 c0       	rjmp	.+206    	; 0x13d0 <free+0x10c>
    1302:	ed 01       	movw	r28, r26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	ce 17       	cp	r28, r30
    130a:	df 07       	cpc	r29, r31
    130c:	40 f4       	brcc	.+16     	; 0x131e <free+0x5a>
    130e:	4a 81       	ldd	r20, Y+2	; 0x02
    1310:	5b 81       	ldd	r21, Y+3	; 0x03
    1312:	9e 01       	movw	r18, r28
    1314:	41 15       	cp	r20, r1
    1316:	51 05       	cpc	r21, r1
    1318:	f1 f0       	breq	.+60     	; 0x1356 <free+0x92>
    131a:	ea 01       	movw	r28, r20
    131c:	f5 cf       	rjmp	.-22     	; 0x1308 <free+0x44>
    131e:	d3 83       	std	Z+3, r29	; 0x03
    1320:	c2 83       	std	Z+2, r28	; 0x02
    1322:	40 81       	ld	r20, Z
    1324:	51 81       	ldd	r21, Z+1	; 0x01
    1326:	84 0f       	add	r24, r20
    1328:	95 1f       	adc	r25, r21
    132a:	c8 17       	cp	r28, r24
    132c:	d9 07       	cpc	r29, r25
    132e:	59 f4       	brne	.+22     	; 0x1346 <free+0x82>
    1330:	88 81       	ld	r24, Y
    1332:	99 81       	ldd	r25, Y+1	; 0x01
    1334:	84 0f       	add	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	02 96       	adiw	r24, 0x02	; 2
    133a:	91 83       	std	Z+1, r25	; 0x01
    133c:	80 83       	st	Z, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	93 83       	std	Z+3, r25	; 0x03
    1344:	82 83       	std	Z+2, r24	; 0x02
    1346:	21 15       	cp	r18, r1
    1348:	31 05       	cpc	r19, r1
    134a:	29 f4       	brne	.+10     	; 0x1356 <free+0x92>
    134c:	f0 93 bc 03 	sts	0x03BC, r31	; 0x8003bc <__flp+0x1>
    1350:	e0 93 bb 03 	sts	0x03BB, r30	; 0x8003bb <__flp>
    1354:	3d c0       	rjmp	.+122    	; 0x13d0 <free+0x10c>
    1356:	e9 01       	movw	r28, r18
    1358:	fb 83       	std	Y+3, r31	; 0x03
    135a:	ea 83       	std	Y+2, r30	; 0x02
    135c:	49 91       	ld	r20, Y+
    135e:	59 91       	ld	r21, Y+
    1360:	c4 0f       	add	r28, r20
    1362:	d5 1f       	adc	r29, r21
    1364:	ec 17       	cp	r30, r28
    1366:	fd 07       	cpc	r31, r29
    1368:	61 f4       	brne	.+24     	; 0x1382 <free+0xbe>
    136a:	80 81       	ld	r24, Z
    136c:	91 81       	ldd	r25, Z+1	; 0x01
    136e:	84 0f       	add	r24, r20
    1370:	95 1f       	adc	r25, r21
    1372:	02 96       	adiw	r24, 0x02	; 2
    1374:	e9 01       	movw	r28, r18
    1376:	99 83       	std	Y+1, r25	; 0x01
    1378:	88 83       	st	Y, r24
    137a:	82 81       	ldd	r24, Z+2	; 0x02
    137c:	93 81       	ldd	r25, Z+3	; 0x03
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	e0 e0       	ldi	r30, 0x00	; 0
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	8d 91       	ld	r24, X+
    138a:	9c 91       	ld	r25, X
    138c:	13 97       	sbiw	r26, 0x03	; 3
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	19 f0       	breq	.+6      	; 0x1398 <free+0xd4>
    1392:	fd 01       	movw	r30, r26
    1394:	dc 01       	movw	r26, r24
    1396:	f7 cf       	rjmp	.-18     	; 0x1386 <free+0xc2>
    1398:	8d 91       	ld	r24, X+
    139a:	9c 91       	ld	r25, X
    139c:	11 97       	sbiw	r26, 0x01	; 1
    139e:	9d 01       	movw	r18, r26
    13a0:	2e 5f       	subi	r18, 0xFE	; 254
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <__brkval>
    13ac:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <__brkval+0x1>
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	69 f4       	brne	.+26     	; 0x13d0 <free+0x10c>
    13b6:	30 97       	sbiw	r30, 0x00	; 0
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <free+0x100>
    13ba:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <__flp+0x1>
    13be:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <__flp>
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <free+0x104>
    13c4:	13 82       	std	Z+3, r1	; 0x03
    13c6:	12 82       	std	Z+2, r1	; 0x02
    13c8:	b0 93 ba 03 	sts	0x03BA, r27	; 0x8003ba <__brkval+0x1>
    13cc:	a0 93 b9 03 	sts	0x03B9, r26	; 0x8003b9 <__brkval>
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <sprintf>:
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	2e 97       	sbiw	r28, 0x0e	; 14
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	0d 89       	ldd	r16, Y+21	; 0x15
    13f0:	1e 89       	ldd	r17, Y+22	; 0x16
    13f2:	86 e0       	ldi	r24, 0x06	; 6
    13f4:	8c 83       	std	Y+4, r24	; 0x04
    13f6:	1a 83       	std	Y+2, r17	; 0x02
    13f8:	09 83       	std	Y+1, r16	; 0x01
    13fa:	8f ef       	ldi	r24, 0xFF	; 255
    13fc:	9f e7       	ldi	r25, 0x7F	; 127
    13fe:	9e 83       	std	Y+6, r25	; 0x06
    1400:	8d 83       	std	Y+5, r24	; 0x05
    1402:	ae 01       	movw	r20, r28
    1404:	47 5e       	subi	r20, 0xE7	; 231
    1406:	5f 4f       	sbci	r21, 0xFF	; 255
    1408:	6f 89       	ldd	r22, Y+23	; 0x17
    140a:	78 8d       	ldd	r23, Y+24	; 0x18
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	10 d0       	rcall	.+32     	; 0x1432 <vfprintf>
    1412:	ef 81       	ldd	r30, Y+7	; 0x07
    1414:	f8 85       	ldd	r31, Y+8	; 0x08
    1416:	e0 0f       	add	r30, r16
    1418:	f1 1f       	adc	r31, r17
    141a:	10 82       	st	Z, r1
    141c:	2e 96       	adiw	r28, 0x0e	; 14
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	08 95       	ret

00001432 <vfprintf>:
    1432:	2f 92       	push	r2
    1434:	3f 92       	push	r3
    1436:	4f 92       	push	r4
    1438:	5f 92       	push	r5
    143a:	6f 92       	push	r6
    143c:	7f 92       	push	r7
    143e:	8f 92       	push	r8
    1440:	9f 92       	push	r9
    1442:	af 92       	push	r10
    1444:	bf 92       	push	r11
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	2b 97       	sbiw	r28, 0x0b	; 11
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	6c 01       	movw	r12, r24
    1468:	7b 01       	movw	r14, r22
    146a:	8a 01       	movw	r16, r20
    146c:	fc 01       	movw	r30, r24
    146e:	17 82       	std	Z+7, r1	; 0x07
    1470:	16 82       	std	Z+6, r1	; 0x06
    1472:	83 81       	ldd	r24, Z+3	; 0x03
    1474:	81 ff       	sbrs	r24, 1
    1476:	bf c1       	rjmp	.+894    	; 0x17f6 <vfprintf+0x3c4>
    1478:	ce 01       	movw	r24, r28
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	3c 01       	movw	r6, r24
    147e:	f6 01       	movw	r30, r12
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	f7 01       	movw	r30, r14
    1484:	93 fd       	sbrc	r25, 3
    1486:	85 91       	lpm	r24, Z+
    1488:	93 ff       	sbrs	r25, 3
    148a:	81 91       	ld	r24, Z+
    148c:	7f 01       	movw	r14, r30
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <vfprintf+0x62>
    1492:	ad c1       	rjmp	.+858    	; 0x17ee <vfprintf+0x3bc>
    1494:	85 32       	cpi	r24, 0x25	; 37
    1496:	39 f4       	brne	.+14     	; 0x14a6 <vfprintf+0x74>
    1498:	93 fd       	sbrc	r25, 3
    149a:	85 91       	lpm	r24, Z+
    149c:	93 ff       	sbrs	r25, 3
    149e:	81 91       	ld	r24, Z+
    14a0:	7f 01       	movw	r14, r30
    14a2:	85 32       	cpi	r24, 0x25	; 37
    14a4:	21 f4       	brne	.+8      	; 0x14ae <vfprintf+0x7c>
    14a6:	b6 01       	movw	r22, r12
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	d6 d1       	rcall	.+940    	; 0x1858 <fputc>
    14ac:	e8 cf       	rjmp	.-48     	; 0x147e <vfprintf+0x4c>
    14ae:	91 2c       	mov	r9, r1
    14b0:	21 2c       	mov	r2, r1
    14b2:	31 2c       	mov	r3, r1
    14b4:	ff e1       	ldi	r31, 0x1F	; 31
    14b6:	f3 15       	cp	r31, r3
    14b8:	d8 f0       	brcs	.+54     	; 0x14f0 <vfprintf+0xbe>
    14ba:	8b 32       	cpi	r24, 0x2B	; 43
    14bc:	79 f0       	breq	.+30     	; 0x14dc <vfprintf+0xaa>
    14be:	38 f4       	brcc	.+14     	; 0x14ce <vfprintf+0x9c>
    14c0:	80 32       	cpi	r24, 0x20	; 32
    14c2:	79 f0       	breq	.+30     	; 0x14e2 <vfprintf+0xb0>
    14c4:	83 32       	cpi	r24, 0x23	; 35
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <vfprintf+0xbe>
    14c8:	23 2d       	mov	r18, r3
    14ca:	20 61       	ori	r18, 0x10	; 16
    14cc:	1d c0       	rjmp	.+58     	; 0x1508 <vfprintf+0xd6>
    14ce:	8d 32       	cpi	r24, 0x2D	; 45
    14d0:	61 f0       	breq	.+24     	; 0x14ea <vfprintf+0xb8>
    14d2:	80 33       	cpi	r24, 0x30	; 48
    14d4:	69 f4       	brne	.+26     	; 0x14f0 <vfprintf+0xbe>
    14d6:	23 2d       	mov	r18, r3
    14d8:	21 60       	ori	r18, 0x01	; 1
    14da:	16 c0       	rjmp	.+44     	; 0x1508 <vfprintf+0xd6>
    14dc:	83 2d       	mov	r24, r3
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	38 2e       	mov	r3, r24
    14e2:	e3 2d       	mov	r30, r3
    14e4:	e4 60       	ori	r30, 0x04	; 4
    14e6:	3e 2e       	mov	r3, r30
    14e8:	2a c0       	rjmp	.+84     	; 0x153e <vfprintf+0x10c>
    14ea:	f3 2d       	mov	r31, r3
    14ec:	f8 60       	ori	r31, 0x08	; 8
    14ee:	1d c0       	rjmp	.+58     	; 0x152a <vfprintf+0xf8>
    14f0:	37 fc       	sbrc	r3, 7
    14f2:	2d c0       	rjmp	.+90     	; 0x154e <vfprintf+0x11c>
    14f4:	20 ed       	ldi	r18, 0xD0	; 208
    14f6:	28 0f       	add	r18, r24
    14f8:	2a 30       	cpi	r18, 0x0A	; 10
    14fa:	40 f0       	brcs	.+16     	; 0x150c <vfprintf+0xda>
    14fc:	8e 32       	cpi	r24, 0x2E	; 46
    14fe:	b9 f4       	brne	.+46     	; 0x152e <vfprintf+0xfc>
    1500:	36 fc       	sbrc	r3, 6
    1502:	75 c1       	rjmp	.+746    	; 0x17ee <vfprintf+0x3bc>
    1504:	23 2d       	mov	r18, r3
    1506:	20 64       	ori	r18, 0x40	; 64
    1508:	32 2e       	mov	r3, r18
    150a:	19 c0       	rjmp	.+50     	; 0x153e <vfprintf+0x10c>
    150c:	36 fe       	sbrs	r3, 6
    150e:	06 c0       	rjmp	.+12     	; 0x151c <vfprintf+0xea>
    1510:	8a e0       	ldi	r24, 0x0A	; 10
    1512:	98 9e       	mul	r9, r24
    1514:	20 0d       	add	r18, r0
    1516:	11 24       	eor	r1, r1
    1518:	92 2e       	mov	r9, r18
    151a:	11 c0       	rjmp	.+34     	; 0x153e <vfprintf+0x10c>
    151c:	ea e0       	ldi	r30, 0x0A	; 10
    151e:	2e 9e       	mul	r2, r30
    1520:	20 0d       	add	r18, r0
    1522:	11 24       	eor	r1, r1
    1524:	22 2e       	mov	r2, r18
    1526:	f3 2d       	mov	r31, r3
    1528:	f0 62       	ori	r31, 0x20	; 32
    152a:	3f 2e       	mov	r3, r31
    152c:	08 c0       	rjmp	.+16     	; 0x153e <vfprintf+0x10c>
    152e:	8c 36       	cpi	r24, 0x6C	; 108
    1530:	21 f4       	brne	.+8      	; 0x153a <vfprintf+0x108>
    1532:	83 2d       	mov	r24, r3
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	38 2e       	mov	r3, r24
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x10c>
    153a:	88 36       	cpi	r24, 0x68	; 104
    153c:	41 f4       	brne	.+16     	; 0x154e <vfprintf+0x11c>
    153e:	f7 01       	movw	r30, r14
    1540:	93 fd       	sbrc	r25, 3
    1542:	85 91       	lpm	r24, Z+
    1544:	93 ff       	sbrs	r25, 3
    1546:	81 91       	ld	r24, Z+
    1548:	7f 01       	movw	r14, r30
    154a:	81 11       	cpse	r24, r1
    154c:	b3 cf       	rjmp	.-154    	; 0x14b4 <vfprintf+0x82>
    154e:	98 2f       	mov	r25, r24
    1550:	9f 7d       	andi	r25, 0xDF	; 223
    1552:	95 54       	subi	r25, 0x45	; 69
    1554:	93 30       	cpi	r25, 0x03	; 3
    1556:	28 f4       	brcc	.+10     	; 0x1562 <vfprintf+0x130>
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	9f e3       	ldi	r25, 0x3F	; 63
    155e:	99 83       	std	Y+1, r25	; 0x01
    1560:	0d c0       	rjmp	.+26     	; 0x157c <vfprintf+0x14a>
    1562:	83 36       	cpi	r24, 0x63	; 99
    1564:	31 f0       	breq	.+12     	; 0x1572 <vfprintf+0x140>
    1566:	83 37       	cpi	r24, 0x73	; 115
    1568:	71 f0       	breq	.+28     	; 0x1586 <vfprintf+0x154>
    156a:	83 35       	cpi	r24, 0x53	; 83
    156c:	09 f0       	breq	.+2      	; 0x1570 <vfprintf+0x13e>
    156e:	55 c0       	rjmp	.+170    	; 0x161a <vfprintf+0x1e8>
    1570:	20 c0       	rjmp	.+64     	; 0x15b2 <vfprintf+0x180>
    1572:	f8 01       	movw	r30, r16
    1574:	80 81       	ld	r24, Z
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	0e 5f       	subi	r16, 0xFE	; 254
    157a:	1f 4f       	sbci	r17, 0xFF	; 255
    157c:	88 24       	eor	r8, r8
    157e:	83 94       	inc	r8
    1580:	91 2c       	mov	r9, r1
    1582:	53 01       	movw	r10, r6
    1584:	12 c0       	rjmp	.+36     	; 0x15aa <vfprintf+0x178>
    1586:	28 01       	movw	r4, r16
    1588:	f2 e0       	ldi	r31, 0x02	; 2
    158a:	4f 0e       	add	r4, r31
    158c:	51 1c       	adc	r5, r1
    158e:	f8 01       	movw	r30, r16
    1590:	a0 80       	ld	r10, Z
    1592:	b1 80       	ldd	r11, Z+1	; 0x01
    1594:	36 fe       	sbrs	r3, 6
    1596:	03 c0       	rjmp	.+6      	; 0x159e <vfprintf+0x16c>
    1598:	69 2d       	mov	r22, r9
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x170>
    159e:	6f ef       	ldi	r22, 0xFF	; 255
    15a0:	7f ef       	ldi	r23, 0xFF	; 255
    15a2:	c5 01       	movw	r24, r10
    15a4:	4e d1       	rcall	.+668    	; 0x1842 <strnlen>
    15a6:	4c 01       	movw	r8, r24
    15a8:	82 01       	movw	r16, r4
    15aa:	f3 2d       	mov	r31, r3
    15ac:	ff 77       	andi	r31, 0x7F	; 127
    15ae:	3f 2e       	mov	r3, r31
    15b0:	15 c0       	rjmp	.+42     	; 0x15dc <vfprintf+0x1aa>
    15b2:	28 01       	movw	r4, r16
    15b4:	22 e0       	ldi	r18, 0x02	; 2
    15b6:	42 0e       	add	r4, r18
    15b8:	51 1c       	adc	r5, r1
    15ba:	f8 01       	movw	r30, r16
    15bc:	a0 80       	ld	r10, Z
    15be:	b1 80       	ldd	r11, Z+1	; 0x01
    15c0:	36 fe       	sbrs	r3, 6
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <vfprintf+0x198>
    15c4:	69 2d       	mov	r22, r9
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vfprintf+0x19c>
    15ca:	6f ef       	ldi	r22, 0xFF	; 255
    15cc:	7f ef       	ldi	r23, 0xFF	; 255
    15ce:	c5 01       	movw	r24, r10
    15d0:	2d d1       	rcall	.+602    	; 0x182c <strnlen_P>
    15d2:	4c 01       	movw	r8, r24
    15d4:	f3 2d       	mov	r31, r3
    15d6:	f0 68       	ori	r31, 0x80	; 128
    15d8:	3f 2e       	mov	r3, r31
    15da:	82 01       	movw	r16, r4
    15dc:	33 fc       	sbrc	r3, 3
    15de:	19 c0       	rjmp	.+50     	; 0x1612 <vfprintf+0x1e0>
    15e0:	82 2d       	mov	r24, r2
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 16       	cp	r8, r24
    15e6:	99 06       	cpc	r9, r25
    15e8:	a0 f4       	brcc	.+40     	; 0x1612 <vfprintf+0x1e0>
    15ea:	b6 01       	movw	r22, r12
    15ec:	80 e2       	ldi	r24, 0x20	; 32
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	33 d1       	rcall	.+614    	; 0x1858 <fputc>
    15f2:	2a 94       	dec	r2
    15f4:	f5 cf       	rjmp	.-22     	; 0x15e0 <vfprintf+0x1ae>
    15f6:	f5 01       	movw	r30, r10
    15f8:	37 fc       	sbrc	r3, 7
    15fa:	85 91       	lpm	r24, Z+
    15fc:	37 fe       	sbrs	r3, 7
    15fe:	81 91       	ld	r24, Z+
    1600:	5f 01       	movw	r10, r30
    1602:	b6 01       	movw	r22, r12
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	28 d1       	rcall	.+592    	; 0x1858 <fputc>
    1608:	21 10       	cpse	r2, r1
    160a:	2a 94       	dec	r2
    160c:	21 e0       	ldi	r18, 0x01	; 1
    160e:	82 1a       	sub	r8, r18
    1610:	91 08       	sbc	r9, r1
    1612:	81 14       	cp	r8, r1
    1614:	91 04       	cpc	r9, r1
    1616:	79 f7       	brne	.-34     	; 0x15f6 <vfprintf+0x1c4>
    1618:	e1 c0       	rjmp	.+450    	; 0x17dc <vfprintf+0x3aa>
    161a:	84 36       	cpi	r24, 0x64	; 100
    161c:	11 f0       	breq	.+4      	; 0x1622 <vfprintf+0x1f0>
    161e:	89 36       	cpi	r24, 0x69	; 105
    1620:	39 f5       	brne	.+78     	; 0x1670 <vfprintf+0x23e>
    1622:	f8 01       	movw	r30, r16
    1624:	37 fe       	sbrs	r3, 7
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <vfprintf+0x204>
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	0c 5f       	subi	r16, 0xFC	; 252
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <vfprintf+0x214>
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	07 2e       	mov	r0, r23
    163c:	00 0c       	add	r0, r0
    163e:	88 0b       	sbc	r24, r24
    1640:	99 0b       	sbc	r25, r25
    1642:	0e 5f       	subi	r16, 0xFE	; 254
    1644:	1f 4f       	sbci	r17, 0xFF	; 255
    1646:	f3 2d       	mov	r31, r3
    1648:	ff 76       	andi	r31, 0x6F	; 111
    164a:	3f 2e       	mov	r3, r31
    164c:	97 ff       	sbrs	r25, 7
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <vfprintf+0x230>
    1650:	90 95       	com	r25
    1652:	80 95       	com	r24
    1654:	70 95       	com	r23
    1656:	61 95       	neg	r22
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	8f 4f       	sbci	r24, 0xFF	; 255
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	f0 68       	ori	r31, 0x80	; 128
    1660:	3f 2e       	mov	r3, r31
    1662:	2a e0       	ldi	r18, 0x0A	; 10
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	a3 01       	movw	r20, r6
    1668:	33 d1       	rcall	.+614    	; 0x18d0 <__ultoa_invert>
    166a:	88 2e       	mov	r8, r24
    166c:	86 18       	sub	r8, r6
    166e:	44 c0       	rjmp	.+136    	; 0x16f8 <vfprintf+0x2c6>
    1670:	85 37       	cpi	r24, 0x75	; 117
    1672:	31 f4       	brne	.+12     	; 0x1680 <vfprintf+0x24e>
    1674:	23 2d       	mov	r18, r3
    1676:	2f 7e       	andi	r18, 0xEF	; 239
    1678:	b2 2e       	mov	r11, r18
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	25 c0       	rjmp	.+74     	; 0x16ca <vfprintf+0x298>
    1680:	93 2d       	mov	r25, r3
    1682:	99 7f       	andi	r25, 0xF9	; 249
    1684:	b9 2e       	mov	r11, r25
    1686:	8f 36       	cpi	r24, 0x6F	; 111
    1688:	c1 f0       	breq	.+48     	; 0x16ba <vfprintf+0x288>
    168a:	18 f4       	brcc	.+6      	; 0x1692 <vfprintf+0x260>
    168c:	88 35       	cpi	r24, 0x58	; 88
    168e:	79 f0       	breq	.+30     	; 0x16ae <vfprintf+0x27c>
    1690:	ae c0       	rjmp	.+348    	; 0x17ee <vfprintf+0x3bc>
    1692:	80 37       	cpi	r24, 0x70	; 112
    1694:	19 f0       	breq	.+6      	; 0x169c <vfprintf+0x26a>
    1696:	88 37       	cpi	r24, 0x78	; 120
    1698:	21 f0       	breq	.+8      	; 0x16a2 <vfprintf+0x270>
    169a:	a9 c0       	rjmp	.+338    	; 0x17ee <vfprintf+0x3bc>
    169c:	e9 2f       	mov	r30, r25
    169e:	e0 61       	ori	r30, 0x10	; 16
    16a0:	be 2e       	mov	r11, r30
    16a2:	b4 fe       	sbrs	r11, 4
    16a4:	0d c0       	rjmp	.+26     	; 0x16c0 <vfprintf+0x28e>
    16a6:	fb 2d       	mov	r31, r11
    16a8:	f4 60       	ori	r31, 0x04	; 4
    16aa:	bf 2e       	mov	r11, r31
    16ac:	09 c0       	rjmp	.+18     	; 0x16c0 <vfprintf+0x28e>
    16ae:	34 fe       	sbrs	r3, 4
    16b0:	0a c0       	rjmp	.+20     	; 0x16c6 <vfprintf+0x294>
    16b2:	29 2f       	mov	r18, r25
    16b4:	26 60       	ori	r18, 0x06	; 6
    16b6:	b2 2e       	mov	r11, r18
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <vfprintf+0x294>
    16ba:	28 e0       	ldi	r18, 0x08	; 8
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <vfprintf+0x298>
    16c0:	20 e1       	ldi	r18, 0x10	; 16
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <vfprintf+0x298>
    16c6:	20 e1       	ldi	r18, 0x10	; 16
    16c8:	32 e0       	ldi	r19, 0x02	; 2
    16ca:	f8 01       	movw	r30, r16
    16cc:	b7 fe       	sbrs	r11, 7
    16ce:	07 c0       	rjmp	.+14     	; 0x16de <vfprintf+0x2ac>
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	0c 5f       	subi	r16, 0xFC	; 252
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <vfprintf+0x2b8>
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 5f       	subi	r16, 0xFE	; 254
    16e8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ea:	a3 01       	movw	r20, r6
    16ec:	f1 d0       	rcall	.+482    	; 0x18d0 <__ultoa_invert>
    16ee:	88 2e       	mov	r8, r24
    16f0:	86 18       	sub	r8, r6
    16f2:	fb 2d       	mov	r31, r11
    16f4:	ff 77       	andi	r31, 0x7F	; 127
    16f6:	3f 2e       	mov	r3, r31
    16f8:	36 fe       	sbrs	r3, 6
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <vfprintf+0x2e4>
    16fc:	23 2d       	mov	r18, r3
    16fe:	2e 7f       	andi	r18, 0xFE	; 254
    1700:	a2 2e       	mov	r10, r18
    1702:	89 14       	cp	r8, r9
    1704:	58 f4       	brcc	.+22     	; 0x171c <vfprintf+0x2ea>
    1706:	34 fe       	sbrs	r3, 4
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <vfprintf+0x2ee>
    170a:	32 fc       	sbrc	r3, 2
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <vfprintf+0x2ee>
    170e:	83 2d       	mov	r24, r3
    1710:	8e 7e       	andi	r24, 0xEE	; 238
    1712:	a8 2e       	mov	r10, r24
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <vfprintf+0x2ee>
    1716:	b8 2c       	mov	r11, r8
    1718:	a3 2c       	mov	r10, r3
    171a:	03 c0       	rjmp	.+6      	; 0x1722 <vfprintf+0x2f0>
    171c:	b8 2c       	mov	r11, r8
    171e:	01 c0       	rjmp	.+2      	; 0x1722 <vfprintf+0x2f0>
    1720:	b9 2c       	mov	r11, r9
    1722:	a4 fe       	sbrs	r10, 4
    1724:	0f c0       	rjmp	.+30     	; 0x1744 <vfprintf+0x312>
    1726:	fe 01       	movw	r30, r28
    1728:	e8 0d       	add	r30, r8
    172a:	f1 1d       	adc	r31, r1
    172c:	80 81       	ld	r24, Z
    172e:	80 33       	cpi	r24, 0x30	; 48
    1730:	21 f4       	brne	.+8      	; 0x173a <vfprintf+0x308>
    1732:	9a 2d       	mov	r25, r10
    1734:	99 7e       	andi	r25, 0xE9	; 233
    1736:	a9 2e       	mov	r10, r25
    1738:	09 c0       	rjmp	.+18     	; 0x174c <vfprintf+0x31a>
    173a:	a2 fe       	sbrs	r10, 2
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x318>
    173e:	b3 94       	inc	r11
    1740:	b3 94       	inc	r11
    1742:	04 c0       	rjmp	.+8      	; 0x174c <vfprintf+0x31a>
    1744:	8a 2d       	mov	r24, r10
    1746:	86 78       	andi	r24, 0x86	; 134
    1748:	09 f0       	breq	.+2      	; 0x174c <vfprintf+0x31a>
    174a:	b3 94       	inc	r11
    174c:	a3 fc       	sbrc	r10, 3
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <vfprintf+0x33e>
    1750:	a0 fe       	sbrs	r10, 0
    1752:	06 c0       	rjmp	.+12     	; 0x1760 <vfprintf+0x32e>
    1754:	b2 14       	cp	r11, r2
    1756:	80 f4       	brcc	.+32     	; 0x1778 <vfprintf+0x346>
    1758:	28 0c       	add	r2, r8
    175a:	92 2c       	mov	r9, r2
    175c:	9b 18       	sub	r9, r11
    175e:	0d c0       	rjmp	.+26     	; 0x177a <vfprintf+0x348>
    1760:	b2 14       	cp	r11, r2
    1762:	58 f4       	brcc	.+22     	; 0x177a <vfprintf+0x348>
    1764:	b6 01       	movw	r22, r12
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	76 d0       	rcall	.+236    	; 0x1858 <fputc>
    176c:	b3 94       	inc	r11
    176e:	f8 cf       	rjmp	.-16     	; 0x1760 <vfprintf+0x32e>
    1770:	b2 14       	cp	r11, r2
    1772:	18 f4       	brcc	.+6      	; 0x177a <vfprintf+0x348>
    1774:	2b 18       	sub	r2, r11
    1776:	02 c0       	rjmp	.+4      	; 0x177c <vfprintf+0x34a>
    1778:	98 2c       	mov	r9, r8
    177a:	21 2c       	mov	r2, r1
    177c:	a4 fe       	sbrs	r10, 4
    177e:	0f c0       	rjmp	.+30     	; 0x179e <vfprintf+0x36c>
    1780:	b6 01       	movw	r22, r12
    1782:	80 e3       	ldi	r24, 0x30	; 48
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	68 d0       	rcall	.+208    	; 0x1858 <fputc>
    1788:	a2 fe       	sbrs	r10, 2
    178a:	16 c0       	rjmp	.+44     	; 0x17b8 <vfprintf+0x386>
    178c:	a1 fc       	sbrc	r10, 1
    178e:	03 c0       	rjmp	.+6      	; 0x1796 <vfprintf+0x364>
    1790:	88 e7       	ldi	r24, 0x78	; 120
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x368>
    1796:	88 e5       	ldi	r24, 0x58	; 88
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b6 01       	movw	r22, r12
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <vfprintf+0x384>
    179e:	8a 2d       	mov	r24, r10
    17a0:	86 78       	andi	r24, 0x86	; 134
    17a2:	51 f0       	breq	.+20     	; 0x17b8 <vfprintf+0x386>
    17a4:	a1 fe       	sbrs	r10, 1
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0x37a>
    17a8:	8b e2       	ldi	r24, 0x2B	; 43
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <vfprintf+0x37c>
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	a7 fc       	sbrc	r10, 7
    17b0:	8d e2       	ldi	r24, 0x2D	; 45
    17b2:	b6 01       	movw	r22, r12
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	50 d0       	rcall	.+160    	; 0x1858 <fputc>
    17b8:	89 14       	cp	r8, r9
    17ba:	30 f4       	brcc	.+12     	; 0x17c8 <vfprintf+0x396>
    17bc:	b6 01       	movw	r22, r12
    17be:	80 e3       	ldi	r24, 0x30	; 48
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	4a d0       	rcall	.+148    	; 0x1858 <fputc>
    17c4:	9a 94       	dec	r9
    17c6:	f8 cf       	rjmp	.-16     	; 0x17b8 <vfprintf+0x386>
    17c8:	8a 94       	dec	r8
    17ca:	f3 01       	movw	r30, r6
    17cc:	e8 0d       	add	r30, r8
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 81       	ld	r24, Z
    17d2:	b6 01       	movw	r22, r12
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	40 d0       	rcall	.+128    	; 0x1858 <fputc>
    17d8:	81 10       	cpse	r8, r1
    17da:	f6 cf       	rjmp	.-20     	; 0x17c8 <vfprintf+0x396>
    17dc:	22 20       	and	r2, r2
    17de:	09 f4       	brne	.+2      	; 0x17e2 <vfprintf+0x3b0>
    17e0:	4e ce       	rjmp	.-868    	; 0x147e <vfprintf+0x4c>
    17e2:	b6 01       	movw	r22, r12
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	37 d0       	rcall	.+110    	; 0x1858 <fputc>
    17ea:	2a 94       	dec	r2
    17ec:	f7 cf       	rjmp	.-18     	; 0x17dc <vfprintf+0x3aa>
    17ee:	f6 01       	movw	r30, r12
    17f0:	86 81       	ldd	r24, Z+6	; 0x06
    17f2:	97 81       	ldd	r25, Z+7	; 0x07
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x3c8>
    17f6:	8f ef       	ldi	r24, 0xFF	; 255
    17f8:	9f ef       	ldi	r25, 0xFF	; 255
    17fa:	2b 96       	adiw	r28, 0x0b	; 11
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	7f 90       	pop	r7
    1820:	6f 90       	pop	r6
    1822:	5f 90       	pop	r5
    1824:	4f 90       	pop	r4
    1826:	3f 90       	pop	r3
    1828:	2f 90       	pop	r2
    182a:	08 95       	ret

0000182c <strnlen_P>:
    182c:	fc 01       	movw	r30, r24
    182e:	05 90       	lpm	r0, Z+
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen_P+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <strnlen>:
    1842:	fc 01       	movw	r30, r24
    1844:	61 50       	subi	r22, 0x01	; 1
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	01 90       	ld	r0, Z+
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <fputc>:
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	fb 01       	movw	r30, r22
    1862:	23 81       	ldd	r18, Z+3	; 0x03
    1864:	21 fd       	sbrc	r18, 1
    1866:	03 c0       	rjmp	.+6      	; 0x186e <fputc+0x16>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	9f ef       	ldi	r25, 0xFF	; 255
    186c:	2c c0       	rjmp	.+88     	; 0x18c6 <fputc+0x6e>
    186e:	22 ff       	sbrs	r18, 2
    1870:	16 c0       	rjmp	.+44     	; 0x189e <fputc+0x46>
    1872:	46 81       	ldd	r20, Z+6	; 0x06
    1874:	57 81       	ldd	r21, Z+7	; 0x07
    1876:	24 81       	ldd	r18, Z+4	; 0x04
    1878:	35 81       	ldd	r19, Z+5	; 0x05
    187a:	42 17       	cp	r20, r18
    187c:	53 07       	cpc	r21, r19
    187e:	44 f4       	brge	.+16     	; 0x1890 <fputc+0x38>
    1880:	a0 81       	ld	r26, Z
    1882:	b1 81       	ldd	r27, Z+1	; 0x01
    1884:	9d 01       	movw	r18, r26
    1886:	2f 5f       	subi	r18, 0xFF	; 255
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	31 83       	std	Z+1, r19	; 0x01
    188c:	20 83       	st	Z, r18
    188e:	8c 93       	st	X, r24
    1890:	26 81       	ldd	r18, Z+6	; 0x06
    1892:	37 81       	ldd	r19, Z+7	; 0x07
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	3f 4f       	sbci	r19, 0xFF	; 255
    1898:	37 83       	std	Z+7, r19	; 0x07
    189a:	26 83       	std	Z+6, r18	; 0x06
    189c:	14 c0       	rjmp	.+40     	; 0x18c6 <fputc+0x6e>
    189e:	8b 01       	movw	r16, r22
    18a0:	ec 01       	movw	r28, r24
    18a2:	fb 01       	movw	r30, r22
    18a4:	00 84       	ldd	r0, Z+8	; 0x08
    18a6:	f1 85       	ldd	r31, Z+9	; 0x09
    18a8:	e0 2d       	mov	r30, r0
    18aa:	09 95       	icall
    18ac:	89 2b       	or	r24, r25
    18ae:	e1 f6       	brne	.-72     	; 0x1868 <fputc+0x10>
    18b0:	d8 01       	movw	r26, r16
    18b2:	16 96       	adiw	r26, 0x06	; 6
    18b4:	8d 91       	ld	r24, X+
    18b6:	9c 91       	ld	r25, X
    18b8:	17 97       	sbiw	r26, 0x07	; 7
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	17 96       	adiw	r26, 0x07	; 7
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
    18c2:	16 97       	sbiw	r26, 0x06	; 6
    18c4:	ce 01       	movw	r24, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <__ultoa_invert>:
    18d0:	fa 01       	movw	r30, r20
    18d2:	aa 27       	eor	r26, r26
    18d4:	28 30       	cpi	r18, 0x08	; 8
    18d6:	51 f1       	breq	.+84     	; 0x192c <__ultoa_invert+0x5c>
    18d8:	20 31       	cpi	r18, 0x10	; 16
    18da:	81 f1       	breq	.+96     	; 0x193c <__ultoa_invert+0x6c>
    18dc:	e8 94       	clt
    18de:	6f 93       	push	r22
    18e0:	6e 7f       	andi	r22, 0xFE	; 254
    18e2:	6e 5f       	subi	r22, 0xFE	; 254
    18e4:	7f 4f       	sbci	r23, 0xFF	; 255
    18e6:	8f 4f       	sbci	r24, 0xFF	; 255
    18e8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ea:	af 4f       	sbci	r26, 0xFF	; 255
    18ec:	b1 e0       	ldi	r27, 0x01	; 1
    18ee:	3e d0       	rcall	.+124    	; 0x196c <__ultoa_invert+0x9c>
    18f0:	b4 e0       	ldi	r27, 0x04	; 4
    18f2:	3c d0       	rcall	.+120    	; 0x196c <__ultoa_invert+0x9c>
    18f4:	67 0f       	add	r22, r23
    18f6:	78 1f       	adc	r23, r24
    18f8:	89 1f       	adc	r24, r25
    18fa:	9a 1f       	adc	r25, r26
    18fc:	a1 1d       	adc	r26, r1
    18fe:	68 0f       	add	r22, r24
    1900:	79 1f       	adc	r23, r25
    1902:	8a 1f       	adc	r24, r26
    1904:	91 1d       	adc	r25, r1
    1906:	a1 1d       	adc	r26, r1
    1908:	6a 0f       	add	r22, r26
    190a:	71 1d       	adc	r23, r1
    190c:	81 1d       	adc	r24, r1
    190e:	91 1d       	adc	r25, r1
    1910:	a1 1d       	adc	r26, r1
    1912:	20 d0       	rcall	.+64     	; 0x1954 <__ultoa_invert+0x84>
    1914:	09 f4       	brne	.+2      	; 0x1918 <__ultoa_invert+0x48>
    1916:	68 94       	set
    1918:	3f 91       	pop	r19
    191a:	2a e0       	ldi	r18, 0x0A	; 10
    191c:	26 9f       	mul	r18, r22
    191e:	11 24       	eor	r1, r1
    1920:	30 19       	sub	r19, r0
    1922:	30 5d       	subi	r19, 0xD0	; 208
    1924:	31 93       	st	Z+, r19
    1926:	de f6       	brtc	.-74     	; 0x18de <__ultoa_invert+0xe>
    1928:	cf 01       	movw	r24, r30
    192a:	08 95       	ret
    192c:	46 2f       	mov	r20, r22
    192e:	47 70       	andi	r20, 0x07	; 7
    1930:	40 5d       	subi	r20, 0xD0	; 208
    1932:	41 93       	st	Z+, r20
    1934:	b3 e0       	ldi	r27, 0x03	; 3
    1936:	0f d0       	rcall	.+30     	; 0x1956 <__ultoa_invert+0x86>
    1938:	c9 f7       	brne	.-14     	; 0x192c <__ultoa_invert+0x5c>
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <__ultoa_invert+0x58>
    193c:	46 2f       	mov	r20, r22
    193e:	4f 70       	andi	r20, 0x0F	; 15
    1940:	40 5d       	subi	r20, 0xD0	; 208
    1942:	4a 33       	cpi	r20, 0x3A	; 58
    1944:	18 f0       	brcs	.+6      	; 0x194c <__ultoa_invert+0x7c>
    1946:	49 5d       	subi	r20, 0xD9	; 217
    1948:	31 fd       	sbrc	r19, 1
    194a:	40 52       	subi	r20, 0x20	; 32
    194c:	41 93       	st	Z+, r20
    194e:	02 d0       	rcall	.+4      	; 0x1954 <__ultoa_invert+0x84>
    1950:	a9 f7       	brne	.-22     	; 0x193c <__ultoa_invert+0x6c>
    1952:	ea cf       	rjmp	.-44     	; 0x1928 <__ultoa_invert+0x58>
    1954:	b4 e0       	ldi	r27, 0x04	; 4
    1956:	a6 95       	lsr	r26
    1958:	97 95       	ror	r25
    195a:	87 95       	ror	r24
    195c:	77 95       	ror	r23
    195e:	67 95       	ror	r22
    1960:	ba 95       	dec	r27
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__ultoa_invert+0x86>
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	61 05       	cpc	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	08 95       	ret
    196c:	9b 01       	movw	r18, r22
    196e:	ac 01       	movw	r20, r24
    1970:	0a 2e       	mov	r0, r26
    1972:	06 94       	lsr	r0
    1974:	57 95       	ror	r21
    1976:	47 95       	ror	r20
    1978:	37 95       	ror	r19
    197a:	27 95       	ror	r18
    197c:	ba 95       	dec	r27
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0xa2>
    1980:	62 0f       	add	r22, r18
    1982:	73 1f       	adc	r23, r19
    1984:	84 1f       	adc	r24, r20
    1986:	95 1f       	adc	r25, r21
    1988:	a0 1d       	adc	r26, r0
    198a:	08 95       	ret

0000198c <_exit>:
    198c:	f8 94       	cli

0000198e <__stop_program>:
    198e:	ff cf       	rjmp	.-2      	; 0x198e <__stop_program>
