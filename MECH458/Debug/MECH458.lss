
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000cc  00800100  00001688  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  008001cc  008001cc  000017e8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048fd  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b4e  00000000  00000000  00006491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003755  00000000  00000000  00007fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000072c  00000000  00000000  0000b734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a907  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000145d  00000000  00000000  00016767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  00017bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004d0f  00000000  00000000  00017e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	8c c3       	rjmp	.+1816   	; 0x74e <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	ed c5       	rjmp	.+3034   	; 0xc20 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e8       	ldi	r30, 0x88	; 136
      ac:	f6 e1       	ldi	r31, 0x16	; 22
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ac 3c       	cpi	r26, 0xCC	; 204
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	ac ec       	ldi	r26, 0xCC	; 204
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a7 35       	cpi	r26, 0x57	; 87
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	a8 d2       	rcall	.+1360   	; 0x620 <main>
      d0:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <_exit>

000000d4 <__bad_interrupt>:
      d4:	a9 c2       	rjmp	.+1362   	; 0x628 <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		PORTC ^= 0xFE;
     122:	98 b1       	in	r25, 0x08	; 8
     124:	8e ef       	ldi	r24, 0xFE	; 254
     126:	89 27       	eor	r24, r25
     128:	88 b9       	out	0x08, r24	; 8
		if (g_ADCCount < 10)
     12a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_ADCCount>
     12e:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <g_ADCCount+0x1>
     132:	0a 97       	sbiw	r24, 0x0a	; 10
     134:	d8 f4       	brcc	.+54     	; 0x16c <__vector_29+0x64>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     136:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_ADCCount>
     13a:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <g_ADCCount+0x1>
     13e:	9c 01       	movw	r18, r24
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	30 93 f2 01 	sts	0x01F2, r19	; 0x8001f2 <g_ADCCount+0x1>
     148:	20 93 f1 01 	sts	0x01F1, r18	; 0x8001f1 <g_ADCCount>
     14c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     150:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     154:	88 0f       	add	r24, r24
     156:	99 1f       	adc	r25, r25
     158:	fc 01       	movw	r30, r24
     15a:	e3 52       	subi	r30, 0x23	; 35
     15c:	fe 4f       	sbci	r31, 0xFE	; 254
     15e:	31 83       	std	Z+1, r19	; 0x01
     160:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);
     162:	ea e7       	ldi	r30, 0x7A	; 122
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	80 64       	ori	r24, 0x40	; 64
     16a:	80 83       	st	Z, r24
			 
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     16c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_ADCCount>
     170:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <g_ADCCount+0x1>
     174:	0a 97       	sbiw	r24, 0x0a	; 10
     176:	19 f4       	brne	.+6      	; 0x17e <__vector_29+0x76>
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_timer+0x11>
		PORTC ^= 0xFE;
     17e:	98 b1       	in	r25, 0x08	; 8
     180:	8e ef       	ldi	r24, 0xFE	; 254
     182:	89 27       	eor	r24, r25
     184:	88 b9       	out	0x08, r24	; 8
}
     186:	ff 91       	pop	r31
     188:	ef 91       	pop	r30
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	3f 91       	pop	r19
     190:	2f 91       	pop	r18
     192:	0f 90       	pop	r0
     194:	0b be       	out	0x3b, r0	; 59
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     1a0:	9b b1       	in	r25, 0x0b	; 11
     1a2:	80 ea       	ldi	r24, 0xA0	; 160
     1a4:	89 27       	eor	r24, r25
     1a6:	8b b9       	out	0x0b, r24	; 11
     1a8:	08 95       	ret

000001aa <ADC_Task>:
     1aa:	8f 92       	push	r8
     1ac:	9f 92       	push	r9
     1ae:	af 92       	push	r10
     1b0:	bf 92       	push	r11
     1b2:	cf 92       	push	r12
     1b4:	df 92       	push	r13
     1b6:	ef 92       	push	r14
     1b8:	ff 92       	push	r15
     1ba:	40 e0       	ldi	r20, 0x00	; 0
     1bc:	50 e0       	ldi	r21, 0x00	; 0
     1be:	ba 01       	movw	r22, r20
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	e3 52       	subi	r30, 0x23	; 35
     1cc:	fe 4f       	sbci	r31, 0xFE	; 254
     1ce:	20 81       	ld	r18, Z
     1d0:	31 81       	ldd	r19, Z+1	; 0x01
     1d2:	42 0f       	add	r20, r18
     1d4:	53 1f       	adc	r21, r19
     1d6:	61 1d       	adc	r22, r1
     1d8:	71 1d       	adc	r23, r1
     1da:	01 96       	adiw	r24, 0x01	; 1
     1dc:	8a 30       	cpi	r24, 0x0A	; 10
     1de:	91 05       	cpc	r25, r1
     1e0:	89 f7       	brne	.-30     	; 0x1c4 <ADC_Task+0x1a>
     1e2:	cb 01       	movw	r24, r22
     1e4:	ba 01       	movw	r22, r20
     1e6:	2a e0       	ldi	r18, 0x0A	; 10
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	2c d6       	rcall	.+3160   	; 0xe48 <__udivmodsi4>
     1f0:	69 01       	movw	r12, r18
     1f2:	7a 01       	movw	r14, r20
     1f4:	da 01       	movw	r26, r20
     1f6:	c9 01       	movw	r24, r18
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	a1 09       	sbc	r26, r1
     1fc:	b1 09       	sbc	r27, r1
     1fe:	8f 3c       	cpi	r24, 0xCF	; 207
     200:	97 40       	sbci	r25, 0x07	; 7
     202:	a1 05       	cpc	r26, r1
     204:	b1 05       	cpc	r27, r1
     206:	a0 f4       	brcc	.+40     	; 0x230 <ADC_Task+0x86>
     208:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     20c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     210:	e1 d1       	rcall	.+962    	; 0x5d4 <LL_GetRefl>
     212:	a0 e0       	ldi	r26, 0x00	; 0
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	c8 16       	cp	r12, r24
     218:	d9 06       	cpc	r13, r25
     21a:	ea 06       	cpc	r14, r26
     21c:	fb 06       	cpc	r15, r27
     21e:	40 f4       	brcc	.+16     	; 0x230 <ADC_Task+0x86>
     220:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     224:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	11 f0       	breq	.+4      	; 0x230 <ADC_Task+0x86>
     22c:	b6 01       	movw	r22, r12
     22e:	dd d1       	rcall	.+954    	; 0x5ea <LL_UpdateRefl>
     230:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <g_ADCCount+0x1>
     234:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_ADCCount>
     238:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <_timer+0x11>
     23c:	ea e7       	ldi	r30, 0x7A	; 122
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 64       	ori	r24, 0x40	; 64
     244:	80 83       	st	Z, r24
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	bf 90       	pop	r11
     250:	af 90       	pop	r10
     252:	9f 90       	pop	r9
     254:	8f 90       	pop	r8
     256:	08 95       	ret

00000258 <MAG_Task>:
     258:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <gMotorOn>
     25c:	88 23       	and	r24, r24
     25e:	49 f0       	breq	.+18     	; 0x272 <MAG_Task+0x1a>
     260:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <tick.2495>
     264:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <tick.2495+0x1>
     268:	01 96       	adiw	r24, 0x01	; 1
     26a:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <tick.2495+0x1>
     26e:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <tick.2495>
     272:	64 99       	sbic	0x0c, 4	; 12
     274:	1d c0       	rjmp	.+58     	; 0x2b0 <MAG_Task+0x58>
     276:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <count.2494>
     27a:	8f 5f       	subi	r24, 0xFF	; 255
     27c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <count.2494>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	88 f1       	brcs	.+98     	; 0x2e6 <MAG_Task+0x8e>
     284:	61 e0       	ldi	r22, 0x01	; 1
     286:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     28a:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     28e:	b3 d1       	rcall	.+870    	; 0x5f6 <LL_UpdateMag>
     290:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     294:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     298:	72 d1       	rcall	.+740    	; 0x57e <LL_Next>
     29a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <STAGE1+0x1>
     29e:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <STAGE1>
     2a2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <_timer+0x1a>
     2a6:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <tick.2495+0x1>
     2aa:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <tick.2495>
     2ae:	08 95       	ret
     2b0:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <tick.2495>
     2b4:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <tick.2495+0x1>
     2b8:	06 97       	sbiw	r24, 0x06	; 6
     2ba:	a8 f0       	brcs	.+42     	; 0x2e6 <MAG_Task+0x8e>
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     2c2:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     2c6:	97 d1       	rcall	.+814    	; 0x5f6 <LL_UpdateMag>
     2c8:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     2cc:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     2d0:	56 d1       	rcall	.+684    	; 0x57e <LL_Next>
     2d2:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <STAGE1+0x1>
     2d6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <STAGE1>
     2da:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <_timer+0x1a>
     2de:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <tick.2495+0x1>
     2e2:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <tick.2495>
     2e6:	08 95       	ret

000002e8 <EXIT_Task>:
     2e8:	cf 93       	push	r28
     2ea:	c0 91 4d 02 	lds	r28, 0x024D	; 0x80024d <stepper+0x3>
     2ee:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     2f2:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     2f6:	69 d1       	rcall	.+722    	; 0x5ca <LL_GetClass>
     2f8:	c8 13       	cpse	r28, r24
     2fa:	25 c0       	rjmp	.+74     	; 0x346 <EXIT_Task+0x5e>
     2fc:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <gMotorOn>
     300:	81 11       	cpse	r24, r1
     302:	03 c0       	rjmp	.+6      	; 0x30a <EXIT_Task+0x22>
     304:	80 e8       	ldi	r24, 0x80	; 128
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	a0 d1       	rcall	.+832    	; 0x64a <PWM>
     30a:	62 e0       	ldi	r22, 0x02	; 2
     30c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     310:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     314:	75 d1       	rcall	.+746    	; 0x600 <LL_UpdateStatus>
     316:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     31a:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     31e:	2f d1       	rcall	.+606    	; 0x57e <LL_Next>
     320:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <HEAD+0x1>
     324:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <HEAD>
     328:	fc 01       	movw	r30, r24
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	4d d1       	rcall	.+666    	; 0x5ca <LL_GetClass>
     330:	c8 2f       	mov	r28, r24
     332:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     336:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     33a:	47 d1       	rcall	.+654    	; 0x5ca <LL_GetClass>
     33c:	6c 2f       	mov	r22, r28
     33e:	f3 d1       	rcall	.+998    	; 0x726 <STEPPER_SetRotation>
     340:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <_timer+0x23>
     344:	03 c0       	rjmp	.+6      	; 0x34c <EXIT_Task+0x64>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	7f d1       	rcall	.+766    	; 0x64a <PWM>
     34c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     350:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     354:	3a d1       	rcall	.+628    	; 0x5ca <LL_GetClass>
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <BTN_Task>:
     35a:	89 b1       	in	r24, 0x09	; 9
     35c:	83 70       	andi	r24, 0x03	; 3
     35e:	69 f1       	breq	.+90     	; 0x3ba <BTN_Task+0x60>
     360:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <debounce.2506>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <debounce.2506>
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	30 f1       	brcs	.+76     	; 0x3ba <BTN_Task+0x60>
     36e:	89 b1       	in	r24, 0x09	; 9
     370:	83 70       	andi	r24, 0x03	; 3
     372:	31 f4       	brne	.+12     	; 0x380 <BTN_Task+0x26>
     374:	81 e1       	ldi	r24, 0x11	; 17
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	59 d5       	rcall	.+2738   	; 0xe2c <UART_SendString>
     37a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <debounce.2506>
     37e:	08 95       	ret
     380:	89 b1       	in	r24, 0x09	; 9
     382:	83 70       	andi	r24, 0x03	; 3
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	69 f4       	brne	.+26     	; 0x3a2 <BTN_Task+0x48>
     388:	89 e2       	ldi	r24, 0x29	; 41
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	4f d5       	rcall	.+2718   	; 0xe2c <UART_SendString>
     38e:	8f e4       	ldi	r24, 0x4F	; 79
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	1d d3       	rcall	.+1594   	; 0x9ce <SYS_Pause>
     394:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <g_IdleStartTime+0x1>
     398:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <g_IdleStartTime>
     39c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <debounce.2506>
     3a0:	08 95       	ret
     3a2:	89 b1       	in	r24, 0x09	; 9
     3a4:	83 70       	andi	r24, 0x03	; 3
     3a6:	82 30       	cpi	r24, 0x02	; 2
     3a8:	31 f4       	brne	.+12     	; 0x3b6 <BTN_Task+0x5c>
     3aa:	8f e5       	ldi	r24, 0x5F	; 95
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	3e d5       	rcall	.+2684   	; 0xe2c <UART_SendString>
     3b0:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <debounce.2506>
     3b4:	08 95       	ret
     3b6:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <debounce.2506>
     3ba:	08 95       	ret

000003bc <ADD_Task>:
     3bc:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     3c0:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     3c4:	89 2b       	or	r24, r25
     3c6:	41 f4       	brne	.+16     	; 0x3d8 <ADD_Task+0x1c>
     3c8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     3cc:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     3d0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <STAGE1+0x1>
     3d4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <STAGE1>
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     3de:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     3e2:	0e d1       	rcall	.+540    	; 0x600 <LL_UpdateStatus>
     3e4:	e0 e0       	ldi	r30, 0x00	; 0
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	14 a6       	std	Z+44, r1	; 0x2c
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	82 8f       	std	Z+26, r24	; 0x1a
     3ee:	08 95       	ret

000003f0 <SERVER_Task>:
	//PORTC = 0x01;
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 0;
	static uint8_t pin5state = 1;
	
	if((PINE & 0x80) == 0) // E7
     3f0:	67 99       	sbic	0x0c, 7	; 12
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		if(pin7state)
     3f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin7state.2516>
     3f8:	88 23       	and	r24, r24
     3fa:	19 f0       	breq	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			// Transition Detected O1 High -> Low : Item Enters
			_timer[4].state = READY;
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <_timer+0x2c>
		} 
		pin7state = 0;
     402:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin7state.2516>
	}
	
	if((PINE & 0x40) == 0) // E6
     406:	66 99       	sbic	0x0c, 6	; 12
     408:	0a c0       	rjmp	.+20     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		if(pin6state)
     40a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     40e:	88 23       	and	r24, r24
     410:	21 f0       	breq	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			// Transition Detected O2 High -> Low : Stop ADC
			ADCSRA &= (0 << ADEN);
     412:	ea e7       	ldi	r30, 0x7A	; 122
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	10 82       	st	Z, r1
		}
		pin6state = 0;
     41a:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <__data_end>
	}
	
	if((PINE & 0x20) == 0) // E5
     41e:	65 99       	sbic	0x0c, 5	; 12
     420:	09 c0       	rjmp	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		if(pin5state)
     422:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2518>
     426:	88 23       	and	r24, r24
     428:	19 f0       	breq	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <_timer+0x23>
		}
		pin5state = 0;
     430:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2518>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     434:	67 9b       	sbis	0x0c, 7	; 12
     436:	03 c0       	rjmp	.+6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		if(!pin7state)
		{
			// Transition Detected O2 Low -> High : Item Exits O1

		}
		pin7state = 1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin7state.2516>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     43e:	66 9b       	sbis	0x0c, 6	; 12
     440:	15 c0       	rjmp	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	{
		if(!pin6state)
     442:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <__data_end>
     446:	81 11       	cpse	r24, r1
     448:	0e c0       	rjmp	.+28     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			STAGE2 = LL_Next(STAGE2);
     44a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     44e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     452:	95 d0       	rcall	.+298    	; 0x57e <LL_Next>
     454:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <STAGE2+0x1>
     458:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <STAGE2>
			//ADCSRA |= (1 << ADEN);
			ADCSRA |= (1 << ADSC);
     45c:	ea e7       	ldi	r30, 0x7A	; 122
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	80 64       	ori	r24, 0x40	; 64
     464:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <__data_end>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     46c:	65 9b       	sbis	0x0c, 5	; 12
     46e:	03 c0       	rjmp	.+6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	{
		if(!pin5state)
		{
			// Transition Detected O3 Low -> High : Item Exits System
		}
		pin5state = 1;			
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2518>
     476:	08 95       	ret

00000478 <EXECACQ>:

#include "EXECACQ.h"

void EXECACQ()
{
	SYS_Init();
     478:	1c d2       	rcall	.+1080   	; 0x8b2 <SYS_Init>

	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     47a:	89 b1       	in	r24, 0x09	; 9
     47c:	83 70       	andi	r24, 0x03	; 3
     47e:	e9 f7       	brne	.-6      	; 0x47a <EXECACQ+0x2>
		{
			UART_SendString("Starting System!\r\n");
     480:	82 e7       	ldi	r24, 0x72	; 114
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	d3 d4       	rcall	.+2470   	; 0xe2c <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     486:	f8 94       	cli
		}
	}

	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	48 ef       	ldi	r20, 0xF8	; 248
     48e:	51 e0       	ldi	r21, 0x01	; 1
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	50 d4       	rcall	.+2208   	; 0xd3a <TIMER_Create>
		_timer[0].state = READY;
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	d2 e0       	ldi	r29, 0x02	; 2
     49e:	12 e0       	ldi	r17, 0x02	; 2
     4a0:	18 87       	std	Y+8, r17	; 0x08
	
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	45 ed       	ldi	r20, 0xD5	; 213
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	43 d4       	rcall	.+2182   	; 0xd3a <TIMER_Create>
		_timer[1].state = READY;
     4b4:	19 8b       	std	Y+17, r17	; 0x11
	
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	4c e2       	ldi	r20, 0x2C	; 44
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	39 d4       	rcall	.+2162   	; 0xd3a <TIMER_Create>
		_timer[2].state = READY;
     4c8:	1a 8f       	std	Y+26, r17	; 0x1a
	
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	44 e7       	ldi	r20, 0x74	; 116
     4d0:	51 e0       	ldi	r21, 0x01	; 1
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	2f d4       	rcall	.+2142   	; 0xd3a <TIMER_Create>
		_timer[3].state = READY;
     4dc:	1b a3       	std	Y+35, r17	; 0x23
	
		TIMER_Create(1, 1, ADD_Task, NULL);		// Item Enter Handling
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	4e ed       	ldi	r20, 0xDE	; 222
     4e4:	51 e0       	ldi	r21, 0x01	; 1
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	25 d4       	rcall	.+2122   	; 0xd3a <TIMER_Create>
		_timer[4].state = READY;
     4f0:	1c a7       	std	Y+44, r17	; 0x2c
	
		TIMER_Create(1, 1, BTN_Task, NULL);		// Button Handling
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	4d ea       	ldi	r20, 0xAD	; 173
     4f8:	51 e0       	ldi	r21, 0x01	; 1
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	1b d4       	rcall	.+2102   	; 0xd3a <TIMER_Create>
		_timer[5].state = READY;
     504:	1d ab       	std	Y+53, r17	; 0x35
	
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 ed       	ldi	r20, 0xD0	; 208
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	88 ee       	ldi	r24, 0xE8	; 232
     514:	93 e0       	ldi	r25, 0x03	; 3
		_timer[6].state = READY;
	
		//UART_SendString("System Ready...\r\n");
		PWM(0x80);
     516:	11 d4       	rcall	.+2082   	; 0xd3a <TIMER_Create>
     518:	1e af       	std	Y+62, r17	; 0x3e
     51a:	80 e8       	ldi	r24, 0x80	; 128
     51c:	90 e0       	ldi	r25, 0x00	; 0
		PORTC = 0xFE;
     51e:	95 d0       	rcall	.+298    	; 0x64a <PWM>
     520:	8e ef       	ldi	r24, 0xFE	; 254
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     522:	88 b9       	out	0x08, r24	; 8
			// Calling STEPPER set rotation in while loop uses 15 us of slack
			// Stepper ISR has min period of around 7 ms, e : 10us
			
			// About 374us to service entire system with timer, stepper, adc.
			
			STEPPER_SetRotation(50,150);
     524:	78 94       	sei
     526:	66 e9       	ldi	r22, 0x96	; 150
     528:	82 e3       	ldi	r24, 0x32	; 50
     52a:	fd d0       	rcall	.+506    	; 0x726 <STEPPER_SetRotation>
     52c:	fc cf       	rjmp	.-8      	; 0x526 <EXECACQ+0xae>

0000052e <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	7c 01       	movw	r14, r24
     53a:	16 2f       	mov	r17, r22
     53c:	d4 2f       	mov	r29, r20
     53e:	c2 2f       	mov	r28, r18
     540:	85 e0       	ldi	r24, 0x05	; 5
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	a3 d4       	rcall	.+2374   	; 0xe8c <malloc>
     546:	fc 01       	movw	r30, r24
     548:	f1 82       	std	Z+1, r15	; 0x01
     54a:	e0 82       	st	Z, r14
     54c:	12 83       	std	Z+2, r17	; 0x02
     54e:	d3 83       	std	Z+3, r29	; 0x03
     550:	c4 83       	std	Z+4, r28	; 0x04
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <LL_ItemListInit>:
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	ec 01       	movw	r28, r24
     564:	86 e0       	ldi	r24, 0x06	; 6
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	91 d4       	rcall	.+2338   	; 0xe8c <malloc>
     56a:	fc 01       	movw	r30, r24
     56c:	d1 83       	std	Z+1, r29	; 0x01
     56e:	c0 83       	st	Z, r28
     570:	15 82       	std	Z+5, r1	; 0x05
     572:	14 82       	std	Z+4, r1	; 0x04
     574:	13 82       	std	Z+3, r1	; 0x03
     576:	12 82       	std	Z+2, r1	; 0x02
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <LL_Next>:
     57e:	fc 01       	movw	r30, r24
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	93 81       	ldd	r25, Z+3	; 0x03
     584:	08 95       	ret

00000586 <LL_AddBack>:
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
     58c:	cb 01       	movw	r24, r22
     58e:	01 c0       	rjmp	.+2      	; 0x592 <LL_AddBack+0xc>
     590:	e9 01       	movw	r28, r18
     592:	2a 81       	ldd	r18, Y+2	; 0x02
     594:	3b 81       	ldd	r19, Y+3	; 0x03
     596:	21 15       	cp	r18, r1
     598:	31 05       	cpc	r19, r1
     59a:	d1 f7       	brne	.-12     	; 0x590 <LL_AddBack+0xa>
     59c:	e0 df       	rcall	.-64     	; 0x55e <LL_ItemListInit>
     59e:	9b 83       	std	Y+3, r25	; 0x03
     5a0:	8a 83       	std	Y+2, r24	; 0x02
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <LL_Size>:
     5a8:	dc 01       	movw	r26, r24
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	ed 91       	ld	r30, X+
     5ae:	fc 91       	ld	r31, X
     5b0:	13 97       	sbiw	r26, 0x03	; 3
     5b2:	30 97       	sbiw	r30, 0x00	; 0
     5b4:	41 f0       	breq	.+16     	; 0x5c6 <LL_Size+0x1e>
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	02 80       	ldd	r0, Z+2	; 0x02
     5bc:	f3 81       	ldd	r31, Z+3	; 0x03
     5be:	e0 2d       	mov	r30, r0
     5c0:	30 97       	sbiw	r30, 0x00	; 0
     5c2:	d1 f7       	brne	.-12     	; 0x5b8 <LL_Size+0x10>
     5c4:	08 95       	ret
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	08 95       	ret

000005ca <LL_GetClass>:
     5ca:	dc 01       	movw	r26, r24
     5cc:	ed 91       	ld	r30, X+
     5ce:	fc 91       	ld	r31, X
     5d0:	83 81       	ldd	r24, Z+3	; 0x03
     5d2:	08 95       	ret

000005d4 <LL_GetRefl>:
     5d4:	dc 01       	movw	r26, r24
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	80 81       	ld	r24, Z
     5dc:	91 81       	ldd	r25, Z+1	; 0x01
     5de:	08 95       	ret

000005e0 <LL_GetMag>:
     5e0:	dc 01       	movw	r26, r24
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	82 81       	ldd	r24, Z+2	; 0x02
     5e8:	08 95       	ret

000005ea <LL_UpdateRefl>:
     5ea:	dc 01       	movw	r26, r24
     5ec:	ed 91       	ld	r30, X+
     5ee:	fc 91       	ld	r31, X
     5f0:	71 83       	std	Z+1, r23	; 0x01
     5f2:	60 83       	st	Z, r22
     5f4:	08 95       	ret

000005f6 <LL_UpdateMag>:
     5f6:	dc 01       	movw	r26, r24
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	62 83       	std	Z+2, r22	; 0x02
     5fe:	08 95       	ret

00000600 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     600:	dc 01       	movw	r26, r24
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	64 83       	std	Z+4, r22	; 0x04
     608:	08 95       	ret

0000060a <GPIO_Init>:
#include "sys.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     60e:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     610:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     612:	80 ef       	ldi	r24, 0xF0	; 240
     614:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     616:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     618:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << 5));

    return 0;
}
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	08 95       	ret

00000620 <main>:
	TIMERTEST();
	return 0;
#endif
#if EXECMODE == 1
	#include "EXECACQ.h"
	EXECACQ();
     620:	2b df       	rcall	.-426    	; 0x478 <EXECACQ>
		}

 	}
	
	return 0;
}
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	08 95       	ret

00000628 <__vector_default>:

ISR(BADISR_vect)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     632:	8a ea       	ldi	r24, 0xAA	; 170
     634:	88 b9       	out	0x08, r24	; 8
     636:	fe cf       	rjmp	.-4      	; 0x634 <__vector_default+0xc>

00000638 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     638:	84 b5       	in	r24, 0x24	; 36
     63a:	83 68       	ori	r24, 0x83	; 131
     63c:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     63e:	85 b5       	in	r24, 0x25	; 37
     640:	83 60       	ori	r24, 0x03	; 3
     642:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     644:	80 e8       	ldi	r24, 0x80	; 128
     646:	87 bd       	out	0x27, r24	; 39
     648:	08 95       	ret

0000064a <PWM>:
}

void PWM(const int dutyCycle)
{
    OCR0A = dutyCycle;
     64a:	87 bd       	out	0x27, r24	; 39
	if (dutyCycle) 
     64c:	89 2b       	or	r24, r25
     64e:	31 f0       	breq	.+12     	; 0x65c <PWM+0x12>
	{
		gMotorOn = 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <gMotorOn>
		PORTB = ~0x0E;
     656:	81 ef       	ldi	r24, 0xF1	; 241
     658:	85 b9       	out	0x05, r24	; 5
     65a:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     65c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <gMotorOn>
		PORTB = ~0x0F;
     660:	80 ef       	ldi	r24, 0xF0	; 240
     662:	85 b9       	out	0x05, r24	; 5
     664:	08 95       	ret

00000666 <STEPPER_Init>:
//TODO; Write spin down


void STEPPER_Init()
{
	stepper._stepNum = 0;
     666:	ea e4       	ldi	r30, 0x4A	; 74
     668:	f2 e0       	ldi	r31, 0x02	; 2
     66a:	10 82       	st	Z, r1
	stepper.direction = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     670:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     672:	13 82       	std	Z+3, r1	; 0x03
	stepper._targetStep = 200;
     674:	88 ec       	ldi	r24, 0xC8	; 200
     676:	84 83       	std	Z+4, r24	; 0x04
	stepper._currentStep = 0;
     678:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
     67a:	16 82       	std	Z+6, r1	; 0x06
	stepper._delay = 0x14;
     67c:	84 e1       	ldi	r24, 0x14	; 20
     67e:	87 83       	std	Z+7, r24	; 0x07
	PORTA = 0x30;
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	82 b9       	out	0x02, r24	; 2
	cli();
     684:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x90;
     686:	80 e9       	ldi	r24, 0x90	; 144
     688:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     68c:	e0 eb       	ldi	r30, 0xB0	; 176
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	82 60       	ori	r24, 0x02	; 2
     694:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     696:	e0 e7       	ldi	r30, 0x70	; 112
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     6a0:	e1 eb       	ldi	r30, 0xB1	; 177
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	87 60       	ori	r24, 0x07	; 7
     6a8:	80 83       	st	Z, r24
	
	sei();
     6aa:	78 94       	sei
     6ac:	08 95       	ret

000006ae <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	86 1b       	sub	r24, r22
     6b2:	91 09       	sbc	r25, r1
	if (steps >= 0)
     6b4:	52 f0       	brmi	.+20     	; 0x6ca <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     6b6:	85 36       	cpi	r24, 0x65	; 101
     6b8:	91 05       	cpc	r25, r1
     6ba:	8c f0       	brlt	.+34     	; 0x6de <STEPPER_NumSteps+0x30>
     6bc:	24 e6       	ldi	r18, 0x64	; 100
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	48 1b       	sub	r20, r24
     6c4:	59 0b       	sbc	r21, r25
     6c6:	ca 01       	movw	r24, r20
     6c8:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     6ca:	8c 39       	cpi	r24, 0x9C	; 156
     6cc:	5f ef       	ldi	r21, 0xFF	; 255
     6ce:	95 07       	cpc	r25, r21
     6d0:	34 f0       	brlt	.+12     	; 0x6de <STEPPER_NumSteps+0x30>
     6d2:	2c e9       	ldi	r18, 0x9C	; 156
     6d4:	3f ef       	ldi	r19, 0xFF	; 255
     6d6:	a9 01       	movw	r20, r18
     6d8:	48 1b       	sub	r20, r24
     6da:	59 0b       	sbc	r21, r25
     6dc:	ca 01       	movw	r24, r20
	}
	return steps;
}
     6de:	08 95       	ret

000006e0 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     6e8:	ca e4       	ldi	r28, 0x4A	; 74
     6ea:	d2 e0       	ldi	r29, 0x02	; 2
     6ec:	0a 81       	ldd	r16, Y+2	; 0x02
     6ee:	6b 81       	ldd	r22, Y+3	; 0x03
     6f0:	80 2f       	mov	r24, r16
     6f2:	dd df       	rcall	.-70     	; 0x6ae <STEPPER_NumSteps>
     6f4:	18 2f       	mov	r17, r24
     6f6:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next pos
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     6f8:	60 2f       	mov	r22, r16
     6fa:	8e 81       	ldd	r24, Y+6	; 0x06
     6fc:	d8 df       	rcall	.-80     	; 0x6ae <STEPPER_NumSteps>
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     6fe:	24 e0       	ldi	r18, 0x04	; 4
     700:	29 83       	std	Y+1, r18	; 0x01
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     702:	9c 01       	movw	r18, r24
     704:	12 9f       	mul	r17, r18
     706:	c0 01       	movw	r24, r0
     708:	13 9f       	mul	r17, r19
     70a:	90 0d       	add	r25, r0
     70c:	11 24       	eor	r1, r1
     70e:	89 2f       	mov	r24, r25
     710:	80 95       	com	r24
     712:	88 1f       	adc	r24, r24
     714:	88 27       	eor	r24, r24
     716:	88 1f       	adc	r24, r24
     718:	88 87       	std	Y+8, r24	; 0x08

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
     71a:	1d 82       	std	Y+5, r1	; 0x05
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
	cli();
     72a:	f8 94       	cli
	//Use this to set the target positions
	stepper.target = target;
     72c:	ca e4       	ldi	r28, 0x4A	; 74
     72e:	d2 e0       	ldi	r29, 0x02	; 2
     730:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     732:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
     734:	d5 df       	rcall	.-86     	; 0x6e0 <STEPPER_Rotate>
	OCR2A = 0x07 * stepper._delay;
     736:	9f 81       	ldd	r25, Y+7	; 0x07
     738:	89 2f       	mov	r24, r25
     73a:	88 0f       	add	r24, r24
     73c:	88 0f       	add	r24, r24
     73e:	88 0f       	add	r24, r24
     740:	89 1b       	sub	r24, r25
     742:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     746:	78 94       	sei
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <__vector_13>:

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
     74e:	1f 92       	push	r1
     750:	0f 92       	push	r0
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	0f 92       	push	r0
     756:	11 24       	eor	r1, r1
     758:	0b b6       	in	r0, 0x3b	; 59
     75a:	0f 92       	push	r0
     75c:	2f 93       	push	r18
     75e:	8f 93       	push	r24
     760:	9f 93       	push	r25
     762:	af 93       	push	r26
     764:	bf 93       	push	r27
     766:	ef 93       	push	r30
     768:	ff 93       	push	r31
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	00 d0       	rcall	.+0      	; 0x770 <__vector_13+0x22>
     770:	00 d0       	rcall	.+0      	; 0x772 <__vector_13+0x24>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= 0xFE;
     776:	98 b1       	in	r25, 0x08	; 8
     778:	8e ef       	ldi	r24, 0xFE	; 254
     77a:	89 27       	eor	r24, r25
     77c:	88 b9       	out	0x08, r24	; 8
	PORTC |= 0x01;  
     77e:	40 9a       	sbi	0x08, 0	; 8
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	9e e2       	ldi	r25, 0x2E	; 46
     78a:	ad e2       	ldi	r26, 0x2D	; 45
     78c:	b5 e3       	ldi	r27, 0x35	; 53
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	ab 83       	std	Y+3, r26	; 0x03
     794:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
     796:	ea e4       	ldi	r30, 0x4A	; 74
     798:	f2 e0       	ldi	r31, 0x02	; 2
     79a:	95 81       	ldd	r25, Z+5	; 0x05
     79c:	84 81       	ldd	r24, Z+4	; 0x04
     79e:	98 17       	cp	r25, r24
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__vector_13+0x56>
     7a2:	51 c0       	rjmp	.+162    	; 0x846 <__vector_13+0xf8>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     7a4:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <stepper+0x1>
     7a8:	84 30       	cpi	r24, 0x04	; 4
     7aa:	51 f4       	brne	.+20     	; 0x7c0 <__vector_13+0x72>
     7ac:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <stepper>
     7b0:	e1 e0       	ldi	r30, 0x01	; 1
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ec 0f       	add	r30, r28
     7b6:	fd 1f       	adc	r31, r29
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	0d c0       	rjmp	.+26     	; 0x7da <__vector_13+0x8c>
     7c0:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <stepper>
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	e8 1b       	sub	r30, r24
     7ca:	f1 09       	sbc	r31, r1
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8c 0f       	add	r24, r28
     7d2:	9d 1f       	adc	r25, r29
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	80 81       	ld	r24, Z
     7da:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     7dc:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <stepper>
     7e0:	83 30       	cpi	r24, 0x03	; 3
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <__vector_13+0x9a>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__vector_13+0x9c>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	ea e4       	ldi	r30, 0x4A	; 74
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	80 83       	st	Z, r24

		stepper._currentStep++;
     7f0:	85 81       	ldd	r24, Z+5	; 0x05
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	85 83       	std	Z+5, r24	; 0x05

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
     7f6:	86 30       	cpi	r24, 0x06	; 6
     7f8:	70 f0       	brcs	.+28     	; 0x816 <__vector_13+0xc8>
     7fa:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <stepper+0x7>
     7fe:	87 30       	cpi	r24, 0x07	; 7
     800:	50 f0       	brcs	.+20     	; 0x816 <__vector_13+0xc8>
			stepper._delay--;
     802:	81 50       	subi	r24, 0x01	; 1
     804:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     808:	98 2f       	mov	r25, r24
     80a:	99 0f       	add	r25, r25
     80c:	99 0f       	add	r25, r25
     80e:	99 0f       	add	r25, r25
     810:	98 1b       	sub	r25, r24
     812:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
     816:	ea e4       	ldi	r30, 0x4A	; 74
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	25 81       	ldd	r18, Z+5	; 0x05
     820:	82 1b       	sub	r24, r18
     822:	91 09       	sbc	r25, r1
     824:	06 97       	sbiw	r24, 0x06	; 6
     826:	6c f5       	brge	.+90     	; 0x882 <__vector_13+0x134>
     828:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <stepper+0x7>
     82c:	83 31       	cpi	r24, 0x13	; 19
     82e:	48 f5       	brcc	.+82     	; 0x882 <__vector_13+0x134>
			stepper._delay++;
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     836:	98 2f       	mov	r25, r24
     838:	99 0f       	add	r25, r25
     83a:	99 0f       	add	r25, r25
     83c:	99 0f       	add	r25, r25
     83e:	98 1b       	sub	r25, r24
     840:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     844:	1e c0       	rjmp	.+60     	; 0x882 <__vector_13+0x134>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
     846:	98 13       	cpse	r25, r24
     848:	1c c0       	rjmp	.+56     	; 0x882 <__vector_13+0x134>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     84a:	ea e4       	ldi	r30, 0x4A	; 74
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
     852:	80 85       	ldd	r24, Z+8	; 0x08
     854:	88 23       	and	r24, r24
     856:	19 f0       	breq	.+6      	; 0x85e <__vector_13+0x110>
     858:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <stepper+0x7>
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__vector_13+0x112>
     85e:	94 e1       	ldi	r25, 0x14	; 20
     860:	ea e4       	ldi	r30, 0x4A	; 74
     862:	f2 e0       	ldi	r31, 0x02	; 2
     864:	97 83       	std	Z+7, r25	; 0x07
		OCR2A = 0x07 * stepper._delay;
     866:	89 2f       	mov	r24, r25
     868:	88 0f       	add	r24, r24
     86a:	88 0f       	add	r24, r24
     86c:	88 0f       	add	r24, r24
     86e:	89 1b       	sub	r24, r25
     870:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     874:	80 85       	ldd	r24, Z+8	; 0x08
     876:	88 23       	and	r24, r24
     878:	11 f0       	breq	.+4      	; 0x87e <__vector_13+0x130>
     87a:	82 b1       	in	r24, 0x02	; 2
     87c:	01 c0       	rjmp	.+2      	; 0x880 <__vector_13+0x132>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	82 b9       	out	0x02, r24	; 2
	}
	PORTC &= 0xFE;
     882:	40 98       	cbi	0x08, 0	; 8
	PORTC ^= 0xFF;
     884:	88 b1       	in	r24, 0x08	; 8
     886:	80 95       	com	r24
     888:	88 b9       	out	0x08, r24	; 8
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0b be       	out	0x3b, r0	; 59
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <SYS_Init>:

#include "sys.h"
#include "timer.h"

void SYS_Init()
{
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <SYS_Init+0xe>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <SYS_Init+0x10>
     8c2:	1f 92       	push	r1
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
	// Initialize system
	
	cli();
     8c8:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
     8ca:	e1 e6       	ldi	r30, 0x61	; 97
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 e8       	ldi	r24, 0x80	; 128
     8d0:	80 83       	st	Z, r24
	CLKPR = 0;
     8d2:	10 82       	st	Z, r1
	
	UART_Init();
     8d4:	93 d2       	rcall	.+1318   	; 0xdfc <UART_Init>
	GPIO_Init();
     8d6:	99 de       	rcall	.-718    	; 0x60a <GPIO_Init>
	TIMER_Init();
     8d8:	14 d2       	rcall	.+1064   	; 0xd02 <TIMER_Init>
	PWM_Init();
     8da:	ae de       	rcall	.-676    	; 0x638 <PWM_Init>
     8dc:	fc db       	rcall	.-2056   	; 0xd6 <ADC_Init>
	ADC_Init();
     8de:	c3 de       	rcall	.-634    	; 0x666 <STEPPER_Init>
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
	STEPPER_Init();
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <stepper_handle+0x1>
	
	stepper_handle = -1;
     8e8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <stepper_handle>
     8ec:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <timer_handle+0x1>
     8f0:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <timer_handle>
	timer_handle = -1;
     8f4:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <delay_flag+0x1>
     8f8:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <delay_flag>
	delay_flag = -1;
     8fc:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <g_ADCCount+0x1>
     900:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_ADCCount>
	
	g_ADCCount = 0;
     904:	84 e1       	ldi	r24, 0x14	; 20
     906:	ed ed       	ldi	r30, 0xDD	; 221
     908:	f1 e0       	ldi	r31, 0x01	; 1
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     90a:	df 01       	movw	r26, r30
     90c:	1d 92       	st	X+, r1
     90e:	8a 95       	dec	r24
     910:	e9 f7       	brne	.-6      	; 0x90c <SYS_Init+0x5a>
     912:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <g_ADCFlag>
     916:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <HEAD+0x1>
	g_ADCFlag = 0;
     91a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <HEAD>
	
	HEAD = NULL;
     91e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <TAIL+0x1>
     922:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <TAIL>
	TAIL = NULL;
     926:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <STAGE1+0x1>
     92a:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <STAGE1>
	STAGE1 = NULL;
     92e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <STAGE2+0x1>
     932:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <STAGE2>
	STAGE2 = NULL;
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	44 e0       	ldi	r20, 0x04	; 4
	
	listNode* initNode = LL_ItemInit(65000,250,UNCLASSIFIED,UNINITIALIZED);
     93a:	6a ef       	ldi	r22, 0xFA	; 250
     93c:	88 ee       	ldi	r24, 0xE8	; 232
     93e:	9d ef       	ldi	r25, 0xFD	; 253
     940:	f6 dd       	rcall	.-1044   	; 0x52e <LL_ItemInit>
     942:	7c 01       	movw	r14, r24
     944:	0c de       	rcall	.-1000   	; 0x55e <LL_ItemListInit>
     946:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     94a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <HEAD>
     94e:	0f e2       	ldi	r16, 0x2F	; 47
     950:	10 e0       	ldi	r17, 0x00	; 0
     952:	b7 01       	movw	r22, r14
     954:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
	
	for(int i = 47; i > 0; i--)
	{
		TAIL = LL_AddBack(HEAD, initNode);
     958:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     95c:	14 de       	rcall	.-984    	; 0x586 <LL_AddBack>
     95e:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <TAIL+0x1>
     962:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <TAIL>
     966:	01 50       	subi	r16, 0x01	; 1
     968:	11 09       	sbc	r17, r1
     96a:	99 f7       	brne	.-26     	; 0x952 <SYS_Init+0xa0>
     96c:	20 e0       	ldi	r18, 0x00	; 0
	
	listNode* initNode = LL_ItemInit(65000,250,UNCLASSIFIED,UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	
	for(int i = 47; i > 0; i--)
     96e:	45 e0       	ldi	r20, 0x05	; 5
	{
		TAIL = LL_AddBack(HEAD, initNode);
	}
	
	initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     970:	6a ef       	ldi	r22, 0xFA	; 250
     972:	88 ee       	ldi	r24, 0xE8	; 232
     974:	9d ef       	ldi	r25, 0xFD	; 253
     976:	db dd       	rcall	.-1098   	; 0x52e <LL_ItemInit>
     978:	bc 01       	movw	r22, r24
     97a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
	LL_AddBack(HEAD,initNode);
     97e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     982:	01 de       	rcall	.-1022   	; 0x586 <LL_AddBack>
     984:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
	
	//PORTC = LL_Size(HEAD);
	char temp[5];
	sprintf(temp,"%u\r\n", LL_Size(HEAD));
     988:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     98c:	0d de       	rcall	.-998    	; 0x5a8 <LL_Size>
     98e:	1f 92       	push	r1
     990:	8f 93       	push	r24
     992:	87 ec       	ldi	r24, 0xC7	; 199
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5f       	subi	r16, 0xFF	; 255
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	1f 93       	push	r17
     9a2:	0f 93       	push	r16
     9a4:	94 d3       	rcall	.+1832   	; 0x10ce <sprintf>
     9a6:	c8 01       	movw	r24, r16
     9a8:	41 d2       	rcall	.+1154   	; 0xe2c <UART_SendString>
	UART_SendString(temp);
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
	//sei();

}
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	08 95       	ret

000009ce <SYS_Pause>:
     9ce:	af 92       	push	r10
     9d0:	bf 92       	push	r11
     9d2:	cf 92       	push	r12

void SYS_Pause(char str[20])
{
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	ce 56       	subi	r28, 0x6E	; 110
     9e8:	d1 09       	sbc	r29, r1
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	18 2f       	mov	r17, r24
     9f6:	09 2f       	mov	r16, r25
	cli();
     9f8:	f8 94       	cli
	PWM(0);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	25 de       	rcall	.-950    	; 0x64a <PWM>
	char buffer[100];
	if(HEAD) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(HEAD), LL_GetMag(HEAD), LL_GetClass(HEAD));
     a00:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     a04:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	61 f1       	breq	.+88     	; 0xa64 <SYS_Pause+0x96>
     a0c:	de dd       	rcall	.-1092   	; 0x5ca <LL_GetClass>
     a0e:	e8 2e       	mov	r14, r24
     a10:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     a14:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     a18:	e3 dd       	rcall	.-1082   	; 0x5e0 <LL_GetMag>
     a1a:	f8 2e       	mov	r15, r24
     a1c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     a20:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     a24:	d7 dd       	rcall	.-1106   	; 0x5d4 <LL_GetRefl>
     a26:	1f 92       	push	r1
     a28:	ef 92       	push	r14
     a2a:	1f 92       	push	r1
     a2c:	ff 92       	push	r15
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	85 e8       	ldi	r24, 0x85	; 133
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	43 d3       	rcall	.+1670   	; 0x10ce <sprintf>
	if(HEAD) UART_SendString(buffer);
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <HEAD>
     a56:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <HEAD+0x1>
     a5a:	89 2b       	or	r24, r25
     a5c:	19 f0       	breq	.+6      	; 0xa64 <SYS_Pause+0x96>
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	e4 d1       	rcall	.+968    	; 0xe2c <UART_SendString>
	if(STAGE1) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE1), LL_GetMag(STAGE1), LL_GetClass(STAGE1));
     a64:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     a68:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	61 f1       	breq	.+88     	; 0xac8 <SYS_Pause+0xfa>
     a70:	ac dd       	rcall	.-1192   	; 0x5ca <LL_GetClass>
     a72:	e8 2e       	mov	r14, r24
     a74:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     a78:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     a7c:	b1 dd       	rcall	.-1182   	; 0x5e0 <LL_GetMag>
     a7e:	f8 2e       	mov	r15, r24
     a80:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     a84:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     a88:	a5 dd       	rcall	.-1206   	; 0x5d4 <LL_GetRefl>
     a8a:	1f 92       	push	r1
     a8c:	ef 92       	push	r14
     a8e:	1f 92       	push	r1
     a90:	ff 92       	push	r15
     a92:	9f 93       	push	r25
     a94:	8f 93       	push	r24
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	85 e8       	ldi	r24, 0x85	; 133
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	ce 01       	movw	r24, r28
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	11 d3       	rcall	.+1570   	; 0x10ce <sprintf>
	if(STAGE1) UART_SendString(buffer);
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <STAGE1>
     aba:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <STAGE1+0x1>
     abe:	89 2b       	or	r24, r25
     ac0:	19 f0       	breq	.+6      	; 0xac8 <SYS_Pause+0xfa>
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
	if(STAGE2) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE2), LL_GetMag(STAGE2), LL_GetClass(STAGE2));
     ac6:	b2 d1       	rcall	.+868    	; 0xe2c <UART_SendString>
     ac8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     acc:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	61 f1       	breq	.+88     	; 0xb2c <SYS_Pause+0x15e>
     ad4:	7a dd       	rcall	.-1292   	; 0x5ca <LL_GetClass>
     ad6:	e8 2e       	mov	r14, r24
     ad8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     adc:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     ae0:	7f dd       	rcall	.-1282   	; 0x5e0 <LL_GetMag>
     ae2:	f8 2e       	mov	r15, r24
     ae4:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     ae8:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     aec:	73 dd       	rcall	.-1306   	; 0x5d4 <LL_GetRefl>
     aee:	1f 92       	push	r1
     af0:	ef 92       	push	r14
     af2:	1f 92       	push	r1
     af4:	ff 92       	push	r15
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	85 e8       	ldi	r24, 0x85	; 133
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	9f 93       	push	r25
     b04:	8f 93       	push	r24
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	df d2       	rcall	.+1470   	; 0x10ce <sprintf>
	if(STAGE2) UART_SendString(buffer);
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <STAGE2>
     b1e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <STAGE2+0x1>
     b22:	89 2b       	or	r24, r25
     b24:	19 f0       	breq	.+6      	; 0xb2c <SYS_Pause+0x15e>
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
	if(TAIL) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(TAIL), LL_GetMag(TAIL), LL_GetClass(TAIL));
     b2a:	80 d1       	rcall	.+768    	; 0xe2c <UART_SendString>
     b2c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <TAIL>
     b30:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <TAIL+0x1>
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	61 f1       	breq	.+88     	; 0xb90 <SYS_Pause+0x1c2>
     b38:	48 dd       	rcall	.-1392   	; 0x5ca <LL_GetClass>
     b3a:	e8 2e       	mov	r14, r24
     b3c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <TAIL>
     b40:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <TAIL+0x1>
     b44:	4d dd       	rcall	.-1382   	; 0x5e0 <LL_GetMag>
     b46:	f8 2e       	mov	r15, r24
     b48:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <TAIL>
     b4c:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <TAIL+0x1>
     b50:	41 dd       	rcall	.-1406   	; 0x5d4 <LL_GetRefl>
     b52:	1f 92       	push	r1
     b54:	ef 92       	push	r14
     b56:	1f 92       	push	r1
     b58:	ff 92       	push	r15
     b5a:	9f 93       	push	r25
     b5c:	8f 93       	push	r24
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	85 e8       	ldi	r24, 0x85	; 133
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	9f 93       	push	r25
     b68:	8f 93       	push	r24
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	ad d2       	rcall	.+1370   	; 0x10ce <sprintf>
	if(TAIL) UART_SendString(buffer);
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <TAIL>
     b82:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <TAIL+0x1>
     b86:	89 2b       	or	r24, r25
     b88:	19 f0       	breq	.+6      	; 0xb90 <SYS_Pause+0x1c2>
     b8a:	ce 01       	movw	r24, r28
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	4e d1       	rcall	.+668    	; 0xe2c <UART_SendString>
     b90:	0f 2e       	mov	r0, r31
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	cf 2e       	mov	r12, r31
     b96:	f2 e0       	ldi	r31, 0x02	; 2
     b98:	df 2e       	mov	r13, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	00 e0       	ldi	r16, 0x00	; 0
	//sei();

}

void SYS_Pause(char str[20])
{
     b9e:	10 e0       	ldi	r17, 0x00	; 0
	if(TAIL) UART_SendString(buffer);
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     ba0:	0f 2e       	mov	r0, r31
     ba2:	f7 eb       	ldi	r31, 0xB7	; 183
     ba4:	af 2e       	mov	r10, r31
     ba6:	f1 e0       	ldi	r31, 0x01	; 1
     ba8:	bf 2e       	mov	r11, r31
     baa:	f0 2d       	mov	r31, r0
     bac:	7e 01       	movw	r14, r28
     bae:	f5 e6       	ldi	r31, 0x65	; 101
     bb0:	ef 0e       	add	r14, r31
     bb2:	f1 1c       	adc	r15, r1
     bb4:	f6 01       	movw	r30, r12
     bb6:	80 85       	ldd	r24, Z+8	; 0x08
     bb8:	1f 92       	push	r1
     bba:	8f 93       	push	r24
     bbc:	1f 93       	push	r17
     bbe:	0f 93       	push	r16
     bc0:	bf 92       	push	r11
     bc2:	af 92       	push	r10
     bc4:	ff 92       	push	r15
     bc6:	ef 92       	push	r14
		UART_SendString(statebuff);
     bc8:	82 d2       	rcall	.+1284   	; 0x10ce <sprintf>
     bca:	c7 01       	movw	r24, r14
	if(STAGE2) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE2), LL_GetMag(STAGE2), LL_GetClass(STAGE2));
	if(STAGE2) UART_SendString(buffer);
	if(TAIL) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(TAIL), LL_GetMag(TAIL), LL_GetClass(TAIL));
	if(TAIL) UART_SendString(buffer);
	
	for(int i = 0; i < 7; i++)
     bcc:	2f d1       	rcall	.+606    	; 0xe2c <UART_SendString>
     bce:	0f 5f       	subi	r16, 0xFF	; 255
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	cf 0e       	add	r12, r31
     bd6:	d1 1c       	adc	r13, r1
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	07 30       	cpi	r16, 0x07	; 7
     be4:	11 05       	cpc	r17, r1
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     be6:	31 f7       	brne	.-52     	; 0xbb4 <SYS_Pause+0x1e6>
     be8:	89 b1       	in	r24, 0x09	; 9
     bea:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
     bec:	e9 f7       	brne	.-6      	; 0xbe8 <SYS_Pause+0x21a>
     bee:	82 e7       	ldi	r24, 0x72	; 114
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	1c d1       	rcall	.+568    	; 0xe2c <UART_SendString>
			PWM(0x80);
     bf4:	80 e8       	ldi	r24, 0x80	; 128
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	28 dd       	rcall	.-1456   	; 0x64a <PWM>
     bfa:	78 94       	sei
			sei();
     bfc:	c2 59       	subi	r28, 0x92	; 146
			break;
		}
	}
	return;
     bfe:	df 4f       	sbci	r29, 0xFF	; 255
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	08 95       	ret

00000c20 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	0b b6       	in	r0, 0x3b	; 59
     c2c:	0f 92       	push	r0
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ef 93       	push	r30
     c50:	ff 93       	push	r31
	PORTC ^= 0xFE;
     c52:	98 b1       	in	r25, 0x08	; 8
     c54:	8e ef       	ldi	r24, 0xFE	; 254
     c56:	89 27       	eor	r24, r25
     c58:	88 b9       	out	0x08, r24	; 8
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     c5a:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_timer_tick>
     c5e:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_timer_tick+0x1>
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <_timer_tick+0x1>
     c68:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <_timer_tick>
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	d2 e0       	ldi	r29, 0x02	; 2
     c70:	0f 2e       	mov	r0, r31
     c72:	f8 e4       	ldi	r31, 0x48	; 72
     c74:	ef 2e       	mov	r14, r31
     c76:	f2 e0       	ldi	r31, 0x02	; 2
     c78:	ff 2e       	mov	r15, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry <= _timer_tick)) {
     c7e:	ec 81       	ldd	r30, Y+4	; 0x04
     c80:	fd 81       	ldd	r31, Y+5	; 0x05
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	e9 f0       	breq	.+58     	; 0xcc0 <__vector_17+0xa0>
     c86:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <_timer_tick>
     c8a:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <_timer_tick+0x1>
     c8e:	28 81       	ld	r18, Y
     c90:	39 81       	ldd	r19, Y+1	; 0x01
     c92:	82 17       	cp	r24, r18
     c94:	93 07       	cpc	r25, r19
     c96:	a0 f0       	brcs	.+40     	; 0xcc0 <__vector_17+0xa0>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     c98:	88 85       	ldd	r24, Y+8	; 0x08
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__vector_17+0x84>
     c9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ca0:	9f 81       	ldd	r25, Y+7	; 0x07
     ca2:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     ca4:	d8 01       	movw	r26, r16
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	13 97       	sbiw	r26, 0x03	; 3
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <__vector_17+0xa0>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     cb2:	2d 91       	ld	r18, X+
     cb4:	3c 91       	ld	r19, X
     cb6:	11 97       	sbiw	r26, 0x01	; 1
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	8d 93       	st	X+, r24
     cbe:	9c 93       	st	X, r25
     cc0:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     cc2:	ce 15       	cp	r28, r14
     cc4:	df 05       	cpc	r29, r15
     cc6:	d1 f6       	brne	.-76     	; 0xc7c <__vector_17+0x5c>
	 * sprintf(buf,"%u\r\n", total);
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	PORTC ^= 0xFE;
     cc8:	98 b1       	in	r25, 0x08	; 8
     cca:	8e ef       	ldi	r24, 0xFE	; 254
     ccc:	89 27       	eor	r24, r25
     cce:	88 b9       	out	0x08, r24	; 8
}
     cd0:	ff 91       	pop	r31
     cd2:	ef 91       	pop	r30
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	bf 91       	pop	r27
     cda:	af 91       	pop	r26
     cdc:	9f 91       	pop	r25
     cde:	8f 91       	pop	r24
     ce0:	7f 91       	pop	r23
     ce2:	6f 91       	pop	r22
     ce4:	5f 91       	pop	r21
     ce6:	4f 91       	pop	r20
     ce8:	3f 91       	pop	r19
     cea:	2f 91       	pop	r18
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     d02:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     d06:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     d0a:	80 ee       	ldi	r24, 0xE0	; 224
     d0c:	9d e0       	ldi	r25, 0x0D	; 13
     d0e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d12:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     d16:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     d1a:	89 e0       	ldi	r24, 0x09	; 9
     d1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     d26:	88 e4       	ldi	r24, 0x48	; 72
     d28:	e0 e0       	ldi	r30, 0x00	; 0
     d2a:	f2 e0       	ldi	r31, 0x02	; 2
     d2c:	df 01       	movw	r26, r30
     d2e:	1d 92       	st	X+, r1
     d30:	8a 95       	dec	r24
     d32:	e9 f7       	brne	.-6      	; 0xd2e <TIMER_Init+0x2c>

	return 0;
}
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	08 95       	ret

00000d3a <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     d44:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <_timer+0x4>
     d48:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <_timer+0x5>
     d4c:	67 2b       	or	r22, r23
     d4e:	09 f4       	brne	.+2      	; 0xd52 <TIMER_Create+0x18>
     d50:	49 c0       	rjmp	.+146    	; 0xde4 <TIMER_Create+0xaa>
     d52:	e0 e0       	ldi	r30, 0x00	; 0
     d54:	f2 e0       	ldi	r31, 0x02	; 2
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     d56:	a1 e0       	ldi	r26, 0x01	; 1
     d58:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     d5a:	c5 85       	ldd	r28, Z+13	; 0x0d
     d5c:	d6 85       	ldd	r29, Z+14	; 0x0e
     d5e:	cd 2b       	or	r28, r29
     d60:	09 f4       	brne	.+2      	; 0xd64 <TIMER_Create+0x2a>
     d62:	42 c0       	rjmp	.+132    	; 0xde8 <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     d64:	11 96       	adiw	r26, 0x01	; 1
     d66:	39 96       	adiw	r30, 0x09	; 9
     d68:	a8 30       	cpi	r26, 0x08	; 8
     d6a:	b1 05       	cpc	r27, r1
     d6c:	b1 f7       	brne	.-20     	; 0xd5a <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     d74:	fd 01       	movw	r30, r26
     d76:	ee 0f       	add	r30, r30
     d78:	ff 1f       	adc	r31, r31
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ea 0f       	add	r30, r26
     d84:	fb 1f       	adc	r31, r27
     d86:	e0 50       	subi	r30, 0x00	; 0
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	93 83       	std	Z+3, r25	; 0x03
     d8c:	82 83       	std	Z+2, r24	; 0x02
     d8e:	0d c0       	rjmp	.+26     	; 0xdaa <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     d90:	fd 01       	movw	r30, r26
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ea 0f       	add	r30, r26
     da0:	fb 1f       	adc	r31, r27
     da2:	e0 50       	subi	r30, 0x00	; 0
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	13 82       	std	Z+3, r1	; 0x03
     da8:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     daa:	fd 01       	movw	r30, r26
     dac:	ee 0f       	add	r30, r30
     dae:	ff 1f       	adc	r31, r31
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	ea 0f       	add	r30, r26
     dba:	fb 1f       	adc	r31, r27
     dbc:	e0 50       	subi	r30, 0x00	; 0
     dbe:	fe 4f       	sbci	r31, 0xFE	; 254
     dc0:	55 83       	std	Z+5, r21	; 0x05
     dc2:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     dc4:	37 83       	std	Z+7, r19	; 0x07
     dc6:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     dc8:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <_timer_tick>
     dcc:	30 91 d2 01 	lds	r19, 0x01D2	; 0x8001d2 <_timer_tick+0x1>
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	80 83       	st	Z, r24
			_timer[i].state = READY;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ddc:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     dde:	8a 2f       	mov	r24, r26
     de0:	9b 2f       	mov	r25, r27
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     de4:	a0 e0       	ldi	r26, 0x00	; 0
     de6:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     de8:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     dea:	f8 94       	cli
		{
			
			if (periodic != 0) 
     dec:	01 2b       	or	r16, r17
     dee:	11 f6       	brne	.-124    	; 0xd74 <TIMER_Create+0x3a>
     df0:	cf cf       	rjmp	.-98     	; 0xd90 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     dfc:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     e00:	83 e3       	ldi	r24, 0x33	; 51
     e02:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     e06:	e9 ec       	ldi	r30, 0xC9	; 201
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 61       	ori	r24, 0x18	; 24
     e0e:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     e10:	ea ec       	ldi	r30, 0xCA	; 202
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	86 60       	ori	r24, 0x06	; 6
     e18:	80 83       	st	Z, r24
     e1a:	08 95       	ret

00000e1c <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     e1c:	e8 ec       	ldi	r30, 0xC8	; 200
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	90 81       	ld	r25, Z
     e22:	95 ff       	sbrs	r25, 5
     e24:	fd cf       	rjmp	.-6      	; 0xe20 <UART_SendChar+0x4>
	UDR1 = c;
     e26:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     e2a:	08 95       	ret

00000e2c <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     e32:	88 81       	ld	r24, Y
     e34:	88 23       	and	r24, r24
     e36:	29 f0       	breq	.+10     	; 0xe42 <UART_SendString+0x16>
     e38:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
     e3a:	f0 df       	rcall	.-32     	; 0xe1c <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     e3c:	89 91       	ld	r24, Y+
     e3e:	81 11       	cpse	r24, r1
     e40:	fc cf       	rjmp	.-8      	; 0xe3a <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <__udivmodsi4>:
     e48:	a1 e2       	ldi	r26, 0x21	; 33
     e4a:	1a 2e       	mov	r1, r26
     e4c:	aa 1b       	sub	r26, r26
     e4e:	bb 1b       	sub	r27, r27
     e50:	fd 01       	movw	r30, r26
     e52:	0d c0       	rjmp	.+26     	; 0xe6e <__udivmodsi4_ep>

00000e54 <__udivmodsi4_loop>:
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	ee 1f       	adc	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	a2 17       	cp	r26, r18
     e5e:	b3 07       	cpc	r27, r19
     e60:	e4 07       	cpc	r30, r20
     e62:	f5 07       	cpc	r31, r21
     e64:	20 f0       	brcs	.+8      	; 0xe6e <__udivmodsi4_ep>
     e66:	a2 1b       	sub	r26, r18
     e68:	b3 0b       	sbc	r27, r19
     e6a:	e4 0b       	sbc	r30, r20
     e6c:	f5 0b       	sbc	r31, r21

00000e6e <__udivmodsi4_ep>:
     e6e:	66 1f       	adc	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	88 1f       	adc	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	1a 94       	dec	r1
     e78:	69 f7       	brne	.-38     	; 0xe54 <__udivmodsi4_loop>
     e7a:	60 95       	com	r22
     e7c:	70 95       	com	r23
     e7e:	80 95       	com	r24
     e80:	90 95       	com	r25
     e82:	9b 01       	movw	r18, r22
     e84:	ac 01       	movw	r20, r24
     e86:	bd 01       	movw	r22, r26
     e88:	cf 01       	movw	r24, r30
     e8a:	08 95       	ret

00000e8c <malloc>:
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	91 05       	cpc	r25, r1
     e98:	10 f4       	brcc	.+4      	; 0xe9e <malloc+0x12>
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <__flp>
     ea2:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <__flp+0x1>
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a0 e0       	ldi	r26, 0x00	; 0
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	19 f1       	breq	.+70     	; 0xef8 <malloc+0x6c>
     eb2:	40 81       	ld	r20, Z
     eb4:	51 81       	ldd	r21, Z+1	; 0x01
     eb6:	02 81       	ldd	r16, Z+2	; 0x02
     eb8:	13 81       	ldd	r17, Z+3	; 0x03
     eba:	48 17       	cp	r20, r24
     ebc:	59 07       	cpc	r21, r25
     ebe:	c8 f0       	brcs	.+50     	; 0xef2 <malloc+0x66>
     ec0:	84 17       	cp	r24, r20
     ec2:	95 07       	cpc	r25, r21
     ec4:	69 f4       	brne	.+26     	; 0xee0 <malloc+0x54>
     ec6:	10 97       	sbiw	r26, 0x00	; 0
     ec8:	31 f0       	breq	.+12     	; 0xed6 <malloc+0x4a>
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	0c 93       	st	X, r16
     ece:	12 97       	sbiw	r26, 0x02	; 2
     ed0:	13 96       	adiw	r26, 0x03	; 3
     ed2:	1c 93       	st	X, r17
     ed4:	27 c0       	rjmp	.+78     	; 0xf24 <malloc+0x98>
     ed6:	00 93 55 02 	sts	0x0255, r16	; 0x800255 <__flp>
     eda:	10 93 56 02 	sts	0x0256, r17	; 0x800256 <__flp+0x1>
     ede:	22 c0       	rjmp	.+68     	; 0xf24 <malloc+0x98>
     ee0:	21 15       	cp	r18, r1
     ee2:	31 05       	cpc	r19, r1
     ee4:	19 f0       	breq	.+6      	; 0xeec <malloc+0x60>
     ee6:	42 17       	cp	r20, r18
     ee8:	53 07       	cpc	r21, r19
     eea:	18 f4       	brcc	.+6      	; 0xef2 <malloc+0x66>
     eec:	9a 01       	movw	r18, r20
     eee:	bd 01       	movw	r22, r26
     ef0:	ef 01       	movw	r28, r30
     ef2:	df 01       	movw	r26, r30
     ef4:	f8 01       	movw	r30, r16
     ef6:	db cf       	rjmp	.-74     	; 0xeae <malloc+0x22>
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	f9 f0       	breq	.+62     	; 0xf3c <malloc+0xb0>
     efe:	28 1b       	sub	r18, r24
     f00:	39 0b       	sbc	r19, r25
     f02:	24 30       	cpi	r18, 0x04	; 4
     f04:	31 05       	cpc	r19, r1
     f06:	80 f4       	brcc	.+32     	; 0xf28 <malloc+0x9c>
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	9b 81       	ldd	r25, Y+3	; 0x03
     f0c:	61 15       	cp	r22, r1
     f0e:	71 05       	cpc	r23, r1
     f10:	21 f0       	breq	.+8      	; 0xf1a <malloc+0x8e>
     f12:	fb 01       	movw	r30, r22
     f14:	93 83       	std	Z+3, r25	; 0x03
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <malloc+0x96>
     f1a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <__flp+0x1>
     f1e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <__flp>
     f22:	fe 01       	movw	r30, r28
     f24:	32 96       	adiw	r30, 0x02	; 2
     f26:	44 c0       	rjmp	.+136    	; 0xfb0 <malloc+0x124>
     f28:	fe 01       	movw	r30, r28
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	81 93       	st	Z+, r24
     f30:	91 93       	st	Z+, r25
     f32:	22 50       	subi	r18, 0x02	; 2
     f34:	31 09       	sbc	r19, r1
     f36:	39 83       	std	Y+1, r19	; 0x01
     f38:	28 83       	st	Y, r18
     f3a:	3a c0       	rjmp	.+116    	; 0xfb0 <malloc+0x124>
     f3c:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <__brkval>
     f40:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <__brkval+0x1>
     f44:	23 2b       	or	r18, r19
     f46:	41 f4       	brne	.+16     	; 0xf58 <malloc+0xcc>
     f48:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f4c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f50:	30 93 54 02 	sts	0x0254, r19	; 0x800254 <__brkval+0x1>
     f54:	20 93 53 02 	sts	0x0253, r18	; 0x800253 <__brkval>
     f58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f60:	21 15       	cp	r18, r1
     f62:	31 05       	cpc	r19, r1
     f64:	41 f4       	brne	.+16     	; 0xf76 <malloc+0xea>
     f66:	2d b7       	in	r18, 0x3d	; 61
     f68:	3e b7       	in	r19, 0x3e	; 62
     f6a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f6e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f72:	24 1b       	sub	r18, r20
     f74:	35 0b       	sbc	r19, r21
     f76:	e0 91 53 02 	lds	r30, 0x0253	; 0x800253 <__brkval>
     f7a:	f0 91 54 02 	lds	r31, 0x0254	; 0x800254 <__brkval+0x1>
     f7e:	e2 17       	cp	r30, r18
     f80:	f3 07       	cpc	r31, r19
     f82:	a0 f4       	brcc	.+40     	; 0xfac <malloc+0x120>
     f84:	2e 1b       	sub	r18, r30
     f86:	3f 0b       	sbc	r19, r31
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	78 f0       	brcs	.+30     	; 0xfac <malloc+0x120>
     f8e:	ac 01       	movw	r20, r24
     f90:	4e 5f       	subi	r20, 0xFE	; 254
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	24 17       	cp	r18, r20
     f96:	35 07       	cpc	r19, r21
     f98:	48 f0       	brcs	.+18     	; 0xfac <malloc+0x120>
     f9a:	4e 0f       	add	r20, r30
     f9c:	5f 1f       	adc	r21, r31
     f9e:	50 93 54 02 	sts	0x0254, r21	; 0x800254 <__brkval+0x1>
     fa2:	40 93 53 02 	sts	0x0253, r20	; 0x800253 <__brkval>
     fa6:	81 93       	st	Z+, r24
     fa8:	91 93       	st	Z+, r25
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <malloc+0x124>
     fac:	e0 e0       	ldi	r30, 0x00	; 0
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	cf 01       	movw	r24, r30
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	08 95       	ret

00000fbc <free>:
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <free+0xa>
     fc4:	81 c0       	rjmp	.+258    	; 0x10c8 <free+0x10c>
     fc6:	fc 01       	movw	r30, r24
     fc8:	32 97       	sbiw	r30, 0x02	; 2
     fca:	13 82       	std	Z+3, r1	; 0x03
     fcc:	12 82       	std	Z+2, r1	; 0x02
     fce:	a0 91 55 02 	lds	r26, 0x0255	; 0x800255 <__flp>
     fd2:	b0 91 56 02 	lds	r27, 0x0256	; 0x800256 <__flp+0x1>
     fd6:	10 97       	sbiw	r26, 0x00	; 0
     fd8:	81 f4       	brne	.+32     	; 0xffa <free+0x3e>
     fda:	20 81       	ld	r18, Z
     fdc:	31 81       	ldd	r19, Z+1	; 0x01
     fde:	82 0f       	add	r24, r18
     fe0:	93 1f       	adc	r25, r19
     fe2:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <__brkval>
     fe6:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <__brkval+0x1>
     fea:	28 17       	cp	r18, r24
     fec:	39 07       	cpc	r19, r25
     fee:	51 f5       	brne	.+84     	; 0x1044 <free+0x88>
     ff0:	f0 93 54 02 	sts	0x0254, r31	; 0x800254 <__brkval+0x1>
     ff4:	e0 93 53 02 	sts	0x0253, r30	; 0x800253 <__brkval>
     ff8:	67 c0       	rjmp	.+206    	; 0x10c8 <free+0x10c>
     ffa:	ed 01       	movw	r28, r26
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	ce 17       	cp	r28, r30
    1002:	df 07       	cpc	r29, r31
    1004:	40 f4       	brcc	.+16     	; 0x1016 <free+0x5a>
    1006:	4a 81       	ldd	r20, Y+2	; 0x02
    1008:	5b 81       	ldd	r21, Y+3	; 0x03
    100a:	9e 01       	movw	r18, r28
    100c:	41 15       	cp	r20, r1
    100e:	51 05       	cpc	r21, r1
    1010:	f1 f0       	breq	.+60     	; 0x104e <free+0x92>
    1012:	ea 01       	movw	r28, r20
    1014:	f5 cf       	rjmp	.-22     	; 0x1000 <free+0x44>
    1016:	d3 83       	std	Z+3, r29	; 0x03
    1018:	c2 83       	std	Z+2, r28	; 0x02
    101a:	40 81       	ld	r20, Z
    101c:	51 81       	ldd	r21, Z+1	; 0x01
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	c8 17       	cp	r28, r24
    1024:	d9 07       	cpc	r29, r25
    1026:	59 f4       	brne	.+22     	; 0x103e <free+0x82>
    1028:	88 81       	ld	r24, Y
    102a:	99 81       	ldd	r25, Y+1	; 0x01
    102c:	84 0f       	add	r24, r20
    102e:	95 1f       	adc	r25, r21
    1030:	02 96       	adiw	r24, 0x02	; 2
    1032:	91 83       	std	Z+1, r25	; 0x01
    1034:	80 83       	st	Z, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	93 83       	std	Z+3, r25	; 0x03
    103c:	82 83       	std	Z+2, r24	; 0x02
    103e:	21 15       	cp	r18, r1
    1040:	31 05       	cpc	r19, r1
    1042:	29 f4       	brne	.+10     	; 0x104e <free+0x92>
    1044:	f0 93 56 02 	sts	0x0256, r31	; 0x800256 <__flp+0x1>
    1048:	e0 93 55 02 	sts	0x0255, r30	; 0x800255 <__flp>
    104c:	3d c0       	rjmp	.+122    	; 0x10c8 <free+0x10c>
    104e:	e9 01       	movw	r28, r18
    1050:	fb 83       	std	Y+3, r31	; 0x03
    1052:	ea 83       	std	Y+2, r30	; 0x02
    1054:	49 91       	ld	r20, Y+
    1056:	59 91       	ld	r21, Y+
    1058:	c4 0f       	add	r28, r20
    105a:	d5 1f       	adc	r29, r21
    105c:	ec 17       	cp	r30, r28
    105e:	fd 07       	cpc	r31, r29
    1060:	61 f4       	brne	.+24     	; 0x107a <free+0xbe>
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	84 0f       	add	r24, r20
    1068:	95 1f       	adc	r25, r21
    106a:	02 96       	adiw	r24, 0x02	; 2
    106c:	e9 01       	movw	r28, r18
    106e:	99 83       	std	Y+1, r25	; 0x01
    1070:	88 83       	st	Y, r24
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	93 81       	ldd	r25, Z+3	; 0x03
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	e0 e0       	ldi	r30, 0x00	; 0
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	8d 91       	ld	r24, X+
    1082:	9c 91       	ld	r25, X
    1084:	13 97       	sbiw	r26, 0x03	; 3
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	19 f0       	breq	.+6      	; 0x1090 <free+0xd4>
    108a:	fd 01       	movw	r30, r26
    108c:	dc 01       	movw	r26, r24
    108e:	f7 cf       	rjmp	.-18     	; 0x107e <free+0xc2>
    1090:	8d 91       	ld	r24, X+
    1092:	9c 91       	ld	r25, X
    1094:	11 97       	sbiw	r26, 0x01	; 1
    1096:	9d 01       	movw	r18, r26
    1098:	2e 5f       	subi	r18, 0xFE	; 254
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	20 91 53 02 	lds	r18, 0x0253	; 0x800253 <__brkval>
    10a4:	30 91 54 02 	lds	r19, 0x0254	; 0x800254 <__brkval+0x1>
    10a8:	28 17       	cp	r18, r24
    10aa:	39 07       	cpc	r19, r25
    10ac:	69 f4       	brne	.+26     	; 0x10c8 <free+0x10c>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	29 f4       	brne	.+10     	; 0x10bc <free+0x100>
    10b2:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <__flp+0x1>
    10b6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__flp>
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <free+0x104>
    10bc:	13 82       	std	Z+3, r1	; 0x03
    10be:	12 82       	std	Z+2, r1	; 0x02
    10c0:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <__brkval+0x1>
    10c4:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <__brkval>
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <sprintf>:
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	2e 97       	sbiw	r28, 0x0e	; 14
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	0d 89       	ldd	r16, Y+21	; 0x15
    10e8:	1e 89       	ldd	r17, Y+22	; 0x16
    10ea:	86 e0       	ldi	r24, 0x06	; 6
    10ec:	8c 83       	std	Y+4, r24	; 0x04
    10ee:	1a 83       	std	Y+2, r17	; 0x02
    10f0:	09 83       	std	Y+1, r16	; 0x01
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	9f e7       	ldi	r25, 0x7F	; 127
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	ae 01       	movw	r20, r28
    10fc:	47 5e       	subi	r20, 0xE7	; 231
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	6f 89       	ldd	r22, Y+23	; 0x17
    1102:	78 8d       	ldd	r23, Y+24	; 0x18
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	10 d0       	rcall	.+32     	; 0x112a <vfprintf>
    110a:	ef 81       	ldd	r30, Y+7	; 0x07
    110c:	f8 85       	ldd	r31, Y+8	; 0x08
    110e:	e0 0f       	add	r30, r16
    1110:	f1 1f       	adc	r31, r17
    1112:	10 82       	st	Z, r1
    1114:	2e 96       	adiw	r28, 0x0e	; 14
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <vfprintf>:
    112a:	2f 92       	push	r2
    112c:	3f 92       	push	r3
    112e:	4f 92       	push	r4
    1130:	5f 92       	push	r5
    1132:	6f 92       	push	r6
    1134:	7f 92       	push	r7
    1136:	8f 92       	push	r8
    1138:	9f 92       	push	r9
    113a:	af 92       	push	r10
    113c:	bf 92       	push	r11
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	2b 97       	sbiw	r28, 0x0b	; 11
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	6c 01       	movw	r12, r24
    1160:	7b 01       	movw	r14, r22
    1162:	8a 01       	movw	r16, r20
    1164:	fc 01       	movw	r30, r24
    1166:	17 82       	std	Z+7, r1	; 0x07
    1168:	16 82       	std	Z+6, r1	; 0x06
    116a:	83 81       	ldd	r24, Z+3	; 0x03
    116c:	81 ff       	sbrs	r24, 1
    116e:	bf c1       	rjmp	.+894    	; 0x14ee <vfprintf+0x3c4>
    1170:	ce 01       	movw	r24, r28
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	3c 01       	movw	r6, r24
    1176:	f6 01       	movw	r30, r12
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	f7 01       	movw	r30, r14
    117c:	93 fd       	sbrc	r25, 3
    117e:	85 91       	lpm	r24, Z+
    1180:	93 ff       	sbrs	r25, 3
    1182:	81 91       	ld	r24, Z+
    1184:	7f 01       	movw	r14, r30
    1186:	88 23       	and	r24, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <vfprintf+0x62>
    118a:	ad c1       	rjmp	.+858    	; 0x14e6 <vfprintf+0x3bc>
    118c:	85 32       	cpi	r24, 0x25	; 37
    118e:	39 f4       	brne	.+14     	; 0x119e <vfprintf+0x74>
    1190:	93 fd       	sbrc	r25, 3
    1192:	85 91       	lpm	r24, Z+
    1194:	93 ff       	sbrs	r25, 3
    1196:	81 91       	ld	r24, Z+
    1198:	7f 01       	movw	r14, r30
    119a:	85 32       	cpi	r24, 0x25	; 37
    119c:	21 f4       	brne	.+8      	; 0x11a6 <vfprintf+0x7c>
    119e:	b6 01       	movw	r22, r12
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	d6 d1       	rcall	.+940    	; 0x1550 <fputc>
    11a4:	e8 cf       	rjmp	.-48     	; 0x1176 <vfprintf+0x4c>
    11a6:	91 2c       	mov	r9, r1
    11a8:	21 2c       	mov	r2, r1
    11aa:	31 2c       	mov	r3, r1
    11ac:	ff e1       	ldi	r31, 0x1F	; 31
    11ae:	f3 15       	cp	r31, r3
    11b0:	d8 f0       	brcs	.+54     	; 0x11e8 <vfprintf+0xbe>
    11b2:	8b 32       	cpi	r24, 0x2B	; 43
    11b4:	79 f0       	breq	.+30     	; 0x11d4 <vfprintf+0xaa>
    11b6:	38 f4       	brcc	.+14     	; 0x11c6 <vfprintf+0x9c>
    11b8:	80 32       	cpi	r24, 0x20	; 32
    11ba:	79 f0       	breq	.+30     	; 0x11da <vfprintf+0xb0>
    11bc:	83 32       	cpi	r24, 0x23	; 35
    11be:	a1 f4       	brne	.+40     	; 0x11e8 <vfprintf+0xbe>
    11c0:	23 2d       	mov	r18, r3
    11c2:	20 61       	ori	r18, 0x10	; 16
    11c4:	1d c0       	rjmp	.+58     	; 0x1200 <vfprintf+0xd6>
    11c6:	8d 32       	cpi	r24, 0x2D	; 45
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <vfprintf+0xb8>
    11ca:	80 33       	cpi	r24, 0x30	; 48
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <vfprintf+0xbe>
    11ce:	23 2d       	mov	r18, r3
    11d0:	21 60       	ori	r18, 0x01	; 1
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <vfprintf+0xd6>
    11d4:	83 2d       	mov	r24, r3
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	38 2e       	mov	r3, r24
    11da:	e3 2d       	mov	r30, r3
    11dc:	e4 60       	ori	r30, 0x04	; 4
    11de:	3e 2e       	mov	r3, r30
    11e0:	2a c0       	rjmp	.+84     	; 0x1236 <vfprintf+0x10c>
    11e2:	f3 2d       	mov	r31, r3
    11e4:	f8 60       	ori	r31, 0x08	; 8
    11e6:	1d c0       	rjmp	.+58     	; 0x1222 <vfprintf+0xf8>
    11e8:	37 fc       	sbrc	r3, 7
    11ea:	2d c0       	rjmp	.+90     	; 0x1246 <vfprintf+0x11c>
    11ec:	20 ed       	ldi	r18, 0xD0	; 208
    11ee:	28 0f       	add	r18, r24
    11f0:	2a 30       	cpi	r18, 0x0A	; 10
    11f2:	40 f0       	brcs	.+16     	; 0x1204 <vfprintf+0xda>
    11f4:	8e 32       	cpi	r24, 0x2E	; 46
    11f6:	b9 f4       	brne	.+46     	; 0x1226 <vfprintf+0xfc>
    11f8:	36 fc       	sbrc	r3, 6
    11fa:	75 c1       	rjmp	.+746    	; 0x14e6 <vfprintf+0x3bc>
    11fc:	23 2d       	mov	r18, r3
    11fe:	20 64       	ori	r18, 0x40	; 64
    1200:	32 2e       	mov	r3, r18
    1202:	19 c0       	rjmp	.+50     	; 0x1236 <vfprintf+0x10c>
    1204:	36 fe       	sbrs	r3, 6
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <vfprintf+0xea>
    1208:	8a e0       	ldi	r24, 0x0A	; 10
    120a:	98 9e       	mul	r9, r24
    120c:	20 0d       	add	r18, r0
    120e:	11 24       	eor	r1, r1
    1210:	92 2e       	mov	r9, r18
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <vfprintf+0x10c>
    1214:	ea e0       	ldi	r30, 0x0A	; 10
    1216:	2e 9e       	mul	r2, r30
    1218:	20 0d       	add	r18, r0
    121a:	11 24       	eor	r1, r1
    121c:	22 2e       	mov	r2, r18
    121e:	f3 2d       	mov	r31, r3
    1220:	f0 62       	ori	r31, 0x20	; 32
    1222:	3f 2e       	mov	r3, r31
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <vfprintf+0x10c>
    1226:	8c 36       	cpi	r24, 0x6C	; 108
    1228:	21 f4       	brne	.+8      	; 0x1232 <vfprintf+0x108>
    122a:	83 2d       	mov	r24, r3
    122c:	80 68       	ori	r24, 0x80	; 128
    122e:	38 2e       	mov	r3, r24
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x10c>
    1232:	88 36       	cpi	r24, 0x68	; 104
    1234:	41 f4       	brne	.+16     	; 0x1246 <vfprintf+0x11c>
    1236:	f7 01       	movw	r30, r14
    1238:	93 fd       	sbrc	r25, 3
    123a:	85 91       	lpm	r24, Z+
    123c:	93 ff       	sbrs	r25, 3
    123e:	81 91       	ld	r24, Z+
    1240:	7f 01       	movw	r14, r30
    1242:	81 11       	cpse	r24, r1
    1244:	b3 cf       	rjmp	.-154    	; 0x11ac <vfprintf+0x82>
    1246:	98 2f       	mov	r25, r24
    1248:	9f 7d       	andi	r25, 0xDF	; 223
    124a:	95 54       	subi	r25, 0x45	; 69
    124c:	93 30       	cpi	r25, 0x03	; 3
    124e:	28 f4       	brcc	.+10     	; 0x125a <vfprintf+0x130>
    1250:	0c 5f       	subi	r16, 0xFC	; 252
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	9f e3       	ldi	r25, 0x3F	; 63
    1256:	99 83       	std	Y+1, r25	; 0x01
    1258:	0d c0       	rjmp	.+26     	; 0x1274 <vfprintf+0x14a>
    125a:	83 36       	cpi	r24, 0x63	; 99
    125c:	31 f0       	breq	.+12     	; 0x126a <vfprintf+0x140>
    125e:	83 37       	cpi	r24, 0x73	; 115
    1260:	71 f0       	breq	.+28     	; 0x127e <vfprintf+0x154>
    1262:	83 35       	cpi	r24, 0x53	; 83
    1264:	09 f0       	breq	.+2      	; 0x1268 <vfprintf+0x13e>
    1266:	55 c0       	rjmp	.+170    	; 0x1312 <vfprintf+0x1e8>
    1268:	20 c0       	rjmp	.+64     	; 0x12aa <vfprintf+0x180>
    126a:	f8 01       	movw	r30, r16
    126c:	80 81       	ld	r24, Z
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	0e 5f       	subi	r16, 0xFE	; 254
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	88 24       	eor	r8, r8
    1276:	83 94       	inc	r8
    1278:	91 2c       	mov	r9, r1
    127a:	53 01       	movw	r10, r6
    127c:	12 c0       	rjmp	.+36     	; 0x12a2 <vfprintf+0x178>
    127e:	28 01       	movw	r4, r16
    1280:	f2 e0       	ldi	r31, 0x02	; 2
    1282:	4f 0e       	add	r4, r31
    1284:	51 1c       	adc	r5, r1
    1286:	f8 01       	movw	r30, r16
    1288:	a0 80       	ld	r10, Z
    128a:	b1 80       	ldd	r11, Z+1	; 0x01
    128c:	36 fe       	sbrs	r3, 6
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <vfprintf+0x16c>
    1290:	69 2d       	mov	r22, r9
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfprintf+0x170>
    1296:	6f ef       	ldi	r22, 0xFF	; 255
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	c5 01       	movw	r24, r10
    129c:	4e d1       	rcall	.+668    	; 0x153a <strnlen>
    129e:	4c 01       	movw	r8, r24
    12a0:	82 01       	movw	r16, r4
    12a2:	f3 2d       	mov	r31, r3
    12a4:	ff 77       	andi	r31, 0x7F	; 127
    12a6:	3f 2e       	mov	r3, r31
    12a8:	15 c0       	rjmp	.+42     	; 0x12d4 <vfprintf+0x1aa>
    12aa:	28 01       	movw	r4, r16
    12ac:	22 e0       	ldi	r18, 0x02	; 2
    12ae:	42 0e       	add	r4, r18
    12b0:	51 1c       	adc	r5, r1
    12b2:	f8 01       	movw	r30, r16
    12b4:	a0 80       	ld	r10, Z
    12b6:	b1 80       	ldd	r11, Z+1	; 0x01
    12b8:	36 fe       	sbrs	r3, 6
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <vfprintf+0x198>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x19c>
    12c2:	6f ef       	ldi	r22, 0xFF	; 255
    12c4:	7f ef       	ldi	r23, 0xFF	; 255
    12c6:	c5 01       	movw	r24, r10
    12c8:	2d d1       	rcall	.+602    	; 0x1524 <strnlen_P>
    12ca:	4c 01       	movw	r8, r24
    12cc:	f3 2d       	mov	r31, r3
    12ce:	f0 68       	ori	r31, 0x80	; 128
    12d0:	3f 2e       	mov	r3, r31
    12d2:	82 01       	movw	r16, r4
    12d4:	33 fc       	sbrc	r3, 3
    12d6:	19 c0       	rjmp	.+50     	; 0x130a <vfprintf+0x1e0>
    12d8:	82 2d       	mov	r24, r2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	88 16       	cp	r8, r24
    12de:	99 06       	cpc	r9, r25
    12e0:	a0 f4       	brcc	.+40     	; 0x130a <vfprintf+0x1e0>
    12e2:	b6 01       	movw	r22, r12
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	33 d1       	rcall	.+614    	; 0x1550 <fputc>
    12ea:	2a 94       	dec	r2
    12ec:	f5 cf       	rjmp	.-22     	; 0x12d8 <vfprintf+0x1ae>
    12ee:	f5 01       	movw	r30, r10
    12f0:	37 fc       	sbrc	r3, 7
    12f2:	85 91       	lpm	r24, Z+
    12f4:	37 fe       	sbrs	r3, 7
    12f6:	81 91       	ld	r24, Z+
    12f8:	5f 01       	movw	r10, r30
    12fa:	b6 01       	movw	r22, r12
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	28 d1       	rcall	.+592    	; 0x1550 <fputc>
    1300:	21 10       	cpse	r2, r1
    1302:	2a 94       	dec	r2
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	82 1a       	sub	r8, r18
    1308:	91 08       	sbc	r9, r1
    130a:	81 14       	cp	r8, r1
    130c:	91 04       	cpc	r9, r1
    130e:	79 f7       	brne	.-34     	; 0x12ee <vfprintf+0x1c4>
    1310:	e1 c0       	rjmp	.+450    	; 0x14d4 <vfprintf+0x3aa>
    1312:	84 36       	cpi	r24, 0x64	; 100
    1314:	11 f0       	breq	.+4      	; 0x131a <vfprintf+0x1f0>
    1316:	89 36       	cpi	r24, 0x69	; 105
    1318:	39 f5       	brne	.+78     	; 0x1368 <vfprintf+0x23e>
    131a:	f8 01       	movw	r30, r16
    131c:	37 fe       	sbrs	r3, 7
    131e:	07 c0       	rjmp	.+14     	; 0x132e <vfprintf+0x204>
    1320:	60 81       	ld	r22, Z
    1322:	71 81       	ldd	r23, Z+1	; 0x01
    1324:	82 81       	ldd	r24, Z+2	; 0x02
    1326:	93 81       	ldd	r25, Z+3	; 0x03
    1328:	0c 5f       	subi	r16, 0xFC	; 252
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	08 c0       	rjmp	.+16     	; 0x133e <vfprintf+0x214>
    132e:	60 81       	ld	r22, Z
    1330:	71 81       	ldd	r23, Z+1	; 0x01
    1332:	07 2e       	mov	r0, r23
    1334:	00 0c       	add	r0, r0
    1336:	88 0b       	sbc	r24, r24
    1338:	99 0b       	sbc	r25, r25
    133a:	0e 5f       	subi	r16, 0xFE	; 254
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	f3 2d       	mov	r31, r3
    1340:	ff 76       	andi	r31, 0x6F	; 111
    1342:	3f 2e       	mov	r3, r31
    1344:	97 ff       	sbrs	r25, 7
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x230>
    1348:	90 95       	com	r25
    134a:	80 95       	com	r24
    134c:	70 95       	com	r23
    134e:	61 95       	neg	r22
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	f0 68       	ori	r31, 0x80	; 128
    1358:	3f 2e       	mov	r3, r31
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	a3 01       	movw	r20, r6
    1360:	33 d1       	rcall	.+614    	; 0x15c8 <__ultoa_invert>
    1362:	88 2e       	mov	r8, r24
    1364:	86 18       	sub	r8, r6
    1366:	44 c0       	rjmp	.+136    	; 0x13f0 <vfprintf+0x2c6>
    1368:	85 37       	cpi	r24, 0x75	; 117
    136a:	31 f4       	brne	.+12     	; 0x1378 <vfprintf+0x24e>
    136c:	23 2d       	mov	r18, r3
    136e:	2f 7e       	andi	r18, 0xEF	; 239
    1370:	b2 2e       	mov	r11, r18
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	25 c0       	rjmp	.+74     	; 0x13c2 <vfprintf+0x298>
    1378:	93 2d       	mov	r25, r3
    137a:	99 7f       	andi	r25, 0xF9	; 249
    137c:	b9 2e       	mov	r11, r25
    137e:	8f 36       	cpi	r24, 0x6F	; 111
    1380:	c1 f0       	breq	.+48     	; 0x13b2 <vfprintf+0x288>
    1382:	18 f4       	brcc	.+6      	; 0x138a <vfprintf+0x260>
    1384:	88 35       	cpi	r24, 0x58	; 88
    1386:	79 f0       	breq	.+30     	; 0x13a6 <vfprintf+0x27c>
    1388:	ae c0       	rjmp	.+348    	; 0x14e6 <vfprintf+0x3bc>
    138a:	80 37       	cpi	r24, 0x70	; 112
    138c:	19 f0       	breq	.+6      	; 0x1394 <vfprintf+0x26a>
    138e:	88 37       	cpi	r24, 0x78	; 120
    1390:	21 f0       	breq	.+8      	; 0x139a <vfprintf+0x270>
    1392:	a9 c0       	rjmp	.+338    	; 0x14e6 <vfprintf+0x3bc>
    1394:	e9 2f       	mov	r30, r25
    1396:	e0 61       	ori	r30, 0x10	; 16
    1398:	be 2e       	mov	r11, r30
    139a:	b4 fe       	sbrs	r11, 4
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <vfprintf+0x28e>
    139e:	fb 2d       	mov	r31, r11
    13a0:	f4 60       	ori	r31, 0x04	; 4
    13a2:	bf 2e       	mov	r11, r31
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <vfprintf+0x28e>
    13a6:	34 fe       	sbrs	r3, 4
    13a8:	0a c0       	rjmp	.+20     	; 0x13be <vfprintf+0x294>
    13aa:	29 2f       	mov	r18, r25
    13ac:	26 60       	ori	r18, 0x06	; 6
    13ae:	b2 2e       	mov	r11, r18
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <vfprintf+0x294>
    13b2:	28 e0       	ldi	r18, 0x08	; 8
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <vfprintf+0x298>
    13b8:	20 e1       	ldi	r18, 0x10	; 16
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x298>
    13be:	20 e1       	ldi	r18, 0x10	; 16
    13c0:	32 e0       	ldi	r19, 0x02	; 2
    13c2:	f8 01       	movw	r30, r16
    13c4:	b7 fe       	sbrs	r11, 7
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <vfprintf+0x2ac>
    13c8:	60 81       	ld	r22, Z
    13ca:	71 81       	ldd	r23, Z+1	; 0x01
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	93 81       	ldd	r25, Z+3	; 0x03
    13d0:	0c 5f       	subi	r16, 0xFC	; 252
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <vfprintf+0x2b8>
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 5f       	subi	r16, 0xFE	; 254
    13e0:	1f 4f       	sbci	r17, 0xFF	; 255
    13e2:	a3 01       	movw	r20, r6
    13e4:	f1 d0       	rcall	.+482    	; 0x15c8 <__ultoa_invert>
    13e6:	88 2e       	mov	r8, r24
    13e8:	86 18       	sub	r8, r6
    13ea:	fb 2d       	mov	r31, r11
    13ec:	ff 77       	andi	r31, 0x7F	; 127
    13ee:	3f 2e       	mov	r3, r31
    13f0:	36 fe       	sbrs	r3, 6
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <vfprintf+0x2e4>
    13f4:	23 2d       	mov	r18, r3
    13f6:	2e 7f       	andi	r18, 0xFE	; 254
    13f8:	a2 2e       	mov	r10, r18
    13fa:	89 14       	cp	r8, r9
    13fc:	58 f4       	brcc	.+22     	; 0x1414 <vfprintf+0x2ea>
    13fe:	34 fe       	sbrs	r3, 4
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <vfprintf+0x2ee>
    1402:	32 fc       	sbrc	r3, 2
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <vfprintf+0x2ee>
    1406:	83 2d       	mov	r24, r3
    1408:	8e 7e       	andi	r24, 0xEE	; 238
    140a:	a8 2e       	mov	r10, r24
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <vfprintf+0x2ee>
    140e:	b8 2c       	mov	r11, r8
    1410:	a3 2c       	mov	r10, r3
    1412:	03 c0       	rjmp	.+6      	; 0x141a <vfprintf+0x2f0>
    1414:	b8 2c       	mov	r11, r8
    1416:	01 c0       	rjmp	.+2      	; 0x141a <vfprintf+0x2f0>
    1418:	b9 2c       	mov	r11, r9
    141a:	a4 fe       	sbrs	r10, 4
    141c:	0f c0       	rjmp	.+30     	; 0x143c <vfprintf+0x312>
    141e:	fe 01       	movw	r30, r28
    1420:	e8 0d       	add	r30, r8
    1422:	f1 1d       	adc	r31, r1
    1424:	80 81       	ld	r24, Z
    1426:	80 33       	cpi	r24, 0x30	; 48
    1428:	21 f4       	brne	.+8      	; 0x1432 <vfprintf+0x308>
    142a:	9a 2d       	mov	r25, r10
    142c:	99 7e       	andi	r25, 0xE9	; 233
    142e:	a9 2e       	mov	r10, r25
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <vfprintf+0x31a>
    1432:	a2 fe       	sbrs	r10, 2
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0x318>
    1436:	b3 94       	inc	r11
    1438:	b3 94       	inc	r11
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <vfprintf+0x31a>
    143c:	8a 2d       	mov	r24, r10
    143e:	86 78       	andi	r24, 0x86	; 134
    1440:	09 f0       	breq	.+2      	; 0x1444 <vfprintf+0x31a>
    1442:	b3 94       	inc	r11
    1444:	a3 fc       	sbrc	r10, 3
    1446:	10 c0       	rjmp	.+32     	; 0x1468 <vfprintf+0x33e>
    1448:	a0 fe       	sbrs	r10, 0
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x32e>
    144c:	b2 14       	cp	r11, r2
    144e:	80 f4       	brcc	.+32     	; 0x1470 <vfprintf+0x346>
    1450:	28 0c       	add	r2, r8
    1452:	92 2c       	mov	r9, r2
    1454:	9b 18       	sub	r9, r11
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <vfprintf+0x348>
    1458:	b2 14       	cp	r11, r2
    145a:	58 f4       	brcc	.+22     	; 0x1472 <vfprintf+0x348>
    145c:	b6 01       	movw	r22, r12
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	76 d0       	rcall	.+236    	; 0x1550 <fputc>
    1464:	b3 94       	inc	r11
    1466:	f8 cf       	rjmp	.-16     	; 0x1458 <vfprintf+0x32e>
    1468:	b2 14       	cp	r11, r2
    146a:	18 f4       	brcc	.+6      	; 0x1472 <vfprintf+0x348>
    146c:	2b 18       	sub	r2, r11
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <vfprintf+0x34a>
    1470:	98 2c       	mov	r9, r8
    1472:	21 2c       	mov	r2, r1
    1474:	a4 fe       	sbrs	r10, 4
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <vfprintf+0x36c>
    1478:	b6 01       	movw	r22, r12
    147a:	80 e3       	ldi	r24, 0x30	; 48
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	68 d0       	rcall	.+208    	; 0x1550 <fputc>
    1480:	a2 fe       	sbrs	r10, 2
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <vfprintf+0x386>
    1484:	a1 fc       	sbrc	r10, 1
    1486:	03 c0       	rjmp	.+6      	; 0x148e <vfprintf+0x364>
    1488:	88 e7       	ldi	r24, 0x78	; 120
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <vfprintf+0x368>
    148e:	88 e5       	ldi	r24, 0x58	; 88
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	b6 01       	movw	r22, r12
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <vfprintf+0x384>
    1496:	8a 2d       	mov	r24, r10
    1498:	86 78       	andi	r24, 0x86	; 134
    149a:	51 f0       	breq	.+20     	; 0x14b0 <vfprintf+0x386>
    149c:	a1 fe       	sbrs	r10, 1
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <vfprintf+0x37a>
    14a0:	8b e2       	ldi	r24, 0x2B	; 43
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <vfprintf+0x37c>
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	a7 fc       	sbrc	r10, 7
    14a8:	8d e2       	ldi	r24, 0x2D	; 45
    14aa:	b6 01       	movw	r22, r12
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	50 d0       	rcall	.+160    	; 0x1550 <fputc>
    14b0:	89 14       	cp	r8, r9
    14b2:	30 f4       	brcc	.+12     	; 0x14c0 <vfprintf+0x396>
    14b4:	b6 01       	movw	r22, r12
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	4a d0       	rcall	.+148    	; 0x1550 <fputc>
    14bc:	9a 94       	dec	r9
    14be:	f8 cf       	rjmp	.-16     	; 0x14b0 <vfprintf+0x386>
    14c0:	8a 94       	dec	r8
    14c2:	f3 01       	movw	r30, r6
    14c4:	e8 0d       	add	r30, r8
    14c6:	f1 1d       	adc	r31, r1
    14c8:	80 81       	ld	r24, Z
    14ca:	b6 01       	movw	r22, r12
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	40 d0       	rcall	.+128    	; 0x1550 <fputc>
    14d0:	81 10       	cpse	r8, r1
    14d2:	f6 cf       	rjmp	.-20     	; 0x14c0 <vfprintf+0x396>
    14d4:	22 20       	and	r2, r2
    14d6:	09 f4       	brne	.+2      	; 0x14da <vfprintf+0x3b0>
    14d8:	4e ce       	rjmp	.-868    	; 0x1176 <vfprintf+0x4c>
    14da:	b6 01       	movw	r22, r12
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	37 d0       	rcall	.+110    	; 0x1550 <fputc>
    14e2:	2a 94       	dec	r2
    14e4:	f7 cf       	rjmp	.-18     	; 0x14d4 <vfprintf+0x3aa>
    14e6:	f6 01       	movw	r30, r12
    14e8:	86 81       	ldd	r24, Z+6	; 0x06
    14ea:	97 81       	ldd	r25, Z+7	; 0x07
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x3c8>
    14ee:	8f ef       	ldi	r24, 0xFF	; 255
    14f0:	9f ef       	ldi	r25, 0xFF	; 255
    14f2:	2b 96       	adiw	r28, 0x0b	; 11
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	9f 90       	pop	r9
    1514:	8f 90       	pop	r8
    1516:	7f 90       	pop	r7
    1518:	6f 90       	pop	r6
    151a:	5f 90       	pop	r5
    151c:	4f 90       	pop	r4
    151e:	3f 90       	pop	r3
    1520:	2f 90       	pop	r2
    1522:	08 95       	ret

00001524 <strnlen_P>:
    1524:	fc 01       	movw	r30, r24
    1526:	05 90       	lpm	r0, Z+
    1528:	61 50       	subi	r22, 0x01	; 1
    152a:	70 40       	sbci	r23, 0x00	; 0
    152c:	01 10       	cpse	r0, r1
    152e:	d8 f7       	brcc	.-10     	; 0x1526 <strnlen_P+0x2>
    1530:	80 95       	com	r24
    1532:	90 95       	com	r25
    1534:	8e 0f       	add	r24, r30
    1536:	9f 1f       	adc	r25, r31
    1538:	08 95       	ret

0000153a <strnlen>:
    153a:	fc 01       	movw	r30, r24
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	70 40       	sbci	r23, 0x00	; 0
    1540:	01 90       	ld	r0, Z+
    1542:	01 10       	cpse	r0, r1
    1544:	d8 f7       	brcc	.-10     	; 0x153c <strnlen+0x2>
    1546:	80 95       	com	r24
    1548:	90 95       	com	r25
    154a:	8e 0f       	add	r24, r30
    154c:	9f 1f       	adc	r25, r31
    154e:	08 95       	ret

00001550 <fputc>:
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	fb 01       	movw	r30, r22
    155a:	23 81       	ldd	r18, Z+3	; 0x03
    155c:	21 fd       	sbrc	r18, 1
    155e:	03 c0       	rjmp	.+6      	; 0x1566 <fputc+0x16>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	2c c0       	rjmp	.+88     	; 0x15be <fputc+0x6e>
    1566:	22 ff       	sbrs	r18, 2
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <fputc+0x46>
    156a:	46 81       	ldd	r20, Z+6	; 0x06
    156c:	57 81       	ldd	r21, Z+7	; 0x07
    156e:	24 81       	ldd	r18, Z+4	; 0x04
    1570:	35 81       	ldd	r19, Z+5	; 0x05
    1572:	42 17       	cp	r20, r18
    1574:	53 07       	cpc	r21, r19
    1576:	44 f4       	brge	.+16     	; 0x1588 <fputc+0x38>
    1578:	a0 81       	ld	r26, Z
    157a:	b1 81       	ldd	r27, Z+1	; 0x01
    157c:	9d 01       	movw	r18, r26
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	31 83       	std	Z+1, r19	; 0x01
    1584:	20 83       	st	Z, r18
    1586:	8c 93       	st	X, r24
    1588:	26 81       	ldd	r18, Z+6	; 0x06
    158a:	37 81       	ldd	r19, Z+7	; 0x07
    158c:	2f 5f       	subi	r18, 0xFF	; 255
    158e:	3f 4f       	sbci	r19, 0xFF	; 255
    1590:	37 83       	std	Z+7, r19	; 0x07
    1592:	26 83       	std	Z+6, r18	; 0x06
    1594:	14 c0       	rjmp	.+40     	; 0x15be <fputc+0x6e>
    1596:	8b 01       	movw	r16, r22
    1598:	ec 01       	movw	r28, r24
    159a:	fb 01       	movw	r30, r22
    159c:	00 84       	ldd	r0, Z+8	; 0x08
    159e:	f1 85       	ldd	r31, Z+9	; 0x09
    15a0:	e0 2d       	mov	r30, r0
    15a2:	09 95       	icall
    15a4:	89 2b       	or	r24, r25
    15a6:	e1 f6       	brne	.-72     	; 0x1560 <fputc+0x10>
    15a8:	d8 01       	movw	r26, r16
    15aa:	16 96       	adiw	r26, 0x06	; 6
    15ac:	8d 91       	ld	r24, X+
    15ae:	9c 91       	ld	r25, X
    15b0:	17 97       	sbiw	r26, 0x07	; 7
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	17 96       	adiw	r26, 0x07	; 7
    15b6:	9c 93       	st	X, r25
    15b8:	8e 93       	st	-X, r24
    15ba:	16 97       	sbiw	r26, 0x06	; 6
    15bc:	ce 01       	movw	r24, r28
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	08 95       	ret

000015c8 <__ultoa_invert>:
    15c8:	fa 01       	movw	r30, r20
    15ca:	aa 27       	eor	r26, r26
    15cc:	28 30       	cpi	r18, 0x08	; 8
    15ce:	51 f1       	breq	.+84     	; 0x1624 <__ultoa_invert+0x5c>
    15d0:	20 31       	cpi	r18, 0x10	; 16
    15d2:	81 f1       	breq	.+96     	; 0x1634 <__ultoa_invert+0x6c>
    15d4:	e8 94       	clt
    15d6:	6f 93       	push	r22
    15d8:	6e 7f       	andi	r22, 0xFE	; 254
    15da:	6e 5f       	subi	r22, 0xFE	; 254
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	8f 4f       	sbci	r24, 0xFF	; 255
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	af 4f       	sbci	r26, 0xFF	; 255
    15e4:	b1 e0       	ldi	r27, 0x01	; 1
    15e6:	3e d0       	rcall	.+124    	; 0x1664 <__ultoa_invert+0x9c>
    15e8:	b4 e0       	ldi	r27, 0x04	; 4
    15ea:	3c d0       	rcall	.+120    	; 0x1664 <__ultoa_invert+0x9c>
    15ec:	67 0f       	add	r22, r23
    15ee:	78 1f       	adc	r23, r24
    15f0:	89 1f       	adc	r24, r25
    15f2:	9a 1f       	adc	r25, r26
    15f4:	a1 1d       	adc	r26, r1
    15f6:	68 0f       	add	r22, r24
    15f8:	79 1f       	adc	r23, r25
    15fa:	8a 1f       	adc	r24, r26
    15fc:	91 1d       	adc	r25, r1
    15fe:	a1 1d       	adc	r26, r1
    1600:	6a 0f       	add	r22, r26
    1602:	71 1d       	adc	r23, r1
    1604:	81 1d       	adc	r24, r1
    1606:	91 1d       	adc	r25, r1
    1608:	a1 1d       	adc	r26, r1
    160a:	20 d0       	rcall	.+64     	; 0x164c <__ultoa_invert+0x84>
    160c:	09 f4       	brne	.+2      	; 0x1610 <__ultoa_invert+0x48>
    160e:	68 94       	set
    1610:	3f 91       	pop	r19
    1612:	2a e0       	ldi	r18, 0x0A	; 10
    1614:	26 9f       	mul	r18, r22
    1616:	11 24       	eor	r1, r1
    1618:	30 19       	sub	r19, r0
    161a:	30 5d       	subi	r19, 0xD0	; 208
    161c:	31 93       	st	Z+, r19
    161e:	de f6       	brtc	.-74     	; 0x15d6 <__ultoa_invert+0xe>
    1620:	cf 01       	movw	r24, r30
    1622:	08 95       	ret
    1624:	46 2f       	mov	r20, r22
    1626:	47 70       	andi	r20, 0x07	; 7
    1628:	40 5d       	subi	r20, 0xD0	; 208
    162a:	41 93       	st	Z+, r20
    162c:	b3 e0       	ldi	r27, 0x03	; 3
    162e:	0f d0       	rcall	.+30     	; 0x164e <__ultoa_invert+0x86>
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__ultoa_invert+0x5c>
    1632:	f6 cf       	rjmp	.-20     	; 0x1620 <__ultoa_invert+0x58>
    1634:	46 2f       	mov	r20, r22
    1636:	4f 70       	andi	r20, 0x0F	; 15
    1638:	40 5d       	subi	r20, 0xD0	; 208
    163a:	4a 33       	cpi	r20, 0x3A	; 58
    163c:	18 f0       	brcs	.+6      	; 0x1644 <__ultoa_invert+0x7c>
    163e:	49 5d       	subi	r20, 0xD9	; 217
    1640:	31 fd       	sbrc	r19, 1
    1642:	40 52       	subi	r20, 0x20	; 32
    1644:	41 93       	st	Z+, r20
    1646:	02 d0       	rcall	.+4      	; 0x164c <__ultoa_invert+0x84>
    1648:	a9 f7       	brne	.-22     	; 0x1634 <__ultoa_invert+0x6c>
    164a:	ea cf       	rjmp	.-44     	; 0x1620 <__ultoa_invert+0x58>
    164c:	b4 e0       	ldi	r27, 0x04	; 4
    164e:	a6 95       	lsr	r26
    1650:	97 95       	ror	r25
    1652:	87 95       	ror	r24
    1654:	77 95       	ror	r23
    1656:	67 95       	ror	r22
    1658:	ba 95       	dec	r27
    165a:	c9 f7       	brne	.-14     	; 0x164e <__ultoa_invert+0x86>
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	61 05       	cpc	r22, r1
    1660:	71 05       	cpc	r23, r1
    1662:	08 95       	ret
    1664:	9b 01       	movw	r18, r22
    1666:	ac 01       	movw	r20, r24
    1668:	0a 2e       	mov	r0, r26
    166a:	06 94       	lsr	r0
    166c:	57 95       	ror	r21
    166e:	47 95       	ror	r20
    1670:	37 95       	ror	r19
    1672:	27 95       	ror	r18
    1674:	ba 95       	dec	r27
    1676:	c9 f7       	brne	.-14     	; 0x166a <__ultoa_invert+0xa2>
    1678:	62 0f       	add	r22, r18
    167a:	73 1f       	adc	r23, r19
    167c:	84 1f       	adc	r24, r20
    167e:	95 1f       	adc	r25, r21
    1680:	a0 1d       	adc	r26, r0
    1682:	08 95       	ret

00001684 <_exit>:
    1684:	f8 94       	cli

00001686 <__stop_program>:
    1686:	ff cf       	rjmp	.-2      	; 0x1686 <__stop_program>
