
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  00001af2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800300  00800300  00001d86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004692  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ac2  00000000  00000000  000067be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003150  00000000  00000000  00008280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000b3d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000914f  00000000  00000000  0000bb80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d1  00000000  00000000  00014ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f8  00000000  00000000  000165a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00016898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	54 c4       	rjmp	.+2216   	; 0x8de <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c7       	rjmp	.+3762   	; 0xef8 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e2 ef       	ldi	r30, 0xF2	; 242
      ac:	fa e1       	ldi	r31, 0x1A	; 26
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 30       	cpi	r26, 0x00	; 0
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a2 38       	cpi	r26, 0x82	; 130
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	88 d2       	rcall	.+1296   	; 0x5e0 <main>
      d0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <_exit>

000000d4 <__bad_interrupt>:
      d4:	53 c3       	rjmp	.+1702   	; 0x77c <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     120:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     12c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 20 03 	sts	0x0320, r19	; 0x800320 <g_ADCCount+0x1>
     13a:	20 93 1f 03 	sts	0x031F, r18	; 0x80031f <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e5 5f       	subi	r30, 0xF5	; 245
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <g_ADCCount>
     162:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     19a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     1a6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     1aa:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     1ae:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     1b2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2351>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     1cc:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     1d0:	f2 d1       	rcall	.+996    	; 0x5b6 <LL_UpdateStatus>
     1d2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2352>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <SERVER_Task+0x6a>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     1e2:	88 23       	and	r24, r24
     1e4:	29 f0       	breq	.+10     	; 0x1f0 <SERVER_Task+0x66>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_timer+0x23>
     1ec:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     1f0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2353>
     1f4:	67 9b       	sbis	0x0c, 7	; 12
     1f6:	0c c0       	rjmp	.+24     	; 0x210 <SERVER_Task+0x86>
     1f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2351>
     1fc:	81 11       	cpse	r24, r1
     1fe:	05 c0       	rjmp	.+10     	; 0x20a <SERVER_Task+0x80>
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <_timer+0x1a>
     206:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <_timer+0x47>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2351>
     210:	66 9b       	sbis	0x0c, 6	; 12
     212:	20 c0       	rjmp	.+64     	; 0x254 <SERVER_Task+0xca>
     214:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2352>
     218:	81 11       	cpse	r24, r1
     21a:	19 c0       	rjmp	.+50     	; 0x24e <SERVER_Task+0xc4>
     21c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     220:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     224:	00 97       	sbiw	r24, 0x00	; 0
     226:	49 f4       	brne	.+18     	; 0x23a <SERVER_Task+0xb0>
     228:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     22c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     230:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <STAGE2+0x1>
     234:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <STAGE2>
     238:	05 c0       	rjmp	.+10     	; 0x244 <SERVER_Task+0xba>
     23a:	77 d1       	rcall	.+750    	; 0x52a <LL_Next>
     23c:	90 93 70 03 	sts	0x0370, r25	; 0x800370 <STAGE2+0x1>
     240:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <STAGE2>
     244:	ea e7       	ldi	r30, 0x7A	; 122
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	80 64       	ori	r24, 0x40	; 64
     24c:	80 83       	st	Z, r24
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2352>
     254:	65 9b       	sbis	0x0c, 5	; 12
     256:	1a c0       	rjmp	.+52     	; 0x28c <SERVER_Task+0x102>
     258:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2353>
     25c:	81 11       	cpse	r24, r1
     25e:	13 c0       	rjmp	.+38     	; 0x286 <SERVER_Task+0xfc>
     260:	63 e0       	ldi	r22, 0x03	; 3
     262:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     266:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     26a:	a5 d1       	rcall	.+842    	; 0x5b6 <LL_UpdateStatus>
     26c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     270:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     274:	5a d1       	rcall	.+692    	; 0x52a <LL_Next>
     276:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <HEAD+0x1>
     27a:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <HEAD>
     27e:	7b d1       	rcall	.+758    	; 0x576 <LL_GetClass>
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	09 f4       	brne	.+2      	; 0x286 <SERVER_Task+0xfc>
     284:	ba d5       	rcall	.+2932   	; 0xdfa <SYS_Rampdown>
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2353>
     28c:	08 95       	ret

0000028e <ADC_Task>:
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	cf 93       	push	r28
     298:	eb e0       	ldi	r30, 0x0B	; 11
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	a0 81       	ld	r26, Z
     29e:	b1 81       	ldd	r27, Z+1	; 0x01
     2a0:	60 81       	ld	r22, Z
     2a2:	71 81       	ldd	r23, Z+1	; 0x01
     2a4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <ticks.2361>
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <ticks.2361>
     2ae:	c1 2c       	mov	r12, r1
     2b0:	d1 2c       	mov	r13, r1
     2b2:	76 01       	movw	r14, r12
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	4f b7       	in	r20, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e5 5f       	subi	r30, 0xF5	; 245
     2c4:	fc 4f       	sbci	r31, 0xFC	; 252
     2c6:	20 81       	ld	r18, Z
     2c8:	31 81       	ldd	r19, Z+1	; 0x01
     2ca:	c2 0e       	add	r12, r18
     2cc:	d3 1e       	adc	r13, r19
     2ce:	e1 1c       	adc	r14, r1
     2d0:	f1 1c       	adc	r15, r1
     2d2:	20 81       	ld	r18, Z
     2d4:	31 81       	ldd	r19, Z+1	; 0x01
     2d6:	26 17       	cp	r18, r22
     2d8:	37 07       	cpc	r19, r23
     2da:	38 f4       	brcc	.+14     	; 0x2ea <ADC_Task+0x5c>
     2dc:	fc 01       	movw	r30, r24
     2de:	ee 0f       	add	r30, r30
     2e0:	ff 1f       	adc	r31, r31
     2e2:	e5 5f       	subi	r30, 0xF5	; 245
     2e4:	fc 4f       	sbci	r31, 0xFC	; 252
     2e6:	60 81       	ld	r22, Z
     2e8:	71 81       	ldd	r23, Z+1	; 0x01
     2ea:	fc 01       	movw	r30, r24
     2ec:	ee 0f       	add	r30, r30
     2ee:	ff 1f       	adc	r31, r31
     2f0:	e5 5f       	subi	r30, 0xF5	; 245
     2f2:	fc 4f       	sbci	r31, 0xFC	; 252
     2f4:	20 81       	ld	r18, Z
     2f6:	31 81       	ldd	r19, Z+1	; 0x01
     2f8:	a2 17       	cp	r26, r18
     2fa:	b3 07       	cpc	r27, r19
     2fc:	08 f0       	brcs	.+2      	; 0x300 <ADC_Task+0x72>
     2fe:	4d c0       	rjmp	.+154    	; 0x39a <ADC_Task+0x10c>
     300:	fc 01       	movw	r30, r24
     302:	ee 0f       	add	r30, r30
     304:	ff 1f       	adc	r31, r31
     306:	e5 5f       	subi	r30, 0xF5	; 245
     308:	fc 4f       	sbci	r31, 0xFC	; 252
     30a:	a0 81       	ld	r26, Z
     30c:	b1 81       	ldd	r27, Z+1	; 0x01
     30e:	45 c0       	rjmp	.+138    	; 0x39a <ADC_Task+0x10c>
     310:	8f b7       	in	r24, 0x3f	; 63
     312:	f8 94       	cli
     314:	ca 1a       	sub	r12, r26
     316:	db 0a       	sbc	r13, r27
     318:	e1 08       	sbc	r14, r1
     31a:	f1 08       	sbc	r15, r1
     31c:	c6 1a       	sub	r12, r22
     31e:	d7 0a       	sbc	r13, r23
     320:	e1 08       	sbc	r14, r1
     322:	f1 08       	sbc	r15, r1
     324:	f6 94       	lsr	r15
     326:	e7 94       	ror	r14
     328:	d7 94       	ror	r13
     32a:	c7 94       	ror	r12
     32c:	f6 94       	lsr	r15
     32e:	e7 94       	ror	r14
     330:	d7 94       	ror	r13
     332:	c7 94       	ror	r12
     334:	8f bf       	out	0x3f, r24	; 63
     336:	cf b7       	in	r28, 0x3f	; 63
     338:	f8 94       	cli
     33a:	d7 01       	movw	r26, r14
     33c:	c6 01       	movw	r24, r12
     33e:	0b 97       	sbiw	r24, 0x0b	; 11
     340:	a1 09       	sbc	r26, r1
     342:	b1 09       	sbc	r27, r1
     344:	8d 3d       	cpi	r24, 0xDD	; 221
     346:	93 40       	sbci	r25, 0x03	; 3
     348:	a1 05       	cpc	r26, r1
     34a:	b1 05       	cpc	r27, r1
     34c:	a0 f4       	brcc	.+40     	; 0x376 <ADC_Task+0xe8>
     34e:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     352:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     356:	14 d1       	rcall	.+552    	; 0x580 <LL_GetRefl>
     358:	a0 e0       	ldi	r26, 0x00	; 0
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	c8 16       	cp	r12, r24
     35e:	d9 06       	cpc	r13, r25
     360:	ea 06       	cpc	r14, r26
     362:	fb 06       	cpc	r15, r27
     364:	40 f4       	brcc	.+16     	; 0x376 <ADC_Task+0xe8>
     366:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     36a:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	11 f0       	breq	.+4      	; 0x376 <ADC_Task+0xe8>
     372:	b6 01       	movw	r22, r12
     374:	10 d1       	rcall	.+544    	; 0x596 <LL_UpdateRefl>
     376:	cf bf       	out	0x3f, r28	; 63
     378:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount+0x1>
     37c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_ADCCount>
     380:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_timer+0x11>
     384:	66 9b       	sbis	0x0c, 6	; 12
     386:	06 c0       	rjmp	.+12     	; 0x394 <ADC_Task+0x106>
     388:	ea e7       	ldi	r30, 0x7A	; 122
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	80 64       	ori	r24, 0x40	; 64
     390:	80 83       	st	Z, r24
     392:	0a c0       	rjmp	.+20     	; 0x3a8 <ADC_Task+0x11a>
     394:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <ticks.2361>
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <ADC_Task+0x11a>
     39a:	4f bf       	out	0x3f, r20	; 63
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	86 30       	cpi	r24, 0x06	; 6
     3a0:	91 05       	cpc	r25, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <ADC_Task+0x118>
     3a4:	89 cf       	rjmp	.-238    	; 0x2b8 <ADC_Task+0x2a>
     3a6:	b4 cf       	rjmp	.-152    	; 0x310 <ADC_Task+0x82>
     3a8:	cf 91       	pop	r28
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <MAG_Task>:
     3b4:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2383>
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <tick.2383>
     3be:	64 99       	sbic	0x0c, 4	; 12
     3c0:	1a c0       	rjmp	.+52     	; 0x3f6 <MAG_Task+0x42>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3c8:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3cc:	f4 d0       	rcall	.+488    	; 0x5b6 <LL_UpdateStatus>
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3d4:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3d8:	e4 d0       	rcall	.+456    	; 0x5a2 <LL_UpdateMag>
     3da:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     3de:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     3e2:	a3 d0       	rcall	.+326    	; 0x52a <LL_Next>
     3e4:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     3e8:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     3ec:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2383>
     3f0:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_timer+0x1a>
     3f4:	08 95       	ret
     3f6:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2383>
     3fa:	8d 33       	cpi	r24, 0x3D	; 61
     3fc:	c8 f0       	brcs	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     404:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     408:	d6 d0       	rcall	.+428    	; 0x5b6 <LL_UpdateStatus>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     410:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     414:	c6 d0       	rcall	.+396    	; 0x5a2 <LL_UpdateMag>
     416:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     41a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     41e:	85 d0       	rcall	.+266    	; 0x52a <LL_Next>
     420:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <STAGE1+0x1>
     424:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <STAGE1>
     428:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2383>
     42c:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <_timer+0x1a>
     430:	08 95       	ret

00000432 <EXIT_Task>:
     432:	cf 93       	push	r28
     434:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <g_ExitBuffer>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	d1 f0       	breq	.+52     	; 0x470 <EXIT_Task+0x3e>
     43c:	c0 91 76 03 	lds	r28, 0x0376	; 0x800376 <stepper+0x4>
     440:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     444:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     448:	96 d0       	rcall	.+300    	; 0x576 <LL_GetClass>
     44a:	e8 2f       	mov	r30, r24
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	ea 5f       	subi	r30, 0xFA	; 250
     450:	fe 4f       	sbci	r31, 0xFE	; 254
     452:	80 81       	ld	r24, Z
     454:	c8 13       	cpse	r28, r24
     456:	04 c0       	rjmp	.+8      	; 0x460 <EXIT_Task+0x2e>
     458:	80 e8       	ldi	r24, 0x80	; 128
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	a1 d1       	rcall	.+834    	; 0x7a0 <PWM>
     45e:	06 c0       	rjmp	.+12     	; 0x46c <EXIT_Task+0x3a>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_ExitBuffer>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9a d1       	rcall	.+820    	; 0x7a0 <PWM>
     46c:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_timer+0x23>
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <BTN_Task>:
     474:	89 b1       	in	r24, 0x09	; 9
     476:	83 70       	andi	r24, 0x03	; 3
     478:	b9 f0       	breq	.+46     	; 0x4a8 <BTN_Task+0x34>
     47a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
     484:	83 30       	cpi	r24, 0x03	; 3
     486:	90 f0       	brcs	.+36     	; 0x4ac <BTN_Task+0x38>
     488:	89 b1       	in	r24, 0x09	; 9
     48a:	83 70       	andi	r24, 0x03	; 3
     48c:	79 f0       	breq	.+30     	; 0x4ac <BTN_Task+0x38>
     48e:	89 b1       	in	r24, 0x09	; 9
     490:	83 70       	andi	r24, 0x03	; 3
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	19 f4       	brne	.+6      	; 0x49c <BTN_Task+0x28>
     496:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <g_PauseRequest>
     49a:	08 95       	ret
     49c:	89 b1       	in	r24, 0x09	; 9
     49e:	83 70       	andi	r24, 0x03	; 3
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	21 f4       	brne	.+8      	; 0x4ac <BTN_Task+0x38>
     4a4:	aa c4       	rjmp	.+2388   	; 0xdfa <SYS_Rampdown>
     4a6:	08 95       	ret
     4a8:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
     4ac:	08 95       	ret

000004ae <WATCHDOG_Task>:
     4ae:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <g_WDTimeout>
     4b2:	82 30       	cpi	r24, 0x02	; 2
     4b4:	08 f0       	brcs	.+2      	; 0x4b8 <WATCHDOG_Task+0xa>
     4b6:	a1 d4       	rcall	.+2370   	; 0xdfa <SYS_Rampdown>
     4b8:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <g_WDTimeout>
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <g_WDTimeout>
     4c2:	08 95       	ret

000004c4 <D_Blinky>:
     4c4:	9b b1       	in	r25, 0x0b	; 11
     4c6:	80 ea       	ldi	r24, 0xA0	; 160
     4c8:	89 27       	eor	r24, r25
     4ca:	8b b9       	out	0x0b, r24	; 11
     4cc:	08 95       	ret

000004ce <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	g_Timer++;
     4ce:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_Timer>
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <g_Timer>
     4d8:	08 95       	ret

000004da <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	7c 01       	movw	r14, r24
     4e6:	16 2f       	mov	r17, r22
     4e8:	d4 2f       	mov	r29, r20
     4ea:	c2 2f       	mov	r28, r18
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	02 d7       	rcall	.+3588   	; 0x12f6 <malloc>
     4f2:	fc 01       	movw	r30, r24
     4f4:	f1 82       	std	Z+1, r15	; 0x01
     4f6:	e0 82       	st	Z, r14
     4f8:	12 83       	std	Z+2, r17	; 0x02
     4fa:	d3 83       	std	Z+3, r29	; 0x03
     4fc:	c4 83       	std	Z+4, r28	; 0x04
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <LL_ItemListInit>:
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	f0 d6       	rcall	.+3552   	; 0x12f6 <malloc>
     516:	fc 01       	movw	r30, r24
     518:	d1 83       	std	Z+1, r29	; 0x01
     51a:	c0 83       	st	Z, r28
     51c:	15 82       	std	Z+5, r1	; 0x05
     51e:	14 82       	std	Z+4, r1	; 0x04
     520:	13 82       	std	Z+3, r1	; 0x03
     522:	12 82       	std	Z+2, r1	; 0x02
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <LL_Next>:
     52a:	fc 01       	movw	r30, r24
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	93 81       	ldd	r25, Z+3	; 0x03
     530:	08 95       	ret

00000532 <LL_AddBack>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	cb 01       	movw	r24, r22
     53a:	01 c0       	rjmp	.+2      	; 0x53e <LL_AddBack+0xc>
     53c:	e9 01       	movw	r28, r18
     53e:	2a 81       	ldd	r18, Y+2	; 0x02
     540:	3b 81       	ldd	r19, Y+3	; 0x03
     542:	21 15       	cp	r18, r1
     544:	31 05       	cpc	r19, r1
     546:	d1 f7       	brne	.-12     	; 0x53c <LL_AddBack+0xa>
     548:	e0 df       	rcall	.-64     	; 0x50a <LL_ItemListInit>
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <LL_Size>:
     554:	dc 01       	movw	r26, r24
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	13 97       	sbiw	r26, 0x03	; 3
     55e:	30 97       	sbiw	r30, 0x00	; 0
     560:	41 f0       	breq	.+16     	; 0x572 <LL_Size+0x1e>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	02 80       	ldd	r0, Z+2	; 0x02
     568:	f3 81       	ldd	r31, Z+3	; 0x03
     56a:	e0 2d       	mov	r30, r0
     56c:	30 97       	sbiw	r30, 0x00	; 0
     56e:	d1 f7       	brne	.-12     	; 0x564 <LL_Size+0x10>
     570:	08 95       	ret
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	08 95       	ret

00000576 <LL_GetClass>:
     576:	dc 01       	movw	r26, r24
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	83 81       	ldd	r24, Z+3	; 0x03
     57e:	08 95       	ret

00000580 <LL_GetRefl>:
     580:	dc 01       	movw	r26, r24
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	08 95       	ret

0000058c <LL_GetMag>:
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	08 95       	ret

00000596 <LL_UpdateRefl>:
     596:	dc 01       	movw	r26, r24
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	71 83       	std	Z+1, r23	; 0x01
     59e:	60 83       	st	Z, r22
     5a0:	08 95       	ret

000005a2 <LL_UpdateMag>:
     5a2:	dc 01       	movw	r26, r24
     5a4:	ed 91       	ld	r30, X+
     5a6:	fc 91       	ld	r31, X
     5a8:	62 83       	std	Z+2, r22	; 0x02
     5aa:	08 95       	ret

000005ac <LL_UpdateClass>:
     5ac:	dc 01       	movw	r26, r24
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	63 83       	std	Z+3, r22	; 0x03
     5b4:	08 95       	ret

000005b6 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5b6:	dc 01       	movw	r26, r24
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	64 83       	std	Z+4, r22	; 0x04
     5be:	08 95       	ret

000005c0 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5c0:	dc 01       	movw	r26, r24
     5c2:	ed 91       	ld	r30, X+
     5c4:	fc 91       	ld	r31, X
     5c6:	84 81       	ldd	r24, Z+4	; 0x04
     5c8:	08 95       	ret

000005ca <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     5ce:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     5d0:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     5d2:	80 ef       	ldi	r24, 0xF0	; 240
     5d4:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     5d6:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     5d8:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret

000005e0 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     5e0:	8f d2       	rcall	.+1310   	; 0xb00 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     5e2:	89 b1       	in	r24, 0x09	; 9
     5e4:	83 70       	andi	r24, 0x03	; 3
     5e6:	e9 f7       	brne	.-6      	; 0x5e2 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     5e8:	8b e1       	ldi	r24, 0x1B	; 27
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	85 d5       	rcall	.+2826   	; 0x10f8 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ee:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	45 ec       	ldi	r20, 0xC5	; 197
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	02 d5       	rcall	.+2564   	; 0x1006 <TIMER_Create>
		_timer[0].state = READY;
     602:	c7 e2       	ldi	r28, 0x27	; 39
     604:	d3 e0       	ldi	r29, 0x03	; 3
     606:	12 e0       	ldi	r17, 0x02	; 2
     608:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	47 e4       	ldi	r20, 0x47	; 71
     610:	51 e0       	ldi	r21, 0x01	; 1
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	f5 d4       	rcall	.+2538   	; 0x1006 <TIMER_Create>
		_timer[1].state = BLOCKED;
     61c:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4a ed       	ldi	r20, 0xDA	; 218
     624:	51 e0       	ldi	r21, 0x01	; 1
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	eb d4       	rcall	.+2518   	; 0x1006 <TIMER_Create>
		_timer[2].state = BLOCKED;
     630:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	49 e1       	ldi	r20, 0x19	; 25
     638:	52 e0       	ldi	r21, 0x02	; 2
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	e1 d4       	rcall	.+2498   	; 0x1006 <TIMER_Create>
		_timer[3].state = BLOCKED;
     644:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(943, 1, ADD_Task, NULL);		// Item Enter Handling
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	47 e6       	ldi	r20, 0x67	; 103
     64c:	52 e0       	ldi	r21, 0x02	; 2
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	8f ea       	ldi	r24, 0xAF	; 175
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	d7 d4       	rcall	.+2478   	; 0x1006 <TIMER_Create>
		_timer[4].state = BLOCKED;
     658:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	4a e3       	ldi	r20, 0x3A	; 58
     660:	52 e0       	ldi	r21, 0x02	; 2
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	84 e6       	ldi	r24, 0x64	; 100
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	cd d4       	rcall	.+2458   	; 0x1006 <TIMER_Create>
		_timer[5].state = READY;
     66c:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	42 e6       	ldi	r20, 0x62	; 98
     674:	52 e0       	ldi	r21, 0x02	; 2
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 ed       	ldi	r24, 0xD0	; 208
     67c:	97 e0       	ldi	r25, 0x07	; 7
     67e:	c3 d4       	rcall	.+2438   	; 0x1006 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     680:	1e af       	std	Y+62, r17	; 0x3e
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	47 e5       	ldi	r20, 0x57	; 87
     688:	52 e0       	ldi	r21, 0x02	; 2
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     690:	93 e1       	ldi	r25, 0x13	; 19
     692:	b9 d4       	rcall	.+2418   	; 0x1006 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     694:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <_timer+0x47>
     698:	8e e2       	ldi	r24, 0x2E	; 46
     69a:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     69c:	2d d5       	rcall	.+2650   	; 0x10f8 <UART_SendString>
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	7e d0       	rcall	.+252    	; 0x7a0 <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     6a4:	78 94       	sei
     6a6:	e1 2c       	mov	r14, r1
// 					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     6a8:	f1 2c       	mov	r15, r1
     6aa:	cc 24       	eor	r12, r12
     6ac:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6ae:	d1 2c       	mov	r13, r1
     6b0:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <g_PauseRequest>
     6b4:	88 23       	and	r24, r24
     6b6:	19 f0       	breq	.+6      	; 0x6be <main+0xde>
     6b8:	80 e4       	ldi	r24, 0x40	; 64
     6ba:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     6bc:	95 d2       	rcall	.+1322   	; 0xbe8 <SYS_Pause>
     6be:	c0 91 05 03 	lds	r28, 0x0305	; 0x800305 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     6c2:	d0 91 06 03 	lds	r29, 0x0306	; 0x800306 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6c6:	20 97       	sbiw	r28, 0x00	; 0
     6c8:	99 f3       	breq	.-26     	; 0x6b0 <main+0xd0>
     6ca:	20 97       	sbiw	r28, 0x00	; 0
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <main+0xf0>
     6ce:	4f c0       	rjmp	.+158    	; 0x76e <main+0x18e>
     6d0:	ce 01       	movw	r24, r28
     6d2:	51 df       	rcall	.-350    	; 0x576 <LL_GetClass>
     6d4:	84 30       	cpi	r24, 0x04	; 4
     6d6:	09 f0       	breq	.+2      	; 0x6da <main+0xfa>
     6d8:	4a c0       	rjmp	.+148    	; 0x76e <main+0x18e>
     6da:	ce 01       	movw	r24, r28
     6dc:	71 df       	rcall	.-286    	; 0x5c0 <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <main+0x104>
     6e2:	45 c0       	rjmp	.+138    	; 0x76e <main+0x18e>
     6e4:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     6e6:	4c df       	rcall	.-360    	; 0x580 <LL_GetRefl>
     6e8:	8c 01       	movw	r16, r24
     6ea:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     6ec:	4f df       	rcall	.-354    	; 0x58c <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     6ee:	88 23       	and	r24, r24
     6f0:	91 f0       	breq	.+36     	; 0x716 <main+0x136>
     6f2:	c8 01       	movw	r24, r16
     6f4:	44 97       	sbiw	r24, 0x14	; 20
     6f6:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     6f8:	91 05       	cpc	r25, r1
     6fa:	20 f4       	brcc	.+8      	; 0x704 <main+0x124>
     6fc:	62 e0       	ldi	r22, 0x02	; 2
     6fe:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     700:	55 df       	rcall	.-342    	; 0x5ac <LL_UpdateClass>
     702:	1a c0       	rjmp	.+52     	; 0x738 <main+0x158>
     704:	0c 52       	subi	r16, 0x2C	; 44
     706:	11 40       	sbci	r17, 0x01	; 1
     708:	0f 35       	cpi	r16, 0x5F	; 95
					{
						LL_UpdateClass(temp, STEEL);
     70a:	11 40       	sbci	r17, 0x01	; 1
     70c:	a8 f4       	brcc	.+42     	; 0x738 <main+0x158>
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     712:	4c df       	rcall	.-360    	; 0x5ac <LL_UpdateClass>
     714:	11 c0       	rjmp	.+34     	; 0x738 <main+0x158>
     716:	c8 01       	movw	r24, r16
     718:	89 58       	subi	r24, 0x89	; 137
     71a:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     71c:	0b 97       	sbiw	r24, 0x0b	; 11
     71e:	20 f4       	brcc	.+8      	; 0x728 <main+0x148>
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     724:	43 df       	rcall	.-378    	; 0x5ac <LL_UpdateClass>
     726:	08 c0       	rjmp	.+16     	; 0x738 <main+0x158>
     728:	00 52       	subi	r16, 0x20	; 32
     72a:	13 40       	sbci	r17, 0x03	; 3
     72c:	07 39       	cpi	r16, 0x97	; 151
				{
					LL_UpdateClass(temp, BLACK);
     72e:	11 05       	cpc	r17, r1
     730:	18 f4       	brcc	.+6      	; 0x738 <main+0x158>
     732:	61 e0       	ldi	r22, 0x01	; 1
// 					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
				if(memory == 0)
     734:	ce 01       	movw	r24, r28
     736:	3a df       	rcall	.-396    	; 0x5ac <LL_UpdateClass>
     738:	e1 14       	cp	r14, r1
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     73a:	f1 04       	cpc	r15, r1
     73c:	c1 f4       	brne	.+48     	; 0x76e <main+0x18e>
     73e:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     742:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     746:	17 df       	rcall	.-466    	; 0x576 <LL_GetClass>
     748:	e8 2f       	mov	r30, r24
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	e1 5f       	subi	r30, 0xF1	; 241
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	10 81       	ld	r17, Z
     752:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     756:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     75a:	0d df       	rcall	.-486    	; 0x576 <LL_GetClass>
     75c:	e8 2f       	mov	r30, r24
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	e1 5f       	subi	r30, 0xF1	; 241
     762:	fe 4f       	sbci	r31, 0xFE	; 254
     764:	80 81       	ld	r24, Z
     766:	61 2f       	mov	r22, r17
					memory = 1;
     768:	a5 d0       	rcall	.+330    	; 0x8b4 <STEPPER_SetRotation>
     76a:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     76c:	fd 2c       	mov	r15, r13
     76e:	ce 01       	movw	r24, r28
     770:	dc de       	rcall	.-584    	; 0x52a <LL_Next>
     772:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     774:	89 2b       	or	r24, r25
     776:	09 f0       	breq	.+2      	; 0x77a <main+0x19a>
     778:	a8 cf       	rjmp	.-176    	; 0x6ca <main+0xea>
     77a:	9a cf       	rjmp	.-204    	; 0x6b0 <main+0xd0>

0000077c <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     786:	8a ea       	ldi	r24, 0xAA	; 170
     788:	88 b9       	out	0x08, r24	; 8
     78a:	fe cf       	rjmp	.-4      	; 0x788 <__vector_default+0xc>

0000078c <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     78c:	84 b5       	in	r24, 0x24	; 36
     78e:	83 68       	ori	r24, 0x83	; 131
     790:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     792:	85 b5       	in	r24, 0x25	; 37
     794:	83 60       	ori	r24, 0x03	; 3
     796:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     798:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     79c:	87 bd       	out	0x27, r24	; 39
     79e:	08 95       	ret

000007a0 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     7a0:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     7a2:	9f b7       	in	r25, 0x3f	; 63
     7a4:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     7a6:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <BELT_SPEED>
     7aa:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     7ac:	23 2b       	or	r18, r19
     7ae:	31 f0       	breq	.+12     	; 0x7bc <PWM+0x1c>
		{
			g_MotorOn = 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <g_MotorOn>
			PORTB = ~0x0E;
     7b6:	81 ef       	ldi	r24, 0xF1	; 241
     7b8:	85 b9       	out	0x05, r24	; 5
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     7bc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <g_MotorOn>
			PORTB = ~0x0F;
     7c0:	80 ef       	ldi	r24, 0xF0	; 240
     7c2:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7c4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     7c6:	08 95       	ret

000007c8 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     7c8:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     7ca:	e2 e7       	ldi	r30, 0x72	; 114
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	10 82       	st	Z, r1
	stepper.direction = 1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     7d4:	13 82       	std	Z+3, r1	; 0x03
     7d6:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     7d8:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     7da:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     7dc:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     7de:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     7e0:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     7e2:	88 ec       	ldi	r24, 0xC8	; 200
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	96 83       	std	Z+6, r25	; 0x06
     7e8:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     7ea:	80 e3       	ldi	r24, 0x30	; 48
     7ec:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     7ee:	84 e9       	ldi	r24, 0x94	; 148
     7f0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     7f4:	e0 eb       	ldi	r30, 0xB0	; 176
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     7fe:	e0 e7       	ldi	r30, 0x70	; 112
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	82 60       	ori	r24, 0x02	; 2
     806:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     808:	e1 eb       	ldi	r30, 0xB1	; 177
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	87 60       	ori	r24, 0x07	; 7
     810:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     812:	78 94       	sei
     814:	08 95       	ret

00000816 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	86 1b       	sub	r24, r22
     81a:	91 09       	sbc	r25, r1
	if (steps >= 0)
     81c:	52 f0       	brmi	.+20     	; 0x832 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     81e:	85 36       	cpi	r24, 0x65	; 101
     820:	91 05       	cpc	r25, r1
     822:	8c f0       	brlt	.+34     	; 0x846 <STEPPER_NumSteps+0x30>
     824:	24 e6       	ldi	r18, 0x64	; 100
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	a9 01       	movw	r20, r18
     82a:	48 1b       	sub	r20, r24
     82c:	59 0b       	sbc	r21, r25
     82e:	ca 01       	movw	r24, r20
     830:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     832:	8c 39       	cpi	r24, 0x9C	; 156
     834:	5f ef       	ldi	r21, 0xFF	; 255
     836:	95 07       	cpc	r25, r21
     838:	34 f4       	brge	.+12     	; 0x846 <STEPPER_NumSteps+0x30>
     83a:	2c e9       	ldi	r18, 0x9C	; 156
     83c:	3f ef       	ldi	r19, 0xFF	; 255
     83e:	a9 01       	movw	r20, r18
     840:	48 1b       	sub	r20, r24
     842:	59 0b       	sbc	r21, r25
     844:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     846:	08 95       	ret

00000848 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     84c:	c2 e7       	ldi	r28, 0x72	; 114
     84e:	d3 e0       	ldi	r29, 0x03	; 3
     850:	6c 81       	ldd	r22, Y+4	; 0x04
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	9b 81       	ldd	r25, Y+3	; 0x03
     856:	df df       	rcall	.-66     	; 0x816 <STEPPER_NumSteps>
     858:	9e 83       	std	Y+6, r25	; 0x06
     85a:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     85c:	6a 81       	ldd	r22, Y+2	; 0x02
     85e:	7b 81       	ldd	r23, Y+3	; 0x03
     860:	88 85       	ldd	r24, Y+8	; 0x08
     862:	d9 df       	rcall	.-78     	; 0x816 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     864:	2d 81       	ldd	r18, Y+5	; 0x05
     866:	3e 81       	ldd	r19, Y+6	; 0x06
     868:	33 23       	and	r19, r19
     86a:	14 f4       	brge	.+4      	; 0x870 <STEPPER_Rotate+0x28>
     86c:	28 e0       	ldi	r18, 0x08	; 8
     86e:	01 c0       	rjmp	.+2      	; 0x872 <STEPPER_Rotate+0x2a>
     870:	24 e0       	ldi	r18, 0x04	; 4
     872:	e2 e7       	ldi	r30, 0x72	; 114
     874:	f3 e0       	ldi	r31, 0x03	; 3
     876:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     878:	45 81       	ldd	r20, Z+5	; 0x05
     87a:	56 81       	ldd	r21, Z+6	; 0x06
     87c:	84 9f       	mul	r24, r20
     87e:	90 01       	movw	r18, r0
     880:	85 9f       	mul	r24, r21
     882:	30 0d       	add	r19, r0
     884:	94 9f       	mul	r25, r20
     886:	30 0d       	add	r19, r0
     888:	11 24       	eor	r1, r1
     88a:	83 2f       	mov	r24, r19
     88c:	80 95       	com	r24
     88e:	88 1f       	adc	r24, r24
     890:	88 27       	eor	r24, r24
     892:	88 1f       	adc	r24, r24
     894:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     896:	85 81       	ldd	r24, Z+5	; 0x05
     898:	96 81       	ldd	r25, Z+6	; 0x06
     89a:	99 23       	and	r25, r25
     89c:	1c f4       	brge	.+6      	; 0x8a4 <STEPPER_Rotate+0x5c>
     89e:	91 95       	neg	r25
     8a0:	81 95       	neg	r24
     8a2:	91 09       	sbc	r25, r1
     8a4:	e2 e7       	ldi	r30, 0x72	; 114
     8a6:	f3 e0       	ldi	r31, 0x03	; 3
     8a8:	96 83       	std	Z+6, r25	; 0x06
     8aa:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     8ac:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
	cli();
     8b8:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	c2 e7       	ldi	r28, 0x72	; 114
     8be:	d3 e0       	ldi	r29, 0x03	; 3
     8c0:	9b 83       	std	Y+3, r25	; 0x03
     8c2:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     8c4:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     8c6:	c0 df       	rcall	.-128    	; 0x848 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     8c8:	eb 85       	ldd	r30, Y+11	; 0x0b
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	eb 5e       	subi	r30, 0xEB	; 235
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	80 81       	ld	r24, Z
     8d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     8d6:	78 94       	sei
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	0b b6       	in	r0, 0x3b	; 59
     8ea:	0f 92       	push	r0
     8ec:	1f 93       	push	r17
     8ee:	2f 93       	push	r18
     8f0:	3f 93       	push	r19
     8f2:	4f 93       	push	r20
     8f4:	5f 93       	push	r21
     8f6:	6f 93       	push	r22
     8f8:	7f 93       	push	r23
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	af 93       	push	r26
     900:	bf 93       	push	r27
     902:	ef 93       	push	r30
     904:	ff 93       	push	r31
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	00 d0       	rcall	.+0      	; 0x90c <__vector_13+0x2e>
     90c:	00 d0       	rcall	.+0      	; 0x90e <__vector_13+0x30>
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     912:	86 e3       	ldi	r24, 0x36	; 54
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	9e e2       	ldi	r25, 0x2E	; 46
     91c:	ad e2       	ldi	r26, 0x2D	; 45
     91e:	b5 e3       	ldi	r27, 0x35	; 53
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	9a 83       	std	Y+2, r25	; 0x02
     924:	ab 83       	std	Y+3, r26	; 0x03
     926:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     928:	e2 e7       	ldi	r30, 0x72	; 114
     92a:	f3 e0       	ldi	r31, 0x03	; 3
     92c:	87 81       	ldd	r24, Z+7	; 0x07
     92e:	25 81       	ldd	r18, Z+5	; 0x05
     930:	36 81       	ldd	r19, Z+6	; 0x06
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	82 17       	cp	r24, r18
     936:	93 07       	cpc	r25, r19
     938:	0c f0       	brlt	.+2      	; 0x93c <__vector_13+0x5e>
     93a:	66 c0       	rjmp	.+204    	; 0xa08 <__vector_13+0x12a>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     93c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <stepper+0x1>
     940:	84 30       	cpi	r24, 0x04	; 4
     942:	51 f4       	brne	.+20     	; 0x958 <__vector_13+0x7a>
     944:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     948:	e1 e0       	ldi	r30, 0x01	; 1
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	ec 0f       	add	r30, r28
     94e:	fd 1f       	adc	r31, r29
     950:	e8 0f       	add	r30, r24
     952:	f1 1d       	adc	r31, r1
     954:	80 81       	ld	r24, Z
     956:	0d c0       	rjmp	.+26     	; 0x972 <__vector_13+0x94>
     958:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     95c:	e3 e0       	ldi	r30, 0x03	; 3
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	e8 1b       	sub	r30, r24
     962:	f1 09       	sbc	r31, r1
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8c 0f       	add	r24, r28
     96a:	9d 1f       	adc	r25, r29
     96c:	e8 0f       	add	r30, r24
     96e:	f9 1f       	adc	r31, r25
     970:	80 81       	ld	r24, Z
     972:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     974:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     978:	83 30       	cpi	r24, 0x03	; 3
     97a:	21 f0       	breq	.+8      	; 0x984 <__vector_13+0xa6>
     97c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <stepper>
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	01 c0       	rjmp	.+2      	; 0x986 <__vector_13+0xa8>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	e2 e7       	ldi	r30, 0x72	; 114
     988:	f3 e0       	ldi	r31, 0x03	; 3
     98a:	80 83       	st	Z, r24

		stepper._currentStep++;
     98c:	87 81       	ldd	r24, Z+7	; 0x07
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	87 83       	std	Z+7, r24	; 0x07
		if((stepper._targetStep - stepper._currentStep) < 15) PWM(1); 
     992:	85 81       	ldd	r24, Z+5	; 0x05
     994:	96 81       	ldd	r25, Z+6	; 0x06
     996:	27 81       	ldd	r18, Z+7	; 0x07
     998:	82 1b       	sub	r24, r18
     99a:	91 09       	sbc	r25, r1
     99c:	0f 97       	sbiw	r24, 0x0f	; 15
     99e:	1c f4       	brge	.+6      	; 0x9a6 <__vector_13+0xc8>
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fd de       	rcall	.-518    	; 0x7a0 <PWM>
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     9a6:	e2 e7       	ldi	r30, 0x72	; 114
     9a8:	f3 e0       	ldi	r31, 0x03	; 3
     9aa:	85 81       	ldd	r24, Z+5	; 0x05
     9ac:	96 81       	ldd	r25, Z+6	; 0x06
     9ae:	27 81       	ldd	r18, Z+7	; 0x07
     9b0:	82 1b       	sub	r24, r18
     9b2:	91 09       	sbc	r25, r1
     9b4:	06 97       	sbiw	r24, 0x06	; 6
     9b6:	74 f4       	brge	.+28     	; 0x9d4 <__vector_13+0xf6>
     9b8:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	eb 5e       	subi	r30, 0xEB	; 235
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	80 81       	ld	r24, Z
     9c4:	84 39       	cpi	r24, 0x94	; 148
     9c6:	30 f4       	brcc	.+12     	; 0x9d4 <__vector_13+0xf6>
		{
			stepper._accellStep--;
     9c8:	e2 e7       	ldi	r30, 0x72	; 114
     9ca:	f3 e0       	ldi	r31, 0x03	; 3
     9cc:	83 85       	ldd	r24, Z+11	; 0x0b
     9ce:	81 50       	subi	r24, 0x01	; 1
     9d0:	83 87       	std	Z+11, r24	; 0x0b
     9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <__vector_13+0x118>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     9d4:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <stepper+0x7>
     9d8:	86 30       	cpi	r24, 0x06	; 6
     9da:	68 f0       	brcs	.+26     	; 0x9f6 <__vector_13+0x118>
     9dc:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	eb 5e       	subi	r30, 0xEB	; 235
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	80 81       	ld	r24, Z
     9e8:	81 34       	cpi	r24, 0x41	; 65
     9ea:	28 f0       	brcs	.+10     	; 0x9f6 <__vector_13+0x118>
		{
			stepper._accellStep++;
     9ec:	e2 e7       	ldi	r30, 0x72	; 114
     9ee:	f3 e0       	ldi	r31, 0x03	; 3
     9f0:	83 85       	ldd	r24, Z+11	; 0x0b
     9f2:	8f 5f       	subi	r24, 0xFF	; 255
     9f4:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     9f6:	e0 91 7d 03 	lds	r30, 0x037D	; 0x80037d <stepper+0xb>
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	eb 5e       	subi	r30, 0xEB	; 235
     9fe:	fe 4f       	sbci	r31, 0xFE	; 254
     a00:	80 81       	ld	r24, Z
     a02:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a06:	4f c0       	rjmp	.+158    	; 0xaa6 <__vector_13+0x1c8>
	}
	else if (stepper._currentStep == stepper._targetStep)
     a08:	e2 e7       	ldi	r30, 0x72	; 114
     a0a:	f3 e0       	ldi	r31, 0x03	; 3
     a0c:	87 81       	ldd	r24, Z+7	; 0x07
     a0e:	25 81       	ldd	r18, Z+5	; 0x05
     a10:	36 81       	ldd	r19, Z+6	; 0x06
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	82 17       	cp	r24, r18
     a16:	93 07       	cpc	r25, r19
     a18:	09 f0       	breq	.+2      	; 0xa1c <__vector_13+0x13e>
     a1a:	45 c0       	rjmp	.+138    	; 0xaa6 <__vector_13+0x1c8>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a1c:	82 81       	ldd	r24, Z+2	; 0x02
     a1e:	93 81       	ldd	r25, Z+3	; 0x03
     a20:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a22:	81 85       	ldd	r24, Z+9	; 0x09
     a24:	88 23       	and	r24, r24
     a26:	19 f0       	breq	.+6      	; 0xa2e <__vector_13+0x150>
     a28:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <stepper+0xb>
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <__vector_13+0x152>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	a2 e7       	ldi	r26, 0x72	; 114
     a32:	b3 e0       	ldi	r27, 0x03	; 3
     a34:	1b 96       	adiw	r26, 0x0b	; 11
     a36:	8c 93       	st	X, r24
     a38:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a3a:	1b 96       	adiw	r26, 0x0b	; 11
     a3c:	ec 91       	ld	r30, X
     a3e:	1b 97       	sbiw	r26, 0x0b	; 11
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	eb 5e       	subi	r30, 0xEB	; 235
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	80 81       	ld	r24, Z
     a48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     a4c:	19 96       	adiw	r26, 0x09	; 9
     a4e:	8c 91       	ld	r24, X
     a50:	81 11       	cpse	r24, r1
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <__vector_13+0x17a>
     a54:	82 b1       	in	r24, 0x02	; 2
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <__vector_13+0x17c>
     a58:	82 b1       	in	r24, 0x02	; 2
     a5a:	82 b9       	out	0x02, r24	; 2
		g_ExitBuffer = 0;
     a5c:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_ExitBuffer>
		if(HEAD && HEAD->prev) STEPPER_SetRotation(step[LL_GetClass(HEAD->prev)], step[LL_GetClass(HEAD)]);
     a60:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     a64:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	e9 f0       	breq	.+58     	; 0xaa6 <__vector_13+0x1c8>
     a6c:	fc 01       	movw	r30, r24
     a6e:	24 81       	ldd	r18, Z+4	; 0x04
     a70:	35 81       	ldd	r19, Z+5	; 0x05
     a72:	23 2b       	or	r18, r19
     a74:	c1 f0       	breq	.+48     	; 0xaa6 <__vector_13+0x1c8>
     a76:	7f dd       	rcall	.-1282   	; 0x576 <LL_GetClass>
     a78:	e1 e0       	ldi	r30, 0x01	; 1
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ec 0f       	add	r30, r28
     a7e:	fd 1f       	adc	r31, r29
     a80:	e8 0f       	add	r30, r24
     a82:	f1 1d       	adc	r31, r1
     a84:	10 81       	ld	r17, Z
     a86:	e0 91 05 03 	lds	r30, 0x0305	; 0x800305 <HEAD>
     a8a:	f0 91 06 03 	lds	r31, 0x0306	; 0x800306 <HEAD+0x1>
     a8e:	84 81       	ldd	r24, Z+4	; 0x04
     a90:	95 81       	ldd	r25, Z+5	; 0x05
     a92:	71 dd       	rcall	.-1310   	; 0x576 <LL_GetClass>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	ec 0f       	add	r30, r28
     a9a:	fd 1f       	adc	r31, r29
     a9c:	e8 0f       	add	r30, r24
     a9e:	f1 1d       	adc	r31, r1
     aa0:	80 81       	ld	r24, Z
     aa2:	61 2f       	mov	r22, r17
     aa4:	07 df       	rcall	.-498    	; 0x8b4 <STEPPER_SetRotation>
	}
	if (stepper._isInitiated == 0)
     aa6:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <stepper+0xa>
     aaa:	81 11       	cpse	r24, r1
     aac:	0f c0       	rjmp	.+30     	; 0xacc <__vector_13+0x1ee>
	{
		if ((PINE & 0x08) == 0)
     aae:	63 99       	sbic	0x0c, 3	; 12
     ab0:	0d c0       	rjmp	.+26     	; 0xacc <__vector_13+0x1ee>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     ab2:	e2 e7       	ldi	r30, 0x72	; 114
     ab4:	f3 e0       	ldi	r31, 0x03	; 3
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     aba:	10 82       	st	Z, r1
			stepper.direction = 1;
     abc:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     abe:	13 82       	std	Z+3, r1	; 0x03
     ac0:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     ac2:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     ac4:	16 82       	std	Z+6, r1	; 0x06
     ac6:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     ac8:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     aca:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	1f 91       	pop	r17
     af2:	0f 90       	pop	r0
     af4:	0b be       	out	0x3b, r0	; 59
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	f8 94       	cli
     b08:	e1 e6       	ldi	r30, 0x61	; 97
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 e8       	ldi	r24, 0x80	; 128
     b0e:	80 83       	st	Z, r24
     b10:	10 82       	st	Z, r1
     b12:	da d2       	rcall	.+1460   	; 0x10c8 <UART_Init>
     b14:	5a dd       	rcall	.-1356   	; 0x5ca <GPIO_Init>
     b16:	5d d2       	rcall	.+1210   	; 0xfd2 <TIMER_Init>
     b18:	39 de       	rcall	.-910    	; 0x78c <PWM_Init>
     b1a:	dd da       	rcall	.-2630   	; 0xd6 <ADC_Init>
     b1c:	55 de       	rcall	.-854    	; 0x7c8 <STEPPER_Init>
     b1e:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount+0x1>
     b22:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <g_ADCCount>
     b26:	84 e1       	ldi	r24, 0x14	; 20
     b28:	eb e0       	ldi	r30, 0x0B	; 11
     b2a:	f3 e0       	ldi	r31, 0x03	; 3
     b2c:	df 01       	movw	r26, r30
     b2e:	1d 92       	st	X+, r1
     b30:	8a 95       	dec	r24
     b32:	e9 f7       	brne	.-6      	; 0xb2e <SYS_Init+0x2e>
     b34:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <g_PauseRequest>
     b38:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_WDTimeout>
     b3c:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <g_Timer>
     b40:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_ExitBuffer>
     b44:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <HEAD+0x1>
     b48:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <HEAD>
     b4c:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <TAIL+0x1>
     b50:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <TAIL>
     b54:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <STAGE1+0x1>
     b58:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <STAGE1>
     b5c:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <STAGE2+0x1>
     b60:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <STAGE2>
     b64:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <FRONT+0x1>
     b68:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <FRONT>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	44 e0       	ldi	r20, 0x04	; 4
     b70:	6f ef       	ldi	r22, 0xFF	; 255
     b72:	89 ee       	ldi	r24, 0xE9	; 233
     b74:	9d ef       	ldi	r25, 0xFD	; 253
     b76:	b1 dc       	rcall	.-1694   	; 0x4da <LL_ItemInit>
     b78:	c8 dc       	rcall	.-1648   	; 0x50a <LL_ItemListInit>
     b7a:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <HEAD+0x1>
     b7e:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <HEAD>
     b82:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <FRONT+0x1>
     b86:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <FRONT>
     b8a:	ca ef       	ldi	r28, 0xFA	; 250
     b8c:	08 ee       	ldi	r16, 0xE8	; 232
     b8e:	1d ef       	ldi	r17, 0xFD	; 253
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	44 e0       	ldi	r20, 0x04	; 4
     b94:	6c 2f       	mov	r22, r28
     b96:	c8 01       	movw	r24, r16
     b98:	a0 dc       	rcall	.-1728   	; 0x4da <LL_ItemInit>
     b9a:	bc 01       	movw	r22, r24
     b9c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     ba0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     ba4:	c6 dc       	rcall	.-1652   	; 0x532 <LL_AddBack>
     ba6:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <TAIL+0x1>
     baa:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <TAIL>
     bae:	01 50       	subi	r16, 0x01	; 1
     bb0:	11 09       	sbc	r17, r1
     bb2:	c1 50       	subi	r28, 0x01	; 1
     bb4:	cb 3c       	cpi	r28, 0xCB	; 203
     bb6:	61 f7       	brne	.-40     	; 0xb90 <SYS_Init+0x90>
     bb8:	05 e0       	ldi	r16, 0x05	; 5
     bba:	10 e0       	ldi	r17, 0x00	; 0
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	45 e0       	ldi	r20, 0x05	; 5
     bc0:	6a ef       	ldi	r22, 0xFA	; 250
     bc2:	88 ee       	ldi	r24, 0xE8	; 232
     bc4:	9d ef       	ldi	r25, 0xFD	; 253
     bc6:	89 dc       	rcall	.-1774   	; 0x4da <LL_ItemInit>
     bc8:	bc 01       	movw	r22, r24
     bca:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <HEAD>
     bce:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <HEAD+0x1>
     bd2:	af dc       	rcall	.-1698   	; 0x532 <LL_AddBack>
     bd4:	01 50       	subi	r16, 0x01	; 1
     bd6:	11 09       	sbc	r17, r1
     bd8:	89 f7       	brne	.-30     	; 0xbbc <SYS_Init+0xbc>
     bda:	86 e4       	ldi	r24, 0x46	; 70
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	8c d2       	rcall	.+1304   	; 0x10f8 <UART_SendString>
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <SYS_Pause>:
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	ca 5f       	subi	r28, 0xFA	; 250
     c10:	d1 09       	sbc	r29, r1
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	f8 2e       	mov	r15, r24
     c1e:	e9 2e       	mov	r14, r25
     c20:	f8 94       	cli
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	bc dd       	rcall	.-1160   	; 0x7a0 <PWM>
     c28:	00 91 07 03 	lds	r16, 0x0307	; 0x800307 <FRONT>
     c2c:	10 91 08 03 	lds	r17, 0x0308	; 0x800308 <FRONT+0x1>
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	8c e5       	ldi	r24, 0x5C	; 92
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	9f 93       	push	r25
     c3a:	8f 93       	push	r24
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	7c 01       	movw	r14, r24
     c42:	9f 93       	push	r25
     c44:	8f 93       	push	r24
     c46:	78 d4       	rcall	.+2288   	; 0x1538 <sprintf>
     c48:	c7 01       	movw	r24, r14
     c4a:	56 d2       	rcall	.+1196   	; 0x10f8 <UART_SendString>
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	e1 2c       	mov	r14, r1
     c5a:	f1 2c       	mov	r15, r1
     c5c:	0f 2e       	mov	r0, r31
     c5e:	f7 e7       	ldi	r31, 0x77	; 119
     c60:	af 2e       	mov	r10, r31
     c62:	f1 e0       	ldi	r31, 0x01	; 1
     c64:	bf 2e       	mov	r11, r31
     c66:	f0 2d       	mov	r31, r0
     c68:	6e 01       	movw	r12, r28
     c6a:	97 e9       	ldi	r25, 0x97	; 151
     c6c:	c9 0e       	add	r12, r25
     c6e:	d1 1c       	adc	r13, r1
     c70:	27 c0       	rjmp	.+78     	; 0xcc0 <SYS_Pause+0xd8>
     c72:	ef ef       	ldi	r30, 0xFF	; 255
     c74:	ee 1a       	sub	r14, r30
     c76:	fe 0a       	sbc	r15, r30
     c78:	c8 01       	movw	r24, r16
     c7a:	a2 dc       	rcall	.-1724   	; 0x5c0 <LL_GetStatus>
     c7c:	78 2e       	mov	r7, r24
     c7e:	c8 01       	movw	r24, r16
     c80:	7a dc       	rcall	.-1804   	; 0x576 <LL_GetClass>
     c82:	88 2e       	mov	r8, r24
     c84:	c8 01       	movw	r24, r16
     c86:	82 dc       	rcall	.-1788   	; 0x58c <LL_GetMag>
     c88:	98 2e       	mov	r9, r24
     c8a:	c8 01       	movw	r24, r16
     c8c:	79 dc       	rcall	.-1806   	; 0x580 <LL_GetRefl>
     c8e:	1f 92       	push	r1
     c90:	7f 92       	push	r7
     c92:	1f 92       	push	r1
     c94:	8f 92       	push	r8
     c96:	1f 92       	push	r1
     c98:	9f 92       	push	r9
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	ff 92       	push	r15
     ca0:	ef 92       	push	r14
     ca2:	bf 92       	push	r11
     ca4:	af 92       	push	r10
     ca6:	df 92       	push	r13
     ca8:	cf 92       	push	r12
     caa:	46 d4       	rcall	.+2188   	; 0x1538 <sprintf>
     cac:	c6 01       	movw	r24, r12
     cae:	24 d2       	rcall	.+1096   	; 0x10f8 <UART_SendString>
     cb0:	c8 01       	movw	r24, r16
     cb2:	3b dc       	rcall	.-1930   	; 0x52a <LL_Next>
     cb4:	8c 01       	movw	r16, r24
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	c8 01       	movw	r24, r16
     cc2:	59 dc       	rcall	.-1870   	; 0x576 <LL_GetClass>
     cc4:	85 30       	cpi	r24, 0x05	; 5
     cc6:	a9 f6       	brne	.-86     	; 0xc72 <SYS_Pause+0x8a>
     cc8:	0f 2e       	mov	r0, r31
     cca:	f7 e2       	ldi	r31, 0x27	; 39
     ccc:	cf 2e       	mov	r12, r31
     cce:	f3 e0       	ldi	r31, 0x03	; 3
     cd0:	df 2e       	mov	r13, r31
     cd2:	f0 2d       	mov	r31, r0
     cd4:	00 e0       	ldi	r16, 0x00	; 0
     cd6:	10 e0       	ldi	r17, 0x00	; 0
     cd8:	0f 2e       	mov	r0, r31
     cda:	fb ea       	ldi	r31, 0xAB	; 171
     cdc:	af 2e       	mov	r10, r31
     cde:	f1 e0       	ldi	r31, 0x01	; 1
     ce0:	bf 2e       	mov	r11, r31
     ce2:	f0 2d       	mov	r31, r0
     ce4:	7e 01       	movw	r14, r28
     ce6:	97 e9       	ldi	r25, 0x97	; 151
     ce8:	e9 0e       	add	r14, r25
     cea:	f1 1c       	adc	r15, r1
     cec:	f6 01       	movw	r30, r12
     cee:	80 85       	ldd	r24, Z+8	; 0x08
     cf0:	1f 92       	push	r1
     cf2:	8f 93       	push	r24
     cf4:	1f 93       	push	r17
     cf6:	0f 93       	push	r16
     cf8:	bf 92       	push	r11
     cfa:	af 92       	push	r10
     cfc:	ff 92       	push	r15
     cfe:	ef 92       	push	r14
     d00:	1b d4       	rcall	.+2102   	; 0x1538 <sprintf>
     d02:	c7 01       	movw	r24, r14
     d04:	f9 d1       	rcall	.+1010   	; 0x10f8 <UART_SendString>
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	f9 e0       	ldi	r31, 0x09	; 9
     d0c:	cf 0e       	add	r12, r31
     d0e:	d1 1c       	adc	r13, r1
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	07 30       	cpi	r16, 0x07	; 7
     d1c:	11 05       	cpc	r17, r1
     d1e:	31 f7       	brne	.-52     	; 0xcec <SYS_Pause+0x104>
     d20:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <STAGE2>
     d24:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <STAGE2+0x1>
     d28:	2b dc       	rcall	.-1962   	; 0x580 <LL_GetRefl>
     d2a:	48 2e       	mov	r4, r24
     d2c:	39 2e       	mov	r3, r25
     d2e:	60 90 6f 03 	lds	r6, 0x036F	; 0x80036f <STAGE2>
     d32:	50 90 70 03 	lds	r5, 0x0370	; 0x800370 <STAGE2+0x1>
     d36:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <STAGE1>
     d3a:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <STAGE1+0x1>
     d3e:	26 dc       	rcall	.-1972   	; 0x58c <LL_GetMag>
     d40:	78 2e       	mov	r7, r24
     d42:	90 90 25 03 	lds	r9, 0x0325	; 0x800325 <STAGE1>
     d46:	80 90 26 03 	lds	r8, 0x0326	; 0x800326 <STAGE1+0x1>
     d4a:	00 91 09 03 	lds	r16, 0x0309	; 0x800309 <TAIL>
     d4e:	10 91 0a 03 	lds	r17, 0x030A	; 0x80030a <TAIL+0x1>
     d52:	f8 01       	movw	r30, r16
     d54:	b2 80       	ldd	r11, Z+2	; 0x02
     d56:	a3 80       	ldd	r10, Z+3	; 0x03
     d58:	d0 90 07 03 	lds	r13, 0x0307	; 0x800307 <FRONT>
     d5c:	c0 90 08 03 	lds	r12, 0x0308	; 0x800308 <FRONT+0x1>
     d60:	f0 90 05 03 	lds	r15, 0x0305	; 0x800305 <HEAD>
     d64:	e0 90 06 03 	lds	r14, 0x0306	; 0x800306 <HEAD+0x1>
     d68:	8f 2d       	mov	r24, r15
     d6a:	9e 2d       	mov	r25, r14
     d6c:	f3 db       	rcall	.-2074   	; 0x554 <LL_Size>
     d6e:	3f 92       	push	r3
     d70:	4f 92       	push	r4
     d72:	5f 92       	push	r5
     d74:	6f 92       	push	r6
     d76:	1f 92       	push	r1
     d78:	7f 92       	push	r7
     d7a:	8f 92       	push	r8
     d7c:	9f 92       	push	r9
     d7e:	af 92       	push	r10
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	1f 93       	push	r17
     d88:	0f 93       	push	r16
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	1f 92       	push	r1
     d90:	8f 93       	push	r24
     d92:	82 ec       	ldi	r24, 0xC2	; 194
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	8e 01       	movw	r16, r28
     d9c:	0b 59       	subi	r16, 0x9B	; 155
     d9e:	1f 4f       	sbci	r17, 0xFF	; 255
     da0:	1f 93       	push	r17
     da2:	0f 93       	push	r16
     da4:	c9 d3       	rcall	.+1938   	; 0x1538 <sprintf>
     da6:	c8 01       	movw	r24, r16
     da8:	a7 d1       	rcall	.+846    	; 0x10f8 <UART_SendString>
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	89 b1       	in	r24, 0x09	; 9
     db6:	83 70       	andi	r24, 0x03	; 3
     db8:	e9 f7       	brne	.-6      	; 0xdb4 <SYS_Pause+0x1cc>
     dba:	8b e1       	ldi	r24, 0x1B	; 27
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	9c d1       	rcall	.+824    	; 0x10f8 <UART_SendString>
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	ed dc       	rcall	.-1574   	; 0x7a0 <PWM>
     dc6:	78 94       	sei
     dc8:	c6 50       	subi	r28, 0x06	; 6
     dca:	df 4f       	sbci	r29, 0xFF	; 255
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	bf 90       	pop	r11
     de8:	af 90       	pop	r10
     dea:	9f 90       	pop	r9
     dec:	8f 90       	pop	r8
     dee:	7f 90       	pop	r7
     df0:	6f 90       	pop	r6
     df2:	5f 90       	pop	r5
     df4:	4f 90       	pop	r4
     df6:	3f 90       	pop	r3
     df8:	08 95       	ret

00000dfa <SYS_Rampdown>:

void SYS_Rampdown()
{
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	e7 97       	sbiw	r28, 0x37	; 55
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[5] = {0,0,0,0,0};
     e14:	fe 01       	movw	r30, r28
     e16:	31 96       	adiw	r30, 0x01	; 1
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	df 01       	movw	r26, r30
     e1c:	1d 92       	st	X+, r1
     e1e:	8a 95       	dec	r24
     e20:	e9 f7       	brne	.-6      	; 0xe1c <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
     e22:	00 91 07 03 	lds	r16, 0x0307	; 0x800307 <FRONT>
     e26:	10 91 08 03 	lds	r17, 0x0308	; 0x800308 <FRONT+0x1>
	
	cli();
     e2a:	f8 94       	cli
	PORTD = 0;
     e2c:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
     e2e:	18 b8       	out	0x08, r1	; 8
	PWM(0);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	b5 dc       	rcall	.-1686   	; 0x7a0 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
     e36:	87 e3       	ldi	r24, 0x37	; 55
     e38:	92 e0       	ldi	r25, 0x02	; 2
     e3a:	5e d1       	rcall	.+700    	; 0x10f8 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[5] = {0,0,0,0,0};
	uint8_t total = 0;
     e3c:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
     e40:	f3 94       	inc	r15
     e42:	c8 01       	movw	r24, r16
     e44:	98 db       	rcall	.-2256   	; 0x576 <LL_GetClass>
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	ec 0f       	add	r30, r28
     e4c:	fd 1f       	adc	r31, r29
     e4e:	e8 0f       	add	r30, r24
     e50:	f1 1d       	adc	r31, r1
     e52:	80 81       	ld	r24, Z
     e54:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
     e56:	80 83       	st	Z, r24
     e58:	c8 01       	movw	r24, r16
     e5a:	67 db       	rcall	.-2354   	; 0x52a <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     e5c:	8c 01       	movw	r16, r24
     e5e:	c8 01       	movw	r24, r16
     e60:	af db       	rcall	.-2210   	; 0x5c0 <LL_GetStatus>
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	69 f3       	breq	.-38     	; 0xe40 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n\r\n\r\n",
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	1f 92       	push	r1
     e6a:	8f 93       	push	r24
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	1f 92       	push	r1
     e70:	8f 93       	push	r24
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	1f 92       	push	r1
     e76:	8f 93       	push	r24
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	1f 92       	push	r1
     e7c:	8f 93       	push	r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	1f 92       	push	r1
     e82:	8f 93       	push	r24
     e84:	1f 92       	push	r1
     e86:	ff 92       	push	r15
     e88:	8c e5       	ldi	r24, 0x5C	; 92
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	8e 01       	movw	r16, r28
     e92:	0a 5f       	subi	r16, 0xFA	; 250
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	1f 93       	push	r17
     e98:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
     e9a:	4e d3       	rcall	.+1692   	; 0x1538 <sprintf>
     e9c:	c8 01       	movw	r24, r16
     e9e:	2c d1       	rcall	.+600    	; 0x10f8 <UART_SendString>
	UART_SendString("Total time elapsed since item entered the first stage: ");
     ea0:	8f eb       	ldi	r24, 0xBF	; 191
     ea2:	92 e0       	ldi	r25, 0x02	; 2
     ea4:	29 d1       	rcall	.+594    	; 0x10f8 <UART_SendString>
	sprintf(str,"%.2f s\r\n",(double)g_Timer*.25);
     ea6:	60 91 22 03 	lds	r22, 0x0322	; 0x800322 <g_Timer>
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	31 d1       	rcall	.+610    	; 0x1114 <__floatunsisf>
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e8       	ldi	r20, 0x80	; 128
     eb8:	5e e3       	ldi	r21, 0x3E	; 62
     eba:	69 d1       	rcall	.+722    	; 0x118e <__mulsf3>
     ebc:	9f 93       	push	r25
     ebe:	8f 93       	push	r24
     ec0:	7f 93       	push	r23
     ec2:	6f 93       	push	r22
     ec4:	87 ef       	ldi	r24, 0xF7	; 247
     ec6:	92 e0       	ldi	r25, 0x02	; 2
     ec8:	9f 93       	push	r25
     eca:	8f 93       	push	r24
     ecc:	1f 93       	push	r17
     ece:	0f 93       	push	r16
     ed0:	33 d3       	rcall	.+1638   	; 0x1538 <sprintf>
	UART_SendString(str);
     ed2:	c8 01       	movw	r24, r16
     ed4:	11 d1       	rcall	.+546    	; 0x10f8 <UART_SendString>
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	e7 96       	adiw	r28, 0x37	; 55
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	08 95       	ret

00000ef8 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	0b b6       	in	r0, 0x3b	; 59
     f04:	0f 92       	push	r0
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	2f 93       	push	r18
     f10:	3f 93       	push	r19
     f12:	4f 93       	push	r20
     f14:	5f 93       	push	r21
     f16:	6f 93       	push	r22
     f18:	7f 93       	push	r23
     f1a:	8f 93       	push	r24
     f1c:	9f 93       	push	r25
     f1e:	af 93       	push	r26
     f20:	bf 93       	push	r27
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	ef 93       	push	r30
     f28:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     f2a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_timer_tick>
     f2e:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_timer_tick+0x1>
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <_timer_tick+0x1>
     f38:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <_timer_tick>
     f3c:	c7 e2       	ldi	r28, 0x27	; 39
     f3e:	d3 e0       	ldi	r29, 0x03	; 3
     f40:	0f 2e       	mov	r0, r31
     f42:	ff e6       	ldi	r31, 0x6F	; 111
     f44:	ef 2e       	mov	r14, r31
     f46:	f3 e0       	ldi	r31, 0x03	; 3
     f48:	ff 2e       	mov	r15, r31
     f4a:	f0 2d       	mov	r31, r0
     f4c:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     f4e:	ec 81       	ldd	r30, Y+4	; 0x04
     f50:	fd 81       	ldd	r31, Y+5	; 0x05
     f52:	30 97       	sbiw	r30, 0x00	; 0
     f54:	09 f1       	breq	.+66     	; 0xf98 <__vector_17+0xa0>
     f56:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_timer_tick>
     f5a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_timer_tick+0x1>
     f5e:	28 81       	ld	r18, Y
     f60:	39 81       	ldd	r19, Y+1	; 0x01
     f62:	28 17       	cp	r18, r24
     f64:	39 07       	cpc	r19, r25
     f66:	c1 f4       	brne	.+48     	; 0xf98 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     f68:	88 85       	ldd	r24, Y+8	; 0x08
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	19 f4       	brne	.+6      	; 0xf74 <__vector_17+0x7c>
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	9f 81       	ldd	r25, Y+7	; 0x07
     f72:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     f74:	d8 01       	movw	r26, r16
     f76:	12 96       	adiw	r26, 0x02	; 2
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	13 97       	sbiw	r26, 0x03	; 3
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	41 f0       	breq	.+16     	; 0xf92 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     f82:	2d 91       	ld	r18, X+
     f84:	3c 91       	ld	r19, X
     f86:	11 97       	sbiw	r26, 0x01	; 1
     f88:	82 0f       	add	r24, r18
     f8a:	93 1f       	adc	r25, r19
     f8c:	8d 93       	st	X+, r24
     f8e:	9c 93       	st	X, r25
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     f92:	f8 01       	movw	r30, r16
     f94:	15 82       	std	Z+5, r1	; 0x05
     f96:	14 82       	std	Z+4, r1	; 0x04
     f98:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     f9a:	ce 15       	cp	r28, r14
     f9c:	df 05       	cpc	r29, r15
     f9e:	b1 f6       	brne	.-84     	; 0xf4c <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	0f 90       	pop	r0
     fc6:	0b be       	out	0x3b, r0	; 59
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
     fd2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fd6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
     fda:	88 e4       	ldi	r24, 0x48	; 72
     fdc:	98 e0       	ldi	r25, 0x08	; 8
     fde:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fe2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     fe6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     fea:	89 e0       	ldi	r24, 0x09	; 9
     fec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     ff6:	88 e4       	ldi	r24, 0x48	; 72
     ff8:	e7 e2       	ldi	r30, 0x27	; 39
     ffa:	f3 e0       	ldi	r31, 0x03	; 3
     ffc:	df 01       	movw	r26, r30
     ffe:	1d 92       	st	X+, r1
    1000:	8a 95       	dec	r24
    1002:	e9 f7       	brne	.-6      	; 0xffe <TIMER_Init+0x2c>
    1004:	08 95       	ret

00001006 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1010:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <_timer+0x4>
    1014:	70 91 2c 03 	lds	r23, 0x032C	; 0x80032c <_timer+0x5>
    1018:	67 2b       	or	r22, r23
    101a:	09 f4       	brne	.+2      	; 0x101e <TIMER_Create+0x18>
    101c:	49 c0       	rjmp	.+146    	; 0x10b0 <TIMER_Create+0xaa>
    101e:	e7 e2       	ldi	r30, 0x27	; 39
    1020:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1022:	a1 e0       	ldi	r26, 0x01	; 1
    1024:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1026:	c5 85       	ldd	r28, Z+13	; 0x0d
    1028:	d6 85       	ldd	r29, Z+14	; 0x0e
    102a:	cd 2b       	or	r28, r29
    102c:	09 f4       	brne	.+2      	; 0x1030 <TIMER_Create+0x2a>
    102e:	42 c0       	rjmp	.+132    	; 0x10b4 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1030:	11 96       	adiw	r26, 0x01	; 1
    1032:	39 96       	adiw	r30, 0x09	; 9
    1034:	a8 30       	cpi	r26, 0x08	; 8
    1036:	b1 05       	cpc	r27, r1
    1038:	b1 f7       	brne	.-20     	; 0x1026 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	3f c0       	rjmp	.+126    	; 0x10be <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1040:	fd 01       	movw	r30, r26
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ee 0f       	add	r30, r30
    104c:	ff 1f       	adc	r31, r31
    104e:	ea 0f       	add	r30, r26
    1050:	fb 1f       	adc	r31, r27
    1052:	e9 5d       	subi	r30, 0xD9	; 217
    1054:	fc 4f       	sbci	r31, 0xFC	; 252
    1056:	93 83       	std	Z+3, r25	; 0x03
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	0d c0       	rjmp	.+26     	; 0x1076 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    105c:	fd 01       	movw	r30, r26
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	ee 0f       	add	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	ee 0f       	add	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	ea 0f       	add	r30, r26
    106c:	fb 1f       	adc	r31, r27
    106e:	e9 5d       	subi	r30, 0xD9	; 217
    1070:	fc 4f       	sbci	r31, 0xFC	; 252
    1072:	13 82       	std	Z+3, r1	; 0x03
    1074:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1076:	fd 01       	movw	r30, r26
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	ea 0f       	add	r30, r26
    1086:	fb 1f       	adc	r31, r27
    1088:	e9 5d       	subi	r30, 0xD9	; 217
    108a:	fc 4f       	sbci	r31, 0xFC	; 252
    108c:	55 83       	std	Z+5, r21	; 0x05
    108e:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1090:	37 83       	std	Z+7, r19	; 0x07
    1092:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    1094:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <_timer_tick>
    1098:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <_timer_tick+0x1>
    109c:	82 0f       	add	r24, r18
    109e:	93 1f       	adc	r25, r19
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	80 83       	st	Z, r24
			_timer[i].state = READY;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10a8:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    10aa:	8a 2f       	mov	r24, r26
    10ac:	9b 2f       	mov	r25, r27
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    10b4:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b6:	f8 94       	cli
		{
			if (periodic != 0) 
    10b8:	01 2b       	or	r16, r17
    10ba:	11 f6       	brne	.-124    	; 0x1040 <TIMER_Create+0x3a>
    10bc:	cf cf       	rjmp	.-98     	; 0x105c <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    10c8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    10cc:	83 e3       	ldi	r24, 0x33	; 51
    10ce:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    10d2:	e9 ec       	ldi	r30, 0xC9	; 201
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 61       	ori	r24, 0x18	; 24
    10da:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    10dc:	ea ec       	ldi	r30, 0xCA	; 202
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	86 60       	ori	r24, 0x06	; 6
    10e4:	80 83       	st	Z, r24
    10e6:	08 95       	ret

000010e8 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    10e8:	e8 ec       	ldi	r30, 0xC8	; 200
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	90 81       	ld	r25, Z
    10ee:	95 ff       	sbrs	r25, 5
    10f0:	fd cf       	rjmp	.-6      	; 0x10ec <UART_SendChar+0x4>
	UDR1 = c;
    10f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    10f6:	08 95       	ret

000010f8 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    10fe:	88 81       	ld	r24, Y
    1100:	88 23       	and	r24, r24
    1102:	29 f0       	breq	.+10     	; 0x110e <UART_SendString+0x16>
    1104:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1106:	f0 df       	rcall	.-32     	; 0x10e8 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1108:	89 91       	ld	r24, Y+
    110a:	81 11       	cpse	r24, r1
    110c:	fc cf       	rjmp	.-8      	; 0x1106 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <__floatunsisf>:
    1114:	e8 94       	clt
    1116:	09 c0       	rjmp	.+18     	; 0x112a <__floatsisf+0x12>

00001118 <__floatsisf>:
    1118:	97 fb       	bst	r25, 7
    111a:	3e f4       	brtc	.+14     	; 0x112a <__floatsisf+0x12>
    111c:	90 95       	com	r25
    111e:	80 95       	com	r24
    1120:	70 95       	com	r23
    1122:	61 95       	neg	r22
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	99 23       	and	r25, r25
    112c:	a9 f0       	breq	.+42     	; 0x1158 <__floatsisf+0x40>
    112e:	f9 2f       	mov	r31, r25
    1130:	96 e9       	ldi	r25, 0x96	; 150
    1132:	bb 27       	eor	r27, r27
    1134:	93 95       	inc	r25
    1136:	f6 95       	lsr	r31
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b7 95       	ror	r27
    1140:	f1 11       	cpse	r31, r1
    1142:	f8 cf       	rjmp	.-16     	; 0x1134 <__floatsisf+0x1c>
    1144:	fa f4       	brpl	.+62     	; 0x1184 <__floatsisf+0x6c>
    1146:	bb 0f       	add	r27, r27
    1148:	11 f4       	brne	.+4      	; 0x114e <__floatsisf+0x36>
    114a:	60 ff       	sbrs	r22, 0
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <__floatsisf+0x6c>
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	16 c0       	rjmp	.+44     	; 0x1184 <__floatsisf+0x6c>
    1158:	88 23       	and	r24, r24
    115a:	11 f0       	breq	.+4      	; 0x1160 <__floatsisf+0x48>
    115c:	96 e9       	ldi	r25, 0x96	; 150
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <__floatsisf+0x6a>
    1160:	77 23       	and	r23, r23
    1162:	21 f0       	breq	.+8      	; 0x116c <__floatsisf+0x54>
    1164:	9e e8       	ldi	r25, 0x8E	; 142
    1166:	87 2f       	mov	r24, r23
    1168:	76 2f       	mov	r23, r22
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <__floatsisf+0x5e>
    116c:	66 23       	and	r22, r22
    116e:	71 f0       	breq	.+28     	; 0x118c <__floatsisf+0x74>
    1170:	96 e8       	ldi	r25, 0x86	; 134
    1172:	86 2f       	mov	r24, r22
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	2a f0       	brmi	.+10     	; 0x1184 <__floatsisf+0x6c>
    117a:	9a 95       	dec	r25
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	da f7       	brpl	.-10     	; 0x117a <__floatsisf+0x62>
    1184:	88 0f       	add	r24, r24
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <__mulsf3>:
    118e:	0b d0       	rcall	.+22     	; 0x11a6 <__mulsf3x>
    1190:	78 c0       	rjmp	.+240    	; 0x1282 <__fp_round>
    1192:	69 d0       	rcall	.+210    	; 0x1266 <__fp_pscA>
    1194:	28 f0       	brcs	.+10     	; 0x11a0 <__mulsf3+0x12>
    1196:	6e d0       	rcall	.+220    	; 0x1274 <__fp_pscB>
    1198:	18 f0       	brcs	.+6      	; 0x11a0 <__mulsf3+0x12>
    119a:	95 23       	and	r25, r21
    119c:	09 f0       	breq	.+2      	; 0x11a0 <__mulsf3+0x12>
    119e:	5a c0       	rjmp	.+180    	; 0x1254 <__fp_inf>
    11a0:	5f c0       	rjmp	.+190    	; 0x1260 <__fp_nan>
    11a2:	11 24       	eor	r1, r1
    11a4:	a2 c0       	rjmp	.+324    	; 0x12ea <__fp_szero>

000011a6 <__mulsf3x>:
    11a6:	7e d0       	rcall	.+252    	; 0x12a4 <__fp_split3>
    11a8:	a0 f3       	brcs	.-24     	; 0x1192 <__mulsf3+0x4>

000011aa <__mulsf3_pse>:
    11aa:	95 9f       	mul	r25, r21
    11ac:	d1 f3       	breq	.-12     	; 0x11a2 <__mulsf3+0x14>
    11ae:	95 0f       	add	r25, r21
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	55 1f       	adc	r21, r21
    11b4:	62 9f       	mul	r22, r18
    11b6:	f0 01       	movw	r30, r0
    11b8:	72 9f       	mul	r23, r18
    11ba:	bb 27       	eor	r27, r27
    11bc:	f0 0d       	add	r31, r0
    11be:	b1 1d       	adc	r27, r1
    11c0:	63 9f       	mul	r22, r19
    11c2:	aa 27       	eor	r26, r26
    11c4:	f0 0d       	add	r31, r0
    11c6:	b1 1d       	adc	r27, r1
    11c8:	aa 1f       	adc	r26, r26
    11ca:	64 9f       	mul	r22, r20
    11cc:	66 27       	eor	r22, r22
    11ce:	b0 0d       	add	r27, r0
    11d0:	a1 1d       	adc	r26, r1
    11d2:	66 1f       	adc	r22, r22
    11d4:	82 9f       	mul	r24, r18
    11d6:	22 27       	eor	r18, r18
    11d8:	b0 0d       	add	r27, r0
    11da:	a1 1d       	adc	r26, r1
    11dc:	62 1f       	adc	r22, r18
    11de:	73 9f       	mul	r23, r19
    11e0:	b0 0d       	add	r27, r0
    11e2:	a1 1d       	adc	r26, r1
    11e4:	62 1f       	adc	r22, r18
    11e6:	83 9f       	mul	r24, r19
    11e8:	a0 0d       	add	r26, r0
    11ea:	61 1d       	adc	r22, r1
    11ec:	22 1f       	adc	r18, r18
    11ee:	74 9f       	mul	r23, r20
    11f0:	33 27       	eor	r19, r19
    11f2:	a0 0d       	add	r26, r0
    11f4:	61 1d       	adc	r22, r1
    11f6:	23 1f       	adc	r18, r19
    11f8:	84 9f       	mul	r24, r20
    11fa:	60 0d       	add	r22, r0
    11fc:	21 1d       	adc	r18, r1
    11fe:	82 2f       	mov	r24, r18
    1200:	76 2f       	mov	r23, r22
    1202:	6a 2f       	mov	r22, r26
    1204:	11 24       	eor	r1, r1
    1206:	9f 57       	subi	r25, 0x7F	; 127
    1208:	50 40       	sbci	r21, 0x00	; 0
    120a:	8a f0       	brmi	.+34     	; 0x122e <__mulsf3_pse+0x84>
    120c:	e1 f0       	breq	.+56     	; 0x1246 <__mulsf3_pse+0x9c>
    120e:	88 23       	and	r24, r24
    1210:	4a f0       	brmi	.+18     	; 0x1224 <__mulsf3_pse+0x7a>
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	bb 1f       	adc	r27, r27
    1218:	66 1f       	adc	r22, r22
    121a:	77 1f       	adc	r23, r23
    121c:	88 1f       	adc	r24, r24
    121e:	91 50       	subi	r25, 0x01	; 1
    1220:	50 40       	sbci	r21, 0x00	; 0
    1222:	a9 f7       	brne	.-22     	; 0x120e <__mulsf3_pse+0x64>
    1224:	9e 3f       	cpi	r25, 0xFE	; 254
    1226:	51 05       	cpc	r21, r1
    1228:	70 f0       	brcs	.+28     	; 0x1246 <__mulsf3_pse+0x9c>
    122a:	14 c0       	rjmp	.+40     	; 0x1254 <__fp_inf>
    122c:	5e c0       	rjmp	.+188    	; 0x12ea <__fp_szero>
    122e:	5f 3f       	cpi	r21, 0xFF	; 255
    1230:	ec f3       	brlt	.-6      	; 0x122c <__mulsf3_pse+0x82>
    1232:	98 3e       	cpi	r25, 0xE8	; 232
    1234:	dc f3       	brlt	.-10     	; 0x122c <__mulsf3_pse+0x82>
    1236:	86 95       	lsr	r24
    1238:	77 95       	ror	r23
    123a:	67 95       	ror	r22
    123c:	b7 95       	ror	r27
    123e:	f7 95       	ror	r31
    1240:	e7 95       	ror	r30
    1242:	9f 5f       	subi	r25, 0xFF	; 255
    1244:	c1 f7       	brne	.-16     	; 0x1236 <__mulsf3_pse+0x8c>
    1246:	fe 2b       	or	r31, r30
    1248:	88 0f       	add	r24, r24
    124a:	91 1d       	adc	r25, r1
    124c:	96 95       	lsr	r25
    124e:	87 95       	ror	r24
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__fp_inf>:
    1254:	97 f9       	bld	r25, 7
    1256:	9f 67       	ori	r25, 0x7F	; 127
    1258:	80 e8       	ldi	r24, 0x80	; 128
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	08 95       	ret

00001260 <__fp_nan>:
    1260:	9f ef       	ldi	r25, 0xFF	; 255
    1262:	80 ec       	ldi	r24, 0xC0	; 192
    1264:	08 95       	ret

00001266 <__fp_pscA>:
    1266:	00 24       	eor	r0, r0
    1268:	0a 94       	dec	r0
    126a:	16 16       	cp	r1, r22
    126c:	17 06       	cpc	r1, r23
    126e:	18 06       	cpc	r1, r24
    1270:	09 06       	cpc	r0, r25
    1272:	08 95       	ret

00001274 <__fp_pscB>:
    1274:	00 24       	eor	r0, r0
    1276:	0a 94       	dec	r0
    1278:	12 16       	cp	r1, r18
    127a:	13 06       	cpc	r1, r19
    127c:	14 06       	cpc	r1, r20
    127e:	05 06       	cpc	r0, r21
    1280:	08 95       	ret

00001282 <__fp_round>:
    1282:	09 2e       	mov	r0, r25
    1284:	03 94       	inc	r0
    1286:	00 0c       	add	r0, r0
    1288:	11 f4       	brne	.+4      	; 0x128e <__fp_round+0xc>
    128a:	88 23       	and	r24, r24
    128c:	52 f0       	brmi	.+20     	; 0x12a2 <__fp_round+0x20>
    128e:	bb 0f       	add	r27, r27
    1290:	40 f4       	brcc	.+16     	; 0x12a2 <__fp_round+0x20>
    1292:	bf 2b       	or	r27, r31
    1294:	11 f4       	brne	.+4      	; 0x129a <__fp_round+0x18>
    1296:	60 ff       	sbrs	r22, 0
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <__fp_round+0x20>
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	08 95       	ret

000012a4 <__fp_split3>:
    12a4:	57 fd       	sbrc	r21, 7
    12a6:	90 58       	subi	r25, 0x80	; 128
    12a8:	44 0f       	add	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	59 f0       	breq	.+22     	; 0x12c4 <__fp_splitA+0x10>
    12ae:	5f 3f       	cpi	r21, 0xFF	; 255
    12b0:	71 f0       	breq	.+28     	; 0x12ce <__fp_splitA+0x1a>
    12b2:	47 95       	ror	r20

000012b4 <__fp_splitA>:
    12b4:	88 0f       	add	r24, r24
    12b6:	97 fb       	bst	r25, 7
    12b8:	99 1f       	adc	r25, r25
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <__fp_splitA+0x20>
    12bc:	9f 3f       	cpi	r25, 0xFF	; 255
    12be:	79 f0       	breq	.+30     	; 0x12de <__fp_splitA+0x2a>
    12c0:	87 95       	ror	r24
    12c2:	08 95       	ret
    12c4:	12 16       	cp	r1, r18
    12c6:	13 06       	cpc	r1, r19
    12c8:	14 06       	cpc	r1, r20
    12ca:	55 1f       	adc	r21, r21
    12cc:	f2 cf       	rjmp	.-28     	; 0x12b2 <__fp_split3+0xe>
    12ce:	46 95       	lsr	r20
    12d0:	f1 df       	rcall	.-30     	; 0x12b4 <__fp_splitA>
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <__fp_splitA+0x30>
    12d4:	16 16       	cp	r1, r22
    12d6:	17 06       	cpc	r1, r23
    12d8:	18 06       	cpc	r1, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	f1 cf       	rjmp	.-30     	; 0x12c0 <__fp_splitA+0xc>
    12de:	86 95       	lsr	r24
    12e0:	71 05       	cpc	r23, r1
    12e2:	61 05       	cpc	r22, r1
    12e4:	08 94       	sec
    12e6:	08 95       	ret

000012e8 <__fp_zero>:
    12e8:	e8 94       	clt

000012ea <__fp_szero>:
    12ea:	bb 27       	eor	r27, r27
    12ec:	66 27       	eor	r22, r22
    12ee:	77 27       	eor	r23, r23
    12f0:	cb 01       	movw	r24, r22
    12f2:	97 f9       	bld	r25, 7
    12f4:	08 95       	ret

000012f6 <malloc>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	10 f4       	brcc	.+4      	; 0x1308 <malloc+0x12>
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__flp>
    130c:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__flp+0x1>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	19 f1       	breq	.+70     	; 0x1362 <malloc+0x6c>
    131c:	40 81       	ld	r20, Z
    131e:	51 81       	ldd	r21, Z+1	; 0x01
    1320:	02 81       	ldd	r16, Z+2	; 0x02
    1322:	13 81       	ldd	r17, Z+3	; 0x03
    1324:	48 17       	cp	r20, r24
    1326:	59 07       	cpc	r21, r25
    1328:	c8 f0       	brcs	.+50     	; 0x135c <malloc+0x66>
    132a:	84 17       	cp	r24, r20
    132c:	95 07       	cpc	r25, r21
    132e:	69 f4       	brne	.+26     	; 0x134a <malloc+0x54>
    1330:	10 97       	sbiw	r26, 0x00	; 0
    1332:	31 f0       	breq	.+12     	; 0x1340 <malloc+0x4a>
    1334:	12 96       	adiw	r26, 0x02	; 2
    1336:	0c 93       	st	X, r16
    1338:	12 97       	sbiw	r26, 0x02	; 2
    133a:	13 96       	adiw	r26, 0x03	; 3
    133c:	1c 93       	st	X, r17
    133e:	27 c0       	rjmp	.+78     	; 0x138e <malloc+0x98>
    1340:	00 93 80 03 	sts	0x0380, r16	; 0x800380 <__flp>
    1344:	10 93 81 03 	sts	0x0381, r17	; 0x800381 <__flp+0x1>
    1348:	22 c0       	rjmp	.+68     	; 0x138e <malloc+0x98>
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	19 f0       	breq	.+6      	; 0x1356 <malloc+0x60>
    1350:	42 17       	cp	r20, r18
    1352:	53 07       	cpc	r21, r19
    1354:	18 f4       	brcc	.+6      	; 0x135c <malloc+0x66>
    1356:	9a 01       	movw	r18, r20
    1358:	bd 01       	movw	r22, r26
    135a:	ef 01       	movw	r28, r30
    135c:	df 01       	movw	r26, r30
    135e:	f8 01       	movw	r30, r16
    1360:	db cf       	rjmp	.-74     	; 0x1318 <malloc+0x22>
    1362:	21 15       	cp	r18, r1
    1364:	31 05       	cpc	r19, r1
    1366:	f9 f0       	breq	.+62     	; 0x13a6 <malloc+0xb0>
    1368:	28 1b       	sub	r18, r24
    136a:	39 0b       	sbc	r19, r25
    136c:	24 30       	cpi	r18, 0x04	; 4
    136e:	31 05       	cpc	r19, r1
    1370:	80 f4       	brcc	.+32     	; 0x1392 <malloc+0x9c>
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	61 15       	cp	r22, r1
    1378:	71 05       	cpc	r23, r1
    137a:	21 f0       	breq	.+8      	; 0x1384 <malloc+0x8e>
    137c:	fb 01       	movw	r30, r22
    137e:	93 83       	std	Z+3, r25	; 0x03
    1380:	82 83       	std	Z+2, r24	; 0x02
    1382:	04 c0       	rjmp	.+8      	; 0x138c <malloc+0x96>
    1384:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <__flp+0x1>
    1388:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <__flp>
    138c:	fe 01       	movw	r30, r28
    138e:	32 96       	adiw	r30, 0x02	; 2
    1390:	44 c0       	rjmp	.+136    	; 0x141a <malloc+0x124>
    1392:	fe 01       	movw	r30, r28
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	81 93       	st	Z+, r24
    139a:	91 93       	st	Z+, r25
    139c:	22 50       	subi	r18, 0x02	; 2
    139e:	31 09       	sbc	r19, r1
    13a0:	39 83       	std	Y+1, r19	; 0x01
    13a2:	28 83       	st	Y, r18
    13a4:	3a c0       	rjmp	.+116    	; 0x141a <malloc+0x124>
    13a6:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    13aa:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    13ae:	23 2b       	or	r18, r19
    13b0:	41 f4       	brne	.+16     	; 0x13c2 <malloc+0xcc>
    13b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13ba:	30 93 7f 03 	sts	0x037F, r19	; 0x80037f <__brkval+0x1>
    13be:	20 93 7e 03 	sts	0x037E, r18	; 0x80037e <__brkval>
    13c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <malloc+0xea>
    13d0:	2d b7       	in	r18, 0x3d	; 61
    13d2:	3e b7       	in	r19, 0x3e	; 62
    13d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13dc:	24 1b       	sub	r18, r20
    13de:	35 0b       	sbc	r19, r21
    13e0:	e0 91 7e 03 	lds	r30, 0x037E	; 0x80037e <__brkval>
    13e4:	f0 91 7f 03 	lds	r31, 0x037F	; 0x80037f <__brkval+0x1>
    13e8:	e2 17       	cp	r30, r18
    13ea:	f3 07       	cpc	r31, r19
    13ec:	a0 f4       	brcc	.+40     	; 0x1416 <malloc+0x120>
    13ee:	2e 1b       	sub	r18, r30
    13f0:	3f 0b       	sbc	r19, r31
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	78 f0       	brcs	.+30     	; 0x1416 <malloc+0x120>
    13f8:	ac 01       	movw	r20, r24
    13fa:	4e 5f       	subi	r20, 0xFE	; 254
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	24 17       	cp	r18, r20
    1400:	35 07       	cpc	r19, r21
    1402:	48 f0       	brcs	.+18     	; 0x1416 <malloc+0x120>
    1404:	4e 0f       	add	r20, r30
    1406:	5f 1f       	adc	r21, r31
    1408:	50 93 7f 03 	sts	0x037F, r21	; 0x80037f <__brkval+0x1>
    140c:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <__brkval>
    1410:	81 93       	st	Z+, r24
    1412:	91 93       	st	Z+, r25
    1414:	02 c0       	rjmp	.+4      	; 0x141a <malloc+0x124>
    1416:	e0 e0       	ldi	r30, 0x00	; 0
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	cf 01       	movw	r24, r30
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <free>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	09 f4       	brne	.+2      	; 0x1430 <free+0xa>
    142e:	81 c0       	rjmp	.+258    	; 0x1532 <free+0x10c>
    1430:	fc 01       	movw	r30, r24
    1432:	32 97       	sbiw	r30, 0x02	; 2
    1434:	13 82       	std	Z+3, r1	; 0x03
    1436:	12 82       	std	Z+2, r1	; 0x02
    1438:	a0 91 80 03 	lds	r26, 0x0380	; 0x800380 <__flp>
    143c:	b0 91 81 03 	lds	r27, 0x0381	; 0x800381 <__flp+0x1>
    1440:	10 97       	sbiw	r26, 0x00	; 0
    1442:	81 f4       	brne	.+32     	; 0x1464 <free+0x3e>
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    1450:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	51 f5       	brne	.+84     	; 0x14ae <free+0x88>
    145a:	f0 93 7f 03 	sts	0x037F, r31	; 0x80037f <__brkval+0x1>
    145e:	e0 93 7e 03 	sts	0x037E, r30	; 0x80037e <__brkval>
    1462:	67 c0       	rjmp	.+206    	; 0x1532 <free+0x10c>
    1464:	ed 01       	movw	r28, r26
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	ce 17       	cp	r28, r30
    146c:	df 07       	cpc	r29, r31
    146e:	40 f4       	brcc	.+16     	; 0x1480 <free+0x5a>
    1470:	4a 81       	ldd	r20, Y+2	; 0x02
    1472:	5b 81       	ldd	r21, Y+3	; 0x03
    1474:	9e 01       	movw	r18, r28
    1476:	41 15       	cp	r20, r1
    1478:	51 05       	cpc	r21, r1
    147a:	f1 f0       	breq	.+60     	; 0x14b8 <free+0x92>
    147c:	ea 01       	movw	r28, r20
    147e:	f5 cf       	rjmp	.-22     	; 0x146a <free+0x44>
    1480:	d3 83       	std	Z+3, r29	; 0x03
    1482:	c2 83       	std	Z+2, r28	; 0x02
    1484:	40 81       	ld	r20, Z
    1486:	51 81       	ldd	r21, Z+1	; 0x01
    1488:	84 0f       	add	r24, r20
    148a:	95 1f       	adc	r25, r21
    148c:	c8 17       	cp	r28, r24
    148e:	d9 07       	cpc	r29, r25
    1490:	59 f4       	brne	.+22     	; 0x14a8 <free+0x82>
    1492:	88 81       	ld	r24, Y
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	93 83       	std	Z+3, r25	; 0x03
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <free+0x92>
    14ae:	f0 93 81 03 	sts	0x0381, r31	; 0x800381 <__flp+0x1>
    14b2:	e0 93 80 03 	sts	0x0380, r30	; 0x800380 <__flp>
    14b6:	3d c0       	rjmp	.+122    	; 0x1532 <free+0x10c>
    14b8:	e9 01       	movw	r28, r18
    14ba:	fb 83       	std	Y+3, r31	; 0x03
    14bc:	ea 83       	std	Y+2, r30	; 0x02
    14be:	49 91       	ld	r20, Y+
    14c0:	59 91       	ld	r21, Y+
    14c2:	c4 0f       	add	r28, r20
    14c4:	d5 1f       	adc	r29, r21
    14c6:	ec 17       	cp	r30, r28
    14c8:	fd 07       	cpc	r31, r29
    14ca:	61 f4       	brne	.+24     	; 0x14e4 <free+0xbe>
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	84 0f       	add	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	e9 01       	movw	r28, r18
    14d8:	99 83       	std	Y+1, r25	; 0x01
    14da:	88 83       	st	Y, r24
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	9b 83       	std	Y+3, r25	; 0x03
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	e0 e0       	ldi	r30, 0x00	; 0
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	12 96       	adiw	r26, 0x02	; 2
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	19 f0       	breq	.+6      	; 0x14fa <free+0xd4>
    14f4:	fd 01       	movw	r30, r26
    14f6:	dc 01       	movw	r26, r24
    14f8:	f7 cf       	rjmp	.-18     	; 0x14e8 <free+0xc2>
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	11 97       	sbiw	r26, 0x01	; 1
    1500:	9d 01       	movw	r18, r26
    1502:	2e 5f       	subi	r18, 0xFE	; 254
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	20 91 7e 03 	lds	r18, 0x037E	; 0x80037e <__brkval>
    150e:	30 91 7f 03 	lds	r19, 0x037F	; 0x80037f <__brkval+0x1>
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	69 f4       	brne	.+26     	; 0x1532 <free+0x10c>
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	29 f4       	brne	.+10     	; 0x1526 <free+0x100>
    151c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <__flp+0x1>
    1520:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <__flp>
    1524:	02 c0       	rjmp	.+4      	; 0x152a <free+0x104>
    1526:	13 82       	std	Z+3, r1	; 0x03
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	b0 93 7f 03 	sts	0x037F, r27	; 0x80037f <__brkval+0x1>
    152e:	a0 93 7e 03 	sts	0x037E, r26	; 0x80037e <__brkval>
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <sprintf>:
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	2e 97       	sbiw	r28, 0x0e	; 14
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	0d 89       	ldd	r16, Y+21	; 0x15
    1552:	1e 89       	ldd	r17, Y+22	; 0x16
    1554:	86 e0       	ldi	r24, 0x06	; 6
    1556:	8c 83       	std	Y+4, r24	; 0x04
    1558:	1a 83       	std	Y+2, r17	; 0x02
    155a:	09 83       	std	Y+1, r16	; 0x01
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f e7       	ldi	r25, 0x7F	; 127
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	ae 01       	movw	r20, r28
    1566:	47 5e       	subi	r20, 0xE7	; 231
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	6f 89       	ldd	r22, Y+23	; 0x17
    156c:	78 8d       	ldd	r23, Y+24	; 0x18
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	10 d0       	rcall	.+32     	; 0x1594 <vfprintf>
    1574:	ef 81       	ldd	r30, Y+7	; 0x07
    1576:	f8 85       	ldd	r31, Y+8	; 0x08
    1578:	e0 0f       	add	r30, r16
    157a:	f1 1f       	adc	r31, r17
    157c:	10 82       	st	Z, r1
    157e:	2e 96       	adiw	r28, 0x0e	; 14
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <vfprintf>:
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2b 97       	sbiw	r28, 0x0b	; 11
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	6c 01       	movw	r12, r24
    15ca:	7b 01       	movw	r14, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	fc 01       	movw	r30, r24
    15d0:	17 82       	std	Z+7, r1	; 0x07
    15d2:	16 82       	std	Z+6, r1	; 0x06
    15d4:	83 81       	ldd	r24, Z+3	; 0x03
    15d6:	81 ff       	sbrs	r24, 1
    15d8:	bf c1       	rjmp	.+894    	; 0x1958 <vfprintf+0x3c4>
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	3c 01       	movw	r6, r24
    15e0:	f6 01       	movw	r30, r12
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	f7 01       	movw	r30, r14
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	7f 01       	movw	r14, r30
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x62>
    15f4:	ad c1       	rjmp	.+858    	; 0x1950 <vfprintf+0x3bc>
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x74>
    15fa:	93 fd       	sbrc	r25, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	93 ff       	sbrs	r25, 3
    1600:	81 91       	ld	r24, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	21 f4       	brne	.+8      	; 0x1610 <vfprintf+0x7c>
    1608:	b6 01       	movw	r22, r12
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	d6 d1       	rcall	.+940    	; 0x19ba <fputc>
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <vfprintf+0x4c>
    1610:	91 2c       	mov	r9, r1
    1612:	21 2c       	mov	r2, r1
    1614:	31 2c       	mov	r3, r1
    1616:	ff e1       	ldi	r31, 0x1F	; 31
    1618:	f3 15       	cp	r31, r3
    161a:	d8 f0       	brcs	.+54     	; 0x1652 <vfprintf+0xbe>
    161c:	8b 32       	cpi	r24, 0x2B	; 43
    161e:	79 f0       	breq	.+30     	; 0x163e <vfprintf+0xaa>
    1620:	38 f4       	brcc	.+14     	; 0x1630 <vfprintf+0x9c>
    1622:	80 32       	cpi	r24, 0x20	; 32
    1624:	79 f0       	breq	.+30     	; 0x1644 <vfprintf+0xb0>
    1626:	83 32       	cpi	r24, 0x23	; 35
    1628:	a1 f4       	brne	.+40     	; 0x1652 <vfprintf+0xbe>
    162a:	23 2d       	mov	r18, r3
    162c:	20 61       	ori	r18, 0x10	; 16
    162e:	1d c0       	rjmp	.+58     	; 0x166a <vfprintf+0xd6>
    1630:	8d 32       	cpi	r24, 0x2D	; 45
    1632:	61 f0       	breq	.+24     	; 0x164c <vfprintf+0xb8>
    1634:	80 33       	cpi	r24, 0x30	; 48
    1636:	69 f4       	brne	.+26     	; 0x1652 <vfprintf+0xbe>
    1638:	23 2d       	mov	r18, r3
    163a:	21 60       	ori	r18, 0x01	; 1
    163c:	16 c0       	rjmp	.+44     	; 0x166a <vfprintf+0xd6>
    163e:	83 2d       	mov	r24, r3
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	38 2e       	mov	r3, r24
    1644:	e3 2d       	mov	r30, r3
    1646:	e4 60       	ori	r30, 0x04	; 4
    1648:	3e 2e       	mov	r3, r30
    164a:	2a c0       	rjmp	.+84     	; 0x16a0 <vfprintf+0x10c>
    164c:	f3 2d       	mov	r31, r3
    164e:	f8 60       	ori	r31, 0x08	; 8
    1650:	1d c0       	rjmp	.+58     	; 0x168c <vfprintf+0xf8>
    1652:	37 fc       	sbrc	r3, 7
    1654:	2d c0       	rjmp	.+90     	; 0x16b0 <vfprintf+0x11c>
    1656:	20 ed       	ldi	r18, 0xD0	; 208
    1658:	28 0f       	add	r18, r24
    165a:	2a 30       	cpi	r18, 0x0A	; 10
    165c:	40 f0       	brcs	.+16     	; 0x166e <vfprintf+0xda>
    165e:	8e 32       	cpi	r24, 0x2E	; 46
    1660:	b9 f4       	brne	.+46     	; 0x1690 <vfprintf+0xfc>
    1662:	36 fc       	sbrc	r3, 6
    1664:	75 c1       	rjmp	.+746    	; 0x1950 <vfprintf+0x3bc>
    1666:	23 2d       	mov	r18, r3
    1668:	20 64       	ori	r18, 0x40	; 64
    166a:	32 2e       	mov	r3, r18
    166c:	19 c0       	rjmp	.+50     	; 0x16a0 <vfprintf+0x10c>
    166e:	36 fe       	sbrs	r3, 6
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xea>
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	98 9e       	mul	r9, r24
    1676:	20 0d       	add	r18, r0
    1678:	11 24       	eor	r1, r1
    167a:	92 2e       	mov	r9, r18
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <vfprintf+0x10c>
    167e:	ea e0       	ldi	r30, 0x0A	; 10
    1680:	2e 9e       	mul	r2, r30
    1682:	20 0d       	add	r18, r0
    1684:	11 24       	eor	r1, r1
    1686:	22 2e       	mov	r2, r18
    1688:	f3 2d       	mov	r31, r3
    168a:	f0 62       	ori	r31, 0x20	; 32
    168c:	3f 2e       	mov	r3, r31
    168e:	08 c0       	rjmp	.+16     	; 0x16a0 <vfprintf+0x10c>
    1690:	8c 36       	cpi	r24, 0x6C	; 108
    1692:	21 f4       	brne	.+8      	; 0x169c <vfprintf+0x108>
    1694:	83 2d       	mov	r24, r3
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	38 2e       	mov	r3, r24
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x10c>
    169c:	88 36       	cpi	r24, 0x68	; 104
    169e:	41 f4       	brne	.+16     	; 0x16b0 <vfprintf+0x11c>
    16a0:	f7 01       	movw	r30, r14
    16a2:	93 fd       	sbrc	r25, 3
    16a4:	85 91       	lpm	r24, Z+
    16a6:	93 ff       	sbrs	r25, 3
    16a8:	81 91       	ld	r24, Z+
    16aa:	7f 01       	movw	r14, r30
    16ac:	81 11       	cpse	r24, r1
    16ae:	b3 cf       	rjmp	.-154    	; 0x1616 <vfprintf+0x82>
    16b0:	98 2f       	mov	r25, r24
    16b2:	9f 7d       	andi	r25, 0xDF	; 223
    16b4:	95 54       	subi	r25, 0x45	; 69
    16b6:	93 30       	cpi	r25, 0x03	; 3
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <vfprintf+0x130>
    16ba:	0c 5f       	subi	r16, 0xFC	; 252
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	9f e3       	ldi	r25, 0x3F	; 63
    16c0:	99 83       	std	Y+1, r25	; 0x01
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x14a>
    16c4:	83 36       	cpi	r24, 0x63	; 99
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <vfprintf+0x140>
    16c8:	83 37       	cpi	r24, 0x73	; 115
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <vfprintf+0x154>
    16cc:	83 35       	cpi	r24, 0x53	; 83
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <vfprintf+0x13e>
    16d0:	55 c0       	rjmp	.+170    	; 0x177c <vfprintf+0x1e8>
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <vfprintf+0x180>
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 81       	ld	r24, Z
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	88 24       	eor	r8, r8
    16e0:	83 94       	inc	r8
    16e2:	91 2c       	mov	r9, r1
    16e4:	53 01       	movw	r10, r6
    16e6:	12 c0       	rjmp	.+36     	; 0x170c <vfprintf+0x178>
    16e8:	28 01       	movw	r4, r16
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	4f 0e       	add	r4, r31
    16ee:	51 1c       	adc	r5, r1
    16f0:	f8 01       	movw	r30, r16
    16f2:	a0 80       	ld	r10, Z
    16f4:	b1 80       	ldd	r11, Z+1	; 0x01
    16f6:	36 fe       	sbrs	r3, 6
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x16c>
    16fa:	69 2d       	mov	r22, r9
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x170>
    1700:	6f ef       	ldi	r22, 0xFF	; 255
    1702:	7f ef       	ldi	r23, 0xFF	; 255
    1704:	c5 01       	movw	r24, r10
    1706:	4e d1       	rcall	.+668    	; 0x19a4 <strnlen>
    1708:	4c 01       	movw	r8, r24
    170a:	82 01       	movw	r16, r4
    170c:	f3 2d       	mov	r31, r3
    170e:	ff 77       	andi	r31, 0x7F	; 127
    1710:	3f 2e       	mov	r3, r31
    1712:	15 c0       	rjmp	.+42     	; 0x173e <vfprintf+0x1aa>
    1714:	28 01       	movw	r4, r16
    1716:	22 e0       	ldi	r18, 0x02	; 2
    1718:	42 0e       	add	r4, r18
    171a:	51 1c       	adc	r5, r1
    171c:	f8 01       	movw	r30, r16
    171e:	a0 80       	ld	r10, Z
    1720:	b1 80       	ldd	r11, Z+1	; 0x01
    1722:	36 fe       	sbrs	r3, 6
    1724:	03 c0       	rjmp	.+6      	; 0x172c <vfprintf+0x198>
    1726:	69 2d       	mov	r22, r9
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x19c>
    172c:	6f ef       	ldi	r22, 0xFF	; 255
    172e:	7f ef       	ldi	r23, 0xFF	; 255
    1730:	c5 01       	movw	r24, r10
    1732:	2d d1       	rcall	.+602    	; 0x198e <strnlen_P>
    1734:	4c 01       	movw	r8, r24
    1736:	f3 2d       	mov	r31, r3
    1738:	f0 68       	ori	r31, 0x80	; 128
    173a:	3f 2e       	mov	r3, r31
    173c:	82 01       	movw	r16, r4
    173e:	33 fc       	sbrc	r3, 3
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <vfprintf+0x1e0>
    1742:	82 2d       	mov	r24, r2
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 16       	cp	r8, r24
    1748:	99 06       	cpc	r9, r25
    174a:	a0 f4       	brcc	.+40     	; 0x1774 <vfprintf+0x1e0>
    174c:	b6 01       	movw	r22, r12
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	33 d1       	rcall	.+614    	; 0x19ba <fputc>
    1754:	2a 94       	dec	r2
    1756:	f5 cf       	rjmp	.-22     	; 0x1742 <vfprintf+0x1ae>
    1758:	f5 01       	movw	r30, r10
    175a:	37 fc       	sbrc	r3, 7
    175c:	85 91       	lpm	r24, Z+
    175e:	37 fe       	sbrs	r3, 7
    1760:	81 91       	ld	r24, Z+
    1762:	5f 01       	movw	r10, r30
    1764:	b6 01       	movw	r22, r12
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 d1       	rcall	.+592    	; 0x19ba <fputc>
    176a:	21 10       	cpse	r2, r1
    176c:	2a 94       	dec	r2
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	82 1a       	sub	r8, r18
    1772:	91 08       	sbc	r9, r1
    1774:	81 14       	cp	r8, r1
    1776:	91 04       	cpc	r9, r1
    1778:	79 f7       	brne	.-34     	; 0x1758 <vfprintf+0x1c4>
    177a:	e1 c0       	rjmp	.+450    	; 0x193e <vfprintf+0x3aa>
    177c:	84 36       	cpi	r24, 0x64	; 100
    177e:	11 f0       	breq	.+4      	; 0x1784 <vfprintf+0x1f0>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	39 f5       	brne	.+78     	; 0x17d2 <vfprintf+0x23e>
    1784:	f8 01       	movw	r30, r16
    1786:	37 fe       	sbrs	r3, 7
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x204>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x214>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	07 2e       	mov	r0, r23
    179e:	00 0c       	add	r0, r0
    17a0:	88 0b       	sbc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	0e 5f       	subi	r16, 0xFE	; 254
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	f3 2d       	mov	r31, r3
    17aa:	ff 76       	andi	r31, 0x6F	; 111
    17ac:	3f 2e       	mov	r3, r31
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <vfprintf+0x230>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	f0 68       	ori	r31, 0x80	; 128
    17c2:	3f 2e       	mov	r3, r31
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a3 01       	movw	r20, r6
    17ca:	33 d1       	rcall	.+614    	; 0x1a32 <__ultoa_invert>
    17cc:	88 2e       	mov	r8, r24
    17ce:	86 18       	sub	r8, r6
    17d0:	44 c0       	rjmp	.+136    	; 0x185a <vfprintf+0x2c6>
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	31 f4       	brne	.+12     	; 0x17e2 <vfprintf+0x24e>
    17d6:	23 2d       	mov	r18, r3
    17d8:	2f 7e       	andi	r18, 0xEF	; 239
    17da:	b2 2e       	mov	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	25 c0       	rjmp	.+74     	; 0x182c <vfprintf+0x298>
    17e2:	93 2d       	mov	r25, r3
    17e4:	99 7f       	andi	r25, 0xF9	; 249
    17e6:	b9 2e       	mov	r11, r25
    17e8:	8f 36       	cpi	r24, 0x6F	; 111
    17ea:	c1 f0       	breq	.+48     	; 0x181c <vfprintf+0x288>
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <vfprintf+0x260>
    17ee:	88 35       	cpi	r24, 0x58	; 88
    17f0:	79 f0       	breq	.+30     	; 0x1810 <vfprintf+0x27c>
    17f2:	ae c0       	rjmp	.+348    	; 0x1950 <vfprintf+0x3bc>
    17f4:	80 37       	cpi	r24, 0x70	; 112
    17f6:	19 f0       	breq	.+6      	; 0x17fe <vfprintf+0x26a>
    17f8:	88 37       	cpi	r24, 0x78	; 120
    17fa:	21 f0       	breq	.+8      	; 0x1804 <vfprintf+0x270>
    17fc:	a9 c0       	rjmp	.+338    	; 0x1950 <vfprintf+0x3bc>
    17fe:	e9 2f       	mov	r30, r25
    1800:	e0 61       	ori	r30, 0x10	; 16
    1802:	be 2e       	mov	r11, r30
    1804:	b4 fe       	sbrs	r11, 4
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <vfprintf+0x28e>
    1808:	fb 2d       	mov	r31, r11
    180a:	f4 60       	ori	r31, 0x04	; 4
    180c:	bf 2e       	mov	r11, r31
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x28e>
    1810:	34 fe       	sbrs	r3, 4
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <vfprintf+0x294>
    1814:	29 2f       	mov	r18, r25
    1816:	26 60       	ori	r18, 0x06	; 6
    1818:	b2 2e       	mov	r11, r18
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x294>
    181c:	28 e0       	ldi	r18, 0x08	; 8
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	05 c0       	rjmp	.+10     	; 0x182c <vfprintf+0x298>
    1822:	20 e1       	ldi	r18, 0x10	; 16
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x298>
    1828:	20 e1       	ldi	r18, 0x10	; 16
    182a:	32 e0       	ldi	r19, 0x02	; 2
    182c:	f8 01       	movw	r30, r16
    182e:	b7 fe       	sbrs	r11, 7
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <vfprintf+0x2ac>
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	0c 5f       	subi	r16, 0xFC	; 252
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0x2b8>
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 5f       	subi	r16, 0xFE	; 254
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	a3 01       	movw	r20, r6
    184e:	f1 d0       	rcall	.+482    	; 0x1a32 <__ultoa_invert>
    1850:	88 2e       	mov	r8, r24
    1852:	86 18       	sub	r8, r6
    1854:	fb 2d       	mov	r31, r11
    1856:	ff 77       	andi	r31, 0x7F	; 127
    1858:	3f 2e       	mov	r3, r31
    185a:	36 fe       	sbrs	r3, 6
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x2e4>
    185e:	23 2d       	mov	r18, r3
    1860:	2e 7f       	andi	r18, 0xFE	; 254
    1862:	a2 2e       	mov	r10, r18
    1864:	89 14       	cp	r8, r9
    1866:	58 f4       	brcc	.+22     	; 0x187e <vfprintf+0x2ea>
    1868:	34 fe       	sbrs	r3, 4
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <vfprintf+0x2ee>
    186c:	32 fc       	sbrc	r3, 2
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <vfprintf+0x2ee>
    1870:	83 2d       	mov	r24, r3
    1872:	8e 7e       	andi	r24, 0xEE	; 238
    1874:	a8 2e       	mov	r10, r24
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <vfprintf+0x2ee>
    1878:	b8 2c       	mov	r11, r8
    187a:	a3 2c       	mov	r10, r3
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x2f0>
    187e:	b8 2c       	mov	r11, r8
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfprintf+0x2f0>
    1882:	b9 2c       	mov	r11, r9
    1884:	a4 fe       	sbrs	r10, 4
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <vfprintf+0x312>
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0d       	add	r30, r8
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	80 33       	cpi	r24, 0x30	; 48
    1892:	21 f4       	brne	.+8      	; 0x189c <vfprintf+0x308>
    1894:	9a 2d       	mov	r25, r10
    1896:	99 7e       	andi	r25, 0xE9	; 233
    1898:	a9 2e       	mov	r10, r25
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <vfprintf+0x31a>
    189c:	a2 fe       	sbrs	r10, 2
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x318>
    18a0:	b3 94       	inc	r11
    18a2:	b3 94       	inc	r11
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <vfprintf+0x31a>
    18a6:	8a 2d       	mov	r24, r10
    18a8:	86 78       	andi	r24, 0x86	; 134
    18aa:	09 f0       	breq	.+2      	; 0x18ae <vfprintf+0x31a>
    18ac:	b3 94       	inc	r11
    18ae:	a3 fc       	sbrc	r10, 3
    18b0:	10 c0       	rjmp	.+32     	; 0x18d2 <vfprintf+0x33e>
    18b2:	a0 fe       	sbrs	r10, 0
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <vfprintf+0x32e>
    18b6:	b2 14       	cp	r11, r2
    18b8:	80 f4       	brcc	.+32     	; 0x18da <vfprintf+0x346>
    18ba:	28 0c       	add	r2, r8
    18bc:	92 2c       	mov	r9, r2
    18be:	9b 18       	sub	r9, r11
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <vfprintf+0x348>
    18c2:	b2 14       	cp	r11, r2
    18c4:	58 f4       	brcc	.+22     	; 0x18dc <vfprintf+0x348>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	76 d0       	rcall	.+236    	; 0x19ba <fputc>
    18ce:	b3 94       	inc	r11
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <vfprintf+0x32e>
    18d2:	b2 14       	cp	r11, r2
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x348>
    18d6:	2b 18       	sub	r2, r11
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x34a>
    18da:	98 2c       	mov	r9, r8
    18dc:	21 2c       	mov	r2, r1
    18de:	a4 fe       	sbrs	r10, 4
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <vfprintf+0x36c>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	68 d0       	rcall	.+208    	; 0x19ba <fputc>
    18ea:	a2 fe       	sbrs	r10, 2
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <vfprintf+0x386>
    18ee:	a1 fc       	sbrc	r10, 1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x364>
    18f2:	88 e7       	ldi	r24, 0x78	; 120
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x368>
    18f8:	88 e5       	ldi	r24, 0x58	; 88
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	b6 01       	movw	r22, r12
    18fe:	0c c0       	rjmp	.+24     	; 0x1918 <vfprintf+0x384>
    1900:	8a 2d       	mov	r24, r10
    1902:	86 78       	andi	r24, 0x86	; 134
    1904:	51 f0       	breq	.+20     	; 0x191a <vfprintf+0x386>
    1906:	a1 fe       	sbrs	r10, 1
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x37a>
    190a:	8b e2       	ldi	r24, 0x2B	; 43
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <vfprintf+0x37c>
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	a7 fc       	sbrc	r10, 7
    1912:	8d e2       	ldi	r24, 0x2D	; 45
    1914:	b6 01       	movw	r22, r12
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	50 d0       	rcall	.+160    	; 0x19ba <fputc>
    191a:	89 14       	cp	r8, r9
    191c:	30 f4       	brcc	.+12     	; 0x192a <vfprintf+0x396>
    191e:	b6 01       	movw	r22, r12
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	4a d0       	rcall	.+148    	; 0x19ba <fputc>
    1926:	9a 94       	dec	r9
    1928:	f8 cf       	rjmp	.-16     	; 0x191a <vfprintf+0x386>
    192a:	8a 94       	dec	r8
    192c:	f3 01       	movw	r30, r6
    192e:	e8 0d       	add	r30, r8
    1930:	f1 1d       	adc	r31, r1
    1932:	80 81       	ld	r24, Z
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	40 d0       	rcall	.+128    	; 0x19ba <fputc>
    193a:	81 10       	cpse	r8, r1
    193c:	f6 cf       	rjmp	.-20     	; 0x192a <vfprintf+0x396>
    193e:	22 20       	and	r2, r2
    1940:	09 f4       	brne	.+2      	; 0x1944 <vfprintf+0x3b0>
    1942:	4e ce       	rjmp	.-868    	; 0x15e0 <vfprintf+0x4c>
    1944:	b6 01       	movw	r22, r12
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	37 d0       	rcall	.+110    	; 0x19ba <fputc>
    194c:	2a 94       	dec	r2
    194e:	f7 cf       	rjmp	.-18     	; 0x193e <vfprintf+0x3aa>
    1950:	f6 01       	movw	r30, r12
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	97 81       	ldd	r25, Z+7	; 0x07
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0x3c8>
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	2b 96       	adiw	r28, 0x0b	; 11
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	5f 90       	pop	r5
    1986:	4f 90       	pop	r4
    1988:	3f 90       	pop	r3
    198a:	2f 90       	pop	r2
    198c:	08 95       	ret

0000198e <strnlen_P>:
    198e:	fc 01       	movw	r30, r24
    1990:	05 90       	lpm	r0, Z+
    1992:	61 50       	subi	r22, 0x01	; 1
    1994:	70 40       	sbci	r23, 0x00	; 0
    1996:	01 10       	cpse	r0, r1
    1998:	d8 f7       	brcc	.-10     	; 0x1990 <strnlen_P+0x2>
    199a:	80 95       	com	r24
    199c:	90 95       	com	r25
    199e:	8e 0f       	add	r24, r30
    19a0:	9f 1f       	adc	r25, r31
    19a2:	08 95       	ret

000019a4 <strnlen>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	61 50       	subi	r22, 0x01	; 1
    19a8:	70 40       	sbci	r23, 0x00	; 0
    19aa:	01 90       	ld	r0, Z+
    19ac:	01 10       	cpse	r0, r1
    19ae:	d8 f7       	brcc	.-10     	; 0x19a6 <strnlen+0x2>
    19b0:	80 95       	com	r24
    19b2:	90 95       	com	r25
    19b4:	8e 0f       	add	r24, r30
    19b6:	9f 1f       	adc	r25, r31
    19b8:	08 95       	ret

000019ba <fputc>:
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	fb 01       	movw	r30, r22
    19c4:	23 81       	ldd	r18, Z+3	; 0x03
    19c6:	21 fd       	sbrc	r18, 1
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <fputc+0x16>
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
    19ce:	2c c0       	rjmp	.+88     	; 0x1a28 <fputc+0x6e>
    19d0:	22 ff       	sbrs	r18, 2
    19d2:	16 c0       	rjmp	.+44     	; 0x1a00 <fputc+0x46>
    19d4:	46 81       	ldd	r20, Z+6	; 0x06
    19d6:	57 81       	ldd	r21, Z+7	; 0x07
    19d8:	24 81       	ldd	r18, Z+4	; 0x04
    19da:	35 81       	ldd	r19, Z+5	; 0x05
    19dc:	42 17       	cp	r20, r18
    19de:	53 07       	cpc	r21, r19
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <fputc+0x38>
    19e2:	a0 81       	ld	r26, Z
    19e4:	b1 81       	ldd	r27, Z+1	; 0x01
    19e6:	9d 01       	movw	r18, r26
    19e8:	2f 5f       	subi	r18, 0xFF	; 255
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	31 83       	std	Z+1, r19	; 0x01
    19ee:	20 83       	st	Z, r18
    19f0:	8c 93       	st	X, r24
    19f2:	26 81       	ldd	r18, Z+6	; 0x06
    19f4:	37 81       	ldd	r19, Z+7	; 0x07
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	37 83       	std	Z+7, r19	; 0x07
    19fc:	26 83       	std	Z+6, r18	; 0x06
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <fputc+0x6e>
    1a00:	8b 01       	movw	r16, r22
    1a02:	ec 01       	movw	r28, r24
    1a04:	fb 01       	movw	r30, r22
    1a06:	00 84       	ldd	r0, Z+8	; 0x08
    1a08:	f1 85       	ldd	r31, Z+9	; 0x09
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	09 95       	icall
    1a0e:	89 2b       	or	r24, r25
    1a10:	e1 f6       	brne	.-72     	; 0x19ca <fputc+0x10>
    1a12:	d8 01       	movw	r26, r16
    1a14:	16 96       	adiw	r26, 0x06	; 6
    1a16:	8d 91       	ld	r24, X+
    1a18:	9c 91       	ld	r25, X
    1a1a:	17 97       	sbiw	r26, 0x07	; 7
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	17 96       	adiw	r26, 0x07	; 7
    1a20:	9c 93       	st	X, r25
    1a22:	8e 93       	st	-X, r24
    1a24:	16 97       	sbiw	r26, 0x06	; 6
    1a26:	ce 01       	movw	r24, r28
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	08 95       	ret

00001a32 <__ultoa_invert>:
    1a32:	fa 01       	movw	r30, r20
    1a34:	aa 27       	eor	r26, r26
    1a36:	28 30       	cpi	r18, 0x08	; 8
    1a38:	51 f1       	breq	.+84     	; 0x1a8e <__ultoa_invert+0x5c>
    1a3a:	20 31       	cpi	r18, 0x10	; 16
    1a3c:	81 f1       	breq	.+96     	; 0x1a9e <__ultoa_invert+0x6c>
    1a3e:	e8 94       	clt
    1a40:	6f 93       	push	r22
    1a42:	6e 7f       	andi	r22, 0xFE	; 254
    1a44:	6e 5f       	subi	r22, 0xFE	; 254
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	af 4f       	sbci	r26, 0xFF	; 255
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	3e d0       	rcall	.+124    	; 0x1ace <__ultoa_invert+0x9c>
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
    1a54:	3c d0       	rcall	.+120    	; 0x1ace <__ultoa_invert+0x9c>
    1a56:	67 0f       	add	r22, r23
    1a58:	78 1f       	adc	r23, r24
    1a5a:	89 1f       	adc	r24, r25
    1a5c:	9a 1f       	adc	r25, r26
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	68 0f       	add	r22, r24
    1a62:	79 1f       	adc	r23, r25
    1a64:	8a 1f       	adc	r24, r26
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	6a 0f       	add	r22, r26
    1a6c:	71 1d       	adc	r23, r1
    1a6e:	81 1d       	adc	r24, r1
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	20 d0       	rcall	.+64     	; 0x1ab6 <__ultoa_invert+0x84>
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__ultoa_invert+0x48>
    1a78:	68 94       	set
    1a7a:	3f 91       	pop	r19
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	26 9f       	mul	r18, r22
    1a80:	11 24       	eor	r1, r1
    1a82:	30 19       	sub	r19, r0
    1a84:	30 5d       	subi	r19, 0xD0	; 208
    1a86:	31 93       	st	Z+, r19
    1a88:	de f6       	brtc	.-74     	; 0x1a40 <__ultoa_invert+0xe>
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret
    1a8e:	46 2f       	mov	r20, r22
    1a90:	47 70       	andi	r20, 0x07	; 7
    1a92:	40 5d       	subi	r20, 0xD0	; 208
    1a94:	41 93       	st	Z+, r20
    1a96:	b3 e0       	ldi	r27, 0x03	; 3
    1a98:	0f d0       	rcall	.+30     	; 0x1ab8 <__ultoa_invert+0x86>
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0x5c>
    1a9c:	f6 cf       	rjmp	.-20     	; 0x1a8a <__ultoa_invert+0x58>
    1a9e:	46 2f       	mov	r20, r22
    1aa0:	4f 70       	andi	r20, 0x0F	; 15
    1aa2:	40 5d       	subi	r20, 0xD0	; 208
    1aa4:	4a 33       	cpi	r20, 0x3A	; 58
    1aa6:	18 f0       	brcs	.+6      	; 0x1aae <__ultoa_invert+0x7c>
    1aa8:	49 5d       	subi	r20, 0xD9	; 217
    1aaa:	31 fd       	sbrc	r19, 1
    1aac:	40 52       	subi	r20, 0x20	; 32
    1aae:	41 93       	st	Z+, r20
    1ab0:	02 d0       	rcall	.+4      	; 0x1ab6 <__ultoa_invert+0x84>
    1ab2:	a9 f7       	brne	.-22     	; 0x1a9e <__ultoa_invert+0x6c>
    1ab4:	ea cf       	rjmp	.-44     	; 0x1a8a <__ultoa_invert+0x58>
    1ab6:	b4 e0       	ldi	r27, 0x04	; 4
    1ab8:	a6 95       	lsr	r26
    1aba:	97 95       	ror	r25
    1abc:	87 95       	ror	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	ba 95       	dec	r27
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <__ultoa_invert+0x86>
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 05       	cpc	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	08 95       	ret
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	0a 2e       	mov	r0, r26
    1ad4:	06 94       	lsr	r0
    1ad6:	57 95       	ror	r21
    1ad8:	47 95       	ror	r20
    1ada:	37 95       	ror	r19
    1adc:	27 95       	ror	r18
    1ade:	ba 95       	dec	r27
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__ultoa_invert+0xa2>
    1ae2:	62 0f       	add	r22, r18
    1ae4:	73 1f       	adc	r23, r19
    1ae6:	84 1f       	adc	r24, r20
    1ae8:	95 1f       	adc	r25, r21
    1aea:	a0 1d       	adc	r26, r0
    1aec:	08 95       	ret

00001aee <_exit>:
    1aee:	f8 94       	cli

00001af0 <__stop_program>:
    1af0:	ff cf       	rjmp	.-2      	; 0x1af0 <__stop_program>
