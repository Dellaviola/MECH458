
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  00001a48  00001adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800302  00800302  00001cde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004fae  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a8b  00000000  00000000  00007042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003292  00000000  00000000  00008acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d8  00000000  00000000  0000bd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000923f  00000000  00000000  0000c538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018dd  00000000  00000000  00015777  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00017054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00017344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	f2 c4       	rjmp	.+2532   	; 0xa1a <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c7       	rjmp	.+4074   	; 0x1030 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e4       	ldi	r30, 0x48	; 72
      ac:	fa e1       	ldi	r31, 0x1A	; 26
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 30       	cpi	r26, 0x02	; 2
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a2 e0       	ldi	r26, 0x02	; 2
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	af 38       	cpi	r26, 0x8F	; 143
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	38 d3       	rcall	.+1648   	; 0x740 <main>
      d0:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <_exit>

000000d4 <__bad_interrupt>:
      d4:	e0 c3       	rjmp	.+1984   	; 0x896 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_ADCCount>
     120:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_ADCCount>
     12c:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <g_ADCCount+0x1>
     13a:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e2 5f       	subi	r30, 0xF2	; 242
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_ADCCount>
     162:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	67 99       	sbic	0x0c, 7	; 12
     18e:	16 c0       	rjmp	.+44     	; 0x1bc <SERVER_Task+0x32>
     190:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     194:	88 23       	and	r24, r24
     196:	81 f0       	breq	.+32     	; 0x1b8 <SERVER_Task+0x2e>
     198:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     19c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     1a0:	89 2b       	or	r24, r25
     1a2:	41 f4       	brne	.+16     	; 0x1b4 <SERVER_Task+0x2a>
     1a4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     1a8:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     1ac:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <STAGE1+0x1>
     1b0:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <STAGE1>
     1b4:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_WDTimeout>
     1b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2375>
     1bc:	66 99       	sbic	0x0c, 6	; 12
     1be:	0e c0       	rjmp	.+28     	; 0x1dc <SERVER_Task+0x52>
     1c0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     1c4:	88 23       	and	r24, r24
     1c6:	41 f0       	breq	.+16     	; 0x1d8 <SERVER_Task+0x4e>
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <STAGE2>
     1ce:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <STAGE2+0x1>
     1d2:	95 d2       	rcall	.+1322   	; 0x6fe <LL_UpdateStatus>
     1d4:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_WDTimeout>
     1d8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2376>
     1dc:	65 99       	sbic	0x0c, 5	; 12
     1de:	0b c0       	rjmp	.+22     	; 0x1f6 <SERVER_Task+0x6c>
     1e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     1e4:	88 23       	and	r24, r24
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <SERVER_Task+0x68>
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <_timer+0x23>
     1ee:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_WDTimeout>
     1f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2377>
     1f6:	67 9b       	sbis	0x0c, 7	; 12
     1f8:	0e c0       	rjmp	.+28     	; 0x216 <SERVER_Task+0x8c>
     1fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     1fe:	81 11       	cpse	r24, r1
     200:	07 c0       	rjmp	.+14     	; 0x210 <SERVER_Task+0x86>
     202:	ee e2       	ldi	r30, 0x2E	; 46
     204:	f3 e0       	ldi	r31, 0x03	; 3
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	82 8f       	std	Z+26, r24	; 0x1a
     20a:	84 a7       	std	Z+44, r24	; 0x2c
     20c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <_timer+0x47>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2375>
     216:	66 9b       	sbis	0x0c, 6	; 12
     218:	2a c0       	rjmp	.+84     	; 0x26e <SERVER_Task+0xe4>
     21a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     21e:	81 11       	cpse	r24, r1
     220:	23 c0       	rjmp	.+70     	; 0x268 <SERVER_Task+0xde>
     222:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <STAGE2>
     226:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <STAGE2+0x1>
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	71 f4       	brne	.+28     	; 0x24a <SERVER_Task+0xc0>
     22e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     232:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     236:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <STAGE2+0x1>
     23a:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <STAGE2>
     23e:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <g_Timer>
     242:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <g_Timer+0x1>
     246:	65 d2       	rcall	.+1226   	; 0x712 <LL_UpdateTick>
     248:	0a c0       	rjmp	.+20     	; 0x25e <SERVER_Task+0xd4>
     24a:	13 d2       	rcall	.+1062   	; 0x672 <LL_Next>
     24c:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <STAGE2+0x1>
     250:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <STAGE2>
     254:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <g_Timer>
     258:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <g_Timer+0x1>
     25c:	5a d2       	rcall	.+1204   	; 0x712 <LL_UpdateTick>
     25e:	ea e7       	ldi	r30, 0x7A	; 122
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	80 64       	ori	r24, 0x40	; 64
     266:	80 83       	st	Z, r24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2376>
     26e:	65 9b       	sbis	0x0c, 5	; 12
     270:	0f c0       	rjmp	.+30     	; 0x290 <SERVER_Task+0x106>
     272:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     276:	81 11       	cpse	r24, r1
     278:	08 c0       	rjmp	.+16     	; 0x28a <SERVER_Task+0x100>
     27a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     27e:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     282:	1d d2       	rcall	.+1082   	; 0x6be <LL_GetClass>
     284:	85 30       	cpi	r24, 0x05	; 5
     286:	09 f4       	brne	.+2      	; 0x28a <SERVER_Task+0x100>
     288:	6f d6       	rcall	.+3294   	; 0xf68 <SYS_Rampdown>
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2377>
     290:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     294:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     298:	12 d2       	rcall	.+1060   	; 0x6be <LL_GetClass>
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	39 f4       	brne	.+14     	; 0x2ac <SERVER_Task+0x122>
     29e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xe>
     2a2:	81 11       	cpse	r24, r1
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <SERVER_Task+0x122>
     2a6:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <memory.2378>
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <SERVER_Task+0x12a>
     2ac:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <memory.2378>
     2b0:	81 11       	cpse	r24, r1
     2b2:	2b c0       	rjmp	.+86     	; 0x30a <SERVER_Task+0x180>
     2b4:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     2b8:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     2bc:	00 d2       	rcall	.+1024   	; 0x6be <LL_GetClass>
     2be:	84 30       	cpi	r24, 0x04	; 4
     2c0:	21 f1       	breq	.+72     	; 0x30a <SERVER_Task+0x180>
     2c2:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <HEAD>
     2c6:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <HEAD+0x1>
     2ca:	82 81       	ldd	r24, Z+2	; 0x02
     2cc:	93 81       	ldd	r25, Z+3	; 0x03
     2ce:	f7 d1       	rcall	.+1006   	; 0x6be <LL_GetClass>
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	d9 f0       	breq	.+54     	; 0x30a <SERVER_Task+0x180>
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <memory.2378>
     2da:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <HEAD>
     2de:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <HEAD+0x1>
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	eb d1       	rcall	.+982    	; 0x6be <LL_GetClass>
     2e8:	e8 2f       	mov	r30, r24
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	e7 5f       	subi	r30, 0xF7	; 247
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	c0 81       	ld	r28, Z
     2f2:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     2f6:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     2fa:	e1 d1       	rcall	.+962    	; 0x6be <LL_GetClass>
     2fc:	e8 2f       	mov	r30, r24
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	e7 5f       	subi	r30, 0xF7	; 247
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	80 81       	ld	r24, Z
     306:	6c 2f       	mov	r22, r28
     308:	68 d3       	rcall	.+1744   	; 0x9da <STEPPER_SetRotation>
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <ADC_Task>:
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	cf 93       	push	r28
     318:	ee e0       	ldi	r30, 0x0E	; 14
     31a:	f3 e0       	ldi	r31, 0x03	; 3
     31c:	a0 81       	ld	r26, Z
     31e:	b1 81       	ldd	r27, Z+1	; 0x01
     320:	60 81       	ld	r22, Z
     322:	71 81       	ldd	r23, Z+1	; 0x01
     324:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <ticks.2386>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <ticks.2386>
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	76 01       	movw	r14, r12
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	4f b7       	in	r20, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	fc 01       	movw	r30, r24
     33e:	ee 0f       	add	r30, r30
     340:	ff 1f       	adc	r31, r31
     342:	e2 5f       	subi	r30, 0xF2	; 242
     344:	fc 4f       	sbci	r31, 0xFC	; 252
     346:	20 81       	ld	r18, Z
     348:	31 81       	ldd	r19, Z+1	; 0x01
     34a:	c2 0e       	add	r12, r18
     34c:	d3 1e       	adc	r13, r19
     34e:	e1 1c       	adc	r14, r1
     350:	f1 1c       	adc	r15, r1
     352:	20 81       	ld	r18, Z
     354:	31 81       	ldd	r19, Z+1	; 0x01
     356:	26 17       	cp	r18, r22
     358:	37 07       	cpc	r19, r23
     35a:	38 f4       	brcc	.+14     	; 0x36a <ADC_Task+0x5c>
     35c:	fc 01       	movw	r30, r24
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	e2 5f       	subi	r30, 0xF2	; 242
     364:	fc 4f       	sbci	r31, 0xFC	; 252
     366:	60 81       	ld	r22, Z
     368:	71 81       	ldd	r23, Z+1	; 0x01
     36a:	fc 01       	movw	r30, r24
     36c:	ee 0f       	add	r30, r30
     36e:	ff 1f       	adc	r31, r31
     370:	e2 5f       	subi	r30, 0xF2	; 242
     372:	fc 4f       	sbci	r31, 0xFC	; 252
     374:	20 81       	ld	r18, Z
     376:	31 81       	ldd	r19, Z+1	; 0x01
     378:	a2 17       	cp	r26, r18
     37a:	b3 07       	cpc	r27, r19
     37c:	08 f0       	brcs	.+2      	; 0x380 <ADC_Task+0x72>
     37e:	4d c0       	rjmp	.+154    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     380:	fc 01       	movw	r30, r24
     382:	ee 0f       	add	r30, r30
     384:	ff 1f       	adc	r31, r31
     386:	e2 5f       	subi	r30, 0xF2	; 242
     388:	fc 4f       	sbci	r31, 0xFC	; 252
     38a:	a0 81       	ld	r26, Z
     38c:	b1 81       	ldd	r27, Z+1	; 0x01
     38e:	45 c0       	rjmp	.+138    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     390:	8f b7       	in	r24, 0x3f	; 63
     392:	f8 94       	cli
     394:	ca 1a       	sub	r12, r26
     396:	db 0a       	sbc	r13, r27
     398:	e1 08       	sbc	r14, r1
     39a:	f1 08       	sbc	r15, r1
     39c:	c6 1a       	sub	r12, r22
     39e:	d7 0a       	sbc	r13, r23
     3a0:	e1 08       	sbc	r14, r1
     3a2:	f1 08       	sbc	r15, r1
     3a4:	f6 94       	lsr	r15
     3a6:	e7 94       	ror	r14
     3a8:	d7 94       	ror	r13
     3aa:	c7 94       	ror	r12
     3ac:	f6 94       	lsr	r15
     3ae:	e7 94       	ror	r14
     3b0:	d7 94       	ror	r13
     3b2:	c7 94       	ror	r12
     3b4:	8f bf       	out	0x3f, r24	; 63
     3b6:	cf b7       	in	r28, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	d7 01       	movw	r26, r14
     3bc:	c6 01       	movw	r24, r12
     3be:	0b 97       	sbiw	r24, 0x0b	; 11
     3c0:	a1 09       	sbc	r26, r1
     3c2:	b1 09       	sbc	r27, r1
     3c4:	8d 3d       	cpi	r24, 0xDD	; 221
     3c6:	93 40       	sbci	r25, 0x03	; 3
     3c8:	a1 05       	cpc	r26, r1
     3ca:	b1 05       	cpc	r27, r1
     3cc:	a0 f4       	brcc	.+40     	; 0x3f6 <ADC_Task+0xe8>
     3ce:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <STAGE2>
     3d2:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <STAGE2+0x1>
     3d6:	78 d1       	rcall	.+752    	; 0x6c8 <LL_GetRefl>
     3d8:	a0 e0       	ldi	r26, 0x00	; 0
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	c8 16       	cp	r12, r24
     3de:	d9 06       	cpc	r13, r25
     3e0:	ea 06       	cpc	r14, r26
     3e2:	fb 06       	cpc	r15, r27
     3e4:	40 f4       	brcc	.+16     	; 0x3f6 <ADC_Task+0xe8>
     3e6:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <STAGE2>
     3ea:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <STAGE2+0x1>
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	11 f0       	breq	.+4      	; 0x3f6 <ADC_Task+0xe8>
     3f2:	b6 01       	movw	r22, r12
     3f4:	74 d1       	rcall	.+744    	; 0x6de <LL_UpdateRefl>
     3f6:	cf bf       	out	0x3f, r28	; 63
     3f8:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_ADCCount+0x1>
     3fc:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <g_ADCCount>
     400:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <_timer+0x11>
     404:	66 9b       	sbis	0x0c, 6	; 12
     406:	06 c0       	rjmp	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	ea e7       	ldi	r30, 0x7A	; 122
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 64       	ori	r24, 0x40	; 64
     410:	80 83       	st	Z, r24
     412:	0a c0       	rjmp	.+20     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     414:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <ticks.2386>
     418:	07 c0       	rjmp	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41a:	4f bf       	out	0x3f, r20	; 63
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	86 30       	cpi	r24, 0x06	; 6
     420:	91 05       	cpc	r25, r1
     422:	09 f0       	breq	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	89 cf       	rjmp	.-238    	; 0x338 <ADC_Task+0x2a>
     426:	b4 cf       	rjmp	.-152    	; 0x390 <ADC_Task+0x82>
     428:	cf 91       	pop	r28
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <MAG_Task>:
     434:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <g_MotorOn>
     438:	88 23       	and	r24, r24
     43a:	29 f0       	breq	.+10     	; 0x446 <MAG_Task+0x12>
     43c:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <tick.2408>
     440:	8f 5f       	subi	r24, 0xFF	; 255
     442:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <tick.2408>
     446:	64 99       	sbic	0x0c, 4	; 12
     448:	1a c0       	rjmp	.+52     	; 0x47e <MAG_Task+0x4a>
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     450:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     454:	54 d1       	rcall	.+680    	; 0x6fe <LL_UpdateStatus>
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     45c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     460:	44 d1       	rcall	.+648    	; 0x6ea <LL_UpdateMag>
     462:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     466:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     46a:	03 d1       	rcall	.+518    	; 0x672 <LL_Next>
     46c:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <STAGE1+0x1>
     470:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <STAGE1>
     474:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <tick.2408>
     478:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <_timer+0x1a>
     47c:	08 95       	ret
     47e:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <tick.2408>
     482:	83 33       	cpi	r24, 0x33	; 51
     484:	c8 f0       	brcs	.+50     	; 0x4b8 <MAG_Task+0x84>
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     48c:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     490:	36 d1       	rcall	.+620    	; 0x6fe <LL_UpdateStatus>
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     498:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     49c:	26 d1       	rcall	.+588    	; 0x6ea <LL_UpdateMag>
     49e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     4a2:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     4a6:	e5 d0       	rcall	.+458    	; 0x672 <LL_Next>
     4a8:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <STAGE1+0x1>
     4ac:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <STAGE1>
     4b0:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <tick.2408>
     4b4:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <_timer+0x1a>
     4b8:	08 95       	ret

000004ba <EXIT_Task>:
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	1f 92       	push	r1
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	ea e7       	ldi	r30, 0x7A	; 122
     4c8:	f3 e0       	ldi	r31, 0x03	; 3
     4ca:	85 81       	ldd	r24, Z+5	; 0x05
     4cc:	96 81       	ldd	r25, Z+6	; 0x06
     4ce:	97 81       	ldd	r25, Z+7	; 0x07
     4d0:	89 1b       	sub	r24, r25
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	99 81       	ldd	r25, Y+1	; 0x01
     4d6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <STEPPER_RANGE>
     4da:	98 17       	cp	r25, r24
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <EXIT_Task+0x26>
     4de:	3c c0       	rjmp	.+120    	; 0x558 <EXIT_Task+0x9e>
     4e0:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xe>
     4e4:	81 11       	cpse	r24, r1
     4e6:	38 c0       	rjmp	.+112    	; 0x558 <EXIT_Task+0x9e>
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	85 30       	cpi	r24, 0x05	; 5
     4ec:	40 f4       	brcc	.+16     	; 0x4fe <EXIT_Task+0x44>
     4ee:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xa>
     4f2:	81 11       	cpse	r24, r1
     4f4:	04 c0       	rjmp	.+8      	; 0x4fe <EXIT_Task+0x44>
     4f6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <STEPPER_SET>
     4fa:	82 87       	std	Z+10, r24	; 0x0a
     4fc:	15 86       	std	Z+13, r1	; 0x0d
     4fe:	63 e0       	ldi	r22, 0x03	; 3
     500:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     504:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     508:	fa d0       	rcall	.+500    	; 0x6fe <LL_UpdateStatus>
     50a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     50e:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     512:	af d0       	rcall	.+350    	; 0x672 <LL_Next>
     514:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <HEAD+0x1>
     518:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <HEAD>
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	cc d1       	rcall	.+920    	; 0x8ba <PWM>
     522:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <HEAD>
     526:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <HEAD+0x1>
     52a:	82 81       	ldd	r24, Z+2	; 0x02
     52c:	93 81       	ldd	r25, Z+3	; 0x03
     52e:	c7 d0       	rcall	.+398    	; 0x6be <LL_GetClass>
     530:	e8 2f       	mov	r30, r24
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	e7 5f       	subi	r30, 0xF7	; 247
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	10 81       	ld	r17, Z
     53a:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     53e:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     542:	bd d0       	rcall	.+378    	; 0x6be <LL_GetClass>
     544:	e8 2f       	mov	r30, r24
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	e7 5f       	subi	r30, 0xF7	; 247
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	80 81       	ld	r24, Z
     54e:	61 2f       	mov	r22, r17
     550:	44 d2       	rcall	.+1160   	; 0x9da <STEPPER_SetRotation>
     552:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <_timer+0x23>
     556:	14 c0       	rjmp	.+40     	; 0x580 <EXIT_Task+0xc6>
     558:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <HEAD>
     55c:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <HEAD+0x1>
     560:	84 81       	ldd	r24, Z+4	; 0x04
     562:	95 81       	ldd	r25, Z+5	; 0x05
     564:	00 97       	sbiw	r24, 0x00	; 0
     566:	49 f0       	breq	.+18     	; 0x57a <EXIT_Task+0xc0>
     568:	aa d0       	rcall	.+340    	; 0x6be <LL_GetClass>
     56a:	18 2f       	mov	r17, r24
     56c:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     570:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     574:	a4 d0       	rcall	.+328    	; 0x6be <LL_GetClass>
     576:	18 17       	cp	r17, r24
     578:	19 f0       	breq	.+6      	; 0x580 <EXIT_Task+0xc6>
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	9d d1       	rcall	.+826    	; 0x8ba <PWM>
     580:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     584:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     588:	9a d0       	rcall	.+308    	; 0x6be <LL_GetClass>
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	1f 91       	pop	r17
     592:	08 95       	ret

00000594 <BTN_Task>:
     594:	89 b1       	in	r24, 0x09	; 9
     596:	83 70       	andi	r24, 0x03	; 3
     598:	f9 f0       	breq	.+62     	; 0x5d8 <BTN_Task+0x44>
     59a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__data_end>
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <__data_end>
     5a4:	8b 30       	cpi	r24, 0x0B	; 11
     5a6:	d0 f0       	brcs	.+52     	; 0x5dc <BTN_Task+0x48>
     5a8:	89 b1       	in	r24, 0x09	; 9
     5aa:	83 70       	andi	r24, 0x03	; 3
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <BTN_Task+0x20>
     5ae:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <__data_end>
     5b2:	08 95       	ret
     5b4:	89 b1       	in	r24, 0x09	; 9
     5b6:	83 70       	andi	r24, 0x03	; 3
     5b8:	81 30       	cpi	r24, 0x01	; 1
     5ba:	29 f4       	brne	.+10     	; 0x5c6 <BTN_Task+0x32>
     5bc:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <g_PauseRequest>
     5c0:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <__data_end>
     5c4:	08 95       	ret
     5c6:	89 b1       	in	r24, 0x09	; 9
     5c8:	83 70       	andi	r24, 0x03	; 3
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	39 f4       	brne	.+14     	; 0x5dc <BTN_Task+0x48>
     5ce:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <_timer+0x2c>
     5d2:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <__data_end>
     5d6:	08 95       	ret
     5d8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <__data_end>
     5dc:	08 95       	ret

000005de <WATCHDOG_Task>:
     5de:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <g_WDTimeout>
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	18 f0       	brcs	.+6      	; 0x5ec <WATCHDOG_Task+0xe>
     5e6:	86 e1       	ldi	r24, 0x16	; 22
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	98 d3       	rcall	.+1840   	; 0xd1c <SYS_Pause>
     5ec:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <g_WDTimeout>
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <g_WDTimeout>
     5f6:	08 95       	ret

000005f8 <D_Blinky>:
     5f8:	9b b1       	in	r25, 0x0b	; 11
     5fa:	80 ea       	ldi	r24, 0xA0	; 160
     5fc:	89 27       	eor	r24, r25
     5fe:	8b b9       	out	0x0b, r24	; 11
     600:	08 95       	ret

00000602 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     602:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <g_MotorOn>
     606:	88 23       	and	r24, r24
     608:	49 f0       	breq	.+18     	; 0x61c <ADD_Task+0x1a>
     60a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <g_Timer>
     60e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <g_Timer+0x1>
     612:	01 96       	adiw	r24, 0x01	; 1
     614:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <g_Timer+0x1>
     618:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <g_Timer>
     61c:	08 95       	ret

0000061e <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	7c 01       	movw	r14, r24
     62a:	16 2f       	mov	r17, r22
     62c:	d4 2f       	mov	r29, r20
     62e:	c2 2f       	mov	r28, r18
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0b d6       	rcall	.+3094   	; 0x124c <malloc>
     636:	fc 01       	movw	r30, r24
     638:	f1 82       	std	Z+1, r15	; 0x01
     63a:	e0 82       	st	Z, r14
     63c:	12 83       	std	Z+2, r17	; 0x02
     63e:	d3 83       	std	Z+3, r29	; 0x03
     640:	c4 83       	std	Z+4, r28	; 0x04
     642:	16 82       	std	Z+6, r1	; 0x06
     644:	15 82       	std	Z+5, r1	; 0x05
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	08 95       	ret

00000652 <LL_ItemListInit>:
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	86 e0       	ldi	r24, 0x06	; 6
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	f7 d5       	rcall	.+3054   	; 0x124c <malloc>
     65e:	fc 01       	movw	r30, r24
     660:	d1 83       	std	Z+1, r29	; 0x01
     662:	c0 83       	st	Z, r28
     664:	15 82       	std	Z+5, r1	; 0x05
     666:	14 82       	std	Z+4, r1	; 0x04
     668:	13 82       	std	Z+3, r1	; 0x03
     66a:	12 82       	std	Z+2, r1	; 0x02
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <LL_Next>:
     672:	fc 01       	movw	r30, r24
     674:	82 81       	ldd	r24, Z+2	; 0x02
     676:	93 81       	ldd	r25, Z+3	; 0x03
     678:	08 95       	ret

0000067a <LL_AddBack>:
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
     680:	cb 01       	movw	r24, r22
     682:	01 c0       	rjmp	.+2      	; 0x686 <LL_AddBack+0xc>
     684:	e9 01       	movw	r28, r18
     686:	2a 81       	ldd	r18, Y+2	; 0x02
     688:	3b 81       	ldd	r19, Y+3	; 0x03
     68a:	21 15       	cp	r18, r1
     68c:	31 05       	cpc	r19, r1
     68e:	d1 f7       	brne	.-12     	; 0x684 <LL_AddBack+0xa>
     690:	e0 df       	rcall	.-64     	; 0x652 <LL_ItemListInit>
     692:	9b 83       	std	Y+3, r25	; 0x03
     694:	8a 83       	std	Y+2, r24	; 0x02
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <LL_Size>:
     69c:	dc 01       	movw	r26, r24
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	ed 91       	ld	r30, X+
     6a2:	fc 91       	ld	r31, X
     6a4:	13 97       	sbiw	r26, 0x03	; 3
     6a6:	30 97       	sbiw	r30, 0x00	; 0
     6a8:	41 f0       	breq	.+16     	; 0x6ba <LL_Size+0x1e>
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	02 80       	ldd	r0, Z+2	; 0x02
     6b0:	f3 81       	ldd	r31, Z+3	; 0x03
     6b2:	e0 2d       	mov	r30, r0
     6b4:	30 97       	sbiw	r30, 0x00	; 0
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <LL_Size+0x10>
     6b8:	08 95       	ret
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	08 95       	ret

000006be <LL_GetClass>:
     6be:	dc 01       	movw	r26, r24
     6c0:	ed 91       	ld	r30, X+
     6c2:	fc 91       	ld	r31, X
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	08 95       	ret

000006c8 <LL_GetRefl>:
     6c8:	dc 01       	movw	r26, r24
     6ca:	ed 91       	ld	r30, X+
     6cc:	fc 91       	ld	r31, X
     6ce:	80 81       	ld	r24, Z
     6d0:	91 81       	ldd	r25, Z+1	; 0x01
     6d2:	08 95       	ret

000006d4 <LL_GetMag>:
     6d4:	dc 01       	movw	r26, r24
     6d6:	ed 91       	ld	r30, X+
     6d8:	fc 91       	ld	r31, X
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	08 95       	ret

000006de <LL_UpdateRefl>:
     6de:	dc 01       	movw	r26, r24
     6e0:	ed 91       	ld	r30, X+
     6e2:	fc 91       	ld	r31, X
     6e4:	71 83       	std	Z+1, r23	; 0x01
     6e6:	60 83       	st	Z, r22
     6e8:	08 95       	ret

000006ea <LL_UpdateMag>:
     6ea:	dc 01       	movw	r26, r24
     6ec:	ed 91       	ld	r30, X+
     6ee:	fc 91       	ld	r31, X
     6f0:	62 83       	std	Z+2, r22	; 0x02
     6f2:	08 95       	ret

000006f4 <LL_UpdateClass>:
     6f4:	dc 01       	movw	r26, r24
     6f6:	ed 91       	ld	r30, X+
     6f8:	fc 91       	ld	r31, X
     6fa:	63 83       	std	Z+3, r22	; 0x03
     6fc:	08 95       	ret

000006fe <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     6fe:	dc 01       	movw	r26, r24
     700:	ed 91       	ld	r30, X+
     702:	fc 91       	ld	r31, X
     704:	64 83       	std	Z+4, r22	; 0x04
     706:	08 95       	ret

00000708 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     708:	dc 01       	movw	r26, r24
     70a:	ed 91       	ld	r30, X+
     70c:	fc 91       	ld	r31, X
}
     70e:	84 81       	ldd	r24, Z+4	; 0x04
     710:	08 95       	ret

00000712 <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     712:	dc 01       	movw	r26, r24
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	76 83       	std	Z+6, r23	; 0x06
     71a:	65 83       	std	Z+5, r22	; 0x05
     71c:	08 95       	ret

0000071e <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     71e:	dc 01       	movw	r26, r24
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	85 81       	ldd	r24, Z+5	; 0x05
     726:	96 81       	ldd	r25, Z+6	; 0x06
     728:	08 95       	ret

0000072a <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     72e:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     730:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     732:	80 ef       	ldi	r24, 0xF0	; 240
     734:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     736:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     738:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	08 95       	ret

00000740 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     740:	6d d2       	rcall	.+1242   	; 0xc1c <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     742:	89 b1       	in	r24, 0x09	; 9
     744:	83 70       	andi	r24, 0x03	; 3
     746:	e9 f7       	brne	.-6      	; 0x742 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     748:	84 e2       	ldi	r24, 0x24	; 36
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	71 d5       	rcall	.+2786   	; 0x1230 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     74e:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	45 ec       	ldi	r20, 0xC5	; 197
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	ee d4       	rcall	.+2524   	; 0x113e <TIMER_Create>
		_timer[0].state = READY;
     762:	ce e2       	ldi	r28, 0x2E	; 46
     764:	d3 e0       	ldi	r29, 0x03	; 3
     766:	12 e0       	ldi	r17, 0x02	; 2
     768:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	47 e8       	ldi	r20, 0x87	; 135
     770:	51 e0       	ldi	r21, 0x01	; 1
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	e1 d4       	rcall	.+2498   	; 0x113e <TIMER_Create>
		_timer[1].state = BLOCKED;
     77c:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	4a e1       	ldi	r20, 0x1A	; 26
     784:	52 e0       	ldi	r21, 0x02	; 2
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	d7 d4       	rcall	.+2478   	; 0x113e <TIMER_Create>
		_timer[2].state = BLOCKED;
     790:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4d e5       	ldi	r20, 0x5D	; 93
     798:	52 e0       	ldi	r21, 0x02	; 2
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	cd d4       	rcall	.+2458   	; 0x113e <TIMER_Create>
		_timer[3].state = BLOCKED;
     7a4:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	41 e0       	ldi	r20, 0x01	; 1
     7ac:	53 e0       	ldi	r21, 0x03	; 3
     7ae:	61 e0       	ldi	r22, 0x01	; 1
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	c3 d4       	rcall	.+2438   	; 0x113e <TIMER_Create>
		_timer[4].state = BLOCKED;
     7b8:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	4a ec       	ldi	r20, 0xCA	; 202
     7c0:	52 e0       	ldi	r21, 0x02	; 2
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	84 e6       	ldi	r24, 0x64	; 100
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	b9 d4       	rcall	.+2418   	; 0x113e <TIMER_Create>
		_timer[5].state = READY;
     7cc:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	4c ef       	ldi	r20, 0xFC	; 252
     7d4:	52 e0       	ldi	r21, 0x02	; 2
     7d6:	61 e0       	ldi	r22, 0x01	; 1
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 ed       	ldi	r24, 0xD0	; 208
     7dc:	97 e0       	ldi	r25, 0x07	; 7
     7de:	af d4       	rcall	.+2398   	; 0x113e <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     7e0:	1e af       	std	Y+62, r17	; 0x3e
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	4f ee       	ldi	r20, 0xEF	; 239
     7e8:	52 e0       	ldi	r21, 0x02	; 2
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     7f0:	93 e1       	ldi	r25, 0x13	; 19
     7f2:	a5 d4       	rcall	.+2378   	; 0x113e <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     7f4:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <_timer+0x47>
     7f8:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	19 d5       	rcall	.+2610   	; 0x1230 <UART_SendString>
     7fe:	80 e8       	ldi	r24, 0x80	; 128
     800:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     802:	5b d0       	rcall	.+182    	; 0x8ba <PWM>
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     804:	78 94       	sei
     806:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <g_PauseRequest>
     80a:	88 23       	and	r24, r24
     80c:	19 f0       	breq	.+6      	; 0x814 <main+0xd4>
     80e:	89 e4       	ldi	r24, 0x49	; 73
     810:	91 e0       	ldi	r25, 0x01	; 1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     812:	84 d2       	rcall	.+1288   	; 0xd1c <SYS_Pause>
     814:	c0 91 08 03 	lds	r28, 0x0308	; 0x800308 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     818:	d0 91 09 03 	lds	r29, 0x0309	; 0x800309 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     81c:	20 97       	sbiw	r28, 0x00	; 0
     81e:	99 f3       	breq	.-26     	; 0x806 <main+0xc6>
     820:	20 97       	sbiw	r28, 0x00	; 0
     822:	91 f1       	breq	.+100    	; 0x888 <main+0x148>
     824:	ce 01       	movw	r24, r28
     826:	4b df       	rcall	.-362    	; 0x6be <LL_GetClass>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	71 f5       	brne	.+92     	; 0x888 <main+0x148>
     82c:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     82e:	6c df       	rcall	.-296    	; 0x708 <LL_GetStatus>
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	51 f5       	brne	.+84     	; 0x888 <main+0x148>
     834:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     836:	48 df       	rcall	.-368    	; 0x6c8 <LL_GetRefl>
     838:	8c 01       	movw	r16, r24
     83a:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     83c:	4b df       	rcall	.-362    	; 0x6d4 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     83e:	88 23       	and	r24, r24
     840:	91 f0       	breq	.+36     	; 0x866 <main+0x126>
     842:	c8 01       	movw	r24, r16
     844:	0a 97       	sbiw	r24, 0x0a	; 10
     846:	83 32       	cpi	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     848:	91 40       	sbci	r25, 0x01	; 1
     84a:	20 f4       	brcc	.+8      	; 0x854 <main+0x114>
     84c:	62 e0       	ldi	r22, 0x02	; 2
     84e:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     850:	51 df       	rcall	.-350    	; 0x6f4 <LL_UpdateClass>
     852:	1a c0       	rjmp	.+52     	; 0x888 <main+0x148>
     854:	0c 52       	subi	r16, 0x2C	; 44
     856:	11 40       	sbci	r17, 0x01	; 1
     858:	05 3f       	cpi	r16, 0xF5	; 245
					{
						LL_UpdateClass(temp, STEEL);
     85a:	11 40       	sbci	r17, 0x01	; 1
     85c:	a8 f4       	brcc	.+42     	; 0x888 <main+0x148>
     85e:	63 e0       	ldi	r22, 0x03	; 3
     860:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     862:	48 df       	rcall	.-368    	; 0x6f4 <LL_UpdateClass>
     864:	11 c0       	rjmp	.+34     	; 0x888 <main+0x148>
     866:	c8 01       	movw	r24, r16
     868:	89 58       	subi	r24, 0x89	; 137
     86a:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     86c:	0b 97       	sbiw	r24, 0x0b	; 11
     86e:	20 f4       	brcc	.+8      	; 0x878 <main+0x138>
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	ce 01       	movw	r24, r28
     874:	3f df       	rcall	.-386    	; 0x6f4 <LL_UpdateClass>
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     876:	08 c0       	rjmp	.+16     	; 0x888 <main+0x148>
     878:	00 52       	subi	r16, 0x20	; 32
     87a:	13 40       	sbci	r17, 0x03	; 3
     87c:	07 39       	cpi	r16, 0x97	; 151
     87e:	11 05       	cpc	r17, r1
				{
					LL_UpdateClass(temp, BLACK);
     880:	18 f4       	brcc	.+6      	; 0x888 <main+0x148>
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	ce 01       	movw	r24, r28
     886:	36 df       	rcall	.-404    	; 0x6f4 <LL_UpdateClass>
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     888:	ce 01       	movw	r24, r28
     88a:	f3 de       	rcall	.-538    	; 0x672 <LL_Next>
     88c:	ec 01       	movw	r28, r24
     88e:	89 2b       	or	r24, r25
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     890:	09 f0       	breq	.+2      	; 0x894 <main+0x154>
     892:	c6 cf       	rjmp	.-116    	; 0x820 <main+0xe0>
     894:	b8 cf       	rjmp	.-144    	; 0x806 <main+0xc6>

00000896 <__vector_default>:
     896:	1f 92       	push	r1
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     8a0:	8a ea       	ldi	r24, 0xAA	; 170
     8a2:	88 b9       	out	0x08, r24	; 8
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <__vector_default+0xc>

000008a6 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     8a6:	84 b5       	in	r24, 0x24	; 36
     8a8:	83 68       	ori	r24, 0x83	; 131
     8aa:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     8ac:	85 b5       	in	r24, 0x25	; 37
     8ae:	83 60       	ori	r24, 0x03	; 3
     8b0:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     8b2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     8b6:	87 bd       	out	0x27, r24	; 39
     8b8:	08 95       	ret

000008ba <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     8ba:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     8bc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8be:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     8c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     8c4:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     8c6:	23 2b       	or	r18, r19
     8c8:	31 f0       	breq	.+12     	; 0x8d6 <PWM+0x1c>
		{
			g_MotorOn = 1;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <g_MotorOn>
			PORTB = ~0x0E;
     8d0:	81 ef       	ldi	r24, 0xF1	; 241
     8d2:	85 b9       	out	0x05, r24	; 5
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     8d6:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_MotorOn>
			PORTB = ~0x0F;
     8da:	80 ef       	ldi	r24, 0xF0	; 240
     8dc:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8de:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8e0:	08 95       	ret

000008e2 <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     8e2:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     8e4:	ea e7       	ldi	r30, 0x7A	; 122
     8e6:	f3 e0       	ldi	r31, 0x03	; 3
     8e8:	10 82       	st	Z, r1
	stepper.direction = 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     8ee:	13 82       	std	Z+3, r1	; 0x03
     8f0:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     8f2:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     8f4:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     8f6:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     8f8:	11 86       	std	Z+9, r1	; 0x09
     8fa:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     8fc:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     8fe:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     900:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     902:	88 ec       	ldi	r24, 0xC8	; 200
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	96 83       	std	Z+6, r25	; 0x06
     908:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     90a:	80 e3       	ldi	r24, 0x30	; 48
     90c:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     90e:	84 e9       	ldi	r24, 0x94	; 148
     910:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     914:	e0 eb       	ldi	r30, 0xB0	; 176
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	82 60       	ori	r24, 0x02	; 2
     91c:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     91e:	e0 e7       	ldi	r30, 0x70	; 112
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	82 60       	ori	r24, 0x02	; 2
     926:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     928:	e1 eb       	ldi	r30, 0xB1	; 177
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	87 60       	ori	r24, 0x07	; 7
     930:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     932:	78 94       	sei
     934:	08 95       	ret

00000936 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	86 1b       	sub	r24, r22
     93a:	91 09       	sbc	r25, r1
	if (steps >= 0)
     93c:	52 f0       	brmi	.+20     	; 0x952 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     93e:	85 36       	cpi	r24, 0x65	; 101
     940:	91 05       	cpc	r25, r1
     942:	8c f0       	brlt	.+34     	; 0x966 <STEPPER_NumSteps+0x30>
     944:	24 e6       	ldi	r18, 0x64	; 100
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	a9 01       	movw	r20, r18
     94a:	48 1b       	sub	r20, r24
     94c:	59 0b       	sbc	r21, r25
     94e:	ca 01       	movw	r24, r20
     950:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     952:	8c 39       	cpi	r24, 0x9C	; 156
     954:	5f ef       	ldi	r21, 0xFF	; 255
     956:	95 07       	cpc	r25, r21
     958:	34 f4       	brge	.+12     	; 0x966 <STEPPER_NumSteps+0x30>
     95a:	2c e9       	ldi	r18, 0x9C	; 156
     95c:	3f ef       	ldi	r19, 0xFF	; 255
     95e:	a9 01       	movw	r20, r18
     960:	48 1b       	sub	r20, r24
     962:	59 0b       	sbc	r21, r25
     964:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     966:	08 95       	ret

00000968 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     96c:	ca e7       	ldi	r28, 0x7A	; 122
     96e:	d3 e0       	ldi	r29, 0x03	; 3
     970:	6c 81       	ldd	r22, Y+4	; 0x04
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	9b 81       	ldd	r25, Y+3	; 0x03
     976:	df df       	rcall	.-66     	; 0x936 <STEPPER_NumSteps>
     978:	9e 83       	std	Y+6, r25	; 0x06
     97a:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     97c:	6a 81       	ldd	r22, Y+2	; 0x02
     97e:	7b 81       	ldd	r23, Y+3	; 0x03
     980:	88 85       	ldd	r24, Y+8	; 0x08
     982:	99 85       	ldd	r25, Y+9	; 0x09
     984:	d8 df       	rcall	.-80     	; 0x936 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     986:	2d 81       	ldd	r18, Y+5	; 0x05
     988:	3e 81       	ldd	r19, Y+6	; 0x06
     98a:	33 23       	and	r19, r19
     98c:	14 f4       	brge	.+4      	; 0x992 <STEPPER_Rotate+0x2a>
     98e:	28 e0       	ldi	r18, 0x08	; 8
     990:	01 c0       	rjmp	.+2      	; 0x994 <STEPPER_Rotate+0x2c>
     992:	24 e0       	ldi	r18, 0x04	; 4
     994:	ea e7       	ldi	r30, 0x7A	; 122
     996:	f3 e0       	ldi	r31, 0x03	; 3
     998:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     99a:	45 81       	ldd	r20, Z+5	; 0x05
     99c:	56 81       	ldd	r21, Z+6	; 0x06
     99e:	84 9f       	mul	r24, r20
     9a0:	90 01       	movw	r18, r0
     9a2:	85 9f       	mul	r24, r21
     9a4:	30 0d       	add	r19, r0
     9a6:	94 9f       	mul	r25, r20
     9a8:	30 0d       	add	r19, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	12 16       	cp	r1, r18
     9b0:	13 06       	cpc	r1, r19
     9b2:	0c f0       	brlt	.+2      	; 0x9b6 <STEPPER_Rotate+0x4e>
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	ea e7       	ldi	r30, 0x7A	; 122
     9b8:	f3 e0       	ldi	r31, 0x03	; 3
     9ba:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     9bc:	85 81       	ldd	r24, Z+5	; 0x05
     9be:	96 81       	ldd	r25, Z+6	; 0x06
     9c0:	99 23       	and	r25, r25
     9c2:	1c f4       	brge	.+6      	; 0x9ca <STEPPER_Rotate+0x62>
     9c4:	91 95       	neg	r25
     9c6:	81 95       	neg	r24
     9c8:	91 09       	sbc	r25, r1
     9ca:	ea e7       	ldi	r30, 0x7A	; 122
     9cc:	f3 e0       	ldi	r31, 0x03	; 3
     9ce:	96 83       	std	Z+6, r25	; 0x06
     9d0:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     9d2:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     9da:	ea e7       	ldi	r30, 0x7A	; 122
     9dc:	f3 e0       	ldi	r31, 0x03	; 3
     9de:	24 81       	ldd	r18, Z+4	; 0x04
     9e0:	42 81       	ldd	r20, Z+2	; 0x02
     9e2:	53 81       	ldd	r21, Z+3	; 0x03
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	24 17       	cp	r18, r20
     9e8:	35 07       	cpc	r19, r21
     9ea:	29 f0       	breq	.+10     	; 0x9f6 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     9f0:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     9f2:	60 8b       	std	Z+16, r22	; 0x10
     9f4:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	ea e7       	ldi	r30, 0x7A	; 122
     9fc:	f3 e0       	ldi	r31, 0x03	; 3
     9fe:	33 83       	std	Z+3, r19	; 0x03
     a00:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	71 87       	std	Z+9, r23	; 0x09
     a06:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     a08:	94 81       	ldd	r25, Z+4	; 0x04
     a0a:	89 13       	cpse	r24, r25
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <STEPPER_SetRotation+0x3c>
     a0e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <STEPPER_SAME>
     a12:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <stepper+0xa>
		STEPPER_Rotate();
     a16:	a8 cf       	rjmp	.-176    	; 0x968 <STEPPER_Rotate>
     a18:	08 95       	ret

00000a1a <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	0b b6       	in	r0, 0x3b	; 59
     a26:	0f 92       	push	r0
     a28:	2f 93       	push	r18
     a2a:	3f 93       	push	r19
     a2c:	4f 93       	push	r20
     a2e:	5f 93       	push	r21
     a30:	6f 93       	push	r22
     a32:	7f 93       	push	r23
     a34:	8f 93       	push	r24
     a36:	9f 93       	push	r25
     a38:	af 93       	push	r26
     a3a:	bf 93       	push	r27
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	00 d0       	rcall	.+0      	; 0xa46 <__vector_13+0x2c>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <__vector_13+0x2e>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     a4c:	86 e3       	ldi	r24, 0x36	; 54
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	9e e2       	ldi	r25, 0x2E	; 46
     a56:	ad e2       	ldi	r26, 0x2D	; 45
     a58:	b5 e3       	ldi	r27, 0x35	; 53
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	ab 83       	std	Y+3, r26	; 0x03
     a60:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     a62:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xa>
     a66:	88 23       	and	r24, r24
     a68:	29 f0       	breq	.+10     	; 0xa74 <__vector_13+0x5a>
     a6a:	ea e7       	ldi	r30, 0x7A	; 122
     a6c:	f3 e0       	ldi	r31, 0x03	; 3
     a6e:	82 85       	ldd	r24, Z+10	; 0x0a
     a70:	81 50       	subi	r24, 0x01	; 1
     a72:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     a74:	ea e7       	ldi	r30, 0x7A	; 122
     a76:	f3 e0       	ldi	r31, 0x03	; 3
     a78:	87 81       	ldd	r24, Z+7	; 0x07
     a7a:	25 81       	ldd	r18, Z+5	; 0x05
     a7c:	36 81       	ldd	r19, Z+6	; 0x06
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	82 17       	cp	r24, r18
     a82:	93 07       	cpc	r25, r19
     a84:	f9 f4       	brne	.+62     	; 0xac4 <__vector_13+0xaa>
	{

		g_ItemInRange = 0;
     a86:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <g_ItemInRange>
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     a90:	86 85       	ldd	r24, Z+14	; 0x0e
     a92:	88 23       	and	r24, r24
     a94:	21 f0       	breq	.+8      	; 0xa9e <__vector_13+0x84>
		{
			stepper.early = 0;
     a96:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     a98:	60 89       	ldd	r22, Z+16	; 0x10
     a9a:	87 85       	ldd	r24, Z+15	; 0x0f
     a9c:	9e df       	rcall	.-196    	; 0x9da <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a9e:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <stepper+0xb>
     aa2:	88 23       	and	r24, r24
     aa4:	19 f0       	breq	.+6      	; 0xaac <__vector_13+0x92>
     aa6:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <stepper+0xd>
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <__vector_13+0x94>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	ea e7       	ldi	r30, 0x7A	; 122
     ab0:	f3 e0       	ldi	r31, 0x03	; 3
     ab2:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     ab4:	e5 85       	ldd	r30, Z+13	; 0x0d
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	e0 5f       	subi	r30, 0xF0	; 240
     aba:	fe 4f       	sbci	r31, 0xFE	; 254
     abc:	80 81       	ld	r24, Z
     abe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ac2:	6a c0       	rjmp	.+212    	; 0xb98 <__vector_13+0x17e>
	}
	else if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     ac4:	ea e7       	ldi	r30, 0x7A	; 122
     ac6:	f3 e0       	ldi	r31, 0x03	; 3
     ac8:	87 81       	ldd	r24, Z+7	; 0x07
     aca:	25 81       	ldd	r18, Z+5	; 0x05
     acc:	36 81       	ldd	r19, Z+6	; 0x06
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	82 17       	cp	r24, r18
     ad2:	93 07       	cpc	r25, r19
     ad4:	0c f0       	brlt	.+2      	; 0xad8 <__vector_13+0xbe>
     ad6:	60 c0       	rjmp	.+192    	; 0xb98 <__vector_13+0x17e>
     ad8:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xa>
     adc:	81 11       	cpse	r24, r1
     ade:	5c c0       	rjmp	.+184    	; 0xb98 <__vector_13+0x17e>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     ae0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <stepper+0x1>
     ae4:	84 30       	cpi	r24, 0x04	; 4
     ae6:	51 f4       	brne	.+20     	; 0xafc <__vector_13+0xe2>
     ae8:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <stepper>
     aec:	e1 e0       	ldi	r30, 0x01	; 1
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	ec 0f       	add	r30, r28
     af2:	fd 1f       	adc	r31, r29
     af4:	e8 0f       	add	r30, r24
     af6:	f1 1d       	adc	r31, r1
     af8:	80 81       	ld	r24, Z
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <__vector_13+0xfc>
     afc:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <stepper>
     b00:	e3 e0       	ldi	r30, 0x03	; 3
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e8 1b       	sub	r30, r24
     b06:	f1 09       	sbc	r31, r1
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	8c 0f       	add	r24, r28
     b0e:	9d 1f       	adc	r25, r29
     b10:	e8 0f       	add	r30, r24
     b12:	f9 1f       	adc	r31, r25
     b14:	80 81       	ld	r24, Z
     b16:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     b18:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <stepper>
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	21 f0       	breq	.+8      	; 0xb28 <__vector_13+0x10e>
     b20:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <stepper>
     b24:	8f 5f       	subi	r24, 0xFF	; 255
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <__vector_13+0x110>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	ea e7       	ldi	r30, 0x7A	; 122
     b2c:	f3 e0       	ldi	r31, 0x03	; 3
     b2e:	80 83       	st	Z, r24

		stepper._currentStep++;
     b30:	87 81       	ldd	r24, Z+7	; 0x07
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     b36:	83 85       	ldd	r24, Z+11	; 0x0b
     b38:	81 11       	cpse	r24, r1
     b3a:	15 c0       	rjmp	.+42     	; 0xb66 <__vector_13+0x14c>
     b3c:	85 81       	ldd	r24, Z+5	; 0x05
     b3e:	96 81       	ldd	r25, Z+6	; 0x06
     b40:	27 81       	ldd	r18, Z+7	; 0x07
     b42:	82 1b       	sub	r24, r18
     b44:	91 09       	sbc	r25, r1
     b46:	06 97       	sbiw	r24, 0x06	; 6
     b48:	74 f4       	brge	.+28     	; 0xb66 <__vector_13+0x14c>
     b4a:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <stepper+0xd>
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	e0 5f       	subi	r30, 0xF0	; 240
     b52:	fe 4f       	sbci	r31, 0xFE	; 254
     b54:	80 81       	ld	r24, Z
     b56:	84 39       	cpi	r24, 0x94	; 148
     b58:	30 f4       	brcc	.+12     	; 0xb66 <__vector_13+0x14c>
		{
			stepper._accellStep--;
     b5a:	ea e7       	ldi	r30, 0x7A	; 122
     b5c:	f3 e0       	ldi	r31, 0x03	; 3
     b5e:	85 85       	ldd	r24, Z+13	; 0x0d
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	85 87       	std	Z+13, r24	; 0x0d
     b64:	11 c0       	rjmp	.+34     	; 0xb88 <__vector_13+0x16e>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     b66:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <stepper+0x7>
     b6a:	86 30       	cpi	r24, 0x06	; 6
     b6c:	68 f0       	brcs	.+26     	; 0xb88 <__vector_13+0x16e>
     b6e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <stepper+0xd>
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	e0 5f       	subi	r30, 0xF0	; 240
     b76:	fe 4f       	sbci	r31, 0xFE	; 254
     b78:	80 81       	ld	r24, Z
     b7a:	81 34       	cpi	r24, 0x41	; 65
     b7c:	28 f0       	brcs	.+10     	; 0xb88 <__vector_13+0x16e>
		{
			stepper._accellStep++;
     b7e:	ea e7       	ldi	r30, 0x7A	; 122
     b80:	f3 e0       	ldi	r31, 0x03	; 3
     b82:	85 85       	ldd	r24, Z+13	; 0x0d
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     b88:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <stepper+0xd>
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	e0 5f       	subi	r30, 0xF0	; 240
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     b98:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <stepper+0xc>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	29 f1       	breq	.+74     	; 0xbea <__vector_13+0x1d0>
	{
		if ((PINE & 0x08) == 0)
     ba0:	63 99       	sbic	0x0c, 3	; 12
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__vector_13+0x192>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     ba4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <STEPPER_OFFSET>
     ba8:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     bac:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <stepper+0xc>
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	28 f0       	brcs	.+10     	; 0xbbe <__vector_13+0x1a4>
     bb4:	ea e7       	ldi	r30, 0x7A	; 122
     bb6:	f3 e0       	ldi	r31, 0x03	; 3
     bb8:	84 85       	ldd	r24, Z+12	; 0x0c
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     bbe:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <stepper+0xc>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	91 f4       	brne	.+36     	; 0xbea <__vector_13+0x1d0>
		{
			stepper._isInitiated = 1;
     bc6:	ea e7       	ldi	r30, 0x7A	; 122
     bc8:	f3 e0       	ldi	r31, 0x03	; 3
     bca:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     bcc:	10 82       	st	Z, r1
			stepper.direction = 1;
     bce:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     bd0:	13 82       	std	Z+3, r1	; 0x03
     bd2:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     bd4:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     bd6:	16 82       	std	Z+6, r1	; 0x06
     bd8:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     bda:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     bdc:	11 86       	std	Z+9, r1	; 0x09
     bde:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     be0:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     be2:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     be4:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     be6:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     be8:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	ff 91       	pop	r31
     bf8:	ef 91       	pop	r30
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	7f 91       	pop	r23
     c04:	6f 91       	pop	r22
     c06:	5f 91       	pop	r21
     c08:	4f 91       	pop	r20
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0b be       	out	0x3b, r0	; 59
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	f8 94       	cli
     c24:	e1 e6       	ldi	r30, 0x61	; 97
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 e8       	ldi	r24, 0x80	; 128
     c2a:	80 83       	st	Z, r24
     c2c:	10 82       	st	Z, r1
     c2e:	e8 d2       	rcall	.+1488   	; 0x1200 <UART_Init>
     c30:	7c dd       	rcall	.-1288   	; 0x72a <GPIO_Init>
     c32:	6b d2       	rcall	.+1238   	; 0x110a <TIMER_Init>
     c34:	38 de       	rcall	.-912    	; 0x8a6 <PWM_Init>
     c36:	4f da       	rcall	.-2914   	; 0xd6 <ADC_Init>
     c38:	54 de       	rcall	.-856    	; 0x8e2 <STEPPER_Init>
     c3a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_ADCCount+0x1>
     c3e:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <g_ADCCount>
     c42:	84 e1       	ldi	r24, 0x14	; 20
     c44:	ee e0       	ldi	r30, 0x0E	; 14
     c46:	f3 e0       	ldi	r31, 0x03	; 3
     c48:	df 01       	movw	r26, r30
     c4a:	1d 92       	st	X+, r1
     c4c:	8a 95       	dec	r24
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <SYS_Init+0x2e>
     c50:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <g_PauseRequest>
     c54:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_WDTimeout>
     c58:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <g_Timer+0x1>
     c5c:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <g_Timer>
     c60:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <g_Lock>
     c64:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <g_ItemInRange>
     c68:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <HEAD+0x1>
     c6c:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <HEAD>
     c70:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <TAIL+0x1>
     c74:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <TAIL>
     c78:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <STAGE1+0x1>
     c7c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <STAGE1>
     c80:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <STAGE2+0x1>
     c84:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <STAGE2>
     c88:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <FRONT+0x1>
     c8c:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <FRONT>
     c90:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <BUFFER+0x1>
     c94:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <BUFFER>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	44 e0       	ldi	r20, 0x04	; 4
     c9c:	6f ef       	ldi	r22, 0xFF	; 255
     c9e:	89 ee       	ldi	r24, 0xE9	; 233
     ca0:	9d ef       	ldi	r25, 0xFD	; 253
     ca2:	bd dc       	rcall	.-1670   	; 0x61e <LL_ItemInit>
     ca4:	d6 dc       	rcall	.-1620   	; 0x652 <LL_ItemListInit>
     ca6:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <HEAD+0x1>
     caa:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <HEAD>
     cae:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <FRONT+0x1>
     cb2:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <FRONT>
     cb6:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <BUFFER+0x1>
     cba:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <BUFFER>
     cbe:	ca ef       	ldi	r28, 0xFA	; 250
     cc0:	08 ee       	ldi	r16, 0xE8	; 232
     cc2:	1d ef       	ldi	r17, 0xFD	; 253
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	44 e0       	ldi	r20, 0x04	; 4
     cc8:	6c 2f       	mov	r22, r28
     cca:	c8 01       	movw	r24, r16
     ccc:	a8 dc       	rcall	.-1712   	; 0x61e <LL_ItemInit>
     cce:	bc 01       	movw	r22, r24
     cd0:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     cd4:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     cd8:	d0 dc       	rcall	.-1632   	; 0x67a <LL_AddBack>
     cda:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <TAIL+0x1>
     cde:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <TAIL>
     ce2:	01 50       	subi	r16, 0x01	; 1
     ce4:	11 09       	sbc	r17, r1
     ce6:	c1 50       	subi	r28, 0x01	; 1
     ce8:	cb 3c       	cpi	r28, 0xCB	; 203
     cea:	61 f7       	brne	.-40     	; 0xcc4 <SYS_Init+0xa8>
     cec:	05 e0       	ldi	r16, 0x05	; 5
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	45 e0       	ldi	r20, 0x05	; 5
     cf4:	6a ef       	ldi	r22, 0xFA	; 250
     cf6:	88 ee       	ldi	r24, 0xE8	; 232
     cf8:	9d ef       	ldi	r25, 0xFD	; 253
     cfa:	91 dc       	rcall	.-1758   	; 0x61e <LL_ItemInit>
     cfc:	bc 01       	movw	r22, r24
     cfe:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     d02:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     d06:	b9 dc       	rcall	.-1678   	; 0x67a <LL_AddBack>
     d08:	01 50       	subi	r16, 0x01	; 1
     d0a:	11 09       	sbc	r17, r1
     d0c:	89 f7       	brne	.-30     	; 0xcf0 <SYS_Init+0xd4>
     d0e:	82 e5       	ldi	r24, 0x52	; 82
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	8e d2       	rcall	.+1308   	; 0x1230 <UART_SendString>
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	08 95       	ret

00000d1c <SYS_Pause>:
     d1c:	3f 92       	push	r3
     d1e:	4f 92       	push	r4
     d20:	5f 92       	push	r5
     d22:	6f 92       	push	r6
     d24:	7f 92       	push	r7
     d26:	8f 92       	push	r8
     d28:	9f 92       	push	r9
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	ca 5f       	subi	r28, 0xFA	; 250
     d44:	d1 09       	sbc	r29, r1
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	f8 2e       	mov	r15, r24
     d52:	e9 2e       	mov	r14, r25
     d54:	f8 94       	cli
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	af dd       	rcall	.-1186   	; 0x8ba <PWM>
     d5c:	00 91 0a 03 	lds	r16, 0x030A	; 0x80030a <FRONT>
     d60:	10 91 0b 03 	lds	r17, 0x030B	; 0x80030b <FRONT+0x1>
     d64:	ef 92       	push	r14
     d66:	ff 92       	push	r15
     d68:	88 e6       	ldi	r24, 0x68	; 104
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	7c 01       	movw	r14, r24
     d76:	9f 93       	push	r25
     d78:	8f 93       	push	r24
     d7a:	89 d3       	rcall	.+1810   	; 0x148e <sprintf>
     d7c:	c7 01       	movw	r24, r14
     d7e:	58 d2       	rcall	.+1200   	; 0x1230 <UART_SendString>
     d80:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <HEAD>
     d84:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <HEAD+0x1>
     d88:	ca dc       	rcall	.-1644   	; 0x71e <LL_GetTick>
     d8a:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <g_Timer>
     d8e:	30 91 26 03 	lds	r19, 0x0326	; 0x800326 <g_Timer+0x1>
     d92:	9f 93       	push	r25
     d94:	8f 93       	push	r24
     d96:	3f 93       	push	r19
     d98:	2f 93       	push	r18
     d9a:	83 e8       	ldi	r24, 0x83	; 131
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	9f 93       	push	r25
     da0:	8f 93       	push	r24
     da2:	ff 92       	push	r15
     da4:	ef 92       	push	r14
     da6:	73 d3       	rcall	.+1766   	; 0x148e <sprintf>
     da8:	c7 01       	movw	r24, r14
     daa:	42 d2       	rcall	.+1156   	; 0x1230 <UART_SendString>
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	e1 2c       	mov	r14, r1
     db8:	f1 2c       	mov	r15, r1
     dba:	0f 2e       	mov	r0, r31
     dbc:	f2 ea       	ldi	r31, 0xA2	; 162
     dbe:	af 2e       	mov	r10, r31
     dc0:	f1 e0       	ldi	r31, 0x01	; 1
     dc2:	bf 2e       	mov	r11, r31
     dc4:	f0 2d       	mov	r31, r0
     dc6:	6e 01       	movw	r12, r28
     dc8:	f7 e9       	ldi	r31, 0x97	; 151
     dca:	cf 0e       	add	r12, r31
     dcc:	d1 1c       	adc	r13, r1
     dce:	2d c0       	rjmp	.+90     	; 0xe2a <SYS_Pause+0x10e>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	e8 1a       	sub	r14, r24
     dd4:	f8 0a       	sbc	r15, r24
     dd6:	c8 01       	movw	r24, r16
     dd8:	a2 dc       	rcall	.-1724   	; 0x71e <LL_GetTick>
     dda:	68 2e       	mov	r6, r24
     ddc:	59 2e       	mov	r5, r25
     dde:	c8 01       	movw	r24, r16
     de0:	93 dc       	rcall	.-1754   	; 0x708 <LL_GetStatus>
     de2:	78 2e       	mov	r7, r24
     de4:	c8 01       	movw	r24, r16
     de6:	6b dc       	rcall	.-1834   	; 0x6be <LL_GetClass>
     de8:	88 2e       	mov	r8, r24
     dea:	c8 01       	movw	r24, r16
     dec:	73 dc       	rcall	.-1818   	; 0x6d4 <LL_GetMag>
     dee:	98 2e       	mov	r9, r24
     df0:	c8 01       	movw	r24, r16
     df2:	6a dc       	rcall	.-1836   	; 0x6c8 <LL_GetRefl>
     df4:	5f 92       	push	r5
     df6:	6f 92       	push	r6
     df8:	1f 92       	push	r1
     dfa:	7f 92       	push	r7
     dfc:	1f 92       	push	r1
     dfe:	8f 92       	push	r8
     e00:	1f 92       	push	r1
     e02:	9f 92       	push	r9
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	ff 92       	push	r15
     e0a:	ef 92       	push	r14
     e0c:	bf 92       	push	r11
     e0e:	af 92       	push	r10
     e10:	df 92       	push	r13
     e12:	cf 92       	push	r12
     e14:	3c d3       	rcall	.+1656   	; 0x148e <sprintf>
     e16:	c6 01       	movw	r24, r12
     e18:	0b d2       	rcall	.+1046   	; 0x1230 <UART_SendString>
     e1a:	c8 01       	movw	r24, r16
     e1c:	2a dc       	rcall	.-1964   	; 0x672 <LL_Next>
     e1e:	8c 01       	movw	r16, r24
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	c8 01       	movw	r24, r16
     e2c:	48 dc       	rcall	.-1904   	; 0x6be <LL_GetClass>
     e2e:	85 30       	cpi	r24, 0x05	; 5
     e30:	79 f6       	brne	.-98     	; 0xdd0 <SYS_Pause+0xb4>
     e32:	0f 2e       	mov	r0, r31
     e34:	fe e2       	ldi	r31, 0x2E	; 46
     e36:	cf 2e       	mov	r12, r31
     e38:	f3 e0       	ldi	r31, 0x03	; 3
     e3a:	df 2e       	mov	r13, r31
     e3c:	f0 2d       	mov	r31, r0
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	0f 2e       	mov	r0, r31
     e44:	f0 ee       	ldi	r31, 0xE0	; 224
     e46:	af 2e       	mov	r10, r31
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	bf 2e       	mov	r11, r31
     e4c:	f0 2d       	mov	r31, r0
     e4e:	7e 01       	movw	r14, r28
     e50:	f7 e9       	ldi	r31, 0x97	; 151
     e52:	ef 0e       	add	r14, r31
     e54:	f1 1c       	adc	r15, r1
     e56:	f6 01       	movw	r30, r12
     e58:	80 85       	ldd	r24, Z+8	; 0x08
     e5a:	1f 92       	push	r1
     e5c:	8f 93       	push	r24
     e5e:	1f 93       	push	r17
     e60:	0f 93       	push	r16
     e62:	bf 92       	push	r11
     e64:	af 92       	push	r10
     e66:	ff 92       	push	r15
     e68:	ef 92       	push	r14
     e6a:	11 d3       	rcall	.+1570   	; 0x148e <sprintf>
     e6c:	c7 01       	movw	r24, r14
     e6e:	e0 d1       	rcall	.+960    	; 0x1230 <UART_SendString>
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	f9 e0       	ldi	r31, 0x09	; 9
     e76:	cf 0e       	add	r12, r31
     e78:	d1 1c       	adc	r13, r1
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	07 30       	cpi	r16, 0x07	; 7
     e86:	11 05       	cpc	r17, r1
     e88:	31 f7       	brne	.-52     	; 0xe56 <SYS_Pause+0x13a>
     e8a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <STAGE2>
     e8e:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <STAGE2+0x1>
     e92:	1a dc       	rcall	.-1996   	; 0x6c8 <LL_GetRefl>
     e94:	48 2e       	mov	r4, r24
     e96:	39 2e       	mov	r3, r25
     e98:	60 90 76 03 	lds	r6, 0x0376	; 0x800376 <STAGE2>
     e9c:	50 90 77 03 	lds	r5, 0x0377	; 0x800377 <STAGE2+0x1>
     ea0:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <STAGE1>
     ea4:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <STAGE1+0x1>
     ea8:	15 dc       	rcall	.-2006   	; 0x6d4 <LL_GetMag>
     eaa:	78 2e       	mov	r7, r24
     eac:	90 90 2c 03 	lds	r9, 0x032C	; 0x80032c <STAGE1>
     eb0:	80 90 2d 03 	lds	r8, 0x032D	; 0x80032d <STAGE1+0x1>
     eb4:	00 91 0c 03 	lds	r16, 0x030C	; 0x80030c <TAIL>
     eb8:	10 91 0d 03 	lds	r17, 0x030D	; 0x80030d <TAIL+0x1>
     ebc:	f8 01       	movw	r30, r16
     ebe:	b2 80       	ldd	r11, Z+2	; 0x02
     ec0:	a3 80       	ldd	r10, Z+3	; 0x03
     ec2:	d0 90 0a 03 	lds	r13, 0x030A	; 0x80030a <FRONT>
     ec6:	c0 90 0b 03 	lds	r12, 0x030B	; 0x80030b <FRONT+0x1>
     eca:	f0 90 08 03 	lds	r15, 0x0308	; 0x800308 <HEAD>
     ece:	e0 90 09 03 	lds	r14, 0x0309	; 0x800309 <HEAD+0x1>
     ed2:	8f 2d       	mov	r24, r15
     ed4:	9e 2d       	mov	r25, r14
     ed6:	e2 db       	rcall	.-2108   	; 0x69c <LL_Size>
     ed8:	3f 92       	push	r3
     eda:	4f 92       	push	r4
     edc:	5f 92       	push	r5
     ede:	6f 92       	push	r6
     ee0:	1f 92       	push	r1
     ee2:	7f 92       	push	r7
     ee4:	8f 92       	push	r8
     ee6:	9f 92       	push	r9
     ee8:	af 92       	push	r10
     eea:	bf 92       	push	r11
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	1f 93       	push	r17
     ef2:	0f 93       	push	r16
     ef4:	ef 92       	push	r14
     ef6:	ff 92       	push	r15
     ef8:	1f 92       	push	r1
     efa:	8f 93       	push	r24
     efc:	87 ef       	ldi	r24, 0xF7	; 247
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	8e 01       	movw	r16, r28
     f06:	0b 59       	subi	r16, 0x9B	; 155
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	1f 93       	push	r17
     f0c:	0f 93       	push	r16
     f0e:	bf d2       	rcall	.+1406   	; 0x148e <sprintf>
     f10:	c8 01       	movw	r24, r16
     f12:	8e d1       	rcall	.+796    	; 0x1230 <UART_SendString>
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	89 b1       	in	r24, 0x09	; 9
     f20:	83 70       	andi	r24, 0x03	; 3
     f22:	e9 f7       	brne	.-6      	; 0xf1e <SYS_Pause+0x202>
     f24:	84 e2       	ldi	r24, 0x24	; 36
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	83 d1       	rcall	.+774    	; 0x1230 <UART_SendString>
     f2a:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <g_PauseRequest>
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	c3 dc       	rcall	.-1658   	; 0x8ba <PWM>
     f34:	78 94       	sei
     f36:	c6 50       	subi	r28, 0x06	; 6
     f38:	df 4f       	sbci	r29, 0xFF	; 255
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	ff 90       	pop	r15
     f4e:	ef 90       	pop	r14
     f50:	df 90       	pop	r13
     f52:	cf 90       	pop	r12
     f54:	bf 90       	pop	r11
     f56:	af 90       	pop	r10
     f58:	9f 90       	pop	r9
     f5a:	8f 90       	pop	r8
     f5c:	7f 90       	pop	r7
     f5e:	6f 90       	pop	r6
     f60:	5f 90       	pop	r5
     f62:	4f 90       	pop	r4
     f64:	3f 90       	pop	r3
     f66:	08 95       	ret

00000f68 <SYS_Rampdown>:

void SYS_Rampdown()
{
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	e8 97       	sbiw	r28, 0x38	; 56
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
     f82:	fe 01       	movw	r30, r28
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	86 e0       	ldi	r24, 0x06	; 6
     f88:	df 01       	movw	r26, r30
     f8a:	1d 92       	st	X+, r1
     f8c:	8a 95       	dec	r24
     f8e:	e9 f7       	brne	.-6      	; 0xf8a <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
     f90:	00 91 0a 03 	lds	r16, 0x030A	; 0x80030a <FRONT>
     f94:	10 91 0b 03 	lds	r17, 0x030B	; 0x80030b <FRONT+0x1>
	
	cli();
     f98:	f8 94       	cli
	PORTD = 0;
     f9a:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
     f9c:	18 b8       	out	0x08, r1	; 8
	PWM(0);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	8b dc       	rcall	.-1770   	; 0x8ba <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
     fa4:	8d e7       	ldi	r24, 0x7D	; 125
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	43 d1       	rcall	.+646    	; 0x1230 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
     faa:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     fac:	0f c0       	rjmp	.+30     	; 0xfcc <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
     fae:	f3 94       	inc	r15
     fb0:	c8 01       	movw	r24, r16
     fb2:	85 db       	rcall	.-2294   	; 0x6be <LL_GetClass>
     fb4:	e1 e0       	ldi	r30, 0x01	; 1
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	ec 0f       	add	r30, r28
     fba:	fd 1f       	adc	r31, r29
     fbc:	e8 0f       	add	r30, r24
     fbe:	f1 1d       	adc	r31, r1
     fc0:	80 81       	ld	r24, Z
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
     fc4:	80 83       	st	Z, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	54 db       	rcall	.-2392   	; 0x672 <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     fca:	8c 01       	movw	r16, r24
     fcc:	c8 01       	movw	r24, r16
     fce:	9c db       	rcall	.-2248   	; 0x708 <LL_GetStatus>
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	69 f3       	breq	.-38     	; 0xfae <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	1f 92       	push	r1
     fd8:	8f 93       	push	r24
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	1f 92       	push	r1
     fde:	8f 93       	push	r24
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	1f 92       	push	r1
     fe4:	8f 93       	push	r24
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	1f 92       	push	r1
     fea:	8f 93       	push	r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	1f 92       	push	r1
     ff0:	8f 93       	push	r24
     ff2:	1f 92       	push	r1
     ff4:	ff 92       	push	r15
     ff6:	82 ea       	ldi	r24, 0xA2	; 162
     ff8:	92 e0       	ldi	r25, 0x02	; 2
     ffa:	9f 93       	push	r25
     ffc:	8f 93       	push	r24
     ffe:	8e 01       	movw	r16, r28
    1000:	09 5f       	subi	r16, 0xF9	; 249
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	1f 93       	push	r17
    1006:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    1008:	42 d2       	rcall	.+1156   	; 0x148e <sprintf>
    100a:	c8 01       	movw	r24, r16
    100c:	11 d1       	rcall	.+546    	; 0x1230 <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	e8 96       	adiw	r28, 0x38	; 56
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	08 95       	ret

00001030 <__vector_17>:
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1030:	1f 92       	push	r1
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	0f 92       	push	r0
    1038:	11 24       	eor	r1, r1
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	2f 93       	push	r18
    1048:	3f 93       	push	r19
    104a:	4f 93       	push	r20
    104c:	5f 93       	push	r21
    104e:	6f 93       	push	r22
    1050:	7f 93       	push	r23
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    1062:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_timer_tick>
    1066:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <_timer_tick+0x1>
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <_timer_tick+0x1>
    1070:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <_timer_tick>
    1074:	ce e2       	ldi	r28, 0x2E	; 46
    1076:	d3 e0       	ldi	r29, 0x03	; 3
    1078:	0f 2e       	mov	r0, r31
    107a:	f6 e7       	ldi	r31, 0x76	; 118
    107c:	ef 2e       	mov	r14, r31
    107e:	f3 e0       	ldi	r31, 0x03	; 3
    1080:	ff 2e       	mov	r15, r31
    1082:	f0 2d       	mov	r31, r0
    1084:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    1086:	ec 81       	ldd	r30, Y+4	; 0x04
    1088:	fd 81       	ldd	r31, Y+5	; 0x05
    108a:	30 97       	sbiw	r30, 0x00	; 0
    108c:	09 f1       	breq	.+66     	; 0x10d0 <__vector_17+0xa0>
    108e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <_timer_tick>
    1092:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <_timer_tick+0x1>
    1096:	28 81       	ld	r18, Y
    1098:	39 81       	ldd	r19, Y+1	; 0x01
    109a:	28 17       	cp	r18, r24
    109c:	39 07       	cpc	r19, r25
    109e:	c1 f4       	brne	.+48     	; 0x10d0 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    10a0:	88 85       	ldd	r24, Y+8	; 0x08
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	19 f4       	brne	.+6      	; 0x10ac <__vector_17+0x7c>
    10a6:	8e 81       	ldd	r24, Y+6	; 0x06
    10a8:	9f 81       	ldd	r25, Y+7	; 0x07
    10aa:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    10ac:	d8 01       	movw	r26, r16
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	13 97       	sbiw	r26, 0x03	; 3
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	41 f0       	breq	.+16     	; 0x10ca <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    10ba:	2d 91       	ld	r18, X+
    10bc:	3c 91       	ld	r19, X
    10be:	11 97       	sbiw	r26, 0x01	; 1
    10c0:	82 0f       	add	r24, r18
    10c2:	93 1f       	adc	r25, r19
    10c4:	8d 93       	st	X+, r24
    10c6:	9c 93       	st	X, r25
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    10ca:	f8 01       	movw	r30, r16
    10cc:	15 82       	std	Z+5, r1	; 0x05
    10ce:	14 82       	std	Z+4, r1	; 0x04
    10d0:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    10d2:	ce 15       	cp	r28, r14
    10d4:	df 05       	cpc	r29, r15
    10d6:	b1 f6       	brne	.-84     	; 0x1084 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    10d8:	ff 91       	pop	r31
    10da:	ef 91       	pop	r30
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	0f 90       	pop	r0
    10fe:	0b be       	out	0x3b, r0	; 59
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    110a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    110e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    1112:	88 e4       	ldi	r24, 0x48	; 72
    1114:	98 e0       	ldi	r25, 0x08	; 8
    1116:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    111a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    111e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1122:	89 e0       	ldi	r24, 0x09	; 9
    1124:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    112e:	88 e4       	ldi	r24, 0x48	; 72
    1130:	ee e2       	ldi	r30, 0x2E	; 46
    1132:	f3 e0       	ldi	r31, 0x03	; 3
    1134:	df 01       	movw	r26, r30
    1136:	1d 92       	st	X+, r1
    1138:	8a 95       	dec	r24
    113a:	e9 f7       	brne	.-6      	; 0x1136 <TIMER_Init+0x2c>
    113c:	08 95       	ret

0000113e <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1148:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <_timer+0x4>
    114c:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <_timer+0x5>
    1150:	67 2b       	or	r22, r23
    1152:	09 f4       	brne	.+2      	; 0x1156 <TIMER_Create+0x18>
    1154:	49 c0       	rjmp	.+146    	; 0x11e8 <TIMER_Create+0xaa>
    1156:	ee e2       	ldi	r30, 0x2E	; 46
    1158:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    115a:	a1 e0       	ldi	r26, 0x01	; 1
    115c:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    115e:	c5 85       	ldd	r28, Z+13	; 0x0d
    1160:	d6 85       	ldd	r29, Z+14	; 0x0e
    1162:	cd 2b       	or	r28, r29
    1164:	09 f4       	brne	.+2      	; 0x1168 <TIMER_Create+0x2a>
    1166:	42 c0       	rjmp	.+132    	; 0x11ec <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	39 96       	adiw	r30, 0x09	; 9
    116c:	a8 30       	cpi	r26, 0x08	; 8
    116e:	b1 05       	cpc	r27, r1
    1170:	b1 f7       	brne	.-20     	; 0x115e <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1178:	fd 01       	movw	r30, r26
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	ea 0f       	add	r30, r26
    1188:	fb 1f       	adc	r31, r27
    118a:	e2 5d       	subi	r30, 0xD2	; 210
    118c:	fc 4f       	sbci	r31, 0xFC	; 252
    118e:	93 83       	std	Z+3, r25	; 0x03
    1190:	82 83       	std	Z+2, r24	; 0x02
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    1194:	fd 01       	movw	r30, r26
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	ee 0f       	add	r30, r30
    119c:	ff 1f       	adc	r31, r31
    119e:	ee 0f       	add	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	ea 0f       	add	r30, r26
    11a4:	fb 1f       	adc	r31, r27
    11a6:	e2 5d       	subi	r30, 0xD2	; 210
    11a8:	fc 4f       	sbci	r31, 0xFC	; 252
    11aa:	13 82       	std	Z+3, r1	; 0x03
    11ac:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    11ae:	fd 01       	movw	r30, r26
    11b0:	ee 0f       	add	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	ea 0f       	add	r30, r26
    11be:	fb 1f       	adc	r31, r27
    11c0:	e2 5d       	subi	r30, 0xD2	; 210
    11c2:	fc 4f       	sbci	r31, 0xFC	; 252
    11c4:	55 83       	std	Z+5, r21	; 0x05
    11c6:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    11c8:	37 83       	std	Z+7, r19	; 0x07
    11ca:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    11cc:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <_timer_tick>
    11d0:	30 91 07 03 	lds	r19, 0x0307	; 0x800307 <_timer_tick+0x1>
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	91 83       	std	Z+1, r25	; 0x01
    11da:	80 83       	st	Z, r24
			_timer[i].state = READY;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    11e0:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    11e2:	8a 2f       	mov	r24, r26
    11e4:	9b 2f       	mov	r25, r27
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    11ec:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    11ee:	f8 94       	cli
		{
			if (periodic != 0) 
    11f0:	01 2b       	or	r16, r17
    11f2:	11 f6       	brne	.-124    	; 0x1178 <TIMER_Create+0x3a>
    11f4:	cf cf       	rjmp	.-98     	; 0x1194 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1200:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1204:	83 e3       	ldi	r24, 0x33	; 51
    1206:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    120a:	e9 ec       	ldi	r30, 0xC9	; 201
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 61       	ori	r24, 0x18	; 24
    1212:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1214:	ea ec       	ldi	r30, 0xCA	; 202
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	86 60       	ori	r24, 0x06	; 6
    121c:	80 83       	st	Z, r24
    121e:	08 95       	ret

00001220 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    1220:	e8 ec       	ldi	r30, 0xC8	; 200
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	90 81       	ld	r25, Z
    1226:	95 ff       	sbrs	r25, 5
    1228:	fd cf       	rjmp	.-6      	; 0x1224 <UART_SendChar+0x4>
	UDR1 = c;
    122a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    122e:	08 95       	ret

00001230 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1236:	88 81       	ld	r24, Y
    1238:	88 23       	and	r24, r24
    123a:	29 f0       	breq	.+10     	; 0x1246 <UART_SendString+0x16>
    123c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    123e:	f0 df       	rcall	.-32     	; 0x1220 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1240:	89 91       	ld	r24, Y+
    1242:	81 11       	cpse	r24, r1
    1244:	fc cf       	rjmp	.-8      	; 0x123e <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <malloc>:
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	82 30       	cpi	r24, 0x02	; 2
    1256:	91 05       	cpc	r25, r1
    1258:	10 f4       	brcc	.+4      	; 0x125e <malloc+0x12>
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <__flp>
    1262:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <__flp+0x1>
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	30 97       	sbiw	r30, 0x00	; 0
    1270:	19 f1       	breq	.+70     	; 0x12b8 <malloc+0x6c>
    1272:	40 81       	ld	r20, Z
    1274:	51 81       	ldd	r21, Z+1	; 0x01
    1276:	02 81       	ldd	r16, Z+2	; 0x02
    1278:	13 81       	ldd	r17, Z+3	; 0x03
    127a:	48 17       	cp	r20, r24
    127c:	59 07       	cpc	r21, r25
    127e:	c8 f0       	brcs	.+50     	; 0x12b2 <malloc+0x66>
    1280:	84 17       	cp	r24, r20
    1282:	95 07       	cpc	r25, r21
    1284:	69 f4       	brne	.+26     	; 0x12a0 <malloc+0x54>
    1286:	10 97       	sbiw	r26, 0x00	; 0
    1288:	31 f0       	breq	.+12     	; 0x1296 <malloc+0x4a>
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	0c 93       	st	X, r16
    128e:	12 97       	sbiw	r26, 0x02	; 2
    1290:	13 96       	adiw	r26, 0x03	; 3
    1292:	1c 93       	st	X, r17
    1294:	27 c0       	rjmp	.+78     	; 0x12e4 <malloc+0x98>
    1296:	00 93 8d 03 	sts	0x038D, r16	; 0x80038d <__flp>
    129a:	10 93 8e 03 	sts	0x038E, r17	; 0x80038e <__flp+0x1>
    129e:	22 c0       	rjmp	.+68     	; 0x12e4 <malloc+0x98>
    12a0:	21 15       	cp	r18, r1
    12a2:	31 05       	cpc	r19, r1
    12a4:	19 f0       	breq	.+6      	; 0x12ac <malloc+0x60>
    12a6:	42 17       	cp	r20, r18
    12a8:	53 07       	cpc	r21, r19
    12aa:	18 f4       	brcc	.+6      	; 0x12b2 <malloc+0x66>
    12ac:	9a 01       	movw	r18, r20
    12ae:	bd 01       	movw	r22, r26
    12b0:	ef 01       	movw	r28, r30
    12b2:	df 01       	movw	r26, r30
    12b4:	f8 01       	movw	r30, r16
    12b6:	db cf       	rjmp	.-74     	; 0x126e <malloc+0x22>
    12b8:	21 15       	cp	r18, r1
    12ba:	31 05       	cpc	r19, r1
    12bc:	f9 f0       	breq	.+62     	; 0x12fc <malloc+0xb0>
    12be:	28 1b       	sub	r18, r24
    12c0:	39 0b       	sbc	r19, r25
    12c2:	24 30       	cpi	r18, 0x04	; 4
    12c4:	31 05       	cpc	r19, r1
    12c6:	80 f4       	brcc	.+32     	; 0x12e8 <malloc+0x9c>
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	9b 81       	ldd	r25, Y+3	; 0x03
    12cc:	61 15       	cp	r22, r1
    12ce:	71 05       	cpc	r23, r1
    12d0:	21 f0       	breq	.+8      	; 0x12da <malloc+0x8e>
    12d2:	fb 01       	movw	r30, r22
    12d4:	93 83       	std	Z+3, r25	; 0x03
    12d6:	82 83       	std	Z+2, r24	; 0x02
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <malloc+0x96>
    12da:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <__flp+0x1>
    12de:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <__flp>
    12e2:	fe 01       	movw	r30, r28
    12e4:	32 96       	adiw	r30, 0x02	; 2
    12e6:	44 c0       	rjmp	.+136    	; 0x1370 <malloc+0x124>
    12e8:	fe 01       	movw	r30, r28
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	81 93       	st	Z+, r24
    12f0:	91 93       	st	Z+, r25
    12f2:	22 50       	subi	r18, 0x02	; 2
    12f4:	31 09       	sbc	r19, r1
    12f6:	39 83       	std	Y+1, r19	; 0x01
    12f8:	28 83       	st	Y, r18
    12fa:	3a c0       	rjmp	.+116    	; 0x1370 <malloc+0x124>
    12fc:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    1300:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    1304:	23 2b       	or	r18, r19
    1306:	41 f4       	brne	.+16     	; 0x1318 <malloc+0xcc>
    1308:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    130c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1310:	30 93 8c 03 	sts	0x038C, r19	; 0x80038c <__brkval+0x1>
    1314:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <__brkval>
    1318:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    131c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	41 f4       	brne	.+16     	; 0x1336 <malloc+0xea>
    1326:	2d b7       	in	r18, 0x3d	; 61
    1328:	3e b7       	in	r19, 0x3e	; 62
    132a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    132e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1332:	24 1b       	sub	r18, r20
    1334:	35 0b       	sbc	r19, r21
    1336:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <__brkval>
    133a:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <__brkval+0x1>
    133e:	e2 17       	cp	r30, r18
    1340:	f3 07       	cpc	r31, r19
    1342:	a0 f4       	brcc	.+40     	; 0x136c <malloc+0x120>
    1344:	2e 1b       	sub	r18, r30
    1346:	3f 0b       	sbc	r19, r31
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	78 f0       	brcs	.+30     	; 0x136c <malloc+0x120>
    134e:	ac 01       	movw	r20, r24
    1350:	4e 5f       	subi	r20, 0xFE	; 254
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	24 17       	cp	r18, r20
    1356:	35 07       	cpc	r19, r21
    1358:	48 f0       	brcs	.+18     	; 0x136c <malloc+0x120>
    135a:	4e 0f       	add	r20, r30
    135c:	5f 1f       	adc	r21, r31
    135e:	50 93 8c 03 	sts	0x038C, r21	; 0x80038c <__brkval+0x1>
    1362:	40 93 8b 03 	sts	0x038B, r20	; 0x80038b <__brkval>
    1366:	81 93       	st	Z+, r24
    1368:	91 93       	st	Z+, r25
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <malloc+0x124>
    136c:	e0 e0       	ldi	r30, 0x00	; 0
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	cf 01       	movw	r24, r30
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <free>:
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	00 97       	sbiw	r24, 0x00	; 0
    1382:	09 f4       	brne	.+2      	; 0x1386 <free+0xa>
    1384:	81 c0       	rjmp	.+258    	; 0x1488 <free+0x10c>
    1386:	fc 01       	movw	r30, r24
    1388:	32 97       	sbiw	r30, 0x02	; 2
    138a:	13 82       	std	Z+3, r1	; 0x03
    138c:	12 82       	std	Z+2, r1	; 0x02
    138e:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <__flp>
    1392:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <__flp+0x1>
    1396:	10 97       	sbiw	r26, 0x00	; 0
    1398:	81 f4       	brne	.+32     	; 0x13ba <free+0x3e>
    139a:	20 81       	ld	r18, Z
    139c:	31 81       	ldd	r19, Z+1	; 0x01
    139e:	82 0f       	add	r24, r18
    13a0:	93 1f       	adc	r25, r19
    13a2:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    13a6:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    13aa:	28 17       	cp	r18, r24
    13ac:	39 07       	cpc	r19, r25
    13ae:	51 f5       	brne	.+84     	; 0x1404 <free+0x88>
    13b0:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__brkval+0x1>
    13b4:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__brkval>
    13b8:	67 c0       	rjmp	.+206    	; 0x1488 <free+0x10c>
    13ba:	ed 01       	movw	r28, r26
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	ce 17       	cp	r28, r30
    13c2:	df 07       	cpc	r29, r31
    13c4:	40 f4       	brcc	.+16     	; 0x13d6 <free+0x5a>
    13c6:	4a 81       	ldd	r20, Y+2	; 0x02
    13c8:	5b 81       	ldd	r21, Y+3	; 0x03
    13ca:	9e 01       	movw	r18, r28
    13cc:	41 15       	cp	r20, r1
    13ce:	51 05       	cpc	r21, r1
    13d0:	f1 f0       	breq	.+60     	; 0x140e <free+0x92>
    13d2:	ea 01       	movw	r28, r20
    13d4:	f5 cf       	rjmp	.-22     	; 0x13c0 <free+0x44>
    13d6:	d3 83       	std	Z+3, r29	; 0x03
    13d8:	c2 83       	std	Z+2, r28	; 0x02
    13da:	40 81       	ld	r20, Z
    13dc:	51 81       	ldd	r21, Z+1	; 0x01
    13de:	84 0f       	add	r24, r20
    13e0:	95 1f       	adc	r25, r21
    13e2:	c8 17       	cp	r28, r24
    13e4:	d9 07       	cpc	r29, r25
    13e6:	59 f4       	brne	.+22     	; 0x13fe <free+0x82>
    13e8:	88 81       	ld	r24, Y
    13ea:	99 81       	ldd	r25, Y+1	; 0x01
    13ec:	84 0f       	add	r24, r20
    13ee:	95 1f       	adc	r25, r21
    13f0:	02 96       	adiw	r24, 0x02	; 2
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	9b 81       	ldd	r25, Y+3	; 0x03
    13fa:	93 83       	std	Z+3, r25	; 0x03
    13fc:	82 83       	std	Z+2, r24	; 0x02
    13fe:	21 15       	cp	r18, r1
    1400:	31 05       	cpc	r19, r1
    1402:	29 f4       	brne	.+10     	; 0x140e <free+0x92>
    1404:	f0 93 8e 03 	sts	0x038E, r31	; 0x80038e <__flp+0x1>
    1408:	e0 93 8d 03 	sts	0x038D, r30	; 0x80038d <__flp>
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <free+0x10c>
    140e:	e9 01       	movw	r28, r18
    1410:	fb 83       	std	Y+3, r31	; 0x03
    1412:	ea 83       	std	Y+2, r30	; 0x02
    1414:	49 91       	ld	r20, Y+
    1416:	59 91       	ld	r21, Y+
    1418:	c4 0f       	add	r28, r20
    141a:	d5 1f       	adc	r29, r21
    141c:	ec 17       	cp	r30, r28
    141e:	fd 07       	cpc	r31, r29
    1420:	61 f4       	brne	.+24     	; 0x143a <free+0xbe>
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	84 0f       	add	r24, r20
    1428:	95 1f       	adc	r25, r21
    142a:	02 96       	adiw	r24, 0x02	; 2
    142c:	e9 01       	movw	r28, r18
    142e:	99 83       	std	Y+1, r25	; 0x01
    1430:	88 83       	st	Y, r24
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	9b 83       	std	Y+3, r25	; 0x03
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	e0 e0       	ldi	r30, 0x00	; 0
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	12 96       	adiw	r26, 0x02	; 2
    1440:	8d 91       	ld	r24, X+
    1442:	9c 91       	ld	r25, X
    1444:	13 97       	sbiw	r26, 0x03	; 3
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	19 f0       	breq	.+6      	; 0x1450 <free+0xd4>
    144a:	fd 01       	movw	r30, r26
    144c:	dc 01       	movw	r26, r24
    144e:	f7 cf       	rjmp	.-18     	; 0x143e <free+0xc2>
    1450:	8d 91       	ld	r24, X+
    1452:	9c 91       	ld	r25, X
    1454:	11 97       	sbiw	r26, 0x01	; 1
    1456:	9d 01       	movw	r18, r26
    1458:	2e 5f       	subi	r18, 0xFE	; 254
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	20 91 8b 03 	lds	r18, 0x038B	; 0x80038b <__brkval>
    1464:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <__brkval+0x1>
    1468:	28 17       	cp	r18, r24
    146a:	39 07       	cpc	r19, r25
    146c:	69 f4       	brne	.+26     	; 0x1488 <free+0x10c>
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	29 f4       	brne	.+10     	; 0x147c <free+0x100>
    1472:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <__flp+0x1>
    1476:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <__flp>
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <free+0x104>
    147c:	13 82       	std	Z+3, r1	; 0x03
    147e:	12 82       	std	Z+2, r1	; 0x02
    1480:	b0 93 8c 03 	sts	0x038C, r27	; 0x80038c <__brkval+0x1>
    1484:	a0 93 8b 03 	sts	0x038B, r26	; 0x80038b <__brkval>
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <sprintf>:
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	2e 97       	sbiw	r28, 0x0e	; 14
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	0d 89       	ldd	r16, Y+21	; 0x15
    14a8:	1e 89       	ldd	r17, Y+22	; 0x16
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	8c 83       	std	Y+4, r24	; 0x04
    14ae:	1a 83       	std	Y+2, r17	; 0x02
    14b0:	09 83       	std	Y+1, r16	; 0x01
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	9f e7       	ldi	r25, 0x7F	; 127
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	ae 01       	movw	r20, r28
    14bc:	47 5e       	subi	r20, 0xE7	; 231
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	6f 89       	ldd	r22, Y+23	; 0x17
    14c2:	78 8d       	ldd	r23, Y+24	; 0x18
    14c4:	ce 01       	movw	r24, r28
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	10 d0       	rcall	.+32     	; 0x14ea <vfprintf>
    14ca:	ef 81       	ldd	r30, Y+7	; 0x07
    14cc:	f8 85       	ldd	r31, Y+8	; 0x08
    14ce:	e0 0f       	add	r30, r16
    14d0:	f1 1f       	adc	r31, r17
    14d2:	10 82       	st	Z, r1
    14d4:	2e 96       	adiw	r28, 0x0e	; 14
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <vfprintf>:
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2b 97       	sbiw	r28, 0x0b	; 11
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	6c 01       	movw	r12, r24
    1520:	7b 01       	movw	r14, r22
    1522:	8a 01       	movw	r16, r20
    1524:	fc 01       	movw	r30, r24
    1526:	17 82       	std	Z+7, r1	; 0x07
    1528:	16 82       	std	Z+6, r1	; 0x06
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	81 ff       	sbrs	r24, 1
    152e:	bf c1       	rjmp	.+894    	; 0x18ae <vfprintf+0x3c4>
    1530:	ce 01       	movw	r24, r28
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	3c 01       	movw	r6, r24
    1536:	f6 01       	movw	r30, r12
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	f7 01       	movw	r30, r14
    153c:	93 fd       	sbrc	r25, 3
    153e:	85 91       	lpm	r24, Z+
    1540:	93 ff       	sbrs	r25, 3
    1542:	81 91       	ld	r24, Z+
    1544:	7f 01       	movw	r14, r30
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <vfprintf+0x62>
    154a:	ad c1       	rjmp	.+858    	; 0x18a6 <vfprintf+0x3bc>
    154c:	85 32       	cpi	r24, 0x25	; 37
    154e:	39 f4       	brne	.+14     	; 0x155e <vfprintf+0x74>
    1550:	93 fd       	sbrc	r25, 3
    1552:	85 91       	lpm	r24, Z+
    1554:	93 ff       	sbrs	r25, 3
    1556:	81 91       	ld	r24, Z+
    1558:	7f 01       	movw	r14, r30
    155a:	85 32       	cpi	r24, 0x25	; 37
    155c:	21 f4       	brne	.+8      	; 0x1566 <vfprintf+0x7c>
    155e:	b6 01       	movw	r22, r12
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	d6 d1       	rcall	.+940    	; 0x1910 <fputc>
    1564:	e8 cf       	rjmp	.-48     	; 0x1536 <vfprintf+0x4c>
    1566:	91 2c       	mov	r9, r1
    1568:	21 2c       	mov	r2, r1
    156a:	31 2c       	mov	r3, r1
    156c:	ff e1       	ldi	r31, 0x1F	; 31
    156e:	f3 15       	cp	r31, r3
    1570:	d8 f0       	brcs	.+54     	; 0x15a8 <vfprintf+0xbe>
    1572:	8b 32       	cpi	r24, 0x2B	; 43
    1574:	79 f0       	breq	.+30     	; 0x1594 <vfprintf+0xaa>
    1576:	38 f4       	brcc	.+14     	; 0x1586 <vfprintf+0x9c>
    1578:	80 32       	cpi	r24, 0x20	; 32
    157a:	79 f0       	breq	.+30     	; 0x159a <vfprintf+0xb0>
    157c:	83 32       	cpi	r24, 0x23	; 35
    157e:	a1 f4       	brne	.+40     	; 0x15a8 <vfprintf+0xbe>
    1580:	23 2d       	mov	r18, r3
    1582:	20 61       	ori	r18, 0x10	; 16
    1584:	1d c0       	rjmp	.+58     	; 0x15c0 <vfprintf+0xd6>
    1586:	8d 32       	cpi	r24, 0x2D	; 45
    1588:	61 f0       	breq	.+24     	; 0x15a2 <vfprintf+0xb8>
    158a:	80 33       	cpi	r24, 0x30	; 48
    158c:	69 f4       	brne	.+26     	; 0x15a8 <vfprintf+0xbe>
    158e:	23 2d       	mov	r18, r3
    1590:	21 60       	ori	r18, 0x01	; 1
    1592:	16 c0       	rjmp	.+44     	; 0x15c0 <vfprintf+0xd6>
    1594:	83 2d       	mov	r24, r3
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	38 2e       	mov	r3, r24
    159a:	e3 2d       	mov	r30, r3
    159c:	e4 60       	ori	r30, 0x04	; 4
    159e:	3e 2e       	mov	r3, r30
    15a0:	2a c0       	rjmp	.+84     	; 0x15f6 <vfprintf+0x10c>
    15a2:	f3 2d       	mov	r31, r3
    15a4:	f8 60       	ori	r31, 0x08	; 8
    15a6:	1d c0       	rjmp	.+58     	; 0x15e2 <vfprintf+0xf8>
    15a8:	37 fc       	sbrc	r3, 7
    15aa:	2d c0       	rjmp	.+90     	; 0x1606 <vfprintf+0x11c>
    15ac:	20 ed       	ldi	r18, 0xD0	; 208
    15ae:	28 0f       	add	r18, r24
    15b0:	2a 30       	cpi	r18, 0x0A	; 10
    15b2:	40 f0       	brcs	.+16     	; 0x15c4 <vfprintf+0xda>
    15b4:	8e 32       	cpi	r24, 0x2E	; 46
    15b6:	b9 f4       	brne	.+46     	; 0x15e6 <vfprintf+0xfc>
    15b8:	36 fc       	sbrc	r3, 6
    15ba:	75 c1       	rjmp	.+746    	; 0x18a6 <vfprintf+0x3bc>
    15bc:	23 2d       	mov	r18, r3
    15be:	20 64       	ori	r18, 0x40	; 64
    15c0:	32 2e       	mov	r3, r18
    15c2:	19 c0       	rjmp	.+50     	; 0x15f6 <vfprintf+0x10c>
    15c4:	36 fe       	sbrs	r3, 6
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <vfprintf+0xea>
    15c8:	8a e0       	ldi	r24, 0x0A	; 10
    15ca:	98 9e       	mul	r9, r24
    15cc:	20 0d       	add	r18, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	92 2e       	mov	r9, r18
    15d2:	11 c0       	rjmp	.+34     	; 0x15f6 <vfprintf+0x10c>
    15d4:	ea e0       	ldi	r30, 0x0A	; 10
    15d6:	2e 9e       	mul	r2, r30
    15d8:	20 0d       	add	r18, r0
    15da:	11 24       	eor	r1, r1
    15dc:	22 2e       	mov	r2, r18
    15de:	f3 2d       	mov	r31, r3
    15e0:	f0 62       	ori	r31, 0x20	; 32
    15e2:	3f 2e       	mov	r3, r31
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <vfprintf+0x10c>
    15e6:	8c 36       	cpi	r24, 0x6C	; 108
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <vfprintf+0x108>
    15ea:	83 2d       	mov	r24, r3
    15ec:	80 68       	ori	r24, 0x80	; 128
    15ee:	38 2e       	mov	r3, r24
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <vfprintf+0x10c>
    15f2:	88 36       	cpi	r24, 0x68	; 104
    15f4:	41 f4       	brne	.+16     	; 0x1606 <vfprintf+0x11c>
    15f6:	f7 01       	movw	r30, r14
    15f8:	93 fd       	sbrc	r25, 3
    15fa:	85 91       	lpm	r24, Z+
    15fc:	93 ff       	sbrs	r25, 3
    15fe:	81 91       	ld	r24, Z+
    1600:	7f 01       	movw	r14, r30
    1602:	81 11       	cpse	r24, r1
    1604:	b3 cf       	rjmp	.-154    	; 0x156c <vfprintf+0x82>
    1606:	98 2f       	mov	r25, r24
    1608:	9f 7d       	andi	r25, 0xDF	; 223
    160a:	95 54       	subi	r25, 0x45	; 69
    160c:	93 30       	cpi	r25, 0x03	; 3
    160e:	28 f4       	brcc	.+10     	; 0x161a <vfprintf+0x130>
    1610:	0c 5f       	subi	r16, 0xFC	; 252
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	9f e3       	ldi	r25, 0x3F	; 63
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <vfprintf+0x14a>
    161a:	83 36       	cpi	r24, 0x63	; 99
    161c:	31 f0       	breq	.+12     	; 0x162a <vfprintf+0x140>
    161e:	83 37       	cpi	r24, 0x73	; 115
    1620:	71 f0       	breq	.+28     	; 0x163e <vfprintf+0x154>
    1622:	83 35       	cpi	r24, 0x53	; 83
    1624:	09 f0       	breq	.+2      	; 0x1628 <vfprintf+0x13e>
    1626:	55 c0       	rjmp	.+170    	; 0x16d2 <vfprintf+0x1e8>
    1628:	20 c0       	rjmp	.+64     	; 0x166a <vfprintf+0x180>
    162a:	f8 01       	movw	r30, r16
    162c:	80 81       	ld	r24, Z
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	0e 5f       	subi	r16, 0xFE	; 254
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	88 24       	eor	r8, r8
    1636:	83 94       	inc	r8
    1638:	91 2c       	mov	r9, r1
    163a:	53 01       	movw	r10, r6
    163c:	12 c0       	rjmp	.+36     	; 0x1662 <vfprintf+0x178>
    163e:	28 01       	movw	r4, r16
    1640:	f2 e0       	ldi	r31, 0x02	; 2
    1642:	4f 0e       	add	r4, r31
    1644:	51 1c       	adc	r5, r1
    1646:	f8 01       	movw	r30, r16
    1648:	a0 80       	ld	r10, Z
    164a:	b1 80       	ldd	r11, Z+1	; 0x01
    164c:	36 fe       	sbrs	r3, 6
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <vfprintf+0x16c>
    1650:	69 2d       	mov	r22, r9
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0x170>
    1656:	6f ef       	ldi	r22, 0xFF	; 255
    1658:	7f ef       	ldi	r23, 0xFF	; 255
    165a:	c5 01       	movw	r24, r10
    165c:	4e d1       	rcall	.+668    	; 0x18fa <strnlen>
    165e:	4c 01       	movw	r8, r24
    1660:	82 01       	movw	r16, r4
    1662:	f3 2d       	mov	r31, r3
    1664:	ff 77       	andi	r31, 0x7F	; 127
    1666:	3f 2e       	mov	r3, r31
    1668:	15 c0       	rjmp	.+42     	; 0x1694 <vfprintf+0x1aa>
    166a:	28 01       	movw	r4, r16
    166c:	22 e0       	ldi	r18, 0x02	; 2
    166e:	42 0e       	add	r4, r18
    1670:	51 1c       	adc	r5, r1
    1672:	f8 01       	movw	r30, r16
    1674:	a0 80       	ld	r10, Z
    1676:	b1 80       	ldd	r11, Z+1	; 0x01
    1678:	36 fe       	sbrs	r3, 6
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <vfprintf+0x198>
    167c:	69 2d       	mov	r22, r9
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x19c>
    1682:	6f ef       	ldi	r22, 0xFF	; 255
    1684:	7f ef       	ldi	r23, 0xFF	; 255
    1686:	c5 01       	movw	r24, r10
    1688:	2d d1       	rcall	.+602    	; 0x18e4 <strnlen_P>
    168a:	4c 01       	movw	r8, r24
    168c:	f3 2d       	mov	r31, r3
    168e:	f0 68       	ori	r31, 0x80	; 128
    1690:	3f 2e       	mov	r3, r31
    1692:	82 01       	movw	r16, r4
    1694:	33 fc       	sbrc	r3, 3
    1696:	19 c0       	rjmp	.+50     	; 0x16ca <vfprintf+0x1e0>
    1698:	82 2d       	mov	r24, r2
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	88 16       	cp	r8, r24
    169e:	99 06       	cpc	r9, r25
    16a0:	a0 f4       	brcc	.+40     	; 0x16ca <vfprintf+0x1e0>
    16a2:	b6 01       	movw	r22, r12
    16a4:	80 e2       	ldi	r24, 0x20	; 32
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	33 d1       	rcall	.+614    	; 0x1910 <fputc>
    16aa:	2a 94       	dec	r2
    16ac:	f5 cf       	rjmp	.-22     	; 0x1698 <vfprintf+0x1ae>
    16ae:	f5 01       	movw	r30, r10
    16b0:	37 fc       	sbrc	r3, 7
    16b2:	85 91       	lpm	r24, Z+
    16b4:	37 fe       	sbrs	r3, 7
    16b6:	81 91       	ld	r24, Z+
    16b8:	5f 01       	movw	r10, r30
    16ba:	b6 01       	movw	r22, r12
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	28 d1       	rcall	.+592    	; 0x1910 <fputc>
    16c0:	21 10       	cpse	r2, r1
    16c2:	2a 94       	dec	r2
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	82 1a       	sub	r8, r18
    16c8:	91 08       	sbc	r9, r1
    16ca:	81 14       	cp	r8, r1
    16cc:	91 04       	cpc	r9, r1
    16ce:	79 f7       	brne	.-34     	; 0x16ae <vfprintf+0x1c4>
    16d0:	e1 c0       	rjmp	.+450    	; 0x1894 <vfprintf+0x3aa>
    16d2:	84 36       	cpi	r24, 0x64	; 100
    16d4:	11 f0       	breq	.+4      	; 0x16da <vfprintf+0x1f0>
    16d6:	89 36       	cpi	r24, 0x69	; 105
    16d8:	39 f5       	brne	.+78     	; 0x1728 <vfprintf+0x23e>
    16da:	f8 01       	movw	r30, r16
    16dc:	37 fe       	sbrs	r3, 7
    16de:	07 c0       	rjmp	.+14     	; 0x16ee <vfprintf+0x204>
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0c 5f       	subi	r16, 0xFC	; 252
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <vfprintf+0x214>
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	07 2e       	mov	r0, r23
    16f4:	00 0c       	add	r0, r0
    16f6:	88 0b       	sbc	r24, r24
    16f8:	99 0b       	sbc	r25, r25
    16fa:	0e 5f       	subi	r16, 0xFE	; 254
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	f3 2d       	mov	r31, r3
    1700:	ff 76       	andi	r31, 0x6F	; 111
    1702:	3f 2e       	mov	r3, r31
    1704:	97 ff       	sbrs	r25, 7
    1706:	09 c0       	rjmp	.+18     	; 0x171a <vfprintf+0x230>
    1708:	90 95       	com	r25
    170a:	80 95       	com	r24
    170c:	70 95       	com	r23
    170e:	61 95       	neg	r22
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	f0 68       	ori	r31, 0x80	; 128
    1718:	3f 2e       	mov	r3, r31
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	a3 01       	movw	r20, r6
    1720:	33 d1       	rcall	.+614    	; 0x1988 <__ultoa_invert>
    1722:	88 2e       	mov	r8, r24
    1724:	86 18       	sub	r8, r6
    1726:	44 c0       	rjmp	.+136    	; 0x17b0 <vfprintf+0x2c6>
    1728:	85 37       	cpi	r24, 0x75	; 117
    172a:	31 f4       	brne	.+12     	; 0x1738 <vfprintf+0x24e>
    172c:	23 2d       	mov	r18, r3
    172e:	2f 7e       	andi	r18, 0xEF	; 239
    1730:	b2 2e       	mov	r11, r18
    1732:	2a e0       	ldi	r18, 0x0A	; 10
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	25 c0       	rjmp	.+74     	; 0x1782 <vfprintf+0x298>
    1738:	93 2d       	mov	r25, r3
    173a:	99 7f       	andi	r25, 0xF9	; 249
    173c:	b9 2e       	mov	r11, r25
    173e:	8f 36       	cpi	r24, 0x6F	; 111
    1740:	c1 f0       	breq	.+48     	; 0x1772 <vfprintf+0x288>
    1742:	18 f4       	brcc	.+6      	; 0x174a <vfprintf+0x260>
    1744:	88 35       	cpi	r24, 0x58	; 88
    1746:	79 f0       	breq	.+30     	; 0x1766 <vfprintf+0x27c>
    1748:	ae c0       	rjmp	.+348    	; 0x18a6 <vfprintf+0x3bc>
    174a:	80 37       	cpi	r24, 0x70	; 112
    174c:	19 f0       	breq	.+6      	; 0x1754 <vfprintf+0x26a>
    174e:	88 37       	cpi	r24, 0x78	; 120
    1750:	21 f0       	breq	.+8      	; 0x175a <vfprintf+0x270>
    1752:	a9 c0       	rjmp	.+338    	; 0x18a6 <vfprintf+0x3bc>
    1754:	e9 2f       	mov	r30, r25
    1756:	e0 61       	ori	r30, 0x10	; 16
    1758:	be 2e       	mov	r11, r30
    175a:	b4 fe       	sbrs	r11, 4
    175c:	0d c0       	rjmp	.+26     	; 0x1778 <vfprintf+0x28e>
    175e:	fb 2d       	mov	r31, r11
    1760:	f4 60       	ori	r31, 0x04	; 4
    1762:	bf 2e       	mov	r11, r31
    1764:	09 c0       	rjmp	.+18     	; 0x1778 <vfprintf+0x28e>
    1766:	34 fe       	sbrs	r3, 4
    1768:	0a c0       	rjmp	.+20     	; 0x177e <vfprintf+0x294>
    176a:	29 2f       	mov	r18, r25
    176c:	26 60       	ori	r18, 0x06	; 6
    176e:	b2 2e       	mov	r11, r18
    1770:	06 c0       	rjmp	.+12     	; 0x177e <vfprintf+0x294>
    1772:	28 e0       	ldi	r18, 0x08	; 8
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <vfprintf+0x298>
    1778:	20 e1       	ldi	r18, 0x10	; 16
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <vfprintf+0x298>
    177e:	20 e1       	ldi	r18, 0x10	; 16
    1780:	32 e0       	ldi	r19, 0x02	; 2
    1782:	f8 01       	movw	r30, r16
    1784:	b7 fe       	sbrs	r11, 7
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <vfprintf+0x2ac>
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	0c 5f       	subi	r16, 0xFC	; 252
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <vfprintf+0x2b8>
    1796:	60 81       	ld	r22, Z
    1798:	71 81       	ldd	r23, Z+1	; 0x01
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 5f       	subi	r16, 0xFE	; 254
    17a0:	1f 4f       	sbci	r17, 0xFF	; 255
    17a2:	a3 01       	movw	r20, r6
    17a4:	f1 d0       	rcall	.+482    	; 0x1988 <__ultoa_invert>
    17a6:	88 2e       	mov	r8, r24
    17a8:	86 18       	sub	r8, r6
    17aa:	fb 2d       	mov	r31, r11
    17ac:	ff 77       	andi	r31, 0x7F	; 127
    17ae:	3f 2e       	mov	r3, r31
    17b0:	36 fe       	sbrs	r3, 6
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <vfprintf+0x2e4>
    17b4:	23 2d       	mov	r18, r3
    17b6:	2e 7f       	andi	r18, 0xFE	; 254
    17b8:	a2 2e       	mov	r10, r18
    17ba:	89 14       	cp	r8, r9
    17bc:	58 f4       	brcc	.+22     	; 0x17d4 <vfprintf+0x2ea>
    17be:	34 fe       	sbrs	r3, 4
    17c0:	0b c0       	rjmp	.+22     	; 0x17d8 <vfprintf+0x2ee>
    17c2:	32 fc       	sbrc	r3, 2
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <vfprintf+0x2ee>
    17c6:	83 2d       	mov	r24, r3
    17c8:	8e 7e       	andi	r24, 0xEE	; 238
    17ca:	a8 2e       	mov	r10, r24
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <vfprintf+0x2ee>
    17ce:	b8 2c       	mov	r11, r8
    17d0:	a3 2c       	mov	r10, r3
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <vfprintf+0x2f0>
    17d4:	b8 2c       	mov	r11, r8
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <vfprintf+0x2f0>
    17d8:	b9 2c       	mov	r11, r9
    17da:	a4 fe       	sbrs	r10, 4
    17dc:	0f c0       	rjmp	.+30     	; 0x17fc <vfprintf+0x312>
    17de:	fe 01       	movw	r30, r28
    17e0:	e8 0d       	add	r30, r8
    17e2:	f1 1d       	adc	r31, r1
    17e4:	80 81       	ld	r24, Z
    17e6:	80 33       	cpi	r24, 0x30	; 48
    17e8:	21 f4       	brne	.+8      	; 0x17f2 <vfprintf+0x308>
    17ea:	9a 2d       	mov	r25, r10
    17ec:	99 7e       	andi	r25, 0xE9	; 233
    17ee:	a9 2e       	mov	r10, r25
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <vfprintf+0x31a>
    17f2:	a2 fe       	sbrs	r10, 2
    17f4:	06 c0       	rjmp	.+12     	; 0x1802 <vfprintf+0x318>
    17f6:	b3 94       	inc	r11
    17f8:	b3 94       	inc	r11
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <vfprintf+0x31a>
    17fc:	8a 2d       	mov	r24, r10
    17fe:	86 78       	andi	r24, 0x86	; 134
    1800:	09 f0       	breq	.+2      	; 0x1804 <vfprintf+0x31a>
    1802:	b3 94       	inc	r11
    1804:	a3 fc       	sbrc	r10, 3
    1806:	10 c0       	rjmp	.+32     	; 0x1828 <vfprintf+0x33e>
    1808:	a0 fe       	sbrs	r10, 0
    180a:	06 c0       	rjmp	.+12     	; 0x1818 <vfprintf+0x32e>
    180c:	b2 14       	cp	r11, r2
    180e:	80 f4       	brcc	.+32     	; 0x1830 <vfprintf+0x346>
    1810:	28 0c       	add	r2, r8
    1812:	92 2c       	mov	r9, r2
    1814:	9b 18       	sub	r9, r11
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <vfprintf+0x348>
    1818:	b2 14       	cp	r11, r2
    181a:	58 f4       	brcc	.+22     	; 0x1832 <vfprintf+0x348>
    181c:	b6 01       	movw	r22, r12
    181e:	80 e2       	ldi	r24, 0x20	; 32
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	76 d0       	rcall	.+236    	; 0x1910 <fputc>
    1824:	b3 94       	inc	r11
    1826:	f8 cf       	rjmp	.-16     	; 0x1818 <vfprintf+0x32e>
    1828:	b2 14       	cp	r11, r2
    182a:	18 f4       	brcc	.+6      	; 0x1832 <vfprintf+0x348>
    182c:	2b 18       	sub	r2, r11
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <vfprintf+0x34a>
    1830:	98 2c       	mov	r9, r8
    1832:	21 2c       	mov	r2, r1
    1834:	a4 fe       	sbrs	r10, 4
    1836:	0f c0       	rjmp	.+30     	; 0x1856 <vfprintf+0x36c>
    1838:	b6 01       	movw	r22, r12
    183a:	80 e3       	ldi	r24, 0x30	; 48
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	68 d0       	rcall	.+208    	; 0x1910 <fputc>
    1840:	a2 fe       	sbrs	r10, 2
    1842:	16 c0       	rjmp	.+44     	; 0x1870 <vfprintf+0x386>
    1844:	a1 fc       	sbrc	r10, 1
    1846:	03 c0       	rjmp	.+6      	; 0x184e <vfprintf+0x364>
    1848:	88 e7       	ldi	r24, 0x78	; 120
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <vfprintf+0x368>
    184e:	88 e5       	ldi	r24, 0x58	; 88
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	b6 01       	movw	r22, r12
    1854:	0c c0       	rjmp	.+24     	; 0x186e <vfprintf+0x384>
    1856:	8a 2d       	mov	r24, r10
    1858:	86 78       	andi	r24, 0x86	; 134
    185a:	51 f0       	breq	.+20     	; 0x1870 <vfprintf+0x386>
    185c:	a1 fe       	sbrs	r10, 1
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <vfprintf+0x37a>
    1860:	8b e2       	ldi	r24, 0x2B	; 43
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <vfprintf+0x37c>
    1864:	80 e2       	ldi	r24, 0x20	; 32
    1866:	a7 fc       	sbrc	r10, 7
    1868:	8d e2       	ldi	r24, 0x2D	; 45
    186a:	b6 01       	movw	r22, r12
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	50 d0       	rcall	.+160    	; 0x1910 <fputc>
    1870:	89 14       	cp	r8, r9
    1872:	30 f4       	brcc	.+12     	; 0x1880 <vfprintf+0x396>
    1874:	b6 01       	movw	r22, r12
    1876:	80 e3       	ldi	r24, 0x30	; 48
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	4a d0       	rcall	.+148    	; 0x1910 <fputc>
    187c:	9a 94       	dec	r9
    187e:	f8 cf       	rjmp	.-16     	; 0x1870 <vfprintf+0x386>
    1880:	8a 94       	dec	r8
    1882:	f3 01       	movw	r30, r6
    1884:	e8 0d       	add	r30, r8
    1886:	f1 1d       	adc	r31, r1
    1888:	80 81       	ld	r24, Z
    188a:	b6 01       	movw	r22, r12
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	40 d0       	rcall	.+128    	; 0x1910 <fputc>
    1890:	81 10       	cpse	r8, r1
    1892:	f6 cf       	rjmp	.-20     	; 0x1880 <vfprintf+0x396>
    1894:	22 20       	and	r2, r2
    1896:	09 f4       	brne	.+2      	; 0x189a <vfprintf+0x3b0>
    1898:	4e ce       	rjmp	.-868    	; 0x1536 <vfprintf+0x4c>
    189a:	b6 01       	movw	r22, r12
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	37 d0       	rcall	.+110    	; 0x1910 <fputc>
    18a2:	2a 94       	dec	r2
    18a4:	f7 cf       	rjmp	.-18     	; 0x1894 <vfprintf+0x3aa>
    18a6:	f6 01       	movw	r30, r12
    18a8:	86 81       	ldd	r24, Z+6	; 0x06
    18aa:	97 81       	ldd	r25, Z+7	; 0x07
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <vfprintf+0x3c8>
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	2b 96       	adiw	r28, 0x0b	; 11
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	9f 90       	pop	r9
    18d4:	8f 90       	pop	r8
    18d6:	7f 90       	pop	r7
    18d8:	6f 90       	pop	r6
    18da:	5f 90       	pop	r5
    18dc:	4f 90       	pop	r4
    18de:	3f 90       	pop	r3
    18e0:	2f 90       	pop	r2
    18e2:	08 95       	ret

000018e4 <strnlen_P>:
    18e4:	fc 01       	movw	r30, r24
    18e6:	05 90       	lpm	r0, Z+
    18e8:	61 50       	subi	r22, 0x01	; 1
    18ea:	70 40       	sbci	r23, 0x00	; 0
    18ec:	01 10       	cpse	r0, r1
    18ee:	d8 f7       	brcc	.-10     	; 0x18e6 <strnlen_P+0x2>
    18f0:	80 95       	com	r24
    18f2:	90 95       	com	r25
    18f4:	8e 0f       	add	r24, r30
    18f6:	9f 1f       	adc	r25, r31
    18f8:	08 95       	ret

000018fa <strnlen>:
    18fa:	fc 01       	movw	r30, r24
    18fc:	61 50       	subi	r22, 0x01	; 1
    18fe:	70 40       	sbci	r23, 0x00	; 0
    1900:	01 90       	ld	r0, Z+
    1902:	01 10       	cpse	r0, r1
    1904:	d8 f7       	brcc	.-10     	; 0x18fc <strnlen+0x2>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	08 95       	ret

00001910 <fputc>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	fb 01       	movw	r30, r22
    191a:	23 81       	ldd	r18, Z+3	; 0x03
    191c:	21 fd       	sbrc	r18, 1
    191e:	03 c0       	rjmp	.+6      	; 0x1926 <fputc+0x16>
    1920:	8f ef       	ldi	r24, 0xFF	; 255
    1922:	9f ef       	ldi	r25, 0xFF	; 255
    1924:	2c c0       	rjmp	.+88     	; 0x197e <fputc+0x6e>
    1926:	22 ff       	sbrs	r18, 2
    1928:	16 c0       	rjmp	.+44     	; 0x1956 <fputc+0x46>
    192a:	46 81       	ldd	r20, Z+6	; 0x06
    192c:	57 81       	ldd	r21, Z+7	; 0x07
    192e:	24 81       	ldd	r18, Z+4	; 0x04
    1930:	35 81       	ldd	r19, Z+5	; 0x05
    1932:	42 17       	cp	r20, r18
    1934:	53 07       	cpc	r21, r19
    1936:	44 f4       	brge	.+16     	; 0x1948 <fputc+0x38>
    1938:	a0 81       	ld	r26, Z
    193a:	b1 81       	ldd	r27, Z+1	; 0x01
    193c:	9d 01       	movw	r18, r26
    193e:	2f 5f       	subi	r18, 0xFF	; 255
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	31 83       	std	Z+1, r19	; 0x01
    1944:	20 83       	st	Z, r18
    1946:	8c 93       	st	X, r24
    1948:	26 81       	ldd	r18, Z+6	; 0x06
    194a:	37 81       	ldd	r19, Z+7	; 0x07
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	37 83       	std	Z+7, r19	; 0x07
    1952:	26 83       	std	Z+6, r18	; 0x06
    1954:	14 c0       	rjmp	.+40     	; 0x197e <fputc+0x6e>
    1956:	8b 01       	movw	r16, r22
    1958:	ec 01       	movw	r28, r24
    195a:	fb 01       	movw	r30, r22
    195c:	00 84       	ldd	r0, Z+8	; 0x08
    195e:	f1 85       	ldd	r31, Z+9	; 0x09
    1960:	e0 2d       	mov	r30, r0
    1962:	09 95       	icall
    1964:	89 2b       	or	r24, r25
    1966:	e1 f6       	brne	.-72     	; 0x1920 <fputc+0x10>
    1968:	d8 01       	movw	r26, r16
    196a:	16 96       	adiw	r26, 0x06	; 6
    196c:	8d 91       	ld	r24, X+
    196e:	9c 91       	ld	r25, X
    1970:	17 97       	sbiw	r26, 0x07	; 7
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	17 96       	adiw	r26, 0x07	; 7
    1976:	9c 93       	st	X, r25
    1978:	8e 93       	st	-X, r24
    197a:	16 97       	sbiw	r26, 0x06	; 6
    197c:	ce 01       	movw	r24, r28
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <__ultoa_invert>:
    1988:	fa 01       	movw	r30, r20
    198a:	aa 27       	eor	r26, r26
    198c:	28 30       	cpi	r18, 0x08	; 8
    198e:	51 f1       	breq	.+84     	; 0x19e4 <__ultoa_invert+0x5c>
    1990:	20 31       	cpi	r18, 0x10	; 16
    1992:	81 f1       	breq	.+96     	; 0x19f4 <__ultoa_invert+0x6c>
    1994:	e8 94       	clt
    1996:	6f 93       	push	r22
    1998:	6e 7f       	andi	r22, 0xFE	; 254
    199a:	6e 5f       	subi	r22, 0xFE	; 254
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	af 4f       	sbci	r26, 0xFF	; 255
    19a4:	b1 e0       	ldi	r27, 0x01	; 1
    19a6:	3e d0       	rcall	.+124    	; 0x1a24 <__ultoa_invert+0x9c>
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	3c d0       	rcall	.+120    	; 0x1a24 <__ultoa_invert+0x9c>
    19ac:	67 0f       	add	r22, r23
    19ae:	78 1f       	adc	r23, r24
    19b0:	89 1f       	adc	r24, r25
    19b2:	9a 1f       	adc	r25, r26
    19b4:	a1 1d       	adc	r26, r1
    19b6:	68 0f       	add	r22, r24
    19b8:	79 1f       	adc	r23, r25
    19ba:	8a 1f       	adc	r24, r26
    19bc:	91 1d       	adc	r25, r1
    19be:	a1 1d       	adc	r26, r1
    19c0:	6a 0f       	add	r22, r26
    19c2:	71 1d       	adc	r23, r1
    19c4:	81 1d       	adc	r24, r1
    19c6:	91 1d       	adc	r25, r1
    19c8:	a1 1d       	adc	r26, r1
    19ca:	20 d0       	rcall	.+64     	; 0x1a0c <__ultoa_invert+0x84>
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <__ultoa_invert+0x48>
    19ce:	68 94       	set
    19d0:	3f 91       	pop	r19
    19d2:	2a e0       	ldi	r18, 0x0A	; 10
    19d4:	26 9f       	mul	r18, r22
    19d6:	11 24       	eor	r1, r1
    19d8:	30 19       	sub	r19, r0
    19da:	30 5d       	subi	r19, 0xD0	; 208
    19dc:	31 93       	st	Z+, r19
    19de:	de f6       	brtc	.-74     	; 0x1996 <__ultoa_invert+0xe>
    19e0:	cf 01       	movw	r24, r30
    19e2:	08 95       	ret
    19e4:	46 2f       	mov	r20, r22
    19e6:	47 70       	andi	r20, 0x07	; 7
    19e8:	40 5d       	subi	r20, 0xD0	; 208
    19ea:	41 93       	st	Z+, r20
    19ec:	b3 e0       	ldi	r27, 0x03	; 3
    19ee:	0f d0       	rcall	.+30     	; 0x1a0e <__ultoa_invert+0x86>
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <__ultoa_invert+0x5c>
    19f2:	f6 cf       	rjmp	.-20     	; 0x19e0 <__ultoa_invert+0x58>
    19f4:	46 2f       	mov	r20, r22
    19f6:	4f 70       	andi	r20, 0x0F	; 15
    19f8:	40 5d       	subi	r20, 0xD0	; 208
    19fa:	4a 33       	cpi	r20, 0x3A	; 58
    19fc:	18 f0       	brcs	.+6      	; 0x1a04 <__ultoa_invert+0x7c>
    19fe:	49 5d       	subi	r20, 0xD9	; 217
    1a00:	31 fd       	sbrc	r19, 1
    1a02:	40 52       	subi	r20, 0x20	; 32
    1a04:	41 93       	st	Z+, r20
    1a06:	02 d0       	rcall	.+4      	; 0x1a0c <__ultoa_invert+0x84>
    1a08:	a9 f7       	brne	.-22     	; 0x19f4 <__ultoa_invert+0x6c>
    1a0a:	ea cf       	rjmp	.-44     	; 0x19e0 <__ultoa_invert+0x58>
    1a0c:	b4 e0       	ldi	r27, 0x04	; 4
    1a0e:	a6 95       	lsr	r26
    1a10:	97 95       	ror	r25
    1a12:	87 95       	ror	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0x86>
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	61 05       	cpc	r22, r1
    1a20:	71 05       	cpc	r23, r1
    1a22:	08 95       	ret
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
    1a28:	0a 2e       	mov	r0, r26
    1a2a:	06 94       	lsr	r0
    1a2c:	57 95       	ror	r21
    1a2e:	47 95       	ror	r20
    1a30:	37 95       	ror	r19
    1a32:	27 95       	ror	r18
    1a34:	ba 95       	dec	r27
    1a36:	c9 f7       	brne	.-14     	; 0x1a2a <__ultoa_invert+0xa2>
    1a38:	62 0f       	add	r22, r18
    1a3a:	73 1f       	adc	r23, r19
    1a3c:	84 1f       	adc	r24, r20
    1a3e:	95 1f       	adc	r25, r21
    1a40:	a0 1d       	adc	r26, r0
    1a42:	08 95       	ret

00001a44 <_exit>:
    1a44:	f8 94       	cli

00001a46 <__stop_program>:
    1a46:	ff cf       	rjmp	.-2      	; 0x1a46 <__stop_program>
