
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000015fc  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  008001e4  008001e4  00001774  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000441d  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a62  00000000  00000000  00005f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003355  00000000  00000000  0000796f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c4  00000000  00000000  0000acc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a867  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013ed  00000000  00000000  00015bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00016fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b3d  00000000  00000000  00017264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	9c c3       	rjmp	.+1848   	; 0x76e <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	a0 c5       	rjmp	.+2880   	; 0xb86 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec ef       	ldi	r30, 0xFC	; 252
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a4 3e       	cpi	r26, 0xE4	; 228
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a4 ee       	ldi	r26, 0xE4	; 228
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	af 36       	cpi	r26, 0x6F	; 111
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	38 d2       	rcall	.+1136   	; 0x540 <main>
      d0:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <_exit>

000000d4 <__bad_interrupt>:
      d4:	08 c3       	rjmp	.+1552   	; 0x6e6 <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		if (g_ADCCount < 10) g_ADCResult[g_ADCCount++] = ADC;
     122:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <g_ADCCount>
     126:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	b0 f4       	brcc	.+44     	; 0x15a <__vector_29+0x52>
     12e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <g_ADCCount>
     132:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 0a 02 	sts	0x020A, r19	; 0x80020a <g_ADCCount+0x1>
     140:	20 93 09 02 	sts	0x0209, r18	; 0x800209 <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	eb 50       	subi	r30, 0x0B	; 11
     154:	fe 4f       	sbci	r31, 0xFE	; 254
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
	    ADCSRA |= (1 << ADSC);
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <g_ADCCount>
     168:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <_timer+0x11>
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <C_Blinky>:
	_timer[2].state = READY;
	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	88 b1       	in	r24, 0x08	; 8
     192:	80 95       	com	r24
     194:	88 b9       	out	0x08, r24	; 8
     196:	08 95       	ret

00000198 <ADC_Task>:
     198:	8f 92       	push	r8
     19a:	9f 92       	push	r9
     19c:	af 92       	push	r10
     19e:	bf 92       	push	r11
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	40 e0       	ldi	r20, 0x00	; 0
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	ba 01       	movw	r22, r20
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	fc 01       	movw	r30, r24
     1b4:	ee 0f       	add	r30, r30
     1b6:	ff 1f       	adc	r31, r31
     1b8:	eb 50       	subi	r30, 0x0B	; 11
     1ba:	fe 4f       	sbci	r31, 0xFE	; 254
     1bc:	20 81       	ld	r18, Z
     1be:	31 81       	ldd	r19, Z+1	; 0x01
     1c0:	42 0f       	add	r20, r18
     1c2:	53 1f       	adc	r21, r19
     1c4:	61 1d       	adc	r22, r1
     1c6:	71 1d       	adc	r23, r1
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	91 05       	cpc	r25, r1
     1ce:	89 f7       	brne	.-30     	; 0x1b2 <ADC_Task+0x1a>
     1d0:	cb 01       	movw	r24, r22
     1d2:	ba 01       	movw	r22, r20
     1d4:	2a e0       	ldi	r18, 0x0A	; 10
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e0       	ldi	r20, 0x00	; 0
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	ef d5       	rcall	.+3038   	; 0xdbc <__udivmodsi4>
     1de:	69 01       	movw	r12, r18
     1e0:	7a 01       	movw	r14, r20
     1e2:	da 01       	movw	r26, r20
     1e4:	c9 01       	movw	r24, r18
     1e6:	0b 97       	sbiw	r24, 0x0b	; 11
     1e8:	a1 09       	sbc	r26, r1
     1ea:	b1 09       	sbc	r27, r1
     1ec:	89 37       	cpi	r24, 0x79	; 121
     1ee:	93 40       	sbci	r25, 0x03	; 3
     1f0:	a1 05       	cpc	r26, r1
     1f2:	b1 05       	cpc	r27, r1
     1f4:	90 f4       	brcc	.+36     	; 0x21a <ADC_Task+0x82>
     1f6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     1fa:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     1fe:	7a d1       	rcall	.+756    	; 0x4f4 <LL_GetRefl>
     200:	a0 e0       	ldi	r26, 0x00	; 0
     202:	b0 e0       	ldi	r27, 0x00	; 0
     204:	c8 16       	cp	r12, r24
     206:	d9 06       	cpc	r13, r25
     208:	ea 06       	cpc	r14, r26
     20a:	fb 06       	cpc	r15, r27
     20c:	30 f4       	brcc	.+12     	; 0x21a <ADC_Task+0x82>
     20e:	b6 01       	movw	r22, r12
     210:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     214:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     218:	78 d1       	rcall	.+752    	; 0x50a <LL_UpdateRefl>
     21a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <g_ADCCount+0x1>
     21e:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <g_ADCCount>
     222:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <_timer+0x11>
     226:	ea e7       	ldi	r30, 0x7A	; 122
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	80 64       	ori	r24, 0x40	; 64
     22e:	80 83       	st	Z, r24
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	bf 90       	pop	r11
     23a:	af 90       	pop	r10
     23c:	9f 90       	pop	r9
     23e:	8f 90       	pop	r8
     240:	08 95       	ret

00000242 <MAG_Task>:
     242:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <gMotorOn>
     246:	88 23       	and	r24, r24
     248:	49 f0       	breq	.+18     	; 0x25c <MAG_Task+0x1a>
     24a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <tick.2482>
     24e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <tick.2482+0x1>
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <tick.2482+0x1>
     258:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <tick.2482>
     25c:	64 99       	sbic	0x0c, 4	; 12
     25e:	1d c0       	rjmp	.+58     	; 0x29a <MAG_Task+0x58>
     260:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <count.2481>
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <count.2481>
     26a:	83 30       	cpi	r24, 0x03	; 3
     26c:	88 f1       	brcs	.+98     	; 0x2d0 <MAG_Task+0x8e>
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     274:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     278:	4e d1       	rcall	.+668    	; 0x516 <LL_UpdateMag>
     27a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     27e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     282:	fa d0       	rcall	.+500    	; 0x478 <LL_Next>
     284:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <STAGE1+0x1>
     288:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <STAGE1>
     28c:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <_timer+0x1a>
     290:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <tick.2482+0x1>
     294:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <tick.2482>
     298:	08 95       	ret
     29a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <tick.2482>
     29e:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <tick.2482+0x1>
     2a2:	06 97       	sbiw	r24, 0x06	; 6
     2a4:	a8 f0       	brcs	.+42     	; 0x2d0 <MAG_Task+0x8e>
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     2ac:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     2b0:	32 d1       	rcall	.+612    	; 0x516 <LL_UpdateMag>
     2b2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     2b6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     2ba:	de d0       	rcall	.+444    	; 0x478 <LL_Next>
     2bc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <STAGE1+0x1>
     2c0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <STAGE1>
     2c4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <_timer+0x1a>
     2c8:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <tick.2482+0x1>
     2cc:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <tick.2482>
     2d0:	08 95       	ret

000002d2 <EXIT_Task>:
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	18 d2       	rcall	.+1072   	; 0x708 <PWM>
     2d8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <HEAD>
     2dc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <HEAD+0x1>
     2e0:	e0 d0       	rcall	.+448    	; 0x4a2 <LL_Remove>
     2e2:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <HEAD+0x1>
     2e6:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <HEAD>
     2ea:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <_timer+0x23>
     2ee:	88 e5       	ldi	r24, 0x58	; 88
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	20 c3       	rjmp	.+1600   	; 0x934 <SYS_Pause>
     2f4:	08 95       	ret

000002f6 <BTN_Task>:
     2f6:	89 b1       	in	r24, 0x09	; 9
     2f8:	83 70       	andi	r24, 0x03	; 3
     2fa:	51 f1       	breq	.+84     	; 0x350 <BTN_Task+0x5a>
     2fc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <debounce.2494>
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <debounce.2494>
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	18 f1       	brcs	.+70     	; 0x350 <BTN_Task+0x5a>
     30a:	89 b1       	in	r24, 0x09	; 9
     30c:	83 70       	andi	r24, 0x03	; 3
     30e:	31 f4       	brne	.+12     	; 0x31c <BTN_Task+0x26>
     310:	81 e1       	ldi	r24, 0x11	; 17
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	45 d5       	rcall	.+2698   	; 0xda0 <UART_SendString>
     316:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <debounce.2494>
     31a:	08 95       	ret
     31c:	89 b1       	in	r24, 0x09	; 9
     31e:	83 70       	andi	r24, 0x03	; 3
     320:	81 30       	cpi	r24, 0x01	; 1
     322:	51 f4       	brne	.+20     	; 0x338 <BTN_Task+0x42>
     324:	89 e2       	ldi	r24, 0x29	; 41
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	3b d5       	rcall	.+2678   	; 0xda0 <UART_SendString>
     32a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <g_IdleStartTime+0x1>
     32e:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_IdleStartTime>
     332:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <debounce.2494>
     336:	08 95       	ret
     338:	89 b1       	in	r24, 0x09	; 9
     33a:	83 70       	andi	r24, 0x03	; 3
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	31 f4       	brne	.+12     	; 0x34c <BTN_Task+0x56>
     340:	8c e3       	ldi	r24, 0x3C	; 60
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	2d d5       	rcall	.+2650   	; 0xda0 <UART_SendString>
     346:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <debounce.2494>
     34a:	08 95       	ret
     34c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <debounce.2494>
     350:	08 95       	ret

00000352 <ADD_Task>:
     352:	8f e4       	ldi	r24, 0x4F	; 79
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	ee d2       	rcall	.+1500   	; 0x934 <SYS_Pause>
     358:	44 e0       	ldi	r20, 0x04	; 4
     35a:	68 ec       	ldi	r22, 0xC8	; 200
     35c:	80 e6       	ldi	r24, 0x60	; 96
     35e:	9a ee       	ldi	r25, 0xEA	; 234
     360:	67 d0       	rcall	.+206    	; 0x430 <LL_ItemInit>
     362:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <HEAD>
     366:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <HEAD+0x1>
     36a:	21 15       	cp	r18, r1
     36c:	31 05       	cpc	r19, r1
     36e:	49 f4       	brne	.+18     	; 0x382 <ADD_Task+0x30>
     370:	bc 01       	movw	r22, r24
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	84 d0       	rcall	.+264    	; 0x480 <LL_AddBack>
     378:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <HEAD+0x1>
     37c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <HEAD>
     380:	03 c0       	rjmp	.+6      	; 0x388 <ADD_Task+0x36>
     382:	bc 01       	movw	r22, r24
     384:	c9 01       	movw	r24, r18
     386:	7c d0       	rcall	.+248    	; 0x480 <LL_AddBack>
     388:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <STAGE1>
     38c:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <STAGE1+0x1>
     390:	23 2b       	or	r18, r19
     392:	21 f4       	brne	.+8      	; 0x39c <ADD_Task+0x4a>
     394:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <STAGE1+0x1>
     398:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <STAGE1>
     39c:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <TAIL+0x1>
     3a0:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <TAIL>
     3a4:	e8 e1       	ldi	r30, 0x18	; 24
     3a6:	f2 e0       	ldi	r31, 0x02	; 2
     3a8:	14 a6       	std	Z+44, r1	; 0x2c
     3aa:	82 e0       	ldi	r24, 0x02	; 2
     3ac:	82 8f       	std	Z+26, r24	; 0x1a
     3ae:	08 95       	ret

000003b0 <SERVER_Task>:
	 */
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 0;
	static uint8_t pin5state = 1;
	
	PORTC = 0xAA;
     3b0:	8a ea       	ldi	r24, 0xAA	; 170
     3b2:	88 b9       	out	0x08, r24	; 8
	
	if((PINE & 0x80) == 0) // E7
     3b4:	67 99       	sbic	0x0c, 7	; 12
     3b6:	09 c0       	rjmp	.+18     	; 0x3ca <SERVER_Task+0x1a>
	{
		if(pin7state)
     3b8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin7state.2507>
     3bc:	88 23       	and	r24, r24
     3be:	19 f0       	breq	.+6      	; 0x3c6 <SERVER_Task+0x16>
		{
			// Transition Detected O2 High -> Low : Reflect Exit
			_timer[4].state = READY;
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <_timer+0x2c>
		} 
		pin7state = 0;
     3c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin7state.2507>
	}
	
	if((PINE & 0x40) == 0) // E6
     3ca:	66 99       	sbic	0x0c, 6	; 12
     3cc:	0a c0       	rjmp	.+20     	; 0x3e2 <SERVER_Task+0x32>
	{
		if(pin6state)
     3ce:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     3d2:	88 23       	and	r24, r24
     3d4:	21 f0       	breq	.+8      	; 0x3de <SERVER_Task+0x2e>
		{
			// Transition Detected O1 High -> Low : New Item Enters
			ADCSRA &= (0 << ADEN);
     3d6:	ea e7       	ldi	r30, 0x7A	; 122
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	10 82       	st	Z, r1
		}
		pin6state = 0;
     3de:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <__data_end>
	}
	
	if((PINE & 0x20) == 0) // E5
     3e2:	65 99       	sbic	0x0c, 5	; 12
     3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <SERVER_Task+0x48>
	{
		if(pin5state)
     3e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2509>
     3ea:	88 23       	and	r24, r24
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <SERVER_Task+0x44>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <_timer+0x23>
		}
		pin5state = 0;
     3f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2509>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     3f8:	67 9b       	sbis	0x0c, 7	; 12
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		if(!pin7state)
		{
			// Transition Detected O2 Low -> High : Item Entering Reflective

		}
		pin7state = 1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin7state.2507>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     402:	66 9b       	sbis	0x0c, 6	; 12
     404:	0f c0       	rjmp	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if(!pin6state)
     406:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
     40a:	81 11       	cpse	r24, r1
     40c:	08 c0       	rjmp	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			// Transition Detected O1 Low -> High : Item Enters System
			ADCSRA |= (1 << ADEN);
     40e:	ea e7       	ldi	r30, 0x7A	; 122
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	80 68       	ori	r24, 0x80	; 128
     416:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     424:	65 9b       	sbis	0x0c, 5	; 12
     426:	03 c0       	rjmp	.+6      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		if(!pin5state)
		{
			// Transition Detected O3 Low -> High
		}
		pin5state = 1;			
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2509>
     42e:	08 95       	ret

00000430 <LL_ItemInit>:

void* LL_GetArg(list* ref)
{
	//
	return ((timerNode*)ref->node)->arg;
}
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	8c 01       	movw	r16, r24
     43a:	d6 2f       	mov	r29, r22
     43c:	c4 2f       	mov	r28, r20
     43e:	84 e0       	ldi	r24, 0x04	; 4
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	de d4       	rcall	.+2492   	; 0xe00 <malloc>
     444:	fc 01       	movw	r30, r24
     446:	11 83       	std	Z+1, r17	; 0x01
     448:	00 83       	st	Z, r16
     44a:	d2 83       	std	Z+2, r29	; 0x02
     44c:	c3 83       	std	Z+3, r28	; 0x03
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <LL_ItemListInit>:
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	ce d4       	rcall	.+2460   	; 0xe00 <malloc>
     464:	fc 01       	movw	r30, r24
     466:	d1 83       	std	Z+1, r29	; 0x01
     468:	c0 83       	st	Z, r28
     46a:	15 82       	std	Z+5, r1	; 0x05
     46c:	14 82       	std	Z+4, r1	; 0x04
     46e:	13 82       	std	Z+3, r1	; 0x03
     470:	12 82       	std	Z+2, r1	; 0x02
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <LL_Next>:
     478:	fc 01       	movw	r30, r24
     47a:	82 81       	ldd	r24, Z+2	; 0x02
     47c:	93 81       	ldd	r25, Z+3	; 0x03
     47e:	08 95       	ret

00000480 <LL_AddBack>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	ec 01       	movw	r28, r24
     486:	cb 01       	movw	r24, r22
     488:	01 c0       	rjmp	.+2      	; 0x48c <LL_AddBack+0xc>
     48a:	e9 01       	movw	r28, r18
     48c:	2a 81       	ldd	r18, Y+2	; 0x02
     48e:	3b 81       	ldd	r19, Y+3	; 0x03
     490:	21 15       	cp	r18, r1
     492:	31 05       	cpc	r19, r1
     494:	d1 f7       	brne	.-12     	; 0x48a <LL_AddBack+0xa>
     496:	e0 df       	rcall	.-64     	; 0x458 <LL_ItemListInit>
     498:	9b 83       	std	Y+3, r25	; 0x03
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <LL_Remove>:
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
     4b0:	0a 81       	ldd	r16, Y+2	; 0x02
     4b2:	1b 81       	ldd	r17, Y+3	; 0x03
     4b4:	ec 80       	ldd	r14, Y+4	; 0x04
     4b6:	fd 80       	ldd	r15, Y+5	; 0x05
     4b8:	88 81       	ld	r24, Y
     4ba:	99 81       	ldd	r25, Y+1	; 0x01
     4bc:	39 d5       	rcall	.+2674   	; 0xf30 <free>
     4be:	ce 01       	movw	r24, r28
     4c0:	37 d5       	rcall	.+2670   	; 0xf30 <free>
     4c2:	01 15       	cp	r16, r1
     4c4:	11 05       	cpc	r17, r1
     4c6:	19 f0       	breq	.+6      	; 0x4ce <LL_Remove+0x2c>
     4c8:	f8 01       	movw	r30, r16
     4ca:	f5 82       	std	Z+5, r15	; 0x05
     4cc:	e4 82       	std	Z+4, r14	; 0x04
     4ce:	e1 14       	cp	r14, r1
     4d0:	f1 04       	cpc	r15, r1
     4d2:	19 f0       	breq	.+6      	; 0x4da <LL_Remove+0x38>
     4d4:	f7 01       	movw	r30, r14
     4d6:	13 83       	std	Z+3, r17	; 0x03
     4d8:	02 83       	std	Z+2, r16	; 0x02
     4da:	c8 01       	movw	r24, r16
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	08 95       	ret

000004ea <LL_GetClass>:
     4ea:	dc 01       	movw	r26, r24
     4ec:	ed 91       	ld	r30, X+
     4ee:	fc 91       	ld	r31, X
     4f0:	83 81       	ldd	r24, Z+3	; 0x03
     4f2:	08 95       	ret

000004f4 <LL_GetRefl>:
     4f4:	dc 01       	movw	r26, r24
     4f6:	ed 91       	ld	r30, X+
     4f8:	fc 91       	ld	r31, X
     4fa:	80 81       	ld	r24, Z
     4fc:	91 81       	ldd	r25, Z+1	; 0x01
     4fe:	08 95       	ret

00000500 <LL_GetMag>:
     500:	dc 01       	movw	r26, r24
     502:	ed 91       	ld	r30, X+
     504:	fc 91       	ld	r31, X
     506:	82 81       	ldd	r24, Z+2	; 0x02
     508:	08 95       	ret

0000050a <LL_UpdateRefl>:

void LL_UpdateRefl(list* ref, uint16_t newRefl)
{
	//
	((itemNode*)ref->node)->reflect = newRefl;
     50a:	dc 01       	movw	r26, r24
     50c:	ed 91       	ld	r30, X+
     50e:	fc 91       	ld	r31, X
     510:	71 83       	std	Z+1, r23	; 0x01
     512:	60 83       	st	Z, r22
     514:	08 95       	ret

00000516 <LL_UpdateMag>:
	return;
}
void LL_UpdateMag(list* ref, uint8_t newMag)
{
	//
	((itemNode*)ref->node)->magnet = newMag;
     516:	dc 01       	movw	r26, r24
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	62 83       	std	Z+2, r22	; 0x02
     51e:	08 95       	ret

00000520 <LL_UpdateClass>:
	return;
}
void LL_UpdateClass(list* ref, classification newClass)
{
	//
	((itemNode*)ref->node)->class = newClass;
     520:	dc 01       	movw	r26, r24
     522:	ed 91       	ld	r30, X+
     524:	fc 91       	ld	r31, X
     526:	63 83       	std	Z+3, r22	; 0x03
     528:	08 95       	ret

0000052a <GPIO_Init>:
#include "sys.h"


int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     52e:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     530:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     532:	80 ef       	ldi	r24, 0xF0	; 240
     534:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     536:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     538:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << 5));

    return 0;
}
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret

00000540 <main>:


//volatile uint16_t gTimerTick = 0;

int main(void)
{	
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	64 97       	sbiw	r28, 0x14	; 20
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	#include "TIMERTEST.h"
	TIMERTEST();
	return 0;
#endif
	
	SYS_Init();
     554:	b7 d1       	rcall	.+878    	; 0x8c4 <SYS_Init>

	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     556:	89 b1       	in	r24, 0x09	; 9
     558:	83 70       	andi	r24, 0x03	; 3
     55a:	e9 f7       	brne	.-6      	; 0x556 <main+0x16>
		{
			UART_SendString("Starting System!\r\n");
     55c:	82 e6       	ldi	r24, 0x62	; 98
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	1f d4       	rcall	.+2110   	; 0xda0 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     562:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	48 ed       	ldi	r20, 0xD8	; 216
     56a:	51 e0       	ldi	r21, 0x01	; 1
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	9c d3       	rcall	.+1848   	; 0xcae <TIMER_Create>
		_timer[0].state = READY;
     576:	08 e1       	ldi	r16, 0x18	; 24
     578:	12 e0       	ldi	r17, 0x02	; 2
     57a:	68 94       	set
     57c:	ff 24       	eor	r15, r15
     57e:	f1 f8       	bld	r15, 1
     580:	f8 01       	movw	r30, r16
     582:	f0 86       	std	Z+8, r15	; 0x08
	
		TIMER_Create(3, 1, ADC_Task, NULL);		// ADC Handler
     584:	20 e0       	ldi	r18, 0x00	; 0
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	4c ec       	ldi	r20, 0xCC	; 204
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	8c d3       	rcall	.+1816   	; 0xcae <TIMER_Create>
		_timer[1].state = BLOCKED;
     596:	f8 01       	movw	r30, r16
     598:	11 8a       	std	Z+17, r1	; 0x11
	
		TIMER_Create(5, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	41 e2       	ldi	r20, 0x21	; 33
     5a0:	51 e0       	ldi	r21, 0x01	; 1
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	81 d3       	rcall	.+1794   	; 0xcae <TIMER_Create>
		_timer[2].state = BLOCKED;
     5ac:	f8 01       	movw	r30, r16
     5ae:	12 8e       	std	Z+26, r1	; 0x1a
	
		TIMER_Create(2, 1, EXIT_Task, NULL);		// Item Exit Handling
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	49 e6       	ldi	r20, 0x69	; 105
     5b6:	51 e0       	ldi	r21, 0x01	; 1
     5b8:	61 e0       	ldi	r22, 0x01	; 1
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	76 d3       	rcall	.+1772   	; 0xcae <TIMER_Create>
		_timer[3].state = BLOCKED;
     5c2:	f8 01       	movw	r30, r16
     5c4:	13 a2       	std	Z+35, r1	; 0x23
	
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	49 ea       	ldi	r20, 0xA9	; 169
     5cc:	51 e0       	ldi	r21, 0x01	; 1
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	6b d3       	rcall	.+1750   	; 0xcae <TIMER_Create>
		_timer[4].state = BLOCKED;
     5d8:	f8 01       	movw	r30, r16
     5da:	14 a6       	std	Z+44, r1	; 0x2c
	
		TIMER_Create(250, 1, BTN_Task, NULL);		// Button Handling
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	4b e7       	ldi	r20, 0x7B	; 123
     5e2:	51 e0       	ldi	r21, 0x01	; 1
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	8a ef       	ldi	r24, 0xFA	; 250
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	60 d3       	rcall	.+1728   	; 0xcae <TIMER_Create>
		_timer[5].state = READY;
     5ee:	f8 01       	movw	r30, r16
     5f0:	f5 aa       	std	Z+53, r15	; 0x35
	
		TIMER_Create(1000, 1, C_Blinky, NULL);	// Event Handling
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	48 ec       	ldi	r20, 0xC8	; 200
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	88 ee       	ldi	r24, 0xE8	; 232
     600:	93 e0       	ldi	r25, 0x03	; 3
		_timer[6].state = READY;
     602:	55 d3       	rcall	.+1706   	; 0xcae <TIMER_Create>
     604:	f8 01       	movw	r30, r16
		
		UART_SendString("System Ready...\r\n");
     606:	f6 ae       	std	Z+62, r15	; 0x3e
     608:	85 e7       	ldi	r24, 0x75	; 117
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	c9 d3       	rcall	.+1938   	; 0xda0 <UART_SendString>
		PWM(0x80);
     60e:	80 e8       	ldi	r24, 0x80	; 128
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	7a d0       	rcall	.+244    	; 0x708 <PWM>
     614:	78 94       	sei
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     616:	0f 2e       	mov	r0, r31
		
		PORTC = 0;
		
		if (g_IdleStartTime == 0)
		{
			g_IdleStartTime = TCNT1;
     618:	f4 e8       	ldi	r31, 0x84	; 132
     61a:	8f 2e       	mov	r8, r31
     61c:	91 2c       	mov	r9, r1
     61e:	f0 2d       	mov	r31, r0
     620:	0f 2e       	mov	r0, r31
			char str[20];
			sprintf(str, "Processor Use = %u\r\n", (g_IdleStartTime - g_SchedulerStartTime));
     622:	f7 e8       	ldi	r31, 0x87	; 135
     624:	af 2e       	mov	r10, r31
     626:	f1 e0       	ldi	r31, 0x01	; 1
     628:	bf 2e       	mov	r11, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	ce 01       	movw	r24, r28
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	6c 01       	movw	r12, r24
     632:	18 b8       	out	0x08, r1	; 8
	};
	// Put IDLE operations in infinite loop
	while (1)
	{
		
		PORTC = 0;
     634:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_IdleStartTime>
		
		if (g_IdleStartTime == 0)
     638:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <g_IdleStartTime+0x1>
     63c:	89 2b       	or	r24, r25
     63e:	01 f5       	brne	.+64     	; 0x680 <main+0x140>
     640:	f4 01       	movw	r30, r8
		{
			g_IdleStartTime = TCNT1;
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <g_IdleStartTime+0x1>
     64a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_IdleStartTime>
     64e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_IdleStartTime>
			char str[20];
			sprintf(str, "Processor Use = %u\r\n", (g_IdleStartTime - g_SchedulerStartTime));
     652:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <g_IdleStartTime+0x1>
     656:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <g_SchedulerStartTime>
     65a:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <g_SchedulerStartTime+0x1>
     65e:	82 1b       	sub	r24, r18
     660:	93 0b       	sbc	r25, r19
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	bf 92       	push	r11
     668:	af 92       	push	r10
     66a:	df 92       	push	r13
     66c:	cf 92       	push	r12
     66e:	e9 d4       	rcall	.+2514   	; 0x1042 <sprintf>
			UART_SendString(str);
     670:	c6 01       	movw	r24, r12
     672:	96 d3       	rcall	.+1836   	; 0xda0 <UART_SendString>
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
		}
		
		list* temp = HEAD;
     680:	00 91 ef 01 	lds	r16, 0x01EF	; 0x8001ef <HEAD>
     684:	10 91 f0 01 	lds	r17, 0x01F0	; 0x8001f0 <HEAD+0x1>
		while(temp){
     688:	01 15       	cp	r16, r1
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED))
     68a:	11 05       	cpc	r17, r1
     68c:	91 f2       	breq	.-92     	; 0x632 <main+0xf2>
     68e:	01 15       	cp	r16, r1
     690:	11 05       	cpc	r17, r1
     692:	19 f1       	breq	.+70     	; 0x6da <main+0x19a>
     694:	c8 01       	movw	r24, r16
     696:	29 df       	rcall	.-430    	; 0x4ea <LL_GetClass>
			{
				//classify temp
				uint16_t reflVal = LL_GetRefl(temp);
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	f9 f4       	brne	.+62     	; 0x6da <main+0x19a>
     69c:	c8 01       	movw	r24, r16
				uint8_t magVal = LL_GetMag(temp);
     69e:	2a df       	rcall	.-428    	; 0x4f4 <LL_GetRefl>
     6a0:	7c 01       	movw	r14, r24
     6a2:	c8 01       	movw	r24, r16
				
				if(magVal)
     6a4:	2d df       	rcall	.-422    	; 0x500 <LL_GetMag>
     6a6:	88 23       	and	r24, r24
				{
					if(reflVal < 150)
     6a8:	61 f0       	breq	.+24     	; 0x6c2 <main+0x182>
     6aa:	f6 e9       	ldi	r31, 0x96	; 150
     6ac:	ef 16       	cp	r14, r31
					{
						LL_UpdateClass(temp, ALUMINUM);
     6ae:	f1 04       	cpc	r15, r1
     6b0:	20 f4       	brcc	.+8      	; 0x6ba <main+0x17a>
     6b2:	62 e0       	ldi	r22, 0x02	; 2
     6b4:	c8 01       	movw	r24, r16
					}
					else
					{
						LL_UpdateClass(temp, STEEL);
     6b6:	34 df       	rcall	.-408    	; 0x520 <LL_UpdateClass>
     6b8:	10 c0       	rjmp	.+32     	; 0x6da <main+0x19a>
     6ba:	63 e0       	ldi	r22, 0x03	; 3
     6bc:	c8 01       	movw	r24, r16
					}
				}
				else if(reflVal < 800)
     6be:	30 df       	rcall	.-416    	; 0x520 <LL_UpdateClass>
     6c0:	0c c0       	rjmp	.+24     	; 0x6da <main+0x19a>
     6c2:	80 e2       	ldi	r24, 0x20	; 32
     6c4:	e8 16       	cp	r14, r24
     6c6:	83 e0       	ldi	r24, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     6c8:	f8 06       	cpc	r15, r24
     6ca:	20 f4       	brcc	.+8      	; 0x6d4 <main+0x194>
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	c8 01       	movw	r24, r16
     6d0:	27 df       	rcall	.-434    	; 0x520 <LL_UpdateClass>
				}
				else
				{
					LL_UpdateClass(temp, WHITE);
     6d2:	03 c0       	rjmp	.+6      	; 0x6da <main+0x19a>
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	c8 01       	movw	r24, r16
     6d8:	23 df       	rcall	.-442    	; 0x520 <LL_UpdateClass>
				}
			}
			temp = LL_Next(temp);
     6da:	c8 01       	movw	r24, r16
     6dc:	cd de       	rcall	.-614    	; 0x478 <LL_Next>
     6de:	8c 01       	movw	r16, r24
     6e0:	89 2b       	or	r24, r25
			sprintf(str, "Processor Use = %u\r\n", (g_IdleStartTime - g_SchedulerStartTime));
			UART_SendString(str);
		}
		
		list* temp = HEAD;
		while(temp){
     6e2:	a9 f6       	brne	.-86     	; 0x68e <main+0x14e>
     6e4:	a6 cf       	rjmp	.-180    	; 0x632 <main+0xf2>

000006e6 <__vector_default>:
     6e6:	1f 92       	push	r1
	
	return 0;
}

ISR(BADISR_vect)
{
     6e8:	0f 92       	push	r0
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	0f 92       	push	r0
     6ee:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xF0;
     6f0:	80 ef       	ldi	r24, 0xF0	; 240
     6f2:	88 b9       	out	0x08, r24	; 8
     6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <__vector_default+0xc>

000006f6 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     6f6:	84 b5       	in	r24, 0x24	; 36
     6f8:	83 68       	ori	r24, 0x83	; 131
     6fa:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     6fc:	85 b5       	in	r24, 0x25	; 37
     6fe:	83 60       	ori	r24, 0x03	; 3
     700:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     702:	80 e8       	ldi	r24, 0x80	; 128
     704:	87 bd       	out	0x27, r24	; 39
     706:	08 95       	ret

00000708 <PWM>:
}

void PWM(const int dutyCycle)
{
    OCR0A = dutyCycle;
     708:	87 bd       	out	0x27, r24	; 39
	if (dutyCycle) 
     70a:	89 2b       	or	r24, r25
     70c:	31 f0       	breq	.+12     	; 0x71a <PWM+0x12>
	{
		gMotorOn = 1;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <gMotorOn>
		PORTB = ~0x0E;
     714:	81 ef       	ldi	r24, 0xF1	; 241
     716:	85 b9       	out	0x05, r24	; 5
     718:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     71a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <gMotorOn>
		PORTB = ~0x0F;
     71e:	80 ef       	ldi	r24, 0xF0	; 240
     720:	85 b9       	out	0x05, r24	; 5
     722:	08 95       	ret

00000724 <STEPPER_Init>:
	stepper.target = target;
	stepper.next = next;
	STEPPER_Rotate();
	OCR2A = 0x07 * stepper._delay;
	sei();
}
     724:	e2 e6       	ldi	r30, 0x62	; 98
     726:	f2 e0       	ldi	r31, 0x02	; 2
     728:	10 82       	st	Z, r1
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	81 83       	std	Z+1, r24	; 0x01
     72e:	12 82       	std	Z+2, r1	; 0x02
     730:	13 82       	std	Z+3, r1	; 0x03
     732:	88 ec       	ldi	r24, 0xC8	; 200
     734:	84 83       	std	Z+4, r24	; 0x04
     736:	15 82       	std	Z+5, r1	; 0x05
     738:	16 82       	std	Z+6, r1	; 0x06
     73a:	84 e1       	ldi	r24, 0x14	; 20
     73c:	87 83       	std	Z+7, r24	; 0x07
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	82 b9       	out	0x02, r24	; 2
     742:	18 b8       	out	0x08, r1	; 8
     744:	f8 94       	cli
     746:	80 e9       	ldi	r24, 0x90	; 144
     748:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     74c:	e0 eb       	ldi	r30, 0xB0	; 176
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	82 60       	ori	r24, 0x02	; 2
     754:	80 83       	st	Z, r24
     756:	e0 e7       	ldi	r30, 0x70	; 112
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	82 60       	ori	r24, 0x02	; 2
     75e:	80 83       	st	Z, r24
     760:	e1 eb       	ldi	r30, 0xB1	; 177
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	87 60       	ori	r24, 0x07	; 7
     768:	80 83       	st	Z, r24
     76a:	78 94       	sei
     76c:	08 95       	ret

0000076e <__vector_13>:

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	0b b6       	in	r0, 0x3b	; 59
     77a:	0f 92       	push	r0
     77c:	2f 93       	push	r18
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <__vector_13+0x22>
     790:	00 d0       	rcall	.+0      	; 0x792 <__vector_13+0x24>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0x0F;
     796:	8f e0       	ldi	r24, 0x0F	; 15
     798:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     79a:	86 e3       	ldi	r24, 0x36	; 54
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	a0 e0       	ldi	r26, 0x00	; 0
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	9e e2       	ldi	r25, 0x2E	; 46
     7a4:	ad e2       	ldi	r26, 0x2D	; 45
     7a6:	b5 e3       	ldi	r27, 0x35	; 53
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	9a 83       	std	Y+2, r25	; 0x02
     7ac:	ab 83       	std	Y+3, r26	; 0x03
     7ae:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
     7b0:	e2 e6       	ldi	r30, 0x62	; 98
     7b2:	f2 e0       	ldi	r31, 0x02	; 2
     7b4:	95 81       	ldd	r25, Z+5	; 0x05
     7b6:	84 81       	ldd	r24, Z+4	; 0x04
     7b8:	98 17       	cp	r25, r24
     7ba:	08 f0       	brcs	.+2      	; 0x7be <__vector_13+0x50>
     7bc:	51 c0       	rjmp	.+162    	; 0x860 <__vector_13+0xf2>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     7be:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <stepper+0x1>
     7c2:	84 30       	cpi	r24, 0x04	; 4
     7c4:	51 f4       	brne	.+20     	; 0x7da <__vector_13+0x6c>
     7c6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <stepper>
     7ca:	e1 e0       	ldi	r30, 0x01	; 1
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	ec 0f       	add	r30, r28
     7d0:	fd 1f       	adc	r31, r29
     7d2:	e8 0f       	add	r30, r24
     7d4:	f1 1d       	adc	r31, r1
     7d6:	80 81       	ld	r24, Z
     7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <__vector_13+0x86>
     7da:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <stepper>
     7de:	e3 e0       	ldi	r30, 0x03	; 3
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	e8 1b       	sub	r30, r24
     7e4:	f1 09       	sbc	r31, r1
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	8c 0f       	add	r24, r28
     7ec:	9d 1f       	adc	r25, r29
     7ee:	e8 0f       	add	r30, r24
     7f0:	f9 1f       	adc	r31, r25
     7f2:	80 81       	ld	r24, Z
     7f4:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     7f6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <stepper>
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	11 f0       	breq	.+4      	; 0x802 <__vector_13+0x94>
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	01 c0       	rjmp	.+2      	; 0x804 <__vector_13+0x96>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e2 e6       	ldi	r30, 0x62	; 98
     806:	f2 e0       	ldi	r31, 0x02	; 2
     808:	80 83       	st	Z, r24

		stepper._currentStep++;
     80a:	85 81       	ldd	r24, Z+5	; 0x05
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	85 83       	std	Z+5, r24	; 0x05

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
     810:	86 30       	cpi	r24, 0x06	; 6
     812:	70 f0       	brcs	.+28     	; 0x830 <__vector_13+0xc2>
     814:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <stepper+0x7>
     818:	87 30       	cpi	r24, 0x07	; 7
     81a:	50 f0       	brcs	.+20     	; 0x830 <__vector_13+0xc2>
			stepper._delay--;
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     822:	98 2f       	mov	r25, r24
     824:	99 0f       	add	r25, r25
     826:	99 0f       	add	r25, r25
     828:	99 0f       	add	r25, r25
     82a:	98 1b       	sub	r25, r24
     82c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
     830:	e2 e6       	ldi	r30, 0x62	; 98
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	84 81       	ldd	r24, Z+4	; 0x04
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	25 81       	ldd	r18, Z+5	; 0x05
     83a:	82 1b       	sub	r24, r18
     83c:	91 09       	sbc	r25, r1
     83e:	06 97       	sbiw	r24, 0x06	; 6
     840:	6c f5       	brge	.+90     	; 0x89c <__vector_13+0x12e>
     842:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <stepper+0x7>
     846:	83 31       	cpi	r24, 0x13	; 19
     848:	48 f5       	brcc	.+82     	; 0x89c <__vector_13+0x12e>
			stepper._delay++;
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     850:	98 2f       	mov	r25, r24
     852:	99 0f       	add	r25, r25
     854:	99 0f       	add	r25, r25
     856:	99 0f       	add	r25, r25
     858:	98 1b       	sub	r25, r24
     85a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     85e:	1e c0       	rjmp	.+60     	; 0x89c <__vector_13+0x12e>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
     860:	98 13       	cpse	r25, r24
     862:	1c c0       	rjmp	.+56     	; 0x89c <__vector_13+0x12e>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     864:	e2 e6       	ldi	r30, 0x62	; 98
     866:	f2 e0       	ldi	r31, 0x02	; 2
     868:	82 81       	ldd	r24, Z+2	; 0x02
     86a:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
     86c:	80 85       	ldd	r24, Z+8	; 0x08
     86e:	88 23       	and	r24, r24
     870:	19 f0       	breq	.+6      	; 0x878 <__vector_13+0x10a>
     872:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <stepper+0x7>
     876:	01 c0       	rjmp	.+2      	; 0x87a <__vector_13+0x10c>
     878:	94 e1       	ldi	r25, 0x14	; 20
     87a:	e2 e6       	ldi	r30, 0x62	; 98
     87c:	f2 e0       	ldi	r31, 0x02	; 2
     87e:	97 83       	std	Z+7, r25	; 0x07
		OCR2A = 0x07 * stepper._delay;
     880:	89 2f       	mov	r24, r25
     882:	88 0f       	add	r24, r24
     884:	88 0f       	add	r24, r24
     886:	88 0f       	add	r24, r24
     888:	89 1b       	sub	r24, r25
     88a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     88e:	80 85       	ldd	r24, Z+8	; 0x08
     890:	88 23       	and	r24, r24
     892:	11 f0       	breq	.+4      	; 0x898 <__vector_13+0x12a>
     894:	82 b1       	in	r24, 0x02	; 2
     896:	01 c0       	rjmp	.+2      	; 0x89a <__vector_13+0x12c>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	82 b9       	out	0x02, r24	; 2
	}
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0b be       	out	0x3b, r0	; 59
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <SYS_Init>:

void SYS_Init()
{
	// Initialize system
	
	cli();
     8c4:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
     8c6:	e1 e6       	ldi	r30, 0x61	; 97
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 e8       	ldi	r24, 0x80	; 128
     8cc:	80 83       	st	Z, r24
	CLKPR = 0;
     8ce:	10 82       	st	Z, r1
	
	UART_Init();
     8d0:	4f d2       	rcall	.+1182   	; 0xd70 <UART_Init>
	GPIO_Init();
     8d2:	2b de       	rcall	.-938    	; 0x52a <GPIO_Init>
	TIMER_Init();
     8d4:	d0 d1       	rcall	.+928    	; 0xc76 <TIMER_Init>
	PWM_Init();
     8d6:	0f df       	rcall	.-482    	; 0x6f6 <PWM_Init>
     8d8:	fe db       	rcall	.-2052   	; 0xd6 <ADC_Init>
	ADC_Init();
     8da:	24 df       	rcall	.-440    	; 0x724 <STEPPER_Init>
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
	STEPPER_Init();
     8de:	9f ef       	ldi	r25, 0xFF	; 255
     8e0:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <stepper_handle+0x1>
	
	stepper_handle = -1;
     8e4:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <stepper_handle>
     8e8:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <timer_handle+0x1>
     8ec:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <timer_handle>
	timer_handle = -1;
     8f0:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <delay_flag+0x1>
     8f4:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <delay_flag>
	delay_flag = -1;
     8f8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <g_ADCCount+0x1>
     8fc:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <g_ADCCount>
	
	g_ADCCount = 0;
     900:	84 e1       	ldi	r24, 0x14	; 20
     902:	e5 ef       	ldi	r30, 0xF5	; 245
     904:	f1 e0       	ldi	r31, 0x01	; 1
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     906:	df 01       	movw	r26, r30
     908:	1d 92       	st	X+, r1
     90a:	8a 95       	dec	r24
     90c:	e9 f7       	brne	.-6      	; 0x908 <SYS_Init+0x44>
     90e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <g_ADCFlag>
     912:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <HEAD+0x1>
	g_ADCFlag = 0;
     916:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <HEAD>
	
	HEAD = NULL;
     91a:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <TAIL+0x1>
     91e:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <TAIL>
	TAIL = NULL;
     922:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <STAGE1+0x1>
     926:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <STAGE1>
	STAGE1 = NULL;
     92a:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <STAGE2+0x1>
     92e:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <STAGE2>
	STAGE2 = NULL;
     932:	08 95       	ret

00000934 <SYS_Pause>:
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
	//sei();

}

void SYS_Pause(char str[20])
{
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	ce 56       	subi	r28, 0x6E	; 110
     94e:	d1 09       	sbc	r29, r1
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	18 2f       	mov	r17, r24
     95c:	09 2f       	mov	r16, r25
	cli();
     95e:	f8 94       	cli
	PWM(0);
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	d1 de       	rcall	.-606    	; 0x708 <PWM>
	char buffer[100];
	if(HEAD) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(HEAD), LL_GetMag(HEAD), LL_GetClass(HEAD));
     966:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <HEAD>
     96a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <HEAD+0x1>
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	61 f1       	breq	.+88     	; 0x9ca <SYS_Pause+0x96>
     972:	bb dd       	rcall	.-1162   	; 0x4ea <LL_GetClass>
     974:	e8 2e       	mov	r14, r24
     976:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <HEAD>
     97a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <HEAD+0x1>
     97e:	c0 dd       	rcall	.-1152   	; 0x500 <LL_GetMag>
     980:	f8 2e       	mov	r15, r24
     982:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <HEAD>
     986:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <HEAD+0x1>
     98a:	b4 dd       	rcall	.-1176   	; 0x4f4 <LL_GetRefl>
     98c:	1f 92       	push	r1
     98e:	ef 92       	push	r14
     990:	1f 92       	push	r1
     992:	ff 92       	push	r15
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	8c e9       	ldi	r24, 0x9C	; 156
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	4a d3       	rcall	.+1684   	; 0x1042 <sprintf>
	if(HEAD) UART_SendString(buffer);
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <HEAD>
     9bc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <HEAD+0x1>
     9c0:	89 2b       	or	r24, r25
     9c2:	19 f0       	breq	.+6      	; 0x9ca <SYS_Pause+0x96>
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	eb d1       	rcall	.+982    	; 0xda0 <UART_SendString>
	if(STAGE1) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE1), LL_GetMag(STAGE1), LL_GetClass(STAGE1));
     9ca:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     9ce:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	61 f1       	breq	.+88     	; 0xa2e <SYS_Pause+0xfa>
     9d6:	89 dd       	rcall	.-1262   	; 0x4ea <LL_GetClass>
     9d8:	e8 2e       	mov	r14, r24
     9da:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     9de:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     9e2:	8e dd       	rcall	.-1252   	; 0x500 <LL_GetMag>
     9e4:	f8 2e       	mov	r15, r24
     9e6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     9ea:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     9ee:	82 dd       	rcall	.-1276   	; 0x4f4 <LL_GetRefl>
     9f0:	1f 92       	push	r1
     9f2:	ef 92       	push	r14
     9f4:	1f 92       	push	r1
     9f6:	ff 92       	push	r15
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	8c e9       	ldi	r24, 0x9C	; 156
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	18 d3       	rcall	.+1584   	; 0x1042 <sprintf>
	if(STAGE1) UART_SendString(buffer);
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <STAGE1>
     a20:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <STAGE1+0x1>
     a24:	89 2b       	or	r24, r25
     a26:	19 f0       	breq	.+6      	; 0xa2e <SYS_Pause+0xfa>
     a28:	ce 01       	movw	r24, r28
     a2a:	01 96       	adiw	r24, 0x01	; 1
	if(STAGE2) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE2), LL_GetMag(STAGE2), LL_GetClass(STAGE2));
     a2c:	b9 d1       	rcall	.+882    	; 0xda0 <UART_SendString>
     a2e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     a32:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     a36:	00 97       	sbiw	r24, 0x00	; 0
     a38:	61 f1       	breq	.+88     	; 0xa92 <SYS_Pause+0x15e>
     a3a:	57 dd       	rcall	.-1362   	; 0x4ea <LL_GetClass>
     a3c:	e8 2e       	mov	r14, r24
     a3e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     a42:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     a46:	5c dd       	rcall	.-1352   	; 0x500 <LL_GetMag>
     a48:	f8 2e       	mov	r15, r24
     a4a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     a4e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     a52:	50 dd       	rcall	.-1376   	; 0x4f4 <LL_GetRefl>
     a54:	1f 92       	push	r1
     a56:	ef 92       	push	r14
     a58:	1f 92       	push	r1
     a5a:	ff 92       	push	r15
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	8c e9       	ldi	r24, 0x9C	; 156
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	e6 d2       	rcall	.+1484   	; 0x1042 <sprintf>
	if(STAGE2) UART_SendString(buffer);
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <STAGE2>
     a84:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <STAGE2+0x1>
     a88:	89 2b       	or	r24, r25
     a8a:	19 f0       	breq	.+6      	; 0xa92 <SYS_Pause+0x15e>
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
	if(TAIL) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(TAIL), LL_GetMag(TAIL), LL_GetClass(TAIL));
     a90:	87 d1       	rcall	.+782    	; 0xda0 <UART_SendString>
     a92:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <TAIL>
     a96:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <TAIL+0x1>
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	61 f1       	breq	.+88     	; 0xaf6 <SYS_Pause+0x1c2>
     a9e:	25 dd       	rcall	.-1462   	; 0x4ea <LL_GetClass>
     aa0:	e8 2e       	mov	r14, r24
     aa2:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <TAIL>
     aa6:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <TAIL+0x1>
     aaa:	2a dd       	rcall	.-1452   	; 0x500 <LL_GetMag>
     aac:	f8 2e       	mov	r15, r24
     aae:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <TAIL>
     ab2:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <TAIL+0x1>
     ab6:	1e dd       	rcall	.-1476   	; 0x4f4 <LL_GetRefl>
     ab8:	1f 92       	push	r1
     aba:	ef 92       	push	r14
     abc:	1f 92       	push	r1
     abe:	ff 92       	push	r15
     ac0:	9f 93       	push	r25
     ac2:	8f 93       	push	r24
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	8c e9       	ldi	r24, 0x9C	; 156
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	b4 d2       	rcall	.+1384   	; 0x1042 <sprintf>
	if(TAIL) UART_SendString(buffer);
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <TAIL>
     ae8:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <TAIL+0x1>
     aec:	89 2b       	or	r24, r25
     aee:	19 f0       	breq	.+6      	; 0xaf6 <SYS_Pause+0x1c2>
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	55 d1       	rcall	.+682    	; 0xda0 <UART_SendString>
     af6:	0f 2e       	mov	r0, r31
     af8:	f8 e1       	ldi	r31, 0x18	; 24
     afa:	cf 2e       	mov	r12, r31
     afc:	f2 e0       	ldi	r31, 0x02	; 2
     afe:	df 2e       	mov	r13, r31
     b00:	f0 2d       	mov	r31, r0
     b02:	00 e0       	ldi	r16, 0x00	; 0
	//sei();

}

void SYS_Pause(char str[20])
{
     b04:	10 e0       	ldi	r17, 0x00	; 0
	if(TAIL) UART_SendString(buffer);
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     b06:	0f 2e       	mov	r0, r31
     b08:	fe ec       	ldi	r31, 0xCE	; 206
     b0a:	af 2e       	mov	r10, r31
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	bf 2e       	mov	r11, r31
     b10:	f0 2d       	mov	r31, r0
     b12:	7e 01       	movw	r14, r28
     b14:	f5 e6       	ldi	r31, 0x65	; 101
     b16:	ef 0e       	add	r14, r31
     b18:	f1 1c       	adc	r15, r1
     b1a:	f6 01       	movw	r30, r12
     b1c:	80 85       	ldd	r24, Z+8	; 0x08
     b1e:	1f 92       	push	r1
     b20:	8f 93       	push	r24
     b22:	1f 93       	push	r17
     b24:	0f 93       	push	r16
     b26:	bf 92       	push	r11
     b28:	af 92       	push	r10
     b2a:	ff 92       	push	r15
     b2c:	ef 92       	push	r14
		UART_SendString(statebuff);
     b2e:	89 d2       	rcall	.+1298   	; 0x1042 <sprintf>
     b30:	c7 01       	movw	r24, r14
	if(STAGE2) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(STAGE2), LL_GetMag(STAGE2), LL_GetClass(STAGE2));
	if(STAGE2) UART_SendString(buffer);
	if(TAIL) sprintf(buffer, "%s: Item Refl: %u, Item Mag: %u, Item Class: %u\r\n", str, LL_GetRefl(TAIL), LL_GetMag(TAIL), LL_GetClass(TAIL));
	if(TAIL) UART_SendString(buffer);
	
	for(int i = 0; i < 7; i++)
     b32:	36 d1       	rcall	.+620    	; 0xda0 <UART_SendString>
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	f9 e0       	ldi	r31, 0x09	; 9
     b3a:	cf 0e       	add	r12, r31
     b3c:	d1 1c       	adc	r13, r1
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	07 30       	cpi	r16, 0x07	; 7
     b4a:	11 05       	cpc	r17, r1
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     b4c:	31 f7       	brne	.-52     	; 0xb1a <SYS_Pause+0x1e6>
     b4e:	89 b1       	in	r24, 0x09	; 9
     b50:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
     b52:	e9 f7       	brne	.-6      	; 0xb4e <SYS_Pause+0x21a>
     b54:	82 e6       	ldi	r24, 0x62	; 98
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	23 d1       	rcall	.+582    	; 0xda0 <UART_SendString>
			PWM(0x80);
     b5a:	80 e8       	ldi	r24, 0x80	; 128
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	d4 dd       	rcall	.-1112   	; 0x708 <PWM>
     b60:	78 94       	sei
			sei();
     b62:	c2 59       	subi	r28, 0x92	; 146
			break;
		}
	}
	return;
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	bf 90       	pop	r11
     b82:	af 90       	pop	r10
     b84:	08 95       	ret

00000b86 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     b86:	1f 92       	push	r1
     b88:	0f 92       	push	r0
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	0f 92       	push	r0
     b8e:	11 24       	eor	r1, r1
     b90:	0b b6       	in	r0, 0x3b	; 59
     b92:	0f 92       	push	r0
     b94:	ef 92       	push	r14
     b96:	ff 92       	push	r15
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
	PORTC = 0xF0;
     bb8:	80 ef       	ldi	r24, 0xF0	; 240
     bba:	88 b9       	out	0x08, r24	; 8
	// Scheduler timer
		// Overhead: 30 us
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     bbc:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <_timer_tick>
     bc0:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <_timer_tick+0x1>
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <_timer_tick+0x1>
     bca:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <_timer_tick>
	g_SchedulerStartTime = TCNT1;
     bce:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bd2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bd6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <g_SchedulerStartTime+0x1>
     bda:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <g_SchedulerStartTime>
     bde:	c8 e1       	ldi	r28, 0x18	; 24
     be0:	d2 e0       	ldi	r29, 0x02	; 2
     be2:	0f 2e       	mov	r0, r31
     be4:	f0 e6       	ldi	r31, 0x60	; 96
     be6:	ef 2e       	mov	r14, r31
     be8:	f2 e0       	ldi	r31, 0x02	; 2
     bea:	ff 2e       	mov	r15, r31
     bec:	f0 2d       	mov	r31, r0
     bee:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     bf0:	ec 81       	ldd	r30, Y+4	; 0x04
     bf2:	fd 81       	ldd	r31, Y+5	; 0x05
     bf4:	30 97       	sbiw	r30, 0x00	; 0
     bf6:	09 f1       	breq	.+66     	; 0xc3a <__vector_17+0xb4>
     bf8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <_timer_tick>
     bfc:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <_timer_tick+0x1>
     c00:	28 81       	ld	r18, Y
     c02:	39 81       	ldd	r19, Y+1	; 0x01
     c04:	28 17       	cp	r18, r24
     c06:	39 07       	cpc	r19, r25
     c08:	c1 f4       	brne	.+48     	; 0xc3a <__vector_17+0xb4>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     c0a:	88 85       	ldd	r24, Y+8	; 0x08
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	19 f4       	brne	.+6      	; 0xc16 <__vector_17+0x90>
     c10:	8e 81       	ldd	r24, Y+6	; 0x06
     c12:	9f 81       	ldd	r25, Y+7	; 0x07
     c14:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     c16:	d8 01       	movw	r26, r16
     c18:	12 96       	adiw	r26, 0x02	; 2
     c1a:	8d 91       	ld	r24, X+
     c1c:	9c 91       	ld	r25, X
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	41 f0       	breq	.+16     	; 0xc34 <__vector_17+0xae>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     c24:	2d 91       	ld	r18, X+
     c26:	3c 91       	ld	r19, X
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	8d 93       	st	X+, r24
     c30:	9c 93       	st	X, r25
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <__vector_17+0xb4>
				} else {
				/* If timer is not periodic, clear the callback to disable */
				_timer[i].callback = NULL;
     c34:	f8 01       	movw	r30, r16
     c36:	15 82       	std	Z+5, r1	; 0x05
     c38:	14 82       	std	Z+4, r1	; 0x04
     c3a:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     c3c:	ce 15       	cp	r28, r14
     c3e:	df 05       	cpc	r29, r15
     c40:	b1 f6       	brne	.-84     	; 0xbee <__vector_17+0x68>
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	
	PORTC = 0;
     c42:	18 b8       	out	0x08, r1	; 8
}
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	ff 90       	pop	r15
     c66:	ef 90       	pop	r14
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     c76:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c7a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0960;   // 12C0 == 600us, 960 = 300 us
     c7e:	80 e6       	ldi	r24, 0x60	; 96
     c80:	99 e0       	ldi	r25, 0x09	; 9
     c82:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     c8a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     c8e:	89 e0       	ldi	r24, 0x09	; 9
     c90:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     c9a:	88 e4       	ldi	r24, 0x48	; 72
     c9c:	e8 e1       	ldi	r30, 0x18	; 24
     c9e:	f2 e0       	ldi	r31, 0x02	; 2
     ca0:	df 01       	movw	r26, r30
     ca2:	1d 92       	st	X+, r1
     ca4:	8a 95       	dec	r24
     ca6:	e9 f7       	brne	.-6      	; 0xca2 <TIMER_Init+0x2c>

	return 0;
}
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	08 95       	ret

00000cae <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     cb8:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_timer+0x4>
     cbc:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_timer+0x5>
     cc0:	67 2b       	or	r22, r23
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <TIMER_Create+0x18>
     cc4:	49 c0       	rjmp	.+146    	; 0xd58 <TIMER_Create+0xaa>
     cc6:	e8 e1       	ldi	r30, 0x18	; 24
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     cca:	a1 e0       	ldi	r26, 0x01	; 1
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     cce:	c5 85       	ldd	r28, Z+13	; 0x0d
     cd0:	d6 85       	ldd	r29, Z+14	; 0x0e
     cd2:	cd 2b       	or	r28, r29
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <TIMER_Create+0x2a>
     cd6:	42 c0       	rjmp	.+132    	; 0xd5c <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     cd8:	11 96       	adiw	r26, 0x01	; 1
     cda:	39 96       	adiw	r30, 0x09	; 9
     cdc:	a8 30       	cpi	r26, 0x08	; 8
     cde:	b1 05       	cpc	r27, r1
     ce0:	b1 f7       	brne	.-20     	; 0xcce <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	3f c0       	rjmp	.+126    	; 0xd66 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     ce8:	fd 01       	movw	r30, r26
     cea:	ee 0f       	add	r30, r30
     cec:	ff 1f       	adc	r31, r31
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	ee 0f       	add	r30, r30
     cf4:	ff 1f       	adc	r31, r31
     cf6:	ea 0f       	add	r30, r26
     cf8:	fb 1f       	adc	r31, r27
     cfa:	e8 5e       	subi	r30, 0xE8	; 232
     cfc:	fd 4f       	sbci	r31, 0xFD	; 253
     cfe:	93 83       	std	Z+3, r25	; 0x03
     d00:	82 83       	std	Z+2, r24	; 0x02
     d02:	0d c0       	rjmp	.+26     	; 0xd1e <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     d04:	fd 01       	movw	r30, r26
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	ea 0f       	add	r30, r26
     d14:	fb 1f       	adc	r31, r27
     d16:	e8 5e       	subi	r30, 0xE8	; 232
     d18:	fd 4f       	sbci	r31, 0xFD	; 253
     d1a:	13 82       	std	Z+3, r1	; 0x03
     d1c:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     d1e:	fd 01       	movw	r30, r26
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	ea 0f       	add	r30, r26
     d2e:	fb 1f       	adc	r31, r27
     d30:	e8 5e       	subi	r30, 0xE8	; 232
     d32:	fd 4f       	sbci	r31, 0xFD	; 253
     d34:	55 83       	std	Z+5, r21	; 0x05
     d36:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     d38:	37 83       	std	Z+7, r19	; 0x07
     d3a:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     d3c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <_timer_tick>
     d40:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <_timer_tick+0x1>
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
			_timer[i].state = READY;
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d50:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     d52:	8a 2f       	mov	r24, r26
     d54:	9b 2f       	mov	r25, r27
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d5c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d5e:	f8 94       	cli
		{
			
			if (periodic != 0) 
     d60:	01 2b       	or	r16, r17
     d62:	11 f6       	brne	.-124    	; 0xce8 <TIMER_Create+0x3a>
     d64:	cf cf       	rjmp	.-98     	; 0xd04 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     d70:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     d74:	83 e3       	ldi	r24, 0x33	; 51
     d76:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     d7a:	e9 ec       	ldi	r30, 0xC9	; 201
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 61       	ori	r24, 0x18	; 24
     d82:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     d84:	ea ec       	ldi	r30, 0xCA	; 202
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	86 60       	ori	r24, 0x06	; 6
     d8c:	80 83       	st	Z, r24
     d8e:	08 95       	ret

00000d90 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     d90:	e8 ec       	ldi	r30, 0xC8	; 200
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	90 81       	ld	r25, Z
     d96:	95 ff       	sbrs	r25, 5
     d98:	fd cf       	rjmp	.-6      	; 0xd94 <UART_SendChar+0x4>
	UDR1 = c;
     d9a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     d9e:	08 95       	ret

00000da0 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     da6:	88 81       	ld	r24, Y
     da8:	88 23       	and	r24, r24
     daa:	29 f0       	breq	.+10     	; 0xdb6 <UART_SendString+0x16>
     dac:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
     dae:	f0 df       	rcall	.-32     	; 0xd90 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     db0:	89 91       	ld	r24, Y+
     db2:	81 11       	cpse	r24, r1
     db4:	fc cf       	rjmp	.-8      	; 0xdae <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	08 95       	ret

00000dbc <__udivmodsi4>:
     dbc:	a1 e2       	ldi	r26, 0x21	; 33
     dbe:	1a 2e       	mov	r1, r26
     dc0:	aa 1b       	sub	r26, r26
     dc2:	bb 1b       	sub	r27, r27
     dc4:	fd 01       	movw	r30, r26
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <__udivmodsi4_ep>

00000dc8 <__udivmodsi4_loop>:
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	ee 1f       	adc	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	a2 17       	cp	r26, r18
     dd2:	b3 07       	cpc	r27, r19
     dd4:	e4 07       	cpc	r30, r20
     dd6:	f5 07       	cpc	r31, r21
     dd8:	20 f0       	brcs	.+8      	; 0xde2 <__udivmodsi4_ep>
     dda:	a2 1b       	sub	r26, r18
     ddc:	b3 0b       	sbc	r27, r19
     dde:	e4 0b       	sbc	r30, r20
     de0:	f5 0b       	sbc	r31, r21

00000de2 <__udivmodsi4_ep>:
     de2:	66 1f       	adc	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	88 1f       	adc	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	1a 94       	dec	r1
     dec:	69 f7       	brne	.-38     	; 0xdc8 <__udivmodsi4_loop>
     dee:	60 95       	com	r22
     df0:	70 95       	com	r23
     df2:	80 95       	com	r24
     df4:	90 95       	com	r25
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	bd 01       	movw	r22, r26
     dfc:	cf 01       	movw	r24, r30
     dfe:	08 95       	ret

00000e00 <malloc>:
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	91 05       	cpc	r25, r1
     e0c:	10 f4       	brcc	.+4      	; 0xe12 <malloc+0x12>
     e0e:	82 e0       	ldi	r24, 0x02	; 2
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <__flp>
     e16:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <__flp+0x1>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	30 97       	sbiw	r30, 0x00	; 0
     e24:	19 f1       	breq	.+70     	; 0xe6c <malloc+0x6c>
     e26:	40 81       	ld	r20, Z
     e28:	51 81       	ldd	r21, Z+1	; 0x01
     e2a:	02 81       	ldd	r16, Z+2	; 0x02
     e2c:	13 81       	ldd	r17, Z+3	; 0x03
     e2e:	48 17       	cp	r20, r24
     e30:	59 07       	cpc	r21, r25
     e32:	c8 f0       	brcs	.+50     	; 0xe66 <malloc+0x66>
     e34:	84 17       	cp	r24, r20
     e36:	95 07       	cpc	r25, r21
     e38:	69 f4       	brne	.+26     	; 0xe54 <malloc+0x54>
     e3a:	10 97       	sbiw	r26, 0x00	; 0
     e3c:	31 f0       	breq	.+12     	; 0xe4a <malloc+0x4a>
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	0c 93       	st	X, r16
     e42:	12 97       	sbiw	r26, 0x02	; 2
     e44:	13 96       	adiw	r26, 0x03	; 3
     e46:	1c 93       	st	X, r17
     e48:	27 c0       	rjmp	.+78     	; 0xe98 <malloc+0x98>
     e4a:	00 93 6d 02 	sts	0x026D, r16	; 0x80026d <__flp>
     e4e:	10 93 6e 02 	sts	0x026E, r17	; 0x80026e <__flp+0x1>
     e52:	22 c0       	rjmp	.+68     	; 0xe98 <malloc+0x98>
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	19 f0       	breq	.+6      	; 0xe60 <malloc+0x60>
     e5a:	42 17       	cp	r20, r18
     e5c:	53 07       	cpc	r21, r19
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <malloc+0x66>
     e60:	9a 01       	movw	r18, r20
     e62:	bd 01       	movw	r22, r26
     e64:	ef 01       	movw	r28, r30
     e66:	df 01       	movw	r26, r30
     e68:	f8 01       	movw	r30, r16
     e6a:	db cf       	rjmp	.-74     	; 0xe22 <malloc+0x22>
     e6c:	21 15       	cp	r18, r1
     e6e:	31 05       	cpc	r19, r1
     e70:	f9 f0       	breq	.+62     	; 0xeb0 <malloc+0xb0>
     e72:	28 1b       	sub	r18, r24
     e74:	39 0b       	sbc	r19, r25
     e76:	24 30       	cpi	r18, 0x04	; 4
     e78:	31 05       	cpc	r19, r1
     e7a:	80 f4       	brcc	.+32     	; 0xe9c <malloc+0x9c>
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	9b 81       	ldd	r25, Y+3	; 0x03
     e80:	61 15       	cp	r22, r1
     e82:	71 05       	cpc	r23, r1
     e84:	21 f0       	breq	.+8      	; 0xe8e <malloc+0x8e>
     e86:	fb 01       	movw	r30, r22
     e88:	93 83       	std	Z+3, r25	; 0x03
     e8a:	82 83       	std	Z+2, r24	; 0x02
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <malloc+0x96>
     e8e:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <__flp+0x1>
     e92:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <__flp>
     e96:	fe 01       	movw	r30, r28
     e98:	32 96       	adiw	r30, 0x02	; 2
     e9a:	44 c0       	rjmp	.+136    	; 0xf24 <malloc+0x124>
     e9c:	fe 01       	movw	r30, r28
     e9e:	e2 0f       	add	r30, r18
     ea0:	f3 1f       	adc	r31, r19
     ea2:	81 93       	st	Z+, r24
     ea4:	91 93       	st	Z+, r25
     ea6:	22 50       	subi	r18, 0x02	; 2
     ea8:	31 09       	sbc	r19, r1
     eaa:	39 83       	std	Y+1, r19	; 0x01
     eac:	28 83       	st	Y, r18
     eae:	3a c0       	rjmp	.+116    	; 0xf24 <malloc+0x124>
     eb0:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <__brkval>
     eb4:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <__brkval+0x1>
     eb8:	23 2b       	or	r18, r19
     eba:	41 f4       	brne	.+16     	; 0xecc <malloc+0xcc>
     ebc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     ec0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     ec4:	30 93 6c 02 	sts	0x026C, r19	; 0x80026c <__brkval+0x1>
     ec8:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <__brkval>
     ecc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ed0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     ed4:	21 15       	cp	r18, r1
     ed6:	31 05       	cpc	r19, r1
     ed8:	41 f4       	brne	.+16     	; 0xeea <malloc+0xea>
     eda:	2d b7       	in	r18, 0x3d	; 61
     edc:	3e b7       	in	r19, 0x3e	; 62
     ede:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     ee2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     ee6:	24 1b       	sub	r18, r20
     ee8:	35 0b       	sbc	r19, r21
     eea:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <__brkval>
     eee:	f0 91 6c 02 	lds	r31, 0x026C	; 0x80026c <__brkval+0x1>
     ef2:	e2 17       	cp	r30, r18
     ef4:	f3 07       	cpc	r31, r19
     ef6:	a0 f4       	brcc	.+40     	; 0xf20 <malloc+0x120>
     ef8:	2e 1b       	sub	r18, r30
     efa:	3f 0b       	sbc	r19, r31
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	78 f0       	brcs	.+30     	; 0xf20 <malloc+0x120>
     f02:	ac 01       	movw	r20, r24
     f04:	4e 5f       	subi	r20, 0xFE	; 254
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	24 17       	cp	r18, r20
     f0a:	35 07       	cpc	r19, r21
     f0c:	48 f0       	brcs	.+18     	; 0xf20 <malloc+0x120>
     f0e:	4e 0f       	add	r20, r30
     f10:	5f 1f       	adc	r21, r31
     f12:	50 93 6c 02 	sts	0x026C, r21	; 0x80026c <__brkval+0x1>
     f16:	40 93 6b 02 	sts	0x026B, r20	; 0x80026b <__brkval>
     f1a:	81 93       	st	Z+, r24
     f1c:	91 93       	st	Z+, r25
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <malloc+0x124>
     f20:	e0 e0       	ldi	r30, 0x00	; 0
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	cf 01       	movw	r24, r30
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <free>:
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	09 f4       	brne	.+2      	; 0xf3a <free+0xa>
     f38:	81 c0       	rjmp	.+258    	; 0x103c <free+0x10c>
     f3a:	fc 01       	movw	r30, r24
     f3c:	32 97       	sbiw	r30, 0x02	; 2
     f3e:	13 82       	std	Z+3, r1	; 0x03
     f40:	12 82       	std	Z+2, r1	; 0x02
     f42:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <__flp>
     f46:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <__flp+0x1>
     f4a:	10 97       	sbiw	r26, 0x00	; 0
     f4c:	81 f4       	brne	.+32     	; 0xf6e <free+0x3e>
     f4e:	20 81       	ld	r18, Z
     f50:	31 81       	ldd	r19, Z+1	; 0x01
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <__brkval>
     f5a:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <__brkval+0x1>
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	51 f5       	brne	.+84     	; 0xfb8 <free+0x88>
     f64:	f0 93 6c 02 	sts	0x026C, r31	; 0x80026c <__brkval+0x1>
     f68:	e0 93 6b 02 	sts	0x026B, r30	; 0x80026b <__brkval>
     f6c:	67 c0       	rjmp	.+206    	; 0x103c <free+0x10c>
     f6e:	ed 01       	movw	r28, r26
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	ce 17       	cp	r28, r30
     f76:	df 07       	cpc	r29, r31
     f78:	40 f4       	brcc	.+16     	; 0xf8a <free+0x5a>
     f7a:	4a 81       	ldd	r20, Y+2	; 0x02
     f7c:	5b 81       	ldd	r21, Y+3	; 0x03
     f7e:	9e 01       	movw	r18, r28
     f80:	41 15       	cp	r20, r1
     f82:	51 05       	cpc	r21, r1
     f84:	f1 f0       	breq	.+60     	; 0xfc2 <free+0x92>
     f86:	ea 01       	movw	r28, r20
     f88:	f5 cf       	rjmp	.-22     	; 0xf74 <free+0x44>
     f8a:	d3 83       	std	Z+3, r29	; 0x03
     f8c:	c2 83       	std	Z+2, r28	; 0x02
     f8e:	40 81       	ld	r20, Z
     f90:	51 81       	ldd	r21, Z+1	; 0x01
     f92:	84 0f       	add	r24, r20
     f94:	95 1f       	adc	r25, r21
     f96:	c8 17       	cp	r28, r24
     f98:	d9 07       	cpc	r29, r25
     f9a:	59 f4       	brne	.+22     	; 0xfb2 <free+0x82>
     f9c:	88 81       	ld	r24, Y
     f9e:	99 81       	ldd	r25, Y+1	; 0x01
     fa0:	84 0f       	add	r24, r20
     fa2:	95 1f       	adc	r25, r21
     fa4:	02 96       	adiw	r24, 0x02	; 2
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	93 83       	std	Z+3, r25	; 0x03
     fb0:	82 83       	std	Z+2, r24	; 0x02
     fb2:	21 15       	cp	r18, r1
     fb4:	31 05       	cpc	r19, r1
     fb6:	29 f4       	brne	.+10     	; 0xfc2 <free+0x92>
     fb8:	f0 93 6e 02 	sts	0x026E, r31	; 0x80026e <__flp+0x1>
     fbc:	e0 93 6d 02 	sts	0x026D, r30	; 0x80026d <__flp>
     fc0:	3d c0       	rjmp	.+122    	; 0x103c <free+0x10c>
     fc2:	e9 01       	movw	r28, r18
     fc4:	fb 83       	std	Y+3, r31	; 0x03
     fc6:	ea 83       	std	Y+2, r30	; 0x02
     fc8:	49 91       	ld	r20, Y+
     fca:	59 91       	ld	r21, Y+
     fcc:	c4 0f       	add	r28, r20
     fce:	d5 1f       	adc	r29, r21
     fd0:	ec 17       	cp	r30, r28
     fd2:	fd 07       	cpc	r31, r29
     fd4:	61 f4       	brne	.+24     	; 0xfee <free+0xbe>
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	84 0f       	add	r24, r20
     fdc:	95 1f       	adc	r25, r21
     fde:	02 96       	adiw	r24, 0x02	; 2
     fe0:	e9 01       	movw	r28, r18
     fe2:	99 83       	std	Y+1, r25	; 0x01
     fe4:	88 83       	st	Y, r24
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
     fee:	e0 e0       	ldi	r30, 0x00	; 0
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	12 96       	adiw	r26, 0x02	; 2
     ff4:	8d 91       	ld	r24, X+
     ff6:	9c 91       	ld	r25, X
     ff8:	13 97       	sbiw	r26, 0x03	; 3
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	19 f0       	breq	.+6      	; 0x1004 <free+0xd4>
     ffe:	fd 01       	movw	r30, r26
    1000:	dc 01       	movw	r26, r24
    1002:	f7 cf       	rjmp	.-18     	; 0xff2 <free+0xc2>
    1004:	8d 91       	ld	r24, X+
    1006:	9c 91       	ld	r25, X
    1008:	11 97       	sbiw	r26, 0x01	; 1
    100a:	9d 01       	movw	r18, r26
    100c:	2e 5f       	subi	r18, 0xFE	; 254
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <__brkval>
    1018:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <__brkval+0x1>
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	69 f4       	brne	.+26     	; 0x103c <free+0x10c>
    1022:	30 97       	sbiw	r30, 0x00	; 0
    1024:	29 f4       	brne	.+10     	; 0x1030 <free+0x100>
    1026:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__flp+0x1>
    102a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__flp>
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <free+0x104>
    1030:	13 82       	std	Z+3, r1	; 0x03
    1032:	12 82       	std	Z+2, r1	; 0x02
    1034:	b0 93 6c 02 	sts	0x026C, r27	; 0x80026c <__brkval+0x1>
    1038:	a0 93 6b 02 	sts	0x026B, r26	; 0x80026b <__brkval>
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	08 95       	ret

00001042 <sprintf>:
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	2e 97       	sbiw	r28, 0x0e	; 14
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	0d 89       	ldd	r16, Y+21	; 0x15
    105c:	1e 89       	ldd	r17, Y+22	; 0x16
    105e:	86 e0       	ldi	r24, 0x06	; 6
    1060:	8c 83       	std	Y+4, r24	; 0x04
    1062:	1a 83       	std	Y+2, r17	; 0x02
    1064:	09 83       	std	Y+1, r16	; 0x01
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	9f e7       	ldi	r25, 0x7F	; 127
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	ae 01       	movw	r20, r28
    1070:	47 5e       	subi	r20, 0xE7	; 231
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	6f 89       	ldd	r22, Y+23	; 0x17
    1076:	78 8d       	ldd	r23, Y+24	; 0x18
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	10 d0       	rcall	.+32     	; 0x109e <vfprintf>
    107e:	ef 81       	ldd	r30, Y+7	; 0x07
    1080:	f8 85       	ldd	r31, Y+8	; 0x08
    1082:	e0 0f       	add	r30, r16
    1084:	f1 1f       	adc	r31, r17
    1086:	10 82       	st	Z, r1
    1088:	2e 96       	adiw	r28, 0x0e	; 14
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	08 95       	ret

0000109e <vfprintf>:
    109e:	2f 92       	push	r2
    10a0:	3f 92       	push	r3
    10a2:	4f 92       	push	r4
    10a4:	5f 92       	push	r5
    10a6:	6f 92       	push	r6
    10a8:	7f 92       	push	r7
    10aa:	8f 92       	push	r8
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	2b 97       	sbiw	r28, 0x0b	; 11
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	f8 94       	cli
    10cc:	de bf       	out	0x3e, r29	; 62
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	6c 01       	movw	r12, r24
    10d4:	7b 01       	movw	r14, r22
    10d6:	8a 01       	movw	r16, r20
    10d8:	fc 01       	movw	r30, r24
    10da:	17 82       	std	Z+7, r1	; 0x07
    10dc:	16 82       	std	Z+6, r1	; 0x06
    10de:	83 81       	ldd	r24, Z+3	; 0x03
    10e0:	81 ff       	sbrs	r24, 1
    10e2:	bf c1       	rjmp	.+894    	; 0x1462 <vfprintf+0x3c4>
    10e4:	ce 01       	movw	r24, r28
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	3c 01       	movw	r6, r24
    10ea:	f6 01       	movw	r30, r12
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	f7 01       	movw	r30, r14
    10f0:	93 fd       	sbrc	r25, 3
    10f2:	85 91       	lpm	r24, Z+
    10f4:	93 ff       	sbrs	r25, 3
    10f6:	81 91       	ld	r24, Z+
    10f8:	7f 01       	movw	r14, r30
    10fa:	88 23       	and	r24, r24
    10fc:	09 f4       	brne	.+2      	; 0x1100 <vfprintf+0x62>
    10fe:	ad c1       	rjmp	.+858    	; 0x145a <vfprintf+0x3bc>
    1100:	85 32       	cpi	r24, 0x25	; 37
    1102:	39 f4       	brne	.+14     	; 0x1112 <vfprintf+0x74>
    1104:	93 fd       	sbrc	r25, 3
    1106:	85 91       	lpm	r24, Z+
    1108:	93 ff       	sbrs	r25, 3
    110a:	81 91       	ld	r24, Z+
    110c:	7f 01       	movw	r14, r30
    110e:	85 32       	cpi	r24, 0x25	; 37
    1110:	21 f4       	brne	.+8      	; 0x111a <vfprintf+0x7c>
    1112:	b6 01       	movw	r22, r12
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	d6 d1       	rcall	.+940    	; 0x14c4 <fputc>
    1118:	e8 cf       	rjmp	.-48     	; 0x10ea <vfprintf+0x4c>
    111a:	91 2c       	mov	r9, r1
    111c:	21 2c       	mov	r2, r1
    111e:	31 2c       	mov	r3, r1
    1120:	ff e1       	ldi	r31, 0x1F	; 31
    1122:	f3 15       	cp	r31, r3
    1124:	d8 f0       	brcs	.+54     	; 0x115c <vfprintf+0xbe>
    1126:	8b 32       	cpi	r24, 0x2B	; 43
    1128:	79 f0       	breq	.+30     	; 0x1148 <vfprintf+0xaa>
    112a:	38 f4       	brcc	.+14     	; 0x113a <vfprintf+0x9c>
    112c:	80 32       	cpi	r24, 0x20	; 32
    112e:	79 f0       	breq	.+30     	; 0x114e <vfprintf+0xb0>
    1130:	83 32       	cpi	r24, 0x23	; 35
    1132:	a1 f4       	brne	.+40     	; 0x115c <vfprintf+0xbe>
    1134:	23 2d       	mov	r18, r3
    1136:	20 61       	ori	r18, 0x10	; 16
    1138:	1d c0       	rjmp	.+58     	; 0x1174 <vfprintf+0xd6>
    113a:	8d 32       	cpi	r24, 0x2D	; 45
    113c:	61 f0       	breq	.+24     	; 0x1156 <vfprintf+0xb8>
    113e:	80 33       	cpi	r24, 0x30	; 48
    1140:	69 f4       	brne	.+26     	; 0x115c <vfprintf+0xbe>
    1142:	23 2d       	mov	r18, r3
    1144:	21 60       	ori	r18, 0x01	; 1
    1146:	16 c0       	rjmp	.+44     	; 0x1174 <vfprintf+0xd6>
    1148:	83 2d       	mov	r24, r3
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	38 2e       	mov	r3, r24
    114e:	e3 2d       	mov	r30, r3
    1150:	e4 60       	ori	r30, 0x04	; 4
    1152:	3e 2e       	mov	r3, r30
    1154:	2a c0       	rjmp	.+84     	; 0x11aa <vfprintf+0x10c>
    1156:	f3 2d       	mov	r31, r3
    1158:	f8 60       	ori	r31, 0x08	; 8
    115a:	1d c0       	rjmp	.+58     	; 0x1196 <vfprintf+0xf8>
    115c:	37 fc       	sbrc	r3, 7
    115e:	2d c0       	rjmp	.+90     	; 0x11ba <vfprintf+0x11c>
    1160:	20 ed       	ldi	r18, 0xD0	; 208
    1162:	28 0f       	add	r18, r24
    1164:	2a 30       	cpi	r18, 0x0A	; 10
    1166:	40 f0       	brcs	.+16     	; 0x1178 <vfprintf+0xda>
    1168:	8e 32       	cpi	r24, 0x2E	; 46
    116a:	b9 f4       	brne	.+46     	; 0x119a <vfprintf+0xfc>
    116c:	36 fc       	sbrc	r3, 6
    116e:	75 c1       	rjmp	.+746    	; 0x145a <vfprintf+0x3bc>
    1170:	23 2d       	mov	r18, r3
    1172:	20 64       	ori	r18, 0x40	; 64
    1174:	32 2e       	mov	r3, r18
    1176:	19 c0       	rjmp	.+50     	; 0x11aa <vfprintf+0x10c>
    1178:	36 fe       	sbrs	r3, 6
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <vfprintf+0xea>
    117c:	8a e0       	ldi	r24, 0x0A	; 10
    117e:	98 9e       	mul	r9, r24
    1180:	20 0d       	add	r18, r0
    1182:	11 24       	eor	r1, r1
    1184:	92 2e       	mov	r9, r18
    1186:	11 c0       	rjmp	.+34     	; 0x11aa <vfprintf+0x10c>
    1188:	ea e0       	ldi	r30, 0x0A	; 10
    118a:	2e 9e       	mul	r2, r30
    118c:	20 0d       	add	r18, r0
    118e:	11 24       	eor	r1, r1
    1190:	22 2e       	mov	r2, r18
    1192:	f3 2d       	mov	r31, r3
    1194:	f0 62       	ori	r31, 0x20	; 32
    1196:	3f 2e       	mov	r3, r31
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <vfprintf+0x10c>
    119a:	8c 36       	cpi	r24, 0x6C	; 108
    119c:	21 f4       	brne	.+8      	; 0x11a6 <vfprintf+0x108>
    119e:	83 2d       	mov	r24, r3
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	38 2e       	mov	r3, r24
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <vfprintf+0x10c>
    11a6:	88 36       	cpi	r24, 0x68	; 104
    11a8:	41 f4       	brne	.+16     	; 0x11ba <vfprintf+0x11c>
    11aa:	f7 01       	movw	r30, r14
    11ac:	93 fd       	sbrc	r25, 3
    11ae:	85 91       	lpm	r24, Z+
    11b0:	93 ff       	sbrs	r25, 3
    11b2:	81 91       	ld	r24, Z+
    11b4:	7f 01       	movw	r14, r30
    11b6:	81 11       	cpse	r24, r1
    11b8:	b3 cf       	rjmp	.-154    	; 0x1120 <vfprintf+0x82>
    11ba:	98 2f       	mov	r25, r24
    11bc:	9f 7d       	andi	r25, 0xDF	; 223
    11be:	95 54       	subi	r25, 0x45	; 69
    11c0:	93 30       	cpi	r25, 0x03	; 3
    11c2:	28 f4       	brcc	.+10     	; 0x11ce <vfprintf+0x130>
    11c4:	0c 5f       	subi	r16, 0xFC	; 252
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	9f e3       	ldi	r25, 0x3F	; 63
    11ca:	99 83       	std	Y+1, r25	; 0x01
    11cc:	0d c0       	rjmp	.+26     	; 0x11e8 <vfprintf+0x14a>
    11ce:	83 36       	cpi	r24, 0x63	; 99
    11d0:	31 f0       	breq	.+12     	; 0x11de <vfprintf+0x140>
    11d2:	83 37       	cpi	r24, 0x73	; 115
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <vfprintf+0x154>
    11d6:	83 35       	cpi	r24, 0x53	; 83
    11d8:	09 f0       	breq	.+2      	; 0x11dc <vfprintf+0x13e>
    11da:	55 c0       	rjmp	.+170    	; 0x1286 <vfprintf+0x1e8>
    11dc:	20 c0       	rjmp	.+64     	; 0x121e <vfprintf+0x180>
    11de:	f8 01       	movw	r30, r16
    11e0:	80 81       	ld	r24, Z
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	0e 5f       	subi	r16, 0xFE	; 254
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	88 24       	eor	r8, r8
    11ea:	83 94       	inc	r8
    11ec:	91 2c       	mov	r9, r1
    11ee:	53 01       	movw	r10, r6
    11f0:	12 c0       	rjmp	.+36     	; 0x1216 <vfprintf+0x178>
    11f2:	28 01       	movw	r4, r16
    11f4:	f2 e0       	ldi	r31, 0x02	; 2
    11f6:	4f 0e       	add	r4, r31
    11f8:	51 1c       	adc	r5, r1
    11fa:	f8 01       	movw	r30, r16
    11fc:	a0 80       	ld	r10, Z
    11fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1200:	36 fe       	sbrs	r3, 6
    1202:	03 c0       	rjmp	.+6      	; 0x120a <vfprintf+0x16c>
    1204:	69 2d       	mov	r22, r9
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <vfprintf+0x170>
    120a:	6f ef       	ldi	r22, 0xFF	; 255
    120c:	7f ef       	ldi	r23, 0xFF	; 255
    120e:	c5 01       	movw	r24, r10
    1210:	4e d1       	rcall	.+668    	; 0x14ae <strnlen>
    1212:	4c 01       	movw	r8, r24
    1214:	82 01       	movw	r16, r4
    1216:	f3 2d       	mov	r31, r3
    1218:	ff 77       	andi	r31, 0x7F	; 127
    121a:	3f 2e       	mov	r3, r31
    121c:	15 c0       	rjmp	.+42     	; 0x1248 <vfprintf+0x1aa>
    121e:	28 01       	movw	r4, r16
    1220:	22 e0       	ldi	r18, 0x02	; 2
    1222:	42 0e       	add	r4, r18
    1224:	51 1c       	adc	r5, r1
    1226:	f8 01       	movw	r30, r16
    1228:	a0 80       	ld	r10, Z
    122a:	b1 80       	ldd	r11, Z+1	; 0x01
    122c:	36 fe       	sbrs	r3, 6
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <vfprintf+0x198>
    1230:	69 2d       	mov	r22, r9
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <vfprintf+0x19c>
    1236:	6f ef       	ldi	r22, 0xFF	; 255
    1238:	7f ef       	ldi	r23, 0xFF	; 255
    123a:	c5 01       	movw	r24, r10
    123c:	2d d1       	rcall	.+602    	; 0x1498 <strnlen_P>
    123e:	4c 01       	movw	r8, r24
    1240:	f3 2d       	mov	r31, r3
    1242:	f0 68       	ori	r31, 0x80	; 128
    1244:	3f 2e       	mov	r3, r31
    1246:	82 01       	movw	r16, r4
    1248:	33 fc       	sbrc	r3, 3
    124a:	19 c0       	rjmp	.+50     	; 0x127e <vfprintf+0x1e0>
    124c:	82 2d       	mov	r24, r2
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	88 16       	cp	r8, r24
    1252:	99 06       	cpc	r9, r25
    1254:	a0 f4       	brcc	.+40     	; 0x127e <vfprintf+0x1e0>
    1256:	b6 01       	movw	r22, r12
    1258:	80 e2       	ldi	r24, 0x20	; 32
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	33 d1       	rcall	.+614    	; 0x14c4 <fputc>
    125e:	2a 94       	dec	r2
    1260:	f5 cf       	rjmp	.-22     	; 0x124c <vfprintf+0x1ae>
    1262:	f5 01       	movw	r30, r10
    1264:	37 fc       	sbrc	r3, 7
    1266:	85 91       	lpm	r24, Z+
    1268:	37 fe       	sbrs	r3, 7
    126a:	81 91       	ld	r24, Z+
    126c:	5f 01       	movw	r10, r30
    126e:	b6 01       	movw	r22, r12
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	28 d1       	rcall	.+592    	; 0x14c4 <fputc>
    1274:	21 10       	cpse	r2, r1
    1276:	2a 94       	dec	r2
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	82 1a       	sub	r8, r18
    127c:	91 08       	sbc	r9, r1
    127e:	81 14       	cp	r8, r1
    1280:	91 04       	cpc	r9, r1
    1282:	79 f7       	brne	.-34     	; 0x1262 <vfprintf+0x1c4>
    1284:	e1 c0       	rjmp	.+450    	; 0x1448 <vfprintf+0x3aa>
    1286:	84 36       	cpi	r24, 0x64	; 100
    1288:	11 f0       	breq	.+4      	; 0x128e <vfprintf+0x1f0>
    128a:	89 36       	cpi	r24, 0x69	; 105
    128c:	39 f5       	brne	.+78     	; 0x12dc <vfprintf+0x23e>
    128e:	f8 01       	movw	r30, r16
    1290:	37 fe       	sbrs	r3, 7
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vfprintf+0x204>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0c 5f       	subi	r16, 0xFC	; 252
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <vfprintf+0x214>
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	07 2e       	mov	r0, r23
    12a8:	00 0c       	add	r0, r0
    12aa:	88 0b       	sbc	r24, r24
    12ac:	99 0b       	sbc	r25, r25
    12ae:	0e 5f       	subi	r16, 0xFE	; 254
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	f3 2d       	mov	r31, r3
    12b4:	ff 76       	andi	r31, 0x6F	; 111
    12b6:	3f 2e       	mov	r3, r31
    12b8:	97 ff       	sbrs	r25, 7
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <vfprintf+0x230>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	f0 68       	ori	r31, 0x80	; 128
    12cc:	3f 2e       	mov	r3, r31
    12ce:	2a e0       	ldi	r18, 0x0A	; 10
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a3 01       	movw	r20, r6
    12d4:	33 d1       	rcall	.+614    	; 0x153c <__ultoa_invert>
    12d6:	88 2e       	mov	r8, r24
    12d8:	86 18       	sub	r8, r6
    12da:	44 c0       	rjmp	.+136    	; 0x1364 <vfprintf+0x2c6>
    12dc:	85 37       	cpi	r24, 0x75	; 117
    12de:	31 f4       	brne	.+12     	; 0x12ec <vfprintf+0x24e>
    12e0:	23 2d       	mov	r18, r3
    12e2:	2f 7e       	andi	r18, 0xEF	; 239
    12e4:	b2 2e       	mov	r11, r18
    12e6:	2a e0       	ldi	r18, 0x0A	; 10
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	25 c0       	rjmp	.+74     	; 0x1336 <vfprintf+0x298>
    12ec:	93 2d       	mov	r25, r3
    12ee:	99 7f       	andi	r25, 0xF9	; 249
    12f0:	b9 2e       	mov	r11, r25
    12f2:	8f 36       	cpi	r24, 0x6F	; 111
    12f4:	c1 f0       	breq	.+48     	; 0x1326 <vfprintf+0x288>
    12f6:	18 f4       	brcc	.+6      	; 0x12fe <vfprintf+0x260>
    12f8:	88 35       	cpi	r24, 0x58	; 88
    12fa:	79 f0       	breq	.+30     	; 0x131a <vfprintf+0x27c>
    12fc:	ae c0       	rjmp	.+348    	; 0x145a <vfprintf+0x3bc>
    12fe:	80 37       	cpi	r24, 0x70	; 112
    1300:	19 f0       	breq	.+6      	; 0x1308 <vfprintf+0x26a>
    1302:	88 37       	cpi	r24, 0x78	; 120
    1304:	21 f0       	breq	.+8      	; 0x130e <vfprintf+0x270>
    1306:	a9 c0       	rjmp	.+338    	; 0x145a <vfprintf+0x3bc>
    1308:	e9 2f       	mov	r30, r25
    130a:	e0 61       	ori	r30, 0x10	; 16
    130c:	be 2e       	mov	r11, r30
    130e:	b4 fe       	sbrs	r11, 4
    1310:	0d c0       	rjmp	.+26     	; 0x132c <vfprintf+0x28e>
    1312:	fb 2d       	mov	r31, r11
    1314:	f4 60       	ori	r31, 0x04	; 4
    1316:	bf 2e       	mov	r11, r31
    1318:	09 c0       	rjmp	.+18     	; 0x132c <vfprintf+0x28e>
    131a:	34 fe       	sbrs	r3, 4
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <vfprintf+0x294>
    131e:	29 2f       	mov	r18, r25
    1320:	26 60       	ori	r18, 0x06	; 6
    1322:	b2 2e       	mov	r11, r18
    1324:	06 c0       	rjmp	.+12     	; 0x1332 <vfprintf+0x294>
    1326:	28 e0       	ldi	r18, 0x08	; 8
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <vfprintf+0x298>
    132c:	20 e1       	ldi	r18, 0x10	; 16
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x298>
    1332:	20 e1       	ldi	r18, 0x10	; 16
    1334:	32 e0       	ldi	r19, 0x02	; 2
    1336:	f8 01       	movw	r30, r16
    1338:	b7 fe       	sbrs	r11, 7
    133a:	07 c0       	rjmp	.+14     	; 0x134a <vfprintf+0x2ac>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	0c 5f       	subi	r16, 0xFC	; 252
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <vfprintf+0x2b8>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	a3 01       	movw	r20, r6
    1358:	f1 d0       	rcall	.+482    	; 0x153c <__ultoa_invert>
    135a:	88 2e       	mov	r8, r24
    135c:	86 18       	sub	r8, r6
    135e:	fb 2d       	mov	r31, r11
    1360:	ff 77       	andi	r31, 0x7F	; 127
    1362:	3f 2e       	mov	r3, r31
    1364:	36 fe       	sbrs	r3, 6
    1366:	0d c0       	rjmp	.+26     	; 0x1382 <vfprintf+0x2e4>
    1368:	23 2d       	mov	r18, r3
    136a:	2e 7f       	andi	r18, 0xFE	; 254
    136c:	a2 2e       	mov	r10, r18
    136e:	89 14       	cp	r8, r9
    1370:	58 f4       	brcc	.+22     	; 0x1388 <vfprintf+0x2ea>
    1372:	34 fe       	sbrs	r3, 4
    1374:	0b c0       	rjmp	.+22     	; 0x138c <vfprintf+0x2ee>
    1376:	32 fc       	sbrc	r3, 2
    1378:	09 c0       	rjmp	.+18     	; 0x138c <vfprintf+0x2ee>
    137a:	83 2d       	mov	r24, r3
    137c:	8e 7e       	andi	r24, 0xEE	; 238
    137e:	a8 2e       	mov	r10, r24
    1380:	05 c0       	rjmp	.+10     	; 0x138c <vfprintf+0x2ee>
    1382:	b8 2c       	mov	r11, r8
    1384:	a3 2c       	mov	r10, r3
    1386:	03 c0       	rjmp	.+6      	; 0x138e <vfprintf+0x2f0>
    1388:	b8 2c       	mov	r11, r8
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vfprintf+0x2f0>
    138c:	b9 2c       	mov	r11, r9
    138e:	a4 fe       	sbrs	r10, 4
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <vfprintf+0x312>
    1392:	fe 01       	movw	r30, r28
    1394:	e8 0d       	add	r30, r8
    1396:	f1 1d       	adc	r31, r1
    1398:	80 81       	ld	r24, Z
    139a:	80 33       	cpi	r24, 0x30	; 48
    139c:	21 f4       	brne	.+8      	; 0x13a6 <vfprintf+0x308>
    139e:	9a 2d       	mov	r25, r10
    13a0:	99 7e       	andi	r25, 0xE9	; 233
    13a2:	a9 2e       	mov	r10, r25
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <vfprintf+0x31a>
    13a6:	a2 fe       	sbrs	r10, 2
    13a8:	06 c0       	rjmp	.+12     	; 0x13b6 <vfprintf+0x318>
    13aa:	b3 94       	inc	r11
    13ac:	b3 94       	inc	r11
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <vfprintf+0x31a>
    13b0:	8a 2d       	mov	r24, r10
    13b2:	86 78       	andi	r24, 0x86	; 134
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <vfprintf+0x31a>
    13b6:	b3 94       	inc	r11
    13b8:	a3 fc       	sbrc	r10, 3
    13ba:	10 c0       	rjmp	.+32     	; 0x13dc <vfprintf+0x33e>
    13bc:	a0 fe       	sbrs	r10, 0
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <vfprintf+0x32e>
    13c0:	b2 14       	cp	r11, r2
    13c2:	80 f4       	brcc	.+32     	; 0x13e4 <vfprintf+0x346>
    13c4:	28 0c       	add	r2, r8
    13c6:	92 2c       	mov	r9, r2
    13c8:	9b 18       	sub	r9, r11
    13ca:	0d c0       	rjmp	.+26     	; 0x13e6 <vfprintf+0x348>
    13cc:	b2 14       	cp	r11, r2
    13ce:	58 f4       	brcc	.+22     	; 0x13e6 <vfprintf+0x348>
    13d0:	b6 01       	movw	r22, r12
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	76 d0       	rcall	.+236    	; 0x14c4 <fputc>
    13d8:	b3 94       	inc	r11
    13da:	f8 cf       	rjmp	.-16     	; 0x13cc <vfprintf+0x32e>
    13dc:	b2 14       	cp	r11, r2
    13de:	18 f4       	brcc	.+6      	; 0x13e6 <vfprintf+0x348>
    13e0:	2b 18       	sub	r2, r11
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfprintf+0x34a>
    13e4:	98 2c       	mov	r9, r8
    13e6:	21 2c       	mov	r2, r1
    13e8:	a4 fe       	sbrs	r10, 4
    13ea:	0f c0       	rjmp	.+30     	; 0x140a <vfprintf+0x36c>
    13ec:	b6 01       	movw	r22, r12
    13ee:	80 e3       	ldi	r24, 0x30	; 48
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	68 d0       	rcall	.+208    	; 0x14c4 <fputc>
    13f4:	a2 fe       	sbrs	r10, 2
    13f6:	16 c0       	rjmp	.+44     	; 0x1424 <vfprintf+0x386>
    13f8:	a1 fc       	sbrc	r10, 1
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <vfprintf+0x364>
    13fc:	88 e7       	ldi	r24, 0x78	; 120
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0x368>
    1402:	88 e5       	ldi	r24, 0x58	; 88
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	b6 01       	movw	r22, r12
    1408:	0c c0       	rjmp	.+24     	; 0x1422 <vfprintf+0x384>
    140a:	8a 2d       	mov	r24, r10
    140c:	86 78       	andi	r24, 0x86	; 134
    140e:	51 f0       	breq	.+20     	; 0x1424 <vfprintf+0x386>
    1410:	a1 fe       	sbrs	r10, 1
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <vfprintf+0x37a>
    1414:	8b e2       	ldi	r24, 0x2B	; 43
    1416:	01 c0       	rjmp	.+2      	; 0x141a <vfprintf+0x37c>
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	a7 fc       	sbrc	r10, 7
    141c:	8d e2       	ldi	r24, 0x2D	; 45
    141e:	b6 01       	movw	r22, r12
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	50 d0       	rcall	.+160    	; 0x14c4 <fputc>
    1424:	89 14       	cp	r8, r9
    1426:	30 f4       	brcc	.+12     	; 0x1434 <vfprintf+0x396>
    1428:	b6 01       	movw	r22, r12
    142a:	80 e3       	ldi	r24, 0x30	; 48
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	4a d0       	rcall	.+148    	; 0x14c4 <fputc>
    1430:	9a 94       	dec	r9
    1432:	f8 cf       	rjmp	.-16     	; 0x1424 <vfprintf+0x386>
    1434:	8a 94       	dec	r8
    1436:	f3 01       	movw	r30, r6
    1438:	e8 0d       	add	r30, r8
    143a:	f1 1d       	adc	r31, r1
    143c:	80 81       	ld	r24, Z
    143e:	b6 01       	movw	r22, r12
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	40 d0       	rcall	.+128    	; 0x14c4 <fputc>
    1444:	81 10       	cpse	r8, r1
    1446:	f6 cf       	rjmp	.-20     	; 0x1434 <vfprintf+0x396>
    1448:	22 20       	and	r2, r2
    144a:	09 f4       	brne	.+2      	; 0x144e <vfprintf+0x3b0>
    144c:	4e ce       	rjmp	.-868    	; 0x10ea <vfprintf+0x4c>
    144e:	b6 01       	movw	r22, r12
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	37 d0       	rcall	.+110    	; 0x14c4 <fputc>
    1456:	2a 94       	dec	r2
    1458:	f7 cf       	rjmp	.-18     	; 0x1448 <vfprintf+0x3aa>
    145a:	f6 01       	movw	r30, r12
    145c:	86 81       	ldd	r24, Z+6	; 0x06
    145e:	97 81       	ldd	r25, Z+7	; 0x07
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <vfprintf+0x3c8>
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f ef       	ldi	r25, 0xFF	; 255
    1466:	2b 96       	adiw	r28, 0x0b	; 11
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	7f 90       	pop	r7
    148c:	6f 90       	pop	r6
    148e:	5f 90       	pop	r5
    1490:	4f 90       	pop	r4
    1492:	3f 90       	pop	r3
    1494:	2f 90       	pop	r2
    1496:	08 95       	ret

00001498 <strnlen_P>:
    1498:	fc 01       	movw	r30, r24
    149a:	05 90       	lpm	r0, Z+
    149c:	61 50       	subi	r22, 0x01	; 1
    149e:	70 40       	sbci	r23, 0x00	; 0
    14a0:	01 10       	cpse	r0, r1
    14a2:	d8 f7       	brcc	.-10     	; 0x149a <strnlen_P+0x2>
    14a4:	80 95       	com	r24
    14a6:	90 95       	com	r25
    14a8:	8e 0f       	add	r24, r30
    14aa:	9f 1f       	adc	r25, r31
    14ac:	08 95       	ret

000014ae <strnlen>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	61 50       	subi	r22, 0x01	; 1
    14b2:	70 40       	sbci	r23, 0x00	; 0
    14b4:	01 90       	ld	r0, Z+
    14b6:	01 10       	cpse	r0, r1
    14b8:	d8 f7       	brcc	.-10     	; 0x14b0 <strnlen+0x2>
    14ba:	80 95       	com	r24
    14bc:	90 95       	com	r25
    14be:	8e 0f       	add	r24, r30
    14c0:	9f 1f       	adc	r25, r31
    14c2:	08 95       	ret

000014c4 <fputc>:
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	fb 01       	movw	r30, r22
    14ce:	23 81       	ldd	r18, Z+3	; 0x03
    14d0:	21 fd       	sbrc	r18, 1
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <fputc+0x16>
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	9f ef       	ldi	r25, 0xFF	; 255
    14d8:	2c c0       	rjmp	.+88     	; 0x1532 <fputc+0x6e>
    14da:	22 ff       	sbrs	r18, 2
    14dc:	16 c0       	rjmp	.+44     	; 0x150a <fputc+0x46>
    14de:	46 81       	ldd	r20, Z+6	; 0x06
    14e0:	57 81       	ldd	r21, Z+7	; 0x07
    14e2:	24 81       	ldd	r18, Z+4	; 0x04
    14e4:	35 81       	ldd	r19, Z+5	; 0x05
    14e6:	42 17       	cp	r20, r18
    14e8:	53 07       	cpc	r21, r19
    14ea:	44 f4       	brge	.+16     	; 0x14fc <fputc+0x38>
    14ec:	a0 81       	ld	r26, Z
    14ee:	b1 81       	ldd	r27, Z+1	; 0x01
    14f0:	9d 01       	movw	r18, r26
    14f2:	2f 5f       	subi	r18, 0xFF	; 255
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	31 83       	std	Z+1, r19	; 0x01
    14f8:	20 83       	st	Z, r18
    14fa:	8c 93       	st	X, r24
    14fc:	26 81       	ldd	r18, Z+6	; 0x06
    14fe:	37 81       	ldd	r19, Z+7	; 0x07
    1500:	2f 5f       	subi	r18, 0xFF	; 255
    1502:	3f 4f       	sbci	r19, 0xFF	; 255
    1504:	37 83       	std	Z+7, r19	; 0x07
    1506:	26 83       	std	Z+6, r18	; 0x06
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <fputc+0x6e>
    150a:	8b 01       	movw	r16, r22
    150c:	ec 01       	movw	r28, r24
    150e:	fb 01       	movw	r30, r22
    1510:	00 84       	ldd	r0, Z+8	; 0x08
    1512:	f1 85       	ldd	r31, Z+9	; 0x09
    1514:	e0 2d       	mov	r30, r0
    1516:	09 95       	icall
    1518:	89 2b       	or	r24, r25
    151a:	e1 f6       	brne	.-72     	; 0x14d4 <fputc+0x10>
    151c:	d8 01       	movw	r26, r16
    151e:	16 96       	adiw	r26, 0x06	; 6
    1520:	8d 91       	ld	r24, X+
    1522:	9c 91       	ld	r25, X
    1524:	17 97       	sbiw	r26, 0x07	; 7
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	17 96       	adiw	r26, 0x07	; 7
    152a:	9c 93       	st	X, r25
    152c:	8e 93       	st	-X, r24
    152e:	16 97       	sbiw	r26, 0x06	; 6
    1530:	ce 01       	movw	r24, r28
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <__ultoa_invert>:
    153c:	fa 01       	movw	r30, r20
    153e:	aa 27       	eor	r26, r26
    1540:	28 30       	cpi	r18, 0x08	; 8
    1542:	51 f1       	breq	.+84     	; 0x1598 <__ultoa_invert+0x5c>
    1544:	20 31       	cpi	r18, 0x10	; 16
    1546:	81 f1       	breq	.+96     	; 0x15a8 <__ultoa_invert+0x6c>
    1548:	e8 94       	clt
    154a:	6f 93       	push	r22
    154c:	6e 7f       	andi	r22, 0xFE	; 254
    154e:	6e 5f       	subi	r22, 0xFE	; 254
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	af 4f       	sbci	r26, 0xFF	; 255
    1558:	b1 e0       	ldi	r27, 0x01	; 1
    155a:	3e d0       	rcall	.+124    	; 0x15d8 <__ultoa_invert+0x9c>
    155c:	b4 e0       	ldi	r27, 0x04	; 4
    155e:	3c d0       	rcall	.+120    	; 0x15d8 <__ultoa_invert+0x9c>
    1560:	67 0f       	add	r22, r23
    1562:	78 1f       	adc	r23, r24
    1564:	89 1f       	adc	r24, r25
    1566:	9a 1f       	adc	r25, r26
    1568:	a1 1d       	adc	r26, r1
    156a:	68 0f       	add	r22, r24
    156c:	79 1f       	adc	r23, r25
    156e:	8a 1f       	adc	r24, r26
    1570:	91 1d       	adc	r25, r1
    1572:	a1 1d       	adc	r26, r1
    1574:	6a 0f       	add	r22, r26
    1576:	71 1d       	adc	r23, r1
    1578:	81 1d       	adc	r24, r1
    157a:	91 1d       	adc	r25, r1
    157c:	a1 1d       	adc	r26, r1
    157e:	20 d0       	rcall	.+64     	; 0x15c0 <__ultoa_invert+0x84>
    1580:	09 f4       	brne	.+2      	; 0x1584 <__ultoa_invert+0x48>
    1582:	68 94       	set
    1584:	3f 91       	pop	r19
    1586:	2a e0       	ldi	r18, 0x0A	; 10
    1588:	26 9f       	mul	r18, r22
    158a:	11 24       	eor	r1, r1
    158c:	30 19       	sub	r19, r0
    158e:	30 5d       	subi	r19, 0xD0	; 208
    1590:	31 93       	st	Z+, r19
    1592:	de f6       	brtc	.-74     	; 0x154a <__ultoa_invert+0xe>
    1594:	cf 01       	movw	r24, r30
    1596:	08 95       	ret
    1598:	46 2f       	mov	r20, r22
    159a:	47 70       	andi	r20, 0x07	; 7
    159c:	40 5d       	subi	r20, 0xD0	; 208
    159e:	41 93       	st	Z+, r20
    15a0:	b3 e0       	ldi	r27, 0x03	; 3
    15a2:	0f d0       	rcall	.+30     	; 0x15c2 <__ultoa_invert+0x86>
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <__ultoa_invert+0x5c>
    15a6:	f6 cf       	rjmp	.-20     	; 0x1594 <__ultoa_invert+0x58>
    15a8:	46 2f       	mov	r20, r22
    15aa:	4f 70       	andi	r20, 0x0F	; 15
    15ac:	40 5d       	subi	r20, 0xD0	; 208
    15ae:	4a 33       	cpi	r20, 0x3A	; 58
    15b0:	18 f0       	brcs	.+6      	; 0x15b8 <__ultoa_invert+0x7c>
    15b2:	49 5d       	subi	r20, 0xD9	; 217
    15b4:	31 fd       	sbrc	r19, 1
    15b6:	40 52       	subi	r20, 0x20	; 32
    15b8:	41 93       	st	Z+, r20
    15ba:	02 d0       	rcall	.+4      	; 0x15c0 <__ultoa_invert+0x84>
    15bc:	a9 f7       	brne	.-22     	; 0x15a8 <__ultoa_invert+0x6c>
    15be:	ea cf       	rjmp	.-44     	; 0x1594 <__ultoa_invert+0x58>
    15c0:	b4 e0       	ldi	r27, 0x04	; 4
    15c2:	a6 95       	lsr	r26
    15c4:	97 95       	ror	r25
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	ba 95       	dec	r27
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__ultoa_invert+0x86>
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	61 05       	cpc	r22, r1
    15d4:	71 05       	cpc	r23, r1
    15d6:	08 95       	ret
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	0a 2e       	mov	r0, r26
    15de:	06 94       	lsr	r0
    15e0:	57 95       	ror	r21
    15e2:	47 95       	ror	r20
    15e4:	37 95       	ror	r19
    15e6:	27 95       	ror	r18
    15e8:	ba 95       	dec	r27
    15ea:	c9 f7       	brne	.-14     	; 0x15de <__ultoa_invert+0xa2>
    15ec:	62 0f       	add	r22, r18
    15ee:	73 1f       	adc	r23, r19
    15f0:	84 1f       	adc	r24, r20
    15f2:	95 1f       	adc	r25, r21
    15f4:	a0 1d       	adc	r26, r0
    15f6:	08 95       	ret

000015f8 <_exit>:
    15f8:	f8 94       	cli

000015fa <__stop_program>:
    15fa:	ff cf       	rjmp	.-2      	; 0x15fa <__stop_program>
