
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000200  00800100  000019d0  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800300  00800300  00001c64  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e40  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a8b  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000322e  00000000  00000000  000088e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  0000bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000921f  00000000  00000000  0000c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018aa  00000000  00000000  000154fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00016da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00017095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b8 c4       	rjmp	.+2416   	; 0x9a6 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b9 c7       	rjmp	.+3954   	; 0xfb8 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 ed       	ldi	r30, 0xD0	; 208
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 30       	cpi	r26, 0x00	; 0
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 38       	cpi	r26, 0x8D	; 141
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	fe d2       	rcall	.+1532   	; 0x6cc <main>
      d0:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_exit>

000000d4 <__bad_interrupt>:
      d4:	a6 c3       	rjmp	.+1868   	; 0x822 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g_ADCCount>
     120:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g_ADCCount>
     12c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 21 03 	sts	0x0321, r19	; 0x800321 <g_ADCCount+0x1>
     13a:	20 93 20 03 	sts	0x0320, r18	; 0x800320 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e4 5f       	subi	r30, 0xF4	; 244
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <g_ADCCount>
     162:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	67 99       	sbic	0x0c, 7	; 12
     18e:	16 c0       	rjmp	.+44     	; 0x1bc <SERVER_Task+0x32>
     190:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2373>
     194:	88 23       	and	r24, r24
     196:	81 f0       	breq	.+32     	; 0x1b8 <SERVER_Task+0x2e>
     198:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     19c:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     1a0:	89 2b       	or	r24, r25
     1a2:	41 f4       	brne	.+16     	; 0x1b4 <SERVER_Task+0x2a>
     1a4:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     1a8:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     1ac:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <STAGE1+0x1>
     1b0:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <STAGE1>
     1b4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <g_WDTimeout>
     1b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2373>
     1bc:	66 99       	sbic	0x0c, 6	; 12
     1be:	0e c0       	rjmp	.+28     	; 0x1dc <SERVER_Task+0x52>
     1c0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2374>
     1c4:	88 23       	and	r24, r24
     1c6:	41 f0       	breq	.+16     	; 0x1d8 <SERVER_Task+0x4e>
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <STAGE2>
     1ce:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <STAGE2+0x1>
     1d2:	5b d2       	rcall	.+1206   	; 0x68a <LL_UpdateStatus>
     1d4:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <g_WDTimeout>
     1d8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2374>
     1dc:	65 99       	sbic	0x0c, 5	; 12
     1de:	0b c0       	rjmp	.+22     	; 0x1f6 <SERVER_Task+0x6c>
     1e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2375>
     1e4:	88 23       	and	r24, r24
     1e6:	29 f0       	breq	.+10     	; 0x1f2 <SERVER_Task+0x68>
     1e8:	82 e0       	ldi	r24, 0x02	; 2
     1ea:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <_timer+0x23>
     1ee:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <g_WDTimeout>
     1f2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2375>
     1f6:	67 9b       	sbis	0x0c, 7	; 12
     1f8:	0e c0       	rjmp	.+28     	; 0x216 <SERVER_Task+0x8c>
     1fa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2373>
     1fe:	81 11       	cpse	r24, r1
     200:	07 c0       	rjmp	.+14     	; 0x210 <SERVER_Task+0x86>
     202:	ec e2       	ldi	r30, 0x2C	; 44
     204:	f3 e0       	ldi	r31, 0x03	; 3
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	82 8f       	std	Z+26, r24	; 0x1a
     20a:	84 a7       	std	Z+44, r24	; 0x2c
     20c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <_timer+0x47>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2373>
     216:	66 9b       	sbis	0x0c, 6	; 12
     218:	2a c0       	rjmp	.+84     	; 0x26e <SERVER_Task+0xe4>
     21a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2374>
     21e:	81 11       	cpse	r24, r1
     220:	23 c0       	rjmp	.+70     	; 0x268 <SERVER_Task+0xde>
     222:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <STAGE2>
     226:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <STAGE2+0x1>
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	71 f4       	brne	.+28     	; 0x24a <SERVER_Task+0xc0>
     22e:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     232:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     236:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <STAGE2+0x1>
     23a:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <STAGE2>
     23e:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <g_Timer>
     242:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <g_Timer+0x1>
     246:	2b d2       	rcall	.+1110   	; 0x69e <LL_UpdateTick>
     248:	0a c0       	rjmp	.+20     	; 0x25e <SERVER_Task+0xd4>
     24a:	d9 d1       	rcall	.+946    	; 0x5fe <LL_Next>
     24c:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <STAGE2+0x1>
     250:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <STAGE2>
     254:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <g_Timer>
     258:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <g_Timer+0x1>
     25c:	20 d2       	rcall	.+1088   	; 0x69e <LL_UpdateTick>
     25e:	ea e7       	ldi	r30, 0x7A	; 122
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	80 64       	ori	r24, 0x40	; 64
     266:	80 83       	st	Z, r24
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2374>
     26e:	65 9b       	sbis	0x0c, 5	; 12
     270:	0f c0       	rjmp	.+30     	; 0x290 <SERVER_Task+0x106>
     272:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2375>
     276:	81 11       	cpse	r24, r1
     278:	08 c0       	rjmp	.+16     	; 0x28a <SERVER_Task+0x100>
     27a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     27e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     282:	e3 d1       	rcall	.+966    	; 0x64a <LL_GetClass>
     284:	85 30       	cpi	r24, 0x05	; 5
     286:	09 f4       	brne	.+2      	; 0x28a <SERVER_Task+0x100>
     288:	33 d6       	rcall	.+3174   	; 0xef0 <SYS_Rampdown>
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2375>
     290:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <memory.2376>
     294:	81 11       	cpse	r24, r1
     296:	2b c0       	rjmp	.+86     	; 0x2ee <SERVER_Task+0x164>
     298:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     29c:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     2a0:	d4 d1       	rcall	.+936    	; 0x64a <LL_GetClass>
     2a2:	84 30       	cpi	r24, 0x04	; 4
     2a4:	21 f1       	breq	.+72     	; 0x2ee <SERVER_Task+0x164>
     2a6:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <HEAD>
     2aa:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <HEAD+0x1>
     2ae:	82 81       	ldd	r24, Z+2	; 0x02
     2b0:	93 81       	ldd	r25, Z+3	; 0x03
     2b2:	cb d1       	rcall	.+918    	; 0x64a <LL_GetClass>
     2b4:	84 30       	cpi	r24, 0x04	; 4
     2b6:	d9 f0       	breq	.+54     	; 0x2ee <SERVER_Task+0x164>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <memory.2376>
     2be:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <HEAD>
     2c2:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <HEAD+0x1>
     2c6:	82 81       	ldd	r24, Z+2	; 0x02
     2c8:	93 81       	ldd	r25, Z+3	; 0x03
     2ca:	bf d1       	rcall	.+894    	; 0x64a <LL_GetClass>
     2cc:	e8 2f       	mov	r30, r24
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	e7 5f       	subi	r30, 0xF7	; 247
     2d2:	fe 4f       	sbci	r31, 0xFE	; 254
     2d4:	c0 81       	ld	r28, Z
     2d6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     2da:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     2de:	b5 d1       	rcall	.+874    	; 0x64a <LL_GetClass>
     2e0:	e8 2f       	mov	r30, r24
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	e7 5f       	subi	r30, 0xF7	; 247
     2e6:	fe 4f       	sbci	r31, 0xFE	; 254
     2e8:	80 81       	ld	r24, Z
     2ea:	6c 2f       	mov	r22, r28
     2ec:	3c d3       	rcall	.+1656   	; 0x966 <STEPPER_SetRotation>
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <ADC_Task>:
     2f2:	cf 92       	push	r12
     2f4:	df 92       	push	r13
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	cf 93       	push	r28
     2fc:	ec e0       	ldi	r30, 0x0C	; 12
     2fe:	f3 e0       	ldi	r31, 0x03	; 3
     300:	a0 81       	ld	r26, Z
     302:	b1 81       	ldd	r27, Z+1	; 0x01
     304:	60 81       	ld	r22, Z
     306:	71 81       	ldd	r23, Z+1	; 0x01
     308:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <ticks.2384>
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <ticks.2384>
     312:	c1 2c       	mov	r12, r1
     314:	d1 2c       	mov	r13, r1
     316:	76 01       	movw	r14, r12
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	4f b7       	in	r20, 0x3f	; 63
     31e:	f8 94       	cli
     320:	fc 01       	movw	r30, r24
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	e4 5f       	subi	r30, 0xF4	; 244
     328:	fc 4f       	sbci	r31, 0xFC	; 252
     32a:	20 81       	ld	r18, Z
     32c:	31 81       	ldd	r19, Z+1	; 0x01
     32e:	c2 0e       	add	r12, r18
     330:	d3 1e       	adc	r13, r19
     332:	e1 1c       	adc	r14, r1
     334:	f1 1c       	adc	r15, r1
     336:	20 81       	ld	r18, Z
     338:	31 81       	ldd	r19, Z+1	; 0x01
     33a:	26 17       	cp	r18, r22
     33c:	37 07       	cpc	r19, r23
     33e:	38 f4       	brcc	.+14     	; 0x34e <ADC_Task+0x5c>
     340:	fc 01       	movw	r30, r24
     342:	ee 0f       	add	r30, r30
     344:	ff 1f       	adc	r31, r31
     346:	e4 5f       	subi	r30, 0xF4	; 244
     348:	fc 4f       	sbci	r31, 0xFC	; 252
     34a:	60 81       	ld	r22, Z
     34c:	71 81       	ldd	r23, Z+1	; 0x01
     34e:	fc 01       	movw	r30, r24
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e4 5f       	subi	r30, 0xF4	; 244
     356:	fc 4f       	sbci	r31, 0xFC	; 252
     358:	20 81       	ld	r18, Z
     35a:	31 81       	ldd	r19, Z+1	; 0x01
     35c:	a2 17       	cp	r26, r18
     35e:	b3 07       	cpc	r27, r19
     360:	08 f0       	brcs	.+2      	; 0x364 <ADC_Task+0x72>
     362:	4d c0       	rjmp	.+154    	; 0x3fe <ADC_Task+0x10c>
     364:	fc 01       	movw	r30, r24
     366:	ee 0f       	add	r30, r30
     368:	ff 1f       	adc	r31, r31
     36a:	e4 5f       	subi	r30, 0xF4	; 244
     36c:	fc 4f       	sbci	r31, 0xFC	; 252
     36e:	a0 81       	ld	r26, Z
     370:	b1 81       	ldd	r27, Z+1	; 0x01
     372:	45 c0       	rjmp	.+138    	; 0x3fe <ADC_Task+0x10c>
     374:	8f b7       	in	r24, 0x3f	; 63
     376:	f8 94       	cli
     378:	ca 1a       	sub	r12, r26
     37a:	db 0a       	sbc	r13, r27
     37c:	e1 08       	sbc	r14, r1
     37e:	f1 08       	sbc	r15, r1
     380:	c6 1a       	sub	r12, r22
     382:	d7 0a       	sbc	r13, r23
     384:	e1 08       	sbc	r14, r1
     386:	f1 08       	sbc	r15, r1
     388:	f6 94       	lsr	r15
     38a:	e7 94       	ror	r14
     38c:	d7 94       	ror	r13
     38e:	c7 94       	ror	r12
     390:	f6 94       	lsr	r15
     392:	e7 94       	ror	r14
     394:	d7 94       	ror	r13
     396:	c7 94       	ror	r12
     398:	8f bf       	out	0x3f, r24	; 63
     39a:	cf b7       	in	r28, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	d7 01       	movw	r26, r14
     3a0:	c6 01       	movw	r24, r12
     3a2:	0b 97       	sbiw	r24, 0x0b	; 11
     3a4:	a1 09       	sbc	r26, r1
     3a6:	b1 09       	sbc	r27, r1
     3a8:	8d 3d       	cpi	r24, 0xDD	; 221
     3aa:	93 40       	sbci	r25, 0x03	; 3
     3ac:	a1 05       	cpc	r26, r1
     3ae:	b1 05       	cpc	r27, r1
     3b0:	a0 f4       	brcc	.+40     	; 0x3da <ADC_Task+0xe8>
     3b2:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <STAGE2>
     3b6:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <STAGE2+0x1>
     3ba:	4c d1       	rcall	.+664    	; 0x654 <LL_GetRefl>
     3bc:	a0 e0       	ldi	r26, 0x00	; 0
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	c8 16       	cp	r12, r24
     3c2:	d9 06       	cpc	r13, r25
     3c4:	ea 06       	cpc	r14, r26
     3c6:	fb 06       	cpc	r15, r27
     3c8:	40 f4       	brcc	.+16     	; 0x3da <ADC_Task+0xe8>
     3ca:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <STAGE2>
     3ce:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <STAGE2+0x1>
     3d2:	00 97       	sbiw	r24, 0x00	; 0
     3d4:	11 f0       	breq	.+4      	; 0x3da <ADC_Task+0xe8>
     3d6:	b6 01       	movw	r22, r12
     3d8:	48 d1       	rcall	.+656    	; 0x66a <LL_UpdateRefl>
     3da:	cf bf       	out	0x3f, r28	; 63
     3dc:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <g_ADCCount+0x1>
     3e0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount>
     3e4:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <_timer+0x11>
     3e8:	66 9b       	sbis	0x0c, 6	; 12
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <ADC_Task+0x106>
     3ec:	ea e7       	ldi	r30, 0x7A	; 122
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	80 64       	ori	r24, 0x40	; 64
     3f4:	80 83       	st	Z, r24
     3f6:	0a c0       	rjmp	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f8:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <ticks.2384>
     3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3fe:	4f bf       	out	0x3f, r20	; 63
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	86 30       	cpi	r24, 0x06	; 6
     404:	91 05       	cpc	r25, r1
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     408:	89 cf       	rjmp	.-238    	; 0x31c <ADC_Task+0x2a>
     40a:	b4 cf       	rjmp	.-152    	; 0x374 <ADC_Task+0x82>
     40c:	cf 91       	pop	r28
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	08 95       	ret

00000418 <MAG_Task>:
     418:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_MotorOn>
     41c:	88 23       	and	r24, r24
     41e:	29 f0       	breq	.+10     	; 0x42a <MAG_Task+0x12>
     420:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2406>
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <tick.2406>
     42a:	64 99       	sbic	0x0c, 4	; 12
     42c:	1a c0       	rjmp	.+52     	; 0x462 <MAG_Task+0x4a>
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     434:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     438:	28 d1       	rcall	.+592    	; 0x68a <LL_UpdateStatus>
     43a:	61 e0       	ldi	r22, 0x01	; 1
     43c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     440:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     444:	18 d1       	rcall	.+560    	; 0x676 <LL_UpdateMag>
     446:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     44a:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     44e:	d7 d0       	rcall	.+430    	; 0x5fe <LL_Next>
     450:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <STAGE1+0x1>
     454:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <STAGE1>
     458:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2406>
     45c:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_timer+0x1a>
     460:	08 95       	ret
     462:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <tick.2406>
     466:	83 33       	cpi	r24, 0x33	; 51
     468:	c8 f0       	brcs	.+50     	; 0x49c <MAG_Task+0x84>
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     470:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     474:	0a d1       	rcall	.+532    	; 0x68a <LL_UpdateStatus>
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     47c:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     480:	fa d0       	rcall	.+500    	; 0x676 <LL_UpdateMag>
     482:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     486:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     48a:	b9 d0       	rcall	.+370    	; 0x5fe <LL_Next>
     48c:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <STAGE1+0x1>
     490:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <STAGE1>
     494:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <tick.2406>
     498:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <_timer+0x1a>
     49c:	08 95       	ret

0000049e <EXIT_Task>:
     49e:	cf 93       	push	r28
     4a0:	e8 e7       	ldi	r30, 0x78	; 120
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	85 81       	ldd	r24, Z+5	; 0x05
     4a6:	96 81       	ldd	r25, Z+6	; 0x06
     4a8:	27 81       	ldd	r18, Z+7	; 0x07
     4aa:	82 1b       	sub	r24, r18
     4ac:	91 09       	sbc	r25, r1
     4ae:	0c 97       	sbiw	r24, 0x0c	; 12
     4b0:	8c f5       	brge	.+98     	; 0x514 <EXIT_Task+0x76>
     4b2:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <stepper+0xe>
     4b6:	81 11       	cpse	r24, r1
     4b8:	2d c0       	rjmp	.+90     	; 0x514 <EXIT_Task+0x76>
     4ba:	63 e0       	ldi	r22, 0x03	; 3
     4bc:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     4c0:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     4c4:	e2 d0       	rcall	.+452    	; 0x68a <LL_UpdateStatus>
     4c6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     4ca:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     4ce:	97 d0       	rcall	.+302    	; 0x5fe <LL_Next>
     4d0:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <HEAD+0x1>
     4d4:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <HEAD>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	b4 d1       	rcall	.+872    	; 0x846 <PWM>
     4de:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <HEAD>
     4e2:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <HEAD+0x1>
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	af d0       	rcall	.+350    	; 0x64a <LL_GetClass>
     4ec:	e8 2f       	mov	r30, r24
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	e7 5f       	subi	r30, 0xF7	; 247
     4f2:	fe 4f       	sbci	r31, 0xFE	; 254
     4f4:	c0 81       	ld	r28, Z
     4f6:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     4fa:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     4fe:	a5 d0       	rcall	.+330    	; 0x64a <LL_GetClass>
     500:	e8 2f       	mov	r30, r24
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	e7 5f       	subi	r30, 0xF7	; 247
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	80 81       	ld	r24, Z
     50a:	6c 2f       	mov	r22, r28
     50c:	2c d2       	rcall	.+1112   	; 0x966 <STEPPER_SetRotation>
     50e:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <_timer+0x23>
     512:	06 c0       	rjmp	.+12     	; 0x520 <EXIT_Task+0x82>
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	96 d1       	rcall	.+812    	; 0x846 <PWM>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <g_Lock>
     520:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     524:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     528:	90 d0       	rcall	.+288    	; 0x64a <LL_GetClass>
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <BTN_Task>:
     52e:	89 b1       	in	r24, 0x09	; 9
     530:	83 70       	andi	r24, 0x03	; 3
     532:	c1 f0       	breq	.+48     	; 0x564 <BTN_Task+0x36>
     534:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__data_end>
     538:	8f 5f       	subi	r24, 0xFF	; 255
     53a:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <__data_end>
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	98 f0       	brcs	.+38     	; 0x568 <BTN_Task+0x3a>
     542:	89 b1       	in	r24, 0x09	; 9
     544:	83 70       	andi	r24, 0x03	; 3
     546:	81 f0       	breq	.+32     	; 0x568 <BTN_Task+0x3a>
     548:	89 b1       	in	r24, 0x09	; 9
     54a:	83 70       	andi	r24, 0x03	; 3
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	19 f4       	brne	.+6      	; 0x556 <BTN_Task+0x28>
     550:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <g_PauseRequest>
     554:	08 95       	ret
     556:	89 b1       	in	r24, 0x09	; 9
     558:	83 70       	andi	r24, 0x03	; 3
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	29 f4       	brne	.+10     	; 0x568 <BTN_Task+0x3a>
     55e:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <_timer+0x2c>
     562:	08 95       	ret
     564:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <__data_end>
     568:	08 95       	ret

0000056a <WATCHDOG_Task>:
     56a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <g_WDTimeout>
     56e:	82 30       	cpi	r24, 0x02	; 2
     570:	18 f0       	brcs	.+6      	; 0x578 <WATCHDOG_Task+0xe>
     572:	86 e1       	ldi	r24, 0x16	; 22
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	98 d3       	rcall	.+1840   	; 0xca8 <SYS_Pause>
     578:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <g_WDTimeout>
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <g_WDTimeout>
     582:	08 95       	ret

00000584 <D_Blinky>:
     584:	9b b1       	in	r25, 0x0b	; 11
     586:	80 ea       	ldi	r24, 0xA0	; 160
     588:	89 27       	eor	r24, r25
     58a:	8b b9       	out	0x0b, r24	; 11
     58c:	08 95       	ret

0000058e <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     58e:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <g_MotorOn>
     592:	88 23       	and	r24, r24
     594:	49 f0       	breq	.+18     	; 0x5a8 <ADD_Task+0x1a>
     596:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <g_Timer>
     59a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <g_Timer+0x1>
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <g_Timer+0x1>
     5a4:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <g_Timer>
     5a8:	08 95       	ret

000005aa <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	7c 01       	movw	r14, r24
     5b6:	16 2f       	mov	r17, r22
     5b8:	d4 2f       	mov	r29, r20
     5ba:	c2 2f       	mov	r28, r18
     5bc:	87 e0       	ldi	r24, 0x07	; 7
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	09 d6       	rcall	.+3090   	; 0x11d4 <malloc>
     5c2:	fc 01       	movw	r30, r24
     5c4:	f1 82       	std	Z+1, r15	; 0x01
     5c6:	e0 82       	st	Z, r14
     5c8:	12 83       	std	Z+2, r17	; 0x02
     5ca:	d3 83       	std	Z+3, r29	; 0x03
     5cc:	c4 83       	std	Z+4, r28	; 0x04
     5ce:	16 82       	std	Z+6, r1	; 0x06
     5d0:	15 82       	std	Z+5, r1	; 0x05
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	08 95       	ret

000005de <LL_ItemListInit>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	ec 01       	movw	r28, r24
     5e4:	86 e0       	ldi	r24, 0x06	; 6
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	f5 d5       	rcall	.+3050   	; 0x11d4 <malloc>
     5ea:	fc 01       	movw	r30, r24
     5ec:	d1 83       	std	Z+1, r29	; 0x01
     5ee:	c0 83       	st	Z, r28
     5f0:	15 82       	std	Z+5, r1	; 0x05
     5f2:	14 82       	std	Z+4, r1	; 0x04
     5f4:	13 82       	std	Z+3, r1	; 0x03
     5f6:	12 82       	std	Z+2, r1	; 0x02
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <LL_Next>:
     5fe:	fc 01       	movw	r30, r24
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	08 95       	ret

00000606 <LL_AddBack>:
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	ec 01       	movw	r28, r24
     60c:	cb 01       	movw	r24, r22
     60e:	01 c0       	rjmp	.+2      	; 0x612 <LL_AddBack+0xc>
     610:	e9 01       	movw	r28, r18
     612:	2a 81       	ldd	r18, Y+2	; 0x02
     614:	3b 81       	ldd	r19, Y+3	; 0x03
     616:	21 15       	cp	r18, r1
     618:	31 05       	cpc	r19, r1
     61a:	d1 f7       	brne	.-12     	; 0x610 <LL_AddBack+0xa>
     61c:	e0 df       	rcall	.-64     	; 0x5de <LL_ItemListInit>
     61e:	9b 83       	std	Y+3, r25	; 0x03
     620:	8a 83       	std	Y+2, r24	; 0x02
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <LL_Size>:
     628:	dc 01       	movw	r26, r24
     62a:	12 96       	adiw	r26, 0x02	; 2
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	13 97       	sbiw	r26, 0x03	; 3
     632:	30 97       	sbiw	r30, 0x00	; 0
     634:	41 f0       	breq	.+16     	; 0x646 <LL_Size+0x1e>
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	8f 5f       	subi	r24, 0xFF	; 255
     63a:	02 80       	ldd	r0, Z+2	; 0x02
     63c:	f3 81       	ldd	r31, Z+3	; 0x03
     63e:	e0 2d       	mov	r30, r0
     640:	30 97       	sbiw	r30, 0x00	; 0
     642:	d1 f7       	brne	.-12     	; 0x638 <LL_Size+0x10>
     644:	08 95       	ret
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	08 95       	ret

0000064a <LL_GetClass>:
     64a:	dc 01       	movw	r26, r24
     64c:	ed 91       	ld	r30, X+
     64e:	fc 91       	ld	r31, X
     650:	83 81       	ldd	r24, Z+3	; 0x03
     652:	08 95       	ret

00000654 <LL_GetRefl>:
     654:	dc 01       	movw	r26, r24
     656:	ed 91       	ld	r30, X+
     658:	fc 91       	ld	r31, X
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	08 95       	ret

00000660 <LL_GetMag>:
     660:	dc 01       	movw	r26, r24
     662:	ed 91       	ld	r30, X+
     664:	fc 91       	ld	r31, X
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	08 95       	ret

0000066a <LL_UpdateRefl>:
     66a:	dc 01       	movw	r26, r24
     66c:	ed 91       	ld	r30, X+
     66e:	fc 91       	ld	r31, X
     670:	71 83       	std	Z+1, r23	; 0x01
     672:	60 83       	st	Z, r22
     674:	08 95       	ret

00000676 <LL_UpdateMag>:
     676:	dc 01       	movw	r26, r24
     678:	ed 91       	ld	r30, X+
     67a:	fc 91       	ld	r31, X
     67c:	62 83       	std	Z+2, r22	; 0x02
     67e:	08 95       	ret

00000680 <LL_UpdateClass>:
     680:	dc 01       	movw	r26, r24
     682:	ed 91       	ld	r30, X+
     684:	fc 91       	ld	r31, X
     686:	63 83       	std	Z+3, r22	; 0x03
     688:	08 95       	ret

0000068a <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     68a:	dc 01       	movw	r26, r24
     68c:	ed 91       	ld	r30, X+
     68e:	fc 91       	ld	r31, X
     690:	64 83       	std	Z+4, r22	; 0x04
     692:	08 95       	ret

00000694 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     694:	dc 01       	movw	r26, r24
     696:	ed 91       	ld	r30, X+
     698:	fc 91       	ld	r31, X
}
     69a:	84 81       	ldd	r24, Z+4	; 0x04
     69c:	08 95       	ret

0000069e <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     69e:	dc 01       	movw	r26, r24
     6a0:	ed 91       	ld	r30, X+
     6a2:	fc 91       	ld	r31, X
     6a4:	76 83       	std	Z+6, r23	; 0x06
     6a6:	65 83       	std	Z+5, r22	; 0x05
     6a8:	08 95       	ret

000006aa <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     6aa:	dc 01       	movw	r26, r24
     6ac:	ed 91       	ld	r30, X+
     6ae:	fc 91       	ld	r31, X
     6b0:	85 81       	ldd	r24, Z+5	; 0x05
     6b2:	96 81       	ldd	r25, Z+6	; 0x06
     6b4:	08 95       	ret

000006b6 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     6ba:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     6bc:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     6be:	80 ef       	ldi	r24, 0xF0	; 240
     6c0:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     6c2:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     6c4:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	08 95       	ret

000006cc <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     6cc:	6d d2       	rcall	.+1242   	; 0xba8 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     6ce:	89 b1       	in	r24, 0x09	; 9
     6d0:	83 70       	andi	r24, 0x03	; 3
     6d2:	e9 f7       	brne	.-6      	; 0x6ce <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     6d4:	84 e2       	ldi	r24, 0x24	; 36
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	6f d5       	rcall	.+2782   	; 0x11b8 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6da:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	45 ec       	ldi	r20, 0xC5	; 197
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	ec d4       	rcall	.+2520   	; 0x10c6 <TIMER_Create>
		_timer[0].state = READY;
     6ee:	cc e2       	ldi	r28, 0x2C	; 44
     6f0:	d3 e0       	ldi	r29, 0x03	; 3
     6f2:	12 e0       	ldi	r17, 0x02	; 2
     6f4:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	49 e7       	ldi	r20, 0x79	; 121
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	df d4       	rcall	.+2494   	; 0x10c6 <TIMER_Create>
		_timer[1].state = BLOCKED;
     708:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	4c e0       	ldi	r20, 0x0C	; 12
     710:	52 e0       	ldi	r21, 0x02	; 2
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	d5 d4       	rcall	.+2474   	; 0x10c6 <TIMER_Create>
		_timer[2].state = BLOCKED;
     71c:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4f e4       	ldi	r20, 0x4F	; 79
     724:	52 e0       	ldi	r21, 0x02	; 2
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	cb d4       	rcall	.+2454   	; 0x10c6 <TIMER_Create>
		_timer[3].state = BLOCKED;
     730:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	47 ec       	ldi	r20, 0xC7	; 199
     738:	52 e0       	ldi	r21, 0x02	; 2
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	c1 d4       	rcall	.+2434   	; 0x10c6 <TIMER_Create>
		_timer[4].state = BLOCKED;
     744:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	47 e9       	ldi	r20, 0x97	; 151
     74c:	52 e0       	ldi	r21, 0x02	; 2
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	84 e6       	ldi	r24, 0x64	; 100
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	b7 d4       	rcall	.+2414   	; 0x10c6 <TIMER_Create>
		_timer[5].state = READY;
     758:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	42 ec       	ldi	r20, 0xC2	; 194
     760:	52 e0       	ldi	r21, 0x02	; 2
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	80 ed       	ldi	r24, 0xD0	; 208
     768:	97 e0       	ldi	r25, 0x07	; 7
     76a:	ad d4       	rcall	.+2394   	; 0x10c6 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     76c:	1e af       	std	Y+62, r17	; 0x3e
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	45 eb       	ldi	r20, 0xB5	; 181
     774:	52 e0       	ldi	r21, 0x02	; 2
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     77c:	93 e1       	ldi	r25, 0x13	; 19
     77e:	a3 d4       	rcall	.+2374   	; 0x10c6 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     780:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <_timer+0x47>
     784:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	17 d5       	rcall	.+2606   	; 0x11b8 <UART_SendString>
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     78e:	5b d0       	rcall	.+182    	; 0x846 <PWM>
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     790:	78 94       	sei
     792:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <g_PauseRequest>
     796:	88 23       	and	r24, r24
     798:	19 f0       	breq	.+6      	; 0x7a0 <main+0xd4>
     79a:	89 e4       	ldi	r24, 0x49	; 73
     79c:	91 e0       	ldi	r25, 0x01	; 1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     79e:	84 d2       	rcall	.+1288   	; 0xca8 <SYS_Pause>
     7a0:	c0 91 06 03 	lds	r28, 0x0306	; 0x800306 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     7a4:	d0 91 07 03 	lds	r29, 0x0307	; 0x800307 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     7a8:	20 97       	sbiw	r28, 0x00	; 0
     7aa:	99 f3       	breq	.-26     	; 0x792 <main+0xc6>
     7ac:	20 97       	sbiw	r28, 0x00	; 0
     7ae:	91 f1       	breq	.+100    	; 0x814 <main+0x148>
     7b0:	ce 01       	movw	r24, r28
     7b2:	4b df       	rcall	.-362    	; 0x64a <LL_GetClass>
     7b4:	84 30       	cpi	r24, 0x04	; 4
     7b6:	71 f5       	brne	.+92     	; 0x814 <main+0x148>
     7b8:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     7ba:	6c df       	rcall	.-296    	; 0x694 <LL_GetStatus>
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	51 f5       	brne	.+84     	; 0x814 <main+0x148>
     7c0:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     7c2:	48 df       	rcall	.-368    	; 0x654 <LL_GetRefl>
     7c4:	8c 01       	movw	r16, r24
     7c6:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     7c8:	4b df       	rcall	.-362    	; 0x660 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     7ca:	88 23       	and	r24, r24
     7cc:	91 f0       	breq	.+36     	; 0x7f2 <main+0x126>
     7ce:	c8 01       	movw	r24, r16
     7d0:	44 97       	sbiw	r24, 0x14	; 20
     7d2:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     7d4:	91 05       	cpc	r25, r1
     7d6:	20 f4       	brcc	.+8      	; 0x7e0 <main+0x114>
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     7dc:	51 df       	rcall	.-350    	; 0x680 <LL_UpdateClass>
     7de:	1a c0       	rjmp	.+52     	; 0x814 <main+0x148>
     7e0:	04 56       	subi	r16, 0x64	; 100
     7e2:	11 09       	sbc	r17, r1
     7e4:	07 32       	cpi	r16, 0x27	; 39
					{
						LL_UpdateClass(temp, STEEL);
     7e6:	12 40       	sbci	r17, 0x02	; 2
     7e8:	a8 f4       	brcc	.+42     	; 0x814 <main+0x148>
     7ea:	63 e0       	ldi	r22, 0x03	; 3
     7ec:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7ee:	48 df       	rcall	.-368    	; 0x680 <LL_UpdateClass>
     7f0:	11 c0       	rjmp	.+34     	; 0x814 <main+0x148>
     7f2:	c8 01       	movw	r24, r16
     7f4:	89 58       	subi	r24, 0x89	; 137
     7f6:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     7f8:	0b 97       	sbiw	r24, 0x0b	; 11
     7fa:	20 f4       	brcc	.+8      	; 0x804 <main+0x138>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	ce 01       	movw	r24, r28
     800:	3f df       	rcall	.-386    	; 0x680 <LL_UpdateClass>
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     802:	08 c0       	rjmp	.+16     	; 0x814 <main+0x148>
     804:	00 52       	subi	r16, 0x20	; 32
     806:	13 40       	sbci	r17, 0x03	; 3
     808:	07 39       	cpi	r16, 0x97	; 151
     80a:	11 05       	cpc	r17, r1
				{
					LL_UpdateClass(temp, BLACK);
     80c:	18 f4       	brcc	.+6      	; 0x814 <main+0x148>
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	ce 01       	movw	r24, r28
     812:	36 df       	rcall	.-404    	; 0x680 <LL_UpdateClass>
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     814:	ce 01       	movw	r24, r28
     816:	f3 de       	rcall	.-538    	; 0x5fe <LL_Next>
     818:	ec 01       	movw	r28, r24
     81a:	89 2b       	or	r24, r25
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     81c:	09 f0       	breq	.+2      	; 0x820 <main+0x154>
     81e:	c6 cf       	rjmp	.-116    	; 0x7ac <main+0xe0>
     820:	b8 cf       	rjmp	.-144    	; 0x792 <main+0xc6>

00000822 <__vector_default>:
     822:	1f 92       	push	r1
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     82c:	8a ea       	ldi	r24, 0xAA	; 170
     82e:	88 b9       	out	0x08, r24	; 8
     830:	fe cf       	rjmp	.-4      	; 0x82e <__vector_default+0xc>

00000832 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     832:	84 b5       	in	r24, 0x24	; 36
     834:	83 68       	ori	r24, 0x83	; 131
     836:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     838:	85 b5       	in	r24, 0x25	; 37
     83a:	83 60       	ori	r24, 0x03	; 3
     83c:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     83e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     842:	87 bd       	out	0x27, r24	; 39
     844:	08 95       	ret

00000846 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     846:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     848:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     84a:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     84c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     850:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     852:	23 2b       	or	r18, r19
     854:	31 f0       	breq	.+12     	; 0x862 <PWM+0x1c>
		{
			g_MotorOn = 1;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <g_MotorOn>
			PORTB = ~0x0E;
     85c:	81 ef       	ldi	r24, 0xF1	; 241
     85e:	85 b9       	out	0x05, r24	; 5
     860:	04 c0       	rjmp	.+8      	; 0x86a <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     862:	10 92 22 03 	sts	0x0322, r1	; 0x800322 <g_MotorOn>
			PORTB = ~0x0F;
     866:	80 ef       	ldi	r24, 0xF0	; 240
     868:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     86a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     86c:	08 95       	ret

0000086e <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     86e:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     870:	e8 e7       	ldi	r30, 0x78	; 120
     872:	f3 e0       	ldi	r31, 0x03	; 3
     874:	10 82       	st	Z, r1
	stepper.direction = 1;
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     87a:	13 82       	std	Z+3, r1	; 0x03
     87c:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     87e:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     880:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     882:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     884:	11 86       	std	Z+9, r1	; 0x09
     886:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     888:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     88a:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     88c:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     88e:	88 ec       	ldi	r24, 0xC8	; 200
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	96 83       	std	Z+6, r25	; 0x06
     894:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     896:	80 e3       	ldi	r24, 0x30	; 48
     898:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     89a:	84 e9       	ldi	r24, 0x94	; 148
     89c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     8a0:	e0 eb       	ldi	r30, 0xB0	; 176
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	82 60       	ori	r24, 0x02	; 2
     8a8:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     8aa:	e0 e7       	ldi	r30, 0x70	; 112
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	82 60       	ori	r24, 0x02	; 2
     8b2:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     8b4:	e1 eb       	ldi	r30, 0xB1	; 177
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	87 60       	ori	r24, 0x07	; 7
     8bc:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     8be:	78 94       	sei
     8c0:	08 95       	ret

000008c2 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	86 1b       	sub	r24, r22
     8c6:	91 09       	sbc	r25, r1
	if (steps >= 0)
     8c8:	52 f0       	brmi	.+20     	; 0x8de <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     8ca:	85 36       	cpi	r24, 0x65	; 101
     8cc:	91 05       	cpc	r25, r1
     8ce:	8c f0       	brlt	.+34     	; 0x8f2 <STEPPER_NumSteps+0x30>
     8d0:	24 e6       	ldi	r18, 0x64	; 100
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	a9 01       	movw	r20, r18
     8d6:	48 1b       	sub	r20, r24
     8d8:	59 0b       	sbc	r21, r25
     8da:	ca 01       	movw	r24, r20
     8dc:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     8de:	8c 39       	cpi	r24, 0x9C	; 156
     8e0:	5f ef       	ldi	r21, 0xFF	; 255
     8e2:	95 07       	cpc	r25, r21
     8e4:	34 f4       	brge	.+12     	; 0x8f2 <STEPPER_NumSteps+0x30>
     8e6:	2c e9       	ldi	r18, 0x9C	; 156
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	a9 01       	movw	r20, r18
     8ec:	48 1b       	sub	r20, r24
     8ee:	59 0b       	sbc	r21, r25
     8f0:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     8f2:	08 95       	ret

000008f4 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     8f8:	c8 e7       	ldi	r28, 0x78	; 120
     8fa:	d3 e0       	ldi	r29, 0x03	; 3
     8fc:	6c 81       	ldd	r22, Y+4	; 0x04
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	9b 81       	ldd	r25, Y+3	; 0x03
     902:	df df       	rcall	.-66     	; 0x8c2 <STEPPER_NumSteps>
     904:	9e 83       	std	Y+6, r25	; 0x06
     906:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     908:	6a 81       	ldd	r22, Y+2	; 0x02
     90a:	7b 81       	ldd	r23, Y+3	; 0x03
     90c:	88 85       	ldd	r24, Y+8	; 0x08
     90e:	99 85       	ldd	r25, Y+9	; 0x09
     910:	d8 df       	rcall	.-80     	; 0x8c2 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     912:	2d 81       	ldd	r18, Y+5	; 0x05
     914:	3e 81       	ldd	r19, Y+6	; 0x06
     916:	33 23       	and	r19, r19
     918:	14 f4       	brge	.+4      	; 0x91e <STEPPER_Rotate+0x2a>
     91a:	28 e0       	ldi	r18, 0x08	; 8
     91c:	01 c0       	rjmp	.+2      	; 0x920 <STEPPER_Rotate+0x2c>
     91e:	24 e0       	ldi	r18, 0x04	; 4
     920:	e8 e7       	ldi	r30, 0x78	; 120
     922:	f3 e0       	ldi	r31, 0x03	; 3
     924:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     926:	45 81       	ldd	r20, Z+5	; 0x05
     928:	56 81       	ldd	r21, Z+6	; 0x06
     92a:	84 9f       	mul	r24, r20
     92c:	90 01       	movw	r18, r0
     92e:	85 9f       	mul	r24, r21
     930:	30 0d       	add	r19, r0
     932:	94 9f       	mul	r25, r20
     934:	30 0d       	add	r19, r0
     936:	11 24       	eor	r1, r1
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	12 16       	cp	r1, r18
     93c:	13 06       	cpc	r1, r19
     93e:	0c f0       	brlt	.+2      	; 0x942 <STEPPER_Rotate+0x4e>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	e8 e7       	ldi	r30, 0x78	; 120
     944:	f3 e0       	ldi	r31, 0x03	; 3
     946:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     948:	85 81       	ldd	r24, Z+5	; 0x05
     94a:	96 81       	ldd	r25, Z+6	; 0x06
     94c:	99 23       	and	r25, r25
     94e:	1c f4       	brge	.+6      	; 0x956 <STEPPER_Rotate+0x62>
     950:	91 95       	neg	r25
     952:	81 95       	neg	r24
     954:	91 09       	sbc	r25, r1
     956:	e8 e7       	ldi	r30, 0x78	; 120
     958:	f3 e0       	ldi	r31, 0x03	; 3
     95a:	96 83       	std	Z+6, r25	; 0x06
     95c:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     95e:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     966:	e8 e7       	ldi	r30, 0x78	; 120
     968:	f3 e0       	ldi	r31, 0x03	; 3
     96a:	24 81       	ldd	r18, Z+4	; 0x04
     96c:	42 81       	ldd	r20, Z+2	; 0x02
     96e:	53 81       	ldd	r21, Z+3	; 0x03
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	24 17       	cp	r18, r20
     974:	35 07       	cpc	r19, r21
     976:	29 f0       	breq	.+10     	; 0x982 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     97c:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     97e:	60 8b       	std	Z+16, r22	; 0x10
     980:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     982:	28 2f       	mov	r18, r24
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	e8 e7       	ldi	r30, 0x78	; 120
     988:	f3 e0       	ldi	r31, 0x03	; 3
     98a:	33 83       	std	Z+3, r19	; 0x03
     98c:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	71 87       	std	Z+9, r23	; 0x09
     992:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     994:	94 81       	ldd	r25, Z+4	; 0x04
     996:	89 13       	cpse	r24, r25
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <STEPPER_SetRotation+0x3c>
     99a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <STEPPER_SAME>
     99e:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <stepper+0xa>
		STEPPER_Rotate();
     9a2:	a8 cf       	rjmp	.-176    	; 0x8f4 <STEPPER_Rotate>
     9a4:	08 95       	ret

000009a6 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     9a6:	1f 92       	push	r1
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	0b b6       	in	r0, 0x3b	; 59
     9b2:	0f 92       	push	r0
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	ef 93       	push	r30
     9ca:	ff 93       	push	r31
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <__vector_13+0x2c>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <__vector_13+0x2e>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     9d8:	86 e3       	ldi	r24, 0x36	; 54
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	9e e2       	ldi	r25, 0x2E	; 46
     9e2:	ad e2       	ldi	r26, 0x2D	; 45
     9e4:	b5 e3       	ldi	r27, 0x35	; 53
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	9a 83       	std	Y+2, r25	; 0x02
     9ea:	ab 83       	std	Y+3, r26	; 0x03
     9ec:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     9ee:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <stepper+0xa>
     9f2:	88 23       	and	r24, r24
     9f4:	29 f0       	breq	.+10     	; 0xa00 <__vector_13+0x5a>
     9f6:	e8 e7       	ldi	r30, 0x78	; 120
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	82 85       	ldd	r24, Z+10	; 0x0a
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     a00:	e8 e7       	ldi	r30, 0x78	; 120
     a02:	f3 e0       	ldi	r31, 0x03	; 3
     a04:	87 81       	ldd	r24, Z+7	; 0x07
     a06:	25 81       	ldd	r18, Z+5	; 0x05
     a08:	36 81       	ldd	r19, Z+6	; 0x06
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	82 17       	cp	r24, r18
     a0e:	93 07       	cpc	r25, r19
     a10:	f9 f4       	brne	.+62     	; 0xa50 <__vector_13+0xaa>
	{

		g_ItemInRange = 0;
     a12:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <g_ItemInRange>
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     a1c:	86 85       	ldd	r24, Z+14	; 0x0e
     a1e:	88 23       	and	r24, r24
     a20:	21 f0       	breq	.+8      	; 0xa2a <__vector_13+0x84>
		{
			stepper.early = 0;
     a22:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     a24:	60 89       	ldd	r22, Z+16	; 0x10
     a26:	87 85       	ldd	r24, Z+15	; 0x0f
     a28:	9e df       	rcall	.-196    	; 0x966 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a2a:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <stepper+0xb>
     a2e:	88 23       	and	r24, r24
     a30:	19 f0       	breq	.+6      	; 0xa38 <__vector_13+0x92>
     a32:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <stepper+0xd>
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <__vector_13+0x94>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	e8 e7       	ldi	r30, 0x78	; 120
     a3c:	f3 e0       	ldi	r31, 0x03	; 3
     a3e:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     a40:	e5 85       	ldd	r30, Z+13	; 0x0d
     a42:	f0 e0       	ldi	r31, 0x00	; 0
     a44:	e0 5f       	subi	r30, 0xF0	; 240
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	80 81       	ld	r24, Z
     a4a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     a4e:	6a c0       	rjmp	.+212    	; 0xb24 <__vector_13+0x17e>
	}
	else if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     a50:	e8 e7       	ldi	r30, 0x78	; 120
     a52:	f3 e0       	ldi	r31, 0x03	; 3
     a54:	87 81       	ldd	r24, Z+7	; 0x07
     a56:	25 81       	ldd	r18, Z+5	; 0x05
     a58:	36 81       	ldd	r19, Z+6	; 0x06
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	82 17       	cp	r24, r18
     a5e:	93 07       	cpc	r25, r19
     a60:	0c f0       	brlt	.+2      	; 0xa64 <__vector_13+0xbe>
     a62:	60 c0       	rjmp	.+192    	; 0xb24 <__vector_13+0x17e>
     a64:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <stepper+0xa>
     a68:	81 11       	cpse	r24, r1
     a6a:	5c c0       	rjmp	.+184    	; 0xb24 <__vector_13+0x17e>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     a6c:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <stepper+0x1>
     a70:	84 30       	cpi	r24, 0x04	; 4
     a72:	51 f4       	brne	.+20     	; 0xa88 <__vector_13+0xe2>
     a74:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper>
     a78:	e1 e0       	ldi	r30, 0x01	; 1
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ec 0f       	add	r30, r28
     a7e:	fd 1f       	adc	r31, r29
     a80:	e8 0f       	add	r30, r24
     a82:	f1 1d       	adc	r31, r1
     a84:	80 81       	ld	r24, Z
     a86:	0d c0       	rjmp	.+26     	; 0xaa2 <__vector_13+0xfc>
     a88:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper>
     a8c:	e3 e0       	ldi	r30, 0x03	; 3
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	e8 1b       	sub	r30, r24
     a92:	f1 09       	sbc	r31, r1
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	8c 0f       	add	r24, r28
     a9a:	9d 1f       	adc	r25, r29
     a9c:	e8 0f       	add	r30, r24
     a9e:	f9 1f       	adc	r31, r25
     aa0:	80 81       	ld	r24, Z
     aa2:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     aa4:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	21 f0       	breq	.+8      	; 0xab4 <__vector_13+0x10e>
     aac:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper>
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <__vector_13+0x110>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	e8 e7       	ldi	r30, 0x78	; 120
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	80 83       	st	Z, r24

		stepper._currentStep++;
     abc:	87 81       	ldd	r24, Z+7	; 0x07
     abe:	8f 5f       	subi	r24, 0xFF	; 255
     ac0:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     ac2:	83 85       	ldd	r24, Z+11	; 0x0b
     ac4:	81 11       	cpse	r24, r1
     ac6:	15 c0       	rjmp	.+42     	; 0xaf2 <__vector_13+0x14c>
     ac8:	85 81       	ldd	r24, Z+5	; 0x05
     aca:	96 81       	ldd	r25, Z+6	; 0x06
     acc:	27 81       	ldd	r18, Z+7	; 0x07
     ace:	82 1b       	sub	r24, r18
     ad0:	91 09       	sbc	r25, r1
     ad2:	06 97       	sbiw	r24, 0x06	; 6
     ad4:	74 f4       	brge	.+28     	; 0xaf2 <__vector_13+0x14c>
     ad6:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <stepper+0xd>
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	e0 5f       	subi	r30, 0xF0	; 240
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	80 81       	ld	r24, Z
     ae2:	84 39       	cpi	r24, 0x94	; 148
     ae4:	30 f4       	brcc	.+12     	; 0xaf2 <__vector_13+0x14c>
		{
			stepper._accellStep--;
     ae6:	e8 e7       	ldi	r30, 0x78	; 120
     ae8:	f3 e0       	ldi	r31, 0x03	; 3
     aea:	85 85       	ldd	r24, Z+13	; 0x0d
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	85 87       	std	Z+13, r24	; 0x0d
     af0:	11 c0       	rjmp	.+34     	; 0xb14 <__vector_13+0x16e>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     af2:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <stepper+0x7>
     af6:	86 30       	cpi	r24, 0x06	; 6
     af8:	68 f0       	brcs	.+26     	; 0xb14 <__vector_13+0x16e>
     afa:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <stepper+0xd>
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	e0 5f       	subi	r30, 0xF0	; 240
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	80 81       	ld	r24, Z
     b06:	81 34       	cpi	r24, 0x41	; 65
     b08:	28 f0       	brcs	.+10     	; 0xb14 <__vector_13+0x16e>
		{
			stepper._accellStep++;
     b0a:	e8 e7       	ldi	r30, 0x78	; 120
     b0c:	f3 e0       	ldi	r31, 0x03	; 3
     b0e:	85 85       	ldd	r24, Z+13	; 0x0d
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     b14:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <stepper+0xd>
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	e0 5f       	subi	r30, 0xF0	; 240
     b1c:	fe 4f       	sbci	r31, 0xFE	; 254
     b1e:	80 81       	ld	r24, Z
     b20:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     b24:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xc>
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	29 f1       	breq	.+74     	; 0xb76 <__vector_13+0x1d0>
	{
		if ((PINE & 0x08) == 0)
     b2c:	63 99       	sbic	0x0c, 3	; 12
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__vector_13+0x192>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     b30:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <STEPPER_OFFSET>
     b34:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     b38:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xc>
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	28 f0       	brcs	.+10     	; 0xb4a <__vector_13+0x1a4>
     b40:	e8 e7       	ldi	r30, 0x78	; 120
     b42:	f3 e0       	ldi	r31, 0x03	; 3
     b44:	84 85       	ldd	r24, Z+12	; 0x0c
     b46:	81 50       	subi	r24, 0x01	; 1
     b48:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     b4a:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <stepper+0xc>
     b4e:	81 30       	cpi	r24, 0x01	; 1
     b50:	91 f4       	brne	.+36     	; 0xb76 <__vector_13+0x1d0>
		{
			stepper._isInitiated = 1;
     b52:	e8 e7       	ldi	r30, 0x78	; 120
     b54:	f3 e0       	ldi	r31, 0x03	; 3
     b56:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     b58:	10 82       	st	Z, r1
			stepper.direction = 1;
     b5a:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     b5c:	13 82       	std	Z+3, r1	; 0x03
     b5e:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     b60:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     b62:	16 82       	std	Z+6, r1	; 0x06
     b64:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     b66:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     b68:	11 86       	std	Z+9, r1	; 0x09
     b6a:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     b6c:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     b6e:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     b70:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     b72:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     b74:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0b be       	out	0x3b, r0	; 59
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	f8 94       	cli
     bb0:	e1 e6       	ldi	r30, 0x61	; 97
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	80 83       	st	Z, r24
     bb8:	10 82       	st	Z, r1
     bba:	e6 d2       	rcall	.+1484   	; 0x1188 <UART_Init>
     bbc:	7c dd       	rcall	.-1288   	; 0x6b6 <GPIO_Init>
     bbe:	69 d2       	rcall	.+1234   	; 0x1092 <TIMER_Init>
     bc0:	38 de       	rcall	.-912    	; 0x832 <PWM_Init>
     bc2:	89 da       	rcall	.-2798   	; 0xd6 <ADC_Init>
     bc4:	54 de       	rcall	.-856    	; 0x86e <STEPPER_Init>
     bc6:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <g_ADCCount+0x1>
     bca:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <g_ADCCount>
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	ec e0       	ldi	r30, 0x0C	; 12
     bd2:	f3 e0       	ldi	r31, 0x03	; 3
     bd4:	df 01       	movw	r26, r30
     bd6:	1d 92       	st	X+, r1
     bd8:	8a 95       	dec	r24
     bda:	e9 f7       	brne	.-6      	; 0xbd6 <SYS_Init+0x2e>
     bdc:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <g_PauseRequest>
     be0:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <g_WDTimeout>
     be4:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <g_Timer+0x1>
     be8:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <g_Timer>
     bec:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <g_Lock>
     bf0:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <g_ItemInRange>
     bf4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <HEAD+0x1>
     bf8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <HEAD>
     bfc:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <TAIL+0x1>
     c00:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <TAIL>
     c04:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <STAGE1+0x1>
     c08:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <STAGE1>
     c0c:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <STAGE2+0x1>
     c10:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <STAGE2>
     c14:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <FRONT+0x1>
     c18:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <FRONT>
     c1c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <BUFFER+0x1>
     c20:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <BUFFER>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	44 e0       	ldi	r20, 0x04	; 4
     c28:	6f ef       	ldi	r22, 0xFF	; 255
     c2a:	89 ee       	ldi	r24, 0xE9	; 233
     c2c:	9d ef       	ldi	r25, 0xFD	; 253
     c2e:	bd dc       	rcall	.-1670   	; 0x5aa <LL_ItemInit>
     c30:	d6 dc       	rcall	.-1620   	; 0x5de <LL_ItemListInit>
     c32:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <HEAD+0x1>
     c36:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <HEAD>
     c3a:	90 93 09 03 	sts	0x0309, r25	; 0x800309 <FRONT+0x1>
     c3e:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <FRONT>
     c42:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <BUFFER+0x1>
     c46:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <BUFFER>
     c4a:	ca ef       	ldi	r28, 0xFA	; 250
     c4c:	08 ee       	ldi	r16, 0xE8	; 232
     c4e:	1d ef       	ldi	r17, 0xFD	; 253
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	44 e0       	ldi	r20, 0x04	; 4
     c54:	6c 2f       	mov	r22, r28
     c56:	c8 01       	movw	r24, r16
     c58:	a8 dc       	rcall	.-1712   	; 0x5aa <LL_ItemInit>
     c5a:	bc 01       	movw	r22, r24
     c5c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     c60:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     c64:	d0 dc       	rcall	.-1632   	; 0x606 <LL_AddBack>
     c66:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <TAIL+0x1>
     c6a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <TAIL>
     c6e:	01 50       	subi	r16, 0x01	; 1
     c70:	11 09       	sbc	r17, r1
     c72:	c1 50       	subi	r28, 0x01	; 1
     c74:	cb 3c       	cpi	r28, 0xCB	; 203
     c76:	61 f7       	brne	.-40     	; 0xc50 <SYS_Init+0xa8>
     c78:	05 e0       	ldi	r16, 0x05	; 5
     c7a:	10 e0       	ldi	r17, 0x00	; 0
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	45 e0       	ldi	r20, 0x05	; 5
     c80:	6a ef       	ldi	r22, 0xFA	; 250
     c82:	88 ee       	ldi	r24, 0xE8	; 232
     c84:	9d ef       	ldi	r25, 0xFD	; 253
     c86:	91 dc       	rcall	.-1758   	; 0x5aa <LL_ItemInit>
     c88:	bc 01       	movw	r22, r24
     c8a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     c8e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     c92:	b9 dc       	rcall	.-1678   	; 0x606 <LL_AddBack>
     c94:	01 50       	subi	r16, 0x01	; 1
     c96:	11 09       	sbc	r17, r1
     c98:	89 f7       	brne	.-30     	; 0xc7c <SYS_Init+0xd4>
     c9a:	80 e5       	ldi	r24, 0x50	; 80
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	8c d2       	rcall	.+1304   	; 0x11b8 <UART_SendString>
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <SYS_Pause>:
     ca8:	3f 92       	push	r3
     caa:	4f 92       	push	r4
     cac:	5f 92       	push	r5
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	ca 5f       	subi	r28, 0xFA	; 250
     cd0:	d1 09       	sbc	r29, r1
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	f8 2e       	mov	r15, r24
     cde:	e9 2e       	mov	r14, r25
     ce0:	f8 94       	cli
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	af dd       	rcall	.-1186   	; 0x846 <PWM>
     ce8:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <FRONT>
     cec:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <FRONT+0x1>
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	86 e6       	ldi	r24, 0x66	; 102
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	7c 01       	movw	r14, r24
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	87 d3       	rcall	.+1806   	; 0x1416 <sprintf>
     d08:	c7 01       	movw	r24, r14
     d0a:	56 d2       	rcall	.+1196   	; 0x11b8 <UART_SendString>
     d0c:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <HEAD>
     d10:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <HEAD+0x1>
     d14:	ca dc       	rcall	.-1644   	; 0x6aa <LL_GetTick>
     d16:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <g_Timer>
     d1a:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <g_Timer+0x1>
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	3f 93       	push	r19
     d24:	2f 93       	push	r18
     d26:	81 e8       	ldi	r24, 0x81	; 129
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	ff 92       	push	r15
     d30:	ef 92       	push	r14
     d32:	71 d3       	rcall	.+1762   	; 0x1416 <sprintf>
     d34:	c7 01       	movw	r24, r14
     d36:	40 d2       	rcall	.+1152   	; 0x11b8 <UART_SendString>
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	e1 2c       	mov	r14, r1
     d44:	f1 2c       	mov	r15, r1
     d46:	0f 2e       	mov	r0, r31
     d48:	f0 ea       	ldi	r31, 0xA0	; 160
     d4a:	af 2e       	mov	r10, r31
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	bf 2e       	mov	r11, r31
     d50:	f0 2d       	mov	r31, r0
     d52:	6e 01       	movw	r12, r28
     d54:	f7 e9       	ldi	r31, 0x97	; 151
     d56:	cf 0e       	add	r12, r31
     d58:	d1 1c       	adc	r13, r1
     d5a:	2d c0       	rjmp	.+90     	; 0xdb6 <SYS_Pause+0x10e>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	e8 1a       	sub	r14, r24
     d60:	f8 0a       	sbc	r15, r24
     d62:	c8 01       	movw	r24, r16
     d64:	a2 dc       	rcall	.-1724   	; 0x6aa <LL_GetTick>
     d66:	68 2e       	mov	r6, r24
     d68:	59 2e       	mov	r5, r25
     d6a:	c8 01       	movw	r24, r16
     d6c:	93 dc       	rcall	.-1754   	; 0x694 <LL_GetStatus>
     d6e:	78 2e       	mov	r7, r24
     d70:	c8 01       	movw	r24, r16
     d72:	6b dc       	rcall	.-1834   	; 0x64a <LL_GetClass>
     d74:	88 2e       	mov	r8, r24
     d76:	c8 01       	movw	r24, r16
     d78:	73 dc       	rcall	.-1818   	; 0x660 <LL_GetMag>
     d7a:	98 2e       	mov	r9, r24
     d7c:	c8 01       	movw	r24, r16
     d7e:	6a dc       	rcall	.-1836   	; 0x654 <LL_GetRefl>
     d80:	5f 92       	push	r5
     d82:	6f 92       	push	r6
     d84:	1f 92       	push	r1
     d86:	7f 92       	push	r7
     d88:	1f 92       	push	r1
     d8a:	8f 92       	push	r8
     d8c:	1f 92       	push	r1
     d8e:	9f 92       	push	r9
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	ff 92       	push	r15
     d96:	ef 92       	push	r14
     d98:	bf 92       	push	r11
     d9a:	af 92       	push	r10
     d9c:	df 92       	push	r13
     d9e:	cf 92       	push	r12
     da0:	3a d3       	rcall	.+1652   	; 0x1416 <sprintf>
     da2:	c6 01       	movw	r24, r12
     da4:	09 d2       	rcall	.+1042   	; 0x11b8 <UART_SendString>
     da6:	c8 01       	movw	r24, r16
     da8:	2a dc       	rcall	.-1964   	; 0x5fe <LL_Next>
     daa:	8c 01       	movw	r16, r24
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	c8 01       	movw	r24, r16
     db8:	48 dc       	rcall	.-1904   	; 0x64a <LL_GetClass>
     dba:	85 30       	cpi	r24, 0x05	; 5
     dbc:	79 f6       	brne	.-98     	; 0xd5c <SYS_Pause+0xb4>
     dbe:	0f 2e       	mov	r0, r31
     dc0:	fc e2       	ldi	r31, 0x2C	; 44
     dc2:	cf 2e       	mov	r12, r31
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	df 2e       	mov	r13, r31
     dc8:	f0 2d       	mov	r31, r0
     dca:	00 e0       	ldi	r16, 0x00	; 0
     dcc:	10 e0       	ldi	r17, 0x00	; 0
     dce:	0f 2e       	mov	r0, r31
     dd0:	fe ed       	ldi	r31, 0xDE	; 222
     dd2:	af 2e       	mov	r10, r31
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	bf 2e       	mov	r11, r31
     dd8:	f0 2d       	mov	r31, r0
     dda:	7e 01       	movw	r14, r28
     ddc:	f7 e9       	ldi	r31, 0x97	; 151
     dde:	ef 0e       	add	r14, r31
     de0:	f1 1c       	adc	r15, r1
     de2:	f6 01       	movw	r30, r12
     de4:	80 85       	ldd	r24, Z+8	; 0x08
     de6:	1f 92       	push	r1
     de8:	8f 93       	push	r24
     dea:	1f 93       	push	r17
     dec:	0f 93       	push	r16
     dee:	bf 92       	push	r11
     df0:	af 92       	push	r10
     df2:	ff 92       	push	r15
     df4:	ef 92       	push	r14
     df6:	0f d3       	rcall	.+1566   	; 0x1416 <sprintf>
     df8:	c7 01       	movw	r24, r14
     dfa:	de d1       	rcall	.+956    	; 0x11b8 <UART_SendString>
     dfc:	0f 5f       	subi	r16, 0xFF	; 255
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	f9 e0       	ldi	r31, 0x09	; 9
     e02:	cf 0e       	add	r12, r31
     e04:	d1 1c       	adc	r13, r1
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	07 30       	cpi	r16, 0x07	; 7
     e12:	11 05       	cpc	r17, r1
     e14:	31 f7       	brne	.-52     	; 0xde2 <SYS_Pause+0x13a>
     e16:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <STAGE2>
     e1a:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <STAGE2+0x1>
     e1e:	1a dc       	rcall	.-1996   	; 0x654 <LL_GetRefl>
     e20:	48 2e       	mov	r4, r24
     e22:	39 2e       	mov	r3, r25
     e24:	60 90 74 03 	lds	r6, 0x0374	; 0x800374 <STAGE2>
     e28:	50 90 75 03 	lds	r5, 0x0375	; 0x800375 <STAGE2+0x1>
     e2c:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <STAGE1>
     e30:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <STAGE1+0x1>
     e34:	15 dc       	rcall	.-2006   	; 0x660 <LL_GetMag>
     e36:	78 2e       	mov	r7, r24
     e38:	90 90 2a 03 	lds	r9, 0x032A	; 0x80032a <STAGE1>
     e3c:	80 90 2b 03 	lds	r8, 0x032B	; 0x80032b <STAGE1+0x1>
     e40:	00 91 0a 03 	lds	r16, 0x030A	; 0x80030a <TAIL>
     e44:	10 91 0b 03 	lds	r17, 0x030B	; 0x80030b <TAIL+0x1>
     e48:	f8 01       	movw	r30, r16
     e4a:	b2 80       	ldd	r11, Z+2	; 0x02
     e4c:	a3 80       	ldd	r10, Z+3	; 0x03
     e4e:	d0 90 08 03 	lds	r13, 0x0308	; 0x800308 <FRONT>
     e52:	c0 90 09 03 	lds	r12, 0x0309	; 0x800309 <FRONT+0x1>
     e56:	f0 90 06 03 	lds	r15, 0x0306	; 0x800306 <HEAD>
     e5a:	e0 90 07 03 	lds	r14, 0x0307	; 0x800307 <HEAD+0x1>
     e5e:	8f 2d       	mov	r24, r15
     e60:	9e 2d       	mov	r25, r14
     e62:	e2 db       	rcall	.-2108   	; 0x628 <LL_Size>
     e64:	3f 92       	push	r3
     e66:	4f 92       	push	r4
     e68:	5f 92       	push	r5
     e6a:	6f 92       	push	r6
     e6c:	1f 92       	push	r1
     e6e:	7f 92       	push	r7
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	1f 93       	push	r17
     e7e:	0f 93       	push	r16
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	1f 92       	push	r1
     e86:	8f 93       	push	r24
     e88:	85 ef       	ldi	r24, 0xF5	; 245
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	9f 93       	push	r25
     e8e:	8f 93       	push	r24
     e90:	8e 01       	movw	r16, r28
     e92:	0b 59       	subi	r16, 0x9B	; 155
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	1f 93       	push	r17
     e98:	0f 93       	push	r16
     e9a:	bd d2       	rcall	.+1402   	; 0x1416 <sprintf>
     e9c:	c8 01       	movw	r24, r16
     e9e:	8c d1       	rcall	.+792    	; 0x11b8 <UART_SendString>
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	89 b1       	in	r24, 0x09	; 9
     eac:	83 70       	andi	r24, 0x03	; 3
     eae:	e9 f7       	brne	.-6      	; 0xeaa <SYS_Pause+0x202>
     eb0:	84 e2       	ldi	r24, 0x24	; 36
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	81 d1       	rcall	.+770    	; 0x11b8 <UART_SendString>
     eb6:	80 e8       	ldi	r24, 0x80	; 128
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	c5 dc       	rcall	.-1654   	; 0x846 <PWM>
     ebc:	78 94       	sei
     ebe:	c6 50       	subi	r28, 0x06	; 6
     ec0:	df 4f       	sbci	r29, 0xFF	; 255
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	5f 90       	pop	r5
     eea:	4f 90       	pop	r4
     eec:	3f 90       	pop	r3
     eee:	08 95       	ret

00000ef0 <SYS_Rampdown>:

void SYS_Rampdown()
{
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	e8 97       	sbiw	r28, 0x38	; 56
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
     f0a:	fe 01       	movw	r30, r28
     f0c:	31 96       	adiw	r30, 0x01	; 1
     f0e:	86 e0       	ldi	r24, 0x06	; 6
     f10:	df 01       	movw	r26, r30
     f12:	1d 92       	st	X+, r1
     f14:	8a 95       	dec	r24
     f16:	e9 f7       	brne	.-6      	; 0xf12 <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
     f18:	00 91 08 03 	lds	r16, 0x0308	; 0x800308 <FRONT>
     f1c:	10 91 09 03 	lds	r17, 0x0309	; 0x800309 <FRONT+0x1>
	
	cli();
     f20:	f8 94       	cli
	PORTD = 0;
     f22:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
     f24:	18 b8       	out	0x08, r1	; 8
	PWM(0);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	8d dc       	rcall	.-1766   	; 0x846 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
     f2c:	8b e7       	ldi	r24, 0x7B	; 123
     f2e:	92 e0       	ldi	r25, 0x02	; 2
     f30:	43 d1       	rcall	.+646    	; 0x11b8 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
     f32:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     f34:	0f c0       	rjmp	.+30     	; 0xf54 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
     f36:	f3 94       	inc	r15
     f38:	c8 01       	movw	r24, r16
     f3a:	87 db       	rcall	.-2290   	; 0x64a <LL_GetClass>
     f3c:	e1 e0       	ldi	r30, 0x01	; 1
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	ec 0f       	add	r30, r28
     f42:	fd 1f       	adc	r31, r29
     f44:	e8 0f       	add	r30, r24
     f46:	f1 1d       	adc	r31, r1
     f48:	80 81       	ld	r24, Z
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
     f4c:	80 83       	st	Z, r24
     f4e:	c8 01       	movw	r24, r16
     f50:	56 db       	rcall	.-2388   	; 0x5fe <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
     f52:	8c 01       	movw	r16, r24
     f54:	c8 01       	movw	r24, r16
     f56:	9e db       	rcall	.-2244   	; 0x694 <LL_GetStatus>
     f58:	83 30       	cpi	r24, 0x03	; 3
     f5a:	69 f3       	breq	.-38     	; 0xf36 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	1f 92       	push	r1
     f60:	8f 93       	push	r24
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	1f 92       	push	r1
     f66:	8f 93       	push	r24
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	1f 92       	push	r1
     f6c:	8f 93       	push	r24
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	1f 92       	push	r1
     f72:	8f 93       	push	r24
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	1f 92       	push	r1
     f78:	8f 93       	push	r24
     f7a:	1f 92       	push	r1
     f7c:	ff 92       	push	r15
     f7e:	80 ea       	ldi	r24, 0xA0	; 160
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	8e 01       	movw	r16, r28
     f88:	09 5f       	subi	r16, 0xF9	; 249
     f8a:	1f 4f       	sbci	r17, 0xFF	; 255
     f8c:	1f 93       	push	r17
     f8e:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
     f90:	42 d2       	rcall	.+1156   	; 0x1416 <sprintf>
     f92:	c8 01       	movw	r24, r16
     f94:	11 d1       	rcall	.+546    	; 0x11b8 <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	e8 96       	adiw	r28, 0x38	; 56
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	08 95       	ret

00000fb8 <__vector_17>:
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	2f 93       	push	r18
     fd0:	3f 93       	push	r19
     fd2:	4f 93       	push	r20
     fd4:	5f 93       	push	r21
     fd6:	6f 93       	push	r22
     fd8:	7f 93       	push	r23
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     fea:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <_timer_tick>
     fee:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <_timer_tick+0x1>
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <_timer_tick+0x1>
     ff8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <_timer_tick>
     ffc:	cc e2       	ldi	r28, 0x2C	; 44
     ffe:	d3 e0       	ldi	r29, 0x03	; 3
    1000:	0f 2e       	mov	r0, r31
    1002:	f4 e7       	ldi	r31, 0x74	; 116
    1004:	ef 2e       	mov	r14, r31
    1006:	f3 e0       	ldi	r31, 0x03	; 3
    1008:	ff 2e       	mov	r15, r31
    100a:	f0 2d       	mov	r31, r0
    100c:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    100e:	ec 81       	ldd	r30, Y+4	; 0x04
    1010:	fd 81       	ldd	r31, Y+5	; 0x05
    1012:	30 97       	sbiw	r30, 0x00	; 0
    1014:	09 f1       	breq	.+66     	; 0x1058 <__vector_17+0xa0>
    1016:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <_timer_tick>
    101a:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <_timer_tick+0x1>
    101e:	28 81       	ld	r18, Y
    1020:	39 81       	ldd	r19, Y+1	; 0x01
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	c1 f4       	brne	.+48     	; 0x1058 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    1028:	88 85       	ldd	r24, Y+8	; 0x08
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	19 f4       	brne	.+6      	; 0x1034 <__vector_17+0x7c>
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	9f 81       	ldd	r25, Y+7	; 0x07
    1032:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1034:	d8 01       	movw	r26, r16
    1036:	12 96       	adiw	r26, 0x02	; 2
    1038:	8d 91       	ld	r24, X+
    103a:	9c 91       	ld	r25, X
    103c:	13 97       	sbiw	r26, 0x03	; 3
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	41 f0       	breq	.+16     	; 0x1052 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1042:	2d 91       	ld	r18, X+
    1044:	3c 91       	ld	r19, X
    1046:	11 97       	sbiw	r26, 0x01	; 1
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	8d 93       	st	X+, r24
    104e:	9c 93       	st	X, r25
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1052:	f8 01       	movw	r30, r16
    1054:	15 82       	std	Z+5, r1	; 0x05
    1056:	14 82       	std	Z+4, r1	; 0x04
    1058:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    105a:	ce 15       	cp	r28, r14
    105c:	df 05       	cpc	r29, r15
    105e:	b1 f6       	brne	.-84     	; 0x100c <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	ff 90       	pop	r15
    1082:	ef 90       	pop	r14
    1084:	0f 90       	pop	r0
    1086:	0b be       	out	0x3b, r0	; 59
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    1092:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1096:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    109a:	88 e4       	ldi	r24, 0x48	; 72
    109c:	98 e0       	ldi	r25, 0x08	; 8
    109e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    10a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    10a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    10aa:	89 e0       	ldi	r24, 0x09	; 9
    10ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    10b6:	88 e4       	ldi	r24, 0x48	; 72
    10b8:	ec e2       	ldi	r30, 0x2C	; 44
    10ba:	f3 e0       	ldi	r31, 0x03	; 3
    10bc:	df 01       	movw	r26, r30
    10be:	1d 92       	st	X+, r1
    10c0:	8a 95       	dec	r24
    10c2:	e9 f7       	brne	.-6      	; 0x10be <TIMER_Init+0x2c>
    10c4:	08 95       	ret

000010c6 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    10d0:	60 91 30 03 	lds	r22, 0x0330	; 0x800330 <_timer+0x4>
    10d4:	70 91 31 03 	lds	r23, 0x0331	; 0x800331 <_timer+0x5>
    10d8:	67 2b       	or	r22, r23
    10da:	09 f4       	brne	.+2      	; 0x10de <TIMER_Create+0x18>
    10dc:	49 c0       	rjmp	.+146    	; 0x1170 <TIMER_Create+0xaa>
    10de:	ec e2       	ldi	r30, 0x2C	; 44
    10e0:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10e2:	a1 e0       	ldi	r26, 0x01	; 1
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    10e6:	c5 85       	ldd	r28, Z+13	; 0x0d
    10e8:	d6 85       	ldd	r29, Z+14	; 0x0e
    10ea:	cd 2b       	or	r28, r29
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <TIMER_Create+0x2a>
    10ee:	42 c0       	rjmp	.+132    	; 0x1174 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    10f0:	11 96       	adiw	r26, 0x01	; 1
    10f2:	39 96       	adiw	r30, 0x09	; 9
    10f4:	a8 30       	cpi	r26, 0x08	; 8
    10f6:	b1 05       	cpc	r27, r1
    10f8:	b1 f7       	brne	.-20     	; 0x10e6 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1100:	fd 01       	movw	r30, r26
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	ee 0f       	add	r30, r30
    1108:	ff 1f       	adc	r31, r31
    110a:	ee 0f       	add	r30, r30
    110c:	ff 1f       	adc	r31, r31
    110e:	ea 0f       	add	r30, r26
    1110:	fb 1f       	adc	r31, r27
    1112:	e4 5d       	subi	r30, 0xD4	; 212
    1114:	fc 4f       	sbci	r31, 0xFC	; 252
    1116:	93 83       	std	Z+3, r25	; 0x03
    1118:	82 83       	std	Z+2, r24	; 0x02
    111a:	0d c0       	rjmp	.+26     	; 0x1136 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    111c:	fd 01       	movw	r30, r26
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	ee 0f       	add	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	ea 0f       	add	r30, r26
    112c:	fb 1f       	adc	r31, r27
    112e:	e4 5d       	subi	r30, 0xD4	; 212
    1130:	fc 4f       	sbci	r31, 0xFC	; 252
    1132:	13 82       	std	Z+3, r1	; 0x03
    1134:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1136:	fd 01       	movw	r30, r26
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ea 0f       	add	r30, r26
    1146:	fb 1f       	adc	r31, r27
    1148:	e4 5d       	subi	r30, 0xD4	; 212
    114a:	fc 4f       	sbci	r31, 0xFC	; 252
    114c:	55 83       	std	Z+5, r21	; 0x05
    114e:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1150:	37 83       	std	Z+7, r19	; 0x07
    1152:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    1154:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <_timer_tick>
    1158:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <_timer_tick+0x1>
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	80 83       	st	Z, r24
			_timer[i].state = READY;
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1168:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    116a:	8a 2f       	mov	r24, r26
    116c:	9b 2f       	mov	r25, r27
    116e:	07 c0       	rjmp	.+14     	; 0x117e <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1174:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1176:	f8 94       	cli
		{
			if (periodic != 0) 
    1178:	01 2b       	or	r16, r17
    117a:	11 f6       	brne	.-124    	; 0x1100 <TIMER_Create+0x3a>
    117c:	cf cf       	rjmp	.-98     	; 0x111c <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1188:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    118c:	83 e3       	ldi	r24, 0x33	; 51
    118e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1192:	e9 ec       	ldi	r30, 0xC9	; 201
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	88 61       	ori	r24, 0x18	; 24
    119a:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    119c:	ea ec       	ldi	r30, 0xCA	; 202
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	86 60       	ori	r24, 0x06	; 6
    11a4:	80 83       	st	Z, r24
    11a6:	08 95       	ret

000011a8 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    11a8:	e8 ec       	ldi	r30, 0xC8	; 200
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	90 81       	ld	r25, Z
    11ae:	95 ff       	sbrs	r25, 5
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <UART_SendChar+0x4>
	UDR1 = c;
    11b2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    11b6:	08 95       	ret

000011b8 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    11be:	88 81       	ld	r24, Y
    11c0:	88 23       	and	r24, r24
    11c2:	29 f0       	breq	.+10     	; 0x11ce <UART_SendString+0x16>
    11c4:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    11c6:	f0 df       	rcall	.-32     	; 0x11a8 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    11c8:	89 91       	ld	r24, Y+
    11ca:	81 11       	cpse	r24, r1
    11cc:	fc cf       	rjmp	.-8      	; 0x11c6 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <malloc>:
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	82 30       	cpi	r24, 0x02	; 2
    11de:	91 05       	cpc	r25, r1
    11e0:	10 f4       	brcc	.+4      	; 0x11e6 <malloc+0x12>
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <__flp>
    11ea:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <__flp+0x1>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	19 f1       	breq	.+70     	; 0x1240 <malloc+0x6c>
    11fa:	40 81       	ld	r20, Z
    11fc:	51 81       	ldd	r21, Z+1	; 0x01
    11fe:	02 81       	ldd	r16, Z+2	; 0x02
    1200:	13 81       	ldd	r17, Z+3	; 0x03
    1202:	48 17       	cp	r20, r24
    1204:	59 07       	cpc	r21, r25
    1206:	c8 f0       	brcs	.+50     	; 0x123a <malloc+0x66>
    1208:	84 17       	cp	r24, r20
    120a:	95 07       	cpc	r25, r21
    120c:	69 f4       	brne	.+26     	; 0x1228 <malloc+0x54>
    120e:	10 97       	sbiw	r26, 0x00	; 0
    1210:	31 f0       	breq	.+12     	; 0x121e <malloc+0x4a>
    1212:	12 96       	adiw	r26, 0x02	; 2
    1214:	0c 93       	st	X, r16
    1216:	12 97       	sbiw	r26, 0x02	; 2
    1218:	13 96       	adiw	r26, 0x03	; 3
    121a:	1c 93       	st	X, r17
    121c:	27 c0       	rjmp	.+78     	; 0x126c <malloc+0x98>
    121e:	00 93 8b 03 	sts	0x038B, r16	; 0x80038b <__flp>
    1222:	10 93 8c 03 	sts	0x038C, r17	; 0x80038c <__flp+0x1>
    1226:	22 c0       	rjmp	.+68     	; 0x126c <malloc+0x98>
    1228:	21 15       	cp	r18, r1
    122a:	31 05       	cpc	r19, r1
    122c:	19 f0       	breq	.+6      	; 0x1234 <malloc+0x60>
    122e:	42 17       	cp	r20, r18
    1230:	53 07       	cpc	r21, r19
    1232:	18 f4       	brcc	.+6      	; 0x123a <malloc+0x66>
    1234:	9a 01       	movw	r18, r20
    1236:	bd 01       	movw	r22, r26
    1238:	ef 01       	movw	r28, r30
    123a:	df 01       	movw	r26, r30
    123c:	f8 01       	movw	r30, r16
    123e:	db cf       	rjmp	.-74     	; 0x11f6 <malloc+0x22>
    1240:	21 15       	cp	r18, r1
    1242:	31 05       	cpc	r19, r1
    1244:	f9 f0       	breq	.+62     	; 0x1284 <malloc+0xb0>
    1246:	28 1b       	sub	r18, r24
    1248:	39 0b       	sbc	r19, r25
    124a:	24 30       	cpi	r18, 0x04	; 4
    124c:	31 05       	cpc	r19, r1
    124e:	80 f4       	brcc	.+32     	; 0x1270 <malloc+0x9c>
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	61 15       	cp	r22, r1
    1256:	71 05       	cpc	r23, r1
    1258:	21 f0       	breq	.+8      	; 0x1262 <malloc+0x8e>
    125a:	fb 01       	movw	r30, r22
    125c:	93 83       	std	Z+3, r25	; 0x03
    125e:	82 83       	std	Z+2, r24	; 0x02
    1260:	04 c0       	rjmp	.+8      	; 0x126a <malloc+0x96>
    1262:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <__flp+0x1>
    1266:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <__flp>
    126a:	fe 01       	movw	r30, r28
    126c:	32 96       	adiw	r30, 0x02	; 2
    126e:	44 c0       	rjmp	.+136    	; 0x12f8 <malloc+0x124>
    1270:	fe 01       	movw	r30, r28
    1272:	e2 0f       	add	r30, r18
    1274:	f3 1f       	adc	r31, r19
    1276:	81 93       	st	Z+, r24
    1278:	91 93       	st	Z+, r25
    127a:	22 50       	subi	r18, 0x02	; 2
    127c:	31 09       	sbc	r19, r1
    127e:	39 83       	std	Y+1, r19	; 0x01
    1280:	28 83       	st	Y, r18
    1282:	3a c0       	rjmp	.+116    	; 0x12f8 <malloc+0x124>
    1284:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <__brkval>
    1288:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <__brkval+0x1>
    128c:	23 2b       	or	r18, r19
    128e:	41 f4       	brne	.+16     	; 0x12a0 <malloc+0xcc>
    1290:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1294:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1298:	30 93 8a 03 	sts	0x038A, r19	; 0x80038a <__brkval+0x1>
    129c:	20 93 89 03 	sts	0x0389, r18	; 0x800389 <__brkval>
    12a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    12a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    12a8:	21 15       	cp	r18, r1
    12aa:	31 05       	cpc	r19, r1
    12ac:	41 f4       	brne	.+16     	; 0x12be <malloc+0xea>
    12ae:	2d b7       	in	r18, 0x3d	; 61
    12b0:	3e b7       	in	r19, 0x3e	; 62
    12b2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12b6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12ba:	24 1b       	sub	r18, r20
    12bc:	35 0b       	sbc	r19, r21
    12be:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <__brkval>
    12c2:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <__brkval+0x1>
    12c6:	e2 17       	cp	r30, r18
    12c8:	f3 07       	cpc	r31, r19
    12ca:	a0 f4       	brcc	.+40     	; 0x12f4 <malloc+0x120>
    12cc:	2e 1b       	sub	r18, r30
    12ce:	3f 0b       	sbc	r19, r31
    12d0:	28 17       	cp	r18, r24
    12d2:	39 07       	cpc	r19, r25
    12d4:	78 f0       	brcs	.+30     	; 0x12f4 <malloc+0x120>
    12d6:	ac 01       	movw	r20, r24
    12d8:	4e 5f       	subi	r20, 0xFE	; 254
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	24 17       	cp	r18, r20
    12de:	35 07       	cpc	r19, r21
    12e0:	48 f0       	brcs	.+18     	; 0x12f4 <malloc+0x120>
    12e2:	4e 0f       	add	r20, r30
    12e4:	5f 1f       	adc	r21, r31
    12e6:	50 93 8a 03 	sts	0x038A, r21	; 0x80038a <__brkval+0x1>
    12ea:	40 93 89 03 	sts	0x0389, r20	; 0x800389 <__brkval>
    12ee:	81 93       	st	Z+, r24
    12f0:	91 93       	st	Z+, r25
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <malloc+0x124>
    12f4:	e0 e0       	ldi	r30, 0x00	; 0
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	cf 01       	movw	r24, r30
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <free>:
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	09 f4       	brne	.+2      	; 0x130e <free+0xa>
    130c:	81 c0       	rjmp	.+258    	; 0x1410 <free+0x10c>
    130e:	fc 01       	movw	r30, r24
    1310:	32 97       	sbiw	r30, 0x02	; 2
    1312:	13 82       	std	Z+3, r1	; 0x03
    1314:	12 82       	std	Z+2, r1	; 0x02
    1316:	a0 91 8b 03 	lds	r26, 0x038B	; 0x80038b <__flp>
    131a:	b0 91 8c 03 	lds	r27, 0x038C	; 0x80038c <__flp+0x1>
    131e:	10 97       	sbiw	r26, 0x00	; 0
    1320:	81 f4       	brne	.+32     	; 0x1342 <free+0x3e>
    1322:	20 81       	ld	r18, Z
    1324:	31 81       	ldd	r19, Z+1	; 0x01
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <__brkval>
    132e:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <__brkval+0x1>
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	51 f5       	brne	.+84     	; 0x138c <free+0x88>
    1338:	f0 93 8a 03 	sts	0x038A, r31	; 0x80038a <__brkval+0x1>
    133c:	e0 93 89 03 	sts	0x0389, r30	; 0x800389 <__brkval>
    1340:	67 c0       	rjmp	.+206    	; 0x1410 <free+0x10c>
    1342:	ed 01       	movw	r28, r26
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	ce 17       	cp	r28, r30
    134a:	df 07       	cpc	r29, r31
    134c:	40 f4       	brcc	.+16     	; 0x135e <free+0x5a>
    134e:	4a 81       	ldd	r20, Y+2	; 0x02
    1350:	5b 81       	ldd	r21, Y+3	; 0x03
    1352:	9e 01       	movw	r18, r28
    1354:	41 15       	cp	r20, r1
    1356:	51 05       	cpc	r21, r1
    1358:	f1 f0       	breq	.+60     	; 0x1396 <free+0x92>
    135a:	ea 01       	movw	r28, r20
    135c:	f5 cf       	rjmp	.-22     	; 0x1348 <free+0x44>
    135e:	d3 83       	std	Z+3, r29	; 0x03
    1360:	c2 83       	std	Z+2, r28	; 0x02
    1362:	40 81       	ld	r20, Z
    1364:	51 81       	ldd	r21, Z+1	; 0x01
    1366:	84 0f       	add	r24, r20
    1368:	95 1f       	adc	r25, r21
    136a:	c8 17       	cp	r28, r24
    136c:	d9 07       	cpc	r29, r25
    136e:	59 f4       	brne	.+22     	; 0x1386 <free+0x82>
    1370:	88 81       	ld	r24, Y
    1372:	99 81       	ldd	r25, Y+1	; 0x01
    1374:	84 0f       	add	r24, r20
    1376:	95 1f       	adc	r25, r21
    1378:	02 96       	adiw	r24, 0x02	; 2
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	93 83       	std	Z+3, r25	; 0x03
    1384:	82 83       	std	Z+2, r24	; 0x02
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	29 f4       	brne	.+10     	; 0x1396 <free+0x92>
    138c:	f0 93 8c 03 	sts	0x038C, r31	; 0x80038c <__flp+0x1>
    1390:	e0 93 8b 03 	sts	0x038B, r30	; 0x80038b <__flp>
    1394:	3d c0       	rjmp	.+122    	; 0x1410 <free+0x10c>
    1396:	e9 01       	movw	r28, r18
    1398:	fb 83       	std	Y+3, r31	; 0x03
    139a:	ea 83       	std	Y+2, r30	; 0x02
    139c:	49 91       	ld	r20, Y+
    139e:	59 91       	ld	r21, Y+
    13a0:	c4 0f       	add	r28, r20
    13a2:	d5 1f       	adc	r29, r21
    13a4:	ec 17       	cp	r30, r28
    13a6:	fd 07       	cpc	r31, r29
    13a8:	61 f4       	brne	.+24     	; 0x13c2 <free+0xbe>
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	84 0f       	add	r24, r20
    13b0:	95 1f       	adc	r25, r21
    13b2:	02 96       	adiw	r24, 0x02	; 2
    13b4:	e9 01       	movw	r28, r18
    13b6:	99 83       	std	Y+1, r25	; 0x01
    13b8:	88 83       	st	Y, r24
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	9b 83       	std	Y+3, r25	; 0x03
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	e0 e0       	ldi	r30, 0x00	; 0
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	12 96       	adiw	r26, 0x02	; 2
    13c8:	8d 91       	ld	r24, X+
    13ca:	9c 91       	ld	r25, X
    13cc:	13 97       	sbiw	r26, 0x03	; 3
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <free+0xd4>
    13d2:	fd 01       	movw	r30, r26
    13d4:	dc 01       	movw	r26, r24
    13d6:	f7 cf       	rjmp	.-18     	; 0x13c6 <free+0xc2>
    13d8:	8d 91       	ld	r24, X+
    13da:	9c 91       	ld	r25, X
    13dc:	11 97       	sbiw	r26, 0x01	; 1
    13de:	9d 01       	movw	r18, r26
    13e0:	2e 5f       	subi	r18, 0xFE	; 254
    13e2:	3f 4f       	sbci	r19, 0xFF	; 255
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <__brkval>
    13ec:	30 91 8a 03 	lds	r19, 0x038A	; 0x80038a <__brkval+0x1>
    13f0:	28 17       	cp	r18, r24
    13f2:	39 07       	cpc	r19, r25
    13f4:	69 f4       	brne	.+26     	; 0x1410 <free+0x10c>
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	29 f4       	brne	.+10     	; 0x1404 <free+0x100>
    13fa:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <__flp+0x1>
    13fe:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <__flp>
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <free+0x104>
    1404:	13 82       	std	Z+3, r1	; 0x03
    1406:	12 82       	std	Z+2, r1	; 0x02
    1408:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <__brkval+0x1>
    140c:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <__brkval>
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <sprintf>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	2e 97       	sbiw	r28, 0x0e	; 14
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	0d 89       	ldd	r16, Y+21	; 0x15
    1430:	1e 89       	ldd	r17, Y+22	; 0x16
    1432:	86 e0       	ldi	r24, 0x06	; 6
    1434:	8c 83       	std	Y+4, r24	; 0x04
    1436:	1a 83       	std	Y+2, r17	; 0x02
    1438:	09 83       	std	Y+1, r16	; 0x01
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f e7       	ldi	r25, 0x7F	; 127
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	ae 01       	movw	r20, r28
    1444:	47 5e       	subi	r20, 0xE7	; 231
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	6f 89       	ldd	r22, Y+23	; 0x17
    144a:	78 8d       	ldd	r23, Y+24	; 0x18
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	10 d0       	rcall	.+32     	; 0x1472 <vfprintf>
    1452:	ef 81       	ldd	r30, Y+7	; 0x07
    1454:	f8 85       	ldd	r31, Y+8	; 0x08
    1456:	e0 0f       	add	r30, r16
    1458:	f1 1f       	adc	r31, r17
    145a:	10 82       	st	Z, r1
    145c:	2e 96       	adiw	r28, 0x0e	; 14
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	08 95       	ret

00001472 <vfprintf>:
    1472:	2f 92       	push	r2
    1474:	3f 92       	push	r3
    1476:	4f 92       	push	r4
    1478:	5f 92       	push	r5
    147a:	6f 92       	push	r6
    147c:	7f 92       	push	r7
    147e:	8f 92       	push	r8
    1480:	9f 92       	push	r9
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	2b 97       	sbiw	r28, 0x0b	; 11
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	de bf       	out	0x3e, r29	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	cd bf       	out	0x3d, r28	; 61
    14a6:	6c 01       	movw	r12, r24
    14a8:	7b 01       	movw	r14, r22
    14aa:	8a 01       	movw	r16, r20
    14ac:	fc 01       	movw	r30, r24
    14ae:	17 82       	std	Z+7, r1	; 0x07
    14b0:	16 82       	std	Z+6, r1	; 0x06
    14b2:	83 81       	ldd	r24, Z+3	; 0x03
    14b4:	81 ff       	sbrs	r24, 1
    14b6:	bf c1       	rjmp	.+894    	; 0x1836 <vfprintf+0x3c4>
    14b8:	ce 01       	movw	r24, r28
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	3c 01       	movw	r6, r24
    14be:	f6 01       	movw	r30, r12
    14c0:	93 81       	ldd	r25, Z+3	; 0x03
    14c2:	f7 01       	movw	r30, r14
    14c4:	93 fd       	sbrc	r25, 3
    14c6:	85 91       	lpm	r24, Z+
    14c8:	93 ff       	sbrs	r25, 3
    14ca:	81 91       	ld	r24, Z+
    14cc:	7f 01       	movw	r14, r30
    14ce:	88 23       	and	r24, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <vfprintf+0x62>
    14d2:	ad c1       	rjmp	.+858    	; 0x182e <vfprintf+0x3bc>
    14d4:	85 32       	cpi	r24, 0x25	; 37
    14d6:	39 f4       	brne	.+14     	; 0x14e6 <vfprintf+0x74>
    14d8:	93 fd       	sbrc	r25, 3
    14da:	85 91       	lpm	r24, Z+
    14dc:	93 ff       	sbrs	r25, 3
    14de:	81 91       	ld	r24, Z+
    14e0:	7f 01       	movw	r14, r30
    14e2:	85 32       	cpi	r24, 0x25	; 37
    14e4:	21 f4       	brne	.+8      	; 0x14ee <vfprintf+0x7c>
    14e6:	b6 01       	movw	r22, r12
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	d6 d1       	rcall	.+940    	; 0x1898 <fputc>
    14ec:	e8 cf       	rjmp	.-48     	; 0x14be <vfprintf+0x4c>
    14ee:	91 2c       	mov	r9, r1
    14f0:	21 2c       	mov	r2, r1
    14f2:	31 2c       	mov	r3, r1
    14f4:	ff e1       	ldi	r31, 0x1F	; 31
    14f6:	f3 15       	cp	r31, r3
    14f8:	d8 f0       	brcs	.+54     	; 0x1530 <vfprintf+0xbe>
    14fa:	8b 32       	cpi	r24, 0x2B	; 43
    14fc:	79 f0       	breq	.+30     	; 0x151c <vfprintf+0xaa>
    14fe:	38 f4       	brcc	.+14     	; 0x150e <vfprintf+0x9c>
    1500:	80 32       	cpi	r24, 0x20	; 32
    1502:	79 f0       	breq	.+30     	; 0x1522 <vfprintf+0xb0>
    1504:	83 32       	cpi	r24, 0x23	; 35
    1506:	a1 f4       	brne	.+40     	; 0x1530 <vfprintf+0xbe>
    1508:	23 2d       	mov	r18, r3
    150a:	20 61       	ori	r18, 0x10	; 16
    150c:	1d c0       	rjmp	.+58     	; 0x1548 <vfprintf+0xd6>
    150e:	8d 32       	cpi	r24, 0x2D	; 45
    1510:	61 f0       	breq	.+24     	; 0x152a <vfprintf+0xb8>
    1512:	80 33       	cpi	r24, 0x30	; 48
    1514:	69 f4       	brne	.+26     	; 0x1530 <vfprintf+0xbe>
    1516:	23 2d       	mov	r18, r3
    1518:	21 60       	ori	r18, 0x01	; 1
    151a:	16 c0       	rjmp	.+44     	; 0x1548 <vfprintf+0xd6>
    151c:	83 2d       	mov	r24, r3
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	38 2e       	mov	r3, r24
    1522:	e3 2d       	mov	r30, r3
    1524:	e4 60       	ori	r30, 0x04	; 4
    1526:	3e 2e       	mov	r3, r30
    1528:	2a c0       	rjmp	.+84     	; 0x157e <vfprintf+0x10c>
    152a:	f3 2d       	mov	r31, r3
    152c:	f8 60       	ori	r31, 0x08	; 8
    152e:	1d c0       	rjmp	.+58     	; 0x156a <vfprintf+0xf8>
    1530:	37 fc       	sbrc	r3, 7
    1532:	2d c0       	rjmp	.+90     	; 0x158e <vfprintf+0x11c>
    1534:	20 ed       	ldi	r18, 0xD0	; 208
    1536:	28 0f       	add	r18, r24
    1538:	2a 30       	cpi	r18, 0x0A	; 10
    153a:	40 f0       	brcs	.+16     	; 0x154c <vfprintf+0xda>
    153c:	8e 32       	cpi	r24, 0x2E	; 46
    153e:	b9 f4       	brne	.+46     	; 0x156e <vfprintf+0xfc>
    1540:	36 fc       	sbrc	r3, 6
    1542:	75 c1       	rjmp	.+746    	; 0x182e <vfprintf+0x3bc>
    1544:	23 2d       	mov	r18, r3
    1546:	20 64       	ori	r18, 0x40	; 64
    1548:	32 2e       	mov	r3, r18
    154a:	19 c0       	rjmp	.+50     	; 0x157e <vfprintf+0x10c>
    154c:	36 fe       	sbrs	r3, 6
    154e:	06 c0       	rjmp	.+12     	; 0x155c <vfprintf+0xea>
    1550:	8a e0       	ldi	r24, 0x0A	; 10
    1552:	98 9e       	mul	r9, r24
    1554:	20 0d       	add	r18, r0
    1556:	11 24       	eor	r1, r1
    1558:	92 2e       	mov	r9, r18
    155a:	11 c0       	rjmp	.+34     	; 0x157e <vfprintf+0x10c>
    155c:	ea e0       	ldi	r30, 0x0A	; 10
    155e:	2e 9e       	mul	r2, r30
    1560:	20 0d       	add	r18, r0
    1562:	11 24       	eor	r1, r1
    1564:	22 2e       	mov	r2, r18
    1566:	f3 2d       	mov	r31, r3
    1568:	f0 62       	ori	r31, 0x20	; 32
    156a:	3f 2e       	mov	r3, r31
    156c:	08 c0       	rjmp	.+16     	; 0x157e <vfprintf+0x10c>
    156e:	8c 36       	cpi	r24, 0x6C	; 108
    1570:	21 f4       	brne	.+8      	; 0x157a <vfprintf+0x108>
    1572:	83 2d       	mov	r24, r3
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	38 2e       	mov	r3, r24
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x10c>
    157a:	88 36       	cpi	r24, 0x68	; 104
    157c:	41 f4       	brne	.+16     	; 0x158e <vfprintf+0x11c>
    157e:	f7 01       	movw	r30, r14
    1580:	93 fd       	sbrc	r25, 3
    1582:	85 91       	lpm	r24, Z+
    1584:	93 ff       	sbrs	r25, 3
    1586:	81 91       	ld	r24, Z+
    1588:	7f 01       	movw	r14, r30
    158a:	81 11       	cpse	r24, r1
    158c:	b3 cf       	rjmp	.-154    	; 0x14f4 <vfprintf+0x82>
    158e:	98 2f       	mov	r25, r24
    1590:	9f 7d       	andi	r25, 0xDF	; 223
    1592:	95 54       	subi	r25, 0x45	; 69
    1594:	93 30       	cpi	r25, 0x03	; 3
    1596:	28 f4       	brcc	.+10     	; 0x15a2 <vfprintf+0x130>
    1598:	0c 5f       	subi	r16, 0xFC	; 252
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	9f e3       	ldi	r25, 0x3F	; 63
    159e:	99 83       	std	Y+1, r25	; 0x01
    15a0:	0d c0       	rjmp	.+26     	; 0x15bc <vfprintf+0x14a>
    15a2:	83 36       	cpi	r24, 0x63	; 99
    15a4:	31 f0       	breq	.+12     	; 0x15b2 <vfprintf+0x140>
    15a6:	83 37       	cpi	r24, 0x73	; 115
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <vfprintf+0x154>
    15aa:	83 35       	cpi	r24, 0x53	; 83
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <vfprintf+0x13e>
    15ae:	55 c0       	rjmp	.+170    	; 0x165a <vfprintf+0x1e8>
    15b0:	20 c0       	rjmp	.+64     	; 0x15f2 <vfprintf+0x180>
    15b2:	f8 01       	movw	r30, r16
    15b4:	80 81       	ld	r24, Z
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	0e 5f       	subi	r16, 0xFE	; 254
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	88 24       	eor	r8, r8
    15be:	83 94       	inc	r8
    15c0:	91 2c       	mov	r9, r1
    15c2:	53 01       	movw	r10, r6
    15c4:	12 c0       	rjmp	.+36     	; 0x15ea <vfprintf+0x178>
    15c6:	28 01       	movw	r4, r16
    15c8:	f2 e0       	ldi	r31, 0x02	; 2
    15ca:	4f 0e       	add	r4, r31
    15cc:	51 1c       	adc	r5, r1
    15ce:	f8 01       	movw	r30, r16
    15d0:	a0 80       	ld	r10, Z
    15d2:	b1 80       	ldd	r11, Z+1	; 0x01
    15d4:	36 fe       	sbrs	r3, 6
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <vfprintf+0x16c>
    15d8:	69 2d       	mov	r22, r9
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x170>
    15de:	6f ef       	ldi	r22, 0xFF	; 255
    15e0:	7f ef       	ldi	r23, 0xFF	; 255
    15e2:	c5 01       	movw	r24, r10
    15e4:	4e d1       	rcall	.+668    	; 0x1882 <strnlen>
    15e6:	4c 01       	movw	r8, r24
    15e8:	82 01       	movw	r16, r4
    15ea:	f3 2d       	mov	r31, r3
    15ec:	ff 77       	andi	r31, 0x7F	; 127
    15ee:	3f 2e       	mov	r3, r31
    15f0:	15 c0       	rjmp	.+42     	; 0x161c <vfprintf+0x1aa>
    15f2:	28 01       	movw	r4, r16
    15f4:	22 e0       	ldi	r18, 0x02	; 2
    15f6:	42 0e       	add	r4, r18
    15f8:	51 1c       	adc	r5, r1
    15fa:	f8 01       	movw	r30, r16
    15fc:	a0 80       	ld	r10, Z
    15fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1600:	36 fe       	sbrs	r3, 6
    1602:	03 c0       	rjmp	.+6      	; 0x160a <vfprintf+0x198>
    1604:	69 2d       	mov	r22, r9
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x19c>
    160a:	6f ef       	ldi	r22, 0xFF	; 255
    160c:	7f ef       	ldi	r23, 0xFF	; 255
    160e:	c5 01       	movw	r24, r10
    1610:	2d d1       	rcall	.+602    	; 0x186c <strnlen_P>
    1612:	4c 01       	movw	r8, r24
    1614:	f3 2d       	mov	r31, r3
    1616:	f0 68       	ori	r31, 0x80	; 128
    1618:	3f 2e       	mov	r3, r31
    161a:	82 01       	movw	r16, r4
    161c:	33 fc       	sbrc	r3, 3
    161e:	19 c0       	rjmp	.+50     	; 0x1652 <vfprintf+0x1e0>
    1620:	82 2d       	mov	r24, r2
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	88 16       	cp	r8, r24
    1626:	99 06       	cpc	r9, r25
    1628:	a0 f4       	brcc	.+40     	; 0x1652 <vfprintf+0x1e0>
    162a:	b6 01       	movw	r22, r12
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	33 d1       	rcall	.+614    	; 0x1898 <fputc>
    1632:	2a 94       	dec	r2
    1634:	f5 cf       	rjmp	.-22     	; 0x1620 <vfprintf+0x1ae>
    1636:	f5 01       	movw	r30, r10
    1638:	37 fc       	sbrc	r3, 7
    163a:	85 91       	lpm	r24, Z+
    163c:	37 fe       	sbrs	r3, 7
    163e:	81 91       	ld	r24, Z+
    1640:	5f 01       	movw	r10, r30
    1642:	b6 01       	movw	r22, r12
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	28 d1       	rcall	.+592    	; 0x1898 <fputc>
    1648:	21 10       	cpse	r2, r1
    164a:	2a 94       	dec	r2
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	82 1a       	sub	r8, r18
    1650:	91 08       	sbc	r9, r1
    1652:	81 14       	cp	r8, r1
    1654:	91 04       	cpc	r9, r1
    1656:	79 f7       	brne	.-34     	; 0x1636 <vfprintf+0x1c4>
    1658:	e1 c0       	rjmp	.+450    	; 0x181c <vfprintf+0x3aa>
    165a:	84 36       	cpi	r24, 0x64	; 100
    165c:	11 f0       	breq	.+4      	; 0x1662 <vfprintf+0x1f0>
    165e:	89 36       	cpi	r24, 0x69	; 105
    1660:	39 f5       	brne	.+78     	; 0x16b0 <vfprintf+0x23e>
    1662:	f8 01       	movw	r30, r16
    1664:	37 fe       	sbrs	r3, 7
    1666:	07 c0       	rjmp	.+14     	; 0x1676 <vfprintf+0x204>
    1668:	60 81       	ld	r22, Z
    166a:	71 81       	ldd	r23, Z+1	; 0x01
    166c:	82 81       	ldd	r24, Z+2	; 0x02
    166e:	93 81       	ldd	r25, Z+3	; 0x03
    1670:	0c 5f       	subi	r16, 0xFC	; 252
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	08 c0       	rjmp	.+16     	; 0x1686 <vfprintf+0x214>
    1676:	60 81       	ld	r22, Z
    1678:	71 81       	ldd	r23, Z+1	; 0x01
    167a:	07 2e       	mov	r0, r23
    167c:	00 0c       	add	r0, r0
    167e:	88 0b       	sbc	r24, r24
    1680:	99 0b       	sbc	r25, r25
    1682:	0e 5f       	subi	r16, 0xFE	; 254
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	f3 2d       	mov	r31, r3
    1688:	ff 76       	andi	r31, 0x6F	; 111
    168a:	3f 2e       	mov	r3, r31
    168c:	97 ff       	sbrs	r25, 7
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <vfprintf+0x230>
    1690:	90 95       	com	r25
    1692:	80 95       	com	r24
    1694:	70 95       	com	r23
    1696:	61 95       	neg	r22
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8f 4f       	sbci	r24, 0xFF	; 255
    169c:	9f 4f       	sbci	r25, 0xFF	; 255
    169e:	f0 68       	ori	r31, 0x80	; 128
    16a0:	3f 2e       	mov	r3, r31
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	a3 01       	movw	r20, r6
    16a8:	33 d1       	rcall	.+614    	; 0x1910 <__ultoa_invert>
    16aa:	88 2e       	mov	r8, r24
    16ac:	86 18       	sub	r8, r6
    16ae:	44 c0       	rjmp	.+136    	; 0x1738 <vfprintf+0x2c6>
    16b0:	85 37       	cpi	r24, 0x75	; 117
    16b2:	31 f4       	brne	.+12     	; 0x16c0 <vfprintf+0x24e>
    16b4:	23 2d       	mov	r18, r3
    16b6:	2f 7e       	andi	r18, 0xEF	; 239
    16b8:	b2 2e       	mov	r11, r18
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	25 c0       	rjmp	.+74     	; 0x170a <vfprintf+0x298>
    16c0:	93 2d       	mov	r25, r3
    16c2:	99 7f       	andi	r25, 0xF9	; 249
    16c4:	b9 2e       	mov	r11, r25
    16c6:	8f 36       	cpi	r24, 0x6F	; 111
    16c8:	c1 f0       	breq	.+48     	; 0x16fa <vfprintf+0x288>
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <vfprintf+0x260>
    16cc:	88 35       	cpi	r24, 0x58	; 88
    16ce:	79 f0       	breq	.+30     	; 0x16ee <vfprintf+0x27c>
    16d0:	ae c0       	rjmp	.+348    	; 0x182e <vfprintf+0x3bc>
    16d2:	80 37       	cpi	r24, 0x70	; 112
    16d4:	19 f0       	breq	.+6      	; 0x16dc <vfprintf+0x26a>
    16d6:	88 37       	cpi	r24, 0x78	; 120
    16d8:	21 f0       	breq	.+8      	; 0x16e2 <vfprintf+0x270>
    16da:	a9 c0       	rjmp	.+338    	; 0x182e <vfprintf+0x3bc>
    16dc:	e9 2f       	mov	r30, r25
    16de:	e0 61       	ori	r30, 0x10	; 16
    16e0:	be 2e       	mov	r11, r30
    16e2:	b4 fe       	sbrs	r11, 4
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <vfprintf+0x28e>
    16e6:	fb 2d       	mov	r31, r11
    16e8:	f4 60       	ori	r31, 0x04	; 4
    16ea:	bf 2e       	mov	r11, r31
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x28e>
    16ee:	34 fe       	sbrs	r3, 4
    16f0:	0a c0       	rjmp	.+20     	; 0x1706 <vfprintf+0x294>
    16f2:	29 2f       	mov	r18, r25
    16f4:	26 60       	ori	r18, 0x06	; 6
    16f6:	b2 2e       	mov	r11, r18
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <vfprintf+0x294>
    16fa:	28 e0       	ldi	r18, 0x08	; 8
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <vfprintf+0x298>
    1700:	20 e1       	ldi	r18, 0x10	; 16
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x298>
    1706:	20 e1       	ldi	r18, 0x10	; 16
    1708:	32 e0       	ldi	r19, 0x02	; 2
    170a:	f8 01       	movw	r30, r16
    170c:	b7 fe       	sbrs	r11, 7
    170e:	07 c0       	rjmp	.+14     	; 0x171e <vfprintf+0x2ac>
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	0c 5f       	subi	r16, 0xFC	; 252
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	06 c0       	rjmp	.+12     	; 0x172a <vfprintf+0x2b8>
    171e:	60 81       	ld	r22, Z
    1720:	71 81       	ldd	r23, Z+1	; 0x01
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 5f       	subi	r16, 0xFE	; 254
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	a3 01       	movw	r20, r6
    172c:	f1 d0       	rcall	.+482    	; 0x1910 <__ultoa_invert>
    172e:	88 2e       	mov	r8, r24
    1730:	86 18       	sub	r8, r6
    1732:	fb 2d       	mov	r31, r11
    1734:	ff 77       	andi	r31, 0x7F	; 127
    1736:	3f 2e       	mov	r3, r31
    1738:	36 fe       	sbrs	r3, 6
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x2e4>
    173c:	23 2d       	mov	r18, r3
    173e:	2e 7f       	andi	r18, 0xFE	; 254
    1740:	a2 2e       	mov	r10, r18
    1742:	89 14       	cp	r8, r9
    1744:	58 f4       	brcc	.+22     	; 0x175c <vfprintf+0x2ea>
    1746:	34 fe       	sbrs	r3, 4
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <vfprintf+0x2ee>
    174a:	32 fc       	sbrc	r3, 2
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <vfprintf+0x2ee>
    174e:	83 2d       	mov	r24, r3
    1750:	8e 7e       	andi	r24, 0xEE	; 238
    1752:	a8 2e       	mov	r10, r24
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x2ee>
    1756:	b8 2c       	mov	r11, r8
    1758:	a3 2c       	mov	r10, r3
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <vfprintf+0x2f0>
    175c:	b8 2c       	mov	r11, r8
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <vfprintf+0x2f0>
    1760:	b9 2c       	mov	r11, r9
    1762:	a4 fe       	sbrs	r10, 4
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <vfprintf+0x312>
    1766:	fe 01       	movw	r30, r28
    1768:	e8 0d       	add	r30, r8
    176a:	f1 1d       	adc	r31, r1
    176c:	80 81       	ld	r24, Z
    176e:	80 33       	cpi	r24, 0x30	; 48
    1770:	21 f4       	brne	.+8      	; 0x177a <vfprintf+0x308>
    1772:	9a 2d       	mov	r25, r10
    1774:	99 7e       	andi	r25, 0xE9	; 233
    1776:	a9 2e       	mov	r10, r25
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x31a>
    177a:	a2 fe       	sbrs	r10, 2
    177c:	06 c0       	rjmp	.+12     	; 0x178a <vfprintf+0x318>
    177e:	b3 94       	inc	r11
    1780:	b3 94       	inc	r11
    1782:	04 c0       	rjmp	.+8      	; 0x178c <vfprintf+0x31a>
    1784:	8a 2d       	mov	r24, r10
    1786:	86 78       	andi	r24, 0x86	; 134
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x31a>
    178a:	b3 94       	inc	r11
    178c:	a3 fc       	sbrc	r10, 3
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <vfprintf+0x33e>
    1790:	a0 fe       	sbrs	r10, 0
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <vfprintf+0x32e>
    1794:	b2 14       	cp	r11, r2
    1796:	80 f4       	brcc	.+32     	; 0x17b8 <vfprintf+0x346>
    1798:	28 0c       	add	r2, r8
    179a:	92 2c       	mov	r9, r2
    179c:	9b 18       	sub	r9, r11
    179e:	0d c0       	rjmp	.+26     	; 0x17ba <vfprintf+0x348>
    17a0:	b2 14       	cp	r11, r2
    17a2:	58 f4       	brcc	.+22     	; 0x17ba <vfprintf+0x348>
    17a4:	b6 01       	movw	r22, r12
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	76 d0       	rcall	.+236    	; 0x1898 <fputc>
    17ac:	b3 94       	inc	r11
    17ae:	f8 cf       	rjmp	.-16     	; 0x17a0 <vfprintf+0x32e>
    17b0:	b2 14       	cp	r11, r2
    17b2:	18 f4       	brcc	.+6      	; 0x17ba <vfprintf+0x348>
    17b4:	2b 18       	sub	r2, r11
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <vfprintf+0x34a>
    17b8:	98 2c       	mov	r9, r8
    17ba:	21 2c       	mov	r2, r1
    17bc:	a4 fe       	sbrs	r10, 4
    17be:	0f c0       	rjmp	.+30     	; 0x17de <vfprintf+0x36c>
    17c0:	b6 01       	movw	r22, r12
    17c2:	80 e3       	ldi	r24, 0x30	; 48
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	68 d0       	rcall	.+208    	; 0x1898 <fputc>
    17c8:	a2 fe       	sbrs	r10, 2
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <vfprintf+0x386>
    17cc:	a1 fc       	sbrc	r10, 1
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <vfprintf+0x364>
    17d0:	88 e7       	ldi	r24, 0x78	; 120
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <vfprintf+0x368>
    17d6:	88 e5       	ldi	r24, 0x58	; 88
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	b6 01       	movw	r22, r12
    17dc:	0c c0       	rjmp	.+24     	; 0x17f6 <vfprintf+0x384>
    17de:	8a 2d       	mov	r24, r10
    17e0:	86 78       	andi	r24, 0x86	; 134
    17e2:	51 f0       	breq	.+20     	; 0x17f8 <vfprintf+0x386>
    17e4:	a1 fe       	sbrs	r10, 1
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <vfprintf+0x37a>
    17e8:	8b e2       	ldi	r24, 0x2B	; 43
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <vfprintf+0x37c>
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	a7 fc       	sbrc	r10, 7
    17f0:	8d e2       	ldi	r24, 0x2D	; 45
    17f2:	b6 01       	movw	r22, r12
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	50 d0       	rcall	.+160    	; 0x1898 <fputc>
    17f8:	89 14       	cp	r8, r9
    17fa:	30 f4       	brcc	.+12     	; 0x1808 <vfprintf+0x396>
    17fc:	b6 01       	movw	r22, r12
    17fe:	80 e3       	ldi	r24, 0x30	; 48
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	4a d0       	rcall	.+148    	; 0x1898 <fputc>
    1804:	9a 94       	dec	r9
    1806:	f8 cf       	rjmp	.-16     	; 0x17f8 <vfprintf+0x386>
    1808:	8a 94       	dec	r8
    180a:	f3 01       	movw	r30, r6
    180c:	e8 0d       	add	r30, r8
    180e:	f1 1d       	adc	r31, r1
    1810:	80 81       	ld	r24, Z
    1812:	b6 01       	movw	r22, r12
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	40 d0       	rcall	.+128    	; 0x1898 <fputc>
    1818:	81 10       	cpse	r8, r1
    181a:	f6 cf       	rjmp	.-20     	; 0x1808 <vfprintf+0x396>
    181c:	22 20       	and	r2, r2
    181e:	09 f4       	brne	.+2      	; 0x1822 <vfprintf+0x3b0>
    1820:	4e ce       	rjmp	.-868    	; 0x14be <vfprintf+0x4c>
    1822:	b6 01       	movw	r22, r12
    1824:	80 e2       	ldi	r24, 0x20	; 32
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	37 d0       	rcall	.+110    	; 0x1898 <fputc>
    182a:	2a 94       	dec	r2
    182c:	f7 cf       	rjmp	.-18     	; 0x181c <vfprintf+0x3aa>
    182e:	f6 01       	movw	r30, r12
    1830:	86 81       	ldd	r24, Z+6	; 0x06
    1832:	97 81       	ldd	r25, Z+7	; 0x07
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x3c8>
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	9f ef       	ldi	r25, 0xFF	; 255
    183a:	2b 96       	adiw	r28, 0x0b	; 11
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	bf 90       	pop	r11
    1858:	af 90       	pop	r10
    185a:	9f 90       	pop	r9
    185c:	8f 90       	pop	r8
    185e:	7f 90       	pop	r7
    1860:	6f 90       	pop	r6
    1862:	5f 90       	pop	r5
    1864:	4f 90       	pop	r4
    1866:	3f 90       	pop	r3
    1868:	2f 90       	pop	r2
    186a:	08 95       	ret

0000186c <strnlen_P>:
    186c:	fc 01       	movw	r30, r24
    186e:	05 90       	lpm	r0, Z+
    1870:	61 50       	subi	r22, 0x01	; 1
    1872:	70 40       	sbci	r23, 0x00	; 0
    1874:	01 10       	cpse	r0, r1
    1876:	d8 f7       	brcc	.-10     	; 0x186e <strnlen_P+0x2>
    1878:	80 95       	com	r24
    187a:	90 95       	com	r25
    187c:	8e 0f       	add	r24, r30
    187e:	9f 1f       	adc	r25, r31
    1880:	08 95       	ret

00001882 <strnlen>:
    1882:	fc 01       	movw	r30, r24
    1884:	61 50       	subi	r22, 0x01	; 1
    1886:	70 40       	sbci	r23, 0x00	; 0
    1888:	01 90       	ld	r0, Z+
    188a:	01 10       	cpse	r0, r1
    188c:	d8 f7       	brcc	.-10     	; 0x1884 <strnlen+0x2>
    188e:	80 95       	com	r24
    1890:	90 95       	com	r25
    1892:	8e 0f       	add	r24, r30
    1894:	9f 1f       	adc	r25, r31
    1896:	08 95       	ret

00001898 <fputc>:
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	fb 01       	movw	r30, r22
    18a2:	23 81       	ldd	r18, Z+3	; 0x03
    18a4:	21 fd       	sbrc	r18, 1
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <fputc+0x16>
    18a8:	8f ef       	ldi	r24, 0xFF	; 255
    18aa:	9f ef       	ldi	r25, 0xFF	; 255
    18ac:	2c c0       	rjmp	.+88     	; 0x1906 <fputc+0x6e>
    18ae:	22 ff       	sbrs	r18, 2
    18b0:	16 c0       	rjmp	.+44     	; 0x18de <fputc+0x46>
    18b2:	46 81       	ldd	r20, Z+6	; 0x06
    18b4:	57 81       	ldd	r21, Z+7	; 0x07
    18b6:	24 81       	ldd	r18, Z+4	; 0x04
    18b8:	35 81       	ldd	r19, Z+5	; 0x05
    18ba:	42 17       	cp	r20, r18
    18bc:	53 07       	cpc	r21, r19
    18be:	44 f4       	brge	.+16     	; 0x18d0 <fputc+0x38>
    18c0:	a0 81       	ld	r26, Z
    18c2:	b1 81       	ldd	r27, Z+1	; 0x01
    18c4:	9d 01       	movw	r18, r26
    18c6:	2f 5f       	subi	r18, 0xFF	; 255
    18c8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ca:	31 83       	std	Z+1, r19	; 0x01
    18cc:	20 83       	st	Z, r18
    18ce:	8c 93       	st	X, r24
    18d0:	26 81       	ldd	r18, Z+6	; 0x06
    18d2:	37 81       	ldd	r19, Z+7	; 0x07
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	37 83       	std	Z+7, r19	; 0x07
    18da:	26 83       	std	Z+6, r18	; 0x06
    18dc:	14 c0       	rjmp	.+40     	; 0x1906 <fputc+0x6e>
    18de:	8b 01       	movw	r16, r22
    18e0:	ec 01       	movw	r28, r24
    18e2:	fb 01       	movw	r30, r22
    18e4:	00 84       	ldd	r0, Z+8	; 0x08
    18e6:	f1 85       	ldd	r31, Z+9	; 0x09
    18e8:	e0 2d       	mov	r30, r0
    18ea:	09 95       	icall
    18ec:	89 2b       	or	r24, r25
    18ee:	e1 f6       	brne	.-72     	; 0x18a8 <fputc+0x10>
    18f0:	d8 01       	movw	r26, r16
    18f2:	16 96       	adiw	r26, 0x06	; 6
    18f4:	8d 91       	ld	r24, X+
    18f6:	9c 91       	ld	r25, X
    18f8:	17 97       	sbiw	r26, 0x07	; 7
    18fa:	01 96       	adiw	r24, 0x01	; 1
    18fc:	17 96       	adiw	r26, 0x07	; 7
    18fe:	9c 93       	st	X, r25
    1900:	8e 93       	st	-X, r24
    1902:	16 97       	sbiw	r26, 0x06	; 6
    1904:	ce 01       	movw	r24, r28
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <__ultoa_invert>:
    1910:	fa 01       	movw	r30, r20
    1912:	aa 27       	eor	r26, r26
    1914:	28 30       	cpi	r18, 0x08	; 8
    1916:	51 f1       	breq	.+84     	; 0x196c <__ultoa_invert+0x5c>
    1918:	20 31       	cpi	r18, 0x10	; 16
    191a:	81 f1       	breq	.+96     	; 0x197c <__ultoa_invert+0x6c>
    191c:	e8 94       	clt
    191e:	6f 93       	push	r22
    1920:	6e 7f       	andi	r22, 0xFE	; 254
    1922:	6e 5f       	subi	r22, 0xFE	; 254
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	8f 4f       	sbci	r24, 0xFF	; 255
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	af 4f       	sbci	r26, 0xFF	; 255
    192c:	b1 e0       	ldi	r27, 0x01	; 1
    192e:	3e d0       	rcall	.+124    	; 0x19ac <__ultoa_invert+0x9c>
    1930:	b4 e0       	ldi	r27, 0x04	; 4
    1932:	3c d0       	rcall	.+120    	; 0x19ac <__ultoa_invert+0x9c>
    1934:	67 0f       	add	r22, r23
    1936:	78 1f       	adc	r23, r24
    1938:	89 1f       	adc	r24, r25
    193a:	9a 1f       	adc	r25, r26
    193c:	a1 1d       	adc	r26, r1
    193e:	68 0f       	add	r22, r24
    1940:	79 1f       	adc	r23, r25
    1942:	8a 1f       	adc	r24, r26
    1944:	91 1d       	adc	r25, r1
    1946:	a1 1d       	adc	r26, r1
    1948:	6a 0f       	add	r22, r26
    194a:	71 1d       	adc	r23, r1
    194c:	81 1d       	adc	r24, r1
    194e:	91 1d       	adc	r25, r1
    1950:	a1 1d       	adc	r26, r1
    1952:	20 d0       	rcall	.+64     	; 0x1994 <__ultoa_invert+0x84>
    1954:	09 f4       	brne	.+2      	; 0x1958 <__ultoa_invert+0x48>
    1956:	68 94       	set
    1958:	3f 91       	pop	r19
    195a:	2a e0       	ldi	r18, 0x0A	; 10
    195c:	26 9f       	mul	r18, r22
    195e:	11 24       	eor	r1, r1
    1960:	30 19       	sub	r19, r0
    1962:	30 5d       	subi	r19, 0xD0	; 208
    1964:	31 93       	st	Z+, r19
    1966:	de f6       	brtc	.-74     	; 0x191e <__ultoa_invert+0xe>
    1968:	cf 01       	movw	r24, r30
    196a:	08 95       	ret
    196c:	46 2f       	mov	r20, r22
    196e:	47 70       	andi	r20, 0x07	; 7
    1970:	40 5d       	subi	r20, 0xD0	; 208
    1972:	41 93       	st	Z+, r20
    1974:	b3 e0       	ldi	r27, 0x03	; 3
    1976:	0f d0       	rcall	.+30     	; 0x1996 <__ultoa_invert+0x86>
    1978:	c9 f7       	brne	.-14     	; 0x196c <__ultoa_invert+0x5c>
    197a:	f6 cf       	rjmp	.-20     	; 0x1968 <__ultoa_invert+0x58>
    197c:	46 2f       	mov	r20, r22
    197e:	4f 70       	andi	r20, 0x0F	; 15
    1980:	40 5d       	subi	r20, 0xD0	; 208
    1982:	4a 33       	cpi	r20, 0x3A	; 58
    1984:	18 f0       	brcs	.+6      	; 0x198c <__ultoa_invert+0x7c>
    1986:	49 5d       	subi	r20, 0xD9	; 217
    1988:	31 fd       	sbrc	r19, 1
    198a:	40 52       	subi	r20, 0x20	; 32
    198c:	41 93       	st	Z+, r20
    198e:	02 d0       	rcall	.+4      	; 0x1994 <__ultoa_invert+0x84>
    1990:	a9 f7       	brne	.-22     	; 0x197c <__ultoa_invert+0x6c>
    1992:	ea cf       	rjmp	.-44     	; 0x1968 <__ultoa_invert+0x58>
    1994:	b4 e0       	ldi	r27, 0x04	; 4
    1996:	a6 95       	lsr	r26
    1998:	97 95       	ror	r25
    199a:	87 95       	ror	r24
    199c:	77 95       	ror	r23
    199e:	67 95       	ror	r22
    19a0:	ba 95       	dec	r27
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__ultoa_invert+0x86>
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	61 05       	cpc	r22, r1
    19a8:	71 05       	cpc	r23, r1
    19aa:	08 95       	ret
    19ac:	9b 01       	movw	r18, r22
    19ae:	ac 01       	movw	r20, r24
    19b0:	0a 2e       	mov	r0, r26
    19b2:	06 94       	lsr	r0
    19b4:	57 95       	ror	r21
    19b6:	47 95       	ror	r20
    19b8:	37 95       	ror	r19
    19ba:	27 95       	ror	r18
    19bc:	ba 95       	dec	r27
    19be:	c9 f7       	brne	.-14     	; 0x19b2 <__ultoa_invert+0xa2>
    19c0:	62 0f       	add	r22, r18
    19c2:	73 1f       	adc	r23, r19
    19c4:	84 1f       	adc	r24, r20
    19c6:	95 1f       	adc	r25, r21
    19c8:	a0 1d       	adc	r26, r0
    19ca:	08 95       	ret

000019cc <_exit>:
    19cc:	f8 94       	cli

000019ce <__stop_program>:
    19ce:	ff cf       	rjmp	.-2      	; 0x19ce <__stop_program>
