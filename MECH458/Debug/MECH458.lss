
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  000015c0  00001654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080024e  0080024e  000017a2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e63  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019d3  00000000  00000000  00005993  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ea5  00000000  00000000  00007366  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  0000a20c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000a8f5  00000000  00000000  0000a92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000150f  00000000  00000000  00015221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  00016730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000049ad  00000000  00000000  000169c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	91 c3       	rjmp	.+1826   	; 0x758 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c5       	rjmp	.+2846   	; 0xb64 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e0 ec       	ldi	r30, 0xC0	; 192
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	ae 34       	cpi	r26, 0x4E	; 78
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	ae e4       	ldi	r26, 0x4E	; 78
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ab 3d       	cpi	r26, 0xDB	; 219
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	57 d2       	rcall	.+1198   	; 0x57e <main>
      d0:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <_exit>

000000d4 <__bad_interrupt>:
      d4:	ad c2       	rjmp	.+1370   	; 0x630 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 10 samples	
	if (g_ADCCount < 10)
     11c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_ADCCount>
     120:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_ADCCount+0x1>
     124:	0a 97       	sbiw	r24, 0x0a	; 10
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_ADCCount>
     12c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <g_ADCCount+0x1>
     13a:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e4 5a       	subi	r30, 0xA4	; 164
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	} // if

	// Unblock ADC task
	if (g_ADCCount == 10) _timer[1].state = READY;
     15e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <g_ADCCount>
     162:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <g_ADCCount+0x1>
     166:	0a 97       	sbiw	r24, 0x0a	; 10
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_timer+0x11>

}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	14 c0       	rjmp	.+40     	; 0x1b6 <SERVER_Task+0x2c>
     18e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2349>
     192:	88 23       	and	r24, r24
     194:	71 f0       	breq	.+28     	; 0x1b2 <SERVER_Task+0x28>
     196:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     19a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     1a6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     1aa:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <STAGE1+0x1>
     1ae:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <STAGE1>
     1b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2349>
     1b6:	66 9b       	sbis	0x0c, 6	; 12
     1b8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2350>
     1bc:	65 99       	sbic	0x0c, 5	; 12
     1be:	0c c0       	rjmp	.+24     	; 0x1d8 <SERVER_Task+0x4e>
     1c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2351>
     1c4:	88 23       	and	r24, r24
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <SERVER_Task+0x4a>
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <_timer+0x23>
     1ce:	83 e7       	ldi	r24, 0x73	; 115
     1d0:	91 e0       	ldi	r25, 0x01	; 1
     1d2:	d1 d3       	rcall	.+1954   	; 0x976 <SYS_Pause>
     1d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2351>
     1d8:	67 9b       	sbis	0x0c, 7	; 12
     1da:	0a c0       	rjmp	.+20     	; 0x1f0 <SERVER_Task+0x66>
     1dc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2349>
     1e0:	81 11       	cpse	r24, r1
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <SERVER_Task+0x60>
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <_timer+0x1a>
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2349>
     1f0:	66 9b       	sbis	0x0c, 6	; 12
     1f2:	20 c0       	rjmp	.+64     	; 0x234 <SERVER_Task+0xaa>
     1f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2350>
     1f8:	81 11       	cpse	r24, r1
     1fa:	19 c0       	rjmp	.+50     	; 0x22e <SERVER_Task+0xa4>
     1fc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <STAGE2>
     200:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <STAGE2+0x1>
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	49 f4       	brne	.+18     	; 0x21a <SERVER_Task+0x90>
     208:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     20c:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     210:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <STAGE2+0x1>
     214:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <STAGE2>
     218:	05 c0       	rjmp	.+10     	; 0x224 <SERVER_Task+0x9a>
     21a:	5b d1       	rcall	.+694    	; 0x4d2 <LL_Next>
     21c:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <STAGE2+0x1>
     220:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <STAGE2>
     224:	ea e7       	ldi	r30, 0x7A	; 122
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	80 64       	ori	r24, 0x40	; 64
     22c:	80 83       	st	Z, r24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2350>
     234:	65 9b       	sbis	0x0c, 5	; 12
     236:	03 c0       	rjmp	.+6      	; 0x23e <SERVER_Task+0xb4>
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2351>
     23e:	08 95       	ret

00000240 <ADC_Task>:
     240:	8f 92       	push	r8
     242:	9f 92       	push	r9
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	cf 93       	push	r28
     252:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <j.2359>
     256:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <j.2359+0x1>
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <j.2359+0x1>
     260:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <j.2359>
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	ba 01       	movw	r22, r20
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	2f b7       	in	r18, 0x3f	; 63
     270:	f8 94       	cli
     272:	fc 01       	movw	r30, r24
     274:	ee 0f       	add	r30, r30
     276:	ff 1f       	adc	r31, r31
     278:	e4 5a       	subi	r30, 0xA4	; 164
     27a:	fd 4f       	sbci	r31, 0xFD	; 253
     27c:	01 90       	ld	r0, Z+
     27e:	f0 81       	ld	r31, Z
     280:	e0 2d       	mov	r30, r0
     282:	4e 0f       	add	r20, r30
     284:	5f 1f       	adc	r21, r31
     286:	61 1d       	adc	r22, r1
     288:	71 1d       	adc	r23, r1
     28a:	2f bf       	out	0x3f, r18	; 63
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	8a 30       	cpi	r24, 0x0A	; 10
     290:	91 05       	cpc	r25, r1
     292:	69 f7       	brne	.-38     	; 0x26e <ADC_Task+0x2e>
     294:	cf b7       	in	r28, 0x3f	; 63
     296:	f8 94       	cli
     298:	cb 01       	movw	r24, r22
     29a:	ba 01       	movw	r22, r20
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	6d d5       	rcall	.+2778   	; 0xd80 <__udivmodsi4>
     2a6:	69 01       	movw	r12, r18
     2a8:	7a 01       	movw	r14, r20
     2aa:	cf bf       	out	0x3f, r28	; 63
     2ac:	cf b7       	in	r28, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	da 01       	movw	r26, r20
     2b2:	c9 01       	movw	r24, r18
     2b4:	0b 97       	sbiw	r24, 0x0b	; 11
     2b6:	a1 09       	sbc	r26, r1
     2b8:	b1 09       	sbc	r27, r1
     2ba:	89 37       	cpi	r24, 0x79	; 121
     2bc:	93 40       	sbci	r25, 0x03	; 3
     2be:	a1 05       	cpc	r26, r1
     2c0:	b1 05       	cpc	r27, r1
     2c2:	a0 f4       	brcc	.+40     	; 0x2ec <ADC_Task+0xac>
     2c4:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <STAGE2>
     2c8:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <STAGE2+0x1>
     2cc:	2d d1       	rcall	.+602    	; 0x528 <LL_GetRefl>
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	c8 16       	cp	r12, r24
     2d4:	d9 06       	cpc	r13, r25
     2d6:	ea 06       	cpc	r14, r26
     2d8:	fb 06       	cpc	r15, r27
     2da:	40 f4       	brcc	.+16     	; 0x2ec <ADC_Task+0xac>
     2dc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <STAGE2>
     2e0:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <STAGE2+0x1>
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	11 f0       	breq	.+4      	; 0x2ec <ADC_Task+0xac>
     2e8:	b6 01       	movw	r22, r12
     2ea:	29 d1       	rcall	.+594    	; 0x53e <LL_UpdateRefl>
     2ec:	cf bf       	out	0x3f, r28	; 63
     2ee:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <g_ADCCount+0x1>
     2f2:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <g_ADCCount>
     2f6:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_timer+0x11>
     2fa:	66 9b       	sbis	0x0c, 6	; 12
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <ADC_Task+0xc8>
     2fe:	ea e7       	ldi	r30, 0x7A	; 122
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	80 64       	ori	r24, 0x40	; 64
     306:	80 83       	st	Z, r24
     308:	cf 91       	pop	r28
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	08 95       	ret

0000031c <MAG_Task>:
     31c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <g_MotorOn>
     320:	88 23       	and	r24, r24
     322:	29 f0       	breq	.+10     	; 0x32e <MAG_Task+0x12>
     324:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <tick.2381>
     328:	8f 5f       	subi	r24, 0xFF	; 255
     32a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <tick.2381>
     32e:	64 99       	sbic	0x0c, 4	; 12
     330:	1a c0       	rjmp	.+52     	; 0x366 <MAG_Task+0x4a>
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     338:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     33c:	0b d1       	rcall	.+534    	; 0x554 <LL_UpdateStatus>
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     344:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     348:	00 d1       	rcall	.+512    	; 0x54a <LL_UpdateMag>
     34a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     34e:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     352:	bf d0       	rcall	.+382    	; 0x4d2 <LL_Next>
     354:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <STAGE1+0x1>
     358:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <STAGE1>
     35c:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_timer+0x1a>
     360:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <tick.2381>
     364:	08 95       	ret
     366:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <tick.2381>
     36a:	8f 31       	cpi	r24, 0x1F	; 31
     36c:	c8 f0       	brcs	.+50     	; 0x3a0 <MAG_Task+0x84>
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     374:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     378:	ed d0       	rcall	.+474    	; 0x554 <LL_UpdateStatus>
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     380:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     384:	e2 d0       	rcall	.+452    	; 0x54a <LL_UpdateMag>
     386:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     38a:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     38e:	a1 d0       	rcall	.+322    	; 0x4d2 <LL_Next>
     390:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <STAGE1+0x1>
     394:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <STAGE1>
     398:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_timer+0x1a>
     39c:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <tick.2381>
     3a0:	08 95       	ret

000003a2 <EXIT_Task>:
     3a2:	cf 93       	push	r28
     3a4:	c0 91 c5 02 	lds	r28, 0x02C5	; 0x8002c5 <stepper+0x3>
     3a8:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     3ac:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     3b0:	b6 d0       	rcall	.+364    	; 0x51e <LL_GetClass>
     3b2:	c8 13       	cpse	r28, r24
     3b4:	25 c0       	rjmp	.+74     	; 0x400 <__LOCK_REGION_LENGTH__>
     3b6:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <g_MotorOn>
     3ba:	81 11       	cpse	r24, r1
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <EXIT_Task+0x22>
     3be:	80 e8       	ldi	r24, 0x80	; 128
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	47 d1       	rcall	.+654    	; 0x652 <PWM>
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     3ca:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     3ce:	c2 d0       	rcall	.+388    	; 0x554 <LL_UpdateStatus>
     3d0:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     3d4:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     3d8:	7c d0       	rcall	.+248    	; 0x4d2 <LL_Next>
     3da:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <HEAD+0x1>
     3de:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <HEAD>
     3e2:	fc 01       	movw	r30, r24
     3e4:	82 81       	ldd	r24, Z+2	; 0x02
     3e6:	93 81       	ldd	r25, Z+3	; 0x03
     3e8:	9a d0       	rcall	.+308    	; 0x51e <LL_GetClass>
     3ea:	c8 2f       	mov	r28, r24
     3ec:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     3f0:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     3f4:	94 d0       	rcall	.+296    	; 0x51e <LL_GetClass>
     3f6:	6c 2f       	mov	r22, r28
     3f8:	9b d1       	rcall	.+822    	; 0x730 <STEPPER_SetRotation>
     3fa:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_timer+0x23>
     3fe:	03 c0       	rjmp	.+6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	26 d1       	rcall	.+588    	; 0x652 <PWM>
     406:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
     40a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     40e:	87 d0       	rcall	.+270    	; 0x51e <LL_GetClass>
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <BTN_Task>:
     414:	89 b1       	in	r24, 0x09	; 9
     416:	83 70       	andi	r24, 0x03	; 3
     418:	69 f1       	breq	.+90     	; 0x474 <BTN_Task+0x60>
     41a:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
     41e:	8f 5f       	subi	r24, 0xFF	; 255
     420:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__data_end>
     424:	83 30       	cpi	r24, 0x03	; 3
     426:	30 f1       	brcs	.+76     	; 0x474 <BTN_Task+0x60>
     428:	89 b1       	in	r24, 0x09	; 9
     42a:	83 70       	andi	r24, 0x03	; 3
     42c:	31 f4       	brne	.+12     	; 0x43a <BTN_Task+0x26>
     42e:	89 e0       	ldi	r24, 0x09	; 9
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	98 d4       	rcall	.+2352   	; 0xd64 <UART_SendString>
     434:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
     438:	08 95       	ret
     43a:	89 b1       	in	r24, 0x09	; 9
     43c:	83 70       	andi	r24, 0x03	; 3
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	69 f4       	brne	.+26     	; 0x45c <BTN_Task+0x48>
     442:	81 e2       	ldi	r24, 0x21	; 33
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	8e d4       	rcall	.+2332   	; 0xd64 <UART_SendString>
     448:	87 e4       	ldi	r24, 0x47	; 71
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	94 d2       	rcall	.+1320   	; 0x976 <SYS_Pause>
     44e:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <g_IdleStartTime+0x1>
     452:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <g_IdleStartTime>
     456:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
     45a:	08 95       	ret
     45c:	89 b1       	in	r24, 0x09	; 9
     45e:	83 70       	andi	r24, 0x03	; 3
     460:	82 30       	cpi	r24, 0x02	; 2
     462:	31 f4       	brne	.+12     	; 0x470 <BTN_Task+0x5c>
     464:	87 e5       	ldi	r24, 0x57	; 87
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	7d d4       	rcall	.+2298   	; 0xd64 <UART_SendString>
     46a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
     46e:	08 95       	ret
     470:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
     474:	08 95       	ret

00000476 <D_Blinky>:
     476:	9b b1       	in	r25, 0x0b	; 11
     478:	80 ea       	ldi	r24, 0xA0	; 160
     47a:	89 27       	eor	r24, r25
     47c:	8b b9       	out	0x0b, r24	; 11
     47e:	08 95       	ret

00000480 <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
     480:	08 95       	ret

00000482 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	7c 01       	movw	r14, r24
     48e:	16 2f       	mov	r17, r22
     490:	d4 2f       	mov	r29, r20
     492:	c2 2f       	mov	r28, r18
     494:	85 e0       	ldi	r24, 0x05	; 5
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	95 d4       	rcall	.+2346   	; 0xdc4 <malloc>
     49a:	fc 01       	movw	r30, r24
     49c:	f1 82       	std	Z+1, r15	; 0x01
     49e:	e0 82       	st	Z, r14
     4a0:	12 83       	std	Z+2, r17	; 0x02
     4a2:	d3 83       	std	Z+3, r29	; 0x03
     4a4:	c4 83       	std	Z+4, r28	; 0x04
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	08 95       	ret

000004b2 <LL_ItemListInit>:
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	ec 01       	movw	r28, r24
     4b8:	86 e0       	ldi	r24, 0x06	; 6
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	83 d4       	rcall	.+2310   	; 0xdc4 <malloc>
     4be:	fc 01       	movw	r30, r24
     4c0:	d1 83       	std	Z+1, r29	; 0x01
     4c2:	c0 83       	st	Z, r28
     4c4:	15 82       	std	Z+5, r1	; 0x05
     4c6:	14 82       	std	Z+4, r1	; 0x04
     4c8:	13 82       	std	Z+3, r1	; 0x03
     4ca:	12 82       	std	Z+2, r1	; 0x02
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <LL_Next>:
     4d2:	fc 01       	movw	r30, r24
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	93 81       	ldd	r25, Z+3	; 0x03
     4d8:	08 95       	ret

000004da <LL_AddBack>:
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	01 c0       	rjmp	.+2      	; 0x4e6 <LL_AddBack+0xc>
     4e4:	e9 01       	movw	r28, r18
     4e6:	2a 81       	ldd	r18, Y+2	; 0x02
     4e8:	3b 81       	ldd	r19, Y+3	; 0x03
     4ea:	21 15       	cp	r18, r1
     4ec:	31 05       	cpc	r19, r1
     4ee:	d1 f7       	brne	.-12     	; 0x4e4 <LL_AddBack+0xa>
     4f0:	e0 df       	rcall	.-64     	; 0x4b2 <LL_ItemListInit>
     4f2:	9b 83       	std	Y+3, r25	; 0x03
     4f4:	8a 83       	std	Y+2, r24	; 0x02
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <LL_Size>:
     4fc:	dc 01       	movw	r26, r24
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	ed 91       	ld	r30, X+
     502:	fc 91       	ld	r31, X
     504:	13 97       	sbiw	r26, 0x03	; 3
     506:	30 97       	sbiw	r30, 0x00	; 0
     508:	41 f0       	breq	.+16     	; 0x51a <LL_Size+0x1e>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	02 80       	ldd	r0, Z+2	; 0x02
     510:	f3 81       	ldd	r31, Z+3	; 0x03
     512:	e0 2d       	mov	r30, r0
     514:	30 97       	sbiw	r30, 0x00	; 0
     516:	d1 f7       	brne	.-12     	; 0x50c <LL_Size+0x10>
     518:	08 95       	ret
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	08 95       	ret

0000051e <LL_GetClass>:
     51e:	dc 01       	movw	r26, r24
     520:	ed 91       	ld	r30, X+
     522:	fc 91       	ld	r31, X
     524:	83 81       	ldd	r24, Z+3	; 0x03
     526:	08 95       	ret

00000528 <LL_GetRefl>:
     528:	dc 01       	movw	r26, r24
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	08 95       	ret

00000534 <LL_GetMag>:
     534:	dc 01       	movw	r26, r24
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	82 81       	ldd	r24, Z+2	; 0x02
     53c:	08 95       	ret

0000053e <LL_UpdateRefl>:
     53e:	dc 01       	movw	r26, r24
     540:	ed 91       	ld	r30, X+
     542:	fc 91       	ld	r31, X
     544:	71 83       	std	Z+1, r23	; 0x01
     546:	60 83       	st	Z, r22
     548:	08 95       	ret

0000054a <LL_UpdateMag>:
     54a:	dc 01       	movw	r26, r24
     54c:	ed 91       	ld	r30, X+
     54e:	fc 91       	ld	r31, X
     550:	62 83       	std	Z+2, r22	; 0x02
     552:	08 95       	ret

00000554 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     554:	dc 01       	movw	r26, r24
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	64 83       	std	Z+4, r22	; 0x04
     55c:	08 95       	ret

0000055e <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     55e:	dc 01       	movw	r26, r24
     560:	ed 91       	ld	r30, X+
     562:	fc 91       	ld	r31, X
     564:	84 81       	ldd	r24, Z+4	; 0x04
     566:	08 95       	ret

00000568 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     56c:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     56e:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     570:	80 ef       	ldi	r24, 0xF0	; 240
     572:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     574:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     576:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	08 95       	ret

0000057e <main>:
	EXECACQ();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     57e:	95 d1       	rcall	.+810    	; 0x8aa <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     580:	89 b1       	in	r24, 0x09	; 9
     582:	83 70       	andi	r24, 0x03	; 3
     584:	e9 f7       	brne	.-6      	; 0x580 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     586:	8f e7       	ldi	r24, 0x7F	; 127
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	ec d3       	rcall	.+2008   	; 0xd64 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     58c:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	45 ec       	ldi	r20, 0xC5	; 197
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	69 d3       	rcall	.+1746   	; 0xc72 <TIMER_Create>
		_timer[0].state = READY;
     5a0:	c8 e7       	ldi	r28, 0x78	; 120
     5a2:	d2 e0       	ldi	r29, 0x02	; 2
     5a4:	12 e0       	ldi	r17, 0x02	; 2
     5a6:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	40 e2       	ldi	r20, 0x20	; 32
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	5c d3       	rcall	.+1720   	; 0xc72 <TIMER_Create>
		_timer[1].state = BLOCKED;
     5ba:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	4e e8       	ldi	r20, 0x8E	; 142
     5c2:	51 e0       	ldi	r21, 0x01	; 1
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	52 d3       	rcall	.+1700   	; 0xc72 <TIMER_Create>
		_timer[2].state = BLOCKED;
     5ce:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	41 ed       	ldi	r20, 0xD1	; 209
     5d6:	51 e0       	ldi	r21, 0x01	; 1
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	48 d3       	rcall	.+1680   	; 0xc72 <TIMER_Create>
		_timer[3].state = BLOCKED;
     5e2:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(180, 1, ADD_Task, NULL);		// Item Enter Handling
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e4       	ldi	r20, 0x40	; 64
     5ea:	52 e0       	ldi	r21, 0x02	; 2
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	84 eb       	ldi	r24, 0xB4	; 180
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	3e d3       	rcall	.+1660   	; 0xc72 <TIMER_Create>
		_timer[4].state = BLOCKED;
     5f6:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	4a e0       	ldi	r20, 0x0A	; 10
     5fe:	52 e0       	ldi	r21, 0x02	; 2
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	82 e3       	ldi	r24, 0x32	; 50
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	34 d3       	rcall	.+1640   	; 0xc72 <TIMER_Create>
		_timer[5].state = READY;
     60a:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);		// Blinky Leds
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	4b e3       	ldi	r20, 0x3B	; 59
     612:	52 e0       	ldi	r21, 0x02	; 2
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	88 ee       	ldi	r24, 0xE8	; 232
		_timer[6].state = READY;				//_timer[6]
     61a:	93 e0       	ldi	r25, 0x03	; 3

		UART_SendString("System Ready...\r\n");
     61c:	2a d3       	rcall	.+1620   	; 0xc72 <TIMER_Create>
     61e:	1e af       	std	Y+62, r17	; 0x3e
     620:	82 e9       	ldi	r24, 0x92	; 146
     622:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     624:	9f d3       	rcall	.+1854   	; 0xd64 <UART_SendString>
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	13 d0       	rcall	.+38     	; 0x652 <PWM>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     62c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     62e:	ff cf       	rjmp	.-2      	; 0x62e <main+0xb0>

00000630 <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     63a:	8a ea       	ldi	r24, 0xAA	; 170
     63c:	88 b9       	out	0x08, r24	; 8
     63e:	fe cf       	rjmp	.-4      	; 0x63c <__vector_default+0xc>

00000640 <PWM_Init>:
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
} // PWM_Init

void PWM(const int dutyCycle)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     640:	84 b5       	in	r24, 0x24	; 36
     642:	83 68       	ori	r24, 0x83	; 131
     644:	84 bd       	out	0x24, r24	; 36
	{
		OCR0A = 0x80;
		if (dutyCycle) 
     646:	85 b5       	in	r24, 0x25	; 37
     648:	83 60       	ori	r24, 0x03	; 3
     64a:	85 bd       	out	0x25, r24	; 37
		{
			gMotorOn = 1;
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	87 bd       	out	0x27, r24	; 39
     650:	08 95       	ret

00000652 <PWM>:
			PORTB = ~0x0E;
		}
		else 
		{
			gMotorOn = 0;
			PORTB = ~0x0F;
     652:	20 e8       	ldi	r18, 0x80	; 128
     654:	27 bd       	out	0x27, r18	; 39
		}
     656:	89 2b       	or	r24, r25
     658:	31 f0       	breq	.+12     	; 0x666 <PWM+0x14>
	}
} // PWM
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <gMotorOn>
     660:	81 ef       	ldi	r24, 0xF1	; 241
     662:	85 b9       	out	0x05, r24	; 5
     664:	08 95       	ret
     666:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <gMotorOn>
     66a:	80 ef       	ldi	r24, 0xF0	; 240
     66c:	85 b9       	out	0x05, r24	; 5
     66e:	08 95       	ret

00000670 <STEPPER_Init>:
//TODO; Write spin down


void STEPPER_Init()
{
	stepper._stepNum = 0;
     670:	e2 ec       	ldi	r30, 0xC2	; 194
     672:	f2 e0       	ldi	r31, 0x02	; 2
     674:	10 82       	st	Z, r1
	stepper.direction = 1;
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     67a:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     67c:	13 82       	std	Z+3, r1	; 0x03
	stepper._targetStep = 200;
     67e:	88 ec       	ldi	r24, 0xC8	; 200
     680:	84 83       	std	Z+4, r24	; 0x04
	stepper._currentStep = 0;
     682:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
     684:	16 82       	std	Z+6, r1	; 0x06
	stepper._delay = 0x14;
     686:	84 e1       	ldi	r24, 0x14	; 20
     688:	87 83       	std	Z+7, r24	; 0x07
	PORTA = 0x30;
     68a:	80 e3       	ldi	r24, 0x30	; 48
     68c:	82 b9       	out	0x02, r24	; 2
	cli();
     68e:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x90;
     690:	80 e9       	ldi	r24, 0x90	; 144
     692:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     696:	e0 eb       	ldi	r30, 0xB0	; 176
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     6a0:	e0 e7       	ldi	r30, 0x70	; 112
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     6aa:	e1 eb       	ldi	r30, 0xB1	; 177
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	87 60       	ori	r24, 0x07	; 7
     6b2:	80 83       	st	Z, r24
	
	sei();
     6b4:	78 94       	sei
     6b6:	08 95       	ret

000006b8 <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	86 1b       	sub	r24, r22
     6bc:	91 09       	sbc	r25, r1
	if (steps >= 0)
     6be:	52 f0       	brmi	.+20     	; 0x6d4 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     6c0:	85 36       	cpi	r24, 0x65	; 101
     6c2:	91 05       	cpc	r25, r1
     6c4:	8c f0       	brlt	.+34     	; 0x6e8 <STEPPER_NumSteps+0x30>
     6c6:	24 e6       	ldi	r18, 0x64	; 100
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	48 1b       	sub	r20, r24
     6ce:	59 0b       	sbc	r21, r25
     6d0:	ca 01       	movw	r24, r20
     6d2:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     6d4:	8c 39       	cpi	r24, 0x9C	; 156
     6d6:	5f ef       	ldi	r21, 0xFF	; 255
     6d8:	95 07       	cpc	r25, r21
     6da:	34 f0       	brlt	.+12     	; 0x6e8 <STEPPER_NumSteps+0x30>
     6dc:	2c e9       	ldi	r18, 0x9C	; 156
     6de:	3f ef       	ldi	r19, 0xFF	; 255
     6e0:	a9 01       	movw	r20, r18
     6e2:	48 1b       	sub	r20, r24
     6e4:	59 0b       	sbc	r21, r25
     6e6:	ca 01       	movw	r24, r20
	}
	return steps;
}
     6e8:	08 95       	ret

000006ea <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     6f2:	c2 ec       	ldi	r28, 0xC2	; 194
     6f4:	d2 e0       	ldi	r29, 0x02	; 2
     6f6:	0a 81       	ldd	r16, Y+2	; 0x02
     6f8:	6b 81       	ldd	r22, Y+3	; 0x03
     6fa:	80 2f       	mov	r24, r16
     6fc:	dd df       	rcall	.-70     	; 0x6b8 <STEPPER_NumSteps>
     6fe:	18 2f       	mov	r17, r24
     700:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next pos
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     702:	60 2f       	mov	r22, r16
     704:	8e 81       	ldd	r24, Y+6	; 0x06
     706:	d8 df       	rcall	.-80     	; 0x6b8 <STEPPER_NumSteps>
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     708:	24 e0       	ldi	r18, 0x04	; 4
     70a:	29 83       	std	Y+1, r18	; 0x01
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     70c:	9c 01       	movw	r18, r24
     70e:	12 9f       	mul	r17, r18
     710:	c0 01       	movw	r24, r0
     712:	13 9f       	mul	r17, r19
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	89 2f       	mov	r24, r25
     71a:	80 95       	com	r24
     71c:	88 1f       	adc	r24, r24
     71e:	88 27       	eor	r24, r24
     720:	88 1f       	adc	r24, r24
     722:	88 87       	std	Y+8, r24	; 0x08

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
     724:	1d 82       	std	Y+5, r1	; 0x05
}
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	08 95       	ret

00000730 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
	cli();
     734:	f8 94       	cli
	//Use this to set the target positions
	stepper.target = target;
     736:	c2 ec       	ldi	r28, 0xC2	; 194
     738:	d2 e0       	ldi	r29, 0x02	; 2
     73a:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     73c:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
     73e:	d5 df       	rcall	.-86     	; 0x6ea <STEPPER_Rotate>
	OCR2A = 0x07 * stepper._delay;
     740:	9f 81       	ldd	r25, Y+7	; 0x07
     742:	89 2f       	mov	r24, r25
     744:	88 0f       	add	r24, r24
     746:	88 0f       	add	r24, r24
     748:	88 0f       	add	r24, r24
     74a:	89 1b       	sub	r24, r25
     74c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     750:	78 94       	sei
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <__vector_13>:

//TODO: double up steps and decrease timer scaling for higher accuracy

ISR(TIMER2_COMPA_vect)
{
     758:	1f 92       	push	r1
     75a:	0f 92       	push	r0
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	0f 92       	push	r0
     760:	11 24       	eor	r1, r1
     762:	0b b6       	in	r0, 0x3b	; 59
     764:	0f 92       	push	r0
     766:	2f 93       	push	r18
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	af 93       	push	r26
     76e:	bf 93       	push	r27
     770:	ef 93       	push	r30
     772:	ff 93       	push	r31
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	00 d0       	rcall	.+0      	; 0x77a <__vector_13+0x22>
     77a:	00 d0       	rcall	.+0      	; 0x77c <__vector_13+0x24>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
// 	PORTC ^= 0xFE;
// 	PORTC |= 0x01;  
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     780:	86 e3       	ldi	r24, 0x36	; 54
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	9e e2       	ldi	r25, 0x2E	; 46
     78a:	ad e2       	ldi	r26, 0x2D	; 45
     78c:	b5 e3       	ldi	r27, 0x35	; 53
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	ab 83       	std	Y+3, r26	; 0x03
     794:	bc 83       	std	Y+4, r27	; 0x04
	if (stepper._currentStep < stepper._targetStep)
     796:	e2 ec       	ldi	r30, 0xC2	; 194
     798:	f2 e0       	ldi	r31, 0x02	; 2
     79a:	95 81       	ldd	r25, Z+5	; 0x05
     79c:	84 81       	ldd	r24, Z+4	; 0x04
     79e:	98 17       	cp	r25, r24
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__vector_13+0x4c>
     7a2:	51 c0       	rjmp	.+162    	; 0x846 <__vector_13+0xee>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     7a4:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <stepper+0x1>
     7a8:	84 30       	cpi	r24, 0x04	; 4
     7aa:	51 f4       	brne	.+20     	; 0x7c0 <__vector_13+0x68>
     7ac:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <stepper>
     7b0:	e1 e0       	ldi	r30, 0x01	; 1
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ec 0f       	add	r30, r28
     7b6:	fd 1f       	adc	r31, r29
     7b8:	e8 0f       	add	r30, r24
     7ba:	f1 1d       	adc	r31, r1
     7bc:	80 81       	ld	r24, Z
     7be:	0d c0       	rjmp	.+26     	; 0x7da <__vector_13+0x82>
     7c0:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <stepper>
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	e8 1b       	sub	r30, r24
     7ca:	f1 09       	sbc	r31, r1
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	8c 0f       	add	r24, r28
     7d2:	9d 1f       	adc	r25, r29
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	80 81       	ld	r24, Z
     7da:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     7dc:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <stepper>
     7e0:	83 30       	cpi	r24, 0x03	; 3
     7e2:	11 f0       	breq	.+4      	; 0x7e8 <__vector_13+0x90>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <__vector_13+0x92>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	e2 ec       	ldi	r30, 0xC2	; 194
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	80 83       	st	Z, r24

		stepper._currentStep++;
     7f0:	85 81       	ldd	r24, Z+5	; 0x05
     7f2:	8f 5f       	subi	r24, 0xFF	; 255
     7f4:	85 83       	std	Z+5, r24	; 0x05

		//Simple accel / decel block
		if ((stepper._currentStep > 5) && (stepper._delay > 6)){
     7f6:	86 30       	cpi	r24, 0x06	; 6
     7f8:	70 f0       	brcs	.+28     	; 0x816 <__vector_13+0xbe>
     7fa:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <stepper+0x7>
     7fe:	87 30       	cpi	r24, 0x07	; 7
     800:	50 f0       	brcs	.+20     	; 0x816 <__vector_13+0xbe>
			stepper._delay--;
     802:	81 50       	subi	r24, 0x01	; 1
     804:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     808:	98 2f       	mov	r25, r24
     80a:	99 0f       	add	r25, r25
     80c:	99 0f       	add	r25, r25
     80e:	99 0f       	add	r25, r25
     810:	98 1b       	sub	r25, r24
     812:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		}
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (stepper._delay < 0x13)){
     816:	e2 ec       	ldi	r30, 0xC2	; 194
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	25 81       	ldd	r18, Z+5	; 0x05
     820:	82 1b       	sub	r24, r18
     822:	91 09       	sbc	r25, r1
     824:	06 97       	sbiw	r24, 0x06	; 6
     826:	6c f5       	brge	.+90     	; 0x882 <__vector_13+0x12a>
     828:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <stepper+0x7>
     82c:	83 31       	cpi	r24, 0x13	; 19
     82e:	48 f5       	brcc	.+82     	; 0x882 <__vector_13+0x12a>
			stepper._delay++;
     830:	8f 5f       	subi	r24, 0xFF	; 255
     832:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <stepper+0x7>
			OCR2A = 0x07 * stepper._delay;
     836:	98 2f       	mov	r25, r24
     838:	99 0f       	add	r25, r25
     83a:	99 0f       	add	r25, r25
     83c:	99 0f       	add	r25, r25
     83e:	98 1b       	sub	r25, r24
     840:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     844:	1e c0       	rjmp	.+60     	; 0x882 <__vector_13+0x12a>
		}
		
	}
	else if (stepper._currentStep == stepper._targetStep)
     846:	98 13       	cpse	r25, r24
     848:	1c c0       	rjmp	.+56     	; 0x882 <__vector_13+0x12a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     84a:	e2 ec       	ldi	r30, 0xC2	; 194
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	82 81       	ldd	r24, Z+2	; 0x02
     850:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._delay = (stepper._willContinue) ? stepper._delay : 20;
     852:	80 85       	ldd	r24, Z+8	; 0x08
     854:	88 23       	and	r24, r24
     856:	19 f0       	breq	.+6      	; 0x85e <__vector_13+0x106>
     858:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <stepper+0x7>
     85c:	01 c0       	rjmp	.+2      	; 0x860 <__vector_13+0x108>
     85e:	94 e1       	ldi	r25, 0x14	; 20
     860:	e2 ec       	ldi	r30, 0xC2	; 194
     862:	f2 e0       	ldi	r31, 0x02	; 2
     864:	97 83       	std	Z+7, r25	; 0x07
		OCR2A = 0x07 * stepper._delay;
     866:	89 2f       	mov	r24, r25
     868:	88 0f       	add	r24, r24
     86a:	88 0f       	add	r24, r24
     86c:	88 0f       	add	r24, r24
     86e:	89 1b       	sub	r24, r25
     870:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     874:	80 85       	ldd	r24, Z+8	; 0x08
     876:	88 23       	and	r24, r24
     878:	11 f0       	breq	.+4      	; 0x87e <__vector_13+0x126>
     87a:	82 b1       	in	r24, 0x02	; 2
     87c:	01 c0       	rjmp	.+2      	; 0x880 <__vector_13+0x128>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	82 b9       	out	0x02, r24	; 2
	}
	//PORTC &= 0xFE;
	//PORTC ^= 0xFF;
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	2f 91       	pop	r18
     89c:	0f 90       	pop	r0
     89e:	0b be       	out	0x3b, r0	; 59
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     8b0:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     8b2:	e1 e6       	ldi	r30, 0x61	; 97
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	80 83       	st	Z, r24
	CLKPR = 0;
     8ba:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     8bc:	3b d2       	rcall	.+1142   	; 0xd34 <UART_Init>
	GPIO_Init();
     8be:	54 de       	rcall	.-856    	; 0x568 <GPIO_Init>
	TIMER_Init();
     8c0:	be d1       	rcall	.+892    	; 0xc3e <TIMER_Init>
	PWM_Init();
     8c2:	be de       	rcall	.-644    	; 0x640 <PWM_Init>
     8c4:	08 dc       	rcall	.-2032   	; 0xd6 <ADC_Init>
	ADC_Init();
     8c6:	d4 de       	rcall	.-600    	; 0x670 <STEPPER_Init>
     8c8:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <g_ADCCount+0x1>
	STEPPER_Init();
     8cc:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     8d0:	84 e1       	ldi	r24, 0x14	; 20
     8d2:	ec e5       	ldi	r30, 0x5C	; 92
     8d4:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     8d6:	df 01       	movw	r26, r30
     8d8:	1d 92       	st	X+, r1
     8da:	8a 95       	dec	r24
     8dc:	e9 f7       	brne	.-6      	; 0x8d8 <SYS_Init+0x2e>
     8de:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <g_ADCFlag>
     8e2:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <HEAD+0x1>
	g_ADCFlag = 0;
     8e6:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <HEAD>

	HEAD = NULL;
     8ea:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <TAIL+0x1>
     8ee:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <TAIL>
	TAIL = NULL;
     8f2:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <STAGE1+0x1>
     8f6:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <STAGE1>
	STAGE1 = NULL;
     8fa:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <STAGE2+0x1>
     8fe:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <STAGE2>
	STAGE2 = NULL;
     902:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <FRONT+0x1>
     906:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <FRONT>
	FRONT = NULL;
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     90e:	6f ef       	ldi	r22, 0xFF	; 255
     910:	89 ee       	ldi	r24, 0xE9	; 233
     912:	9d ef       	ldi	r25, 0xFD	; 253
     914:	b6 dd       	rcall	.-1172   	; 0x482 <LL_ItemInit>
     916:	cd dd       	rcall	.-1126   	; 0x4b2 <LL_ItemListInit>
     918:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     91c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <HEAD>
     920:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <FRONT+0x1>
     924:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <FRONT>
	FRONT = HEAD;
     928:	cb ec       	ldi	r28, 0xCB	; 203
     92a:	09 eb       	ldi	r16, 0xB9	; 185
     92c:	1d ef       	ldi	r17, 0xFD	; 253
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	44 e0       	ldi	r20, 0x04	; 4

	// 47 Nodes
	for(int i = 47; i > 0; i--)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     932:	6c 2f       	mov	r22, r28
     934:	c8 01       	movw	r24, r16
     936:	a5 dd       	rcall	.-1206   	; 0x482 <LL_ItemInit>
     938:	bc 01       	movw	r22, r24
     93a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     93e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     942:	cb dd       	rcall	.-1130   	; 0x4da <LL_AddBack>
     944:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <TAIL+0x1>
     948:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <TAIL>
     94c:	0f 5f       	subi	r16, 0xFF	; 255
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	cf 5f       	subi	r28, 0xFF	; 255
     952:	ca 3f       	cpi	r28, 0xFA	; 250
     954:	61 f7       	brne	.-40     	; 0x92e <SYS_Init+0x84>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 47 Nodes
	for(int i = 47; i > 0; i--)
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	45 e0       	ldi	r20, 0x05	; 5
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	
	// End Node
	initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     95a:	6a ef       	ldi	r22, 0xFA	; 250
     95c:	88 ee       	ldi	r24, 0xE8	; 232
     95e:	9d ef       	ldi	r25, 0xFD	; 253
     960:	90 dd       	rcall	.-1248   	; 0x482 <LL_ItemInit>
     962:	bc 01       	movw	r22, r24
     964:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <HEAD>
	LL_AddBack(HEAD,initNode);
     968:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <HEAD+0x1>
     96c:	b6 dd       	rcall	.-1172   	; 0x4da <LL_AddBack>
     96e:	cf 91       	pop	r28
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16

//	char temp[50];
//	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
//	UART_SendString(temp);
} // SYS_Init
     974:	08 95       	ret

00000976 <SYS_Pause>:
     976:	3f 92       	push	r3
     978:	4f 92       	push	r4
     97a:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     97c:	6f 92       	push	r6
     97e:	7f 92       	push	r7
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	c4 56       	subi	r28, 0x64	; 100
     99e:	d1 09       	sbc	r29, r1
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	98 2e       	mov	r9, r24
     9ac:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     9ae:	f8 94       	cli

	// Turn off motor
	PWM(0);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	4e de       	rcall	.-868    	; 0x652 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     9b6:	00 91 56 02 	lds	r16, 0x0256	; 0x800256 <FRONT>
     9ba:	10 91 57 02 	lds	r17, 0x0257	; 0x800257 <FRONT+0x1>
	int c = 0;
     9be:	e1 2c       	mov	r14, r1
     9c0:	f1 2c       	mov	r15, r1
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f4 ea       	ldi	r31, 0xA4	; 164
     9c6:	af 2e       	mov	r10, r31
     9c8:	f1 e0       	ldi	r31, 0x01	; 1
     9ca:	bf 2e       	mov	r11, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	6e 01       	movw	r12, r28
     9d0:	83 e3       	ldi	r24, 0x33	; 51
     9d2:	c8 0e       	add	r12, r24
     9d4:	d1 1c       	adc	r13, r1
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     9d6:	27 c0       	rjmp	.+78     	; 0xa26 <SYS_Pause+0xb0>
	{
		char listbuff[50];
		c++;
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	e9 1a       	sub	r14, r25
     9dc:	f9 0a       	sbc	r15, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     9de:	c8 01       	movw	r24, r16
     9e0:	be dd       	rcall	.-1156   	; 0x55e <LL_GetStatus>
     9e2:	58 2e       	mov	r5, r24
     9e4:	c8 01       	movw	r24, r16
     9e6:	9b dd       	rcall	.-1226   	; 0x51e <LL_GetClass>
     9e8:	68 2e       	mov	r6, r24
     9ea:	c8 01       	movw	r24, r16
     9ec:	a3 dd       	rcall	.-1210   	; 0x534 <LL_GetMag>
     9ee:	78 2e       	mov	r7, r24
     9f0:	c8 01       	movw	r24, r16
     9f2:	9a dd       	rcall	.-1228   	; 0x528 <LL_GetRefl>
     9f4:	1f 92       	push	r1
     9f6:	5f 92       	push	r5
     9f8:	1f 92       	push	r1
     9fa:	6f 92       	push	r6
     9fc:	1f 92       	push	r1
     9fe:	7f 92       	push	r7
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	ff 92       	push	r15
     a06:	ef 92       	push	r14
     a08:	bf 92       	push	r11
     a0a:	af 92       	push	r10
     a0c:	df 92       	push	r13
     a0e:	cf 92       	push	r12
     a10:	fa d2       	rcall	.+1524   	; 0x1006 <sprintf>
		UART_SendString(listbuff);
     a12:	c6 01       	movw	r24, r12
     a14:	a7 d1       	rcall	.+846    	; 0xd64 <UART_SendString>
     a16:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     a18:	5c dd       	rcall	.-1352   	; 0x4d2 <LL_Next>
     a1a:	8c 01       	movw	r16, r24
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	c8 01       	movw	r24, r16
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     a28:	7a dd       	rcall	.-1292   	; 0x51e <LL_GetClass>
     a2a:	85 30       	cpi	r24, 0x05	; 5
     a2c:	a9 f6       	brne	.-86     	; 0x9d8 <SYS_Pause+0x62>
     a2e:	0f 2e       	mov	r0, r31
     a30:	f8 e7       	ldi	r31, 0x78	; 120
     a32:	cf 2e       	mov	r12, r31
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	df 2e       	mov	r13, r31
     a38:	f0 2d       	mov	r31, r0
     a3a:	00 e0       	ldi	r16, 0x00	; 0
     a3c:	10 e0       	ldi	r17, 0x00	; 0
     a3e:	0f 2e       	mov	r0, r31
     a40:	f8 ed       	ldi	r31, 0xD8	; 216
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     a42:	af 2e       	mov	r10, r31
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	bf 2e       	mov	r11, r31
     a48:	f0 2d       	mov	r31, r0
     a4a:	7e 01       	movw	r14, r28
     a4c:	f3 e3       	ldi	r31, 0x33	; 51
     a4e:	ef 0e       	add	r14, r31
     a50:	f1 1c       	adc	r15, r1
     a52:	f6 01       	movw	r30, r12
     a54:	80 85       	ldd	r24, Z+8	; 0x08
     a56:	1f 92       	push	r1
     a58:	8f 93       	push	r24
     a5a:	1f 93       	push	r17
     a5c:	0f 93       	push	r16
     a5e:	8f 92       	push	r8
     a60:	9f 92       	push	r9
     a62:	bf 92       	push	r11
     a64:	af 92       	push	r10
     a66:	ff 92       	push	r15
     a68:	ef 92       	push	r14
     a6a:	cd d2       	rcall	.+1434   	; 0x1006 <sprintf>
     a6c:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     a6e:	7a d1       	rcall	.+756    	; 0xd64 <UART_SendString>
     a70:	0f 5f       	subi	r16, 0xFF	; 255
     a72:	1f 4f       	sbci	r17, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     a74:	f9 e0       	ldi	r31, 0x09	; 9
     a76:	cf 0e       	add	r12, r31
     a78:	d1 1c       	adc	r13, r1
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	07 30       	cpi	r16, 0x07	; 7
     a86:	11 05       	cpc	r17, r1
     a88:	21 f7       	brne	.-56     	; 0xa52 <SYS_Pause+0xdc>
     a8a:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <STAGE2>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     a8e:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <STAGE2+0x1>
     a92:	4a dd       	rcall	.-1388   	; 0x528 <LL_GetRefl>
     a94:	48 2e       	mov	r4, r24
     a96:	39 2e       	mov	r3, r25
     a98:	60 90 c0 02 	lds	r6, 0x02C0	; 0x8002c0 <STAGE2>
     a9c:	50 90 c1 02 	lds	r5, 0x02C1	; 0x8002c1 <STAGE2+0x1>
     aa0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <STAGE1>
     aa4:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <STAGE1+0x1>
     aa8:	45 dd       	rcall	.-1398   	; 0x534 <LL_GetMag>
     aaa:	78 2e       	mov	r7, r24
     aac:	90 90 76 02 	lds	r9, 0x0276	; 0x800276 <STAGE1>
     ab0:	80 90 77 02 	lds	r8, 0x0277	; 0x800277 <STAGE1+0x1>
     ab4:	00 91 5a 02 	lds	r16, 0x025A	; 0x80025a <TAIL>
     ab8:	10 91 5b 02 	lds	r17, 0x025B	; 0x80025b <TAIL+0x1>
     abc:	f8 01       	movw	r30, r16
     abe:	b2 80       	ldd	r11, Z+2	; 0x02
     ac0:	a3 80       	ldd	r10, Z+3	; 0x03
     ac2:	d0 90 56 02 	lds	r13, 0x0256	; 0x800256 <FRONT>
     ac6:	c0 90 57 02 	lds	r12, 0x0257	; 0x800257 <FRONT+0x1>
     aca:	f0 90 54 02 	lds	r15, 0x0254	; 0x800254 <HEAD>
     ace:	e0 90 55 02 	lds	r14, 0x0255	; 0x800255 <HEAD+0x1>
     ad2:	8f 2d       	mov	r24, r15
     ad4:	9e 2d       	mov	r25, r14
     ad6:	12 dd       	rcall	.-1500   	; 0x4fc <LL_Size>
     ad8:	3f 92       	push	r3
     ada:	4f 92       	push	r4
     adc:	5f 92       	push	r5
     ade:	6f 92       	push	r6
     ae0:	1f 92       	push	r1
     ae2:	7f 92       	push	r7
     ae4:	8f 92       	push	r8
     ae6:	9f 92       	push	r9
     ae8:	af 92       	push	r10
     aea:	bf 92       	push	r11
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	1f 93       	push	r17
     af2:	0f 93       	push	r16
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	1f 92       	push	r1
     afa:	8f 93       	push	r24
     afc:	87 ef       	ldi	r24, 0xF7	; 247
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	8e 01       	movw	r16, r28
     b06:	0f 5f       	subi	r16, 0xFF	; 255
     b08:	1f 4f       	sbci	r17, 0xFF	; 255
     b0a:	1f 93       	push	r17
     b0c:	0f 93       	push	r16
     b0e:	7b d2       	rcall	.+1270   	; 0x1006 <sprintf>
     b10:	c8 01       	movw	r24, r16
	UART_SendString(anotherbuff);
     b12:	28 d1       	rcall	.+592    	; 0xd64 <UART_SendString>
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	89 b1       	in	r24, 0x09	; 9

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     b20:	83 70       	andi	r24, 0x03	; 3
     b22:	e9 f7       	brne	.-6      	; 0xb1e <SYS_Pause+0x1a8>
     b24:	8f e7       	ldi	r24, 0x7F	; 127
		{
			UART_SendString("Starting System!\r\n");
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	1d d1       	rcall	.+570    	; 0xd64 <UART_SendString>
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     b2e:	91 dd       	rcall	.-1246   	; 0x652 <PWM>
     b30:	78 94       	sei
     b32:	cc 59       	subi	r28, 0x9C	; 156
     b34:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     b36:	0f b6       	in	r0, 0x3f	; 63
			return;
		}
	}
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	7f 90       	pop	r7
     b5a:	6f 90       	pop	r6
     b5c:	5f 90       	pop	r5
     b5e:	4f 90       	pop	r4
     b60:	3f 90       	pop	r3
     b62:	08 95       	ret

00000b64 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	0b b6       	in	r0, 0x3b	; 59
     b70:	0f 92       	push	r0
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     b96:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <_timer_tick>
     b9a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <_timer_tick+0x1>
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <_timer_tick+0x1>
     ba4:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <_timer_tick>
     ba8:	c8 e7       	ldi	r28, 0x78	; 120
     baa:	d2 e0       	ldi	r29, 0x02	; 2
     bac:	0f 2e       	mov	r0, r31
     bae:	f0 ec       	ldi	r31, 0xC0	; 192
     bb0:	ef 2e       	mov	r14, r31
     bb2:	f2 e0       	ldi	r31, 0x02	; 2
     bb4:	ff 2e       	mov	r15, r31
     bb6:	f0 2d       	mov	r31, r0
     bb8:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     bba:	ec 81       	ldd	r30, Y+4	; 0x04
     bbc:	fd 81       	ldd	r31, Y+5	; 0x05
     bbe:	30 97       	sbiw	r30, 0x00	; 0
     bc0:	09 f1       	breq	.+66     	; 0xc04 <__vector_17+0xa0>
     bc2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <_timer_tick>
     bc6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <_timer_tick+0x1>
     bca:	28 81       	ld	r18, Y
     bcc:	39 81       	ldd	r19, Y+1	; 0x01
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	c1 f4       	brne	.+48     	; 0xc04 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     bd4:	88 85       	ldd	r24, Y+8	; 0x08
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <__vector_17+0x7c>
     bda:	8e 81       	ldd	r24, Y+6	; 0x06
     bdc:	9f 81       	ldd	r25, Y+7	; 0x07
     bde:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     be0:	d8 01       	movw	r26, r16
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	8d 91       	ld	r24, X+
     be6:	9c 91       	ld	r25, X
     be8:	13 97       	sbiw	r26, 0x03	; 3
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	41 f0       	breq	.+16     	; 0xbfe <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     bee:	2d 91       	ld	r18, X+
     bf0:	3c 91       	ld	r19, X
     bf2:	11 97       	sbiw	r26, 0x01	; 1
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	8d 93       	st	X+, r24
     bfa:	9c 93       	st	X, r25
     bfc:	03 c0       	rjmp	.+6      	; 0xc04 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     bfe:	f8 01       	movw	r30, r16
     c00:	15 82       	std	Z+5, r1	; 0x05
     c02:	14 82       	std	Z+4, r1	; 0x04
     c04:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     c06:	ce 15       	cp	r28, r14
     c08:	df 05       	cpc	r29, r15
     c0a:	b1 f6       	brne	.-84     	; 0xbb8 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	0f 90       	pop	r0
     c32:	0b be       	out	0x3b, r0	; 59
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <TIMER_Init>:
	/*! 
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
    TCNT1 = 0x0000;
     c3e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c42:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us
    OCR1A = 0x0DE0;
     c46:	80 ee       	ldi	r24, 0xE0	; 224
     c48:	9d e0       	ldi	r25, 0x0D	; 13
     c4a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c4e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
     c52:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
     c56:	89 e0       	ldi	r24, 0x09	; 9
     c58:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
     c62:	88 e4       	ldi	r24, 0x48	; 72
     c64:	e8 e7       	ldi	r30, 0x78	; 120
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	df 01       	movw	r26, r30
     c6a:	1d 92       	st	X+, r1
     c6c:	8a 95       	dec	r24
     c6e:	e9 f7       	brne	.-6      	; 0xc6a <TIMER_Init+0x2c>
     c70:	08 95       	ret

00000c72 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     c7c:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <_timer+0x4>
     c80:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <_timer+0x5>
     c84:	67 2b       	or	r22, r23
     c86:	09 f4       	brne	.+2      	; 0xc8a <TIMER_Create+0x18>
     c88:	49 c0       	rjmp	.+146    	; 0xd1c <TIMER_Create+0xaa>
     c8a:	e8 e7       	ldi	r30, 0x78	; 120
     c8c:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     c8e:	a1 e0       	ldi	r26, 0x01	; 1
     c90:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     c92:	c5 85       	ldd	r28, Z+13	; 0x0d
     c94:	d6 85       	ldd	r29, Z+14	; 0x0e
     c96:	cd 2b       	or	r28, r29
     c98:	09 f4       	brne	.+2      	; 0xc9c <TIMER_Create+0x2a>
     c9a:	42 c0       	rjmp	.+132    	; 0xd20 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	39 96       	adiw	r30, 0x09	; 9
     ca0:	a8 30       	cpi	r26, 0x08	; 8
     ca2:	b1 05       	cpc	r27, r1
     ca4:	b1 f7       	brne	.-20     	; 0xc92 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
     cac:	fd 01       	movw	r30, r26
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ea 0f       	add	r30, r26
     cbc:	fb 1f       	adc	r31, r27
     cbe:	e8 58       	subi	r30, 0x88	; 136
     cc0:	fd 4f       	sbci	r31, 0xFD	; 253
     cc2:	93 83       	std	Z+3, r25	; 0x03
     cc4:	82 83       	std	Z+2, r24	; 0x02
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     cc8:	fd 01       	movw	r30, r26
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ea 0f       	add	r30, r26
     cd8:	fb 1f       	adc	r31, r27
     cda:	e8 58       	subi	r30, 0x88	; 136
     cdc:	fd 4f       	sbci	r31, 0xFD	; 253
     cde:	13 82       	std	Z+3, r1	; 0x03
     ce0:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     ce2:	fd 01       	movw	r30, r26
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	ea 0f       	add	r30, r26
     cf2:	fb 1f       	adc	r31, r27
     cf4:	e8 58       	subi	r30, 0x88	; 136
     cf6:	fd 4f       	sbci	r31, 0xFD	; 253
     cf8:	55 83       	std	Z+5, r21	; 0x05
     cfa:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     cfc:	37 83       	std	Z+7, r19	; 0x07
     cfe:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
     d00:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <_timer_tick>
     d04:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <_timer_tick+0x1>
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	91 83       	std	Z+1, r25	; 0x01
     d0e:	80 83       	st	Z, r24
			_timer[i].state = READY;
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d14:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     d16:	8a 2f       	mov	r24, r26
     d18:	9b 2f       	mov	r25, r27
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d20:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d22:	f8 94       	cli
		{
			if (periodic != 0) 
     d24:	01 2b       	or	r16, r17
     d26:	11 f6       	brne	.-124    	; 0xcac <TIMER_Create+0x3a>
     d28:	cf cf       	rjmp	.-98     	; 0xcc8 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     d34:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     d38:	83 e3       	ldi	r24, 0x33	; 51
     d3a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     d3e:	e9 ec       	ldi	r30, 0xC9	; 201
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	88 61       	ori	r24, 0x18	; 24
     d46:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     d48:	ea ec       	ldi	r30, 0xCA	; 202
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	86 60       	ori	r24, 0x06	; 6
     d50:	80 83       	st	Z, r24
     d52:	08 95       	ret

00000d54 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     d54:	e8 ec       	ldi	r30, 0xC8	; 200
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	90 81       	ld	r25, Z
     d5a:	95 ff       	sbrs	r25, 5
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <UART_SendChar+0x4>
	UDR1 = c;
     d5e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     d62:	08 95       	ret

00000d64 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     d6a:	88 81       	ld	r24, Y
     d6c:	88 23       	and	r24, r24
     d6e:	29 f0       	breq	.+10     	; 0xd7a <UART_SendString+0x16>
     d70:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
     d72:	f0 df       	rcall	.-32     	; 0xd54 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
     d74:	89 91       	ld	r24, Y+
     d76:	81 11       	cpse	r24, r1
     d78:	fc cf       	rjmp	.-8      	; 0xd72 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <__udivmodsi4>:
     d80:	a1 e2       	ldi	r26, 0x21	; 33
     d82:	1a 2e       	mov	r1, r26
     d84:	aa 1b       	sub	r26, r26
     d86:	bb 1b       	sub	r27, r27
     d88:	fd 01       	movw	r30, r26
     d8a:	0d c0       	rjmp	.+26     	; 0xda6 <__udivmodsi4_ep>

00000d8c <__udivmodsi4_loop>:
     d8c:	aa 1f       	adc	r26, r26
     d8e:	bb 1f       	adc	r27, r27
     d90:	ee 1f       	adc	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	a2 17       	cp	r26, r18
     d96:	b3 07       	cpc	r27, r19
     d98:	e4 07       	cpc	r30, r20
     d9a:	f5 07       	cpc	r31, r21
     d9c:	20 f0       	brcs	.+8      	; 0xda6 <__udivmodsi4_ep>
     d9e:	a2 1b       	sub	r26, r18
     da0:	b3 0b       	sbc	r27, r19
     da2:	e4 0b       	sbc	r30, r20
     da4:	f5 0b       	sbc	r31, r21

00000da6 <__udivmodsi4_ep>:
     da6:	66 1f       	adc	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	1a 94       	dec	r1
     db0:	69 f7       	brne	.-38     	; 0xd8c <__udivmodsi4_loop>
     db2:	60 95       	com	r22
     db4:	70 95       	com	r23
     db6:	80 95       	com	r24
     db8:	90 95       	com	r25
     dba:	9b 01       	movw	r18, r22
     dbc:	ac 01       	movw	r20, r24
     dbe:	bd 01       	movw	r22, r26
     dc0:	cf 01       	movw	r24, r30
     dc2:	08 95       	ret

00000dc4 <malloc>:
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	91 05       	cpc	r25, r1
     dd0:	10 f4       	brcc	.+4      	; 0xdd6 <malloc+0x12>
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <__flp>
     dda:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <__flp+0x1>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	30 97       	sbiw	r30, 0x00	; 0
     de8:	19 f1       	breq	.+70     	; 0xe30 <malloc+0x6c>
     dea:	40 81       	ld	r20, Z
     dec:	51 81       	ldd	r21, Z+1	; 0x01
     dee:	02 81       	ldd	r16, Z+2	; 0x02
     df0:	13 81       	ldd	r17, Z+3	; 0x03
     df2:	48 17       	cp	r20, r24
     df4:	59 07       	cpc	r21, r25
     df6:	c8 f0       	brcs	.+50     	; 0xe2a <malloc+0x66>
     df8:	84 17       	cp	r24, r20
     dfa:	95 07       	cpc	r25, r21
     dfc:	69 f4       	brne	.+26     	; 0xe18 <malloc+0x54>
     dfe:	10 97       	sbiw	r26, 0x00	; 0
     e00:	31 f0       	breq	.+12     	; 0xe0e <malloc+0x4a>
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	0c 93       	st	X, r16
     e06:	12 97       	sbiw	r26, 0x02	; 2
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	1c 93       	st	X, r17
     e0c:	27 c0       	rjmp	.+78     	; 0xe5c <malloc+0x98>
     e0e:	00 93 d9 02 	sts	0x02D9, r16	; 0x8002d9 <__flp>
     e12:	10 93 da 02 	sts	0x02DA, r17	; 0x8002da <__flp+0x1>
     e16:	22 c0       	rjmp	.+68     	; 0xe5c <malloc+0x98>
     e18:	21 15       	cp	r18, r1
     e1a:	31 05       	cpc	r19, r1
     e1c:	19 f0       	breq	.+6      	; 0xe24 <malloc+0x60>
     e1e:	42 17       	cp	r20, r18
     e20:	53 07       	cpc	r21, r19
     e22:	18 f4       	brcc	.+6      	; 0xe2a <malloc+0x66>
     e24:	9a 01       	movw	r18, r20
     e26:	bd 01       	movw	r22, r26
     e28:	ef 01       	movw	r28, r30
     e2a:	df 01       	movw	r26, r30
     e2c:	f8 01       	movw	r30, r16
     e2e:	db cf       	rjmp	.-74     	; 0xde6 <malloc+0x22>
     e30:	21 15       	cp	r18, r1
     e32:	31 05       	cpc	r19, r1
     e34:	f9 f0       	breq	.+62     	; 0xe74 <malloc+0xb0>
     e36:	28 1b       	sub	r18, r24
     e38:	39 0b       	sbc	r19, r25
     e3a:	24 30       	cpi	r18, 0x04	; 4
     e3c:	31 05       	cpc	r19, r1
     e3e:	80 f4       	brcc	.+32     	; 0xe60 <malloc+0x9c>
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	9b 81       	ldd	r25, Y+3	; 0x03
     e44:	61 15       	cp	r22, r1
     e46:	71 05       	cpc	r23, r1
     e48:	21 f0       	breq	.+8      	; 0xe52 <malloc+0x8e>
     e4a:	fb 01       	movw	r30, r22
     e4c:	93 83       	std	Z+3, r25	; 0x03
     e4e:	82 83       	std	Z+2, r24	; 0x02
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <malloc+0x96>
     e52:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <__flp+0x1>
     e56:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <__flp>
     e5a:	fe 01       	movw	r30, r28
     e5c:	32 96       	adiw	r30, 0x02	; 2
     e5e:	44 c0       	rjmp	.+136    	; 0xee8 <malloc+0x124>
     e60:	fe 01       	movw	r30, r28
     e62:	e2 0f       	add	r30, r18
     e64:	f3 1f       	adc	r31, r19
     e66:	81 93       	st	Z+, r24
     e68:	91 93       	st	Z+, r25
     e6a:	22 50       	subi	r18, 0x02	; 2
     e6c:	31 09       	sbc	r19, r1
     e6e:	39 83       	std	Y+1, r19	; 0x01
     e70:	28 83       	st	Y, r18
     e72:	3a c0       	rjmp	.+116    	; 0xee8 <malloc+0x124>
     e74:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <__brkval>
     e78:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <__brkval+0x1>
     e7c:	23 2b       	or	r18, r19
     e7e:	41 f4       	brne	.+16     	; 0xe90 <malloc+0xcc>
     e80:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     e84:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     e88:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <__brkval+0x1>
     e8c:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <__brkval>
     e90:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     e94:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	41 f4       	brne	.+16     	; 0xeae <malloc+0xea>
     e9e:	2d b7       	in	r18, 0x3d	; 61
     ea0:	3e b7       	in	r19, 0x3e	; 62
     ea2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     ea6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     eaa:	24 1b       	sub	r18, r20
     eac:	35 0b       	sbc	r19, r21
     eae:	e0 91 d7 02 	lds	r30, 0x02D7	; 0x8002d7 <__brkval>
     eb2:	f0 91 d8 02 	lds	r31, 0x02D8	; 0x8002d8 <__brkval+0x1>
     eb6:	e2 17       	cp	r30, r18
     eb8:	f3 07       	cpc	r31, r19
     eba:	a0 f4       	brcc	.+40     	; 0xee4 <malloc+0x120>
     ebc:	2e 1b       	sub	r18, r30
     ebe:	3f 0b       	sbc	r19, r31
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	78 f0       	brcs	.+30     	; 0xee4 <malloc+0x120>
     ec6:	ac 01       	movw	r20, r24
     ec8:	4e 5f       	subi	r20, 0xFE	; 254
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	24 17       	cp	r18, r20
     ece:	35 07       	cpc	r19, r21
     ed0:	48 f0       	brcs	.+18     	; 0xee4 <malloc+0x120>
     ed2:	4e 0f       	add	r20, r30
     ed4:	5f 1f       	adc	r21, r31
     ed6:	50 93 d8 02 	sts	0x02D8, r21	; 0x8002d8 <__brkval+0x1>
     eda:	40 93 d7 02 	sts	0x02D7, r20	; 0x8002d7 <__brkval>
     ede:	81 93       	st	Z+, r24
     ee0:	91 93       	st	Z+, r25
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <malloc+0x124>
     ee4:	e0 e0       	ldi	r30, 0x00	; 0
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	cf 01       	movw	r24, r30
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	08 95       	ret

00000ef4 <free>:
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	09 f4       	brne	.+2      	; 0xefe <free+0xa>
     efc:	81 c0       	rjmp	.+258    	; 0x1000 <free+0x10c>
     efe:	fc 01       	movw	r30, r24
     f00:	32 97       	sbiw	r30, 0x02	; 2
     f02:	13 82       	std	Z+3, r1	; 0x03
     f04:	12 82       	std	Z+2, r1	; 0x02
     f06:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <__flp>
     f0a:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <__flp+0x1>
     f0e:	10 97       	sbiw	r26, 0x00	; 0
     f10:	81 f4       	brne	.+32     	; 0xf32 <free+0x3e>
     f12:	20 81       	ld	r18, Z
     f14:	31 81       	ldd	r19, Z+1	; 0x01
     f16:	82 0f       	add	r24, r18
     f18:	93 1f       	adc	r25, r19
     f1a:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <__brkval>
     f1e:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <__brkval+0x1>
     f22:	28 17       	cp	r18, r24
     f24:	39 07       	cpc	r19, r25
     f26:	51 f5       	brne	.+84     	; 0xf7c <free+0x88>
     f28:	f0 93 d8 02 	sts	0x02D8, r31	; 0x8002d8 <__brkval+0x1>
     f2c:	e0 93 d7 02 	sts	0x02D7, r30	; 0x8002d7 <__brkval>
     f30:	67 c0       	rjmp	.+206    	; 0x1000 <free+0x10c>
     f32:	ed 01       	movw	r28, r26
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	ce 17       	cp	r28, r30
     f3a:	df 07       	cpc	r29, r31
     f3c:	40 f4       	brcc	.+16     	; 0xf4e <free+0x5a>
     f3e:	4a 81       	ldd	r20, Y+2	; 0x02
     f40:	5b 81       	ldd	r21, Y+3	; 0x03
     f42:	9e 01       	movw	r18, r28
     f44:	41 15       	cp	r20, r1
     f46:	51 05       	cpc	r21, r1
     f48:	f1 f0       	breq	.+60     	; 0xf86 <free+0x92>
     f4a:	ea 01       	movw	r28, r20
     f4c:	f5 cf       	rjmp	.-22     	; 0xf38 <free+0x44>
     f4e:	d3 83       	std	Z+3, r29	; 0x03
     f50:	c2 83       	std	Z+2, r28	; 0x02
     f52:	40 81       	ld	r20, Z
     f54:	51 81       	ldd	r21, Z+1	; 0x01
     f56:	84 0f       	add	r24, r20
     f58:	95 1f       	adc	r25, r21
     f5a:	c8 17       	cp	r28, r24
     f5c:	d9 07       	cpc	r29, r25
     f5e:	59 f4       	brne	.+22     	; 0xf76 <free+0x82>
     f60:	88 81       	ld	r24, Y
     f62:	99 81       	ldd	r25, Y+1	; 0x01
     f64:	84 0f       	add	r24, r20
     f66:	95 1f       	adc	r25, r21
     f68:	02 96       	adiw	r24, 0x02	; 2
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	9b 81       	ldd	r25, Y+3	; 0x03
     f72:	93 83       	std	Z+3, r25	; 0x03
     f74:	82 83       	std	Z+2, r24	; 0x02
     f76:	21 15       	cp	r18, r1
     f78:	31 05       	cpc	r19, r1
     f7a:	29 f4       	brne	.+10     	; 0xf86 <free+0x92>
     f7c:	f0 93 da 02 	sts	0x02DA, r31	; 0x8002da <__flp+0x1>
     f80:	e0 93 d9 02 	sts	0x02D9, r30	; 0x8002d9 <__flp>
     f84:	3d c0       	rjmp	.+122    	; 0x1000 <free+0x10c>
     f86:	e9 01       	movw	r28, r18
     f88:	fb 83       	std	Y+3, r31	; 0x03
     f8a:	ea 83       	std	Y+2, r30	; 0x02
     f8c:	49 91       	ld	r20, Y+
     f8e:	59 91       	ld	r21, Y+
     f90:	c4 0f       	add	r28, r20
     f92:	d5 1f       	adc	r29, r21
     f94:	ec 17       	cp	r30, r28
     f96:	fd 07       	cpc	r31, r29
     f98:	61 f4       	brne	.+24     	; 0xfb2 <free+0xbe>
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	84 0f       	add	r24, r20
     fa0:	95 1f       	adc	r25, r21
     fa2:	02 96       	adiw	r24, 0x02	; 2
     fa4:	e9 01       	movw	r28, r18
     fa6:	99 83       	std	Y+1, r25	; 0x01
     fa8:	88 83       	st	Y, r24
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	8a 83       	std	Y+2, r24	; 0x02
     fb2:	e0 e0       	ldi	r30, 0x00	; 0
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	13 97       	sbiw	r26, 0x03	; 3
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <free+0xd4>
     fc2:	fd 01       	movw	r30, r26
     fc4:	dc 01       	movw	r26, r24
     fc6:	f7 cf       	rjmp	.-18     	; 0xfb6 <free+0xc2>
     fc8:	8d 91       	ld	r24, X+
     fca:	9c 91       	ld	r25, X
     fcc:	11 97       	sbiw	r26, 0x01	; 1
     fce:	9d 01       	movw	r18, r26
     fd0:	2e 5f       	subi	r18, 0xFE	; 254
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
     fd8:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <__brkval>
     fdc:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <__brkval+0x1>
     fe0:	28 17       	cp	r18, r24
     fe2:	39 07       	cpc	r19, r25
     fe4:	69 f4       	brne	.+26     	; 0x1000 <free+0x10c>
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	29 f4       	brne	.+10     	; 0xff4 <free+0x100>
     fea:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <__flp+0x1>
     fee:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <__flp>
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <free+0x104>
     ff4:	13 82       	std	Z+3, r1	; 0x03
     ff6:	12 82       	std	Z+2, r1	; 0x02
     ff8:	b0 93 d8 02 	sts	0x02D8, r27	; 0x8002d8 <__brkval+0x1>
     ffc:	a0 93 d7 02 	sts	0x02D7, r26	; 0x8002d7 <__brkval>
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <sprintf>:
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	2e 97       	sbiw	r28, 0x0e	; 14
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	0d 89       	ldd	r16, Y+21	; 0x15
    1020:	1e 89       	ldd	r17, Y+22	; 0x16
    1022:	86 e0       	ldi	r24, 0x06	; 6
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	1a 83       	std	Y+2, r17	; 0x02
    1028:	09 83       	std	Y+1, r16	; 0x01
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f e7       	ldi	r25, 0x7F	; 127
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	ae 01       	movw	r20, r28
    1034:	47 5e       	subi	r20, 0xE7	; 231
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	6f 89       	ldd	r22, Y+23	; 0x17
    103a:	78 8d       	ldd	r23, Y+24	; 0x18
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	10 d0       	rcall	.+32     	; 0x1062 <vfprintf>
    1042:	ef 81       	ldd	r30, Y+7	; 0x07
    1044:	f8 85       	ldd	r31, Y+8	; 0x08
    1046:	e0 0f       	add	r30, r16
    1048:	f1 1f       	adc	r31, r17
    104a:	10 82       	st	Z, r1
    104c:	2e 96       	adiw	r28, 0x0e	; 14
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <vfprintf>:
    1062:	2f 92       	push	r2
    1064:	3f 92       	push	r3
    1066:	4f 92       	push	r4
    1068:	5f 92       	push	r5
    106a:	6f 92       	push	r6
    106c:	7f 92       	push	r7
    106e:	8f 92       	push	r8
    1070:	9f 92       	push	r9
    1072:	af 92       	push	r10
    1074:	bf 92       	push	r11
    1076:	cf 92       	push	r12
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	2b 97       	sbiw	r28, 0x0b	; 11
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	6c 01       	movw	r12, r24
    1098:	7b 01       	movw	r14, r22
    109a:	8a 01       	movw	r16, r20
    109c:	fc 01       	movw	r30, r24
    109e:	17 82       	std	Z+7, r1	; 0x07
    10a0:	16 82       	std	Z+6, r1	; 0x06
    10a2:	83 81       	ldd	r24, Z+3	; 0x03
    10a4:	81 ff       	sbrs	r24, 1
    10a6:	bf c1       	rjmp	.+894    	; 0x1426 <vfprintf+0x3c4>
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	3c 01       	movw	r6, r24
    10ae:	f6 01       	movw	r30, r12
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	f7 01       	movw	r30, r14
    10b4:	93 fd       	sbrc	r25, 3
    10b6:	85 91       	lpm	r24, Z+
    10b8:	93 ff       	sbrs	r25, 3
    10ba:	81 91       	ld	r24, Z+
    10bc:	7f 01       	movw	r14, r30
    10be:	88 23       	and	r24, r24
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <vfprintf+0x62>
    10c2:	ad c1       	rjmp	.+858    	; 0x141e <vfprintf+0x3bc>
    10c4:	85 32       	cpi	r24, 0x25	; 37
    10c6:	39 f4       	brne	.+14     	; 0x10d6 <vfprintf+0x74>
    10c8:	93 fd       	sbrc	r25, 3
    10ca:	85 91       	lpm	r24, Z+
    10cc:	93 ff       	sbrs	r25, 3
    10ce:	81 91       	ld	r24, Z+
    10d0:	7f 01       	movw	r14, r30
    10d2:	85 32       	cpi	r24, 0x25	; 37
    10d4:	21 f4       	brne	.+8      	; 0x10de <vfprintf+0x7c>
    10d6:	b6 01       	movw	r22, r12
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	d6 d1       	rcall	.+940    	; 0x1488 <fputc>
    10dc:	e8 cf       	rjmp	.-48     	; 0x10ae <vfprintf+0x4c>
    10de:	91 2c       	mov	r9, r1
    10e0:	21 2c       	mov	r2, r1
    10e2:	31 2c       	mov	r3, r1
    10e4:	ff e1       	ldi	r31, 0x1F	; 31
    10e6:	f3 15       	cp	r31, r3
    10e8:	d8 f0       	brcs	.+54     	; 0x1120 <vfprintf+0xbe>
    10ea:	8b 32       	cpi	r24, 0x2B	; 43
    10ec:	79 f0       	breq	.+30     	; 0x110c <vfprintf+0xaa>
    10ee:	38 f4       	brcc	.+14     	; 0x10fe <vfprintf+0x9c>
    10f0:	80 32       	cpi	r24, 0x20	; 32
    10f2:	79 f0       	breq	.+30     	; 0x1112 <vfprintf+0xb0>
    10f4:	83 32       	cpi	r24, 0x23	; 35
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <vfprintf+0xbe>
    10f8:	23 2d       	mov	r18, r3
    10fa:	20 61       	ori	r18, 0x10	; 16
    10fc:	1d c0       	rjmp	.+58     	; 0x1138 <vfprintf+0xd6>
    10fe:	8d 32       	cpi	r24, 0x2D	; 45
    1100:	61 f0       	breq	.+24     	; 0x111a <vfprintf+0xb8>
    1102:	80 33       	cpi	r24, 0x30	; 48
    1104:	69 f4       	brne	.+26     	; 0x1120 <vfprintf+0xbe>
    1106:	23 2d       	mov	r18, r3
    1108:	21 60       	ori	r18, 0x01	; 1
    110a:	16 c0       	rjmp	.+44     	; 0x1138 <vfprintf+0xd6>
    110c:	83 2d       	mov	r24, r3
    110e:	82 60       	ori	r24, 0x02	; 2
    1110:	38 2e       	mov	r3, r24
    1112:	e3 2d       	mov	r30, r3
    1114:	e4 60       	ori	r30, 0x04	; 4
    1116:	3e 2e       	mov	r3, r30
    1118:	2a c0       	rjmp	.+84     	; 0x116e <vfprintf+0x10c>
    111a:	f3 2d       	mov	r31, r3
    111c:	f8 60       	ori	r31, 0x08	; 8
    111e:	1d c0       	rjmp	.+58     	; 0x115a <vfprintf+0xf8>
    1120:	37 fc       	sbrc	r3, 7
    1122:	2d c0       	rjmp	.+90     	; 0x117e <vfprintf+0x11c>
    1124:	20 ed       	ldi	r18, 0xD0	; 208
    1126:	28 0f       	add	r18, r24
    1128:	2a 30       	cpi	r18, 0x0A	; 10
    112a:	40 f0       	brcs	.+16     	; 0x113c <vfprintf+0xda>
    112c:	8e 32       	cpi	r24, 0x2E	; 46
    112e:	b9 f4       	brne	.+46     	; 0x115e <vfprintf+0xfc>
    1130:	36 fc       	sbrc	r3, 6
    1132:	75 c1       	rjmp	.+746    	; 0x141e <vfprintf+0x3bc>
    1134:	23 2d       	mov	r18, r3
    1136:	20 64       	ori	r18, 0x40	; 64
    1138:	32 2e       	mov	r3, r18
    113a:	19 c0       	rjmp	.+50     	; 0x116e <vfprintf+0x10c>
    113c:	36 fe       	sbrs	r3, 6
    113e:	06 c0       	rjmp	.+12     	; 0x114c <vfprintf+0xea>
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	98 9e       	mul	r9, r24
    1144:	20 0d       	add	r18, r0
    1146:	11 24       	eor	r1, r1
    1148:	92 2e       	mov	r9, r18
    114a:	11 c0       	rjmp	.+34     	; 0x116e <vfprintf+0x10c>
    114c:	ea e0       	ldi	r30, 0x0A	; 10
    114e:	2e 9e       	mul	r2, r30
    1150:	20 0d       	add	r18, r0
    1152:	11 24       	eor	r1, r1
    1154:	22 2e       	mov	r2, r18
    1156:	f3 2d       	mov	r31, r3
    1158:	f0 62       	ori	r31, 0x20	; 32
    115a:	3f 2e       	mov	r3, r31
    115c:	08 c0       	rjmp	.+16     	; 0x116e <vfprintf+0x10c>
    115e:	8c 36       	cpi	r24, 0x6C	; 108
    1160:	21 f4       	brne	.+8      	; 0x116a <vfprintf+0x108>
    1162:	83 2d       	mov	r24, r3
    1164:	80 68       	ori	r24, 0x80	; 128
    1166:	38 2e       	mov	r3, r24
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x10c>
    116a:	88 36       	cpi	r24, 0x68	; 104
    116c:	41 f4       	brne	.+16     	; 0x117e <vfprintf+0x11c>
    116e:	f7 01       	movw	r30, r14
    1170:	93 fd       	sbrc	r25, 3
    1172:	85 91       	lpm	r24, Z+
    1174:	93 ff       	sbrs	r25, 3
    1176:	81 91       	ld	r24, Z+
    1178:	7f 01       	movw	r14, r30
    117a:	81 11       	cpse	r24, r1
    117c:	b3 cf       	rjmp	.-154    	; 0x10e4 <vfprintf+0x82>
    117e:	98 2f       	mov	r25, r24
    1180:	9f 7d       	andi	r25, 0xDF	; 223
    1182:	95 54       	subi	r25, 0x45	; 69
    1184:	93 30       	cpi	r25, 0x03	; 3
    1186:	28 f4       	brcc	.+10     	; 0x1192 <vfprintf+0x130>
    1188:	0c 5f       	subi	r16, 0xFC	; 252
    118a:	1f 4f       	sbci	r17, 0xFF	; 255
    118c:	9f e3       	ldi	r25, 0x3F	; 63
    118e:	99 83       	std	Y+1, r25	; 0x01
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <vfprintf+0x14a>
    1192:	83 36       	cpi	r24, 0x63	; 99
    1194:	31 f0       	breq	.+12     	; 0x11a2 <vfprintf+0x140>
    1196:	83 37       	cpi	r24, 0x73	; 115
    1198:	71 f0       	breq	.+28     	; 0x11b6 <vfprintf+0x154>
    119a:	83 35       	cpi	r24, 0x53	; 83
    119c:	09 f0       	breq	.+2      	; 0x11a0 <vfprintf+0x13e>
    119e:	55 c0       	rjmp	.+170    	; 0x124a <vfprintf+0x1e8>
    11a0:	20 c0       	rjmp	.+64     	; 0x11e2 <vfprintf+0x180>
    11a2:	f8 01       	movw	r30, r16
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	0e 5f       	subi	r16, 0xFE	; 254
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	88 24       	eor	r8, r8
    11ae:	83 94       	inc	r8
    11b0:	91 2c       	mov	r9, r1
    11b2:	53 01       	movw	r10, r6
    11b4:	12 c0       	rjmp	.+36     	; 0x11da <vfprintf+0x178>
    11b6:	28 01       	movw	r4, r16
    11b8:	f2 e0       	ldi	r31, 0x02	; 2
    11ba:	4f 0e       	add	r4, r31
    11bc:	51 1c       	adc	r5, r1
    11be:	f8 01       	movw	r30, r16
    11c0:	a0 80       	ld	r10, Z
    11c2:	b1 80       	ldd	r11, Z+1	; 0x01
    11c4:	36 fe       	sbrs	r3, 6
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <vfprintf+0x16c>
    11c8:	69 2d       	mov	r22, r9
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <vfprintf+0x170>
    11ce:	6f ef       	ldi	r22, 0xFF	; 255
    11d0:	7f ef       	ldi	r23, 0xFF	; 255
    11d2:	c5 01       	movw	r24, r10
    11d4:	4e d1       	rcall	.+668    	; 0x1472 <strnlen>
    11d6:	4c 01       	movw	r8, r24
    11d8:	82 01       	movw	r16, r4
    11da:	f3 2d       	mov	r31, r3
    11dc:	ff 77       	andi	r31, 0x7F	; 127
    11de:	3f 2e       	mov	r3, r31
    11e0:	15 c0       	rjmp	.+42     	; 0x120c <vfprintf+0x1aa>
    11e2:	28 01       	movw	r4, r16
    11e4:	22 e0       	ldi	r18, 0x02	; 2
    11e6:	42 0e       	add	r4, r18
    11e8:	51 1c       	adc	r5, r1
    11ea:	f8 01       	movw	r30, r16
    11ec:	a0 80       	ld	r10, Z
    11ee:	b1 80       	ldd	r11, Z+1	; 0x01
    11f0:	36 fe       	sbrs	r3, 6
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x198>
    11f4:	69 2d       	mov	r22, r9
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <vfprintf+0x19c>
    11fa:	6f ef       	ldi	r22, 0xFF	; 255
    11fc:	7f ef       	ldi	r23, 0xFF	; 255
    11fe:	c5 01       	movw	r24, r10
    1200:	2d d1       	rcall	.+602    	; 0x145c <strnlen_P>
    1202:	4c 01       	movw	r8, r24
    1204:	f3 2d       	mov	r31, r3
    1206:	f0 68       	ori	r31, 0x80	; 128
    1208:	3f 2e       	mov	r3, r31
    120a:	82 01       	movw	r16, r4
    120c:	33 fc       	sbrc	r3, 3
    120e:	19 c0       	rjmp	.+50     	; 0x1242 <vfprintf+0x1e0>
    1210:	82 2d       	mov	r24, r2
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	88 16       	cp	r8, r24
    1216:	99 06       	cpc	r9, r25
    1218:	a0 f4       	brcc	.+40     	; 0x1242 <vfprintf+0x1e0>
    121a:	b6 01       	movw	r22, r12
    121c:	80 e2       	ldi	r24, 0x20	; 32
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	33 d1       	rcall	.+614    	; 0x1488 <fputc>
    1222:	2a 94       	dec	r2
    1224:	f5 cf       	rjmp	.-22     	; 0x1210 <vfprintf+0x1ae>
    1226:	f5 01       	movw	r30, r10
    1228:	37 fc       	sbrc	r3, 7
    122a:	85 91       	lpm	r24, Z+
    122c:	37 fe       	sbrs	r3, 7
    122e:	81 91       	ld	r24, Z+
    1230:	5f 01       	movw	r10, r30
    1232:	b6 01       	movw	r22, r12
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	28 d1       	rcall	.+592    	; 0x1488 <fputc>
    1238:	21 10       	cpse	r2, r1
    123a:	2a 94       	dec	r2
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	82 1a       	sub	r8, r18
    1240:	91 08       	sbc	r9, r1
    1242:	81 14       	cp	r8, r1
    1244:	91 04       	cpc	r9, r1
    1246:	79 f7       	brne	.-34     	; 0x1226 <vfprintf+0x1c4>
    1248:	e1 c0       	rjmp	.+450    	; 0x140c <vfprintf+0x3aa>
    124a:	84 36       	cpi	r24, 0x64	; 100
    124c:	11 f0       	breq	.+4      	; 0x1252 <vfprintf+0x1f0>
    124e:	89 36       	cpi	r24, 0x69	; 105
    1250:	39 f5       	brne	.+78     	; 0x12a0 <vfprintf+0x23e>
    1252:	f8 01       	movw	r30, r16
    1254:	37 fe       	sbrs	r3, 7
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <vfprintf+0x204>
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	0c 5f       	subi	r16, 0xFC	; 252
    1262:	1f 4f       	sbci	r17, 0xFF	; 255
    1264:	08 c0       	rjmp	.+16     	; 0x1276 <vfprintf+0x214>
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	07 2e       	mov	r0, r23
    126c:	00 0c       	add	r0, r0
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	0e 5f       	subi	r16, 0xFE	; 254
    1274:	1f 4f       	sbci	r17, 0xFF	; 255
    1276:	f3 2d       	mov	r31, r3
    1278:	ff 76       	andi	r31, 0x6F	; 111
    127a:	3f 2e       	mov	r3, r31
    127c:	97 ff       	sbrs	r25, 7
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <vfprintf+0x230>
    1280:	90 95       	com	r25
    1282:	80 95       	com	r24
    1284:	70 95       	com	r23
    1286:	61 95       	neg	r22
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	8f 4f       	sbci	r24, 0xFF	; 255
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	f0 68       	ori	r31, 0x80	; 128
    1290:	3f 2e       	mov	r3, r31
    1292:	2a e0       	ldi	r18, 0x0A	; 10
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	a3 01       	movw	r20, r6
    1298:	33 d1       	rcall	.+614    	; 0x1500 <__ultoa_invert>
    129a:	88 2e       	mov	r8, r24
    129c:	86 18       	sub	r8, r6
    129e:	44 c0       	rjmp	.+136    	; 0x1328 <vfprintf+0x2c6>
    12a0:	85 37       	cpi	r24, 0x75	; 117
    12a2:	31 f4       	brne	.+12     	; 0x12b0 <vfprintf+0x24e>
    12a4:	23 2d       	mov	r18, r3
    12a6:	2f 7e       	andi	r18, 0xEF	; 239
    12a8:	b2 2e       	mov	r11, r18
    12aa:	2a e0       	ldi	r18, 0x0A	; 10
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	25 c0       	rjmp	.+74     	; 0x12fa <vfprintf+0x298>
    12b0:	93 2d       	mov	r25, r3
    12b2:	99 7f       	andi	r25, 0xF9	; 249
    12b4:	b9 2e       	mov	r11, r25
    12b6:	8f 36       	cpi	r24, 0x6F	; 111
    12b8:	c1 f0       	breq	.+48     	; 0x12ea <vfprintf+0x288>
    12ba:	18 f4       	brcc	.+6      	; 0x12c2 <vfprintf+0x260>
    12bc:	88 35       	cpi	r24, 0x58	; 88
    12be:	79 f0       	breq	.+30     	; 0x12de <vfprintf+0x27c>
    12c0:	ae c0       	rjmp	.+348    	; 0x141e <vfprintf+0x3bc>
    12c2:	80 37       	cpi	r24, 0x70	; 112
    12c4:	19 f0       	breq	.+6      	; 0x12cc <vfprintf+0x26a>
    12c6:	88 37       	cpi	r24, 0x78	; 120
    12c8:	21 f0       	breq	.+8      	; 0x12d2 <vfprintf+0x270>
    12ca:	a9 c0       	rjmp	.+338    	; 0x141e <vfprintf+0x3bc>
    12cc:	e9 2f       	mov	r30, r25
    12ce:	e0 61       	ori	r30, 0x10	; 16
    12d0:	be 2e       	mov	r11, r30
    12d2:	b4 fe       	sbrs	r11, 4
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <vfprintf+0x28e>
    12d6:	fb 2d       	mov	r31, r11
    12d8:	f4 60       	ori	r31, 0x04	; 4
    12da:	bf 2e       	mov	r11, r31
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <vfprintf+0x28e>
    12de:	34 fe       	sbrs	r3, 4
    12e0:	0a c0       	rjmp	.+20     	; 0x12f6 <vfprintf+0x294>
    12e2:	29 2f       	mov	r18, r25
    12e4:	26 60       	ori	r18, 0x06	; 6
    12e6:	b2 2e       	mov	r11, r18
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <vfprintf+0x294>
    12ea:	28 e0       	ldi	r18, 0x08	; 8
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <vfprintf+0x298>
    12f0:	20 e1       	ldi	r18, 0x10	; 16
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x298>
    12f6:	20 e1       	ldi	r18, 0x10	; 16
    12f8:	32 e0       	ldi	r19, 0x02	; 2
    12fa:	f8 01       	movw	r30, r16
    12fc:	b7 fe       	sbrs	r11, 7
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <vfprintf+0x2ac>
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0c 5f       	subi	r16, 0xFC	; 252
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	06 c0       	rjmp	.+12     	; 0x131a <vfprintf+0x2b8>
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 5f       	subi	r16, 0xFE	; 254
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	a3 01       	movw	r20, r6
    131c:	f1 d0       	rcall	.+482    	; 0x1500 <__ultoa_invert>
    131e:	88 2e       	mov	r8, r24
    1320:	86 18       	sub	r8, r6
    1322:	fb 2d       	mov	r31, r11
    1324:	ff 77       	andi	r31, 0x7F	; 127
    1326:	3f 2e       	mov	r3, r31
    1328:	36 fe       	sbrs	r3, 6
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <vfprintf+0x2e4>
    132c:	23 2d       	mov	r18, r3
    132e:	2e 7f       	andi	r18, 0xFE	; 254
    1330:	a2 2e       	mov	r10, r18
    1332:	89 14       	cp	r8, r9
    1334:	58 f4       	brcc	.+22     	; 0x134c <vfprintf+0x2ea>
    1336:	34 fe       	sbrs	r3, 4
    1338:	0b c0       	rjmp	.+22     	; 0x1350 <vfprintf+0x2ee>
    133a:	32 fc       	sbrc	r3, 2
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <vfprintf+0x2ee>
    133e:	83 2d       	mov	r24, r3
    1340:	8e 7e       	andi	r24, 0xEE	; 238
    1342:	a8 2e       	mov	r10, r24
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <vfprintf+0x2ee>
    1346:	b8 2c       	mov	r11, r8
    1348:	a3 2c       	mov	r10, r3
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <vfprintf+0x2f0>
    134c:	b8 2c       	mov	r11, r8
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <vfprintf+0x2f0>
    1350:	b9 2c       	mov	r11, r9
    1352:	a4 fe       	sbrs	r10, 4
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <vfprintf+0x312>
    1356:	fe 01       	movw	r30, r28
    1358:	e8 0d       	add	r30, r8
    135a:	f1 1d       	adc	r31, r1
    135c:	80 81       	ld	r24, Z
    135e:	80 33       	cpi	r24, 0x30	; 48
    1360:	21 f4       	brne	.+8      	; 0x136a <vfprintf+0x308>
    1362:	9a 2d       	mov	r25, r10
    1364:	99 7e       	andi	r25, 0xE9	; 233
    1366:	a9 2e       	mov	r10, r25
    1368:	09 c0       	rjmp	.+18     	; 0x137c <vfprintf+0x31a>
    136a:	a2 fe       	sbrs	r10, 2
    136c:	06 c0       	rjmp	.+12     	; 0x137a <vfprintf+0x318>
    136e:	b3 94       	inc	r11
    1370:	b3 94       	inc	r11
    1372:	04 c0       	rjmp	.+8      	; 0x137c <vfprintf+0x31a>
    1374:	8a 2d       	mov	r24, r10
    1376:	86 78       	andi	r24, 0x86	; 134
    1378:	09 f0       	breq	.+2      	; 0x137c <vfprintf+0x31a>
    137a:	b3 94       	inc	r11
    137c:	a3 fc       	sbrc	r10, 3
    137e:	10 c0       	rjmp	.+32     	; 0x13a0 <vfprintf+0x33e>
    1380:	a0 fe       	sbrs	r10, 0
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <vfprintf+0x32e>
    1384:	b2 14       	cp	r11, r2
    1386:	80 f4       	brcc	.+32     	; 0x13a8 <vfprintf+0x346>
    1388:	28 0c       	add	r2, r8
    138a:	92 2c       	mov	r9, r2
    138c:	9b 18       	sub	r9, r11
    138e:	0d c0       	rjmp	.+26     	; 0x13aa <vfprintf+0x348>
    1390:	b2 14       	cp	r11, r2
    1392:	58 f4       	brcc	.+22     	; 0x13aa <vfprintf+0x348>
    1394:	b6 01       	movw	r22, r12
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	76 d0       	rcall	.+236    	; 0x1488 <fputc>
    139c:	b3 94       	inc	r11
    139e:	f8 cf       	rjmp	.-16     	; 0x1390 <vfprintf+0x32e>
    13a0:	b2 14       	cp	r11, r2
    13a2:	18 f4       	brcc	.+6      	; 0x13aa <vfprintf+0x348>
    13a4:	2b 18       	sub	r2, r11
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <vfprintf+0x34a>
    13a8:	98 2c       	mov	r9, r8
    13aa:	21 2c       	mov	r2, r1
    13ac:	a4 fe       	sbrs	r10, 4
    13ae:	0f c0       	rjmp	.+30     	; 0x13ce <vfprintf+0x36c>
    13b0:	b6 01       	movw	r22, r12
    13b2:	80 e3       	ldi	r24, 0x30	; 48
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	68 d0       	rcall	.+208    	; 0x1488 <fputc>
    13b8:	a2 fe       	sbrs	r10, 2
    13ba:	16 c0       	rjmp	.+44     	; 0x13e8 <vfprintf+0x386>
    13bc:	a1 fc       	sbrc	r10, 1
    13be:	03 c0       	rjmp	.+6      	; 0x13c6 <vfprintf+0x364>
    13c0:	88 e7       	ldi	r24, 0x78	; 120
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <vfprintf+0x368>
    13c6:	88 e5       	ldi	r24, 0x58	; 88
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	b6 01       	movw	r22, r12
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <vfprintf+0x384>
    13ce:	8a 2d       	mov	r24, r10
    13d0:	86 78       	andi	r24, 0x86	; 134
    13d2:	51 f0       	breq	.+20     	; 0x13e8 <vfprintf+0x386>
    13d4:	a1 fe       	sbrs	r10, 1
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <vfprintf+0x37a>
    13d8:	8b e2       	ldi	r24, 0x2B	; 43
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vfprintf+0x37c>
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	a7 fc       	sbrc	r10, 7
    13e0:	8d e2       	ldi	r24, 0x2D	; 45
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	50 d0       	rcall	.+160    	; 0x1488 <fputc>
    13e8:	89 14       	cp	r8, r9
    13ea:	30 f4       	brcc	.+12     	; 0x13f8 <vfprintf+0x396>
    13ec:	b6 01       	movw	r22, r12
    13ee:	80 e3       	ldi	r24, 0x30	; 48
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	4a d0       	rcall	.+148    	; 0x1488 <fputc>
    13f4:	9a 94       	dec	r9
    13f6:	f8 cf       	rjmp	.-16     	; 0x13e8 <vfprintf+0x386>
    13f8:	8a 94       	dec	r8
    13fa:	f3 01       	movw	r30, r6
    13fc:	e8 0d       	add	r30, r8
    13fe:	f1 1d       	adc	r31, r1
    1400:	80 81       	ld	r24, Z
    1402:	b6 01       	movw	r22, r12
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	40 d0       	rcall	.+128    	; 0x1488 <fputc>
    1408:	81 10       	cpse	r8, r1
    140a:	f6 cf       	rjmp	.-20     	; 0x13f8 <vfprintf+0x396>
    140c:	22 20       	and	r2, r2
    140e:	09 f4       	brne	.+2      	; 0x1412 <vfprintf+0x3b0>
    1410:	4e ce       	rjmp	.-868    	; 0x10ae <vfprintf+0x4c>
    1412:	b6 01       	movw	r22, r12
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	37 d0       	rcall	.+110    	; 0x1488 <fputc>
    141a:	2a 94       	dec	r2
    141c:	f7 cf       	rjmp	.-18     	; 0x140c <vfprintf+0x3aa>
    141e:	f6 01       	movw	r30, r12
    1420:	86 81       	ldd	r24, Z+6	; 0x06
    1422:	97 81       	ldd	r25, Z+7	; 0x07
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x3c8>
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	2b 96       	adiw	r28, 0x0b	; 11
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	df 90       	pop	r13
    1444:	cf 90       	pop	r12
    1446:	bf 90       	pop	r11
    1448:	af 90       	pop	r10
    144a:	9f 90       	pop	r9
    144c:	8f 90       	pop	r8
    144e:	7f 90       	pop	r7
    1450:	6f 90       	pop	r6
    1452:	5f 90       	pop	r5
    1454:	4f 90       	pop	r4
    1456:	3f 90       	pop	r3
    1458:	2f 90       	pop	r2
    145a:	08 95       	ret

0000145c <strnlen_P>:
    145c:	fc 01       	movw	r30, r24
    145e:	05 90       	lpm	r0, Z+
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	01 10       	cpse	r0, r1
    1466:	d8 f7       	brcc	.-10     	; 0x145e <strnlen_P+0x2>
    1468:	80 95       	com	r24
    146a:	90 95       	com	r25
    146c:	8e 0f       	add	r24, r30
    146e:	9f 1f       	adc	r25, r31
    1470:	08 95       	ret

00001472 <strnlen>:
    1472:	fc 01       	movw	r30, r24
    1474:	61 50       	subi	r22, 0x01	; 1
    1476:	70 40       	sbci	r23, 0x00	; 0
    1478:	01 90       	ld	r0, Z+
    147a:	01 10       	cpse	r0, r1
    147c:	d8 f7       	brcc	.-10     	; 0x1474 <strnlen+0x2>
    147e:	80 95       	com	r24
    1480:	90 95       	com	r25
    1482:	8e 0f       	add	r24, r30
    1484:	9f 1f       	adc	r25, r31
    1486:	08 95       	ret

00001488 <fputc>:
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	fb 01       	movw	r30, r22
    1492:	23 81       	ldd	r18, Z+3	; 0x03
    1494:	21 fd       	sbrc	r18, 1
    1496:	03 c0       	rjmp	.+6      	; 0x149e <fputc+0x16>
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    149c:	2c c0       	rjmp	.+88     	; 0x14f6 <fputc+0x6e>
    149e:	22 ff       	sbrs	r18, 2
    14a0:	16 c0       	rjmp	.+44     	; 0x14ce <fputc+0x46>
    14a2:	46 81       	ldd	r20, Z+6	; 0x06
    14a4:	57 81       	ldd	r21, Z+7	; 0x07
    14a6:	24 81       	ldd	r18, Z+4	; 0x04
    14a8:	35 81       	ldd	r19, Z+5	; 0x05
    14aa:	42 17       	cp	r20, r18
    14ac:	53 07       	cpc	r21, r19
    14ae:	44 f4       	brge	.+16     	; 0x14c0 <fputc+0x38>
    14b0:	a0 81       	ld	r26, Z
    14b2:	b1 81       	ldd	r27, Z+1	; 0x01
    14b4:	9d 01       	movw	r18, r26
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	31 83       	std	Z+1, r19	; 0x01
    14bc:	20 83       	st	Z, r18
    14be:	8c 93       	st	X, r24
    14c0:	26 81       	ldd	r18, Z+6	; 0x06
    14c2:	37 81       	ldd	r19, Z+7	; 0x07
    14c4:	2f 5f       	subi	r18, 0xFF	; 255
    14c6:	3f 4f       	sbci	r19, 0xFF	; 255
    14c8:	37 83       	std	Z+7, r19	; 0x07
    14ca:	26 83       	std	Z+6, r18	; 0x06
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <fputc+0x6e>
    14ce:	8b 01       	movw	r16, r22
    14d0:	ec 01       	movw	r28, r24
    14d2:	fb 01       	movw	r30, r22
    14d4:	00 84       	ldd	r0, Z+8	; 0x08
    14d6:	f1 85       	ldd	r31, Z+9	; 0x09
    14d8:	e0 2d       	mov	r30, r0
    14da:	09 95       	icall
    14dc:	89 2b       	or	r24, r25
    14de:	e1 f6       	brne	.-72     	; 0x1498 <fputc+0x10>
    14e0:	d8 01       	movw	r26, r16
    14e2:	16 96       	adiw	r26, 0x06	; 6
    14e4:	8d 91       	ld	r24, X+
    14e6:	9c 91       	ld	r25, X
    14e8:	17 97       	sbiw	r26, 0x07	; 7
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	17 96       	adiw	r26, 0x07	; 7
    14ee:	9c 93       	st	X, r25
    14f0:	8e 93       	st	-X, r24
    14f2:	16 97       	sbiw	r26, 0x06	; 6
    14f4:	ce 01       	movw	r24, r28
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	1f 91       	pop	r17
    14fc:	0f 91       	pop	r16
    14fe:	08 95       	ret

00001500 <__ultoa_invert>:
    1500:	fa 01       	movw	r30, r20
    1502:	aa 27       	eor	r26, r26
    1504:	28 30       	cpi	r18, 0x08	; 8
    1506:	51 f1       	breq	.+84     	; 0x155c <__ultoa_invert+0x5c>
    1508:	20 31       	cpi	r18, 0x10	; 16
    150a:	81 f1       	breq	.+96     	; 0x156c <__ultoa_invert+0x6c>
    150c:	e8 94       	clt
    150e:	6f 93       	push	r22
    1510:	6e 7f       	andi	r22, 0xFE	; 254
    1512:	6e 5f       	subi	r22, 0xFE	; 254
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	af 4f       	sbci	r26, 0xFF	; 255
    151c:	b1 e0       	ldi	r27, 0x01	; 1
    151e:	3e d0       	rcall	.+124    	; 0x159c <__ultoa_invert+0x9c>
    1520:	b4 e0       	ldi	r27, 0x04	; 4
    1522:	3c d0       	rcall	.+120    	; 0x159c <__ultoa_invert+0x9c>
    1524:	67 0f       	add	r22, r23
    1526:	78 1f       	adc	r23, r24
    1528:	89 1f       	adc	r24, r25
    152a:	9a 1f       	adc	r25, r26
    152c:	a1 1d       	adc	r26, r1
    152e:	68 0f       	add	r22, r24
    1530:	79 1f       	adc	r23, r25
    1532:	8a 1f       	adc	r24, r26
    1534:	91 1d       	adc	r25, r1
    1536:	a1 1d       	adc	r26, r1
    1538:	6a 0f       	add	r22, r26
    153a:	71 1d       	adc	r23, r1
    153c:	81 1d       	adc	r24, r1
    153e:	91 1d       	adc	r25, r1
    1540:	a1 1d       	adc	r26, r1
    1542:	20 d0       	rcall	.+64     	; 0x1584 <__ultoa_invert+0x84>
    1544:	09 f4       	brne	.+2      	; 0x1548 <__ultoa_invert+0x48>
    1546:	68 94       	set
    1548:	3f 91       	pop	r19
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	26 9f       	mul	r18, r22
    154e:	11 24       	eor	r1, r1
    1550:	30 19       	sub	r19, r0
    1552:	30 5d       	subi	r19, 0xD0	; 208
    1554:	31 93       	st	Z+, r19
    1556:	de f6       	brtc	.-74     	; 0x150e <__ultoa_invert+0xe>
    1558:	cf 01       	movw	r24, r30
    155a:	08 95       	ret
    155c:	46 2f       	mov	r20, r22
    155e:	47 70       	andi	r20, 0x07	; 7
    1560:	40 5d       	subi	r20, 0xD0	; 208
    1562:	41 93       	st	Z+, r20
    1564:	b3 e0       	ldi	r27, 0x03	; 3
    1566:	0f d0       	rcall	.+30     	; 0x1586 <__ultoa_invert+0x86>
    1568:	c9 f7       	brne	.-14     	; 0x155c <__ultoa_invert+0x5c>
    156a:	f6 cf       	rjmp	.-20     	; 0x1558 <__ultoa_invert+0x58>
    156c:	46 2f       	mov	r20, r22
    156e:	4f 70       	andi	r20, 0x0F	; 15
    1570:	40 5d       	subi	r20, 0xD0	; 208
    1572:	4a 33       	cpi	r20, 0x3A	; 58
    1574:	18 f0       	brcs	.+6      	; 0x157c <__ultoa_invert+0x7c>
    1576:	49 5d       	subi	r20, 0xD9	; 217
    1578:	31 fd       	sbrc	r19, 1
    157a:	40 52       	subi	r20, 0x20	; 32
    157c:	41 93       	st	Z+, r20
    157e:	02 d0       	rcall	.+4      	; 0x1584 <__ultoa_invert+0x84>
    1580:	a9 f7       	brne	.-22     	; 0x156c <__ultoa_invert+0x6c>
    1582:	ea cf       	rjmp	.-44     	; 0x1558 <__ultoa_invert+0x58>
    1584:	b4 e0       	ldi	r27, 0x04	; 4
    1586:	a6 95       	lsr	r26
    1588:	97 95       	ror	r25
    158a:	87 95       	ror	r24
    158c:	77 95       	ror	r23
    158e:	67 95       	ror	r22
    1590:	ba 95       	dec	r27
    1592:	c9 f7       	brne	.-14     	; 0x1586 <__ultoa_invert+0x86>
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	61 05       	cpc	r22, r1
    1598:	71 05       	cpc	r23, r1
    159a:	08 95       	ret
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
    15a0:	0a 2e       	mov	r0, r26
    15a2:	06 94       	lsr	r0
    15a4:	57 95       	ror	r21
    15a6:	47 95       	ror	r20
    15a8:	37 95       	ror	r19
    15aa:	27 95       	ror	r18
    15ac:	ba 95       	dec	r27
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__ultoa_invert+0xa2>
    15b0:	62 0f       	add	r22, r18
    15b2:	73 1f       	adc	r23, r19
    15b4:	84 1f       	adc	r24, r20
    15b6:	95 1f       	adc	r25, r21
    15b8:	a0 1d       	adc	r26, r0
    15ba:	08 95       	ret

000015bc <_exit>:
    15bc:	f8 94       	cli

000015be <__stop_program>:
    15be:	ff cf       	rjmp	.-2      	; 0x15be <__stop_program>
