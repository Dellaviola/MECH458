
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00001af2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800306  00800306  00001d8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005012  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a89  00000000  00000000  00007152  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000032c2  00000000  00000000  00008bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007e0  00000000  00000000  0000bea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009224  00000000  00000000  0000c680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018f7  00000000  00000000  000158a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0001719b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  0001748b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	37 c5       	rjmp	.+2670   	; 0xaa4 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	13 e0       	ldi	r17, 0x03	; 3
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e2 ef       	ldi	r30, 0xF2	; 242
      ac:	fa e1       	ldi	r31, 0x1A	; 26
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a6 30       	cpi	r26, 0x06	; 6
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a6 e0       	ldi	r26, 0x06	; 6
      c2:	b3 e0       	ldi	r27, 0x03	; 3
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a3 39       	cpi	r26, 0x93	; 147
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	7d d3       	rcall	.+1786   	; 0x7ca <main>
      d0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <_exit>

000000d4 <__bad_interrupt>:
      d4:	25 c4       	rjmp	.+2122   	; 0x920 <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     120:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     12c:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 27 03 	sts	0x0327, r19	; 0x800327 <g_ADCCount+0x1>
     13a:	20 93 26 03 	sts	0x0326, r18	; 0x800326 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	ee 5e       	subi	r30, 0xEE	; 238
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <g_ADCCount>
     162:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	16 c0       	rjmp	.+44     	; 0x1be <SERVER_Task+0x34>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     196:	88 23       	and	r24, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <SERVER_Task+0x30>
     19a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     19e:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     1aa:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     1ae:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     1b2:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     1b6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2375>
     1be:	66 99       	sbic	0x0c, 6	; 12
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <SERVER_Task+0x54>
     1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     1c6:	88 23       	and	r24, r24
     1c8:	41 f0       	breq	.+16     	; 0x1da <SERVER_Task+0x50>
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     1d0:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     1d4:	d9 d2       	rcall	.+1458   	; 0x788 <LL_UpdateStatus>
     1d6:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2376>
     1de:	65 99       	sbic	0x0c, 5	; 12
     1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <SERVER_Task+0x6e>
     1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     1e6:	88 23       	and	r24, r24
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <SERVER_Task+0x6a>
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_timer+0x23>
     1f0:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2377>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <SERVER_Task+0x8e>
     1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2375>
     200:	81 11       	cpse	r24, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <SERVER_Task+0x88>
     204:	e2 e3       	ldi	r30, 0x32	; 50
     206:	f3 e0       	ldi	r31, 0x03	; 3
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	82 8f       	std	Z+26, r24	; 0x1a
     20c:	84 a7       	std	Z+44, r24	; 0x2c
     20e:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <_timer+0x47>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2375>
     218:	66 9b       	sbis	0x0c, 6	; 12
     21a:	2a c0       	rjmp	.+84     	; 0x270 <SERVER_Task+0xe6>
     21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2376>
     220:	81 11       	cpse	r24, r1
     222:	23 c0       	rjmp	.+70     	; 0x26a <SERVER_Task+0xe0>
     224:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     228:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	71 f4       	brne	.+28     	; 0x24c <SERVER_Task+0xc2>
     230:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     234:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     238:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <STAGE2+0x1>
     23c:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <STAGE2>
     240:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <g_Timer>
     244:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <g_Timer+0x1>
     248:	a9 d2       	rcall	.+1362   	; 0x79c <LL_UpdateTick>
     24a:	0a c0       	rjmp	.+20     	; 0x260 <SERVER_Task+0xd6>
     24c:	57 d2       	rcall	.+1198   	; 0x6fc <LL_Next>
     24e:	90 93 7b 03 	sts	0x037B, r25	; 0x80037b <STAGE2+0x1>
     252:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <STAGE2>
     256:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <g_Timer>
     25a:	70 91 2a 03 	lds	r23, 0x032A	; 0x80032a <g_Timer+0x1>
     25e:	9e d2       	rcall	.+1340   	; 0x79c <LL_UpdateTick>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	80 64       	ori	r24, 0x40	; 64
     268:	80 83       	st	Z, r24
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2376>
     270:	65 9b       	sbis	0x0c, 5	; 12
     272:	0f c0       	rjmp	.+30     	; 0x292 <SERVER_Task+0x108>
     274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2377>
     278:	81 11       	cpse	r24, r1
     27a:	08 c0       	rjmp	.+16     	; 0x28c <SERVER_Task+0x102>
     27c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     280:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     284:	61 d2       	rcall	.+1218   	; 0x748 <LL_GetClass>
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	09 f4       	brne	.+2      	; 0x28c <SERVER_Task+0x102>
     28a:	c3 d6       	rcall	.+3462   	; 0x1012 <SYS_Rampdown>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2377>
     292:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     296:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     29a:	56 d2       	rcall	.+1196   	; 0x748 <LL_GetClass>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	c9 f4       	brne	.+50     	; 0x2d2 <SERVER_Task+0x148>
     2a0:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <stepper+0xe>
     2a4:	81 11       	cpse	r24, r1
     2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <SERVER_Task+0x148>
     2a8:	c0 91 29 03 	lds	r28, 0x0329	; 0x800329 <g_Timer>
     2ac:	d0 91 2a 03 	lds	r29, 0x032A	; 0x80032a <g_Timer+0x1>
     2b0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     2b4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     2b8:	77 d2       	rcall	.+1262   	; 0x7a8 <LL_GetTick>
     2ba:	c8 1b       	sub	r28, r24
     2bc:	d9 0b       	sbc	r29, r25
     2be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <STAGE2_EXIT_TIME>
     2c2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <STAGE2_EXIT_TIME+0x1>
     2c6:	8c 17       	cp	r24, r28
     2c8:	9d 07       	cpc	r25, r29
     2ca:	18 f4       	brcc	.+6      	; 0x2d2 <SERVER_Task+0x148>
     2cc:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <memory.2378>
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <SERVER_Task+0x150>
     2d2:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <memory.2378>
     2d6:	81 11       	cpse	r24, r1
     2d8:	34 c0       	rjmp	.+104    	; 0x342 <SERVER_Task+0x1b8>
     2da:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     2de:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     2e2:	32 d2       	rcall	.+1124   	; 0x748 <LL_GetClass>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	69 f1       	breq	.+90     	; 0x342 <SERVER_Task+0x1b8>
     2e8:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     2ec:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	93 81       	ldd	r25, Z+3	; 0x03
     2f4:	29 d2       	rcall	.+1106   	; 0x748 <LL_GetClass>
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	21 f1       	breq	.+72     	; 0x342 <SERVER_Task+0x1b8>
     2fa:	ee e7       	ldi	r30, 0x7E	; 126
     2fc:	f3 e0       	ldi	r31, 0x03	; 3
     2fe:	84 81       	ldd	r24, Z+4	; 0x04
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	33 81       	ldd	r19, Z+3	; 0x03
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	82 17       	cp	r24, r18
     308:	93 07       	cpc	r25, r19
     30a:	d9 f4       	brne	.+54     	; 0x342 <SERVER_Task+0x1b8>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <memory.2378>
     312:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     316:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	93 81       	ldd	r25, Z+3	; 0x03
     31e:	14 d2       	rcall	.+1064   	; 0x748 <LL_GetClass>
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e7 5f       	subi	r30, 0xF7	; 247
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	c0 81       	ld	r28, Z
     32a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     32e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     332:	0a d2       	rcall	.+1044   	; 0x748 <LL_GetClass>
     334:	e8 2f       	mov	r30, r24
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e7 5f       	subi	r30, 0xF7	; 247
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	80 81       	ld	r24, Z
     33e:	6c 2f       	mov	r22, r28
     340:	91 d3       	rcall	.+1826   	; 0xa64 <STEPPER_SetRotation>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <ADC_Task>:
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	e2 e1       	ldi	r30, 0x12	; 18
     354:	f3 e0       	ldi	r31, 0x03	; 3
     356:	a0 81       	ld	r26, Z
     358:	b1 81       	ldd	r27, Z+1	; 0x01
     35a:	60 81       	ld	r22, Z
     35c:	71 81       	ldd	r23, Z+1	; 0x01
     35e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <ticks.2386>
     362:	8f 5f       	subi	r24, 0xFF	; 255
     364:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <ticks.2386>
     368:	c1 2c       	mov	r12, r1
     36a:	d1 2c       	mov	r13, r1
     36c:	76 01       	movw	r14, r12
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	4f b7       	in	r20, 0x3f	; 63
     374:	f8 94       	cli
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	ee 5e       	subi	r30, 0xEE	; 238
     37e:	fc 4f       	sbci	r31, 0xFC	; 252
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	c2 0e       	add	r12, r18
     386:	d3 1e       	adc	r13, r19
     388:	e1 1c       	adc	r14, r1
     38a:	f1 1c       	adc	r15, r1
     38c:	20 81       	ld	r18, Z
     38e:	31 81       	ldd	r19, Z+1	; 0x01
     390:	26 17       	cp	r18, r22
     392:	37 07       	cpc	r19, r23
     394:	38 f4       	brcc	.+14     	; 0x3a4 <ADC_Task+0x5c>
     396:	fc 01       	movw	r30, r24
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	ee 5e       	subi	r30, 0xEE	; 238
     39e:	fc 4f       	sbci	r31, 0xFC	; 252
     3a0:	60 81       	ld	r22, Z
     3a2:	71 81       	ldd	r23, Z+1	; 0x01
     3a4:	fc 01       	movw	r30, r24
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	ee 5e       	subi	r30, 0xEE	; 238
     3ac:	fc 4f       	sbci	r31, 0xFC	; 252
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	a2 17       	cp	r26, r18
     3b4:	b3 07       	cpc	r27, r19
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <ADC_Task+0x72>
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ba:	fc 01       	movw	r30, r24
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	ee 5e       	subi	r30, 0xEE	; 238
     3c2:	fc 4f       	sbci	r31, 0xFC	; 252
     3c4:	a0 81       	ld	r26, Z
     3c6:	b1 81       	ldd	r27, Z+1	; 0x01
     3c8:	45 c0       	rjmp	.+138    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ca:	8f b7       	in	r24, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	ca 1a       	sub	r12, r26
     3d0:	db 0a       	sbc	r13, r27
     3d2:	e1 08       	sbc	r14, r1
     3d4:	f1 08       	sbc	r15, r1
     3d6:	c6 1a       	sub	r12, r22
     3d8:	d7 0a       	sbc	r13, r23
     3da:	e1 08       	sbc	r14, r1
     3dc:	f1 08       	sbc	r15, r1
     3de:	f6 94       	lsr	r15
     3e0:	e7 94       	ror	r14
     3e2:	d7 94       	ror	r13
     3e4:	c7 94       	ror	r12
     3e6:	f6 94       	lsr	r15
     3e8:	e7 94       	ror	r14
     3ea:	d7 94       	ror	r13
     3ec:	c7 94       	ror	r12
     3ee:	8f bf       	out	0x3f, r24	; 63
     3f0:	cf b7       	in	r28, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	d7 01       	movw	r26, r14
     3f6:	c6 01       	movw	r24, r12
     3f8:	0b 97       	sbiw	r24, 0x0b	; 11
     3fa:	a1 09       	sbc	r26, r1
     3fc:	b1 09       	sbc	r27, r1
     3fe:	8d 3d       	cpi	r24, 0xDD	; 221
     400:	93 40       	sbci	r25, 0x03	; 3
     402:	a1 05       	cpc	r26, r1
     404:	b1 05       	cpc	r27, r1
     406:	a0 f4       	brcc	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     408:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     40c:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     410:	a0 d1       	rcall	.+832    	; 0x752 <LL_GetRefl>
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	c8 16       	cp	r12, r24
     418:	d9 06       	cpc	r13, r25
     41a:	ea 06       	cpc	r14, r26
     41c:	fb 06       	cpc	r15, r27
     41e:	40 f4       	brcc	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     420:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     424:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	11 f0       	breq	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	b6 01       	movw	r22, r12
     42e:	9c d1       	rcall	.+824    	; 0x768 <LL_UpdateRefl>
     430:	cf bf       	out	0x3f, r28	; 63
     432:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_ADCCount+0x1>
     436:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <g_ADCCount>
     43a:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <_timer+0x11>
     43e:	66 9b       	sbis	0x0c, 6	; 12
     440:	06 c0       	rjmp	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     442:	ea e7       	ldi	r30, 0x7A	; 122
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
     44c:	0a c0       	rjmp	.+20     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     44e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <ticks.2386>
     452:	07 c0       	rjmp	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     454:	4f bf       	out	0x3f, r20	; 63
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	86 30       	cpi	r24, 0x06	; 6
     45a:	91 05       	cpc	r25, r1
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	89 cf       	rjmp	.-238    	; 0x372 <ADC_Task+0x2a>
     460:	b4 cf       	rjmp	.-152    	; 0x3ca <ADC_Task+0x82>
     462:	cf 91       	pop	r28
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <MAG_Task>:
     46e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <g_MotorOn>
     472:	88 23       	and	r24, r24
     474:	29 f0       	breq	.+10     	; 0x480 <MAG_Task+0x12>
     476:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <tick.2408>
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <tick.2408>
     480:	64 99       	sbic	0x0c, 4	; 12
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <MAG_Task+0x4a>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     48a:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     48e:	7c d1       	rcall	.+760    	; 0x788 <LL_UpdateStatus>
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     496:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     49a:	6c d1       	rcall	.+728    	; 0x774 <LL_UpdateMag>
     49c:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4a0:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4a4:	2b d1       	rcall	.+598    	; 0x6fc <LL_Next>
     4a6:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     4aa:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     4ae:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <tick.2408>
     4b2:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_timer+0x1a>
     4b6:	08 95       	ret
     4b8:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <tick.2408>
     4bc:	83 33       	cpi	r24, 0x33	; 51
     4be:	c8 f0       	brcs	.+50     	; 0x4f2 <MAG_Task+0x84>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4c6:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4ca:	5e d1       	rcall	.+700    	; 0x788 <LL_UpdateStatus>
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4d2:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4d6:	4e d1       	rcall	.+668    	; 0x774 <LL_UpdateMag>
     4d8:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     4dc:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     4e0:	0d d1       	rcall	.+538    	; 0x6fc <LL_Next>
     4e2:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <STAGE1+0x1>
     4e6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <STAGE1>
     4ea:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <tick.2408>
     4ee:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_timer+0x1a>
     4f2:	08 95       	ret

000004f4 <EXIT_Task>:
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <g_Timer>
     506:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <g_Timer+0x1>
     50a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <EXIT_DELAY>
     50e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <EXIT_DELAY+0x1>
     512:	28 17       	cp	r18, r24
     514:	39 07       	cpc	r19, r25
     516:	18 f4       	brcc	.+6      	; 0x51e <EXIT_Task+0x2a>
     518:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     51c:	81 c0       	rjmp	.+258    	; 0x620 <EXIT_Task+0x12c>
     51e:	00 91 29 03 	lds	r16, 0x0329	; 0x800329 <g_Timer>
     522:	10 91 2a 03 	lds	r17, 0x032A	; 0x80032a <g_Timer+0x1>
     526:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     52a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     52e:	0c d1       	rcall	.+536    	; 0x748 <LL_GetClass>
     530:	08 1b       	sub	r16, r24
     532:	11 09       	sbc	r17, r1
     534:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <STAGE2_EXIT_TIME>
     538:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <STAGE2_EXIT_TIME+0x1>
     53c:	08 17       	cp	r16, r24
     53e:	19 07       	cpc	r17, r25
     540:	18 f4       	brcc	.+6      	; 0x548 <EXIT_Task+0x54>
     542:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     546:	6c c0       	rjmp	.+216    	; 0x620 <EXIT_Task+0x12c>
     548:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     54c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     550:	fb d0       	rcall	.+502    	; 0x748 <LL_GetClass>
     552:	ee e7       	ldi	r30, 0x7E	; 126
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	85 81       	ldd	r24, Z+5	; 0x05
     558:	96 81       	ldd	r25, Z+6	; 0x06
     55a:	97 81       	ldd	r25, Z+7	; 0x07
     55c:	89 1b       	sub	r24, r25
     55e:	89 83       	std	Y+1, r24	; 0x01
     560:	99 81       	ldd	r25, Y+1	; 0x01
     562:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <STEPPER_RANGE>
     566:	98 17       	cp	r25, r24
     568:	08 f0       	brcs	.+2      	; 0x56c <EXIT_Task+0x78>
     56a:	41 c0       	rjmp	.+130    	; 0x5ee <EXIT_Task+0xfa>
     56c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <stepper+0xe>
     570:	81 11       	cpse	r24, r1
     572:	3d c0       	rjmp	.+122    	; 0x5ee <EXIT_Task+0xfa>
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	85 30       	cpi	r24, 0x05	; 5
     578:	40 f4       	brcc	.+16     	; 0x58a <EXIT_Task+0x96>
     57a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     57e:	81 11       	cpse	r24, r1
     580:	04 c0       	rjmp	.+8      	; 0x58a <EXIT_Task+0x96>
     582:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <STEPPER_SET>
     586:	82 87       	std	Z+10, r24	; 0x0a
     588:	15 86       	std	Z+13, r1	; 0x0d
     58a:	63 e0       	ldi	r22, 0x03	; 3
     58c:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     590:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     594:	f9 d0       	rcall	.+498    	; 0x788 <LL_UpdateStatus>
     596:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     59a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     59e:	04 d1       	rcall	.+520    	; 0x7a8 <LL_GetTick>
     5a0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     5a4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     5a8:	a9 d0       	rcall	.+338    	; 0x6fc <LL_Next>
     5aa:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <HEAD+0x1>
     5ae:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <HEAD>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	c6 d1       	rcall	.+908    	; 0x944 <PWM>
     5b8:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     5bc:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	c1 d0       	rcall	.+386    	; 0x748 <LL_GetClass>
     5c6:	e8 2f       	mov	r30, r24
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	e7 5f       	subi	r30, 0xF7	; 247
     5cc:	fe 4f       	sbci	r31, 0xFE	; 254
     5ce:	10 81       	ld	r17, Z
     5d0:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     5d4:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     5d8:	b7 d0       	rcall	.+366    	; 0x748 <LL_GetClass>
     5da:	e8 2f       	mov	r30, r24
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	e7 5f       	subi	r30, 0xF7	; 247
     5e0:	fe 4f       	sbci	r31, 0xFE	; 254
     5e2:	80 81       	ld	r24, Z
     5e4:	61 2f       	mov	r22, r17
     5e6:	3e d2       	rcall	.+1148   	; 0xa64 <STEPPER_SetRotation>
     5e8:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_timer+0x23>
     5ec:	14 c0       	rjmp	.+40     	; 0x616 <EXIT_Task+0x122>
     5ee:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     5f2:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     5f6:	84 81       	ldd	r24, Z+4	; 0x04
     5f8:	95 81       	ldd	r25, Z+5	; 0x05
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	49 f0       	breq	.+18     	; 0x610 <EXIT_Task+0x11c>
     5fe:	a4 d0       	rcall	.+328    	; 0x748 <LL_GetClass>
     600:	18 2f       	mov	r17, r24
     602:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     606:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     60a:	9e d0       	rcall	.+316    	; 0x748 <LL_GetClass>
     60c:	18 17       	cp	r17, r24
     60e:	19 f0       	breq	.+6      	; 0x616 <EXIT_Task+0x122>
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	97 d1       	rcall	.+814    	; 0x944 <PWM>
     616:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     61a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     61e:	94 d0       	rcall	.+296    	; 0x748 <LL_GetClass>
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	0f 91       	pop	r16
     62a:	08 95       	ret

0000062c <BTN_Task>:
     62c:	89 b1       	in	r24, 0x09	; 9
     62e:	83 70       	andi	r24, 0x03	; 3
     630:	c1 f0       	breq	.+48     	; 0x662 <BTN_Task+0x36>
     632:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <__data_end>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__data_end>
     63c:	8b 30       	cpi	r24, 0x0B	; 11
     63e:	98 f0       	brcs	.+38     	; 0x666 <BTN_Task+0x3a>
     640:	89 b1       	in	r24, 0x09	; 9
     642:	83 70       	andi	r24, 0x03	; 3
     644:	81 f0       	breq	.+32     	; 0x666 <BTN_Task+0x3a>
     646:	89 b1       	in	r24, 0x09	; 9
     648:	83 70       	andi	r24, 0x03	; 3
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	19 f4       	brne	.+6      	; 0x654 <BTN_Task+0x28>
     64e:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <g_PauseRequest>
     652:	08 95       	ret
     654:	89 b1       	in	r24, 0x09	; 9
     656:	83 70       	andi	r24, 0x03	; 3
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	29 f4       	brne	.+10     	; 0x666 <BTN_Task+0x3a>
     65c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <_timer+0x2c>
     660:	08 95       	ret
     662:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <__data_end>
     666:	08 95       	ret

00000668 <WATCHDOG_Task>:
     668:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <g_WDTimeout>
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	18 f0       	brcs	.+6      	; 0x676 <WATCHDOG_Task+0xe>
     670:	86 e1       	ldi	r24, 0x16	; 22
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	a8 d3       	rcall	.+1872   	; 0xdc6 <SYS_Pause>
     676:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <g_WDTimeout>
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <g_WDTimeout>
     680:	08 95       	ret

00000682 <D_Blinky>:
     682:	9b b1       	in	r25, 0x0b	; 11
     684:	80 ea       	ldi	r24, 0xA0	; 160
     686:	89 27       	eor	r24, r25
     688:	8b b9       	out	0x0b, r24	; 11
     68a:	08 95       	ret

0000068c <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     68c:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <g_MotorOn>
     690:	88 23       	and	r24, r24
     692:	49 f0       	breq	.+18     	; 0x6a6 <ADD_Task+0x1a>
     694:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <g_Timer>
     698:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <g_Timer+0x1>
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <g_Timer+0x1>
     6a2:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <g_Timer>
     6a6:	08 95       	ret

000006a8 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	7c 01       	movw	r14, r24
     6b4:	16 2f       	mov	r17, r22
     6b6:	d4 2f       	mov	r29, r20
     6b8:	c2 2f       	mov	r28, r18
     6ba:	87 e0       	ldi	r24, 0x07	; 7
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	1b d6       	rcall	.+3126   	; 0x12f6 <malloc>
     6c0:	fc 01       	movw	r30, r24
     6c2:	f1 82       	std	Z+1, r15	; 0x01
     6c4:	e0 82       	st	Z, r14
     6c6:	12 83       	std	Z+2, r17	; 0x02
     6c8:	d3 83       	std	Z+3, r29	; 0x03
     6ca:	c4 83       	std	Z+4, r28	; 0x04
     6cc:	16 82       	std	Z+6, r1	; 0x06
     6ce:	15 82       	std	Z+5, r1	; 0x05
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	08 95       	ret

000006dc <LL_ItemListInit>:
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
     6e2:	86 e0       	ldi	r24, 0x06	; 6
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	07 d6       	rcall	.+3086   	; 0x12f6 <malloc>
     6e8:	fc 01       	movw	r30, r24
     6ea:	d1 83       	std	Z+1, r29	; 0x01
     6ec:	c0 83       	st	Z, r28
     6ee:	15 82       	std	Z+5, r1	; 0x05
     6f0:	14 82       	std	Z+4, r1	; 0x04
     6f2:	13 82       	std	Z+3, r1	; 0x03
     6f4:	12 82       	std	Z+2, r1	; 0x02
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <LL_Next>:
     6fc:	fc 01       	movw	r30, r24
     6fe:	82 81       	ldd	r24, Z+2	; 0x02
     700:	93 81       	ldd	r25, Z+3	; 0x03
     702:	08 95       	ret

00000704 <LL_AddBack>:
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	ec 01       	movw	r28, r24
     70a:	cb 01       	movw	r24, r22
     70c:	01 c0       	rjmp	.+2      	; 0x710 <LL_AddBack+0xc>
     70e:	e9 01       	movw	r28, r18
     710:	2a 81       	ldd	r18, Y+2	; 0x02
     712:	3b 81       	ldd	r19, Y+3	; 0x03
     714:	21 15       	cp	r18, r1
     716:	31 05       	cpc	r19, r1
     718:	d1 f7       	brne	.-12     	; 0x70e <LL_AddBack+0xa>
     71a:	e0 df       	rcall	.-64     	; 0x6dc <LL_ItemListInit>
     71c:	9b 83       	std	Y+3, r25	; 0x03
     71e:	8a 83       	std	Y+2, r24	; 0x02
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <LL_Size>:
     726:	dc 01       	movw	r26, r24
     728:	12 96       	adiw	r26, 0x02	; 2
     72a:	ed 91       	ld	r30, X+
     72c:	fc 91       	ld	r31, X
     72e:	13 97       	sbiw	r26, 0x03	; 3
     730:	30 97       	sbiw	r30, 0x00	; 0
     732:	41 f0       	breq	.+16     	; 0x744 <LL_Size+0x1e>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	8f 5f       	subi	r24, 0xFF	; 255
     738:	02 80       	ldd	r0, Z+2	; 0x02
     73a:	f3 81       	ldd	r31, Z+3	; 0x03
     73c:	e0 2d       	mov	r30, r0
     73e:	30 97       	sbiw	r30, 0x00	; 0
     740:	d1 f7       	brne	.-12     	; 0x736 <LL_Size+0x10>
     742:	08 95       	ret
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	08 95       	ret

00000748 <LL_GetClass>:
     748:	dc 01       	movw	r26, r24
     74a:	ed 91       	ld	r30, X+
     74c:	fc 91       	ld	r31, X
     74e:	83 81       	ldd	r24, Z+3	; 0x03
     750:	08 95       	ret

00000752 <LL_GetRefl>:
     752:	dc 01       	movw	r26, r24
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	80 81       	ld	r24, Z
     75a:	91 81       	ldd	r25, Z+1	; 0x01
     75c:	08 95       	ret

0000075e <LL_GetMag>:
     75e:	dc 01       	movw	r26, r24
     760:	ed 91       	ld	r30, X+
     762:	fc 91       	ld	r31, X
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	08 95       	ret

00000768 <LL_UpdateRefl>:
     768:	dc 01       	movw	r26, r24
     76a:	ed 91       	ld	r30, X+
     76c:	fc 91       	ld	r31, X
     76e:	71 83       	std	Z+1, r23	; 0x01
     770:	60 83       	st	Z, r22
     772:	08 95       	ret

00000774 <LL_UpdateMag>:
     774:	dc 01       	movw	r26, r24
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	62 83       	std	Z+2, r22	; 0x02
     77c:	08 95       	ret

0000077e <LL_UpdateClass>:
     77e:	dc 01       	movw	r26, r24
     780:	ed 91       	ld	r30, X+
     782:	fc 91       	ld	r31, X
     784:	63 83       	std	Z+3, r22	; 0x03
     786:	08 95       	ret

00000788 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     788:	dc 01       	movw	r26, r24
     78a:	ed 91       	ld	r30, X+
     78c:	fc 91       	ld	r31, X
     78e:	64 83       	std	Z+4, r22	; 0x04
     790:	08 95       	ret

00000792 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     792:	dc 01       	movw	r26, r24
     794:	ed 91       	ld	r30, X+
     796:	fc 91       	ld	r31, X
}
     798:	84 81       	ldd	r24, Z+4	; 0x04
     79a:	08 95       	ret

0000079c <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     79c:	dc 01       	movw	r26, r24
     79e:	ed 91       	ld	r30, X+
     7a0:	fc 91       	ld	r31, X
     7a2:	76 83       	std	Z+6, r23	; 0x06
     7a4:	65 83       	std	Z+5, r22	; 0x05
     7a6:	08 95       	ret

000007a8 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     7a8:	dc 01       	movw	r26, r24
     7aa:	ed 91       	ld	r30, X+
     7ac:	fc 91       	ld	r31, X
     7ae:	85 81       	ldd	r24, Z+5	; 0x05
     7b0:	96 81       	ldd	r25, Z+6	; 0x06
     7b2:	08 95       	ret

000007b4 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     7b8:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     7ba:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     7bc:	80 ef       	ldi	r24, 0xF0	; 240
     7be:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     7c0:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     7c2:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	08 95       	ret

000007ca <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     7ca:	6c d2       	rcall	.+1240   	; 0xca4 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     7cc:	89 b1       	in	r24, 0x09	; 9
     7ce:	83 70       	andi	r24, 0x03	; 3
     7d0:	e9 f7       	brne	.-6      	; 0x7cc <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     7d2:	84 e2       	ldi	r24, 0x24	; 36
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	81 d5       	rcall	.+2818   	; 0x12da <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7d8:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	45 ec       	ldi	r20, 0xC5	; 197
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	70 e0       	ldi	r23, 0x00	; 0
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	fe d4       	rcall	.+2556   	; 0x11e8 <TIMER_Create>
		_timer[0].state = READY;
     7ec:	c2 e3       	ldi	r28, 0x32	; 50
     7ee:	d3 e0       	ldi	r29, 0x03	; 3
     7f0:	12 e0       	ldi	r17, 0x02	; 2
     7f2:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	44 ea       	ldi	r20, 0xA4	; 164
     7fa:	51 e0       	ldi	r21, 0x01	; 1
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	f1 d4       	rcall	.+2530   	; 0x11e8 <TIMER_Create>
		_timer[1].state = BLOCKED;
     806:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	47 e3       	ldi	r20, 0x37	; 55
     80e:	52 e0       	ldi	r21, 0x02	; 2
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	e7 d4       	rcall	.+2510   	; 0x11e8 <TIMER_Create>
		_timer[2].state = BLOCKED;
     81a:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	4a e7       	ldi	r20, 0x7A	; 122
     822:	52 e0       	ldi	r21, 0x02	; 2
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	dd d4       	rcall	.+2490   	; 0x11e8 <TIMER_Create>
		_timer[3].state = BLOCKED;
     82e:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	46 e4       	ldi	r20, 0x46	; 70
     836:	53 e0       	ldi	r21, 0x03	; 3
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	d3 d4       	rcall	.+2470   	; 0x11e8 <TIMER_Create>
		_timer[4].state = BLOCKED;
     842:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	46 e1       	ldi	r20, 0x16	; 22
     84a:	53 e0       	ldi	r21, 0x03	; 3
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	84 e6       	ldi	r24, 0x64	; 100
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	c9 d4       	rcall	.+2450   	; 0x11e8 <TIMER_Create>
		_timer[5].state = READY;
     856:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	41 e4       	ldi	r20, 0x41	; 65
     85e:	53 e0       	ldi	r21, 0x03	; 3
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	97 e0       	ldi	r25, 0x07	; 7
     868:	bf d4       	rcall	.+2430   	; 0x11e8 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     86a:	1e af       	std	Y+62, r17	; 0x3e
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	44 e3       	ldi	r20, 0x34	; 52
     872:	53 e0       	ldi	r21, 0x03	; 3
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     87a:	93 e1       	ldi	r25, 0x13	; 19
     87c:	b5 d4       	rcall	.+2410   	; 0x11e8 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     87e:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <_timer+0x47>
     882:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	29 d5       	rcall	.+2642   	; 0x12da <UART_SendString>
     888:	80 e8       	ldi	r24, 0x80	; 128
     88a:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     88c:	5b d0       	rcall	.+182    	; 0x944 <PWM>
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     88e:	78 94       	sei
     890:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <g_PauseRequest>
     894:	88 23       	and	r24, r24
     896:	19 f0       	breq	.+6      	; 0x89e <main+0xd4>
     898:	89 e4       	ldi	r24, 0x49	; 73
     89a:	91 e0       	ldi	r25, 0x01	; 1
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     89c:	94 d2       	rcall	.+1320   	; 0xdc6 <SYS_Pause>
     89e:	c0 91 0c 03 	lds	r28, 0x030C	; 0x80030c <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     8a2:	d0 91 0d 03 	lds	r29, 0x030D	; 0x80030d <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     8a6:	20 97       	sbiw	r28, 0x00	; 0
     8a8:	99 f3       	breq	.-26     	; 0x890 <main+0xc6>
     8aa:	20 97       	sbiw	r28, 0x00	; 0
     8ac:	91 f1       	breq	.+100    	; 0x912 <main+0x148>
     8ae:	ce 01       	movw	r24, r28
     8b0:	4b df       	rcall	.-362    	; 0x748 <LL_GetClass>
     8b2:	84 30       	cpi	r24, 0x04	; 4
     8b4:	71 f5       	brne	.+92     	; 0x912 <main+0x148>
     8b6:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     8b8:	6c df       	rcall	.-296    	; 0x792 <LL_GetStatus>
     8ba:	82 30       	cpi	r24, 0x02	; 2
     8bc:	51 f5       	brne	.+84     	; 0x912 <main+0x148>
     8be:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     8c0:	48 df       	rcall	.-368    	; 0x752 <LL_GetRefl>
     8c2:	8c 01       	movw	r16, r24
     8c4:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     8c6:	4b df       	rcall	.-362    	; 0x75e <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     8c8:	88 23       	and	r24, r24
     8ca:	91 f0       	breq	.+36     	; 0x8f0 <main+0x126>
     8cc:	c8 01       	movw	r24, r16
     8ce:	0a 97       	sbiw	r24, 0x0a	; 10
     8d0:	83 32       	cpi	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     8d2:	91 40       	sbci	r25, 0x01	; 1
     8d4:	20 f4       	brcc	.+8      	; 0x8de <main+0x114>
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     8da:	51 df       	rcall	.-350    	; 0x77e <LL_UpdateClass>
     8dc:	1a c0       	rjmp	.+52     	; 0x912 <main+0x148>
     8de:	0c 52       	subi	r16, 0x2C	; 44
     8e0:	11 40       	sbci	r17, 0x01	; 1
     8e2:	05 3f       	cpi	r16, 0xF5	; 245
					{
						LL_UpdateClass(temp, STEEL);
     8e4:	11 40       	sbci	r17, 0x01	; 1
     8e6:	a8 f4       	brcc	.+42     	; 0x912 <main+0x148>
     8e8:	63 e0       	ldi	r22, 0x03	; 3
     8ea:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     8ec:	48 df       	rcall	.-368    	; 0x77e <LL_UpdateClass>
     8ee:	11 c0       	rjmp	.+34     	; 0x912 <main+0x148>
     8f0:	c8 01       	movw	r24, r16
     8f2:	89 58       	subi	r24, 0x89	; 137
     8f4:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     8f6:	0b 97       	sbiw	r24, 0x0b	; 11
     8f8:	20 f4       	brcc	.+8      	; 0x902 <main+0x138>
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	ce 01       	movw	r24, r28
     8fe:	3f df       	rcall	.-386    	; 0x77e <LL_UpdateClass>
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     900:	08 c0       	rjmp	.+16     	; 0x912 <main+0x148>
     902:	00 52       	subi	r16, 0x20	; 32
     904:	13 40       	sbci	r17, 0x03	; 3
     906:	0b 3a       	cpi	r16, 0xAB	; 171
     908:	11 05       	cpc	r17, r1
				{
					LL_UpdateClass(temp, BLACK);
     90a:	18 f4       	brcc	.+6      	; 0x912 <main+0x148>
     90c:	61 e0       	ldi	r22, 0x01	; 1
     90e:	ce 01       	movw	r24, r28
     910:	36 df       	rcall	.-404    	; 0x77e <LL_UpdateClass>
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     912:	ce 01       	movw	r24, r28
     914:	f3 de       	rcall	.-538    	; 0x6fc <LL_Next>
     916:	ec 01       	movw	r28, r24
     918:	89 2b       	or	r24, r25
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     91a:	09 f0       	breq	.+2      	; 0x91e <main+0x154>
     91c:	c6 cf       	rjmp	.-116    	; 0x8aa <main+0xe0>
     91e:	b8 cf       	rjmp	.-144    	; 0x890 <main+0xc6>

00000920 <__vector_default>:
     920:	1f 92       	push	r1
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     922:	0f 92       	push	r0
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	0f 92       	push	r0
     928:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     92a:	8a ea       	ldi	r24, 0xAA	; 170
     92c:	88 b9       	out	0x08, r24	; 8
     92e:	fe cf       	rjmp	.-4      	; 0x92c <__vector_default+0xc>

00000930 <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     930:	84 b5       	in	r24, 0x24	; 36
     932:	83 68       	ori	r24, 0x83	; 131
     934:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     936:	85 b5       	in	r24, 0x25	; 37
     938:	83 60       	ori	r24, 0x03	; 3
     93a:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     93c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     940:	87 bd       	out	0x27, r24	; 39
     942:	08 95       	ret

00000944 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     944:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     946:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     948:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     94a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     94e:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     950:	23 2b       	or	r18, r19
     952:	31 f0       	breq	.+12     	; 0x960 <PWM+0x1c>
		{
			g_MotorOn = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <g_MotorOn>
			PORTB = ~0x0E;
     95a:	81 ef       	ldi	r24, 0xF1	; 241
     95c:	85 b9       	out	0x05, r24	; 5
     95e:	04 c0       	rjmp	.+8      	; 0x968 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     960:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <g_MotorOn>
			PORTB = ~0x0F;
     964:	80 ef       	ldi	r24, 0xF0	; 240
     966:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     968:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     96a:	08 95       	ret

0000096c <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     96c:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     96e:	ee e7       	ldi	r30, 0x7E	; 126
     970:	f3 e0       	ldi	r31, 0x03	; 3
     972:	10 82       	st	Z, r1
	stepper.direction = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     978:	13 82       	std	Z+3, r1	; 0x03
     97a:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     97c:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     97e:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     980:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     982:	11 86       	std	Z+9, r1	; 0x09
     984:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     986:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     988:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     98a:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     98c:	88 ec       	ldi	r24, 0xC8	; 200
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	96 83       	std	Z+6, r25	; 0x06
     992:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     994:	80 e3       	ldi	r24, 0x30	; 48
     996:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     998:	84 e9       	ldi	r24, 0x94	; 148
     99a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     99e:	e0 eb       	ldi	r30, 0xB0	; 176
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	82 60       	ori	r24, 0x02	; 2
     9a6:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     9a8:	e0 e7       	ldi	r30, 0x70	; 112
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	82 60       	ori	r24, 0x02	; 2
     9b0:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     9b2:	e1 eb       	ldi	r30, 0xB1	; 177
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	87 60       	ori	r24, 0x07	; 7
     9ba:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     9bc:	78 94       	sei
     9be:	08 95       	ret

000009c0 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	86 1b       	sub	r24, r22
     9c4:	91 09       	sbc	r25, r1
	if (steps >= 0)
     9c6:	52 f0       	brmi	.+20     	; 0x9dc <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     9c8:	85 36       	cpi	r24, 0x65	; 101
     9ca:	91 05       	cpc	r25, r1
     9cc:	8c f0       	brlt	.+34     	; 0x9f0 <STEPPER_NumSteps+0x30>
     9ce:	24 e6       	ldi	r18, 0x64	; 100
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	a9 01       	movw	r20, r18
     9d4:	48 1b       	sub	r20, r24
     9d6:	59 0b       	sbc	r21, r25
     9d8:	ca 01       	movw	r24, r20
     9da:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     9dc:	8c 39       	cpi	r24, 0x9C	; 156
     9de:	5f ef       	ldi	r21, 0xFF	; 255
     9e0:	95 07       	cpc	r25, r21
     9e2:	34 f4       	brge	.+12     	; 0x9f0 <STEPPER_NumSteps+0x30>
     9e4:	2c e9       	ldi	r18, 0x9C	; 156
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	a9 01       	movw	r20, r18
     9ea:	48 1b       	sub	r20, r24
     9ec:	59 0b       	sbc	r21, r25
     9ee:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     9f0:	08 95       	ret

000009f2 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     9f6:	ce e7       	ldi	r28, 0x7E	; 126
     9f8:	d3 e0       	ldi	r29, 0x03	; 3
     9fa:	6c 81       	ldd	r22, Y+4	; 0x04
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	df df       	rcall	.-66     	; 0x9c0 <STEPPER_NumSteps>
     a02:	9e 83       	std	Y+6, r25	; 0x06
     a04:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     a06:	6a 81       	ldd	r22, Y+2	; 0x02
     a08:	7b 81       	ldd	r23, Y+3	; 0x03
     a0a:	88 85       	ldd	r24, Y+8	; 0x08
     a0c:	99 85       	ldd	r25, Y+9	; 0x09
     a0e:	d8 df       	rcall	.-80     	; 0x9c0 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     a10:	2d 81       	ldd	r18, Y+5	; 0x05
     a12:	3e 81       	ldd	r19, Y+6	; 0x06
     a14:	33 23       	and	r19, r19
     a16:	14 f4       	brge	.+4      	; 0xa1c <STEPPER_Rotate+0x2a>
     a18:	28 e0       	ldi	r18, 0x08	; 8
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <STEPPER_Rotate+0x2c>
     a1c:	24 e0       	ldi	r18, 0x04	; 4
     a1e:	ee e7       	ldi	r30, 0x7E	; 126
     a20:	f3 e0       	ldi	r31, 0x03	; 3
     a22:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     a24:	45 81       	ldd	r20, Z+5	; 0x05
     a26:	56 81       	ldd	r21, Z+6	; 0x06
     a28:	84 9f       	mul	r24, r20
     a2a:	90 01       	movw	r18, r0
     a2c:	85 9f       	mul	r24, r21
     a2e:	30 0d       	add	r19, r0
     a30:	94 9f       	mul	r25, r20
     a32:	30 0d       	add	r19, r0
     a34:	11 24       	eor	r1, r1
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	12 16       	cp	r1, r18
     a3a:	13 06       	cpc	r1, r19
     a3c:	0c f0       	brlt	.+2      	; 0xa40 <STEPPER_Rotate+0x4e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	ee e7       	ldi	r30, 0x7E	; 126
     a42:	f3 e0       	ldi	r31, 0x03	; 3
     a44:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     a46:	85 81       	ldd	r24, Z+5	; 0x05
     a48:	96 81       	ldd	r25, Z+6	; 0x06
     a4a:	99 23       	and	r25, r25
     a4c:	1c f4       	brge	.+6      	; 0xa54 <STEPPER_Rotate+0x62>
     a4e:	91 95       	neg	r25
     a50:	81 95       	neg	r24
     a52:	91 09       	sbc	r25, r1
     a54:	ee e7       	ldi	r30, 0x7E	; 126
     a56:	f3 e0       	ldi	r31, 0x03	; 3
     a58:	96 83       	std	Z+6, r25	; 0x06
     a5a:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     a5c:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     a64:	ee e7       	ldi	r30, 0x7E	; 126
     a66:	f3 e0       	ldi	r31, 0x03	; 3
     a68:	24 81       	ldd	r18, Z+4	; 0x04
     a6a:	42 81       	ldd	r20, Z+2	; 0x02
     a6c:	53 81       	ldd	r21, Z+3	; 0x03
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	24 17       	cp	r18, r20
     a72:	35 07       	cpc	r19, r21
     a74:	29 f0       	breq	.+10     	; 0xa80 <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     a7a:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     a7c:	60 8b       	std	Z+16, r22	; 0x10
     a7e:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	ee e7       	ldi	r30, 0x7E	; 126
     a86:	f3 e0       	ldi	r31, 0x03	; 3
     a88:	33 83       	std	Z+3, r19	; 0x03
     a8a:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	71 87       	std	Z+9, r23	; 0x09
     a90:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     a92:	94 81       	ldd	r25, Z+4	; 0x04
     a94:	89 13       	cpse	r24, r25
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <STEPPER_SetRotation+0x3c>
     a98:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <STEPPER_SAME>
     a9c:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <stepper+0xa>
		STEPPER_Rotate();
     aa0:	a8 cf       	rjmp	.-176    	; 0x9f2 <STEPPER_Rotate>
     aa2:	08 95       	ret

00000aa4 <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	0b b6       	in	r0, 0x3b	; 59
     ab0:	0f 92       	push	r0
     ab2:	2f 93       	push	r18
     ab4:	3f 93       	push	r19
     ab6:	4f 93       	push	r20
     ab8:	5f 93       	push	r21
     aba:	6f 93       	push	r22
     abc:	7f 93       	push	r23
     abe:	8f 93       	push	r24
     ac0:	9f 93       	push	r25
     ac2:	af 93       	push	r26
     ac4:	bf 93       	push	r27
     ac6:	ef 93       	push	r30
     ac8:	ff 93       	push	r31
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	00 d0       	rcall	.+0      	; 0xad0 <__vector_13+0x2c>
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <__vector_13+0x2e>
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     ad6:	86 e3       	ldi	r24, 0x36	; 54
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	9e e2       	ldi	r25, 0x2E	; 46
     ae0:	ad e2       	ldi	r26, 0x2D	; 45
     ae2:	b5 e3       	ldi	r27, 0x35	; 53
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	9a 83       	std	Y+2, r25	; 0x02
     ae8:	ab 83       	std	Y+3, r26	; 0x03
     aea:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     aec:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     af0:	88 23       	and	r24, r24
     af2:	29 f0       	breq	.+10     	; 0xafe <__vector_13+0x5a>
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f3 e0       	ldi	r31, 0x03	; 3
     af8:	82 85       	ldd	r24, Z+10	; 0x0a
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     afe:	ee e7       	ldi	r30, 0x7E	; 126
     b00:	f3 e0       	ldi	r31, 0x03	; 3
     b02:	87 81       	ldd	r24, Z+7	; 0x07
     b04:	25 81       	ldd	r18, Z+5	; 0x05
     b06:	36 81       	ldd	r19, Z+6	; 0x06
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	82 17       	cp	r24, r18
     b0c:	93 07       	cpc	r25, r19
     b0e:	f1 f4       	brne	.+60     	; 0xb4c <__vector_13+0xa8>
	{

		g_ItemInRange = 0;
     b10:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <g_ItemInRange>
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     b14:	82 81       	ldd	r24, Z+2	; 0x02
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     b1a:	86 85       	ldd	r24, Z+14	; 0x0e
     b1c:	88 23       	and	r24, r24
     b1e:	21 f0       	breq	.+8      	; 0xb28 <__vector_13+0x84>
		{
			stepper.early = 0;
     b20:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     b22:	60 89       	ldd	r22, Z+16	; 0x10
     b24:	87 85       	ldd	r24, Z+15	; 0x0f
     b26:	9e df       	rcall	.-196    	; 0xa64 <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     b28:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <stepper+0xb>
     b2c:	88 23       	and	r24, r24
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__vector_13+0x92>
     b30:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <stepper+0xd>
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__vector_13+0x94>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	ee e7       	ldi	r30, 0x7E	; 126
     b3a:	f3 e0       	ldi	r31, 0x03	; 3
     b3c:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     b3e:	e5 85       	ldd	r30, Z+13	; 0x0d
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	e0 5f       	subi	r30, 0xF0	; 240
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
     b46:	80 81       	ld	r24, Z
     b48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     b4c:	ee e7       	ldi	r30, 0x7E	; 126
     b4e:	f3 e0       	ldi	r31, 0x03	; 3
     b50:	87 81       	ldd	r24, Z+7	; 0x07
     b52:	25 81       	ldd	r18, Z+5	; 0x05
     b54:	36 81       	ldd	r19, Z+6	; 0x06
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	0c f0       	brlt	.+2      	; 0xb60 <__vector_13+0xbc>
     b5e:	60 c0       	rjmp	.+192    	; 0xc20 <__vector_13+0x17c>
     b60:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <stepper+0xa>
     b64:	81 11       	cpse	r24, r1
     b66:	5c c0       	rjmp	.+184    	; 0xc20 <__vector_13+0x17c>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     b68:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <stepper+0x1>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	51 f4       	brne	.+20     	; 0xb84 <__vector_13+0xe0>
     b70:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b74:	e1 e0       	ldi	r30, 0x01	; 1
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ec 0f       	add	r30, r28
     b7a:	fd 1f       	adc	r31, r29
     b7c:	e8 0f       	add	r30, r24
     b7e:	f1 1d       	adc	r31, r1
     b80:	80 81       	ld	r24, Z
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <__vector_13+0xfa>
     b84:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     b88:	e3 e0       	ldi	r30, 0x03	; 3
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	e8 1b       	sub	r30, r24
     b8e:	f1 09       	sbc	r31, r1
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	8c 0f       	add	r24, r28
     b96:	9d 1f       	adc	r25, r29
     b98:	e8 0f       	add	r30, r24
     b9a:	f9 1f       	adc	r31, r25
     b9c:	80 81       	ld	r24, Z
     b9e:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     ba0:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	21 f0       	breq	.+8      	; 0xbb0 <__vector_13+0x10c>
     ba8:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <stepper>
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <__vector_13+0x10e>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	ee e7       	ldi	r30, 0x7E	; 126
     bb4:	f3 e0       	ldi	r31, 0x03	; 3
     bb6:	80 83       	st	Z, r24

		stepper._currentStep++;
     bb8:	87 81       	ldd	r24, Z+7	; 0x07
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     bbe:	83 85       	ldd	r24, Z+11	; 0x0b
     bc0:	81 11       	cpse	r24, r1
     bc2:	15 c0       	rjmp	.+42     	; 0xbee <__vector_13+0x14a>
     bc4:	85 81       	ldd	r24, Z+5	; 0x05
     bc6:	96 81       	ldd	r25, Z+6	; 0x06
     bc8:	27 81       	ldd	r18, Z+7	; 0x07
     bca:	82 1b       	sub	r24, r18
     bcc:	91 09       	sbc	r25, r1
     bce:	06 97       	sbiw	r24, 0x06	; 6
     bd0:	74 f4       	brge	.+28     	; 0xbee <__vector_13+0x14a>
     bd2:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	e0 5f       	subi	r30, 0xF0	; 240
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	80 81       	ld	r24, Z
     bde:	84 39       	cpi	r24, 0x94	; 148
     be0:	30 f4       	brcc	.+12     	; 0xbee <__vector_13+0x14a>
		{
			stepper._accellStep--;
     be2:	ee e7       	ldi	r30, 0x7E	; 126
     be4:	f3 e0       	ldi	r31, 0x03	; 3
     be6:	85 85       	ldd	r24, Z+13	; 0x0d
     be8:	81 50       	subi	r24, 0x01	; 1
     bea:	85 87       	std	Z+13, r24	; 0x0d
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_13+0x16c>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     bee:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <stepper+0x7>
     bf2:	86 30       	cpi	r24, 0x06	; 6
     bf4:	68 f0       	brcs	.+26     	; 0xc10 <__vector_13+0x16c>
     bf6:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	e0 5f       	subi	r30, 0xF0	; 240
     bfe:	fe 4f       	sbci	r31, 0xFE	; 254
     c00:	80 81       	ld	r24, Z
     c02:	81 34       	cpi	r24, 0x41	; 65
     c04:	28 f0       	brcs	.+10     	; 0xc10 <__vector_13+0x16c>
		{
			stepper._accellStep++;
     c06:	ee e7       	ldi	r30, 0x7E	; 126
     c08:	f3 e0       	ldi	r31, 0x03	; 3
     c0a:	85 85       	ldd	r24, Z+13	; 0x0d
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     c10:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <stepper+0xd>
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	e0 5f       	subi	r30, 0xF0	; 240
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	80 81       	ld	r24, Z
     c1c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     c20:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	29 f1       	breq	.+74     	; 0xc72 <__vector_13+0x1ce>
	{
		if ((PINE & 0x08) == 0)
     c28:	63 99       	sbic	0x0c, 3	; 12
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__vector_13+0x190>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     c2c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <STEPPER_OFFSET>
     c30:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     c34:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	28 f0       	brcs	.+10     	; 0xc46 <__vector_13+0x1a2>
     c3c:	ee e7       	ldi	r30, 0x7E	; 126
     c3e:	f3 e0       	ldi	r31, 0x03	; 3
     c40:	84 85       	ldd	r24, Z+12	; 0x0c
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     c46:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <stepper+0xc>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	91 f4       	brne	.+36     	; 0xc72 <__vector_13+0x1ce>
		{
			stepper._isInitiated = 1;
     c4e:	ee e7       	ldi	r30, 0x7E	; 126
     c50:	f3 e0       	ldi	r31, 0x03	; 3
     c52:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     c54:	10 82       	st	Z, r1
			stepper.direction = 1;
     c56:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     c58:	13 82       	std	Z+3, r1	; 0x03
     c5a:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     c5c:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     c5e:	16 82       	std	Z+6, r1	; 0x06
     c60:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     c62:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     c64:	11 86       	std	Z+9, r1	; 0x09
     c66:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     c68:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     c6a:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     c6c:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     c6e:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     c70:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	bf 91       	pop	r27
     c84:	af 91       	pop	r26
     c86:	9f 91       	pop	r25
     c88:	8f 91       	pop	r24
     c8a:	7f 91       	pop	r23
     c8c:	6f 91       	pop	r22
     c8e:	5f 91       	pop	r21
     c90:	4f 91       	pop	r20
     c92:	3f 91       	pop	r19
     c94:	2f 91       	pop	r18
     c96:	0f 90       	pop	r0
     c98:	0b be       	out	0x3b, r0	; 59
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     ca4:	0f 93       	push	r16
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	f8 94       	cli
     cac:	e1 e6       	ldi	r30, 0x61	; 97
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	80 83       	st	Z, r24
     cb4:	10 82       	st	Z, r1
     cb6:	f9 d2       	rcall	.+1522   	; 0x12aa <UART_Init>
     cb8:	7d dd       	rcall	.-1286   	; 0x7b4 <GPIO_Init>
     cba:	7c d2       	rcall	.+1272   	; 0x11b4 <TIMER_Init>
     cbc:	39 de       	rcall	.-910    	; 0x930 <PWM_Init>
     cbe:	0b da       	rcall	.-3050   	; 0xd6 <ADC_Init>
     cc0:	55 de       	rcall	.-854    	; 0x96c <STEPPER_Init>
     cc2:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <g_ADCCount+0x1>
     cc6:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <g_ADCCount>
     cca:	84 e1       	ldi	r24, 0x14	; 20
     ccc:	e2 e1       	ldi	r30, 0x12	; 18
     cce:	f3 e0       	ldi	r31, 0x03	; 3
     cd0:	df 01       	movw	r26, r30
     cd2:	1d 92       	st	X+, r1
     cd4:	8a 95       	dec	r24
     cd6:	e9 f7       	brne	.-6      	; 0xcd2 <SYS_Init+0x2e>
     cd8:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <g_PauseRequest>
     cdc:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <g_WDTimeout>
     ce0:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <g_Timer+0x1>
     ce4:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <g_Timer>
     ce8:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <g_Lock>
     cec:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <g_ItemInRange>
     cf0:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <HEAD+0x1>
     cf4:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <HEAD>
     cf8:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <TAIL+0x1>
     cfc:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <TAIL>
     d00:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <STAGE1+0x1>
     d04:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <STAGE1>
     d08:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <STAGE2+0x1>
     d0c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <STAGE2>
     d10:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <FRONT+0x1>
     d14:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <FRONT>
     d18:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <BUFFER+0x1>
     d1c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <BUFFER>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	44 e0       	ldi	r20, 0x04	; 4
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	89 ee       	ldi	r24, 0xE9	; 233
     d28:	9d ef       	ldi	r25, 0xFD	; 253
     d2a:	be dc       	rcall	.-1668   	; 0x6a8 <LL_ItemInit>
     d2c:	d7 dc       	rcall	.-1618   	; 0x6dc <LL_ItemListInit>
     d2e:	90 93 0d 03 	sts	0x030D, r25	; 0x80030d <HEAD+0x1>
     d32:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <HEAD>
     d36:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <FRONT+0x1>
     d3a:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <FRONT>
     d3e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <BUFFER+0x1>
     d42:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <BUFFER>
     d46:	ca ef       	ldi	r28, 0xFA	; 250
     d48:	08 ee       	ldi	r16, 0xE8	; 232
     d4a:	1d ef       	ldi	r17, 0xFD	; 253
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	44 e0       	ldi	r20, 0x04	; 4
     d50:	6c 2f       	mov	r22, r28
     d52:	c8 01       	movw	r24, r16
     d54:	a9 dc       	rcall	.-1710   	; 0x6a8 <LL_ItemInit>
     d56:	bc 01       	movw	r22, r24
     d58:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     d5c:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     d60:	d1 dc       	rcall	.-1630   	; 0x704 <LL_AddBack>
     d62:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <TAIL+0x1>
     d66:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <TAIL>
     d6a:	01 50       	subi	r16, 0x01	; 1
     d6c:	11 09       	sbc	r17, r1
     d6e:	c1 50       	subi	r28, 0x01	; 1
     d70:	cb 3c       	cpi	r28, 0xCB	; 203
     d72:	61 f7       	brne	.-40     	; 0xd4c <SYS_Init+0xa8>
     d74:	05 e0       	ldi	r16, 0x05	; 5
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	45 e0       	ldi	r20, 0x05	; 5
     d7c:	6a ef       	ldi	r22, 0xFA	; 250
     d7e:	88 ee       	ldi	r24, 0xE8	; 232
     d80:	9d ef       	ldi	r25, 0xFD	; 253
     d82:	92 dc       	rcall	.-1756   	; 0x6a8 <LL_ItemInit>
     d84:	bc 01       	movw	r22, r24
     d86:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     d8a:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     d8e:	ba dc       	rcall	.-1676   	; 0x704 <LL_AddBack>
     d90:	01 50       	subi	r16, 0x01	; 1
     d92:	11 09       	sbc	r17, r1
     d94:	89 f7       	brne	.-30     	; 0xd78 <SYS_Init+0xd4>
     d96:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     d9a:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     d9e:	64 e0       	ldi	r22, 0x04	; 4
     da0:	84 81       	ldd	r24, Z+4	; 0x04
     da2:	95 81       	ldd	r25, Z+5	; 0x05
     da4:	ec dc       	rcall	.-1576   	; 0x77e <LL_UpdateClass>
     da6:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <HEAD>
     daa:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <HEAD+0x1>
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	84 81       	ldd	r24, Z+4	; 0x04
     db4:	95 81       	ldd	r25, Z+5	; 0x05
     db6:	f2 dc       	rcall	.-1564   	; 0x79c <LL_UpdateTick>
     db8:	86 e5       	ldi	r24, 0x56	; 86
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	8e d2       	rcall	.+1308   	; 0x12da <UART_SendString>
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <SYS_Pause>:
     dc6:	3f 92       	push	r3
     dc8:	4f 92       	push	r4
     dca:	5f 92       	push	r5
     dcc:	6f 92       	push	r6
     dce:	7f 92       	push	r7
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	ca 5f       	subi	r28, 0xFA	; 250
     dee:	d1 09       	sbc	r29, r1
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	f8 2e       	mov	r15, r24
     dfc:	e9 2e       	mov	r14, r25
     dfe:	f8 94       	cli
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	9f dd       	rcall	.-1218   	; 0x944 <PWM>
     e06:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <FRONT>
     e0a:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <FRONT+0x1>
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	8c e6       	ldi	r24, 0x6C	; 108
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	9f 93       	push	r25
     e18:	8f 93       	push	r24
     e1a:	ce 01       	movw	r24, r28
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	7c 01       	movw	r14, r24
     e20:	9f 93       	push	r25
     e22:	8f 93       	push	r24
     e24:	89 d3       	rcall	.+1810   	; 0x1538 <sprintf>
     e26:	c7 01       	movw	r24, r14
     e28:	58 d2       	rcall	.+1200   	; 0x12da <UART_SendString>
     e2a:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <HEAD>
     e2e:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <HEAD+0x1>
     e32:	ba dc       	rcall	.-1676   	; 0x7a8 <LL_GetTick>
     e34:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <g_Timer>
     e38:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <g_Timer+0x1>
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	3f 93       	push	r19
     e42:	2f 93       	push	r18
     e44:	87 e8       	ldi	r24, 0x87	; 135
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9f 93       	push	r25
     e4a:	8f 93       	push	r24
     e4c:	ff 92       	push	r15
     e4e:	ef 92       	push	r14
     e50:	73 d3       	rcall	.+1766   	; 0x1538 <sprintf>
     e52:	c7 01       	movw	r24, r14
     e54:	42 d2       	rcall	.+1156   	; 0x12da <UART_SendString>
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	e1 2c       	mov	r14, r1
     e62:	f1 2c       	mov	r15, r1
     e64:	0f 2e       	mov	r0, r31
     e66:	f6 ea       	ldi	r31, 0xA6	; 166
     e68:	af 2e       	mov	r10, r31
     e6a:	f1 e0       	ldi	r31, 0x01	; 1
     e6c:	bf 2e       	mov	r11, r31
     e6e:	f0 2d       	mov	r31, r0
     e70:	6e 01       	movw	r12, r28
     e72:	f7 e9       	ldi	r31, 0x97	; 151
     e74:	cf 0e       	add	r12, r31
     e76:	d1 1c       	adc	r13, r1
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <SYS_Pause+0x10e>
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	e8 1a       	sub	r14, r24
     e7e:	f8 0a       	sbc	r15, r24
     e80:	c8 01       	movw	r24, r16
     e82:	92 dc       	rcall	.-1756   	; 0x7a8 <LL_GetTick>
     e84:	68 2e       	mov	r6, r24
     e86:	59 2e       	mov	r5, r25
     e88:	c8 01       	movw	r24, r16
     e8a:	83 dc       	rcall	.-1786   	; 0x792 <LL_GetStatus>
     e8c:	78 2e       	mov	r7, r24
     e8e:	c8 01       	movw	r24, r16
     e90:	5b dc       	rcall	.-1866   	; 0x748 <LL_GetClass>
     e92:	88 2e       	mov	r8, r24
     e94:	c8 01       	movw	r24, r16
     e96:	63 dc       	rcall	.-1850   	; 0x75e <LL_GetMag>
     e98:	98 2e       	mov	r9, r24
     e9a:	c8 01       	movw	r24, r16
     e9c:	5a dc       	rcall	.-1868   	; 0x752 <LL_GetRefl>
     e9e:	5f 92       	push	r5
     ea0:	6f 92       	push	r6
     ea2:	1f 92       	push	r1
     ea4:	7f 92       	push	r7
     ea6:	1f 92       	push	r1
     ea8:	8f 92       	push	r8
     eaa:	1f 92       	push	r1
     eac:	9f 92       	push	r9
     eae:	9f 93       	push	r25
     eb0:	8f 93       	push	r24
     eb2:	ff 92       	push	r15
     eb4:	ef 92       	push	r14
     eb6:	bf 92       	push	r11
     eb8:	af 92       	push	r10
     eba:	df 92       	push	r13
     ebc:	cf 92       	push	r12
     ebe:	3c d3       	rcall	.+1656   	; 0x1538 <sprintf>
     ec0:	c6 01       	movw	r24, r12
     ec2:	0b d2       	rcall	.+1046   	; 0x12da <UART_SendString>
     ec4:	c8 01       	movw	r24, r16
     ec6:	1a dc       	rcall	.-1996   	; 0x6fc <LL_Next>
     ec8:	8c 01       	movw	r16, r24
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	c8 01       	movw	r24, r16
     ed6:	38 dc       	rcall	.-1936   	; 0x748 <LL_GetClass>
     ed8:	85 30       	cpi	r24, 0x05	; 5
     eda:	79 f6       	brne	.-98     	; 0xe7a <SYS_Pause+0xb4>
     edc:	0f 2e       	mov	r0, r31
     ede:	f2 e3       	ldi	r31, 0x32	; 50
     ee0:	cf 2e       	mov	r12, r31
     ee2:	f3 e0       	ldi	r31, 0x03	; 3
     ee4:	df 2e       	mov	r13, r31
     ee6:	f0 2d       	mov	r31, r0
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	10 e0       	ldi	r17, 0x00	; 0
     eec:	0f 2e       	mov	r0, r31
     eee:	f4 ee       	ldi	r31, 0xE4	; 228
     ef0:	af 2e       	mov	r10, r31
     ef2:	f1 e0       	ldi	r31, 0x01	; 1
     ef4:	bf 2e       	mov	r11, r31
     ef6:	f0 2d       	mov	r31, r0
     ef8:	7e 01       	movw	r14, r28
     efa:	f7 e9       	ldi	r31, 0x97	; 151
     efc:	ef 0e       	add	r14, r31
     efe:	f1 1c       	adc	r15, r1
     f00:	f6 01       	movw	r30, r12
     f02:	80 85       	ldd	r24, Z+8	; 0x08
     f04:	1f 92       	push	r1
     f06:	8f 93       	push	r24
     f08:	1f 93       	push	r17
     f0a:	0f 93       	push	r16
     f0c:	bf 92       	push	r11
     f0e:	af 92       	push	r10
     f10:	ff 92       	push	r15
     f12:	ef 92       	push	r14
     f14:	11 d3       	rcall	.+1570   	; 0x1538 <sprintf>
     f16:	c7 01       	movw	r24, r14
     f18:	e0 d1       	rcall	.+960    	; 0x12da <UART_SendString>
     f1a:	0f 5f       	subi	r16, 0xFF	; 255
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	f9 e0       	ldi	r31, 0x09	; 9
     f20:	cf 0e       	add	r12, r31
     f22:	d1 1c       	adc	r13, r1
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	07 30       	cpi	r16, 0x07	; 7
     f30:	11 05       	cpc	r17, r1
     f32:	31 f7       	brne	.-52     	; 0xf00 <SYS_Pause+0x13a>
     f34:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <STAGE2>
     f38:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <STAGE2+0x1>
     f3c:	0a dc       	rcall	.-2028   	; 0x752 <LL_GetRefl>
     f3e:	48 2e       	mov	r4, r24
     f40:	39 2e       	mov	r3, r25
     f42:	60 90 7a 03 	lds	r6, 0x037A	; 0x80037a <STAGE2>
     f46:	50 90 7b 03 	lds	r5, 0x037B	; 0x80037b <STAGE2+0x1>
     f4a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <STAGE1>
     f4e:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <STAGE1+0x1>
     f52:	05 dc       	rcall	.-2038   	; 0x75e <LL_GetMag>
     f54:	78 2e       	mov	r7, r24
     f56:	90 90 30 03 	lds	r9, 0x0330	; 0x800330 <STAGE1>
     f5a:	80 90 31 03 	lds	r8, 0x0331	; 0x800331 <STAGE1+0x1>
     f5e:	00 91 10 03 	lds	r16, 0x0310	; 0x800310 <TAIL>
     f62:	10 91 11 03 	lds	r17, 0x0311	; 0x800311 <TAIL+0x1>
     f66:	f8 01       	movw	r30, r16
     f68:	b2 80       	ldd	r11, Z+2	; 0x02
     f6a:	a3 80       	ldd	r10, Z+3	; 0x03
     f6c:	d0 90 0e 03 	lds	r13, 0x030E	; 0x80030e <FRONT>
     f70:	c0 90 0f 03 	lds	r12, 0x030F	; 0x80030f <FRONT+0x1>
     f74:	f0 90 0c 03 	lds	r15, 0x030C	; 0x80030c <HEAD>
     f78:	e0 90 0d 03 	lds	r14, 0x030D	; 0x80030d <HEAD+0x1>
     f7c:	8f 2d       	mov	r24, r15
     f7e:	9e 2d       	mov	r25, r14
     f80:	d2 db       	rcall	.-2140   	; 0x726 <LL_Size>
     f82:	3f 92       	push	r3
     f84:	4f 92       	push	r4
     f86:	5f 92       	push	r5
     f88:	6f 92       	push	r6
     f8a:	1f 92       	push	r1
     f8c:	7f 92       	push	r7
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	1f 93       	push	r17
     f9c:	0f 93       	push	r16
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	1f 92       	push	r1
     fa4:	8f 93       	push	r24
     fa6:	8b ef       	ldi	r24, 0xFB	; 251
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	8e 01       	movw	r16, r28
     fb0:	0b 59       	subi	r16, 0x9B	; 155
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	1f 93       	push	r17
     fb6:	0f 93       	push	r16
     fb8:	bf d2       	rcall	.+1406   	; 0x1538 <sprintf>
     fba:	c8 01       	movw	r24, r16
     fbc:	8e d1       	rcall	.+796    	; 0x12da <UART_SendString>
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	89 b1       	in	r24, 0x09	; 9
     fca:	83 70       	andi	r24, 0x03	; 3
     fcc:	e9 f7       	brne	.-6      	; 0xfc8 <SYS_Pause+0x202>
     fce:	84 e2       	ldi	r24, 0x24	; 36
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	83 d1       	rcall	.+774    	; 0x12da <UART_SendString>
     fd4:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <g_PauseRequest>
     fd8:	80 e8       	ldi	r24, 0x80	; 128
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	b3 dc       	rcall	.-1690   	; 0x944 <PWM>
     fde:	78 94       	sei
     fe0:	c6 50       	subi	r28, 0x06	; 6
     fe2:	df 4f       	sbci	r29, 0xFF	; 255
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	7f 90       	pop	r7
    1008:	6f 90       	pop	r6
    100a:	5f 90       	pop	r5
    100c:	4f 90       	pop	r4
    100e:	3f 90       	pop	r3
    1010:	08 95       	ret

00001012 <SYS_Rampdown>:

void SYS_Rampdown()
{
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	e8 97       	sbiw	r28, 0x38	; 56
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    102c:	fe 01       	movw	r30, r28
    102e:	31 96       	adiw	r30, 0x01	; 1
    1030:	86 e0       	ldi	r24, 0x06	; 6
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
    103a:	00 91 0e 03 	lds	r16, 0x030E	; 0x80030e <FRONT>
    103e:	10 91 0f 03 	lds	r17, 0x030F	; 0x80030f <FRONT+0x1>
	
	cli();
    1042:	f8 94       	cli
	PORTD = 0;
    1044:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    1046:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	7b dc       	rcall	.-1802   	; 0x944 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    104e:	81 e8       	ldi	r24, 0x81	; 129
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	43 d1       	rcall	.+646    	; 0x12da <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    1054:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    1058:	f3 94       	inc	r15
    105a:	c8 01       	movw	r24, r16
    105c:	75 db       	rcall	.-2326   	; 0x748 <LL_GetClass>
    105e:	e1 e0       	ldi	r30, 0x01	; 1
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	ec 0f       	add	r30, r28
    1064:	fd 1f       	adc	r31, r29
    1066:	e8 0f       	add	r30, r24
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    106e:	80 83       	st	Z, r24
    1070:	c8 01       	movw	r24, r16
    1072:	44 db       	rcall	.-2424   	; 0x6fc <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1074:	8c 01       	movw	r16, r24
    1076:	c8 01       	movw	r24, r16
    1078:	8c db       	rcall	.-2280   	; 0x792 <LL_GetStatus>
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	69 f3       	breq	.-38     	; 0x1058 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	1f 92       	push	r1
    1082:	8f 93       	push	r24
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	1f 92       	push	r1
    1088:	8f 93       	push	r24
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	1f 92       	push	r1
    108e:	8f 93       	push	r24
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	1f 92       	push	r1
    1094:	8f 93       	push	r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	1f 92       	push	r1
    109a:	8f 93       	push	r24
    109c:	1f 92       	push	r1
    109e:	ff 92       	push	r15
    10a0:	86 ea       	ldi	r24, 0xA6	; 166
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	8e 01       	movw	r16, r28
    10aa:	09 5f       	subi	r16, 0xF9	; 249
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	1f 93       	push	r17
    10b0:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    10b2:	42 d2       	rcall	.+1156   	; 0x1538 <sprintf>
    10b4:	c8 01       	movw	r24, r16
    10b6:	11 d1       	rcall	.+546    	; 0x12da <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	e8 96       	adiw	r28, 0x38	; 56
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	08 95       	ret

000010da <__vector_17>:
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	0b b6       	in	r0, 0x3b	; 59
    10e6:	0f 92       	push	r0
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    1108:	ef 93       	push	r30
    110a:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    110c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_timer_tick>
    1110:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_timer_tick+0x1>
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <_timer_tick+0x1>
    111a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_timer_tick>
    111e:	c2 e3       	ldi	r28, 0x32	; 50
    1120:	d3 e0       	ldi	r29, 0x03	; 3
    1122:	0f 2e       	mov	r0, r31
    1124:	fa e7       	ldi	r31, 0x7A	; 122
    1126:	ef 2e       	mov	r14, r31
    1128:	f3 e0       	ldi	r31, 0x03	; 3
    112a:	ff 2e       	mov	r15, r31
    112c:	f0 2d       	mov	r31, r0
    112e:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    1130:	ec 81       	ldd	r30, Y+4	; 0x04
    1132:	fd 81       	ldd	r31, Y+5	; 0x05
    1134:	30 97       	sbiw	r30, 0x00	; 0
    1136:	09 f1       	breq	.+66     	; 0x117a <__vector_17+0xa0>
    1138:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_timer_tick>
    113c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_timer_tick+0x1>
    1140:	28 81       	ld	r18, Y
    1142:	39 81       	ldd	r19, Y+1	; 0x01
    1144:	28 17       	cp	r18, r24
    1146:	39 07       	cpc	r19, r25
    1148:	c1 f4       	brne	.+48     	; 0x117a <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    114a:	88 85       	ldd	r24, Y+8	; 0x08
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	19 f4       	brne	.+6      	; 0x1156 <__vector_17+0x7c>
    1150:	8e 81       	ldd	r24, Y+6	; 0x06
    1152:	9f 81       	ldd	r25, Y+7	; 0x07
    1154:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1156:	d8 01       	movw	r26, r16
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	13 97       	sbiw	r26, 0x03	; 3
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	41 f0       	breq	.+16     	; 0x1174 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    1164:	2d 91       	ld	r18, X+
    1166:	3c 91       	ld	r19, X
    1168:	11 97       	sbiw	r26, 0x01	; 1
    116a:	82 0f       	add	r24, r18
    116c:	93 1f       	adc	r25, r19
    116e:	8d 93       	st	X+, r24
    1170:	9c 93       	st	X, r25
    1172:	03 c0       	rjmp	.+6      	; 0x117a <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    1174:	f8 01       	movw	r30, r16
    1176:	15 82       	std	Z+5, r1	; 0x05
    1178:	14 82       	std	Z+4, r1	; 0x04
    117a:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    117c:	ce 15       	cp	r28, r14
    117e:	df 05       	cpc	r29, r15
    1180:	b1 f6       	brne	.-84     	; 0x112e <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	0f 90       	pop	r0
    11a8:	0b be       	out	0x3b, r0	; 59
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    11b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    11bc:	88 e4       	ldi	r24, 0x48	; 72
    11be:	98 e0       	ldi	r25, 0x08	; 8
    11c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    11c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    11c8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    11cc:	89 e0       	ldi	r24, 0x09	; 9
    11ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    11d8:	88 e4       	ldi	r24, 0x48	; 72
    11da:	e2 e3       	ldi	r30, 0x32	; 50
    11dc:	f3 e0       	ldi	r31, 0x03	; 3
    11de:	df 01       	movw	r26, r30
    11e0:	1d 92       	st	X+, r1
    11e2:	8a 95       	dec	r24
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <TIMER_Init+0x2c>
    11e6:	08 95       	ret

000011e8 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    11f2:	60 91 36 03 	lds	r22, 0x0336	; 0x800336 <_timer+0x4>
    11f6:	70 91 37 03 	lds	r23, 0x0337	; 0x800337 <_timer+0x5>
    11fa:	67 2b       	or	r22, r23
    11fc:	09 f4       	brne	.+2      	; 0x1200 <TIMER_Create+0x18>
    11fe:	49 c0       	rjmp	.+146    	; 0x1292 <TIMER_Create+0xaa>
    1200:	e2 e3       	ldi	r30, 0x32	; 50
    1202:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1204:	a1 e0       	ldi	r26, 0x01	; 1
    1206:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1208:	c5 85       	ldd	r28, Z+13	; 0x0d
    120a:	d6 85       	ldd	r29, Z+14	; 0x0e
    120c:	cd 2b       	or	r28, r29
    120e:	09 f4       	brne	.+2      	; 0x1212 <TIMER_Create+0x2a>
    1210:	42 c0       	rjmp	.+132    	; 0x1296 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1212:	11 96       	adiw	r26, 0x01	; 1
    1214:	39 96       	adiw	r30, 0x09	; 9
    1216:	a8 30       	cpi	r26, 0x08	; 8
    1218:	b1 05       	cpc	r27, r1
    121a:	b1 f7       	brne	.-20     	; 0x1208 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1222:	fd 01       	movw	r30, r26
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	ea 0f       	add	r30, r26
    1232:	fb 1f       	adc	r31, r27
    1234:	ee 5c       	subi	r30, 0xCE	; 206
    1236:	fc 4f       	sbci	r31, 0xFC	; 252
    1238:	93 83       	std	Z+3, r25	; 0x03
    123a:	82 83       	std	Z+2, r24	; 0x02
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    123e:	fd 01       	movw	r30, r26
    1240:	ee 0f       	add	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ea 0f       	add	r30, r26
    124e:	fb 1f       	adc	r31, r27
    1250:	ee 5c       	subi	r30, 0xCE	; 206
    1252:	fc 4f       	sbci	r31, 0xFC	; 252
    1254:	13 82       	std	Z+3, r1	; 0x03
    1256:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1258:	fd 01       	movw	r30, r26
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ea 0f       	add	r30, r26
    1268:	fb 1f       	adc	r31, r27
    126a:	ee 5c       	subi	r30, 0xCE	; 206
    126c:	fc 4f       	sbci	r31, 0xFC	; 252
    126e:	55 83       	std	Z+5, r21	; 0x05
    1270:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    1272:	37 83       	std	Z+7, r19	; 0x07
    1274:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    1276:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <_timer_tick>
    127a:	30 91 0b 03 	lds	r19, 0x030B	; 0x80030b <_timer_tick+0x1>
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
			_timer[i].state = READY;
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    128a:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    128c:	8a 2f       	mov	r24, r26
    128e:	9b 2f       	mov	r25, r27
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    1296:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1298:	f8 94       	cli
		{
			if (periodic != 0) 
    129a:	01 2b       	or	r16, r17
    129c:	11 f6       	brne	.-124    	; 0x1222 <TIMER_Create+0x3a>
    129e:	cf cf       	rjmp	.-98     	; 0x123e <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    12aa:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    12ae:	83 e3       	ldi	r24, 0x33	; 51
    12b0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    12b4:	e9 ec       	ldi	r30, 0xC9	; 201
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 61       	ori	r24, 0x18	; 24
    12bc:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    12be:	ea ec       	ldi	r30, 0xCA	; 202
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	86 60       	ori	r24, 0x06	; 6
    12c6:	80 83       	st	Z, r24
    12c8:	08 95       	ret

000012ca <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    12ca:	e8 ec       	ldi	r30, 0xC8	; 200
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	90 81       	ld	r25, Z
    12d0:	95 ff       	sbrs	r25, 5
    12d2:	fd cf       	rjmp	.-6      	; 0x12ce <UART_SendChar+0x4>
	UDR1 = c;
    12d4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    12d8:	08 95       	ret

000012da <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    12e0:	88 81       	ld	r24, Y
    12e2:	88 23       	and	r24, r24
    12e4:	29 f0       	breq	.+10     	; 0x12f0 <UART_SendString+0x16>
    12e6:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    12e8:	f0 df       	rcall	.-32     	; 0x12ca <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    12ea:	89 91       	ld	r24, Y+
    12ec:	81 11       	cpse	r24, r1
    12ee:	fc cf       	rjmp	.-8      	; 0x12e8 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <malloc>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	10 f4       	brcc	.+4      	; 0x1308 <malloc+0x12>
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <__flp>
    130c:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <__flp+0x1>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	30 97       	sbiw	r30, 0x00	; 0
    131a:	19 f1       	breq	.+70     	; 0x1362 <malloc+0x6c>
    131c:	40 81       	ld	r20, Z
    131e:	51 81       	ldd	r21, Z+1	; 0x01
    1320:	02 81       	ldd	r16, Z+2	; 0x02
    1322:	13 81       	ldd	r17, Z+3	; 0x03
    1324:	48 17       	cp	r20, r24
    1326:	59 07       	cpc	r21, r25
    1328:	c8 f0       	brcs	.+50     	; 0x135c <malloc+0x66>
    132a:	84 17       	cp	r24, r20
    132c:	95 07       	cpc	r25, r21
    132e:	69 f4       	brne	.+26     	; 0x134a <malloc+0x54>
    1330:	10 97       	sbiw	r26, 0x00	; 0
    1332:	31 f0       	breq	.+12     	; 0x1340 <malloc+0x4a>
    1334:	12 96       	adiw	r26, 0x02	; 2
    1336:	0c 93       	st	X, r16
    1338:	12 97       	sbiw	r26, 0x02	; 2
    133a:	13 96       	adiw	r26, 0x03	; 3
    133c:	1c 93       	st	X, r17
    133e:	27 c0       	rjmp	.+78     	; 0x138e <malloc+0x98>
    1340:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <__flp>
    1344:	10 93 92 03 	sts	0x0392, r17	; 0x800392 <__flp+0x1>
    1348:	22 c0       	rjmp	.+68     	; 0x138e <malloc+0x98>
    134a:	21 15       	cp	r18, r1
    134c:	31 05       	cpc	r19, r1
    134e:	19 f0       	breq	.+6      	; 0x1356 <malloc+0x60>
    1350:	42 17       	cp	r20, r18
    1352:	53 07       	cpc	r21, r19
    1354:	18 f4       	brcc	.+6      	; 0x135c <malloc+0x66>
    1356:	9a 01       	movw	r18, r20
    1358:	bd 01       	movw	r22, r26
    135a:	ef 01       	movw	r28, r30
    135c:	df 01       	movw	r26, r30
    135e:	f8 01       	movw	r30, r16
    1360:	db cf       	rjmp	.-74     	; 0x1318 <malloc+0x22>
    1362:	21 15       	cp	r18, r1
    1364:	31 05       	cpc	r19, r1
    1366:	f9 f0       	breq	.+62     	; 0x13a6 <malloc+0xb0>
    1368:	28 1b       	sub	r18, r24
    136a:	39 0b       	sbc	r19, r25
    136c:	24 30       	cpi	r18, 0x04	; 4
    136e:	31 05       	cpc	r19, r1
    1370:	80 f4       	brcc	.+32     	; 0x1392 <malloc+0x9c>
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	61 15       	cp	r22, r1
    1378:	71 05       	cpc	r23, r1
    137a:	21 f0       	breq	.+8      	; 0x1384 <malloc+0x8e>
    137c:	fb 01       	movw	r30, r22
    137e:	93 83       	std	Z+3, r25	; 0x03
    1380:	82 83       	std	Z+2, r24	; 0x02
    1382:	04 c0       	rjmp	.+8      	; 0x138c <malloc+0x96>
    1384:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <__flp+0x1>
    1388:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <__flp>
    138c:	fe 01       	movw	r30, r28
    138e:	32 96       	adiw	r30, 0x02	; 2
    1390:	44 c0       	rjmp	.+136    	; 0x141a <malloc+0x124>
    1392:	fe 01       	movw	r30, r28
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	81 93       	st	Z+, r24
    139a:	91 93       	st	Z+, r25
    139c:	22 50       	subi	r18, 0x02	; 2
    139e:	31 09       	sbc	r19, r1
    13a0:	39 83       	std	Y+1, r19	; 0x01
    13a2:	28 83       	st	Y, r18
    13a4:	3a c0       	rjmp	.+116    	; 0x141a <malloc+0x124>
    13a6:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    13aa:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    13ae:	23 2b       	or	r18, r19
    13b0:	41 f4       	brne	.+16     	; 0x13c2 <malloc+0xcc>
    13b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13ba:	30 93 90 03 	sts	0x0390, r19	; 0x800390 <__brkval+0x1>
    13be:	20 93 8f 03 	sts	0x038F, r18	; 0x80038f <__brkval>
    13c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	41 f4       	brne	.+16     	; 0x13e0 <malloc+0xea>
    13d0:	2d b7       	in	r18, 0x3d	; 61
    13d2:	3e b7       	in	r19, 0x3e	; 62
    13d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13dc:	24 1b       	sub	r18, r20
    13de:	35 0b       	sbc	r19, r21
    13e0:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <__brkval>
    13e4:	f0 91 90 03 	lds	r31, 0x0390	; 0x800390 <__brkval+0x1>
    13e8:	e2 17       	cp	r30, r18
    13ea:	f3 07       	cpc	r31, r19
    13ec:	a0 f4       	brcc	.+40     	; 0x1416 <malloc+0x120>
    13ee:	2e 1b       	sub	r18, r30
    13f0:	3f 0b       	sbc	r19, r31
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	78 f0       	brcs	.+30     	; 0x1416 <malloc+0x120>
    13f8:	ac 01       	movw	r20, r24
    13fa:	4e 5f       	subi	r20, 0xFE	; 254
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	24 17       	cp	r18, r20
    1400:	35 07       	cpc	r19, r21
    1402:	48 f0       	brcs	.+18     	; 0x1416 <malloc+0x120>
    1404:	4e 0f       	add	r20, r30
    1406:	5f 1f       	adc	r21, r31
    1408:	50 93 90 03 	sts	0x0390, r21	; 0x800390 <__brkval+0x1>
    140c:	40 93 8f 03 	sts	0x038F, r20	; 0x80038f <__brkval>
    1410:	81 93       	st	Z+, r24
    1412:	91 93       	st	Z+, r25
    1414:	02 c0       	rjmp	.+4      	; 0x141a <malloc+0x124>
    1416:	e0 e0       	ldi	r30, 0x00	; 0
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	cf 01       	movw	r24, r30
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	08 95       	ret

00001426 <free>:
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	09 f4       	brne	.+2      	; 0x1430 <free+0xa>
    142e:	81 c0       	rjmp	.+258    	; 0x1532 <free+0x10c>
    1430:	fc 01       	movw	r30, r24
    1432:	32 97       	sbiw	r30, 0x02	; 2
    1434:	13 82       	std	Z+3, r1	; 0x03
    1436:	12 82       	std	Z+2, r1	; 0x02
    1438:	a0 91 91 03 	lds	r26, 0x0391	; 0x800391 <__flp>
    143c:	b0 91 92 03 	lds	r27, 0x0392	; 0x800392 <__flp+0x1>
    1440:	10 97       	sbiw	r26, 0x00	; 0
    1442:	81 f4       	brne	.+32     	; 0x1464 <free+0x3e>
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    1450:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	51 f5       	brne	.+84     	; 0x14ae <free+0x88>
    145a:	f0 93 90 03 	sts	0x0390, r31	; 0x800390 <__brkval+0x1>
    145e:	e0 93 8f 03 	sts	0x038F, r30	; 0x80038f <__brkval>
    1462:	67 c0       	rjmp	.+206    	; 0x1532 <free+0x10c>
    1464:	ed 01       	movw	r28, r26
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	ce 17       	cp	r28, r30
    146c:	df 07       	cpc	r29, r31
    146e:	40 f4       	brcc	.+16     	; 0x1480 <free+0x5a>
    1470:	4a 81       	ldd	r20, Y+2	; 0x02
    1472:	5b 81       	ldd	r21, Y+3	; 0x03
    1474:	9e 01       	movw	r18, r28
    1476:	41 15       	cp	r20, r1
    1478:	51 05       	cpc	r21, r1
    147a:	f1 f0       	breq	.+60     	; 0x14b8 <free+0x92>
    147c:	ea 01       	movw	r28, r20
    147e:	f5 cf       	rjmp	.-22     	; 0x146a <free+0x44>
    1480:	d3 83       	std	Z+3, r29	; 0x03
    1482:	c2 83       	std	Z+2, r28	; 0x02
    1484:	40 81       	ld	r20, Z
    1486:	51 81       	ldd	r21, Z+1	; 0x01
    1488:	84 0f       	add	r24, r20
    148a:	95 1f       	adc	r25, r21
    148c:	c8 17       	cp	r28, r24
    148e:	d9 07       	cpc	r29, r25
    1490:	59 f4       	brne	.+22     	; 0x14a8 <free+0x82>
    1492:	88 81       	ld	r24, Y
    1494:	99 81       	ldd	r25, Y+1	; 0x01
    1496:	84 0f       	add	r24, r20
    1498:	95 1f       	adc	r25, r21
    149a:	02 96       	adiw	r24, 0x02	; 2
    149c:	91 83       	std	Z+1, r25	; 0x01
    149e:	80 83       	st	Z, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	9b 81       	ldd	r25, Y+3	; 0x03
    14a4:	93 83       	std	Z+3, r25	; 0x03
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <free+0x92>
    14ae:	f0 93 92 03 	sts	0x0392, r31	; 0x800392 <__flp+0x1>
    14b2:	e0 93 91 03 	sts	0x0391, r30	; 0x800391 <__flp>
    14b6:	3d c0       	rjmp	.+122    	; 0x1532 <free+0x10c>
    14b8:	e9 01       	movw	r28, r18
    14ba:	fb 83       	std	Y+3, r31	; 0x03
    14bc:	ea 83       	std	Y+2, r30	; 0x02
    14be:	49 91       	ld	r20, Y+
    14c0:	59 91       	ld	r21, Y+
    14c2:	c4 0f       	add	r28, r20
    14c4:	d5 1f       	adc	r29, r21
    14c6:	ec 17       	cp	r30, r28
    14c8:	fd 07       	cpc	r31, r29
    14ca:	61 f4       	brne	.+24     	; 0x14e4 <free+0xbe>
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	84 0f       	add	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	e9 01       	movw	r28, r18
    14d8:	99 83       	std	Y+1, r25	; 0x01
    14da:	88 83       	st	Y, r24
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	9b 83       	std	Y+3, r25	; 0x03
    14e2:	8a 83       	std	Y+2, r24	; 0x02
    14e4:	e0 e0       	ldi	r30, 0x00	; 0
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	12 96       	adiw	r26, 0x02	; 2
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	19 f0       	breq	.+6      	; 0x14fa <free+0xd4>
    14f4:	fd 01       	movw	r30, r26
    14f6:	dc 01       	movw	r26, r24
    14f8:	f7 cf       	rjmp	.-18     	; 0x14e8 <free+0xc2>
    14fa:	8d 91       	ld	r24, X+
    14fc:	9c 91       	ld	r25, X
    14fe:	11 97       	sbiw	r26, 0x01	; 1
    1500:	9d 01       	movw	r18, r26
    1502:	2e 5f       	subi	r18, 0xFE	; 254
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	20 91 8f 03 	lds	r18, 0x038F	; 0x80038f <__brkval>
    150e:	30 91 90 03 	lds	r19, 0x0390	; 0x800390 <__brkval+0x1>
    1512:	28 17       	cp	r18, r24
    1514:	39 07       	cpc	r19, r25
    1516:	69 f4       	brne	.+26     	; 0x1532 <free+0x10c>
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	29 f4       	brne	.+10     	; 0x1526 <free+0x100>
    151c:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <__flp+0x1>
    1520:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <__flp>
    1524:	02 c0       	rjmp	.+4      	; 0x152a <free+0x104>
    1526:	13 82       	std	Z+3, r1	; 0x03
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	b0 93 90 03 	sts	0x0390, r27	; 0x800390 <__brkval+0x1>
    152e:	a0 93 8f 03 	sts	0x038F, r26	; 0x80038f <__brkval>
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <sprintf>:
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	2e 97       	sbiw	r28, 0x0e	; 14
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	0d 89       	ldd	r16, Y+21	; 0x15
    1552:	1e 89       	ldd	r17, Y+22	; 0x16
    1554:	86 e0       	ldi	r24, 0x06	; 6
    1556:	8c 83       	std	Y+4, r24	; 0x04
    1558:	1a 83       	std	Y+2, r17	; 0x02
    155a:	09 83       	std	Y+1, r16	; 0x01
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f e7       	ldi	r25, 0x7F	; 127
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	ae 01       	movw	r20, r28
    1566:	47 5e       	subi	r20, 0xE7	; 231
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	6f 89       	ldd	r22, Y+23	; 0x17
    156c:	78 8d       	ldd	r23, Y+24	; 0x18
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	10 d0       	rcall	.+32     	; 0x1594 <vfprintf>
    1574:	ef 81       	ldd	r30, Y+7	; 0x07
    1576:	f8 85       	ldd	r31, Y+8	; 0x08
    1578:	e0 0f       	add	r30, r16
    157a:	f1 1f       	adc	r31, r17
    157c:	10 82       	st	Z, r1
    157e:	2e 96       	adiw	r28, 0x0e	; 14
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	cd bf       	out	0x3d, r28	; 61
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <vfprintf>:
    1594:	2f 92       	push	r2
    1596:	3f 92       	push	r3
    1598:	4f 92       	push	r4
    159a:	5f 92       	push	r5
    159c:	6f 92       	push	r6
    159e:	7f 92       	push	r7
    15a0:	8f 92       	push	r8
    15a2:	9f 92       	push	r9
    15a4:	af 92       	push	r10
    15a6:	bf 92       	push	r11
    15a8:	cf 92       	push	r12
    15aa:	df 92       	push	r13
    15ac:	ef 92       	push	r14
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	2b 97       	sbiw	r28, 0x0b	; 11
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	6c 01       	movw	r12, r24
    15ca:	7b 01       	movw	r14, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	fc 01       	movw	r30, r24
    15d0:	17 82       	std	Z+7, r1	; 0x07
    15d2:	16 82       	std	Z+6, r1	; 0x06
    15d4:	83 81       	ldd	r24, Z+3	; 0x03
    15d6:	81 ff       	sbrs	r24, 1
    15d8:	bf c1       	rjmp	.+894    	; 0x1958 <vfprintf+0x3c4>
    15da:	ce 01       	movw	r24, r28
    15dc:	01 96       	adiw	r24, 0x01	; 1
    15de:	3c 01       	movw	r6, r24
    15e0:	f6 01       	movw	r30, r12
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	f7 01       	movw	r30, r14
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	7f 01       	movw	r14, r30
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <vfprintf+0x62>
    15f4:	ad c1       	rjmp	.+858    	; 0x1950 <vfprintf+0x3bc>
    15f6:	85 32       	cpi	r24, 0x25	; 37
    15f8:	39 f4       	brne	.+14     	; 0x1608 <vfprintf+0x74>
    15fa:	93 fd       	sbrc	r25, 3
    15fc:	85 91       	lpm	r24, Z+
    15fe:	93 ff       	sbrs	r25, 3
    1600:	81 91       	ld	r24, Z+
    1602:	7f 01       	movw	r14, r30
    1604:	85 32       	cpi	r24, 0x25	; 37
    1606:	21 f4       	brne	.+8      	; 0x1610 <vfprintf+0x7c>
    1608:	b6 01       	movw	r22, r12
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	d6 d1       	rcall	.+940    	; 0x19ba <fputc>
    160e:	e8 cf       	rjmp	.-48     	; 0x15e0 <vfprintf+0x4c>
    1610:	91 2c       	mov	r9, r1
    1612:	21 2c       	mov	r2, r1
    1614:	31 2c       	mov	r3, r1
    1616:	ff e1       	ldi	r31, 0x1F	; 31
    1618:	f3 15       	cp	r31, r3
    161a:	d8 f0       	brcs	.+54     	; 0x1652 <vfprintf+0xbe>
    161c:	8b 32       	cpi	r24, 0x2B	; 43
    161e:	79 f0       	breq	.+30     	; 0x163e <vfprintf+0xaa>
    1620:	38 f4       	brcc	.+14     	; 0x1630 <vfprintf+0x9c>
    1622:	80 32       	cpi	r24, 0x20	; 32
    1624:	79 f0       	breq	.+30     	; 0x1644 <vfprintf+0xb0>
    1626:	83 32       	cpi	r24, 0x23	; 35
    1628:	a1 f4       	brne	.+40     	; 0x1652 <vfprintf+0xbe>
    162a:	23 2d       	mov	r18, r3
    162c:	20 61       	ori	r18, 0x10	; 16
    162e:	1d c0       	rjmp	.+58     	; 0x166a <vfprintf+0xd6>
    1630:	8d 32       	cpi	r24, 0x2D	; 45
    1632:	61 f0       	breq	.+24     	; 0x164c <vfprintf+0xb8>
    1634:	80 33       	cpi	r24, 0x30	; 48
    1636:	69 f4       	brne	.+26     	; 0x1652 <vfprintf+0xbe>
    1638:	23 2d       	mov	r18, r3
    163a:	21 60       	ori	r18, 0x01	; 1
    163c:	16 c0       	rjmp	.+44     	; 0x166a <vfprintf+0xd6>
    163e:	83 2d       	mov	r24, r3
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	38 2e       	mov	r3, r24
    1644:	e3 2d       	mov	r30, r3
    1646:	e4 60       	ori	r30, 0x04	; 4
    1648:	3e 2e       	mov	r3, r30
    164a:	2a c0       	rjmp	.+84     	; 0x16a0 <vfprintf+0x10c>
    164c:	f3 2d       	mov	r31, r3
    164e:	f8 60       	ori	r31, 0x08	; 8
    1650:	1d c0       	rjmp	.+58     	; 0x168c <vfprintf+0xf8>
    1652:	37 fc       	sbrc	r3, 7
    1654:	2d c0       	rjmp	.+90     	; 0x16b0 <vfprintf+0x11c>
    1656:	20 ed       	ldi	r18, 0xD0	; 208
    1658:	28 0f       	add	r18, r24
    165a:	2a 30       	cpi	r18, 0x0A	; 10
    165c:	40 f0       	brcs	.+16     	; 0x166e <vfprintf+0xda>
    165e:	8e 32       	cpi	r24, 0x2E	; 46
    1660:	b9 f4       	brne	.+46     	; 0x1690 <vfprintf+0xfc>
    1662:	36 fc       	sbrc	r3, 6
    1664:	75 c1       	rjmp	.+746    	; 0x1950 <vfprintf+0x3bc>
    1666:	23 2d       	mov	r18, r3
    1668:	20 64       	ori	r18, 0x40	; 64
    166a:	32 2e       	mov	r3, r18
    166c:	19 c0       	rjmp	.+50     	; 0x16a0 <vfprintf+0x10c>
    166e:	36 fe       	sbrs	r3, 6
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0xea>
    1672:	8a e0       	ldi	r24, 0x0A	; 10
    1674:	98 9e       	mul	r9, r24
    1676:	20 0d       	add	r18, r0
    1678:	11 24       	eor	r1, r1
    167a:	92 2e       	mov	r9, r18
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <vfprintf+0x10c>
    167e:	ea e0       	ldi	r30, 0x0A	; 10
    1680:	2e 9e       	mul	r2, r30
    1682:	20 0d       	add	r18, r0
    1684:	11 24       	eor	r1, r1
    1686:	22 2e       	mov	r2, r18
    1688:	f3 2d       	mov	r31, r3
    168a:	f0 62       	ori	r31, 0x20	; 32
    168c:	3f 2e       	mov	r3, r31
    168e:	08 c0       	rjmp	.+16     	; 0x16a0 <vfprintf+0x10c>
    1690:	8c 36       	cpi	r24, 0x6C	; 108
    1692:	21 f4       	brne	.+8      	; 0x169c <vfprintf+0x108>
    1694:	83 2d       	mov	r24, r3
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	38 2e       	mov	r3, r24
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x10c>
    169c:	88 36       	cpi	r24, 0x68	; 104
    169e:	41 f4       	brne	.+16     	; 0x16b0 <vfprintf+0x11c>
    16a0:	f7 01       	movw	r30, r14
    16a2:	93 fd       	sbrc	r25, 3
    16a4:	85 91       	lpm	r24, Z+
    16a6:	93 ff       	sbrs	r25, 3
    16a8:	81 91       	ld	r24, Z+
    16aa:	7f 01       	movw	r14, r30
    16ac:	81 11       	cpse	r24, r1
    16ae:	b3 cf       	rjmp	.-154    	; 0x1616 <vfprintf+0x82>
    16b0:	98 2f       	mov	r25, r24
    16b2:	9f 7d       	andi	r25, 0xDF	; 223
    16b4:	95 54       	subi	r25, 0x45	; 69
    16b6:	93 30       	cpi	r25, 0x03	; 3
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <vfprintf+0x130>
    16ba:	0c 5f       	subi	r16, 0xFC	; 252
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	9f e3       	ldi	r25, 0x3F	; 63
    16c0:	99 83       	std	Y+1, r25	; 0x01
    16c2:	0d c0       	rjmp	.+26     	; 0x16de <vfprintf+0x14a>
    16c4:	83 36       	cpi	r24, 0x63	; 99
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <vfprintf+0x140>
    16c8:	83 37       	cpi	r24, 0x73	; 115
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <vfprintf+0x154>
    16cc:	83 35       	cpi	r24, 0x53	; 83
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <vfprintf+0x13e>
    16d0:	55 c0       	rjmp	.+170    	; 0x177c <vfprintf+0x1e8>
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <vfprintf+0x180>
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 81       	ld	r24, Z
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	88 24       	eor	r8, r8
    16e0:	83 94       	inc	r8
    16e2:	91 2c       	mov	r9, r1
    16e4:	53 01       	movw	r10, r6
    16e6:	12 c0       	rjmp	.+36     	; 0x170c <vfprintf+0x178>
    16e8:	28 01       	movw	r4, r16
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	4f 0e       	add	r4, r31
    16ee:	51 1c       	adc	r5, r1
    16f0:	f8 01       	movw	r30, r16
    16f2:	a0 80       	ld	r10, Z
    16f4:	b1 80       	ldd	r11, Z+1	; 0x01
    16f6:	36 fe       	sbrs	r3, 6
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x16c>
    16fa:	69 2d       	mov	r22, r9
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x170>
    1700:	6f ef       	ldi	r22, 0xFF	; 255
    1702:	7f ef       	ldi	r23, 0xFF	; 255
    1704:	c5 01       	movw	r24, r10
    1706:	4e d1       	rcall	.+668    	; 0x19a4 <strnlen>
    1708:	4c 01       	movw	r8, r24
    170a:	82 01       	movw	r16, r4
    170c:	f3 2d       	mov	r31, r3
    170e:	ff 77       	andi	r31, 0x7F	; 127
    1710:	3f 2e       	mov	r3, r31
    1712:	15 c0       	rjmp	.+42     	; 0x173e <vfprintf+0x1aa>
    1714:	28 01       	movw	r4, r16
    1716:	22 e0       	ldi	r18, 0x02	; 2
    1718:	42 0e       	add	r4, r18
    171a:	51 1c       	adc	r5, r1
    171c:	f8 01       	movw	r30, r16
    171e:	a0 80       	ld	r10, Z
    1720:	b1 80       	ldd	r11, Z+1	; 0x01
    1722:	36 fe       	sbrs	r3, 6
    1724:	03 c0       	rjmp	.+6      	; 0x172c <vfprintf+0x198>
    1726:	69 2d       	mov	r22, r9
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <vfprintf+0x19c>
    172c:	6f ef       	ldi	r22, 0xFF	; 255
    172e:	7f ef       	ldi	r23, 0xFF	; 255
    1730:	c5 01       	movw	r24, r10
    1732:	2d d1       	rcall	.+602    	; 0x198e <strnlen_P>
    1734:	4c 01       	movw	r8, r24
    1736:	f3 2d       	mov	r31, r3
    1738:	f0 68       	ori	r31, 0x80	; 128
    173a:	3f 2e       	mov	r3, r31
    173c:	82 01       	movw	r16, r4
    173e:	33 fc       	sbrc	r3, 3
    1740:	19 c0       	rjmp	.+50     	; 0x1774 <vfprintf+0x1e0>
    1742:	82 2d       	mov	r24, r2
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 16       	cp	r8, r24
    1748:	99 06       	cpc	r9, r25
    174a:	a0 f4       	brcc	.+40     	; 0x1774 <vfprintf+0x1e0>
    174c:	b6 01       	movw	r22, r12
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	33 d1       	rcall	.+614    	; 0x19ba <fputc>
    1754:	2a 94       	dec	r2
    1756:	f5 cf       	rjmp	.-22     	; 0x1742 <vfprintf+0x1ae>
    1758:	f5 01       	movw	r30, r10
    175a:	37 fc       	sbrc	r3, 7
    175c:	85 91       	lpm	r24, Z+
    175e:	37 fe       	sbrs	r3, 7
    1760:	81 91       	ld	r24, Z+
    1762:	5f 01       	movw	r10, r30
    1764:	b6 01       	movw	r22, r12
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 d1       	rcall	.+592    	; 0x19ba <fputc>
    176a:	21 10       	cpse	r2, r1
    176c:	2a 94       	dec	r2
    176e:	21 e0       	ldi	r18, 0x01	; 1
    1770:	82 1a       	sub	r8, r18
    1772:	91 08       	sbc	r9, r1
    1774:	81 14       	cp	r8, r1
    1776:	91 04       	cpc	r9, r1
    1778:	79 f7       	brne	.-34     	; 0x1758 <vfprintf+0x1c4>
    177a:	e1 c0       	rjmp	.+450    	; 0x193e <vfprintf+0x3aa>
    177c:	84 36       	cpi	r24, 0x64	; 100
    177e:	11 f0       	breq	.+4      	; 0x1784 <vfprintf+0x1f0>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	39 f5       	brne	.+78     	; 0x17d2 <vfprintf+0x23e>
    1784:	f8 01       	movw	r30, r16
    1786:	37 fe       	sbrs	r3, 7
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x204>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x214>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	07 2e       	mov	r0, r23
    179e:	00 0c       	add	r0, r0
    17a0:	88 0b       	sbc	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	0e 5f       	subi	r16, 0xFE	; 254
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	f3 2d       	mov	r31, r3
    17aa:	ff 76       	andi	r31, 0x6F	; 111
    17ac:	3f 2e       	mov	r3, r31
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <vfprintf+0x230>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	f0 68       	ori	r31, 0x80	; 128
    17c2:	3f 2e       	mov	r3, r31
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a3 01       	movw	r20, r6
    17ca:	33 d1       	rcall	.+614    	; 0x1a32 <__ultoa_invert>
    17cc:	88 2e       	mov	r8, r24
    17ce:	86 18       	sub	r8, r6
    17d0:	44 c0       	rjmp	.+136    	; 0x185a <vfprintf+0x2c6>
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	31 f4       	brne	.+12     	; 0x17e2 <vfprintf+0x24e>
    17d6:	23 2d       	mov	r18, r3
    17d8:	2f 7e       	andi	r18, 0xEF	; 239
    17da:	b2 2e       	mov	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	25 c0       	rjmp	.+74     	; 0x182c <vfprintf+0x298>
    17e2:	93 2d       	mov	r25, r3
    17e4:	99 7f       	andi	r25, 0xF9	; 249
    17e6:	b9 2e       	mov	r11, r25
    17e8:	8f 36       	cpi	r24, 0x6F	; 111
    17ea:	c1 f0       	breq	.+48     	; 0x181c <vfprintf+0x288>
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <vfprintf+0x260>
    17ee:	88 35       	cpi	r24, 0x58	; 88
    17f0:	79 f0       	breq	.+30     	; 0x1810 <vfprintf+0x27c>
    17f2:	ae c0       	rjmp	.+348    	; 0x1950 <vfprintf+0x3bc>
    17f4:	80 37       	cpi	r24, 0x70	; 112
    17f6:	19 f0       	breq	.+6      	; 0x17fe <vfprintf+0x26a>
    17f8:	88 37       	cpi	r24, 0x78	; 120
    17fa:	21 f0       	breq	.+8      	; 0x1804 <vfprintf+0x270>
    17fc:	a9 c0       	rjmp	.+338    	; 0x1950 <vfprintf+0x3bc>
    17fe:	e9 2f       	mov	r30, r25
    1800:	e0 61       	ori	r30, 0x10	; 16
    1802:	be 2e       	mov	r11, r30
    1804:	b4 fe       	sbrs	r11, 4
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <vfprintf+0x28e>
    1808:	fb 2d       	mov	r31, r11
    180a:	f4 60       	ori	r31, 0x04	; 4
    180c:	bf 2e       	mov	r11, r31
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <vfprintf+0x28e>
    1810:	34 fe       	sbrs	r3, 4
    1812:	0a c0       	rjmp	.+20     	; 0x1828 <vfprintf+0x294>
    1814:	29 2f       	mov	r18, r25
    1816:	26 60       	ori	r18, 0x06	; 6
    1818:	b2 2e       	mov	r11, r18
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x294>
    181c:	28 e0       	ldi	r18, 0x08	; 8
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	05 c0       	rjmp	.+10     	; 0x182c <vfprintf+0x298>
    1822:	20 e1       	ldi	r18, 0x10	; 16
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	02 c0       	rjmp	.+4      	; 0x182c <vfprintf+0x298>
    1828:	20 e1       	ldi	r18, 0x10	; 16
    182a:	32 e0       	ldi	r19, 0x02	; 2
    182c:	f8 01       	movw	r30, r16
    182e:	b7 fe       	sbrs	r11, 7
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <vfprintf+0x2ac>
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	0c 5f       	subi	r16, 0xFC	; 252
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0x2b8>
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	0e 5f       	subi	r16, 0xFE	; 254
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	a3 01       	movw	r20, r6
    184e:	f1 d0       	rcall	.+482    	; 0x1a32 <__ultoa_invert>
    1850:	88 2e       	mov	r8, r24
    1852:	86 18       	sub	r8, r6
    1854:	fb 2d       	mov	r31, r11
    1856:	ff 77       	andi	r31, 0x7F	; 127
    1858:	3f 2e       	mov	r3, r31
    185a:	36 fe       	sbrs	r3, 6
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x2e4>
    185e:	23 2d       	mov	r18, r3
    1860:	2e 7f       	andi	r18, 0xFE	; 254
    1862:	a2 2e       	mov	r10, r18
    1864:	89 14       	cp	r8, r9
    1866:	58 f4       	brcc	.+22     	; 0x187e <vfprintf+0x2ea>
    1868:	34 fe       	sbrs	r3, 4
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <vfprintf+0x2ee>
    186c:	32 fc       	sbrc	r3, 2
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <vfprintf+0x2ee>
    1870:	83 2d       	mov	r24, r3
    1872:	8e 7e       	andi	r24, 0xEE	; 238
    1874:	a8 2e       	mov	r10, r24
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <vfprintf+0x2ee>
    1878:	b8 2c       	mov	r11, r8
    187a:	a3 2c       	mov	r10, r3
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <vfprintf+0x2f0>
    187e:	b8 2c       	mov	r11, r8
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfprintf+0x2f0>
    1882:	b9 2c       	mov	r11, r9
    1884:	a4 fe       	sbrs	r10, 4
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <vfprintf+0x312>
    1888:	fe 01       	movw	r30, r28
    188a:	e8 0d       	add	r30, r8
    188c:	f1 1d       	adc	r31, r1
    188e:	80 81       	ld	r24, Z
    1890:	80 33       	cpi	r24, 0x30	; 48
    1892:	21 f4       	brne	.+8      	; 0x189c <vfprintf+0x308>
    1894:	9a 2d       	mov	r25, r10
    1896:	99 7e       	andi	r25, 0xE9	; 233
    1898:	a9 2e       	mov	r10, r25
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <vfprintf+0x31a>
    189c:	a2 fe       	sbrs	r10, 2
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x318>
    18a0:	b3 94       	inc	r11
    18a2:	b3 94       	inc	r11
    18a4:	04 c0       	rjmp	.+8      	; 0x18ae <vfprintf+0x31a>
    18a6:	8a 2d       	mov	r24, r10
    18a8:	86 78       	andi	r24, 0x86	; 134
    18aa:	09 f0       	breq	.+2      	; 0x18ae <vfprintf+0x31a>
    18ac:	b3 94       	inc	r11
    18ae:	a3 fc       	sbrc	r10, 3
    18b0:	10 c0       	rjmp	.+32     	; 0x18d2 <vfprintf+0x33e>
    18b2:	a0 fe       	sbrs	r10, 0
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <vfprintf+0x32e>
    18b6:	b2 14       	cp	r11, r2
    18b8:	80 f4       	brcc	.+32     	; 0x18da <vfprintf+0x346>
    18ba:	28 0c       	add	r2, r8
    18bc:	92 2c       	mov	r9, r2
    18be:	9b 18       	sub	r9, r11
    18c0:	0d c0       	rjmp	.+26     	; 0x18dc <vfprintf+0x348>
    18c2:	b2 14       	cp	r11, r2
    18c4:	58 f4       	brcc	.+22     	; 0x18dc <vfprintf+0x348>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	76 d0       	rcall	.+236    	; 0x19ba <fputc>
    18ce:	b3 94       	inc	r11
    18d0:	f8 cf       	rjmp	.-16     	; 0x18c2 <vfprintf+0x32e>
    18d2:	b2 14       	cp	r11, r2
    18d4:	18 f4       	brcc	.+6      	; 0x18dc <vfprintf+0x348>
    18d6:	2b 18       	sub	r2, r11
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x34a>
    18da:	98 2c       	mov	r9, r8
    18dc:	21 2c       	mov	r2, r1
    18de:	a4 fe       	sbrs	r10, 4
    18e0:	0f c0       	rjmp	.+30     	; 0x1900 <vfprintf+0x36c>
    18e2:	b6 01       	movw	r22, r12
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	68 d0       	rcall	.+208    	; 0x19ba <fputc>
    18ea:	a2 fe       	sbrs	r10, 2
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <vfprintf+0x386>
    18ee:	a1 fc       	sbrc	r10, 1
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x364>
    18f2:	88 e7       	ldi	r24, 0x78	; 120
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x368>
    18f8:	88 e5       	ldi	r24, 0x58	; 88
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	b6 01       	movw	r22, r12
    18fe:	0c c0       	rjmp	.+24     	; 0x1918 <vfprintf+0x384>
    1900:	8a 2d       	mov	r24, r10
    1902:	86 78       	andi	r24, 0x86	; 134
    1904:	51 f0       	breq	.+20     	; 0x191a <vfprintf+0x386>
    1906:	a1 fe       	sbrs	r10, 1
    1908:	02 c0       	rjmp	.+4      	; 0x190e <vfprintf+0x37a>
    190a:	8b e2       	ldi	r24, 0x2B	; 43
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <vfprintf+0x37c>
    190e:	80 e2       	ldi	r24, 0x20	; 32
    1910:	a7 fc       	sbrc	r10, 7
    1912:	8d e2       	ldi	r24, 0x2D	; 45
    1914:	b6 01       	movw	r22, r12
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	50 d0       	rcall	.+160    	; 0x19ba <fputc>
    191a:	89 14       	cp	r8, r9
    191c:	30 f4       	brcc	.+12     	; 0x192a <vfprintf+0x396>
    191e:	b6 01       	movw	r22, r12
    1920:	80 e3       	ldi	r24, 0x30	; 48
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	4a d0       	rcall	.+148    	; 0x19ba <fputc>
    1926:	9a 94       	dec	r9
    1928:	f8 cf       	rjmp	.-16     	; 0x191a <vfprintf+0x386>
    192a:	8a 94       	dec	r8
    192c:	f3 01       	movw	r30, r6
    192e:	e8 0d       	add	r30, r8
    1930:	f1 1d       	adc	r31, r1
    1932:	80 81       	ld	r24, Z
    1934:	b6 01       	movw	r22, r12
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	40 d0       	rcall	.+128    	; 0x19ba <fputc>
    193a:	81 10       	cpse	r8, r1
    193c:	f6 cf       	rjmp	.-20     	; 0x192a <vfprintf+0x396>
    193e:	22 20       	and	r2, r2
    1940:	09 f4       	brne	.+2      	; 0x1944 <vfprintf+0x3b0>
    1942:	4e ce       	rjmp	.-868    	; 0x15e0 <vfprintf+0x4c>
    1944:	b6 01       	movw	r22, r12
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	37 d0       	rcall	.+110    	; 0x19ba <fputc>
    194c:	2a 94       	dec	r2
    194e:	f7 cf       	rjmp	.-18     	; 0x193e <vfprintf+0x3aa>
    1950:	f6 01       	movw	r30, r12
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	97 81       	ldd	r25, Z+7	; 0x07
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0x3c8>
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	2b 96       	adiw	r28, 0x0b	; 11
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	9f 90       	pop	r9
    197e:	8f 90       	pop	r8
    1980:	7f 90       	pop	r7
    1982:	6f 90       	pop	r6
    1984:	5f 90       	pop	r5
    1986:	4f 90       	pop	r4
    1988:	3f 90       	pop	r3
    198a:	2f 90       	pop	r2
    198c:	08 95       	ret

0000198e <strnlen_P>:
    198e:	fc 01       	movw	r30, r24
    1990:	05 90       	lpm	r0, Z+
    1992:	61 50       	subi	r22, 0x01	; 1
    1994:	70 40       	sbci	r23, 0x00	; 0
    1996:	01 10       	cpse	r0, r1
    1998:	d8 f7       	brcc	.-10     	; 0x1990 <strnlen_P+0x2>
    199a:	80 95       	com	r24
    199c:	90 95       	com	r25
    199e:	8e 0f       	add	r24, r30
    19a0:	9f 1f       	adc	r25, r31
    19a2:	08 95       	ret

000019a4 <strnlen>:
    19a4:	fc 01       	movw	r30, r24
    19a6:	61 50       	subi	r22, 0x01	; 1
    19a8:	70 40       	sbci	r23, 0x00	; 0
    19aa:	01 90       	ld	r0, Z+
    19ac:	01 10       	cpse	r0, r1
    19ae:	d8 f7       	brcc	.-10     	; 0x19a6 <strnlen+0x2>
    19b0:	80 95       	com	r24
    19b2:	90 95       	com	r25
    19b4:	8e 0f       	add	r24, r30
    19b6:	9f 1f       	adc	r25, r31
    19b8:	08 95       	ret

000019ba <fputc>:
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	fb 01       	movw	r30, r22
    19c4:	23 81       	ldd	r18, Z+3	; 0x03
    19c6:	21 fd       	sbrc	r18, 1
    19c8:	03 c0       	rjmp	.+6      	; 0x19d0 <fputc+0x16>
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
    19ce:	2c c0       	rjmp	.+88     	; 0x1a28 <fputc+0x6e>
    19d0:	22 ff       	sbrs	r18, 2
    19d2:	16 c0       	rjmp	.+44     	; 0x1a00 <fputc+0x46>
    19d4:	46 81       	ldd	r20, Z+6	; 0x06
    19d6:	57 81       	ldd	r21, Z+7	; 0x07
    19d8:	24 81       	ldd	r18, Z+4	; 0x04
    19da:	35 81       	ldd	r19, Z+5	; 0x05
    19dc:	42 17       	cp	r20, r18
    19de:	53 07       	cpc	r21, r19
    19e0:	44 f4       	brge	.+16     	; 0x19f2 <fputc+0x38>
    19e2:	a0 81       	ld	r26, Z
    19e4:	b1 81       	ldd	r27, Z+1	; 0x01
    19e6:	9d 01       	movw	r18, r26
    19e8:	2f 5f       	subi	r18, 0xFF	; 255
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	31 83       	std	Z+1, r19	; 0x01
    19ee:	20 83       	st	Z, r18
    19f0:	8c 93       	st	X, r24
    19f2:	26 81       	ldd	r18, Z+6	; 0x06
    19f4:	37 81       	ldd	r19, Z+7	; 0x07
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	37 83       	std	Z+7, r19	; 0x07
    19fc:	26 83       	std	Z+6, r18	; 0x06
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <fputc+0x6e>
    1a00:	8b 01       	movw	r16, r22
    1a02:	ec 01       	movw	r28, r24
    1a04:	fb 01       	movw	r30, r22
    1a06:	00 84       	ldd	r0, Z+8	; 0x08
    1a08:	f1 85       	ldd	r31, Z+9	; 0x09
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	09 95       	icall
    1a0e:	89 2b       	or	r24, r25
    1a10:	e1 f6       	brne	.-72     	; 0x19ca <fputc+0x10>
    1a12:	d8 01       	movw	r26, r16
    1a14:	16 96       	adiw	r26, 0x06	; 6
    1a16:	8d 91       	ld	r24, X+
    1a18:	9c 91       	ld	r25, X
    1a1a:	17 97       	sbiw	r26, 0x07	; 7
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	17 96       	adiw	r26, 0x07	; 7
    1a20:	9c 93       	st	X, r25
    1a22:	8e 93       	st	-X, r24
    1a24:	16 97       	sbiw	r26, 0x06	; 6
    1a26:	ce 01       	movw	r24, r28
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	08 95       	ret

00001a32 <__ultoa_invert>:
    1a32:	fa 01       	movw	r30, r20
    1a34:	aa 27       	eor	r26, r26
    1a36:	28 30       	cpi	r18, 0x08	; 8
    1a38:	51 f1       	breq	.+84     	; 0x1a8e <__ultoa_invert+0x5c>
    1a3a:	20 31       	cpi	r18, 0x10	; 16
    1a3c:	81 f1       	breq	.+96     	; 0x1a9e <__ultoa_invert+0x6c>
    1a3e:	e8 94       	clt
    1a40:	6f 93       	push	r22
    1a42:	6e 7f       	andi	r22, 0xFE	; 254
    1a44:	6e 5f       	subi	r22, 0xFE	; 254
    1a46:	7f 4f       	sbci	r23, 0xFF	; 255
    1a48:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	af 4f       	sbci	r26, 0xFF	; 255
    1a4e:	b1 e0       	ldi	r27, 0x01	; 1
    1a50:	3e d0       	rcall	.+124    	; 0x1ace <__ultoa_invert+0x9c>
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
    1a54:	3c d0       	rcall	.+120    	; 0x1ace <__ultoa_invert+0x9c>
    1a56:	67 0f       	add	r22, r23
    1a58:	78 1f       	adc	r23, r24
    1a5a:	89 1f       	adc	r24, r25
    1a5c:	9a 1f       	adc	r25, r26
    1a5e:	a1 1d       	adc	r26, r1
    1a60:	68 0f       	add	r22, r24
    1a62:	79 1f       	adc	r23, r25
    1a64:	8a 1f       	adc	r24, r26
    1a66:	91 1d       	adc	r25, r1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	6a 0f       	add	r22, r26
    1a6c:	71 1d       	adc	r23, r1
    1a6e:	81 1d       	adc	r24, r1
    1a70:	91 1d       	adc	r25, r1
    1a72:	a1 1d       	adc	r26, r1
    1a74:	20 d0       	rcall	.+64     	; 0x1ab6 <__ultoa_invert+0x84>
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__ultoa_invert+0x48>
    1a78:	68 94       	set
    1a7a:	3f 91       	pop	r19
    1a7c:	2a e0       	ldi	r18, 0x0A	; 10
    1a7e:	26 9f       	mul	r18, r22
    1a80:	11 24       	eor	r1, r1
    1a82:	30 19       	sub	r19, r0
    1a84:	30 5d       	subi	r19, 0xD0	; 208
    1a86:	31 93       	st	Z+, r19
    1a88:	de f6       	brtc	.-74     	; 0x1a40 <__ultoa_invert+0xe>
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret
    1a8e:	46 2f       	mov	r20, r22
    1a90:	47 70       	andi	r20, 0x07	; 7
    1a92:	40 5d       	subi	r20, 0xD0	; 208
    1a94:	41 93       	st	Z+, r20
    1a96:	b3 e0       	ldi	r27, 0x03	; 3
    1a98:	0f d0       	rcall	.+30     	; 0x1ab8 <__ultoa_invert+0x86>
    1a9a:	c9 f7       	brne	.-14     	; 0x1a8e <__ultoa_invert+0x5c>
    1a9c:	f6 cf       	rjmp	.-20     	; 0x1a8a <__ultoa_invert+0x58>
    1a9e:	46 2f       	mov	r20, r22
    1aa0:	4f 70       	andi	r20, 0x0F	; 15
    1aa2:	40 5d       	subi	r20, 0xD0	; 208
    1aa4:	4a 33       	cpi	r20, 0x3A	; 58
    1aa6:	18 f0       	brcs	.+6      	; 0x1aae <__ultoa_invert+0x7c>
    1aa8:	49 5d       	subi	r20, 0xD9	; 217
    1aaa:	31 fd       	sbrc	r19, 1
    1aac:	40 52       	subi	r20, 0x20	; 32
    1aae:	41 93       	st	Z+, r20
    1ab0:	02 d0       	rcall	.+4      	; 0x1ab6 <__ultoa_invert+0x84>
    1ab2:	a9 f7       	brne	.-22     	; 0x1a9e <__ultoa_invert+0x6c>
    1ab4:	ea cf       	rjmp	.-44     	; 0x1a8a <__ultoa_invert+0x58>
    1ab6:	b4 e0       	ldi	r27, 0x04	; 4
    1ab8:	a6 95       	lsr	r26
    1aba:	97 95       	ror	r25
    1abc:	87 95       	ror	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	ba 95       	dec	r27
    1ac4:	c9 f7       	brne	.-14     	; 0x1ab8 <__ultoa_invert+0x86>
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 05       	cpc	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	08 95       	ret
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	0a 2e       	mov	r0, r26
    1ad4:	06 94       	lsr	r0
    1ad6:	57 95       	ror	r21
    1ad8:	47 95       	ror	r20
    1ada:	37 95       	ror	r19
    1adc:	27 95       	ror	r18
    1ade:	ba 95       	dec	r27
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__ultoa_invert+0xa2>
    1ae2:	62 0f       	add	r22, r18
    1ae4:	73 1f       	adc	r23, r19
    1ae6:	84 1f       	adc	r24, r20
    1ae8:	95 1f       	adc	r25, r21
    1aea:	a0 1d       	adc	r26, r0
    1aec:	08 95       	ret

00001aee <_exit>:
    1aee:	f8 94       	cli

00001af0 <__stop_program>:
    1af0:	ff cf       	rjmp	.-2      	; 0x1af0 <__stop_program>
