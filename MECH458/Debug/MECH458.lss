
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  000017bc  00001850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cf  0080029a  0080029a  000019ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005212  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001af5  00000000  00000000  00006f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000349a  00000000  00000000  00008a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b0  00000000  00000000  0000bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aa31  00000000  00000000  0000c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000184c  00000000  00000000  0001710d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00018959  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b06  00000000  00000000  00018c19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	1c c4       	rjmp	.+2104   	; 0x86e <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c6       	rjmp	.+3358   	; 0xd64 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ec eb       	ldi	r30, 0xBC	; 188
      ac:	f7 e1       	ldi	r31, 0x17	; 23
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	aa 39       	cpi	r26, 0x9A	; 154
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	aa e9       	ldi	r26, 0x9A	; 154
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a9 36       	cpi	r26, 0x69	; 105
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	88 d2       	rcall	.+1296   	; 0x5e0 <main>
      d0:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <_exit>

000000d4 <__bad_interrupt>:
      d4:	39 c3       	rjmp	.+1650   	; 0x748 <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		//PORTC ^= 0xFE;
		if (g_ADCCount < 10)
     122:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <g_ADCCount>
     126:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	d8 f4       	brcc	.+54     	; 0x164 <__vector_29+0x5c>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     12e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <g_ADCCount>
     132:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 d4 02 	sts	0x02D4, r19	; 0x8002d4 <g_ADCCount+0x1>
     140:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	e1 54       	subi	r30, 0x41	; 65
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);	 
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <g_ADCCount>
     168:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <_timer+0x11>
		//ADCSRA &= 0x01111111;
		//PORTC ^= 0xFE;
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	80 ea       	ldi	r24, 0xA0	; 160
     194:	89 27       	eor	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret

0000019a <ADC_Task>:
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	cf 93       	push	r28
     1ac:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <j.2508>
     1b0:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <j.2508+0x1>
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <j.2508+0x1>
     1ba:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <j.2508>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	ba 01       	movw	r22, r20
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2f b7       	in	r18, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	fc 01       	movw	r30, r24
     1ce:	ee 0f       	add	r30, r30
     1d0:	ff 1f       	adc	r31, r31
     1d2:	e1 54       	subi	r30, 0x41	; 65
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	01 90       	ld	r0, Z+
     1d8:	f0 81       	ld	r31, Z
     1da:	e0 2d       	mov	r30, r0
     1dc:	4e 0f       	add	r20, r30
     1de:	5f 1f       	adc	r21, r31
     1e0:	61 1d       	adc	r22, r1
     1e2:	71 1d       	adc	r23, r1
     1e4:	2f bf       	out	0x3f, r18	; 63
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
     1ea:	91 05       	cpc	r25, r1
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <ADC_Task+0x2e>
     1ee:	cf b7       	in	r28, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	cb 01       	movw	r24, r22
     1f4:	ba 01       	movw	r22, r20
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	be d6       	rcall	.+3452   	; 0xf7c <__udivmodsi4>
     200:	69 01       	movw	r12, r18
     202:	7a 01       	movw	r14, r20
     204:	cf bf       	out	0x3f, r28	; 63
     206:	cf b7       	in	r28, 0x3f	; 63
     208:	f8 94       	cli
     20a:	da 01       	movw	r26, r20
     20c:	c9 01       	movw	r24, r18
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	a1 09       	sbc	r26, r1
     212:	b1 09       	sbc	r27, r1
     214:	8f 3c       	cpi	r24, 0xCF	; 207
     216:	97 40       	sbci	r25, 0x07	; 7
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	a0 f4       	brcc	.+40     	; 0x246 <ADC_Task+0xac>
     21e:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <STAGE2>
     222:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <STAGE2+0x1>
     226:	ac d1       	rcall	.+856    	; 0x580 <LL_GetRefl>
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	40 f4       	brcc	.+16     	; 0x246 <ADC_Task+0xac>
     236:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <STAGE2>
     23a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <STAGE2+0x1>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f0       	breq	.+4      	; 0x246 <ADC_Task+0xac>
     242:	b6 01       	movw	r22, r12
     244:	a8 d1       	rcall	.+848    	; 0x596 <LL_UpdateRefl>
     246:	cf bf       	out	0x3f, r28	; 63
     248:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <g_ADCCount+0x1>
     24c:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <g_ADCCount>
     250:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <_timer+0x11>
     254:	66 9b       	sbis	0x0c, 6	; 12
     256:	05 c0       	rjmp	.+10     	; 0x262 <ADC_Task+0xc8>
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 64       	ori	r24, 0x40	; 64
     260:	80 83       	st	Z, r24
     262:	cf 91       	pop	r28
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	bf 90       	pop	r11
     26e:	af 90       	pop	r10
     270:	9f 90       	pop	r9
     272:	8f 90       	pop	r8
     274:	08 95       	ret

00000276 <MAG_Task>:
     276:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <gMotorOn>
     27a:	88 23       	and	r24, r24
     27c:	49 f0       	breq	.+18     	; 0x290 <MAG_Task+0x1a>
     27e:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <tick.2530>
     282:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <tick.2530+0x1>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <tick.2530+0x1>
     28c:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <tick.2530>
     290:	64 99       	sbic	0x0c, 4	; 12
     292:	1c c0       	rjmp	.+56     	; 0x2cc <MAG_Task+0x56>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     29a:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     29e:	8b d1       	rcall	.+790    	; 0x5b6 <LL_UpdateStatus>
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     2a6:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     2aa:	7b d1       	rcall	.+758    	; 0x5a2 <LL_UpdateMag>
     2ac:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     2b0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     2b4:	3a d1       	rcall	.+628    	; 0x52a <LL_Next>
     2b6:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <STAGE1+0x1>
     2ba:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <STAGE1>
     2be:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_timer+0x1a>
     2c2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <tick.2530+0x1>
     2c6:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <tick.2530>
     2ca:	08 95       	ret
     2cc:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <tick.2530>
     2d0:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <tick.2530+0x1>
     2d4:	4f 97       	sbiw	r24, 0x1f	; 31
     2d6:	d8 f0       	brcs	.+54     	; 0x30e <MAG_Task+0x98>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     2de:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     2e2:	69 d1       	rcall	.+722    	; 0x5b6 <LL_UpdateStatus>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     2ea:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     2ee:	59 d1       	rcall	.+690    	; 0x5a2 <LL_UpdateMag>
     2f0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     2f4:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     2f8:	18 d1       	rcall	.+560    	; 0x52a <LL_Next>
     2fa:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <STAGE1+0x1>
     2fe:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <STAGE1>
     302:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <_timer+0x1a>
     306:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <tick.2530+0x1>
     30a:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <tick.2530>
     30e:	08 95       	ret

00000310 <EXIT_Task>:
     310:	cf 93       	push	r28
     312:	c0 91 5e 03 	lds	r28, 0x035E	; 0x80035e <stepper+0x3>
     316:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     31a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     31e:	2b d1       	rcall	.+598    	; 0x576 <LL_GetClass>
     320:	c8 13       	cpse	r28, r24
     322:	1d c0       	rjmp	.+58     	; 0x35e <EXIT_Task+0x4e>
     324:	63 e0       	ldi	r22, 0x03	; 3
     326:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     32a:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     32e:	43 d1       	rcall	.+646    	; 0x5b6 <LL_UpdateStatus>
     330:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     334:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     338:	f8 d0       	rcall	.+496    	; 0x52a <LL_Next>
     33a:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <HEAD+0x1>
     33e:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <HEAD>
     342:	fc 01       	movw	r30, r24
     344:	82 81       	ldd	r24, Z+2	; 0x02
     346:	93 81       	ldd	r25, Z+3	; 0x03
     348:	16 d1       	rcall	.+556    	; 0x576 <LL_GetClass>
     34a:	c8 2f       	mov	r28, r24
     34c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     350:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     354:	10 d1       	rcall	.+544    	; 0x576 <LL_GetClass>
     356:	6c 2f       	mov	r22, r28
     358:	77 d2       	rcall	.+1262   	; 0x848 <STEPPER_SetRotation>
     35a:	10 92 2a 03 	sts	0x032A, r1	; 0x80032a <_timer+0x23>
     35e:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     362:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     366:	07 d1       	rcall	.+526    	; 0x576 <LL_GetClass>
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <BTN_Task>:
     36c:	89 b1       	in	r24, 0x09	; 9
     36e:	83 70       	andi	r24, 0x03	; 3
     370:	69 f1       	breq	.+90     	; 0x3cc <BTN_Task+0x60>
     372:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <__data_end>
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <__data_end>
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	30 f1       	brcs	.+76     	; 0x3cc <BTN_Task+0x60>
     380:	89 b1       	in	r24, 0x09	; 9
     382:	83 70       	andi	r24, 0x03	; 3
     384:	31 f4       	brne	.+12     	; 0x392 <BTN_Task+0x26>
     386:	88 e1       	ldi	r24, 0x18	; 24
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	ea d5       	rcall	.+3028   	; 0xf60 <UART_SendString>
     38c:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
     390:	08 95       	ret
     392:	89 b1       	in	r24, 0x09	; 9
     394:	83 70       	andi	r24, 0x03	; 3
     396:	81 30       	cpi	r24, 0x01	; 1
     398:	69 f4       	brne	.+26     	; 0x3b4 <BTN_Task+0x48>
     39a:	80 e3       	ldi	r24, 0x30	; 48
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	e0 d5       	rcall	.+3008   	; 0xf60 <UART_SendString>
     3a0:	86 e5       	ldi	r24, 0x56	; 86
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	d9 d3       	rcall	.+1970   	; 0xb58 <SYS_Pause>
     3a6:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <g_IdleStartTime+0x1>
     3aa:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <g_IdleStartTime>
     3ae:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
     3b2:	08 95       	ret
     3b4:	89 b1       	in	r24, 0x09	; 9
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	31 f4       	brne	.+12     	; 0x3c8 <BTN_Task+0x5c>
     3bc:	86 e6       	ldi	r24, 0x66	; 102
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	cf d5       	rcall	.+2974   	; 0xf60 <UART_SendString>
     3c2:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
     3c6:	08 95       	ret
     3c8:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <__data_end>
     3cc:	08 95       	ret

000003ce <ADD_Task>:
     3ce:	08 95       	ret

000003d0 <SERVER_Task>:
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 1;
	static uint8_t pin5state = 1;
//	static uint8_t temp = 0;
	
	if((PINE & 0x80) == 0) // E7
     3d0:	67 99       	sbic	0x0c, 7	; 12
     3d2:	19 c0       	rjmp	.+50     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	{
		if(pin7state)
     3d4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2551>
     3d8:	88 23       	and	r24, r24
     3da:	99 f0       	breq	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			// Transition Detected O1 High -> Low : Item Enters		
			// Just signal the start of the system by placing the first node into stage 1
			// And enable the watchdog timer
			
			if(STAGE1 == NULL) STAGE1 = HEAD;
     3dc:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     3e0:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     3e4:	89 2b       	or	r24, r25
     3e6:	41 f4       	brne	.+16     	; 0x3f8 <SERVER_Task+0x28>
     3e8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     3ec:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     3f0:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <STAGE1+0x1>
     3f4:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <STAGE1>
			_timer[7].state = READY;
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <_timer+0x47>
			g_WDTimeout = 0;
     3fe:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
		}
		pin7state = 0;
     402:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2551>
	}
	
	if((PINE & 0x40) == 0) // E6
     406:	66 99       	sbic	0x0c, 6	; 12
     408:	07 c0       	rjmp	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		if(pin6state)
     40a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2552>
     40e:	81 11       	cpse	r24, r1
				// The ADC is started on the Low -> High edge
				// Once the ADC finishes ten conversions it enables the ADC handling task
				// The ADC handling task restarts conversions as long as this pin is high
				// If the pin goes High -> Low, the ADC task will finish and wont restart the ADC
				// So nothing happens here.
				g_WDTimeout = 0;
     410:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
		}
		pin6state = 0;
     414:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2552>
	}
	
	if((PINE & 0x20) == 0) // E5
     418:	65 99       	sbic	0x0c, 5	; 12
     41a:	0e c0       	rjmp	.+28     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	{
		if(pin5state)
     41c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2553>
     420:	88 23       	and	r24, r24
     422:	41 f0       	breq	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <_timer+0x23>
			g_PauseRequest = 1;
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <g_PauseRequest>
			g_WDTimeout = 0;
     430:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
		}
		pin5state = 0;
     434:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2553>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     438:	67 9b       	sbis	0x0c, 7	; 12
     43a:	0c c0       	rjmp	.+24     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		if(!pin7state)
     43c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2551>
     440:	81 11       	cpse	r24, r1
     442:	05 c0       	rjmp	.+10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		{
			// Transition Detected O2 Low -> High : Item Exits O1
			// Unblock the magnetic sensor when the item leaves O1
			// The magnetic sensor blocks once the magnetism of the piece is inferred
			_timer[2].state = READY;	
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <_timer+0x1a>
			g_WDTimeout = 0;
     44a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
		}
		pin7state = 1;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2551>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     454:	66 9b       	sbis	0x0c, 6	; 12
     456:	28 c0       	rjmp	.+80     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
		if(!pin6state)
     458:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2552>
     45c:	81 11       	cpse	r24, r1
     45e:	21 c0       	rjmp	.+66     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			if(STAGE2 == NULL)
     460:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <STAGE2>
     464:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <STAGE2+0x1>
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	49 f4       	brne	.+18     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			{
				STAGE2 = HEAD; // First Item enters stage 2
     46c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
     470:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     474:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <STAGE2+0x1>
     478:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <STAGE2>
     47c:	0b c0       	rjmp	.+22     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
			}
			else
			{
				LL_UpdateStatus(STAGE2, SORTABLE);
     47e:	62 e0       	ldi	r22, 0x02	; 2
     480:	9a d0       	rcall	.+308    	; 0x5b6 <LL_UpdateStatus>
				STAGE2 = LL_Next(STAGE2); // Increment stage 2
     482:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <STAGE2>
     486:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <STAGE2+0x1>
     48a:	4f d0       	rcall	.+158    	; 0x52a <LL_Next>
     48c:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <STAGE2+0x1>
     490:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <STAGE2>
			}
			g_WDTimeout = 0;
     494:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
			ADCSRA |= (1 << ADSC);
     498:	ea e7       	ldi	r30, 0x7A	; 122
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	80 64       	ori	r24, 0x40	; 64
     4a0:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2552>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     4a8:	65 9b       	sbis	0x0c, 5	; 12
     4aa:	09 c0       	rjmp	.+18     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	{
		if(!pin5state)
     4ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2553>
     4b0:	81 11       	cpse	r24, r1
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		{
			// Transition Detected O3 Low -> High : Item Exits System
			g_WDTimeout = 0;
     4b4:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_WDTimeout>
		}
		pin5state = 1;			
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2553>
     4be:	08 95       	ret

000004c0 <WATCHDOG_Task>:
}

void WATCHDOG_Task(void* arg)
{
	// If this function runs twice then then no item has triggered an optical sensor for 4 seconds.
	if(g_WDTimeout) SYS_Pause(__FUNCTION__); 
     4c0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <g_WDTimeout>
     4c4:	88 23       	and	r24, r24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <WATCHDOG_Task+0xe>
     4c8:	89 e7       	ldi	r24, 0x79	; 121
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	45 d3       	rcall	.+1674   	; 0xb58 <SYS_Pause>
	g_WDTimeout++;
     4ce:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <g_WDTimeout>
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <g_WDTimeout>
     4d8:	08 95       	ret

000004da <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	1f 93       	push	r17
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	7c 01       	movw	r14, r24
     4e6:	16 2f       	mov	r17, r22
     4e8:	d4 2f       	mov	r29, r20
     4ea:	c2 2f       	mov	r28, r18
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	67 d5       	rcall	.+2766   	; 0xfc0 <malloc>
     4f2:	fc 01       	movw	r30, r24
     4f4:	f1 82       	std	Z+1, r15	; 0x01
     4f6:	e0 82       	st	Z, r14
     4f8:	12 83       	std	Z+2, r17	; 0x02
     4fa:	d3 83       	std	Z+3, r29	; 0x03
     4fc:	c4 83       	std	Z+4, r28	; 0x04
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	ff 90       	pop	r15
     506:	ef 90       	pop	r14
     508:	08 95       	ret

0000050a <LL_ItemListInit>:
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	55 d5       	rcall	.+2730   	; 0xfc0 <malloc>
     516:	fc 01       	movw	r30, r24
     518:	d1 83       	std	Z+1, r29	; 0x01
     51a:	c0 83       	st	Z, r28
     51c:	15 82       	std	Z+5, r1	; 0x05
     51e:	14 82       	std	Z+4, r1	; 0x04
     520:	13 82       	std	Z+3, r1	; 0x03
     522:	12 82       	std	Z+2, r1	; 0x02
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <LL_Next>:
     52a:	fc 01       	movw	r30, r24
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	93 81       	ldd	r25, Z+3	; 0x03
     530:	08 95       	ret

00000532 <LL_AddBack>:
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	ec 01       	movw	r28, r24
     538:	cb 01       	movw	r24, r22
     53a:	01 c0       	rjmp	.+2      	; 0x53e <LL_AddBack+0xc>
     53c:	e9 01       	movw	r28, r18
     53e:	2a 81       	ldd	r18, Y+2	; 0x02
     540:	3b 81       	ldd	r19, Y+3	; 0x03
     542:	21 15       	cp	r18, r1
     544:	31 05       	cpc	r19, r1
     546:	d1 f7       	brne	.-12     	; 0x53c <LL_AddBack+0xa>
     548:	e0 df       	rcall	.-64     	; 0x50a <LL_ItemListInit>
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <LL_Size>:
     554:	dc 01       	movw	r26, r24
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	13 97       	sbiw	r26, 0x03	; 3
     55e:	30 97       	sbiw	r30, 0x00	; 0
     560:	41 f0       	breq	.+16     	; 0x572 <LL_Size+0x1e>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	8f 5f       	subi	r24, 0xFF	; 255
     566:	02 80       	ldd	r0, Z+2	; 0x02
     568:	f3 81       	ldd	r31, Z+3	; 0x03
     56a:	e0 2d       	mov	r30, r0
     56c:	30 97       	sbiw	r30, 0x00	; 0
     56e:	d1 f7       	brne	.-12     	; 0x564 <LL_Size+0x10>
     570:	08 95       	ret
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	08 95       	ret

00000576 <LL_GetClass>:
     576:	dc 01       	movw	r26, r24
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	83 81       	ldd	r24, Z+3	; 0x03
     57e:	08 95       	ret

00000580 <LL_GetRefl>:
     580:	dc 01       	movw	r26, r24
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	08 95       	ret

0000058c <LL_GetMag>:
     58c:	dc 01       	movw	r26, r24
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	82 81       	ldd	r24, Z+2	; 0x02
     594:	08 95       	ret

00000596 <LL_UpdateRefl>:
     596:	dc 01       	movw	r26, r24
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	71 83       	std	Z+1, r23	; 0x01
     59e:	60 83       	st	Z, r22
     5a0:	08 95       	ret

000005a2 <LL_UpdateMag>:
     5a2:	dc 01       	movw	r26, r24
     5a4:	ed 91       	ld	r30, X+
     5a6:	fc 91       	ld	r31, X
     5a8:	62 83       	std	Z+2, r22	; 0x02
     5aa:	08 95       	ret

000005ac <LL_UpdateClass>:
     5ac:	dc 01       	movw	r26, r24
     5ae:	ed 91       	ld	r30, X+
     5b0:	fc 91       	ld	r31, X
     5b2:	63 83       	std	Z+3, r22	; 0x03
     5b4:	08 95       	ret

000005b6 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5b6:	dc 01       	movw	r26, r24
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	64 83       	std	Z+4, r22	; 0x04
     5be:	08 95       	ret

000005c0 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     5c0:	dc 01       	movw	r26, r24
     5c2:	ed 91       	ld	r30, X+
     5c4:	fc 91       	ld	r31, X
     5c6:	84 81       	ldd	r24, Z+4	; 0x04
     5c8:	08 95       	ret

000005ca <GPIO_Init>:
extern list* TAIL;
extern list* FRONT;

int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     5ce:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     5d0:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     5d2:	80 ef       	ldi	r24, 0xF0	; 240
     5d4:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     5d6:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     5d8:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
}
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	08 95       	ret

000005e0 <main>:
#include "CALIBRATE.h"
CALIBRATE();
return 0;
#endif
	
	SYS_Init();
     5e0:	02 d2       	rcall	.+1028   	; 0x9e6 <SYS_Init>

	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     5e2:	89 b1       	in	r24, 0x09	; 9
     5e4:	83 70       	andi	r24, 0x03	; 3
     5e6:	e9 f7       	brne	.-6      	; 0x5e2 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     5e8:	87 e8       	ldi	r24, 0x87	; 135
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	b9 d4       	rcall	.+2418   	; 0xf60 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ee:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	48 ee       	ldi	r20, 0xE8	; 232
     5f6:	51 e0       	ldi	r21, 0x01	; 1
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	36 d4       	rcall	.+2156   	; 0xe6e <TIMER_Create>
		_timer[0].state = READY;
     602:	c7 e0       	ldi	r28, 0x07	; 7
     604:	d3 e0       	ldi	r29, 0x03	; 3
     606:	12 e0       	ldi	r17, 0x02	; 2
     608:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4d ec       	ldi	r20, 0xCD	; 205
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	29 d4       	rcall	.+2130   	; 0xe6e <TIMER_Create>
		_timer[1].state = BLOCKED;
     61c:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4b e3       	ldi	r20, 0x3B	; 59
     624:	51 e0       	ldi	r21, 0x01	; 1
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	1f d4       	rcall	.+2110   	; 0xe6e <TIMER_Create>
		_timer[2].state = BLOCKED;
     630:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	48 e8       	ldi	r20, 0x88	; 136
     638:	51 e0       	ldi	r21, 0x01	; 1
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	15 d4       	rcall	.+2090   	; 0xe6e <TIMER_Create>
		_timer[3].state = BLOCKED;
     644:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(180, 1, ADD_Task, NULL);		// Item Enter Handling
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	47 ee       	ldi	r20, 0xE7	; 231
     64c:	51 e0       	ldi	r21, 0x01	; 1
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	84 eb       	ldi	r24, 0xB4	; 180
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0b d4       	rcall	.+2070   	; 0xe6e <TIMER_Create>
		_timer[4].state = BLOCKED;
     658:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	46 eb       	ldi	r20, 0xB6	; 182
     660:	51 e0       	ldi	r21, 0x01	; 1
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	82 e3       	ldi	r24, 0x32	; 50
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	01 d4       	rcall	.+2050   	; 0xe6e <TIMER_Create>
		_timer[5].state = READY;
     66c:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	48 ec       	ldi	r20, 0xC8	; 200
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	88 ee       	ldi	r24, 0xE8	; 232
     67c:	93 e0       	ldi	r25, 0x03	; 3
     67e:	f7 d3       	rcall	.+2030   	; 0xe6e <TIMER_Create>
		_timer[6].state = READY;				
		
		TIMER_Create(4505,1, WATCHDOG_Task, NULL); // Software watchdog (2 seconds)
     680:	1e af       	std	Y+62, r17	; 0x3e
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e6       	ldi	r20, 0x60	; 96
     688:	52 e0       	ldi	r21, 0x02	; 2
     68a:	61 e0       	ldi	r22, 0x01	; 1
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	89 e9       	ldi	r24, 0x99	; 153
		_timer[7].state = BLOCKED;
     690:	91 e1       	ldi	r25, 0x11	; 17
     692:	ed d3       	rcall	.+2010   	; 0xe6e <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     694:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <_timer+0x47>
     698:	8a e9       	ldi	r24, 0x9A	; 154
		PWM(0x80);
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	61 d4       	rcall	.+2242   	; 0xf60 <UART_SendString>
     69e:	80 e8       	ldi	r24, 0x80	; 128
     6a0:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6a2:	63 d0       	rcall	.+198    	; 0x76a <PWM>
	// Put IDLE operations in infinite loop
	while (1)
	{		
		// Check for a pause request
		// Only pause during idle time to properly restart the scheduler on unpause
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6a4:	78 94       	sei
     6a6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <g_PauseRequest>
     6aa:	88 23       	and	r24, r24
     6ac:	19 f0       	breq	.+6      	; 0x6b4 <main+0xd4>
     6ae:	8c ea       	ldi	r24, 0xAC	; 172
     6b0:	91 e0       	ldi	r25, 0x01	; 1
				
		list* temp = HEAD;
     6b2:	52 d2       	rcall	.+1188   	; 0xb58 <SYS_Pause>
     6b4:	c0 91 b7 02 	lds	r28, 0x02B7	; 0x8002b7 <HEAD>
		uint16_t reflVal; 

		while(temp){
     6b8:	d0 91 b8 02 	lds	r29, 0x02B8	; 0x8002b8 <HEAD+0x1>
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     6bc:	20 97       	sbiw	r28, 0x00	; 0
     6be:	99 f3       	breq	.-26     	; 0x6a6 <main+0xc6>
     6c0:	20 97       	sbiw	r28, 0x00	; 0
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <main+0xe6>
     6c4:	3a c0       	rjmp	.+116    	; 0x73a <main+0x15a>
     6c6:	ce 01       	movw	r24, r28
     6c8:	56 df       	rcall	.-340    	; 0x576 <LL_GetClass>
     6ca:	84 30       	cpi	r24, 0x04	; 4
     6cc:	b1 f5       	brne	.+108    	; 0x73a <main+0x15a>
     6ce:	ce 01       	movw	r24, r28
     6d0:	77 df       	rcall	.-274    	; 0x5c0 <LL_GetStatus>
			{
				//classify temp
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     6d2:	82 30       	cpi	r24, 0x02	; 2
				{
					reflVal = LL_GetRefl(temp);				
     6d4:	91 f5       	brne	.+100    	; 0x73a <main+0x15a>
     6d6:	1f b7       	in	r17, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	ce 01       	movw	r24, r28
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     6dc:	51 df       	rcall	.-350    	; 0x580 <LL_GetRefl>
				}
				uint8_t magVal = LL_GetMag(temp);
     6de:	7c 01       	movw	r14, r24
     6e0:	1f bf       	out	0x3f, r17	; 63
     6e2:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     6e4:	53 df       	rcall	.-346    	; 0x58c <LL_GetMag>
     6e6:	88 23       	and	r24, r24
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     6e8:	a1 f0       	breq	.+40     	; 0x712 <main+0x132>
     6ea:	c7 01       	movw	r24, r14
     6ec:	83 97       	sbiw	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     6ee:	8a 97       	sbiw	r24, 0x2a	; 42
     6f0:	20 f4       	brcc	.+8      	; 0x6fa <main+0x11a>
     6f2:	62 e0       	ldi	r22, 0x02	; 2
     6f4:	ce 01       	movw	r24, r28
     6f6:	5a df       	rcall	.-332    	; 0x5ac <LL_UpdateClass>
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     6f8:	20 c0       	rjmp	.+64     	; 0x73a <main+0x15a>
     6fa:	8b e2       	ldi	r24, 0x2B	; 43
     6fc:	e8 1a       	sub	r14, r24
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	f8 0a       	sbc	r15, r24
     702:	82 ee       	ldi	r24, 0xE2	; 226
     704:	e8 16       	cp	r14, r24
					{
						LL_UpdateClass(temp, STEEL);
     706:	f1 04       	cpc	r15, r1
     708:	c0 f4       	brcc	.+48     	; 0x73a <main+0x15a>
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	ce 01       	movw	r24, r28
     70e:	4e df       	rcall	.-356    	; 0x5ac <LL_UpdateClass>
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     710:	14 c0       	rjmp	.+40     	; 0x73a <main+0x15a>
     712:	c7 01       	movw	r24, r14
     714:	86 57       	subi	r24, 0x76	; 118
				{
					LL_UpdateClass(temp, BLACK);
     716:	93 40       	sbci	r25, 0x03	; 3
     718:	8e 97       	sbiw	r24, 0x2e	; 46
     71a:	20 f4       	brcc	.+8      	; 0x724 <main+0x144>
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     720:	45 df       	rcall	.-374    	; 0x5ac <LL_UpdateClass>
     722:	0b c0       	rjmp	.+22     	; 0x73a <main+0x15a>
     724:	8b e3       	ldi	r24, 0x3B	; 59
     726:	e8 1a       	sub	r14, r24
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	f8 0a       	sbc	r15, r24
     72c:	80 e3       	ldi	r24, 0x30	; 48
     72e:	e8 16       	cp	r14, r24
				{
					LL_UpdateClass(temp, WHITE);
     730:	f1 04       	cpc	r15, r1
     732:	18 f4       	brcc	.+6      	; 0x73a <main+0x15a>
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	ce 01       	movw	r24, r28
				else
				{
					// Unknown non-magnetic object
				}
			}
			temp = LL_Next(temp);
     738:	39 df       	rcall	.-398    	; 0x5ac <LL_UpdateClass>
     73a:	ce 01       	movw	r24, r28
     73c:	f6 de       	rcall	.-532    	; 0x52a <LL_Next>
     73e:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
				
		list* temp = HEAD;
		uint16_t reflVal; 

		while(temp){
     740:	89 2b       	or	r24, r25
     742:	09 f0       	breq	.+2      	; 0x746 <main+0x166>
     744:	bd cf       	rjmp	.-134    	; 0x6c0 <main+0xe0>
     746:	af cf       	rjmp	.-162    	; 0x6a6 <main+0xc6>

00000748 <__vector_default>:
  	}
	return 0;
}

ISR(BADISR_vect)
{
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     752:	8a ea       	ldi	r24, 0xAA	; 170
     754:	88 b9       	out	0x08, r24	; 8
     756:	fe cf       	rjmp	.-4      	; 0x754 <__vector_default+0xc>

00000758 <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     758:	84 b5       	in	r24, 0x24	; 36
     75a:	83 68       	ori	r24, 0x83	; 131
     75c:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     75e:	85 b5       	in	r24, 0x25	; 37
     760:	83 60       	ori	r24, 0x03	; 3
     762:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     764:	80 e8       	ldi	r24, 0x80	; 128
     766:	87 bd       	out	0x27, r24	; 39
     768:	08 95       	ret

0000076a <PWM>:
}

void PWM(const int dutyCycle)
{
    //OCR0A = 90;
	OCR0A = 0x80;
     76a:	20 e8       	ldi	r18, 0x80	; 128
     76c:	27 bd       	out	0x27, r18	; 39
	if (dutyCycle) 
     76e:	89 2b       	or	r24, r25
     770:	31 f0       	breq	.+12     	; 0x77e <PWM+0x14>
	{
		gMotorOn = 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <gMotorOn>
		PORTB = ~0x0E;
     778:	81 ef       	ldi	r24, 0xF1	; 241
     77a:	85 b9       	out	0x05, r24	; 5
     77c:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     77e:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <gMotorOn>
		PORTB = ~0x0F;
     782:	80 ef       	ldi	r24, 0xF0	; 240
     784:	85 b9       	out	0x05, r24	; 5
     786:	08 95       	ret

00000788 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	stepper._stepNum = 0;
     788:	eb e5       	ldi	r30, 0x5B	; 91
     78a:	f3 e0       	ldi	r31, 0x03	; 3
     78c:	10 82       	st	Z, r1
	stepper.direction = 1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     792:	12 82       	std	Z+2, r1	; 0x02
	//Rotate 200 Steps to find the hall sensor
	stepper.current = 200;
     794:	88 ec       	ldi	r24, 0xC8	; 200
     796:	83 83       	std	Z+3, r24	; 0x03
	stepper._targetStep = 0;
     798:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     79a:	15 82       	std	Z+5, r1	; 0x05
	stepper.next = 0;
     79c:	16 82       	std	Z+6, r1	; 0x06
	stepper._isInitiated = 0;
     79e:	10 86       	std	Z+8, r1	; 0x08
	stepper._accellStep = 0;
     7a0:	11 86       	std	Z+9, r1	; 0x09
	PORTA = 0x30;
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	82 b9       	out	0x02, r24	; 2
	cli();
     7a6:	f8 94       	cli
	//Initial delay of 20ms
	OCR2A = 0x94;
     7a8:	84 e9       	ldi	r24, 0x94	; 148
     7aa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     7ae:	e0 eb       	ldi	r30, 0xB0	; 176
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	80 81       	ld	r24, Z
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     7b8:	e0 e7       	ldi	r30, 0x70	; 112
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	82 60       	ori	r24, 0x02	; 2
     7c0:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     7c2:	e1 eb       	ldi	r30, 0xB1	; 177
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	87 60       	ori	r24, 0x07	; 7
     7ca:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	sei();
     7cc:	78 94       	sei
     7ce:	08 95       	ret

000007d0 <STEPPER_NumSteps>:
	// enable interrupts
}

uint16_t STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	86 1b       	sub	r24, r22
     7d4:	91 09       	sbc	r25, r1
	if (steps >= 0)
     7d6:	52 f0       	brmi	.+20     	; 0x7ec <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     7d8:	85 36       	cpi	r24, 0x65	; 101
     7da:	91 05       	cpc	r25, r1
     7dc:	8c f0       	brlt	.+34     	; 0x800 <STEPPER_NumSteps+0x30>
     7de:	24 e6       	ldi	r18, 0x64	; 100
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	a9 01       	movw	r20, r18
     7e4:	48 1b       	sub	r20, r24
     7e6:	59 0b       	sbc	r21, r25
     7e8:	ca 01       	movw	r24, r20
     7ea:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     7ec:	8c 39       	cpi	r24, 0x9C	; 156
     7ee:	5f ef       	ldi	r21, 0xFF	; 255
     7f0:	95 07       	cpc	r25, r21
     7f2:	34 f0       	brlt	.+12     	; 0x800 <STEPPER_NumSteps+0x30>
     7f4:	2c e9       	ldi	r18, 0x9C	; 156
     7f6:	3f ef       	ldi	r19, 0xFF	; 255
     7f8:	a9 01       	movw	r20, r18
     7fa:	48 1b       	sub	r20, r24
     7fc:	59 0b       	sbc	r21, r25
     7fe:	ca 01       	movw	r24, r20
	}
	return steps;
}
     800:	08 95       	ret

00000802 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     80a:	cb e5       	ldi	r28, 0x5B	; 91
     80c:	d3 e0       	ldi	r29, 0x03	; 3
     80e:	0a 81       	ldd	r16, Y+2	; 0x02
     810:	6b 81       	ldd	r22, Y+3	; 0x03
     812:	80 2f       	mov	r24, r16
     814:	dd df       	rcall	.-70     	; 0x7d0 <STEPPER_NumSteps>
     816:	18 2f       	mov	r17, r24
     818:	8c 83       	std	Y+4, r24	; 0x04
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     81a:	60 2f       	mov	r22, r16
     81c:	8e 81       	ldd	r24, Y+6	; 0x06
     81e:	d8 df       	rcall	.-80     	; 0x7d0 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     820:	24 e0       	ldi	r18, 0x04	; 4
     822:	29 83       	std	Y+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     824:	9c 01       	movw	r18, r24
     826:	12 9f       	mul	r17, r18
     828:	c0 01       	movw	r24, r0
     82a:	13 9f       	mul	r17, r19
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	89 2f       	mov	r24, r25
     832:	80 95       	com	r24
     834:	88 1f       	adc	r24, r24
     836:	88 27       	eor	r24, r24
     838:	88 1f       	adc	r24, r24
     83a:	8f 83       	std	Y+7, r24	; 0x07

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
	stepper._currentStep = 0;
     83c:	1d 82       	std	Y+5, r1	; 0x05
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	0f 91       	pop	r16
     846:	08 95       	ret

00000848 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
	cli();
     84c:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     84e:	cb e5       	ldi	r28, 0x5B	; 91
     850:	d3 e0       	ldi	r29, 0x03	; 3
     852:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     854:	6e 83       	std	Y+6, r22	; 0x06
	STEPPER_Rotate();
     856:	d5 df       	rcall	.-86     	; 0x802 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     858:	e9 85       	ldd	r30, Y+9	; 0x09
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e7 5f       	subi	r30, 0xF7	; 247
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 81       	ld	r24, Z
     862:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     866:	78 94       	sei
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	0b b6       	in	r0, 0x3b	; 59
     87a:	0f 92       	push	r0
     87c:	2f 93       	push	r18
     87e:	8f 93       	push	r24
     880:	9f 93       	push	r25
     882:	af 93       	push	r26
     884:	bf 93       	push	r27
     886:	ef 93       	push	r30
     888:	ff 93       	push	r31
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	00 d0       	rcall	.+0      	; 0x890 <__vector_13+0x22>
     890:	00 d0       	rcall	.+0      	; 0x892 <__vector_13+0x24>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     896:	86 e3       	ldi	r24, 0x36	; 54
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	a0 e0       	ldi	r26, 0x00	; 0
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	9e e2       	ldi	r25, 0x2E	; 46
     8a0:	ad e2       	ldi	r26, 0x2D	; 45
     8a2:	b5 e3       	ldi	r27, 0x35	; 53
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	9a 83       	std	Y+2, r25	; 0x02
     8a8:	ab 83       	std	Y+3, r26	; 0x03
     8aa:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._isInitiated == 0)
     8ac:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <stepper+0x8>
     8b0:	81 11       	cpse	r24, r1
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <__vector_13+0x62>
	{
		if ((PINE && 0x04) == 0)
     8b4:	8c b1       	in	r24, 0x0c	; 12
     8b6:	81 11       	cpse	r24, r1
     8b8:	0b c0       	rjmp	.+22     	; 0x8d0 <__vector_13+0x62>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     8ba:	eb e5       	ldi	r30, 0x5B	; 91
     8bc:	f3 e0       	ldi	r31, 0x03	; 3
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 87       	std	Z+8, r24	; 0x08
			stepper._stepNum = 0;
     8c2:	10 82       	st	Z, r1
			stepper.direction = 1;
     8c4:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     8c6:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
			stepper._targetStep = 0;
     8c8:	14 82       	std	Z+4, r1	; 0x04
			stepper._currentStep = 0;
     8ca:	15 82       	std	Z+5, r1	; 0x05
			stepper.next = 0;
     8cc:	16 82       	std	Z+6, r1	; 0x06
     8ce:	5c c0       	rjmp	.+184    	; 0x988 <__vector_13+0x11a>
		}
	}

	if (stepper._currentStep < stepper._targetStep)
     8d0:	eb e5       	ldi	r30, 0x5B	; 91
     8d2:	f3 e0       	ldi	r31, 0x03	; 3
     8d4:	95 81       	ldd	r25, Z+5	; 0x05
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	98 17       	cp	r25, r24
     8da:	08 f0       	brcs	.+2      	; 0x8de <__vector_13+0x70>
     8dc:	53 c0       	rjmp	.+166    	; 0x984 <__vector_13+0x116>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     8de:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <stepper+0x1>
     8e2:	84 30       	cpi	r24, 0x04	; 4
     8e4:	51 f4       	brne	.+20     	; 0x8fa <__vector_13+0x8c>
     8e6:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <stepper>
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	e8 0f       	add	r30, r24
     8f4:	f1 1d       	adc	r31, r1
     8f6:	80 81       	ld	r24, Z
     8f8:	0d c0       	rjmp	.+26     	; 0x914 <__vector_13+0xa6>
     8fa:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <stepper>
     8fe:	e3 e0       	ldi	r30, 0x03	; 3
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	e8 1b       	sub	r30, r24
     904:	f1 09       	sbc	r31, r1
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	8c 0f       	add	r24, r28
     90c:	9d 1f       	adc	r25, r29
     90e:	e8 0f       	add	r30, r24
     910:	f9 1f       	adc	r31, r25
     912:	80 81       	ld	r24, Z
     914:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     916:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <stepper>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	11 f0       	breq	.+4      	; 0x922 <__vector_13+0xb4>
     91e:	8f 5f       	subi	r24, 0xFF	; 255
     920:	01 c0       	rjmp	.+2      	; 0x924 <__vector_13+0xb6>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	eb e5       	ldi	r30, 0x5B	; 91
     926:	f3 e0       	ldi	r31, 0x03	; 3
     928:	80 83       	st	Z, r24

		stepper._currentStep++;
     92a:	25 81       	ldd	r18, Z+5	; 0x05
     92c:	2f 5f       	subi	r18, 0xFF	; 255
     92e:	25 83       	std	Z+5, r18	; 0x05

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     930:	84 81       	ldd	r24, Z+4	; 0x04
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	82 1b       	sub	r24, r18
     936:	91 09       	sbc	r25, r1
     938:	06 97       	sbiw	r24, 0x06	; 6
     93a:	6c f4       	brge	.+26     	; 0x956 <__vector_13+0xe8>
     93c:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <stepper+0x9>
     940:	e8 2f       	mov	r30, r24
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	e7 5f       	subi	r30, 0xF7	; 247
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	90 81       	ld	r25, Z
     94a:	94 39       	cpi	r25, 0x94	; 148
     94c:	20 f4       	brcc	.+8      	; 0x956 <__vector_13+0xe8>
		{
			stepper._accellStep--;
     94e:	81 50       	subi	r24, 0x01	; 1
     950:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <stepper+0x9>
     954:	0e c0       	rjmp	.+28     	; 0x972 <__vector_13+0x104>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     956:	26 30       	cpi	r18, 0x06	; 6
     958:	60 f0       	brcs	.+24     	; 0x972 <__vector_13+0x104>
     95a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <stepper+0x9>
     95e:	e8 2f       	mov	r30, r24
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	e7 5f       	subi	r30, 0xF7	; 247
     964:	fe 4f       	sbci	r31, 0xFE	; 254
     966:	90 81       	ld	r25, Z
     968:	91 34       	cpi	r25, 0x41	; 65
     96a:	18 f0       	brcs	.+6      	; 0x972 <__vector_13+0x104>
		{
			stepper._accellStep++;
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <stepper+0x9>
		}
		OCR2A = accell[stepper._accellStep];
     972:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <stepper+0x9>
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e7 5f       	subi	r30, 0xF7	; 247
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	80 81       	ld	r24, Z
     97e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     982:	1d c0       	rjmp	.+58     	; 0x9be <__vector_13+0x150>
	}

	else if (stepper._currentStep == stepper._targetStep)
     984:	98 13       	cpse	r25, r24
     986:	1b c0       	rjmp	.+54     	; 0x9be <__vector_13+0x150>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     988:	eb e5       	ldi	r30, 0x5B	; 91
     98a:	f3 e0       	ldi	r31, 0x03	; 3
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	83 83       	std	Z+3, r24	; 0x03
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     990:	e7 81       	ldd	r30, Z+7	; 0x07
     992:	e1 11       	cpse	r30, r1
     994:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <stepper+0x9>
     998:	ab e5       	ldi	r26, 0x5B	; 91
     99a:	b3 e0       	ldi	r27, 0x03	; 3
     99c:	19 96       	adiw	r26, 0x09	; 9
     99e:	ec 93       	st	X, r30
     9a0:	19 97       	sbiw	r26, 0x09	; 9
		OCR2A = accell[stepper._accellStep];
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	e7 5f       	subi	r30, 0xF7	; 247
     9a6:	fe 4f       	sbci	r31, 0xFE	; 254
     9a8:	80 81       	ld	r24, Z
     9aa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (stepper._willContinue) ? PORTA : 0x00;
     9ae:	17 96       	adiw	r26, 0x07	; 7
     9b0:	8c 91       	ld	r24, X
     9b2:	88 23       	and	r24, r24
     9b4:	11 f0       	breq	.+4      	; 0x9ba <__vector_13+0x14c>
     9b6:	82 b1       	in	r24, 0x02	; 2
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__vector_13+0x14e>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	82 b9       	out	0x02, r24	; 2
	}
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	2f 91       	pop	r18
     9d8:	0f 90       	pop	r0
     9da:	0b be       	out	0x3b, r0	; 59
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <SYS_Init>:

#include "sys.h"
#include "timer.h"

void SYS_Init()
{
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	cf 92       	push	r12
     9ec:	df 92       	push	r13
     9ee:	ef 92       	push	r14
     9f0:	ff 92       	push	r15
     9f2:	0f 93       	push	r16
     9f4:	1f 93       	push	r17
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	e2 97       	sbiw	r28, 0x32	; 50
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	// Initialize system
	
	cli();
     a0a:	f8 94       	cli
	
	CLKPR = (1<<CLKPCE);
     a0c:	e1 e6       	ldi	r30, 0x61	; 97
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 e8       	ldi	r24, 0x80	; 128
     a12:	80 83       	st	Z, r24
	CLKPR = 0;
     a14:	10 82       	st	Z, r1
	
	UART_Init();
     a16:	8c d2       	rcall	.+1304   	; 0xf30 <UART_Init>
	GPIO_Init();
     a18:	d8 dd       	rcall	.-1104   	; 0x5ca <GPIO_Init>
	TIMER_Init();
     a1a:	0d d2       	rcall	.+1050   	; 0xe36 <TIMER_Init>
	PWM_Init();
     a1c:	9d de       	rcall	.-710    	; 0x758 <PWM_Init>
     a1e:	5b db       	rcall	.-2378   	; 0xd6 <ADC_Init>
	ADC_Init();
     a20:	b3 de       	rcall	.-666    	; 0x788 <STEPPER_Init>
     a22:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <g_ADCCount+0x1>
	STEPPER_Init();	
     a26:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <g_ADCCount>
	g_ADCCount = 0;
     a2a:	84 e1       	ldi	r24, 0x14	; 20
     a2c:	ef eb       	ldi	r30, 0xBF	; 191
     a2e:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     a30:	df 01       	movw	r26, r30
     a32:	1d 92       	st	X+, r1
     a34:	8a 95       	dec	r24
     a36:	e9 f7       	brne	.-6      	; 0xa32 <SYS_Init+0x4c>
     a38:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <g_ADCFlag>
     a3c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <HEAD+0x1>
	g_ADCFlag = 0;
     a40:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <HEAD>
// 	extern list* STAGE2;
// 	extern list* TAIL;
//	extern list* FRONT;	
	itemNode* initNode = NULL;
	
	HEAD = NULL;
     a44:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <TAIL+0x1>
     a48:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <TAIL>
	TAIL = NULL;
     a4c:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <STAGE1+0x1>
     a50:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <STAGE1>
	STAGE1 = NULL;
     a54:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <STAGE2+0x1>
     a58:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <STAGE2>
	STAGE2 = NULL;
     a5c:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <FRONT+0x1>
     a60:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <FRONT>
	FRONT = NULL;
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	44 e0       	ldi	r20, 0x04	; 4
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     a68:	6f ef       	ldi	r22, 0xFF	; 255
     a6a:	89 ee       	ldi	r24, 0xE9	; 233
     a6c:	9d ef       	ldi	r25, 0xFD	; 253
     a6e:	35 dd       	rcall	.-1430   	; 0x4da <LL_ItemInit>
     a70:	4c dd       	rcall	.-1384   	; 0x50a <LL_ItemListInit>
     a72:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     a76:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <HEAD>
     a7a:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <FRONT+0x1>
     a7e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <FRONT>
	FRONT = HEAD;
     a82:	1b ec       	ldi	r17, 0xCB	; 203
     a84:	0f 2e       	mov	r0, r31
     a86:	f9 eb       	ldi	r31, 0xB9	; 185
     a88:	ef 2e       	mov	r14, r31
     a8a:	fd ef       	ldi	r31, 0xFD	; 253
     a8c:	ff 2e       	mov	r15, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	44 e0       	ldi	r20, 0x04	; 4
	for(int i = 47; i > 0; i--)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     a94:	61 2f       	mov	r22, r17
     a96:	c7 01       	movw	r24, r14
     a98:	20 dd       	rcall	.-1472   	; 0x4da <LL_ItemInit>
     a9a:	bc 01       	movw	r22, r24
     a9c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     aa0:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     aa4:	46 dd       	rcall	.-1396   	; 0x532 <LL_AddBack>
     aa6:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <TAIL+0x1>
     aaa:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <TAIL>
     aae:	bf ef       	ldi	r27, 0xFF	; 255
     ab0:	eb 1a       	sub	r14, r27
     ab2:	fb 0a       	sbc	r15, r27
     ab4:	1f 5f       	subi	r17, 0xFF	; 255
     ab6:	1a 3f       	cpi	r17, 0xFA	; 250
     ab8:	59 f7       	brne	.-42     	; 0xa90 <SYS_Init+0xaa>
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;
	for(int i = 47; i > 0; i--)
     aba:	05 e0       	ldi	r16, 0x05	; 5
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	45 e0       	ldi	r20, 0x05	; 5
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     ac2:	6a ef       	ldi	r22, 0xFA	; 250
     ac4:	88 ee       	ldi	r24, 0xE8	; 232
     ac6:	9d ef       	ldi	r25, 0xFD	; 253
     ac8:	08 dd       	rcall	.-1520   	; 0x4da <LL_ItemInit>
     aca:	bc 01       	movw	r22, r24
     acc:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <HEAD>
		LL_AddBack(HEAD,initNode);
     ad0:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <HEAD+0x1>
     ad4:	2e dd       	rcall	.-1444   	; 0x532 <LL_AddBack>
     ad6:	01 50       	subi	r16, 0x01	; 1
     ad8:	11 09       	sbc	r17, r1
     ada:	89 f7       	brne	.-30     	; 0xabe <SYS_Init+0xd8>
     adc:	00 91 bd 02 	lds	r16, 0x02BD	; 0x8002bd <TAIL>
	for(int i = 47; i > 0; i--)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
     ae0:	10 91 be 02 	lds	r17, 0x02BE	; 0x8002be <TAIL+0x1>
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}
	
	char temp[50];
	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
     ae4:	f8 01       	movw	r30, r16
     ae6:	b2 80       	ldd	r11, Z+2	; 0x02
     ae8:	a3 80       	ldd	r10, Z+3	; 0x03
     aea:	d0 90 b9 02 	lds	r13, 0x02B9	; 0x8002b9 <FRONT>
     aee:	c0 90 ba 02 	lds	r12, 0x02BA	; 0x8002ba <FRONT+0x1>
     af2:	f0 90 b7 02 	lds	r15, 0x02B7	; 0x8002b7 <HEAD>
     af6:	e0 90 b8 02 	lds	r14, 0x02B8	; 0x8002b8 <HEAD+0x1>
     afa:	8f 2d       	mov	r24, r15
     afc:	9e 2d       	mov	r25, r14
     afe:	2a dd       	rcall	.-1452   	; 0x554 <LL_Size>
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	1f 93       	push	r17
     b0a:	0f 93       	push	r16
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	1f 92       	push	r1
     b12:	8f 93       	push	r24
     b14:	81 eb       	ldi	r24, 0xB1	; 177
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	8e 01       	movw	r16, r28
     b1e:	0f 5f       	subi	r16, 0xFF	; 255
     b20:	1f 4f       	sbci	r17, 0xFF	; 255
     b22:	1f 93       	push	r17
     b24:	0f 93       	push	r16
     b26:	6d d3       	rcall	.+1754   	; 0x1202 <sprintf>
     b28:	c8 01       	movw	r24, r16
     b2a:	1a d2       	rcall	.+1076   	; 0xf60 <UART_SendString>
	UART_SendString(temp);
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	de bf       	out	0x3e, r29	; 62
	

}
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	cd bf       	out	0x3d, r28	; 61
     b36:	e2 96       	adiw	r28, 0x32	; 50
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	08 95       	ret

00000b58 <SYS_Pause>:
     b58:	3f 92       	push	r3
     b5a:	4f 92       	push	r4
     b5c:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     b5e:	6f 92       	push	r6
     b60:	7f 92       	push	r7
     b62:	8f 92       	push	r8
     b64:	9f 92       	push	r9
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	c8 5c       	subi	r28, 0xC8	; 200
     b80:	d1 09       	sbc	r29, r1
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	f8 2e       	mov	r15, r24
     b8e:	e9 2e       	mov	r14, r25
	cli();
     b90:	f8 94       	cli
	PWM(0);
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	e9 dd       	rcall	.-1070   	; 0x76a <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     b98:	00 91 b9 02 	lds	r16, 0x02B9	; 0x8002b9 <FRONT>
     b9c:	10 91 ba 02 	lds	r17, 0x02BA	; 0x8002ba <FRONT+0x1>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	8e ed       	ldi	r24, 0xDE	; 222
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	ce 01       	movw	r24, r28
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	26 d3       	rcall	.+1612   	; 0x1202 <sprintf>
	
	while (LL_GetClass(temp) != END_OF_LIST)
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     bc2:	e1 2c       	mov	r14, r1
     bc4:	f1 2c       	mov	r15, r1
	
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     bc6:	0f 2e       	mov	r0, r31
     bc8:	f9 ef       	ldi	r31, 0xF9	; 249
     bca:	af 2e       	mov	r10, r31
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	bf 2e       	mov	r11, r31
     bd0:	f0 2d       	mov	r31, r0
     bd2:	6e 01       	movw	r12, r28
     bd4:	87 e9       	ldi	r24, 0x97	; 151
     bd6:	c8 0e       	add	r12, r24
     bd8:	d1 1c       	adc	r13, r1
	list* temp = FRONT;
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     bda:	27 c0       	rjmp	.+78     	; 0xc2a <SYS_Pause+0xd2>
	{
		char listbuff[50];
		c++;
     bdc:	9f ef       	ldi	r25, 0xFF	; 255
     bde:	e9 1a       	sub	r14, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     be0:	f9 0a       	sbc	r15, r25
     be2:	c8 01       	movw	r24, r16
     be4:	ed dc       	rcall	.-1574   	; 0x5c0 <LL_GetStatus>
     be6:	78 2e       	mov	r7, r24
     be8:	c8 01       	movw	r24, r16
     bea:	c5 dc       	rcall	.-1654   	; 0x576 <LL_GetClass>
     bec:	88 2e       	mov	r8, r24
     bee:	c8 01       	movw	r24, r16
     bf0:	cd dc       	rcall	.-1638   	; 0x58c <LL_GetMag>
     bf2:	98 2e       	mov	r9, r24
     bf4:	c8 01       	movw	r24, r16
     bf6:	c4 dc       	rcall	.-1656   	; 0x580 <LL_GetRefl>
     bf8:	1f 92       	push	r1
     bfa:	7f 92       	push	r7
     bfc:	1f 92       	push	r1
     bfe:	8f 92       	push	r8
     c00:	1f 92       	push	r1
     c02:	9f 92       	push	r9
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	ff 92       	push	r15
     c0a:	ef 92       	push	r14
     c0c:	bf 92       	push	r11
     c0e:	af 92       	push	r10
     c10:	df 92       	push	r13
     c12:	cf 92       	push	r12
		UART_SendString(listbuff);
     c14:	f6 d2       	rcall	.+1516   	; 0x1202 <sprintf>
     c16:	c6 01       	movw	r24, r12
     c18:	a3 d1       	rcall	.+838    	; 0xf60 <UART_SendString>
		temp = LL_Next(temp);	
     c1a:	c8 01       	movw	r24, r16
     c1c:	86 dc       	rcall	.-1780   	; 0x52a <LL_Next>
     c1e:	8c 01       	movw	r16, r24
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
	list* temp = FRONT;
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     c2a:	c8 01       	movw	r24, r16
     c2c:	a4 dc       	rcall	.-1720   	; 0x576 <LL_GetClass>
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	a9 f6       	brne	.-86     	; 0xbdc <SYS_Pause+0x84>
     c32:	0f 2e       	mov	r0, r31
     c34:	f7 e0       	ldi	r31, 0x07	; 7
     c36:	cf 2e       	mov	r12, r31
     c38:	f3 e0       	ldi	r31, 0x03	; 3
     c3a:	df 2e       	mov	r13, r31
     c3c:	f0 2d       	mov	r31, r0
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	0f 2e       	mov	r0, r31
	}
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     c44:	fd e2       	ldi	r31, 0x2D	; 45
     c46:	af 2e       	mov	r10, r31
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	bf 2e       	mov	r11, r31
     c4c:	f0 2d       	mov	r31, r0
     c4e:	7e 01       	movw	r14, r28
     c50:	f7 e9       	ldi	r31, 0x97	; 151
     c52:	ef 0e       	add	r14, r31
     c54:	f1 1c       	adc	r15, r1
     c56:	f6 01       	movw	r30, r12
     c58:	80 85       	ldd	r24, Z+8	; 0x08
     c5a:	1f 92       	push	r1
     c5c:	8f 93       	push	r24
     c5e:	1f 93       	push	r17
     c60:	0f 93       	push	r16
     c62:	bf 92       	push	r11
     c64:	af 92       	push	r10
     c66:	ff 92       	push	r15
     c68:	ef 92       	push	r14
     c6a:	cb d2       	rcall	.+1430   	; 0x1202 <sprintf>
		UART_SendString(statebuff);
     c6c:	c7 01       	movw	r24, r14
     c6e:	78 d1       	rcall	.+752    	; 0xf60 <UART_SendString>
     c70:	0f 5f       	subi	r16, 0xFF	; 255
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	for(int i = 0; i < 7; i++)
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	f9 e0       	ldi	r31, 0x09	; 9
     c76:	cf 0e       	add	r12, r31
     c78:	d1 1c       	adc	r13, r1
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	07 30       	cpi	r16, 0x07	; 7
     c86:	11 05       	cpc	r17, r1
     c88:	31 f7       	brne	.-52     	; 0xc56 <SYS_Pause+0xfe>
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     c8a:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <STAGE2>
     c8e:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <STAGE2+0x1>
     c92:	76 dc       	rcall	.-1812   	; 0x580 <LL_GetRefl>
     c94:	48 2e       	mov	r4, r24
     c96:	39 2e       	mov	r3, r25
     c98:	60 90 4f 03 	lds	r6, 0x034F	; 0x80034f <STAGE2>
     c9c:	50 90 50 03 	lds	r5, 0x0350	; 0x800350 <STAGE2+0x1>
     ca0:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <STAGE1>
     ca4:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <STAGE1+0x1>
     ca8:	71 dc       	rcall	.-1822   	; 0x58c <LL_GetMag>
     caa:	78 2e       	mov	r7, r24
     cac:	90 90 05 03 	lds	r9, 0x0305	; 0x800305 <STAGE1>
     cb0:	80 90 06 03 	lds	r8, 0x0306	; 0x800306 <STAGE1+0x1>
     cb4:	00 91 bd 02 	lds	r16, 0x02BD	; 0x8002bd <TAIL>
     cb8:	10 91 be 02 	lds	r17, 0x02BE	; 0x8002be <TAIL+0x1>
     cbc:	f8 01       	movw	r30, r16
     cbe:	b2 80       	ldd	r11, Z+2	; 0x02
     cc0:	a3 80       	ldd	r10, Z+3	; 0x03
     cc2:	d0 90 b9 02 	lds	r13, 0x02B9	; 0x8002b9 <FRONT>
     cc6:	c0 90 ba 02 	lds	r12, 0x02BA	; 0x8002ba <FRONT+0x1>
     cca:	f0 90 b7 02 	lds	r15, 0x02B7	; 0x8002b7 <HEAD>
     cce:	e0 90 b8 02 	lds	r14, 0x02B8	; 0x8002b8 <HEAD+0x1>
     cd2:	8f 2d       	mov	r24, r15
     cd4:	9e 2d       	mov	r25, r14
     cd6:	3e dc       	rcall	.-1924   	; 0x554 <LL_Size>
     cd8:	3f 92       	push	r3
     cda:	4f 92       	push	r4
     cdc:	5f 92       	push	r5
     cde:	6f 92       	push	r6
     ce0:	1f 92       	push	r1
     ce2:	7f 92       	push	r7
     ce4:	8f 92       	push	r8
     ce6:	9f 92       	push	r9
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	1f 93       	push	r17
     cf2:	0f 93       	push	r16
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	1f 92       	push	r1
     cfa:	8f 93       	push	r24
     cfc:	82 e4       	ldi	r24, 0x42	; 66
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	8e 01       	movw	r16, r28
     d06:	0b 59       	subi	r16, 0x9B	; 155
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	1f 93       	push	r17
     d0c:	0f 93       	push	r16
     d0e:	79 d2       	rcall	.+1266   	; 0x1202 <sprintf>
	UART_SendString(anotherbuff);
     d10:	c8 01       	movw	r24, r16
     d12:	26 d1       	rcall	.+588    	; 0xf60 <UART_SendString>
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     d20:	83 70       	andi	r24, 0x03	; 3
     d22:	e9 f7       	brne	.-6      	; 0xd1e <SYS_Pause+0x1c6>
     d24:	87 e8       	ldi	r24, 0x87	; 135
		{
			UART_SendString("Starting System!\r\n");
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	1b d1       	rcall	.+566    	; 0xf60 <UART_SendString>
     d2a:	80 e8       	ldi	r24, 0x80	; 128
     d2c:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     d2e:	1d dd       	rcall	.-1478   	; 0x76a <PWM>
     d30:	78 94       	sei
     d32:	c8 53       	subi	r28, 0x38	; 56
     d34:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     d36:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
}
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	bf 90       	pop	r11
     d52:	af 90       	pop	r10
     d54:	9f 90       	pop	r9
     d56:	8f 90       	pop	r8
     d58:	7f 90       	pop	r7
     d5a:	6f 90       	pop	r6
     d5c:	5f 90       	pop	r5
     d5e:	4f 90       	pop	r4
     d60:	3f 90       	pop	r3
     d62:	08 95       	ret

00000d64 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	0b b6       	in	r0, 0x3b	; 59
     d70:	0f 92       	push	r0
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     d96:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_timer_tick>
     d9a:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_timer_tick+0x1>
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <_timer_tick+0x1>
     da4:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_timer_tick>
     da8:	c7 e0       	ldi	r28, 0x07	; 7
     daa:	d3 e0       	ldi	r29, 0x03	; 3
     dac:	0f 2e       	mov	r0, r31
     dae:	ff e4       	ldi	r31, 0x4F	; 79
     db0:	ef 2e       	mov	r14, r31
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	ff 2e       	mov	r15, r31
     db6:	f0 2d       	mov	r31, r0
     db8:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     dba:	ec 81       	ldd	r30, Y+4	; 0x04
     dbc:	fd 81       	ldd	r31, Y+5	; 0x05
     dbe:	30 97       	sbiw	r30, 0x00	; 0
     dc0:	e9 f0       	breq	.+58     	; 0xdfc <__vector_17+0x98>
     dc2:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <_timer_tick>
     dc6:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <_timer_tick+0x1>
     dca:	28 81       	ld	r18, Y
     dcc:	39 81       	ldd	r19, Y+1	; 0x01
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	a1 f4       	brne	.+40     	; 0xdfc <__vector_17+0x98>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     dd4:	88 85       	ldd	r24, Y+8	; 0x08
     dd6:	82 30       	cpi	r24, 0x02	; 2
     dd8:	19 f4       	brne	.+6      	; 0xde0 <__vector_17+0x7c>
     dda:	8e 81       	ldd	r24, Y+6	; 0x06
     ddc:	9f 81       	ldd	r25, Y+7	; 0x07
     dde:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     de0:	d8 01       	movw	r26, r16
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	8d 91       	ld	r24, X+
     de6:	9c 91       	ld	r25, X
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	39 f0       	breq	.+14     	; 0xdfc <__vector_17+0x98>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     dee:	2d 91       	ld	r18, X+
     df0:	3c 91       	ld	r19, X
     df2:	11 97       	sbiw	r26, 0x01	; 1
     df4:	82 0f       	add	r24, r18
     df6:	93 1f       	adc	r25, r19
     df8:	8d 93       	st	X+, r24
     dfa:	9c 93       	st	X, r25
     dfc:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     dfe:	ce 15       	cp	r28, r14
     e00:	df 05       	cpc	r29, r15
     e02:	d1 f6       	brne	.-76     	; 0xdb8 <__vector_17+0x54>
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	//PORTC ^= 0xFE;
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	ff 90       	pop	r15
     e26:	ef 90       	pop	r14
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     e36:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e3a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     e3e:	80 ee       	ldi	r24, 0xE0	; 224
     e40:	9d e0       	ldi	r25, 0x0D	; 13
     e42:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e46:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     e4a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     e4e:	89 e0       	ldi	r24, 0x09	; 9
     e50:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A) ;   // Enable timer1 output compare interrupt
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     e5a:	88 e4       	ldi	r24, 0x48	; 72
     e5c:	e7 e0       	ldi	r30, 0x07	; 7
     e5e:	f3 e0       	ldi	r31, 0x03	; 3
     e60:	df 01       	movw	r26, r30
     e62:	1d 92       	st	X+, r1
     e64:	8a 95       	dec	r24
     e66:	e9 f7       	brne	.-6      	; 0xe62 <TIMER_Init+0x2c>

	return 0;
}
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	08 95       	ret

00000e6e <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     e78:	60 91 0b 03 	lds	r22, 0x030B	; 0x80030b <_timer+0x4>
     e7c:	70 91 0c 03 	lds	r23, 0x030C	; 0x80030c <_timer+0x5>
     e80:	67 2b       	or	r22, r23
     e82:	09 f4       	brne	.+2      	; 0xe86 <TIMER_Create+0x18>
     e84:	49 c0       	rjmp	.+146    	; 0xf18 <TIMER_Create+0xaa>
     e86:	e7 e0       	ldi	r30, 0x07	; 7
     e88:	f3 e0       	ldi	r31, 0x03	; 3
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     e8a:	a1 e0       	ldi	r26, 0x01	; 1
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     e8e:	c5 85       	ldd	r28, Z+13	; 0x0d
     e90:	d6 85       	ldd	r29, Z+14	; 0x0e
     e92:	cd 2b       	or	r28, r29
     e94:	09 f4       	brne	.+2      	; 0xe98 <TIMER_Create+0x2a>
     e96:	42 c0       	rjmp	.+132    	; 0xf1c <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     e98:	11 96       	adiw	r26, 0x01	; 1
     e9a:	39 96       	adiw	r30, 0x09	; 9
     e9c:	a8 30       	cpi	r26, 0x08	; 8
     e9e:	b1 05       	cpc	r27, r1
     ea0:	b1 f7       	brne	.-20     	; 0xe8e <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	3f c0       	rjmp	.+126    	; 0xf26 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     ea8:	fd 01       	movw	r30, r26
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	ee 0f       	add	r30, r30
     eb4:	ff 1f       	adc	r31, r31
     eb6:	ea 0f       	add	r30, r26
     eb8:	fb 1f       	adc	r31, r27
     eba:	e9 5f       	subi	r30, 0xF9	; 249
     ebc:	fc 4f       	sbci	r31, 0xFC	; 252
     ebe:	93 83       	std	Z+3, r25	; 0x03
     ec0:	82 83       	std	Z+2, r24	; 0x02
     ec2:	0d c0       	rjmp	.+26     	; 0xede <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     ec4:	fd 01       	movw	r30, r26
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ea 0f       	add	r30, r26
     ed4:	fb 1f       	adc	r31, r27
     ed6:	e9 5f       	subi	r30, 0xF9	; 249
     ed8:	fc 4f       	sbci	r31, 0xFC	; 252
     eda:	13 82       	std	Z+3, r1	; 0x03
     edc:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     ede:	fd 01       	movw	r30, r26
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ea 0f       	add	r30, r26
     eee:	fb 1f       	adc	r31, r27
     ef0:	e9 5f       	subi	r30, 0xF9	; 249
     ef2:	fc 4f       	sbci	r31, 0xFC	; 252
     ef4:	55 83       	std	Z+5, r21	; 0x05
     ef6:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     ef8:	37 83       	std	Z+7, r19	; 0x07
     efa:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     efc:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_timer_tick>
     f00:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <_timer_tick+0x1>
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	80 83       	st	Z, r24
			_timer[i].state = READY;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	80 87       	std	Z+8, r24	; 0x08
     f10:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     f12:	8a 2f       	mov	r24, r26
     f14:	9b 2f       	mov	r25, r27
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     f18:	a0 e0       	ldi	r26, 0x00	; 0
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     f1c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f1e:	f8 94       	cli
		{
			
			if (periodic != 0) 
     f20:	01 2b       	or	r16, r17
     f22:	11 f6       	brne	.-124    	; 0xea8 <TIMER_Create+0x3a>
     f24:	cf cf       	rjmp	.-98     	; 0xec4 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	08 95       	ret

00000f30 <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     f30:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
     f34:	83 e3       	ldi	r24, 0x33	; 51
     f36:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     f3a:	e9 ec       	ldi	r30, 0xC9	; 201
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	88 61       	ori	r24, 0x18	; 24
     f42:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     f44:	ea ec       	ldi	r30, 0xCA	; 202
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	86 60       	ori	r24, 0x06	; 6
     f4c:	80 83       	st	Z, r24
     f4e:	08 95       	ret

00000f50 <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
     f50:	e8 ec       	ldi	r30, 0xC8	; 200
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	90 81       	ld	r25, Z
     f56:	95 ff       	sbrs	r25, 5
     f58:	fd cf       	rjmp	.-6      	; 0xf54 <UART_SendChar+0x4>
	UDR1 = c;
     f5a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     f5e:	08 95       	ret

00000f60 <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     f66:	88 81       	ld	r24, Y
     f68:	88 23       	and	r24, r24
     f6a:	29 f0       	breq	.+10     	; 0xf76 <UART_SendString+0x16>
     f6c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
     f6e:	f0 df       	rcall	.-32     	; 0xf50 <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
     f70:	89 91       	ld	r24, Y+
     f72:	81 11       	cpse	r24, r1
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <__udivmodsi4>:
     f7c:	a1 e2       	ldi	r26, 0x21	; 33
     f7e:	1a 2e       	mov	r1, r26
     f80:	aa 1b       	sub	r26, r26
     f82:	bb 1b       	sub	r27, r27
     f84:	fd 01       	movw	r30, r26
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <__udivmodsi4_ep>

00000f88 <__udivmodsi4_loop>:
     f88:	aa 1f       	adc	r26, r26
     f8a:	bb 1f       	adc	r27, r27
     f8c:	ee 1f       	adc	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	a2 17       	cp	r26, r18
     f92:	b3 07       	cpc	r27, r19
     f94:	e4 07       	cpc	r30, r20
     f96:	f5 07       	cpc	r31, r21
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__udivmodsi4_ep>
     f9a:	a2 1b       	sub	r26, r18
     f9c:	b3 0b       	sbc	r27, r19
     f9e:	e4 0b       	sbc	r30, r20
     fa0:	f5 0b       	sbc	r31, r21

00000fa2 <__udivmodsi4_ep>:
     fa2:	66 1f       	adc	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	1a 94       	dec	r1
     fac:	69 f7       	brne	.-38     	; 0xf88 <__udivmodsi4_loop>
     fae:	60 95       	com	r22
     fb0:	70 95       	com	r23
     fb2:	80 95       	com	r24
     fb4:	90 95       	com	r25
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	bd 01       	movw	r22, r26
     fbc:	cf 01       	movw	r24, r30
     fbe:	08 95       	ret

00000fc0 <malloc>:
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	91 05       	cpc	r25, r1
     fcc:	10 f4       	brcc	.+4      	; 0xfd2 <malloc+0x12>
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <__flp>
     fd6:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <__flp+0x1>
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	30 97       	sbiw	r30, 0x00	; 0
     fe4:	19 f1       	breq	.+70     	; 0x102c <malloc+0x6c>
     fe6:	40 81       	ld	r20, Z
     fe8:	51 81       	ldd	r21, Z+1	; 0x01
     fea:	02 81       	ldd	r16, Z+2	; 0x02
     fec:	13 81       	ldd	r17, Z+3	; 0x03
     fee:	48 17       	cp	r20, r24
     ff0:	59 07       	cpc	r21, r25
     ff2:	c8 f0       	brcs	.+50     	; 0x1026 <malloc+0x66>
     ff4:	84 17       	cp	r24, r20
     ff6:	95 07       	cpc	r25, r21
     ff8:	69 f4       	brne	.+26     	; 0x1014 <malloc+0x54>
     ffa:	10 97       	sbiw	r26, 0x00	; 0
     ffc:	31 f0       	breq	.+12     	; 0x100a <malloc+0x4a>
     ffe:	12 96       	adiw	r26, 0x02	; 2
    1000:	0c 93       	st	X, r16
    1002:	12 97       	sbiw	r26, 0x02	; 2
    1004:	13 96       	adiw	r26, 0x03	; 3
    1006:	1c 93       	st	X, r17
    1008:	27 c0       	rjmp	.+78     	; 0x1058 <malloc+0x98>
    100a:	00 93 67 03 	sts	0x0367, r16	; 0x800367 <__flp>
    100e:	10 93 68 03 	sts	0x0368, r17	; 0x800368 <__flp+0x1>
    1012:	22 c0       	rjmp	.+68     	; 0x1058 <malloc+0x98>
    1014:	21 15       	cp	r18, r1
    1016:	31 05       	cpc	r19, r1
    1018:	19 f0       	breq	.+6      	; 0x1020 <malloc+0x60>
    101a:	42 17       	cp	r20, r18
    101c:	53 07       	cpc	r21, r19
    101e:	18 f4       	brcc	.+6      	; 0x1026 <malloc+0x66>
    1020:	9a 01       	movw	r18, r20
    1022:	bd 01       	movw	r22, r26
    1024:	ef 01       	movw	r28, r30
    1026:	df 01       	movw	r26, r30
    1028:	f8 01       	movw	r30, r16
    102a:	db cf       	rjmp	.-74     	; 0xfe2 <malloc+0x22>
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	f9 f0       	breq	.+62     	; 0x1070 <malloc+0xb0>
    1032:	28 1b       	sub	r18, r24
    1034:	39 0b       	sbc	r19, r25
    1036:	24 30       	cpi	r18, 0x04	; 4
    1038:	31 05       	cpc	r19, r1
    103a:	80 f4       	brcc	.+32     	; 0x105c <malloc+0x9c>
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	61 15       	cp	r22, r1
    1042:	71 05       	cpc	r23, r1
    1044:	21 f0       	breq	.+8      	; 0x104e <malloc+0x8e>
    1046:	fb 01       	movw	r30, r22
    1048:	93 83       	std	Z+3, r25	; 0x03
    104a:	82 83       	std	Z+2, r24	; 0x02
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <malloc+0x96>
    104e:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <__flp+0x1>
    1052:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <__flp>
    1056:	fe 01       	movw	r30, r28
    1058:	32 96       	adiw	r30, 0x02	; 2
    105a:	44 c0       	rjmp	.+136    	; 0x10e4 <malloc+0x124>
    105c:	fe 01       	movw	r30, r28
    105e:	e2 0f       	add	r30, r18
    1060:	f3 1f       	adc	r31, r19
    1062:	81 93       	st	Z+, r24
    1064:	91 93       	st	Z+, r25
    1066:	22 50       	subi	r18, 0x02	; 2
    1068:	31 09       	sbc	r19, r1
    106a:	39 83       	std	Y+1, r19	; 0x01
    106c:	28 83       	st	Y, r18
    106e:	3a c0       	rjmp	.+116    	; 0x10e4 <malloc+0x124>
    1070:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    1074:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    1078:	23 2b       	or	r18, r19
    107a:	41 f4       	brne	.+16     	; 0x108c <malloc+0xcc>
    107c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1080:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1084:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <__brkval+0x1>
    1088:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <__brkval>
    108c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1090:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1094:	21 15       	cp	r18, r1
    1096:	31 05       	cpc	r19, r1
    1098:	41 f4       	brne	.+16     	; 0x10aa <malloc+0xea>
    109a:	2d b7       	in	r18, 0x3d	; 61
    109c:	3e b7       	in	r19, 0x3e	; 62
    109e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    10a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    10a6:	24 1b       	sub	r18, r20
    10a8:	35 0b       	sbc	r19, r21
    10aa:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <__brkval>
    10ae:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <__brkval+0x1>
    10b2:	e2 17       	cp	r30, r18
    10b4:	f3 07       	cpc	r31, r19
    10b6:	a0 f4       	brcc	.+40     	; 0x10e0 <malloc+0x120>
    10b8:	2e 1b       	sub	r18, r30
    10ba:	3f 0b       	sbc	r19, r31
    10bc:	28 17       	cp	r18, r24
    10be:	39 07       	cpc	r19, r25
    10c0:	78 f0       	brcs	.+30     	; 0x10e0 <malloc+0x120>
    10c2:	ac 01       	movw	r20, r24
    10c4:	4e 5f       	subi	r20, 0xFE	; 254
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	24 17       	cp	r18, r20
    10ca:	35 07       	cpc	r19, r21
    10cc:	48 f0       	brcs	.+18     	; 0x10e0 <malloc+0x120>
    10ce:	4e 0f       	add	r20, r30
    10d0:	5f 1f       	adc	r21, r31
    10d2:	50 93 66 03 	sts	0x0366, r21	; 0x800366 <__brkval+0x1>
    10d6:	40 93 65 03 	sts	0x0365, r20	; 0x800365 <__brkval>
    10da:	81 93       	st	Z+, r24
    10dc:	91 93       	st	Z+, r25
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <malloc+0x124>
    10e0:	e0 e0       	ldi	r30, 0x00	; 0
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	cf 01       	movw	r24, r30
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <free>:
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	09 f4       	brne	.+2      	; 0x10fa <free+0xa>
    10f8:	81 c0       	rjmp	.+258    	; 0x11fc <free+0x10c>
    10fa:	fc 01       	movw	r30, r24
    10fc:	32 97       	sbiw	r30, 0x02	; 2
    10fe:	13 82       	std	Z+3, r1	; 0x03
    1100:	12 82       	std	Z+2, r1	; 0x02
    1102:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <__flp>
    1106:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <__flp+0x1>
    110a:	10 97       	sbiw	r26, 0x00	; 0
    110c:	81 f4       	brne	.+32     	; 0x112e <free+0x3e>
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	82 0f       	add	r24, r18
    1114:	93 1f       	adc	r25, r19
    1116:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    111a:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	51 f5       	brne	.+84     	; 0x1178 <free+0x88>
    1124:	f0 93 66 03 	sts	0x0366, r31	; 0x800366 <__brkval+0x1>
    1128:	e0 93 65 03 	sts	0x0365, r30	; 0x800365 <__brkval>
    112c:	67 c0       	rjmp	.+206    	; 0x11fc <free+0x10c>
    112e:	ed 01       	movw	r28, r26
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	ce 17       	cp	r28, r30
    1136:	df 07       	cpc	r29, r31
    1138:	40 f4       	brcc	.+16     	; 0x114a <free+0x5a>
    113a:	4a 81       	ldd	r20, Y+2	; 0x02
    113c:	5b 81       	ldd	r21, Y+3	; 0x03
    113e:	9e 01       	movw	r18, r28
    1140:	41 15       	cp	r20, r1
    1142:	51 05       	cpc	r21, r1
    1144:	f1 f0       	breq	.+60     	; 0x1182 <free+0x92>
    1146:	ea 01       	movw	r28, r20
    1148:	f5 cf       	rjmp	.-22     	; 0x1134 <free+0x44>
    114a:	d3 83       	std	Z+3, r29	; 0x03
    114c:	c2 83       	std	Z+2, r28	; 0x02
    114e:	40 81       	ld	r20, Z
    1150:	51 81       	ldd	r21, Z+1	; 0x01
    1152:	84 0f       	add	r24, r20
    1154:	95 1f       	adc	r25, r21
    1156:	c8 17       	cp	r28, r24
    1158:	d9 07       	cpc	r29, r25
    115a:	59 f4       	brne	.+22     	; 0x1172 <free+0x82>
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	84 0f       	add	r24, r20
    1162:	95 1f       	adc	r25, r21
    1164:	02 96       	adiw	r24, 0x02	; 2
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	80 83       	st	Z, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	93 83       	std	Z+3, r25	; 0x03
    1170:	82 83       	std	Z+2, r24	; 0x02
    1172:	21 15       	cp	r18, r1
    1174:	31 05       	cpc	r19, r1
    1176:	29 f4       	brne	.+10     	; 0x1182 <free+0x92>
    1178:	f0 93 68 03 	sts	0x0368, r31	; 0x800368 <__flp+0x1>
    117c:	e0 93 67 03 	sts	0x0367, r30	; 0x800367 <__flp>
    1180:	3d c0       	rjmp	.+122    	; 0x11fc <free+0x10c>
    1182:	e9 01       	movw	r28, r18
    1184:	fb 83       	std	Y+3, r31	; 0x03
    1186:	ea 83       	std	Y+2, r30	; 0x02
    1188:	49 91       	ld	r20, Y+
    118a:	59 91       	ld	r21, Y+
    118c:	c4 0f       	add	r28, r20
    118e:	d5 1f       	adc	r29, r21
    1190:	ec 17       	cp	r30, r28
    1192:	fd 07       	cpc	r31, r29
    1194:	61 f4       	brne	.+24     	; 0x11ae <free+0xbe>
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	02 96       	adiw	r24, 0x02	; 2
    11a0:	e9 01       	movw	r28, r18
    11a2:	99 83       	std	Y+1, r25	; 0x01
    11a4:	88 83       	st	Y, r24
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	9b 83       	std	Y+3, r25	; 0x03
    11ac:	8a 83       	std	Y+2, r24	; 0x02
    11ae:	e0 e0       	ldi	r30, 0x00	; 0
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	13 97       	sbiw	r26, 0x03	; 3
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <free+0xd4>
    11be:	fd 01       	movw	r30, r26
    11c0:	dc 01       	movw	r26, r24
    11c2:	f7 cf       	rjmp	.-18     	; 0x11b2 <free+0xc2>
    11c4:	8d 91       	ld	r24, X+
    11c6:	9c 91       	ld	r25, X
    11c8:	11 97       	sbiw	r26, 0x01	; 1
    11ca:	9d 01       	movw	r18, r26
    11cc:	2e 5f       	subi	r18, 0xFE	; 254
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    11d8:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    11dc:	28 17       	cp	r18, r24
    11de:	39 07       	cpc	r19, r25
    11e0:	69 f4       	brne	.+26     	; 0x11fc <free+0x10c>
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	29 f4       	brne	.+10     	; 0x11f0 <free+0x100>
    11e6:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <__flp+0x1>
    11ea:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <__flp>
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <free+0x104>
    11f0:	13 82       	std	Z+3, r1	; 0x03
    11f2:	12 82       	std	Z+2, r1	; 0x02
    11f4:	b0 93 66 03 	sts	0x0366, r27	; 0x800366 <__brkval+0x1>
    11f8:	a0 93 65 03 	sts	0x0365, r26	; 0x800365 <__brkval>
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <sprintf>:
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	2e 97       	sbiw	r28, 0x0e	; 14
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	0d 89       	ldd	r16, Y+21	; 0x15
    121c:	1e 89       	ldd	r17, Y+22	; 0x16
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	8c 83       	std	Y+4, r24	; 0x04
    1222:	1a 83       	std	Y+2, r17	; 0x02
    1224:	09 83       	std	Y+1, r16	; 0x01
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	9f e7       	ldi	r25, 0x7F	; 127
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	ae 01       	movw	r20, r28
    1230:	47 5e       	subi	r20, 0xE7	; 231
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	6f 89       	ldd	r22, Y+23	; 0x17
    1236:	78 8d       	ldd	r23, Y+24	; 0x18
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	10 d0       	rcall	.+32     	; 0x125e <vfprintf>
    123e:	ef 81       	ldd	r30, Y+7	; 0x07
    1240:	f8 85       	ldd	r31, Y+8	; 0x08
    1242:	e0 0f       	add	r30, r16
    1244:	f1 1f       	adc	r31, r17
    1246:	10 82       	st	Z, r1
    1248:	2e 96       	adiw	r28, 0x0e	; 14
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <vfprintf>:
    125e:	2f 92       	push	r2
    1260:	3f 92       	push	r3
    1262:	4f 92       	push	r4
    1264:	5f 92       	push	r5
    1266:	6f 92       	push	r6
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	2b 97       	sbiw	r28, 0x0b	; 11
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	6c 01       	movw	r12, r24
    1294:	7b 01       	movw	r14, r22
    1296:	8a 01       	movw	r16, r20
    1298:	fc 01       	movw	r30, r24
    129a:	17 82       	std	Z+7, r1	; 0x07
    129c:	16 82       	std	Z+6, r1	; 0x06
    129e:	83 81       	ldd	r24, Z+3	; 0x03
    12a0:	81 ff       	sbrs	r24, 1
    12a2:	bf c1       	rjmp	.+894    	; 0x1622 <vfprintf+0x3c4>
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	3c 01       	movw	r6, r24
    12aa:	f6 01       	movw	r30, r12
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	f7 01       	movw	r30, r14
    12b0:	93 fd       	sbrc	r25, 3
    12b2:	85 91       	lpm	r24, Z+
    12b4:	93 ff       	sbrs	r25, 3
    12b6:	81 91       	ld	r24, Z+
    12b8:	7f 01       	movw	r14, r30
    12ba:	88 23       	and	r24, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <vfprintf+0x62>
    12be:	ad c1       	rjmp	.+858    	; 0x161a <vfprintf+0x3bc>
    12c0:	85 32       	cpi	r24, 0x25	; 37
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <vfprintf+0x74>
    12c4:	93 fd       	sbrc	r25, 3
    12c6:	85 91       	lpm	r24, Z+
    12c8:	93 ff       	sbrs	r25, 3
    12ca:	81 91       	ld	r24, Z+
    12cc:	7f 01       	movw	r14, r30
    12ce:	85 32       	cpi	r24, 0x25	; 37
    12d0:	21 f4       	brne	.+8      	; 0x12da <vfprintf+0x7c>
    12d2:	b6 01       	movw	r22, r12
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	d6 d1       	rcall	.+940    	; 0x1684 <fputc>
    12d8:	e8 cf       	rjmp	.-48     	; 0x12aa <vfprintf+0x4c>
    12da:	91 2c       	mov	r9, r1
    12dc:	21 2c       	mov	r2, r1
    12de:	31 2c       	mov	r3, r1
    12e0:	ff e1       	ldi	r31, 0x1F	; 31
    12e2:	f3 15       	cp	r31, r3
    12e4:	d8 f0       	brcs	.+54     	; 0x131c <vfprintf+0xbe>
    12e6:	8b 32       	cpi	r24, 0x2B	; 43
    12e8:	79 f0       	breq	.+30     	; 0x1308 <vfprintf+0xaa>
    12ea:	38 f4       	brcc	.+14     	; 0x12fa <vfprintf+0x9c>
    12ec:	80 32       	cpi	r24, 0x20	; 32
    12ee:	79 f0       	breq	.+30     	; 0x130e <vfprintf+0xb0>
    12f0:	83 32       	cpi	r24, 0x23	; 35
    12f2:	a1 f4       	brne	.+40     	; 0x131c <vfprintf+0xbe>
    12f4:	23 2d       	mov	r18, r3
    12f6:	20 61       	ori	r18, 0x10	; 16
    12f8:	1d c0       	rjmp	.+58     	; 0x1334 <vfprintf+0xd6>
    12fa:	8d 32       	cpi	r24, 0x2D	; 45
    12fc:	61 f0       	breq	.+24     	; 0x1316 <vfprintf+0xb8>
    12fe:	80 33       	cpi	r24, 0x30	; 48
    1300:	69 f4       	brne	.+26     	; 0x131c <vfprintf+0xbe>
    1302:	23 2d       	mov	r18, r3
    1304:	21 60       	ori	r18, 0x01	; 1
    1306:	16 c0       	rjmp	.+44     	; 0x1334 <vfprintf+0xd6>
    1308:	83 2d       	mov	r24, r3
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	38 2e       	mov	r3, r24
    130e:	e3 2d       	mov	r30, r3
    1310:	e4 60       	ori	r30, 0x04	; 4
    1312:	3e 2e       	mov	r3, r30
    1314:	2a c0       	rjmp	.+84     	; 0x136a <vfprintf+0x10c>
    1316:	f3 2d       	mov	r31, r3
    1318:	f8 60       	ori	r31, 0x08	; 8
    131a:	1d c0       	rjmp	.+58     	; 0x1356 <vfprintf+0xf8>
    131c:	37 fc       	sbrc	r3, 7
    131e:	2d c0       	rjmp	.+90     	; 0x137a <vfprintf+0x11c>
    1320:	20 ed       	ldi	r18, 0xD0	; 208
    1322:	28 0f       	add	r18, r24
    1324:	2a 30       	cpi	r18, 0x0A	; 10
    1326:	40 f0       	brcs	.+16     	; 0x1338 <vfprintf+0xda>
    1328:	8e 32       	cpi	r24, 0x2E	; 46
    132a:	b9 f4       	brne	.+46     	; 0x135a <vfprintf+0xfc>
    132c:	36 fc       	sbrc	r3, 6
    132e:	75 c1       	rjmp	.+746    	; 0x161a <vfprintf+0x3bc>
    1330:	23 2d       	mov	r18, r3
    1332:	20 64       	ori	r18, 0x40	; 64
    1334:	32 2e       	mov	r3, r18
    1336:	19 c0       	rjmp	.+50     	; 0x136a <vfprintf+0x10c>
    1338:	36 fe       	sbrs	r3, 6
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <vfprintf+0xea>
    133c:	8a e0       	ldi	r24, 0x0A	; 10
    133e:	98 9e       	mul	r9, r24
    1340:	20 0d       	add	r18, r0
    1342:	11 24       	eor	r1, r1
    1344:	92 2e       	mov	r9, r18
    1346:	11 c0       	rjmp	.+34     	; 0x136a <vfprintf+0x10c>
    1348:	ea e0       	ldi	r30, 0x0A	; 10
    134a:	2e 9e       	mul	r2, r30
    134c:	20 0d       	add	r18, r0
    134e:	11 24       	eor	r1, r1
    1350:	22 2e       	mov	r2, r18
    1352:	f3 2d       	mov	r31, r3
    1354:	f0 62       	ori	r31, 0x20	; 32
    1356:	3f 2e       	mov	r3, r31
    1358:	08 c0       	rjmp	.+16     	; 0x136a <vfprintf+0x10c>
    135a:	8c 36       	cpi	r24, 0x6C	; 108
    135c:	21 f4       	brne	.+8      	; 0x1366 <vfprintf+0x108>
    135e:	83 2d       	mov	r24, r3
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	38 2e       	mov	r3, r24
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x10c>
    1366:	88 36       	cpi	r24, 0x68	; 104
    1368:	41 f4       	brne	.+16     	; 0x137a <vfprintf+0x11c>
    136a:	f7 01       	movw	r30, r14
    136c:	93 fd       	sbrc	r25, 3
    136e:	85 91       	lpm	r24, Z+
    1370:	93 ff       	sbrs	r25, 3
    1372:	81 91       	ld	r24, Z+
    1374:	7f 01       	movw	r14, r30
    1376:	81 11       	cpse	r24, r1
    1378:	b3 cf       	rjmp	.-154    	; 0x12e0 <vfprintf+0x82>
    137a:	98 2f       	mov	r25, r24
    137c:	9f 7d       	andi	r25, 0xDF	; 223
    137e:	95 54       	subi	r25, 0x45	; 69
    1380:	93 30       	cpi	r25, 0x03	; 3
    1382:	28 f4       	brcc	.+10     	; 0x138e <vfprintf+0x130>
    1384:	0c 5f       	subi	r16, 0xFC	; 252
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	9f e3       	ldi	r25, 0x3F	; 63
    138a:	99 83       	std	Y+1, r25	; 0x01
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <vfprintf+0x14a>
    138e:	83 36       	cpi	r24, 0x63	; 99
    1390:	31 f0       	breq	.+12     	; 0x139e <vfprintf+0x140>
    1392:	83 37       	cpi	r24, 0x73	; 115
    1394:	71 f0       	breq	.+28     	; 0x13b2 <vfprintf+0x154>
    1396:	83 35       	cpi	r24, 0x53	; 83
    1398:	09 f0       	breq	.+2      	; 0x139c <vfprintf+0x13e>
    139a:	55 c0       	rjmp	.+170    	; 0x1446 <vfprintf+0x1e8>
    139c:	20 c0       	rjmp	.+64     	; 0x13de <vfprintf+0x180>
    139e:	f8 01       	movw	r30, r16
    13a0:	80 81       	ld	r24, Z
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	0e 5f       	subi	r16, 0xFE	; 254
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	88 24       	eor	r8, r8
    13aa:	83 94       	inc	r8
    13ac:	91 2c       	mov	r9, r1
    13ae:	53 01       	movw	r10, r6
    13b0:	12 c0       	rjmp	.+36     	; 0x13d6 <vfprintf+0x178>
    13b2:	28 01       	movw	r4, r16
    13b4:	f2 e0       	ldi	r31, 0x02	; 2
    13b6:	4f 0e       	add	r4, r31
    13b8:	51 1c       	adc	r5, r1
    13ba:	f8 01       	movw	r30, r16
    13bc:	a0 80       	ld	r10, Z
    13be:	b1 80       	ldd	r11, Z+1	; 0x01
    13c0:	36 fe       	sbrs	r3, 6
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <vfprintf+0x16c>
    13c4:	69 2d       	mov	r22, r9
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <vfprintf+0x170>
    13ca:	6f ef       	ldi	r22, 0xFF	; 255
    13cc:	7f ef       	ldi	r23, 0xFF	; 255
    13ce:	c5 01       	movw	r24, r10
    13d0:	4e d1       	rcall	.+668    	; 0x166e <strnlen>
    13d2:	4c 01       	movw	r8, r24
    13d4:	82 01       	movw	r16, r4
    13d6:	f3 2d       	mov	r31, r3
    13d8:	ff 77       	andi	r31, 0x7F	; 127
    13da:	3f 2e       	mov	r3, r31
    13dc:	15 c0       	rjmp	.+42     	; 0x1408 <vfprintf+0x1aa>
    13de:	28 01       	movw	r4, r16
    13e0:	22 e0       	ldi	r18, 0x02	; 2
    13e2:	42 0e       	add	r4, r18
    13e4:	51 1c       	adc	r5, r1
    13e6:	f8 01       	movw	r30, r16
    13e8:	a0 80       	ld	r10, Z
    13ea:	b1 80       	ldd	r11, Z+1	; 0x01
    13ec:	36 fe       	sbrs	r3, 6
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <vfprintf+0x198>
    13f0:	69 2d       	mov	r22, r9
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x19c>
    13f6:	6f ef       	ldi	r22, 0xFF	; 255
    13f8:	7f ef       	ldi	r23, 0xFF	; 255
    13fa:	c5 01       	movw	r24, r10
    13fc:	2d d1       	rcall	.+602    	; 0x1658 <strnlen_P>
    13fe:	4c 01       	movw	r8, r24
    1400:	f3 2d       	mov	r31, r3
    1402:	f0 68       	ori	r31, 0x80	; 128
    1404:	3f 2e       	mov	r3, r31
    1406:	82 01       	movw	r16, r4
    1408:	33 fc       	sbrc	r3, 3
    140a:	19 c0       	rjmp	.+50     	; 0x143e <vfprintf+0x1e0>
    140c:	82 2d       	mov	r24, r2
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 16       	cp	r8, r24
    1412:	99 06       	cpc	r9, r25
    1414:	a0 f4       	brcc	.+40     	; 0x143e <vfprintf+0x1e0>
    1416:	b6 01       	movw	r22, r12
    1418:	80 e2       	ldi	r24, 0x20	; 32
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	33 d1       	rcall	.+614    	; 0x1684 <fputc>
    141e:	2a 94       	dec	r2
    1420:	f5 cf       	rjmp	.-22     	; 0x140c <vfprintf+0x1ae>
    1422:	f5 01       	movw	r30, r10
    1424:	37 fc       	sbrc	r3, 7
    1426:	85 91       	lpm	r24, Z+
    1428:	37 fe       	sbrs	r3, 7
    142a:	81 91       	ld	r24, Z+
    142c:	5f 01       	movw	r10, r30
    142e:	b6 01       	movw	r22, r12
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	28 d1       	rcall	.+592    	; 0x1684 <fputc>
    1434:	21 10       	cpse	r2, r1
    1436:	2a 94       	dec	r2
    1438:	21 e0       	ldi	r18, 0x01	; 1
    143a:	82 1a       	sub	r8, r18
    143c:	91 08       	sbc	r9, r1
    143e:	81 14       	cp	r8, r1
    1440:	91 04       	cpc	r9, r1
    1442:	79 f7       	brne	.-34     	; 0x1422 <vfprintf+0x1c4>
    1444:	e1 c0       	rjmp	.+450    	; 0x1608 <vfprintf+0x3aa>
    1446:	84 36       	cpi	r24, 0x64	; 100
    1448:	11 f0       	breq	.+4      	; 0x144e <vfprintf+0x1f0>
    144a:	89 36       	cpi	r24, 0x69	; 105
    144c:	39 f5       	brne	.+78     	; 0x149c <vfprintf+0x23e>
    144e:	f8 01       	movw	r30, r16
    1450:	37 fe       	sbrs	r3, 7
    1452:	07 c0       	rjmp	.+14     	; 0x1462 <vfprintf+0x204>
    1454:	60 81       	ld	r22, Z
    1456:	71 81       	ldd	r23, Z+1	; 0x01
    1458:	82 81       	ldd	r24, Z+2	; 0x02
    145a:	93 81       	ldd	r25, Z+3	; 0x03
    145c:	0c 5f       	subi	r16, 0xFC	; 252
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	08 c0       	rjmp	.+16     	; 0x1472 <vfprintf+0x214>
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	07 2e       	mov	r0, r23
    1468:	00 0c       	add	r0, r0
    146a:	88 0b       	sbc	r24, r24
    146c:	99 0b       	sbc	r25, r25
    146e:	0e 5f       	subi	r16, 0xFE	; 254
    1470:	1f 4f       	sbci	r17, 0xFF	; 255
    1472:	f3 2d       	mov	r31, r3
    1474:	ff 76       	andi	r31, 0x6F	; 111
    1476:	3f 2e       	mov	r3, r31
    1478:	97 ff       	sbrs	r25, 7
    147a:	09 c0       	rjmp	.+18     	; 0x148e <vfprintf+0x230>
    147c:	90 95       	com	r25
    147e:	80 95       	com	r24
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	f0 68       	ori	r31, 0x80	; 128
    148c:	3f 2e       	mov	r3, r31
    148e:	2a e0       	ldi	r18, 0x0A	; 10
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	a3 01       	movw	r20, r6
    1494:	33 d1       	rcall	.+614    	; 0x16fc <__ultoa_invert>
    1496:	88 2e       	mov	r8, r24
    1498:	86 18       	sub	r8, r6
    149a:	44 c0       	rjmp	.+136    	; 0x1524 <vfprintf+0x2c6>
    149c:	85 37       	cpi	r24, 0x75	; 117
    149e:	31 f4       	brne	.+12     	; 0x14ac <vfprintf+0x24e>
    14a0:	23 2d       	mov	r18, r3
    14a2:	2f 7e       	andi	r18, 0xEF	; 239
    14a4:	b2 2e       	mov	r11, r18
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	25 c0       	rjmp	.+74     	; 0x14f6 <vfprintf+0x298>
    14ac:	93 2d       	mov	r25, r3
    14ae:	99 7f       	andi	r25, 0xF9	; 249
    14b0:	b9 2e       	mov	r11, r25
    14b2:	8f 36       	cpi	r24, 0x6F	; 111
    14b4:	c1 f0       	breq	.+48     	; 0x14e6 <vfprintf+0x288>
    14b6:	18 f4       	brcc	.+6      	; 0x14be <vfprintf+0x260>
    14b8:	88 35       	cpi	r24, 0x58	; 88
    14ba:	79 f0       	breq	.+30     	; 0x14da <vfprintf+0x27c>
    14bc:	ae c0       	rjmp	.+348    	; 0x161a <vfprintf+0x3bc>
    14be:	80 37       	cpi	r24, 0x70	; 112
    14c0:	19 f0       	breq	.+6      	; 0x14c8 <vfprintf+0x26a>
    14c2:	88 37       	cpi	r24, 0x78	; 120
    14c4:	21 f0       	breq	.+8      	; 0x14ce <vfprintf+0x270>
    14c6:	a9 c0       	rjmp	.+338    	; 0x161a <vfprintf+0x3bc>
    14c8:	e9 2f       	mov	r30, r25
    14ca:	e0 61       	ori	r30, 0x10	; 16
    14cc:	be 2e       	mov	r11, r30
    14ce:	b4 fe       	sbrs	r11, 4
    14d0:	0d c0       	rjmp	.+26     	; 0x14ec <vfprintf+0x28e>
    14d2:	fb 2d       	mov	r31, r11
    14d4:	f4 60       	ori	r31, 0x04	; 4
    14d6:	bf 2e       	mov	r11, r31
    14d8:	09 c0       	rjmp	.+18     	; 0x14ec <vfprintf+0x28e>
    14da:	34 fe       	sbrs	r3, 4
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <vfprintf+0x294>
    14de:	29 2f       	mov	r18, r25
    14e0:	26 60       	ori	r18, 0x06	; 6
    14e2:	b2 2e       	mov	r11, r18
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <vfprintf+0x294>
    14e6:	28 e0       	ldi	r18, 0x08	; 8
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <vfprintf+0x298>
    14ec:	20 e1       	ldi	r18, 0x10	; 16
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x298>
    14f2:	20 e1       	ldi	r18, 0x10	; 16
    14f4:	32 e0       	ldi	r19, 0x02	; 2
    14f6:	f8 01       	movw	r30, r16
    14f8:	b7 fe       	sbrs	r11, 7
    14fa:	07 c0       	rjmp	.+14     	; 0x150a <vfprintf+0x2ac>
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	93 81       	ldd	r25, Z+3	; 0x03
    1504:	0c 5f       	subi	r16, 0xFC	; 252
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <vfprintf+0x2b8>
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	a3 01       	movw	r20, r6
    1518:	f1 d0       	rcall	.+482    	; 0x16fc <__ultoa_invert>
    151a:	88 2e       	mov	r8, r24
    151c:	86 18       	sub	r8, r6
    151e:	fb 2d       	mov	r31, r11
    1520:	ff 77       	andi	r31, 0x7F	; 127
    1522:	3f 2e       	mov	r3, r31
    1524:	36 fe       	sbrs	r3, 6
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <vfprintf+0x2e4>
    1528:	23 2d       	mov	r18, r3
    152a:	2e 7f       	andi	r18, 0xFE	; 254
    152c:	a2 2e       	mov	r10, r18
    152e:	89 14       	cp	r8, r9
    1530:	58 f4       	brcc	.+22     	; 0x1548 <vfprintf+0x2ea>
    1532:	34 fe       	sbrs	r3, 4
    1534:	0b c0       	rjmp	.+22     	; 0x154c <vfprintf+0x2ee>
    1536:	32 fc       	sbrc	r3, 2
    1538:	09 c0       	rjmp	.+18     	; 0x154c <vfprintf+0x2ee>
    153a:	83 2d       	mov	r24, r3
    153c:	8e 7e       	andi	r24, 0xEE	; 238
    153e:	a8 2e       	mov	r10, r24
    1540:	05 c0       	rjmp	.+10     	; 0x154c <vfprintf+0x2ee>
    1542:	b8 2c       	mov	r11, r8
    1544:	a3 2c       	mov	r10, r3
    1546:	03 c0       	rjmp	.+6      	; 0x154e <vfprintf+0x2f0>
    1548:	b8 2c       	mov	r11, r8
    154a:	01 c0       	rjmp	.+2      	; 0x154e <vfprintf+0x2f0>
    154c:	b9 2c       	mov	r11, r9
    154e:	a4 fe       	sbrs	r10, 4
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <vfprintf+0x312>
    1552:	fe 01       	movw	r30, r28
    1554:	e8 0d       	add	r30, r8
    1556:	f1 1d       	adc	r31, r1
    1558:	80 81       	ld	r24, Z
    155a:	80 33       	cpi	r24, 0x30	; 48
    155c:	21 f4       	brne	.+8      	; 0x1566 <vfprintf+0x308>
    155e:	9a 2d       	mov	r25, r10
    1560:	99 7e       	andi	r25, 0xE9	; 233
    1562:	a9 2e       	mov	r10, r25
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <vfprintf+0x31a>
    1566:	a2 fe       	sbrs	r10, 2
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <vfprintf+0x318>
    156a:	b3 94       	inc	r11
    156c:	b3 94       	inc	r11
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <vfprintf+0x31a>
    1570:	8a 2d       	mov	r24, r10
    1572:	86 78       	andi	r24, 0x86	; 134
    1574:	09 f0       	breq	.+2      	; 0x1578 <vfprintf+0x31a>
    1576:	b3 94       	inc	r11
    1578:	a3 fc       	sbrc	r10, 3
    157a:	10 c0       	rjmp	.+32     	; 0x159c <vfprintf+0x33e>
    157c:	a0 fe       	sbrs	r10, 0
    157e:	06 c0       	rjmp	.+12     	; 0x158c <vfprintf+0x32e>
    1580:	b2 14       	cp	r11, r2
    1582:	80 f4       	brcc	.+32     	; 0x15a4 <vfprintf+0x346>
    1584:	28 0c       	add	r2, r8
    1586:	92 2c       	mov	r9, r2
    1588:	9b 18       	sub	r9, r11
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <vfprintf+0x348>
    158c:	b2 14       	cp	r11, r2
    158e:	58 f4       	brcc	.+22     	; 0x15a6 <vfprintf+0x348>
    1590:	b6 01       	movw	r22, r12
    1592:	80 e2       	ldi	r24, 0x20	; 32
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	76 d0       	rcall	.+236    	; 0x1684 <fputc>
    1598:	b3 94       	inc	r11
    159a:	f8 cf       	rjmp	.-16     	; 0x158c <vfprintf+0x32e>
    159c:	b2 14       	cp	r11, r2
    159e:	18 f4       	brcc	.+6      	; 0x15a6 <vfprintf+0x348>
    15a0:	2b 18       	sub	r2, r11
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <vfprintf+0x34a>
    15a4:	98 2c       	mov	r9, r8
    15a6:	21 2c       	mov	r2, r1
    15a8:	a4 fe       	sbrs	r10, 4
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <vfprintf+0x36c>
    15ac:	b6 01       	movw	r22, r12
    15ae:	80 e3       	ldi	r24, 0x30	; 48
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	68 d0       	rcall	.+208    	; 0x1684 <fputc>
    15b4:	a2 fe       	sbrs	r10, 2
    15b6:	16 c0       	rjmp	.+44     	; 0x15e4 <vfprintf+0x386>
    15b8:	a1 fc       	sbrc	r10, 1
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <vfprintf+0x364>
    15bc:	88 e7       	ldi	r24, 0x78	; 120
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <vfprintf+0x368>
    15c2:	88 e5       	ldi	r24, 0x58	; 88
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	b6 01       	movw	r22, r12
    15c8:	0c c0       	rjmp	.+24     	; 0x15e2 <vfprintf+0x384>
    15ca:	8a 2d       	mov	r24, r10
    15cc:	86 78       	andi	r24, 0x86	; 134
    15ce:	51 f0       	breq	.+20     	; 0x15e4 <vfprintf+0x386>
    15d0:	a1 fe       	sbrs	r10, 1
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x37a>
    15d4:	8b e2       	ldi	r24, 0x2B	; 43
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <vfprintf+0x37c>
    15d8:	80 e2       	ldi	r24, 0x20	; 32
    15da:	a7 fc       	sbrc	r10, 7
    15dc:	8d e2       	ldi	r24, 0x2D	; 45
    15de:	b6 01       	movw	r22, r12
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	50 d0       	rcall	.+160    	; 0x1684 <fputc>
    15e4:	89 14       	cp	r8, r9
    15e6:	30 f4       	brcc	.+12     	; 0x15f4 <vfprintf+0x396>
    15e8:	b6 01       	movw	r22, r12
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	4a d0       	rcall	.+148    	; 0x1684 <fputc>
    15f0:	9a 94       	dec	r9
    15f2:	f8 cf       	rjmp	.-16     	; 0x15e4 <vfprintf+0x386>
    15f4:	8a 94       	dec	r8
    15f6:	f3 01       	movw	r30, r6
    15f8:	e8 0d       	add	r30, r8
    15fa:	f1 1d       	adc	r31, r1
    15fc:	80 81       	ld	r24, Z
    15fe:	b6 01       	movw	r22, r12
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	40 d0       	rcall	.+128    	; 0x1684 <fputc>
    1604:	81 10       	cpse	r8, r1
    1606:	f6 cf       	rjmp	.-20     	; 0x15f4 <vfprintf+0x396>
    1608:	22 20       	and	r2, r2
    160a:	09 f4       	brne	.+2      	; 0x160e <vfprintf+0x3b0>
    160c:	4e ce       	rjmp	.-868    	; 0x12aa <vfprintf+0x4c>
    160e:	b6 01       	movw	r22, r12
    1610:	80 e2       	ldi	r24, 0x20	; 32
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	37 d0       	rcall	.+110    	; 0x1684 <fputc>
    1616:	2a 94       	dec	r2
    1618:	f7 cf       	rjmp	.-18     	; 0x1608 <vfprintf+0x3aa>
    161a:	f6 01       	movw	r30, r12
    161c:	86 81       	ldd	r24, Z+6	; 0x06
    161e:	97 81       	ldd	r25, Z+7	; 0x07
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x3c8>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	2b 96       	adiw	r28, 0x0b	; 11
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	1f 91       	pop	r17
    1638:	0f 91       	pop	r16
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	df 90       	pop	r13
    1640:	cf 90       	pop	r12
    1642:	bf 90       	pop	r11
    1644:	af 90       	pop	r10
    1646:	9f 90       	pop	r9
    1648:	8f 90       	pop	r8
    164a:	7f 90       	pop	r7
    164c:	6f 90       	pop	r6
    164e:	5f 90       	pop	r5
    1650:	4f 90       	pop	r4
    1652:	3f 90       	pop	r3
    1654:	2f 90       	pop	r2
    1656:	08 95       	ret

00001658 <strnlen_P>:
    1658:	fc 01       	movw	r30, r24
    165a:	05 90       	lpm	r0, Z+
    165c:	61 50       	subi	r22, 0x01	; 1
    165e:	70 40       	sbci	r23, 0x00	; 0
    1660:	01 10       	cpse	r0, r1
    1662:	d8 f7       	brcc	.-10     	; 0x165a <strnlen_P+0x2>
    1664:	80 95       	com	r24
    1666:	90 95       	com	r25
    1668:	8e 0f       	add	r24, r30
    166a:	9f 1f       	adc	r25, r31
    166c:	08 95       	ret

0000166e <strnlen>:
    166e:	fc 01       	movw	r30, r24
    1670:	61 50       	subi	r22, 0x01	; 1
    1672:	70 40       	sbci	r23, 0x00	; 0
    1674:	01 90       	ld	r0, Z+
    1676:	01 10       	cpse	r0, r1
    1678:	d8 f7       	brcc	.-10     	; 0x1670 <strnlen+0x2>
    167a:	80 95       	com	r24
    167c:	90 95       	com	r25
    167e:	8e 0f       	add	r24, r30
    1680:	9f 1f       	adc	r25, r31
    1682:	08 95       	ret

00001684 <fputc>:
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	fb 01       	movw	r30, r22
    168e:	23 81       	ldd	r18, Z+3	; 0x03
    1690:	21 fd       	sbrc	r18, 1
    1692:	03 c0       	rjmp	.+6      	; 0x169a <fputc+0x16>
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	9f ef       	ldi	r25, 0xFF	; 255
    1698:	2c c0       	rjmp	.+88     	; 0x16f2 <fputc+0x6e>
    169a:	22 ff       	sbrs	r18, 2
    169c:	16 c0       	rjmp	.+44     	; 0x16ca <fputc+0x46>
    169e:	46 81       	ldd	r20, Z+6	; 0x06
    16a0:	57 81       	ldd	r21, Z+7	; 0x07
    16a2:	24 81       	ldd	r18, Z+4	; 0x04
    16a4:	35 81       	ldd	r19, Z+5	; 0x05
    16a6:	42 17       	cp	r20, r18
    16a8:	53 07       	cpc	r21, r19
    16aa:	44 f4       	brge	.+16     	; 0x16bc <fputc+0x38>
    16ac:	a0 81       	ld	r26, Z
    16ae:	b1 81       	ldd	r27, Z+1	; 0x01
    16b0:	9d 01       	movw	r18, r26
    16b2:	2f 5f       	subi	r18, 0xFF	; 255
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	31 83       	std	Z+1, r19	; 0x01
    16b8:	20 83       	st	Z, r18
    16ba:	8c 93       	st	X, r24
    16bc:	26 81       	ldd	r18, Z+6	; 0x06
    16be:	37 81       	ldd	r19, Z+7	; 0x07
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	37 83       	std	Z+7, r19	; 0x07
    16c6:	26 83       	std	Z+6, r18	; 0x06
    16c8:	14 c0       	rjmp	.+40     	; 0x16f2 <fputc+0x6e>
    16ca:	8b 01       	movw	r16, r22
    16cc:	ec 01       	movw	r28, r24
    16ce:	fb 01       	movw	r30, r22
    16d0:	00 84       	ldd	r0, Z+8	; 0x08
    16d2:	f1 85       	ldd	r31, Z+9	; 0x09
    16d4:	e0 2d       	mov	r30, r0
    16d6:	09 95       	icall
    16d8:	89 2b       	or	r24, r25
    16da:	e1 f6       	brne	.-72     	; 0x1694 <fputc+0x10>
    16dc:	d8 01       	movw	r26, r16
    16de:	16 96       	adiw	r26, 0x06	; 6
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	17 97       	sbiw	r26, 0x07	; 7
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	17 96       	adiw	r26, 0x07	; 7
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
    16ee:	16 97       	sbiw	r26, 0x06	; 6
    16f0:	ce 01       	movw	r24, r28
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <__ultoa_invert>:
    16fc:	fa 01       	movw	r30, r20
    16fe:	aa 27       	eor	r26, r26
    1700:	28 30       	cpi	r18, 0x08	; 8
    1702:	51 f1       	breq	.+84     	; 0x1758 <__ultoa_invert+0x5c>
    1704:	20 31       	cpi	r18, 0x10	; 16
    1706:	81 f1       	breq	.+96     	; 0x1768 <__ultoa_invert+0x6c>
    1708:	e8 94       	clt
    170a:	6f 93       	push	r22
    170c:	6e 7f       	andi	r22, 0xFE	; 254
    170e:	6e 5f       	subi	r22, 0xFE	; 254
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	af 4f       	sbci	r26, 0xFF	; 255
    1718:	b1 e0       	ldi	r27, 0x01	; 1
    171a:	3e d0       	rcall	.+124    	; 0x1798 <__ultoa_invert+0x9c>
    171c:	b4 e0       	ldi	r27, 0x04	; 4
    171e:	3c d0       	rcall	.+120    	; 0x1798 <__ultoa_invert+0x9c>
    1720:	67 0f       	add	r22, r23
    1722:	78 1f       	adc	r23, r24
    1724:	89 1f       	adc	r24, r25
    1726:	9a 1f       	adc	r25, r26
    1728:	a1 1d       	adc	r26, r1
    172a:	68 0f       	add	r22, r24
    172c:	79 1f       	adc	r23, r25
    172e:	8a 1f       	adc	r24, r26
    1730:	91 1d       	adc	r25, r1
    1732:	a1 1d       	adc	r26, r1
    1734:	6a 0f       	add	r22, r26
    1736:	71 1d       	adc	r23, r1
    1738:	81 1d       	adc	r24, r1
    173a:	91 1d       	adc	r25, r1
    173c:	a1 1d       	adc	r26, r1
    173e:	20 d0       	rcall	.+64     	; 0x1780 <__ultoa_invert+0x84>
    1740:	09 f4       	brne	.+2      	; 0x1744 <__ultoa_invert+0x48>
    1742:	68 94       	set
    1744:	3f 91       	pop	r19
    1746:	2a e0       	ldi	r18, 0x0A	; 10
    1748:	26 9f       	mul	r18, r22
    174a:	11 24       	eor	r1, r1
    174c:	30 19       	sub	r19, r0
    174e:	30 5d       	subi	r19, 0xD0	; 208
    1750:	31 93       	st	Z+, r19
    1752:	de f6       	brtc	.-74     	; 0x170a <__ultoa_invert+0xe>
    1754:	cf 01       	movw	r24, r30
    1756:	08 95       	ret
    1758:	46 2f       	mov	r20, r22
    175a:	47 70       	andi	r20, 0x07	; 7
    175c:	40 5d       	subi	r20, 0xD0	; 208
    175e:	41 93       	st	Z+, r20
    1760:	b3 e0       	ldi	r27, 0x03	; 3
    1762:	0f d0       	rcall	.+30     	; 0x1782 <__ultoa_invert+0x86>
    1764:	c9 f7       	brne	.-14     	; 0x1758 <__ultoa_invert+0x5c>
    1766:	f6 cf       	rjmp	.-20     	; 0x1754 <__ultoa_invert+0x58>
    1768:	46 2f       	mov	r20, r22
    176a:	4f 70       	andi	r20, 0x0F	; 15
    176c:	40 5d       	subi	r20, 0xD0	; 208
    176e:	4a 33       	cpi	r20, 0x3A	; 58
    1770:	18 f0       	brcs	.+6      	; 0x1778 <__ultoa_invert+0x7c>
    1772:	49 5d       	subi	r20, 0xD9	; 217
    1774:	31 fd       	sbrc	r19, 1
    1776:	40 52       	subi	r20, 0x20	; 32
    1778:	41 93       	st	Z+, r20
    177a:	02 d0       	rcall	.+4      	; 0x1780 <__ultoa_invert+0x84>
    177c:	a9 f7       	brne	.-22     	; 0x1768 <__ultoa_invert+0x6c>
    177e:	ea cf       	rjmp	.-44     	; 0x1754 <__ultoa_invert+0x58>
    1780:	b4 e0       	ldi	r27, 0x04	; 4
    1782:	a6 95       	lsr	r26
    1784:	97 95       	ror	r25
    1786:	87 95       	ror	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__ultoa_invert+0x86>
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	61 05       	cpc	r22, r1
    1794:	71 05       	cpc	r23, r1
    1796:	08 95       	ret
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	0a 2e       	mov	r0, r26
    179e:	06 94       	lsr	r0
    17a0:	57 95       	ror	r21
    17a2:	47 95       	ror	r20
    17a4:	37 95       	ror	r19
    17a6:	27 95       	ror	r18
    17a8:	ba 95       	dec	r27
    17aa:	c9 f7       	brne	.-14     	; 0x179e <__ultoa_invert+0xa2>
    17ac:	62 0f       	add	r22, r18
    17ae:	73 1f       	adc	r23, r19
    17b0:	84 1f       	adc	r24, r20
    17b2:	95 1f       	adc	r25, r21
    17b4:	a0 1d       	adc	r26, r0
    17b6:	08 95       	ret

000017b8 <_exit>:
    17b8:	f8 94       	cli

000017ba <__stop_program>:
    17ba:	ff cf       	rjmp	.-2      	; 0x17ba <__stop_program>
