
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  0000188a  0000191e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000188a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  00800296  00800296  00001ab4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052f8  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b01  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034f5  00000000  00000000  00008c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  0000c140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000aaa2  00000000  00000000  0000c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f1  00000000  00000000  0001738e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00018b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004b24  00000000  00000000  00018e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5b c4       	rjmp	.+2230   	; 0x8ec <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	ee c6       	rjmp	.+3548   	; 0xe22 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c0       	rjmp	.+146    	; 0x108 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e8       	ldi	r30, 0x8A	; 138
      ac:	f8 e1       	ldi	r31, 0x18	; 24
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a6 39       	cpi	r26, 0x96	; 150
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a6 e9       	ldi	r26, 0x96	; 150
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a9 36       	cpi	r26, 0x69	; 105
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	ab d2       	rcall	.+1366   	; 0x626 <main>
      d0:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <_exit>

000000d4 <__bad_interrupt>:
      d4:	53 c3       	rjmp	.+1702   	; 0x77c <__vector_default>

000000d6 <ADC_Init>:
#include "timer.h"

//################## MAIN ROUTINE ##################
void ADC_Init()
{
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
      d6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
      d8:	f8 94       	cli
	{

		//ADC default input (analog input is set to be ADC0 / PORTF0
		
 		ADCSRB |= (1<<ADHSM);
      da:	eb e7       	ldi	r30, 0x7B	; 123
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADEN);                // enable ADC
      e4:	ea e7       	ldi	r30, 0x7A	; 122
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	80 68       	ori	r24, 0x80	; 128
      ec:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIE);                // enable interrupt of ADC
      ee:	80 81       	ld	r24, Z
      f0:	88 60       	ori	r24, 0x08	; 8
      f2:	80 83       	st	Z, r24
		ADMUX |=  ((1<<REFS0) | (1<<MUX0)); // left adjust ADC result, use AVcc
      f4:	ac e7       	ldi	r26, 0x7C	; 124
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	8c 91       	ld	r24, X
      fa:	81 64       	ori	r24, 0x41	; 65
      fc:	8c 93       	st	X, r24
		ADCSRA |= _BV(ADSC); //Start ADC converions
      fe:	80 81       	ld	r24, Z
     100:	80 64       	ori	r24, 0x40	; 64
     102:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     104:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     106:	08 95       	ret

00000108 <__vector_29>:
	}
}

ISR(ADC_vect)
{
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	0b b6       	in	r0, 0x3b	; 59
     114:	0f 92       	push	r0
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	8f 93       	push	r24
     11c:	9f 93       	push	r25
     11e:	ef 93       	push	r30
     120:	ff 93       	push	r31
		//PORTC ^= 0xFE;
		if (g_ADCCount < 10)
     122:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <g_ADCCount>
     126:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <g_ADCCount+0x1>
     12a:	0a 97       	sbiw	r24, 0x0a	; 10
     12c:	d8 f4       	brcc	.+54     	; 0x164 <__vector_29+0x5c>
		{
			 g_ADCResult[g_ADCCount++] = ADC;
     12e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <g_ADCCount>
     132:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <g_ADCCount+0x1>
     136:	9c 01       	movw	r18, r24
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	30 93 d2 02 	sts	0x02D2, r19	; 0x8002d2 <g_ADCCount+0x1>
     140:	20 93 d1 02 	sts	0x02D1, r18	; 0x8002d1 <g_ADCCount>
     144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     14c:	88 0f       	add	r24, r24
     14e:	99 1f       	adc	r25, r25
     150:	fc 01       	movw	r30, r24
     152:	e3 54       	subi	r30, 0x43	; 67
     154:	fd 4f       	sbci	r31, 0xFD	; 253
     156:	31 83       	std	Z+1, r19	; 0x01
     158:	20 83       	st	Z, r18
			 ADCSRA |= (1 << ADSC);	 
     15a:	ea e7       	ldi	r30, 0x7A	; 122
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	80 64       	ori	r24, 0x40	; 64
     162:	80 83       	st	Z, r24
		}
		if (g_ADCCount == 10) _timer[1].state = READY;
     164:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <g_ADCCount>
     168:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <g_ADCCount+0x1>
     16c:	0a 97       	sbiw	r24, 0x0a	; 10
     16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x6e>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <_timer+0x11>
		//ADCSRA &= 0x01111111;
		//PORTC ^= 0xFE;
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	9f 91       	pop	r25
     17c:	8f 91       	pop	r24
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0b be       	out	0x3b, r0	; 59
     186:	0f 90       	pop	r0
     188:	0f be       	out	0x3f, r0	; 63
     18a:	0f 90       	pop	r0
     18c:	1f 90       	pop	r1
     18e:	18 95       	reti

00000190 <D_Blinky>:

	
	//SYS_Pause(__FUNCTION__);	
}
void STEPPER_Task(void* arg)
{
     190:	9b b1       	in	r25, 0x0b	; 11
     192:	80 ea       	ldi	r24, 0xA0	; 160
     194:	89 27       	eor	r24, r25
     196:	8b b9       	out	0x0b, r24	; 11
     198:	08 95       	ret

0000019a <ADC_Task>:
     19a:	8f 92       	push	r8
     19c:	9f 92       	push	r9
     19e:	af 92       	push	r10
     1a0:	bf 92       	push	r11
     1a2:	cf 92       	push	r12
     1a4:	df 92       	push	r13
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	cf 93       	push	r28
     1ac:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <j.2509>
     1b0:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <j.2509+0x1>
     1b4:	01 96       	adiw	r24, 0x01	; 1
     1b6:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <j.2509+0x1>
     1ba:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <j.2509>
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	ba 01       	movw	r22, r20
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	2f b7       	in	r18, 0x3f	; 63
     1ca:	f8 94       	cli
     1cc:	fc 01       	movw	r30, r24
     1ce:	ee 0f       	add	r30, r30
     1d0:	ff 1f       	adc	r31, r31
     1d2:	e3 54       	subi	r30, 0x43	; 67
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	01 90       	ld	r0, Z+
     1d8:	f0 81       	ld	r31, Z
     1da:	e0 2d       	mov	r30, r0
     1dc:	4e 0f       	add	r20, r30
     1de:	5f 1f       	adc	r21, r31
     1e0:	61 1d       	adc	r22, r1
     1e2:	71 1d       	adc	r23, r1
     1e4:	2f bf       	out	0x3f, r18	; 63
     1e6:	01 96       	adiw	r24, 0x01	; 1
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
     1ea:	91 05       	cpc	r25, r1
     1ec:	69 f7       	brne	.-38     	; 0x1c8 <ADC_Task+0x2e>
     1ee:	cf b7       	in	r28, 0x3f	; 63
     1f0:	f8 94       	cli
     1f2:	cb 01       	movw	r24, r22
     1f4:	ba 01       	movw	r22, r20
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	25 d7       	rcall	.+3658   	; 0x104a <__udivmodsi4>
     200:	69 01       	movw	r12, r18
     202:	7a 01       	movw	r14, r20
     204:	cf bf       	out	0x3f, r28	; 63
     206:	cf b7       	in	r28, 0x3f	; 63
     208:	f8 94       	cli
     20a:	da 01       	movw	r26, r20
     20c:	c9 01       	movw	r24, r18
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	a1 09       	sbc	r26, r1
     212:	b1 09       	sbc	r27, r1
     214:	8f 3c       	cpi	r24, 0xCF	; 207
     216:	97 40       	sbci	r25, 0x07	; 7
     218:	a1 05       	cpc	r26, r1
     21a:	b1 05       	cpc	r27, r1
     21c:	a0 f4       	brcc	.+40     	; 0x246 <ADC_Task+0xac>
     21e:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <STAGE2>
     222:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <STAGE2+0x1>
     226:	cf d1       	rcall	.+926    	; 0x5c6 <LL_GetRefl>
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	c8 16       	cp	r12, r24
     22e:	d9 06       	cpc	r13, r25
     230:	ea 06       	cpc	r14, r26
     232:	fb 06       	cpc	r15, r27
     234:	40 f4       	brcc	.+16     	; 0x246 <ADC_Task+0xac>
     236:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <STAGE2>
     23a:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <STAGE2+0x1>
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	11 f0       	breq	.+4      	; 0x246 <ADC_Task+0xac>
     242:	b6 01       	movw	r22, r12
     244:	cb d1       	rcall	.+918    	; 0x5dc <LL_UpdateRefl>
     246:	cf bf       	out	0x3f, r28	; 63
     248:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <g_ADCCount+0x1>
     24c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <g_ADCCount>
     250:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <_timer+0x11>
     254:	66 9b       	sbis	0x0c, 6	; 12
     256:	05 c0       	rjmp	.+10     	; 0x262 <ADC_Task+0xc8>
     258:	ea e7       	ldi	r30, 0x7A	; 122
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 64       	ori	r24, 0x40	; 64
     260:	80 83       	st	Z, r24
     262:	cf 91       	pop	r28
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	bf 90       	pop	r11
     26e:	af 90       	pop	r10
     270:	9f 90       	pop	r9
     272:	8f 90       	pop	r8
     274:	08 95       	ret

00000276 <MAG_Task>:
     276:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <gMotorOn>
     27a:	88 23       	and	r24, r24
     27c:	49 f0       	breq	.+18     	; 0x290 <MAG_Task+0x1a>
     27e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <tick.2531>
     282:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <tick.2531+0x1>
     286:	01 96       	adiw	r24, 0x01	; 1
     288:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <tick.2531+0x1>
     28c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <tick.2531>
     290:	64 99       	sbic	0x0c, 4	; 12
     292:	1c c0       	rjmp	.+56     	; 0x2cc <MAG_Task+0x56>
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     29a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     29e:	ae d1       	rcall	.+860    	; 0x5fc <LL_UpdateStatus>
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     2a6:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     2aa:	9e d1       	rcall	.+828    	; 0x5e8 <LL_UpdateMag>
     2ac:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     2b0:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     2b4:	5d d1       	rcall	.+698    	; 0x570 <LL_Next>
     2b6:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <STAGE1+0x1>
     2ba:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <STAGE1>
     2be:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_timer+0x1a>
     2c2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <tick.2531+0x1>
     2c6:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <tick.2531>
     2ca:	08 95       	ret
     2cc:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <tick.2531>
     2d0:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <tick.2531+0x1>
     2d4:	4f 97       	sbiw	r24, 0x1f	; 31
     2d6:	d8 f0       	brcs	.+54     	; 0x30e <MAG_Task+0x98>
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     2de:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     2e2:	8c d1       	rcall	.+792    	; 0x5fc <LL_UpdateStatus>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     2ea:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     2ee:	7c d1       	rcall	.+760    	; 0x5e8 <LL_UpdateMag>
     2f0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     2f4:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     2f8:	3b d1       	rcall	.+630    	; 0x570 <LL_Next>
     2fa:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <STAGE1+0x1>
     2fe:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <STAGE1>
     302:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <_timer+0x1a>
     306:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <tick.2531+0x1>
     30a:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <tick.2531>
     30e:	08 95       	ret

00000310 <EXIT_Task>:
     310:	cf 93       	push	r28
     312:	c0 91 5d 03 	lds	r28, 0x035D	; 0x80035d <stepper+0x4>
     316:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     31a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     31e:	4e d1       	rcall	.+668    	; 0x5bc <LL_GetClass>
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e7 5f       	subi	r30, 0xF7	; 247
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	80 81       	ld	r24, Z
     32a:	c8 13       	cpse	r28, r24
     32c:	25 c0       	rjmp	.+74     	; 0x378 <EXIT_Task+0x68>
     32e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <gMotorOn>
     332:	81 11       	cpse	r24, r1
     334:	03 c0       	rjmp	.+6      	; 0x33c <EXIT_Task+0x2c>
     336:	80 e8       	ldi	r24, 0x80	; 128
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	31 d2       	rcall	.+1122   	; 0x79e <PWM>
     33c:	63 e0       	ldi	r22, 0x03	; 3
     33e:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     342:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     346:	5a d1       	rcall	.+692    	; 0x5fc <LL_UpdateStatus>
     348:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     34c:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     350:	0f d1       	rcall	.+542    	; 0x570 <LL_Next>
     352:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <HEAD+0x1>
     356:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <HEAD>
     35a:	fc 01       	movw	r30, r24
     35c:	82 81       	ldd	r24, Z+2	; 0x02
     35e:	93 81       	ldd	r25, Z+3	; 0x03
     360:	2d d1       	rcall	.+602    	; 0x5bc <LL_GetClass>
     362:	c8 2f       	mov	r28, r24
     364:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     368:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     36c:	27 d1       	rcall	.+590    	; 0x5bc <LL_GetClass>
     36e:	6c 2f       	mov	r22, r28
     370:	9e d2       	rcall	.+1340   	; 0x8ae <STEPPER_SetRotation>
     372:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <_timer+0x23>
     376:	19 c0       	rjmp	.+50     	; 0x3aa <EXIT_Task+0x9a>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	10 d2       	rcall	.+1056   	; 0x79e <PWM>
     37e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <memory.2536>
     382:	81 11       	cpse	r24, r1
     384:	12 c0       	rjmp	.+36     	; 0x3aa <EXIT_Task+0x9a>
     386:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <HEAD>
     38a:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <HEAD+0x1>
     38e:	82 81       	ldd	r24, Z+2	; 0x02
     390:	93 81       	ldd	r25, Z+3	; 0x03
     392:	14 d1       	rcall	.+552    	; 0x5bc <LL_GetClass>
     394:	c8 2f       	mov	r28, r24
     396:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     39a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     39e:	0e d1       	rcall	.+540    	; 0x5bc <LL_GetClass>
     3a0:	6c 2f       	mov	r22, r28
     3a2:	85 d2       	rcall	.+1290   	; 0x8ae <STEPPER_SetRotation>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <memory.2536>
     3aa:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     3ae:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     3b2:	04 d1       	rcall	.+520    	; 0x5bc <LL_GetClass>
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <BTN_Task>:
     3b8:	89 b1       	in	r24, 0x09	; 9
     3ba:	83 70       	andi	r24, 0x03	; 3
     3bc:	69 f1       	breq	.+90     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3be:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     3c2:	8f 5f       	subi	r24, 0xFF	; 255
     3c4:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <__data_end>
     3c8:	83 30       	cpi	r24, 0x03	; 3
     3ca:	30 f1       	brcs	.+76     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3cc:	89 b1       	in	r24, 0x09	; 9
     3ce:	83 70       	andi	r24, 0x03	; 3
     3d0:	31 f4       	brne	.+12     	; 0x3de <BTN_Task+0x26>
     3d2:	84 e2       	ldi	r24, 0x24	; 36
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	2b d6       	rcall	.+3158   	; 0x102e <UART_SendString>
     3d8:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     3dc:	08 95       	ret
     3de:	89 b1       	in	r24, 0x09	; 9
     3e0:	83 70       	andi	r24, 0x03	; 3
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	69 f4       	brne	.+26     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e6:	8c e3       	ldi	r24, 0x3C	; 60
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	21 d6       	rcall	.+3138   	; 0x102e <UART_SendString>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <g_PauseRequest>
     3f2:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <g_IdleStartTime+0x1>
     3f6:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <g_IdleStartTime>
     3fa:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     3fe:	08 95       	ret
     400:	89 b1       	in	r24, 0x09	; 9
     402:	83 70       	andi	r24, 0x03	; 3
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	31 f4       	brne	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     408:	82 e6       	ldi	r24, 0x62	; 98
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	10 d6       	rcall	.+3104   	; 0x102e <UART_SendString>
     40e:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     412:	08 95       	ret
     414:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     418:	08 95       	ret

0000041a <ADD_Task>:
     41a:	08 95       	ret

0000041c <SERVER_Task>:
	static uint8_t pin7state = 1;
	static uint8_t pin6state = 1;
	static uint8_t pin5state = 1;
//	static uint8_t temp = 0;
	
	if((PINE & 0x80) == 0) // E7
     41c:	67 99       	sbic	0x0c, 7	; 12
     41e:	16 c0       	rjmp	.+44     	; 0x44c <SERVER_Task+0x30>
	{
		if(pin7state)
     420:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2554>
     424:	88 23       	and	r24, r24
     426:	81 f0       	breq	.+32     	; 0x448 <SERVER_Task+0x2c>
		{
			// Transition Detected O1 High -> Low : Item Enters		
			// Just signal the start of the system by placing the first node into stage 1
			// And enable the watchdog timer
			
			if(STAGE1 == NULL) STAGE1 = HEAD;
     428:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     42c:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     430:	89 2b       	or	r24, r25
     432:	41 f4       	brne	.+16     	; 0x444 <SERVER_Task+0x28>
     434:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     438:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     43c:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <STAGE1+0x1>
     440:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <STAGE1>
			g_WDTimeout = 0;
     444:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
		}
		pin7state = 0;
     448:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2554>
	}
	
	if((PINE & 0x40) == 0) // E6
     44c:	66 99       	sbic	0x0c, 6	; 12
     44e:	0e c0       	rjmp	.+28     	; 0x46c <SERVER_Task+0x50>
	{
		if(pin6state)
     450:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2555>
     454:	88 23       	and	r24, r24
     456:	41 f0       	breq	.+16     	; 0x468 <SERVER_Task+0x4c>
		{
			// Transition Detected O2 High -> Low : Stop ADC
				// Once an item leaves the ADC it is ready to sort
				
				LL_UpdateStatus(STAGE2, SORTABLE);
     458:	62 e0       	ldi	r22, 0x02	; 2
     45a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <STAGE2>
     45e:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <STAGE2+0x1>
     462:	cc d0       	rcall	.+408    	; 0x5fc <LL_UpdateStatus>
				g_WDTimeout = 0;
     464:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
		}
		pin6state = 0;
     468:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2555>
	}
	
	if((PINE & 0x20) == 0) // E5
     46c:	65 99       	sbic	0x0c, 5	; 12
     46e:	0b c0       	rjmp	.+22     	; 0x486 <SERVER_Task+0x6a>
	{
		if(pin5state)
     470:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2556>
     474:	88 23       	and	r24, r24
     476:	29 f0       	breq	.+10     	; 0x482 <SERVER_Task+0x66>
		{
			// Transition Detected O3 High -> Low : Item At End
			_timer[3].state = READY;
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <_timer+0x23>
			//g_PauseRequest = 1;
			g_WDTimeout = 0;
     47e:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
		}
		pin5state = 0;
     482:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2556>
	}
	
	if((PINE & 0x80) == 0x80) // E7
     486:	67 9b       	sbis	0x0c, 7	; 12
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <SERVER_Task+0x8a>
	{
		if(!pin7state)
     48a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2554>
     48e:	81 11       	cpse	r24, r1
     490:	07 c0       	rjmp	.+14     	; 0x4a0 <SERVER_Task+0x84>
		{
			// Transition Detected O2 Low -> High : Item Exits O1
			// Unblock the magnetic sensor when the item leaves O1
			// The magnetic sensor blocks once the magnetism of the piece is inferred
			_timer[2].state = READY;	
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <_timer+0x1a>
			_timer[7].state = READY;
     498:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <_timer+0x47>
			g_WDTimeout = 0;
     49c:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
		}
		pin7state = 1;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2554>
	}
		
	if((PINE & 0x40) == 0x40) // E6
     4a6:	66 9b       	sbis	0x0c, 6	; 12
     4a8:	22 c0       	rjmp	.+68     	; 0x4ee <SERVER_Task+0xd2>
	{
		if(!pin6state)
     4aa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2555>
     4ae:	81 11       	cpse	r24, r1
     4b0:	1b c0       	rjmp	.+54     	; 0x4e8 <SERVER_Task+0xcc>
		{
			// Transition Detected O1 Low -> High : Item enters ADC
			if(STAGE2 == NULL)
     4b2:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <STAGE2>
     4b6:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <STAGE2+0x1>
     4ba:	00 97       	sbiw	r24, 0x00	; 0
     4bc:	49 f4       	brne	.+18     	; 0x4d0 <SERVER_Task+0xb4>
			{
				STAGE2 = HEAD; // First Item enters stage 2
     4be:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
     4c2:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     4c6:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <STAGE2+0x1>
     4ca:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <STAGE2>
			}
			else
			{
				STAGE2 = LL_Next(STAGE2); // Increment stage 2
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <SERVER_Task+0xbe>
     4d0:	4f d0       	rcall	.+158    	; 0x570 <LL_Next>
     4d2:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <STAGE2+0x1>
     4d6:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <STAGE2>
			}
			g_WDTimeout = 0;
     4da:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
			ADCSRA |= (1 << ADSC);
     4de:	ea e7       	ldi	r30, 0x7A	; 122
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	80 83       	st	Z, r24
		}
		pin6state = 1;			
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2555>
	}
		
	if((PINE & 0x20) == 0x20) // E5
     4ee:	65 9b       	sbis	0x0c, 5	; 12
     4f0:	09 c0       	rjmp	.+18     	; 0x504 <SERVER_Task+0xe8>
	{
		if(!pin5state)
     4f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2556>
     4f6:	81 11       	cpse	r24, r1
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <SERVER_Task+0xe2>
		{
			// Transition Detected O3 Low -> High : Item Exits System
			g_WDTimeout = 0;
     4fa:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <g_WDTimeout>
		}
		pin5state = 1;			
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2556>
     504:	08 95       	ret

00000506 <WATCHDOG_Task>:
}

void WATCHDOG_Task(void* arg)
{
	// If this function runs twice then then no item has triggered an optical sensor for 4 seconds.
	if(g_WDTimeout > 1) SYS_Pause(__FUNCTION__); 
     506:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <g_WDTimeout>
     50a:	82 30       	cpi	r24, 0x02	; 2
     50c:	18 f0       	brcs	.+6      	; 0x514 <WATCHDOG_Task+0xe>
     50e:	85 e7       	ldi	r24, 0x75	; 117
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	7c d3       	rcall	.+1784   	; 0xc0c <SYS_Pause>
	g_WDTimeout++;
     514:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <g_WDTimeout>
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <g_WDTimeout>
     51e:	08 95       	ret

00000520 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	7c 01       	movw	r14, r24
     52c:	16 2f       	mov	r17, r22
     52e:	d4 2f       	mov	r29, r20
     530:	c2 2f       	mov	r28, r18
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	ab d5       	rcall	.+2902   	; 0x108e <malloc>
     538:	fc 01       	movw	r30, r24
     53a:	f1 82       	std	Z+1, r15	; 0x01
     53c:	e0 82       	st	Z, r14
     53e:	12 83       	std	Z+2, r17	; 0x02
     540:	d3 83       	std	Z+3, r29	; 0x03
     542:	c4 83       	std	Z+4, r28	; 0x04
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	08 95       	ret

00000550 <LL_ItemListInit>:
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ec 01       	movw	r28, r24
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	99 d5       	rcall	.+2866   	; 0x108e <malloc>
     55c:	fc 01       	movw	r30, r24
     55e:	d1 83       	std	Z+1, r29	; 0x01
     560:	c0 83       	st	Z, r28
     562:	15 82       	std	Z+5, r1	; 0x05
     564:	14 82       	std	Z+4, r1	; 0x04
     566:	13 82       	std	Z+3, r1	; 0x03
     568:	12 82       	std	Z+2, r1	; 0x02
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <LL_Next>:
     570:	fc 01       	movw	r30, r24
     572:	82 81       	ldd	r24, Z+2	; 0x02
     574:	93 81       	ldd	r25, Z+3	; 0x03
     576:	08 95       	ret

00000578 <LL_AddBack>:
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	ec 01       	movw	r28, r24
     57e:	cb 01       	movw	r24, r22
     580:	01 c0       	rjmp	.+2      	; 0x584 <LL_AddBack+0xc>
     582:	e9 01       	movw	r28, r18
     584:	2a 81       	ldd	r18, Y+2	; 0x02
     586:	3b 81       	ldd	r19, Y+3	; 0x03
     588:	21 15       	cp	r18, r1
     58a:	31 05       	cpc	r19, r1
     58c:	d1 f7       	brne	.-12     	; 0x582 <LL_AddBack+0xa>
     58e:	e0 df       	rcall	.-64     	; 0x550 <LL_ItemListInit>
     590:	9b 83       	std	Y+3, r25	; 0x03
     592:	8a 83       	std	Y+2, r24	; 0x02
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <LL_Size>:
     59a:	dc 01       	movw	r26, r24
     59c:	12 96       	adiw	r26, 0x02	; 2
     59e:	ed 91       	ld	r30, X+
     5a0:	fc 91       	ld	r31, X
     5a2:	13 97       	sbiw	r26, 0x03	; 3
     5a4:	30 97       	sbiw	r30, 0x00	; 0
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <LL_Size+0x1e>
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	8f 5f       	subi	r24, 0xFF	; 255
     5ac:	02 80       	ldd	r0, Z+2	; 0x02
     5ae:	f3 81       	ldd	r31, Z+3	; 0x03
     5b0:	e0 2d       	mov	r30, r0
     5b2:	30 97       	sbiw	r30, 0x00	; 0
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <LL_Size+0x10>
     5b6:	08 95       	ret
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	08 95       	ret

000005bc <LL_GetClass>:
     5bc:	dc 01       	movw	r26, r24
     5be:	ed 91       	ld	r30, X+
     5c0:	fc 91       	ld	r31, X
     5c2:	83 81       	ldd	r24, Z+3	; 0x03
     5c4:	08 95       	ret

000005c6 <LL_GetRefl>:
     5c6:	dc 01       	movw	r26, r24
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	08 95       	ret

000005d2 <LL_GetMag>:
     5d2:	dc 01       	movw	r26, r24
     5d4:	ed 91       	ld	r30, X+
     5d6:	fc 91       	ld	r31, X
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	08 95       	ret

000005dc <LL_UpdateRefl>:
     5dc:	dc 01       	movw	r26, r24
     5de:	ed 91       	ld	r30, X+
     5e0:	fc 91       	ld	r31, X
     5e2:	71 83       	std	Z+1, r23	; 0x01
     5e4:	60 83       	st	Z, r22
     5e6:	08 95       	ret

000005e8 <LL_UpdateMag>:
     5e8:	dc 01       	movw	r26, r24
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	62 83       	std	Z+2, r22	; 0x02
     5f0:	08 95       	ret

000005f2 <LL_UpdateClass>:
     5f2:	dc 01       	movw	r26, r24
     5f4:	ed 91       	ld	r30, X+
     5f6:	fc 91       	ld	r31, X
     5f8:	63 83       	std	Z+3, r22	; 0x03
     5fa:	08 95       	ret

000005fc <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     5fc:	dc 01       	movw	r26, r24
     5fe:	ed 91       	ld	r30, X+
     600:	fc 91       	ld	r31, X
     602:	64 83       	std	Z+4, r22	; 0x04
     604:	08 95       	ret

00000606 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     606:	dc 01       	movw	r26, r24
     608:	ed 91       	ld	r30, X+
     60a:	fc 91       	ld	r31, X
     60c:	84 81       	ldd	r24, Z+4	; 0x04
     60e:	08 95       	ret

00000610 <GPIO_Init>:
extern list* TAIL;
extern list* FRONT;

int GPIO_Init(void){

    DDRA = 0xFF;  // Sets all pins on Port A to output
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     614:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     616:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     618:	80 ef       	ldi	r24, 0xF0	; 240
     61a:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     61c:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     61e:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
}
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	08 95       	ret

00000626 <main>:
#include "CALIBRATE.h"
CALIBRATE();
return 0;
#endif
	
	SYS_Init();
     626:	37 d2       	rcall	.+1134   	; 0xa96 <SYS_Init>
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     628:	89 b1       	in	r24, 0x09	; 9
     62a:	83 70       	andi	r24, 0x03	; 3
     62c:	e9 f7       	brne	.-6      	; 0x628 <main+0x2>
		{	
			UART_SendString("Starting System!\r\n");
     62e:	83 e8       	ldi	r24, 0x83	; 131
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	fd d4       	rcall	.+2554   	; 0x102e <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     634:	f8 94       	cli
		}
	}
	
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Placeholder -- Calibration
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	4e e0       	ldi	r20, 0x0E	; 14
     63c:	52 e0       	ldi	r21, 0x02	; 2
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	7a d4       	rcall	.+2292   	; 0xf3c <TIMER_Create>
		_timer[0].state = READY;
     648:	c5 e0       	ldi	r28, 0x05	; 5
     64a:	d3 e0       	ldi	r29, 0x03	; 3
     64c:	12 e0       	ldi	r17, 0x02	; 2
     64e:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);		// ADC Handler
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	4d ec       	ldi	r20, 0xCD	; 205
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	6d d4       	rcall	.+2266   	; 0xf3c <TIMER_Create>
		_timer[1].state = BLOCKED;
     662:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);		// Magnetic Sensor Polling
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	4b e3       	ldi	r20, 0x3B	; 59
     66a:	51 e0       	ldi	r21, 0x01	; 1
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	63 d4       	rcall	.+2246   	; 0xf3c <TIMER_Create>
		_timer[2].state = BLOCKED;
     676:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 e8       	ldi	r20, 0x88	; 136
     67e:	51 e0       	ldi	r21, 0x01	; 1
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	59 d4       	rcall	.+2226   	; 0xf3c <TIMER_Create>
		_timer[3].state = BLOCKED;
     68a:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(1, 1, ADD_Task, NULL);		// Item Enter Handling
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	4d e0       	ldi	r20, 0x0D	; 13
     692:	52 e0       	ldi	r21, 0x02	; 2
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	4f d4       	rcall	.+2206   	; 0xf3c <TIMER_Create>
		_timer[4].state = BLOCKED;
     69e:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(50, 1, BTN_Task, NULL);		// Button Handling
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	4c ed       	ldi	r20, 0xDC	; 220
     6a6:	51 e0       	ldi	r21, 0x01	; 1
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	82 e3       	ldi	r24, 0x32	; 50
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	45 d4       	rcall	.+2186   	; 0xf3c <TIMER_Create>
		_timer[5].state = READY;
     6b2:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(1000, 1, D_Blinky, NULL);	// Event Handling
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	48 ec       	ldi	r20, 0xC8	; 200
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	88 ee       	ldi	r24, 0xE8	; 232
     6c2:	93 e0       	ldi	r25, 0x03	; 3
     6c4:	3b d4       	rcall	.+2166   	; 0xf3c <TIMER_Create>
		_timer[6].state = READY;				
		
		TIMER_Create(4505,1, WATCHDOG_Task, NULL); // Software watchdog (2 seconds)
     6c6:	1e af       	std	Y+62, r17	; 0x3e
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	43 e8       	ldi	r20, 0x83	; 131
     6ce:	52 e0       	ldi	r21, 0x02	; 2
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	89 e9       	ldi	r24, 0x99	; 153
		_timer[7].state = BLOCKED;
     6d6:	91 e1       	ldi	r25, 0x11	; 17
     6d8:	31 d4       	rcall	.+2146   	; 0xf3c <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     6da:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <_timer+0x47>
     6de:	86 e9       	ldi	r24, 0x96	; 150
		
		PWM(0x80);
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	a5 d4       	rcall	.+2378   	; 0x102e <UART_SendString>
     6e4:	80 e8       	ldi	r24, 0x80	; 128
     6e6:	90 e0       	ldi	r25, 0x00	; 0
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     6e8:	5a d0       	rcall	.+180    	; 0x79e <PWM>
	while (1)
	{		
		//PORTC = PINE;
		// Check for a pause request
		// Only pause during idle time to properly restart the scheduler on unpause
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     6ea:	78 94       	sei
     6ec:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <g_PauseRequest>
     6f0:	88 23       	and	r24, r24
     6f2:	19 f0       	breq	.+6      	; 0x6fa <main+0xd4>
     6f4:	88 ea       	ldi	r24, 0xA8	; 168
     6f6:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     6f8:	89 d2       	rcall	.+1298   	; 0xc0c <SYS_Pause>
     6fa:	c0 91 b4 02 	lds	r28, 0x02B4	; 0x8002b4 <HEAD>
		uint16_t reflVal; 

		while(temp)
     6fe:	d0 91 b5 02 	lds	r29, 0x02B5	; 0x8002b5 <HEAD+0x1>
		{
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     702:	20 97       	sbiw	r28, 0x00	; 0
     704:	99 f3       	breq	.-26     	; 0x6ec <main+0xc6>
     706:	20 97       	sbiw	r28, 0x00	; 0
     708:	91 f1       	breq	.+100    	; 0x76e <main+0x148>
     70a:	ce 01       	movw	r24, r28
     70c:	57 df       	rcall	.-338    	; 0x5bc <LL_GetClass>
     70e:	84 30       	cpi	r24, 0x04	; 4
     710:	71 f5       	brne	.+92     	; 0x76e <main+0x148>
     712:	ce 01       	movw	r24, r28
			{
				//classify temp
				
				reflVal = LL_GetRefl(temp);				
     714:	78 df       	rcall	.-272    	; 0x606 <LL_GetStatus>
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	51 f5       	brne	.+84     	; 0x76e <main+0x148>
     71a:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     71c:	54 df       	rcall	.-344    	; 0x5c6 <LL_GetRefl>
     71e:	8c 01       	movw	r16, r24
     720:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     722:	57 df       	rcall	.-338    	; 0x5d2 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     724:	88 23       	and	r24, r24
     726:	91 f0       	breq	.+36     	; 0x74c <main+0x126>
     728:	c8 01       	movw	r24, r16
     72a:	44 97       	sbiw	r24, 0x14	; 20
     72c:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     72e:	91 05       	cpc	r25, r1
     730:	20 f4       	brcc	.+8      	; 0x73a <main+0x114>
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     736:	5d df       	rcall	.-326    	; 0x5f2 <LL_UpdateClass>
     738:	1a c0       	rjmp	.+52     	; 0x76e <main+0x148>
     73a:	0b 52       	subi	r16, 0x2B	; 43
     73c:	11 40       	sbci	r17, 0x01	; 1
     73e:	00 36       	cpi	r16, 0x60	; 96
					{
						LL_UpdateClass(temp, STEEL);
     740:	11 40       	sbci	r17, 0x01	; 1
     742:	a8 f4       	brcc	.+42     	; 0x76e <main+0x148>
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     748:	54 df       	rcall	.-344    	; 0x5f2 <LL_UpdateClass>
     74a:	11 c0       	rjmp	.+34     	; 0x76e <main+0x148>
     74c:	c8 01       	movw	r24, r16
     74e:	86 57       	subi	r24, 0x76	; 118
     750:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     752:	8e 97       	sbiw	r24, 0x2e	; 46
     754:	20 f4       	brcc	.+8      	; 0x75e <main+0x138>
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	ce 01       	movw	r24, r28
     75a:	4b df       	rcall	.-362    	; 0x5f2 <LL_UpdateClass>
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     75c:	08 c0       	rjmp	.+16     	; 0x76e <main+0x148>
     75e:	0b 53       	subi	r16, 0x3B	; 59
     760:	13 40       	sbci	r17, 0x03	; 3
     762:	00 33       	cpi	r16, 0x30	; 48
     764:	11 05       	cpc	r17, r1
				{
					LL_UpdateClass(temp, WHITE);
     766:	18 f4       	brcc	.+6      	; 0x76e <main+0x148>
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	ce 01       	movw	r24, r28
     76c:	42 df       	rcall	.-380    	; 0x5f2 <LL_UpdateClass>
				else
				{
					// Unknown non-magnetic object
				}
			}
			temp = LL_Next(temp);
     76e:	ce 01       	movw	r24, r28
     770:	ff de       	rcall	.-514    	; 0x570 <LL_Next>
     772:	ec 01       	movw	r28, r24
     774:	89 2b       	or	r24, r25
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);

		list* temp = HEAD;
		uint16_t reflVal; 

		while(temp)
     776:	09 f0       	breq	.+2      	; 0x77a <main+0x154>
     778:	c6 cf       	rjmp	.-116    	; 0x706 <main+0xe0>
     77a:	b8 cf       	rjmp	.-144    	; 0x6ec <main+0xc6>

0000077c <__vector_default>:
     77c:	1f 92       	push	r1
  	}
	return 0;
}

ISR(BADISR_vect)
{
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     786:	8a ea       	ldi	r24, 0xAA	; 170
     788:	88 b9       	out	0x08, r24	; 8
     78a:	fe cf       	rjmp	.-4      	; 0x788 <__vector_default+0xc>

0000078c <PWM_Init>:

//Uses PORTB[7]
void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     78c:	84 b5       	in	r24, 0x24	; 36
     78e:	83 68       	ori	r24, 0x83	; 131
     790:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     792:	85 b5       	in	r24, 0x25	; 37
     794:	83 60       	ori	r24, 0x03	; 3
     796:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
     798:	80 e8       	ldi	r24, 0x80	; 128
     79a:	87 bd       	out	0x27, r24	; 39
     79c:	08 95       	ret

0000079e <PWM>:
}

void PWM(const int dutyCycle)
{
    //OCR0A = 90;
	OCR0A = 0x80;
     79e:	20 e8       	ldi	r18, 0x80	; 128
     7a0:	27 bd       	out	0x27, r18	; 39
	if (dutyCycle) 
     7a2:	89 2b       	or	r24, r25
     7a4:	31 f0       	breq	.+12     	; 0x7b2 <PWM+0x14>
	{
		gMotorOn = 1;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <gMotorOn>
		PORTB = ~0x0E;
     7ac:	81 ef       	ldi	r24, 0xF1	; 241
     7ae:	85 b9       	out	0x05, r24	; 5
     7b0:	08 95       	ret
	}
	else 
	{
		gMotorOn = 0;
     7b2:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <gMotorOn>
		PORTB = ~0x0F;
     7b6:	80 ef       	ldi	r24, 0xF0	; 240
     7b8:	85 b9       	out	0x05, r24	; 5
     7ba:	08 95       	ret

000007bc <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     7bc:	f8 94       	cli
	g_StepperInitialized = 0;
     7be:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <g_StepperInitialized>
	stepper._stepNum = 0;
     7c2:	e9 e5       	ldi	r30, 0x59	; 89
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	10 82       	st	Z, r1
	stepper.direction = 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     7cc:	13 82       	std	Z+3, r1	; 0x03
     7ce:	12 82       	std	Z+2, r1	; 0x02
	//Rotate 200 Steps to find the hall sensor
	stepper.current = 0;
     7d0:	14 82       	std	Z+4, r1	; 0x04
	stepper._targetStep = 200;
     7d2:	88 ec       	ldi	r24, 0xC8	; 200
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	96 83       	std	Z+6, r25	; 0x06
     7d8:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     7da:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     7dc:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     7de:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     7e0:	13 86       	std	Z+11, r1	; 0x0b
	stepper._willContinue = 0;
     7e2:	11 86       	std	Z+9, r1	; 0x09
	PORTA = 0x30;
     7e4:	80 e3       	ldi	r24, 0x30	; 48
     7e6:	82 b9       	out	0x02, r24	; 2
	//Initial delay of 20ms
	OCR2A = 0x94;
     7e8:	84 e9       	ldi	r24, 0x94	; 148
     7ea:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     7ee:	e0 eb       	ldi	r30, 0xB0	; 176
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	82 60       	ori	r24, 0x02	; 2
     7f6:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     7f8:	e0 e7       	ldi	r30, 0x70	; 112
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	82 60       	ori	r24, 0x02	; 2
     800:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     802:	e1 eb       	ldi	r30, 0xB1	; 177
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	87 60       	ori	r24, 0x07	; 7
     80a:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21))
	// enable interrupts
	sei();
     80c:	78 94       	sei
     80e:	08 95       	ret

00000810 <STEPPER_NumSteps>:
}

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	86 1b       	sub	r24, r22
     814:	91 09       	sbc	r25, r1
	if (steps >= 0)
     816:	52 f0       	brmi	.+20     	; 0x82c <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     818:	85 36       	cpi	r24, 0x65	; 101
     81a:	91 05       	cpc	r25, r1
     81c:	8c f0       	brlt	.+34     	; 0x840 <STEPPER_NumSteps+0x30>
     81e:	24 e6       	ldi	r18, 0x64	; 100
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	a9 01       	movw	r20, r18
     824:	48 1b       	sub	r20, r24
     826:	59 0b       	sbc	r21, r25
     828:	ca 01       	movw	r24, r20
     82a:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (steps) : (-1) * (steps + TURN_180);
     82c:	8c 39       	cpi	r24, 0x9C	; 156
     82e:	5f ef       	ldi	r21, 0xFF	; 255
     830:	95 07       	cpc	r25, r21
     832:	34 f0       	brlt	.+12     	; 0x840 <STEPPER_NumSteps+0x30>
     834:	2c e9       	ldi	r18, 0x9C	; 156
     836:	3f ef       	ldi	r19, 0xFF	; 255
     838:	a9 01       	movw	r20, r18
     83a:	48 1b       	sub	r20, r24
     83c:	59 0b       	sbc	r21, r25
     83e:	ca 01       	movw	r24, r20
	}
	return steps;
}
     840:	08 95       	ret

00000842 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     846:	c9 e5       	ldi	r28, 0x59	; 89
     848:	d3 e0       	ldi	r29, 0x03	; 3
     84a:	6c 81       	ldd	r22, Y+4	; 0x04
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	9b 81       	ldd	r25, Y+3	; 0x03
     850:	df df       	rcall	.-66     	; 0x810 <STEPPER_NumSteps>
     852:	9e 83       	std	Y+6, r25	; 0x06
     854:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     856:	6a 81       	ldd	r22, Y+2	; 0x02
     858:	7b 81       	ldd	r23, Y+3	; 0x03
     85a:	88 85       	ldd	r24, Y+8	; 0x08
     85c:	d9 df       	rcall	.-78     	; 0x810 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     85e:	2d 81       	ldd	r18, Y+5	; 0x05
     860:	3e 81       	ldd	r19, Y+6	; 0x06
     862:	33 23       	and	r19, r19
     864:	14 f4       	brge	.+4      	; 0x86a <STEPPER_Rotate+0x28>
     866:	28 e0       	ldi	r18, 0x08	; 8
     868:	01 c0       	rjmp	.+2      	; 0x86c <STEPPER_Rotate+0x2a>
     86a:	24 e0       	ldi	r18, 0x04	; 4
     86c:	e9 e5       	ldi	r30, 0x59	; 89
     86e:	f3 e0       	ldi	r31, 0x03	; 3
     870:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     872:	45 81       	ldd	r20, Z+5	; 0x05
     874:	56 81       	ldd	r21, Z+6	; 0x06
     876:	84 9f       	mul	r24, r20
     878:	90 01       	movw	r18, r0
     87a:	85 9f       	mul	r24, r21
     87c:	30 0d       	add	r19, r0
     87e:	94 9f       	mul	r25, r20
     880:	30 0d       	add	r19, r0
     882:	11 24       	eor	r1, r1
     884:	83 2f       	mov	r24, r19
     886:	80 95       	com	r24
     888:	88 1f       	adc	r24, r24
     88a:	88 27       	eor	r24, r24
     88c:	88 1f       	adc	r24, r24
     88e:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     890:	85 81       	ldd	r24, Z+5	; 0x05
     892:	96 81       	ldd	r25, Z+6	; 0x06
     894:	99 23       	and	r25, r25
     896:	1c f4       	brge	.+6      	; 0x89e <STEPPER_Rotate+0x5c>
     898:	91 95       	neg	r25
     89a:	81 95       	neg	r24
     89c:	91 09       	sbc	r25, r1
     89e:	e9 e5       	ldi	r30, 0x59	; 89
     8a0:	f3 e0       	ldi	r31, 0x03	; 3
     8a2:	96 83       	std	Z+6, r25	; 0x06
     8a4:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     8a6:	17 82       	std	Z+7, r1	; 0x07
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
	cli();
     8b2:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = position[target];
     8b4:	e8 2f       	mov	r30, r24
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	e1 5f       	subi	r30, 0xF1	; 241
     8ba:	fe 4f       	sbci	r31, 0xFE	; 254
     8bc:	80 81       	ld	r24, Z
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	c9 e5       	ldi	r28, 0x59	; 89
     8c2:	d3 e0       	ldi	r29, 0x03	; 3
     8c4:	9b 83       	std	Y+3, r25	; 0x03
     8c6:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = position[next];
     8c8:	e6 2f       	mov	r30, r22
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	e1 5f       	subi	r30, 0xF1	; 241
     8ce:	fe 4f       	sbci	r31, 0xFE	; 254
     8d0:	80 81       	ld	r24, Z
     8d2:	88 87       	std	Y+8, r24	; 0x08
	STEPPER_Rotate();
     8d4:	b6 df       	rcall	.-148    	; 0x842 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     8d6:	eb 85       	ldd	r30, Y+11	; 0x0b
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	eb 5e       	subi	r30, 0xEB	; 235
     8dc:	fe 4f       	sbci	r31, 0xFE	; 254
     8de:	80 81       	ld	r24, Z
     8e0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     8e4:	78 94       	sei
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	0b b6       	in	r0, 0x3b	; 59
     8f8:	0f 92       	push	r0
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	ef 93       	push	r30
     908:	ff 93       	push	r31
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <__vector_13+0x24>
     910:	00 d0       	rcall	.+0      	; 0x912 <__vector_13+0x26>
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     916:	86 e3       	ldi	r24, 0x36	; 54
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	a0 e0       	ldi	r26, 0x00	; 0
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	9e e2       	ldi	r25, 0x2E	; 46
     920:	ad e2       	ldi	r26, 0x2D	; 45
     922:	b5 e3       	ldi	r27, 0x35	; 53
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	ab 83       	std	Y+3, r26	; 0x03
     92a:	bc 83       	std	Y+4, r27	; 0x04
		
	if (stepper._currentStep < stepper._targetStep)
     92c:	e9 e5       	ldi	r30, 0x59	; 89
     92e:	f3 e0       	ldi	r31, 0x03	; 3
     930:	87 81       	ldd	r24, Z+7	; 0x07
     932:	25 81       	ldd	r18, Z+5	; 0x05
     934:	36 81       	ldd	r19, Z+6	; 0x06
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	82 17       	cp	r24, r18
     93a:	93 07       	cpc	r25, r19
     93c:	0c f0       	brlt	.+2      	; 0x940 <__vector_13+0x54>
     93e:	5a c0       	rjmp	.+180    	; 0x9f4 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     940:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <stepper+0x1>
     944:	84 30       	cpi	r24, 0x04	; 4
     946:	51 f4       	brne	.+20     	; 0x95c <__vector_13+0x70>
     948:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <stepper>
     94c:	e1 e0       	ldi	r30, 0x01	; 1
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	ec 0f       	add	r30, r28
     952:	fd 1f       	adc	r31, r29
     954:	e8 0f       	add	r30, r24
     956:	f1 1d       	adc	r31, r1
     958:	80 81       	ld	r24, Z
     95a:	0d c0       	rjmp	.+26     	; 0x976 <__vector_13+0x8a>
     95c:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <stepper>
     960:	e3 e0       	ldi	r30, 0x03	; 3
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	e8 1b       	sub	r30, r24
     966:	f1 09       	sbc	r31, r1
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	8c 0f       	add	r24, r28
     96e:	9d 1f       	adc	r25, r29
     970:	e8 0f       	add	r30, r24
     972:	f9 1f       	adc	r31, r25
     974:	80 81       	ld	r24, Z
     976:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     978:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <stepper>
     97c:	83 30       	cpi	r24, 0x03	; 3
     97e:	21 f0       	breq	.+8      	; 0x988 <__vector_13+0x9c>
     980:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <stepper>
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	01 c0       	rjmp	.+2      	; 0x98a <__vector_13+0x9e>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	e9 e5       	ldi	r30, 0x59	; 89
     98c:	f3 e0       	ldi	r31, 0x03	; 3
     98e:	80 83       	st	Z, r24

		stepper._currentStep++;
     990:	87 81       	ldd	r24, Z+7	; 0x07
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     996:	85 81       	ldd	r24, Z+5	; 0x05
     998:	96 81       	ldd	r25, Z+6	; 0x06
     99a:	27 81       	ldd	r18, Z+7	; 0x07
     99c:	82 1b       	sub	r24, r18
     99e:	91 09       	sbc	r25, r1
     9a0:	06 97       	sbiw	r24, 0x06	; 6
     9a2:	74 f4       	brge	.+28     	; 0x9c0 <__vector_13+0xd4>
     9a4:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <stepper+0xb>
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	eb 5e       	subi	r30, 0xEB	; 235
     9ac:	fe 4f       	sbci	r31, 0xFE	; 254
     9ae:	80 81       	ld	r24, Z
     9b0:	84 39       	cpi	r24, 0x94	; 148
     9b2:	30 f4       	brcc	.+12     	; 0x9c0 <__vector_13+0xd4>
		{
			stepper._accellStep--;
     9b4:	e9 e5       	ldi	r30, 0x59	; 89
     9b6:	f3 e0       	ldi	r31, 0x03	; 3
     9b8:	83 85       	ldd	r24, Z+11	; 0x0b
     9ba:	81 50       	subi	r24, 0x01	; 1
     9bc:	83 87       	std	Z+11, r24	; 0x0b
     9be:	11 c0       	rjmp	.+34     	; 0x9e2 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     9c0:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <stepper+0x7>
     9c4:	86 30       	cpi	r24, 0x06	; 6
     9c6:	68 f0       	brcs	.+26     	; 0x9e2 <__vector_13+0xf6>
     9c8:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <stepper+0xb>
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	eb 5e       	subi	r30, 0xEB	; 235
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	80 81       	ld	r24, Z
     9d4:	81 34       	cpi	r24, 0x41	; 65
     9d6:	28 f0       	brcs	.+10     	; 0x9e2 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     9d8:	e9 e5       	ldi	r30, 0x59	; 89
     9da:	f3 e0       	ldi	r31, 0x03	; 3
     9dc:	83 85       	ldd	r24, Z+11	; 0x0b
     9de:	8f 5f       	subi	r24, 0xFF	; 255
     9e0:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     9e2:	e0 91 64 03 	lds	r30, 0x0364	; 0x800364 <stepper+0xb>
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	eb 5e       	subi	r30, 0xEB	; 235
     9ea:	fe 4f       	sbci	r31, 0xFE	; 254
     9ec:	80 81       	ld	r24, Z
     9ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     9f2:	29 c0       	rjmp	.+82     	; 0xa46 <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     9f4:	e9 e5       	ldi	r30, 0x59	; 89
     9f6:	f3 e0       	ldi	r31, 0x03	; 3
     9f8:	87 81       	ldd	r24, Z+7	; 0x07
     9fa:	25 81       	ldd	r18, Z+5	; 0x05
     9fc:	36 81       	ldd	r19, Z+6	; 0x06
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	82 17       	cp	r24, r18
     a02:	93 07       	cpc	r25, r19
     a04:	01 f5       	brne	.+64     	; 0xa46 <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     a06:	82 81       	ldd	r24, Z+2	; 0x02
     a08:	93 81       	ldd	r25, Z+3	; 0x03
     a0a:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     a0c:	81 85       	ldd	r24, Z+9	; 0x09
     a0e:	88 23       	and	r24, r24
     a10:	19 f0       	breq	.+6      	; 0xa18 <__vector_13+0x12c>
     a12:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <stepper+0xb>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__vector_13+0x12e>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	a9 e5       	ldi	r26, 0x59	; 89
     a1c:	b3 e0       	ldi	r27, 0x03	; 3
     a1e:	1b 96       	adiw	r26, 0x0b	; 11
     a20:	8c 93       	st	X, r24
     a22:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     a24:	1b 96       	adiw	r26, 0x0b	; 11
     a26:	ec 91       	ld	r30, X
     a28:	1b 97       	sbiw	r26, 0x0b	; 11
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	eb 5e       	subi	r30, 0xEB	; 235
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
     a32:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     a36:	19 96       	adiw	r26, 0x09	; 9
     a38:	8c 91       	ld	r24, X
     a3a:	81 11       	cpse	r24, r1
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__vector_13+0x156>
     a3e:	82 b1       	in	r24, 0x02	; 2
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <__vector_13+0x158>
     a42:	82 b1       	in	r24, 0x02	; 2
     a44:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     a46:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <stepper+0xa>
     a4a:	81 11       	cpse	r24, r1
     a4c:	0f c0       	rjmp	.+30     	; 0xa6c <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     a4e:	63 99       	sbic	0x0c, 3	; 12
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     a52:	e9 e5       	ldi	r30, 0x59	; 89
     a54:	f3 e0       	ldi	r31, 0x03	; 3
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     a5a:	10 82       	st	Z, r1
			stepper.direction = 1;
     a5c:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     a5e:	13 82       	std	Z+3, r1	; 0x03
     a60:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     a62:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     a64:	16 82       	std	Z+6, r1	; 0x06
     a66:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     a68:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     a6a:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	bf 91       	pop	r27
     a7e:	af 91       	pop	r26
     a80:	9f 91       	pop	r25
     a82:	8f 91       	pop	r24
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <SYS_Init>:
 */ 

#include "sys.h"

void SYS_Init()
{
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	e2 97       	sbiw	r28, 0x32	; 50
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
	// Initialize system
	
		
	cli();
     aba:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
     abc:	e1 e6       	ldi	r30, 0x61	; 97
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 e8       	ldi	r24, 0x80	; 128
     ac2:	80 83       	st	Z, r24
	CLKPR = 0;
     ac4:	10 82       	st	Z, r1
	UART_Init();
     ac6:	9b d2       	rcall	.+1334   	; 0xffe <UART_Init>
	GPIO_Init();
     ac8:	a3 dd       	rcall	.-1210   	; 0x610 <GPIO_Init>
	ADC_Init();
     aca:	05 db       	rcall	.-2550   	; 0xd6 <ADC_Init>
	STEPPER_Init();	
     acc:	77 de       	rcall	.-786    	; 0x7bc <STEPPER_Init>
     ace:	1a d2       	rcall	.+1076   	; 0xf04 <TIMER_Init>
	TIMER_Init();
     ad0:	5d de       	rcall	.-838    	; 0x78c <PWM_Init>
     ad2:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <g_ADCCount+0x1>
	PWM_Init();
     ad6:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <g_ADCCount>
	g_ADCCount = 0;
     ada:	84 e1       	ldi	r24, 0x14	; 20
     adc:	ed eb       	ldi	r30, 0xBD	; 189
     ade:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     ae0:	df 01       	movw	r26, r30
     ae2:	1d 92       	st	X+, r1
     ae4:	8a 95       	dec	r24
     ae6:	e9 f7       	brne	.-6      	; 0xae2 <SYS_Init+0x4c>
     ae8:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <g_ADCFlag>
     aec:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <g_PauseRequest>
	g_ADCFlag = 0;
     af0:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <HEAD+0x1>
	g_PauseRequest = 0;
     af4:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <HEAD>
// 	extern list* STAGE2;
// 	extern list* TAIL;
//	extern list* FRONT;	
	itemNode* initNode = NULL;
	
	HEAD = NULL;
     af8:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <TAIL+0x1>
     afc:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <TAIL>
	TAIL = NULL;
     b00:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <STAGE1+0x1>
     b04:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <STAGE1>
	STAGE1 = NULL;
     b08:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <STAGE2+0x1>
     b0c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <STAGE2>
	STAGE2 = NULL;
     b10:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <FRONT+0x1>
     b14:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <FRONT>
	FRONT = NULL;
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	44 e0       	ldi	r20, 0x04	; 4
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     b1c:	6f ef       	ldi	r22, 0xFF	; 255
     b1e:	89 ee       	ldi	r24, 0xE9	; 233
     b20:	9d ef       	ldi	r25, 0xFD	; 253
     b22:	fe dc       	rcall	.-1540   	; 0x520 <LL_ItemInit>
     b24:	15 dd       	rcall	.-1494   	; 0x550 <LL_ItemListInit>
     b26:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <HEAD+0x1>
	
	HEAD = LL_ItemListInit(initNode);
     b2a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <HEAD>
     b2e:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <FRONT+0x1>
     b32:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <FRONT>
	FRONT = HEAD;
     b36:	1a ef       	ldi	r17, 0xFA	; 250
     b38:	0f 2e       	mov	r0, r31
     b3a:	f8 ee       	ldi	r31, 0xE8	; 232
     b3c:	ef 2e       	mov	r14, r31
     b3e:	fd ef       	ldi	r31, 0xFD	; 253
     b40:	ff 2e       	mov	r15, r31
     b42:	f0 2d       	mov	r31, r0
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	44 e0       	ldi	r20, 0x04	; 4
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     b48:	61 2f       	mov	r22, r17
     b4a:	c7 01       	movw	r24, r14
     b4c:	e9 dc       	rcall	.-1582   	; 0x520 <LL_ItemInit>
     b4e:	bc 01       	movw	r22, r24
     b50:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     b54:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     b58:	0f dd       	rcall	.-1506   	; 0x578 <LL_AddBack>
     b5a:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <TAIL+0x1>
     b5e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <TAIL>
     b62:	b1 e0       	ldi	r27, 0x01	; 1
     b64:	eb 1a       	sub	r14, r27
     b66:	f1 08       	sbc	r15, r1
     b68:	11 50       	subi	r17, 0x01	; 1
     b6a:	1a 3c       	cpi	r17, 0xCA	; 202
     b6c:	59 f7       	brne	.-42     	; 0xb44 <SYS_Init+0xae>
	
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
	
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;
	for(int i = 0; i < 48; i++)
     b6e:	05 e0       	ldi	r16, 0x05	; 5
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	45 e0       	ldi	r20, 0x05	; 5
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     b76:	6a ef       	ldi	r22, 0xFA	; 250
     b78:	88 ee       	ldi	r24, 0xE8	; 232
     b7a:	9d ef       	ldi	r25, 0xFD	; 253
     b7c:	d1 dc       	rcall	.-1630   	; 0x520 <LL_ItemInit>
     b7e:	bc 01       	movw	r22, r24
     b80:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <HEAD>
		LL_AddBack(HEAD,initNode);
     b84:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <HEAD+0x1>
     b88:	f7 dc       	rcall	.-1554   	; 0x578 <LL_AddBack>
     b8a:	01 50       	subi	r16, 0x01	; 1
     b8c:	11 09       	sbc	r17, r1
     b8e:	89 f7       	brne	.-30     	; 0xb72 <SYS_Init+0xdc>
     b90:	00 91 bb 02 	lds	r16, 0x02BB	; 0x8002bb <TAIL>
	for(int i = 0; i < 48; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	for(int j = 0; j < 5; j++)
     b94:	10 91 bc 02 	lds	r17, 0x02BC	; 0x8002bc <TAIL+0x1>
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}
	
	char temp[50];
	sprintf(temp,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next);
     b98:	f8 01       	movw	r30, r16
     b9a:	b2 80       	ldd	r11, Z+2	; 0x02
     b9c:	a3 80       	ldd	r10, Z+3	; 0x03
     b9e:	d0 90 b6 02 	lds	r13, 0x02B6	; 0x8002b6 <FRONT>
     ba2:	c0 90 b7 02 	lds	r12, 0x02B7	; 0x8002b7 <FRONT+0x1>
     ba6:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <HEAD>
     baa:	e0 90 b5 02 	lds	r14, 0x02B5	; 0x8002b5 <HEAD+0x1>
     bae:	8f 2d       	mov	r24, r15
     bb0:	9e 2d       	mov	r25, r14
     bb2:	f3 dc       	rcall	.-1562   	; 0x59a <LL_Size>
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	1f 93       	push	r17
     bbe:	0f 93       	push	r16
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	1f 92       	push	r1
     bc6:	8f 93       	push	r24
     bc8:	8d ea       	ldi	r24, 0xAD	; 173
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	8e 01       	movw	r16, r28
     bd2:	0f 5f       	subi	r16, 0xFF	; 255
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	1f 93       	push	r17
     bd8:	0f 93       	push	r16
     bda:	7a d3       	rcall	.+1780   	; 0x12d0 <sprintf>
     bdc:	c8 01       	movw	r24, r16
     bde:	27 d2       	rcall	.+1102   	; 0x102e <UART_SendString>
	UART_SendString(temp);
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
}
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	e2 96       	adiw	r28, 0x32	; 50
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	bf 90       	pop	r11
     c08:	af 90       	pop	r10
     c0a:	08 95       	ret

00000c0c <SYS_Pause>:
     c0c:	3f 92       	push	r3
     c0e:	4f 92       	push	r4
     c10:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     c12:	6f 92       	push	r6
     c14:	7f 92       	push	r7
     c16:	8f 92       	push	r8
     c18:	9f 92       	push	r9
     c1a:	af 92       	push	r10
     c1c:	bf 92       	push	r11
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	c8 5c       	subi	r28, 0xC8	; 200
     c34:	d1 09       	sbc	r29, r1
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	f8 2e       	mov	r15, r24
     c42:	e9 2e       	mov	r14, r25
	cli();
     c44:	f8 94       	cli
	PWM(0);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a9 dd       	rcall	.-1198   	; 0x79e <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     c4c:	00 91 b6 02 	lds	r16, 0x02B6	; 0x8002b6 <FRONT>
     c50:	10 91 b7 02 	lds	r17, 0x02B7	; 0x8002b7 <FRONT+0x1>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	8a ed       	ldi	r24, 0xDA	; 218
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	ce 01       	movw	r24, r28
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	7c 01       	movw	r14, r24
     c66:	9f 93       	push	r25
     c68:	8f 93       	push	r24
     c6a:	32 d3       	rcall	.+1636   	; 0x12d0 <sprintf>
	UART_SendString(buffer);
     c6c:	c7 01       	movw	r24, r14
     c6e:	df d1       	rcall	.+958    	; 0x102e <UART_SendString>
     c70:	0f 90       	pop	r0
	
	while (LL_GetClass(temp) != END_OF_LIST)
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     c7e:	f1 2c       	mov	r15, r1
     c80:	0f 2e       	mov	r0, r31
	
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[50];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c82:	f5 ef       	ldi	r31, 0xF5	; 245
     c84:	af 2e       	mov	r10, r31
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	bf 2e       	mov	r11, r31
     c8a:	f0 2d       	mov	r31, r0
     c8c:	6e 01       	movw	r12, r28
     c8e:	97 e9       	ldi	r25, 0x97	; 151
     c90:	c9 0e       	add	r12, r25
     c92:	d1 1c       	adc	r13, r1
     c94:	27 c0       	rjmp	.+78     	; 0xce4 <SYS_Pause+0xd8>
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     c96:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[50];
		c++;
     c98:	ee 1a       	sub	r14, r30
     c9a:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     c9c:	c8 01       	movw	r24, r16
     c9e:	b3 dc       	rcall	.-1690   	; 0x606 <LL_GetStatus>
     ca0:	78 2e       	mov	r7, r24
     ca2:	c8 01       	movw	r24, r16
     ca4:	8b dc       	rcall	.-1770   	; 0x5bc <LL_GetClass>
     ca6:	88 2e       	mov	r8, r24
     ca8:	c8 01       	movw	r24, r16
     caa:	93 dc       	rcall	.-1754   	; 0x5d2 <LL_GetMag>
     cac:	98 2e       	mov	r9, r24
     cae:	c8 01       	movw	r24, r16
     cb0:	8a dc       	rcall	.-1772   	; 0x5c6 <LL_GetRefl>
     cb2:	1f 92       	push	r1
     cb4:	7f 92       	push	r7
     cb6:	1f 92       	push	r1
     cb8:	8f 92       	push	r8
     cba:	1f 92       	push	r1
     cbc:	9f 92       	push	r9
     cbe:	9f 93       	push	r25
     cc0:	8f 93       	push	r24
     cc2:	ff 92       	push	r15
     cc4:	ef 92       	push	r14
     cc6:	bf 92       	push	r11
     cc8:	af 92       	push	r10
     cca:	df 92       	push	r13
     ccc:	cf 92       	push	r12
     cce:	00 d3       	rcall	.+1536   	; 0x12d0 <sprintf>
		UART_SendString(listbuff);
     cd0:	c6 01       	movw	r24, r12
     cd2:	ad d1       	rcall	.+858    	; 0x102e <UART_SendString>
     cd4:	c8 01       	movw	r24, r16
		temp = LL_Next(temp);	
     cd6:	4c dc       	rcall	.-1896   	; 0x570 <LL_Next>
     cd8:	8c 01       	movw	r16, r24
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	c8 01       	movw	r24, r16
	int c = 0;
	
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);
	
	while (LL_GetClass(temp) != END_OF_LIST)
     ce6:	6a dc       	rcall	.-1836   	; 0x5bc <LL_GetClass>
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	a9 f6       	brne	.-86     	; 0xc96 <SYS_Pause+0x8a>
     cec:	0f 2e       	mov	r0, r31
     cee:	f5 e0       	ldi	r31, 0x05	; 5
     cf0:	cf 2e       	mov	r12, r31
     cf2:	f3 e0       	ldi	r31, 0x03	; 3
     cf4:	df 2e       	mov	r13, r31
     cf6:	f0 2d       	mov	r31, r0
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	10 e0       	ldi	r17, 0x00	; 0
     cfc:	0f 2e       	mov	r0, r31
     cfe:	f9 e2       	ldi	r31, 0x29	; 41
	}
	
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
     d00:	af 2e       	mov	r10, r31
     d02:	f2 e0       	ldi	r31, 0x02	; 2
     d04:	bf 2e       	mov	r11, r31
     d06:	f0 2d       	mov	r31, r0
     d08:	7e 01       	movw	r14, r28
     d0a:	97 e9       	ldi	r25, 0x97	; 151
     d0c:	e9 0e       	add	r14, r25
     d0e:	f1 1c       	adc	r15, r1
     d10:	f6 01       	movw	r30, r12
     d12:	80 85       	ldd	r24, Z+8	; 0x08
     d14:	1f 92       	push	r1
     d16:	8f 93       	push	r24
     d18:	1f 93       	push	r17
     d1a:	0f 93       	push	r16
     d1c:	bf 92       	push	r11
     d1e:	af 92       	push	r10
     d20:	ff 92       	push	r15
     d22:	ef 92       	push	r14
     d24:	d5 d2       	rcall	.+1450   	; 0x12d0 <sprintf>
     d26:	c7 01       	movw	r24, r14
		UART_SendString(statebuff);
     d28:	82 d1       	rcall	.+772    	; 0x102e <UART_SendString>
     d2a:	0f 5f       	subi	r16, 0xFF	; 255
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n", c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	for(int i = 0; i < 7; i++)
     d2e:	f9 e0       	ldi	r31, 0x09	; 9
     d30:	cf 0e       	add	r12, r31
     d32:	d1 1c       	adc	r13, r1
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	07 30       	cpi	r16, 0x07	; 7
     d40:	11 05       	cpc	r17, r1
     d42:	31 f7       	brne	.-52     	; 0xd10 <SYS_Pause+0x104>
     d44:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <STAGE2>
		char statebuff[10];
		sprintf(statebuff, "Timer %d State: %u\r\n", i, _timer[i].state);
		UART_SendString(statebuff);
	}
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     d48:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <STAGE2+0x1>
     d4c:	3c dc       	rcall	.-1928   	; 0x5c6 <LL_GetRefl>
     d4e:	48 2e       	mov	r4, r24
     d50:	39 2e       	mov	r3, r25
     d52:	60 90 4d 03 	lds	r6, 0x034D	; 0x80034d <STAGE2>
     d56:	50 90 4e 03 	lds	r5, 0x034E	; 0x80034e <STAGE2+0x1>
     d5a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <STAGE1>
     d5e:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <STAGE1+0x1>
     d62:	37 dc       	rcall	.-1938   	; 0x5d2 <LL_GetMag>
     d64:	78 2e       	mov	r7, r24
     d66:	90 90 03 03 	lds	r9, 0x0303	; 0x800303 <STAGE1>
     d6a:	80 90 04 03 	lds	r8, 0x0304	; 0x800304 <STAGE1+0x1>
     d6e:	00 91 bb 02 	lds	r16, 0x02BB	; 0x8002bb <TAIL>
     d72:	10 91 bc 02 	lds	r17, 0x02BC	; 0x8002bc <TAIL+0x1>
     d76:	f8 01       	movw	r30, r16
     d78:	b2 80       	ldd	r11, Z+2	; 0x02
     d7a:	a3 80       	ldd	r10, Z+3	; 0x03
     d7c:	d0 90 b6 02 	lds	r13, 0x02B6	; 0x8002b6 <FRONT>
     d80:	c0 90 b7 02 	lds	r12, 0x02B7	; 0x8002b7 <FRONT+0x1>
     d84:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <HEAD>
     d88:	e0 90 b5 02 	lds	r14, 0x02B5	; 0x8002b5 <HEAD+0x1>
     d8c:	8f 2d       	mov	r24, r15
     d8e:	9e 2d       	mov	r25, r14
     d90:	04 dc       	rcall	.-2040   	; 0x59a <LL_Size>
     d92:	3f 92       	push	r3
     d94:	4f 92       	push	r4
     d96:	5f 92       	push	r5
     d98:	6f 92       	push	r6
     d9a:	1f 92       	push	r1
     d9c:	7f 92       	push	r7
     d9e:	8f 92       	push	r8
     da0:	9f 92       	push	r9
     da2:	af 92       	push	r10
     da4:	bf 92       	push	r11
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	1f 93       	push	r17
     dac:	0f 93       	push	r16
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	1f 92       	push	r1
     db4:	8f 93       	push	r24
     db6:	8e e3       	ldi	r24, 0x3E	; 62
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	9f 93       	push	r25
     dbc:	8f 93       	push	r24
     dbe:	8e 01       	movw	r16, r28
     dc0:	0b 59       	subi	r16, 0x9B	; 155
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	1f 93       	push	r17
     dc6:	0f 93       	push	r16
     dc8:	83 d2       	rcall	.+1286   	; 0x12d0 <sprintf>
	UART_SendString(anotherbuff);
     dca:	c8 01       	movw	r24, r16
     dcc:	30 d1       	rcall	.+608    	; 0x102e <UART_SendString>
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	89 b1       	in	r24, 0x09	; 9
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     dda:	83 70       	andi	r24, 0x03	; 3
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <SYS_Pause+0x1cc>
     dde:	83 e8       	ldi	r24, 0x83	; 131
		{
			UART_SendString("Starting System!\r\n");
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	25 d1       	rcall	.+586    	; 0x102e <UART_SendString>
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
     de8:	da dc       	rcall	.-1612   	; 0x79e <PWM>
     dea:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <g_PauseRequest>
     dee:	78 94       	sei
			g_PauseRequest = 0;
     df0:	c8 53       	subi	r28, 0x38	; 56
     df2:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
     df4:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
}
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	8f 90       	pop	r8
     e16:	7f 90       	pop	r7
     e18:	6f 90       	pop	r6
     e1a:	5f 90       	pop	r5
     e1c:	4f 90       	pop	r4
     e1e:	3f 90       	pop	r3
     e20:	08 95       	ret

00000e22 <__vector_17>:


static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	ef 92       	push	r14
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
	PORTC ^= 0xFE;
     e54:	98 b1       	in	r25, 0x08	; 8
     e56:	8e ef       	ldi	r24, 0xFE	; 254
     e58:	89 27       	eor	r24, r25
     e5a:	88 b9       	out	0x08, r24	; 8
		// Overhead: 44.4 us
		// min frame size 444us = 3552 ticks = 0x0DE0;
		
	// uint16_t start = TCNT1;
	// uint16_t stop = 0;
	_timer_tick++;
     e5c:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <_timer_tick>
     e60:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <_timer_tick+0x1>
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_timer_tick+0x1>
     e6a:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_timer_tick>
     e6e:	c5 e0       	ldi	r28, 0x05	; 5
     e70:	d3 e0       	ldi	r29, 0x03	; 3
     e72:	0f 2e       	mov	r0, r31
     e74:	fd e4       	ldi	r31, 0x4D	; 77
     e76:	ef 2e       	mov	r14, r31
     e78:	f3 e0       	ldi	r31, 0x03	; 3
     e7a:	ff 2e       	mov	r15, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		/* If the timer is enabled and expired, invoke the callback */
		//if (_timer[i].callback != NULL) PORTD = 0xF0;

		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     e80:	ec 81       	ldd	r30, Y+4	; 0x04
     e82:	fd 81       	ldd	r31, Y+5	; 0x05
     e84:	30 97       	sbiw	r30, 0x00	; 0
     e86:	e9 f0       	breq	.+58     	; 0xec2 <__vector_17+0xa0>
     e88:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <_timer_tick>
     e8c:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <_timer_tick+0x1>
     e90:	28 81       	ld	r18, Y
     e92:	39 81       	ldd	r19, Y+1	; 0x01
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	a1 f4       	brne	.+40     	; 0xec2 <__vector_17+0xa0>
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     e9a:	88 85       	ldd	r24, Y+8	; 0x08
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	19 f4       	brne	.+6      	; 0xea6 <__vector_17+0x84>
     ea0:	8e 81       	ldd	r24, Y+6	; 0x06
     ea2:	9f 81       	ldd	r25, Y+7	; 0x07
     ea4:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     ea6:	d8 01       	movw	r26, r16
     ea8:	12 96       	adiw	r26, 0x02	; 2
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	13 97       	sbiw	r26, 0x03	; 3
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	39 f0       	breq	.+14     	; 0xec2 <__vector_17+0xa0>
				/* Timer is periodic, calculate next expiration */
				_timer[i].expiry += _timer[i].periodic;
     eb4:	2d 91       	ld	r18, X+
     eb6:	3c 91       	ld	r19, X
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	8d 93       	st	X+, r24
     ec0:	9c 93       	st	X, r25
     ec2:	29 96       	adiw	r28, 0x09	; 9
	_timer_tick++;
	//g_SchedulerStartTime = TCNT1;
	
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
     ec4:	ce 15       	cp	r28, r14
     ec6:	df 05       	cpc	r29, r15
     ec8:	d1 f6       	brne	.-76     	; 0xe7e <__vector_17+0x5c>
	 * sprintf(buf,"%u\r\n", total);
	 * UART_SendString(buf);
	*/
	
	// Utilization diagnostic
	PORTC ^= 0xFE;
     eca:	98 b1       	in	r25, 0x08	; 8
     ecc:	8e ef       	ldi	r24, 0xFE	; 254
     ece:	89 27       	eor	r24, r25
     ed0:	88 b9       	out	0x08, r24	; 8
}
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	bf 91       	pop	r27
     edc:	af 91       	pop	r26
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	7f 91       	pop	r23
     ee4:	6f 91       	pop	r22
     ee6:	5f 91       	pop	r21
     ee8:	4f 91       	pop	r20
     eea:	3f 91       	pop	r19
     eec:	2f 91       	pop	r18
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	0f 90       	pop	r0
     ef8:	0b be       	out	0x3b, r0	; 59
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <TIMER_Init>:


int TIMER_Init(void)
{
    //Configure the PORTD4 as output
    TCNT1 = 0x0000;
     f04:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     f08:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    OCR1A = 0x0DE0;   // 12C0 == 600us, 960 = 300 us 0x0DE0 444us
     f0c:	80 ee       	ldi	r24, 0xE0	; 224
     f0e:	9d e0       	ldi	r25, 0x0D	; 13
     f10:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f14:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1A = 0x00;
     f18:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);  // Timer mode with no prescaling and CTC mode (reset counter on compare mode)
     f1c:	89 e0       	ldi	r24, 0x09	; 9
     f1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 = (1 << OCIE1A);			   // Enable timer1 output compare interrupt
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	memset(_timer, 0, sizeof(_timer));
     f28:	88 e4       	ldi	r24, 0x48	; 72
     f2a:	e5 e0       	ldi	r30, 0x05	; 5
     f2c:	f3 e0       	ldi	r31, 0x03	; 3
     f2e:	df 01       	movw	r26, r30
     f30:	1d 92       	st	X+, r1
     f32:	8a 95       	dec	r24
     f34:	e9 f7       	brne	.-6      	; 0xf30 <TIMER_Init+0x2c>

	return 0;
}
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	08 95       	ret

00000f3c <TIMER_Create>:
					timeout_ms: number of ms to count too, max 65535 for non periodic,32767 for periodic 
					periodic: 0 or 1 for not repeating, repeating.
					
*/
int TIMER_Create(uint16_t timeout_ms, int periodic, void (*callback)(void *), void *arg)
{
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	8b 01       	movw	r16, r22
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
     f46:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <_timer+0x4>
     f4a:	70 91 0a 03 	lds	r23, 0x030A	; 0x80030a <_timer+0x5>
     f4e:	67 2b       	or	r22, r23
     f50:	09 f4       	brne	.+2      	; 0xf54 <TIMER_Create+0x18>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <TIMER_Create+0xaa>
     f54:	e5 e0       	ldi	r30, 0x05	; 5
     f56:	f3 e0       	ldi	r31, 0x03	; 3
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     f58:	a1 e0       	ldi	r26, 0x01	; 1
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
     f5c:	c5 85       	ldd	r28, Z+13	; 0x0d
     f5e:	d6 85       	ldd	r29, Z+14	; 0x0e
     f60:	cd 2b       	or	r28, r29
     f62:	09 f4       	brne	.+2      	; 0xf66 <TIMER_Create+0x2a>
     f64:	42 c0       	rjmp	.+132    	; 0xfea <TIMER_Create+0xae>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	39 96       	adiw	r30, 0x09	; 9
     f6a:	a8 30       	cpi	r26, 0x08	; 8
     f6c:	b1 05       	cpc	r27, r1
     f6e:	b1 f7       	brne	.-20     	; 0xf5c <TIMER_Create+0x20>
	handle = i;	
	return handle;
	}
	
	
    return 0;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	3f c0       	rjmp	.+126    	; 0xff4 <TIMER_Create+0xb8>
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout_ms;
     f76:	fd 01       	movw	r30, r26
     f78:	ee 0f       	add	r30, r30
     f7a:	ff 1f       	adc	r31, r31
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ea 0f       	add	r30, r26
     f86:	fb 1f       	adc	r31, r27
     f88:	eb 5f       	subi	r30, 0xFB	; 251
     f8a:	fc 4f       	sbci	r31, 0xFC	; 252
     f8c:	93 83       	std	Z+3, r25	; 0x03
     f8e:	82 83       	std	Z+2, r24	; 0x02
     f90:	0d c0       	rjmp	.+26     	; 0xfac <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
     f92:	fd 01       	movw	r30, r26
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	ea 0f       	add	r30, r26
     fa2:	fb 1f       	adc	r31, r27
     fa4:	eb 5f       	subi	r30, 0xFB	; 251
     fa6:	fc 4f       	sbci	r31, 0xFC	; 252
     fa8:	13 82       	std	Z+3, r1	; 0x03
     faa:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
     fac:	fd 01       	movw	r30, r26
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	ea 0f       	add	r30, r26
     fbc:	fb 1f       	adc	r31, r27
     fbe:	eb 5f       	subi	r30, 0xFB	; 251
     fc0:	fc 4f       	sbci	r31, 0xFC	; 252
     fc2:	55 83       	std	Z+5, r21	; 0x05
     fc4:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
     fc6:	37 83       	std	Z+7, r19	; 0x07
     fc8:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout_ms + _timer_tick;
     fca:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <_timer_tick>
     fce:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <_timer_tick+0x1>
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	80 83       	st	Z, r24
			_timer[i].state = READY;
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     fde:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
     fe0:	8a 2f       	mov	r24, r26
     fe2:	9b 2f       	mov	r25, r27
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <TIMER_Create+0xb8>
	
	/*
		Find an available timer by incrementing the index (i) until a NULL callback
	*/
	
	for(i = 0; i < MAX_TIMERS; i++)
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     fea:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fec:	f8 94       	cli
		{
			
			if (periodic != 0) 
     fee:	01 2b       	or	r16, r17
     ff0:	11 f6       	brne	.-124    	; 0xf76 <TIMER_Create+0x3a>
     ff2:	cf cf       	rjmp	.-98     	; 0xf92 <TIMER_Create+0x56>
	return handle;
	}
	
	
    return 0;
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <UART_Init>:
#define FOSC 8000000

void UART_Init()
{
	
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
     ffe:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1002:	83 e3       	ldi	r24, 0x33	; 51
    1004:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    1008:	e9 ec       	ldi	r30, 0xC9	; 201
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	88 61       	ori	r24, 0x18	; 24
    1010:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1012:	ea ec       	ldi	r30, 0xCA	; 202
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	86 60       	ori	r24, 0x06	; 6
    101a:	80 83       	st	Z, r24
    101c:	08 95       	ret

0000101e <UART_SendChar>:


void UART_SendChar(const char c)
{
	
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    101e:	e8 ec       	ldi	r30, 0xC8	; 200
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	90 81       	ld	r25, Z
    1024:	95 ff       	sbrs	r25, 5
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <UART_SendChar+0x4>
	UDR1 = c;
    1028:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    102c:	08 95       	ret

0000102e <UART_SendString>:
	
}

void UART_SendString(const char* s)
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	ec 01       	movw	r28, r24
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
    1034:	88 81       	ld	r24, Y
    1036:	88 23       	and	r24, r24
    1038:	29 f0       	breq	.+10     	; 0x1044 <UART_SendString+0x16>
    103a:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(s[counter]);
    103c:	f0 df       	rcall	.-32     	; 0x101e <UART_SendChar>

void UART_SendString(const char* s)
{
	
	uint16_t counter = 0;
	while(s[counter] != '\0')
    103e:	89 91       	ld	r24, Y+
    1040:	81 11       	cpse	r24, r1
    1042:	fc cf       	rjmp	.-8      	; 0x103c <UART_SendString+0xe>
	{
		UART_SendChar(s[counter]);
		counter++;
	}
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <__udivmodsi4>:
    104a:	a1 e2       	ldi	r26, 0x21	; 33
    104c:	1a 2e       	mov	r1, r26
    104e:	aa 1b       	sub	r26, r26
    1050:	bb 1b       	sub	r27, r27
    1052:	fd 01       	movw	r30, r26
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <__udivmodsi4_ep>

00001056 <__udivmodsi4_loop>:
    1056:	aa 1f       	adc	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	ee 1f       	adc	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	a2 17       	cp	r26, r18
    1060:	b3 07       	cpc	r27, r19
    1062:	e4 07       	cpc	r30, r20
    1064:	f5 07       	cpc	r31, r21
    1066:	20 f0       	brcs	.+8      	; 0x1070 <__udivmodsi4_ep>
    1068:	a2 1b       	sub	r26, r18
    106a:	b3 0b       	sbc	r27, r19
    106c:	e4 0b       	sbc	r30, r20
    106e:	f5 0b       	sbc	r31, r21

00001070 <__udivmodsi4_ep>:
    1070:	66 1f       	adc	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	1a 94       	dec	r1
    107a:	69 f7       	brne	.-38     	; 0x1056 <__udivmodsi4_loop>
    107c:	60 95       	com	r22
    107e:	70 95       	com	r23
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	bd 01       	movw	r22, r26
    108a:	cf 01       	movw	r24, r30
    108c:	08 95       	ret

0000108e <malloc>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	91 05       	cpc	r25, r1
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <malloc+0x12>
    109c:	82 e0       	ldi	r24, 0x02	; 2
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	e0 91 67 03 	lds	r30, 0x0367	; 0x800367 <__flp>
    10a4:	f0 91 68 03 	lds	r31, 0x0368	; 0x800368 <__flp+0x1>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	30 97       	sbiw	r30, 0x00	; 0
    10b2:	19 f1       	breq	.+70     	; 0x10fa <malloc+0x6c>
    10b4:	40 81       	ld	r20, Z
    10b6:	51 81       	ldd	r21, Z+1	; 0x01
    10b8:	02 81       	ldd	r16, Z+2	; 0x02
    10ba:	13 81       	ldd	r17, Z+3	; 0x03
    10bc:	48 17       	cp	r20, r24
    10be:	59 07       	cpc	r21, r25
    10c0:	c8 f0       	brcs	.+50     	; 0x10f4 <malloc+0x66>
    10c2:	84 17       	cp	r24, r20
    10c4:	95 07       	cpc	r25, r21
    10c6:	69 f4       	brne	.+26     	; 0x10e2 <malloc+0x54>
    10c8:	10 97       	sbiw	r26, 0x00	; 0
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <malloc+0x4a>
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	0c 93       	st	X, r16
    10d0:	12 97       	sbiw	r26, 0x02	; 2
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	1c 93       	st	X, r17
    10d6:	27 c0       	rjmp	.+78     	; 0x1126 <malloc+0x98>
    10d8:	00 93 67 03 	sts	0x0367, r16	; 0x800367 <__flp>
    10dc:	10 93 68 03 	sts	0x0368, r17	; 0x800368 <__flp+0x1>
    10e0:	22 c0       	rjmp	.+68     	; 0x1126 <malloc+0x98>
    10e2:	21 15       	cp	r18, r1
    10e4:	31 05       	cpc	r19, r1
    10e6:	19 f0       	breq	.+6      	; 0x10ee <malloc+0x60>
    10e8:	42 17       	cp	r20, r18
    10ea:	53 07       	cpc	r21, r19
    10ec:	18 f4       	brcc	.+6      	; 0x10f4 <malloc+0x66>
    10ee:	9a 01       	movw	r18, r20
    10f0:	bd 01       	movw	r22, r26
    10f2:	ef 01       	movw	r28, r30
    10f4:	df 01       	movw	r26, r30
    10f6:	f8 01       	movw	r30, r16
    10f8:	db cf       	rjmp	.-74     	; 0x10b0 <malloc+0x22>
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	f9 f0       	breq	.+62     	; 0x113e <malloc+0xb0>
    1100:	28 1b       	sub	r18, r24
    1102:	39 0b       	sbc	r19, r25
    1104:	24 30       	cpi	r18, 0x04	; 4
    1106:	31 05       	cpc	r19, r1
    1108:	80 f4       	brcc	.+32     	; 0x112a <malloc+0x9c>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	61 15       	cp	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	21 f0       	breq	.+8      	; 0x111c <malloc+0x8e>
    1114:	fb 01       	movw	r30, r22
    1116:	93 83       	std	Z+3, r25	; 0x03
    1118:	82 83       	std	Z+2, r24	; 0x02
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <malloc+0x96>
    111c:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <__flp+0x1>
    1120:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <__flp>
    1124:	fe 01       	movw	r30, r28
    1126:	32 96       	adiw	r30, 0x02	; 2
    1128:	44 c0       	rjmp	.+136    	; 0x11b2 <malloc+0x124>
    112a:	fe 01       	movw	r30, r28
    112c:	e2 0f       	add	r30, r18
    112e:	f3 1f       	adc	r31, r19
    1130:	81 93       	st	Z+, r24
    1132:	91 93       	st	Z+, r25
    1134:	22 50       	subi	r18, 0x02	; 2
    1136:	31 09       	sbc	r19, r1
    1138:	39 83       	std	Y+1, r19	; 0x01
    113a:	28 83       	st	Y, r18
    113c:	3a c0       	rjmp	.+116    	; 0x11b2 <malloc+0x124>
    113e:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    1142:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    1146:	23 2b       	or	r18, r19
    1148:	41 f4       	brne	.+16     	; 0x115a <malloc+0xcc>
    114a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    114e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1152:	30 93 66 03 	sts	0x0366, r19	; 0x800366 <__brkval+0x1>
    1156:	20 93 65 03 	sts	0x0365, r18	; 0x800365 <__brkval>
    115a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    115e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1162:	21 15       	cp	r18, r1
    1164:	31 05       	cpc	r19, r1
    1166:	41 f4       	brne	.+16     	; 0x1178 <malloc+0xea>
    1168:	2d b7       	in	r18, 0x3d	; 61
    116a:	3e b7       	in	r19, 0x3e	; 62
    116c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1170:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1174:	24 1b       	sub	r18, r20
    1176:	35 0b       	sbc	r19, r21
    1178:	e0 91 65 03 	lds	r30, 0x0365	; 0x800365 <__brkval>
    117c:	f0 91 66 03 	lds	r31, 0x0366	; 0x800366 <__brkval+0x1>
    1180:	e2 17       	cp	r30, r18
    1182:	f3 07       	cpc	r31, r19
    1184:	a0 f4       	brcc	.+40     	; 0x11ae <malloc+0x120>
    1186:	2e 1b       	sub	r18, r30
    1188:	3f 0b       	sbc	r19, r31
    118a:	28 17       	cp	r18, r24
    118c:	39 07       	cpc	r19, r25
    118e:	78 f0       	brcs	.+30     	; 0x11ae <malloc+0x120>
    1190:	ac 01       	movw	r20, r24
    1192:	4e 5f       	subi	r20, 0xFE	; 254
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	24 17       	cp	r18, r20
    1198:	35 07       	cpc	r19, r21
    119a:	48 f0       	brcs	.+18     	; 0x11ae <malloc+0x120>
    119c:	4e 0f       	add	r20, r30
    119e:	5f 1f       	adc	r21, r31
    11a0:	50 93 66 03 	sts	0x0366, r21	; 0x800366 <__brkval+0x1>
    11a4:	40 93 65 03 	sts	0x0365, r20	; 0x800365 <__brkval>
    11a8:	81 93       	st	Z+, r24
    11aa:	91 93       	st	Z+, r25
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <malloc+0x124>
    11ae:	e0 e0       	ldi	r30, 0x00	; 0
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	cf 01       	movw	r24, r30
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <free>:
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <free+0xa>
    11c6:	81 c0       	rjmp	.+258    	; 0x12ca <free+0x10c>
    11c8:	fc 01       	movw	r30, r24
    11ca:	32 97       	sbiw	r30, 0x02	; 2
    11cc:	13 82       	std	Z+3, r1	; 0x03
    11ce:	12 82       	std	Z+2, r1	; 0x02
    11d0:	a0 91 67 03 	lds	r26, 0x0367	; 0x800367 <__flp>
    11d4:	b0 91 68 03 	lds	r27, 0x0368	; 0x800368 <__flp+0x1>
    11d8:	10 97       	sbiw	r26, 0x00	; 0
    11da:	81 f4       	brne	.+32     	; 0x11fc <free+0x3e>
    11dc:	20 81       	ld	r18, Z
    11de:	31 81       	ldd	r19, Z+1	; 0x01
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    11e8:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	51 f5       	brne	.+84     	; 0x1246 <free+0x88>
    11f2:	f0 93 66 03 	sts	0x0366, r31	; 0x800366 <__brkval+0x1>
    11f6:	e0 93 65 03 	sts	0x0365, r30	; 0x800365 <__brkval>
    11fa:	67 c0       	rjmp	.+206    	; 0x12ca <free+0x10c>
    11fc:	ed 01       	movw	r28, r26
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	ce 17       	cp	r28, r30
    1204:	df 07       	cpc	r29, r31
    1206:	40 f4       	brcc	.+16     	; 0x1218 <free+0x5a>
    1208:	4a 81       	ldd	r20, Y+2	; 0x02
    120a:	5b 81       	ldd	r21, Y+3	; 0x03
    120c:	9e 01       	movw	r18, r28
    120e:	41 15       	cp	r20, r1
    1210:	51 05       	cpc	r21, r1
    1212:	f1 f0       	breq	.+60     	; 0x1250 <free+0x92>
    1214:	ea 01       	movw	r28, r20
    1216:	f5 cf       	rjmp	.-22     	; 0x1202 <free+0x44>
    1218:	d3 83       	std	Z+3, r29	; 0x03
    121a:	c2 83       	std	Z+2, r28	; 0x02
    121c:	40 81       	ld	r20, Z
    121e:	51 81       	ldd	r21, Z+1	; 0x01
    1220:	84 0f       	add	r24, r20
    1222:	95 1f       	adc	r25, r21
    1224:	c8 17       	cp	r28, r24
    1226:	d9 07       	cpc	r29, r25
    1228:	59 f4       	brne	.+22     	; 0x1240 <free+0x82>
    122a:	88 81       	ld	r24, Y
    122c:	99 81       	ldd	r25, Y+1	; 0x01
    122e:	84 0f       	add	r24, r20
    1230:	95 1f       	adc	r25, r21
    1232:	02 96       	adiw	r24, 0x02	; 2
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	93 83       	std	Z+3, r25	; 0x03
    123e:	82 83       	std	Z+2, r24	; 0x02
    1240:	21 15       	cp	r18, r1
    1242:	31 05       	cpc	r19, r1
    1244:	29 f4       	brne	.+10     	; 0x1250 <free+0x92>
    1246:	f0 93 68 03 	sts	0x0368, r31	; 0x800368 <__flp+0x1>
    124a:	e0 93 67 03 	sts	0x0367, r30	; 0x800367 <__flp>
    124e:	3d c0       	rjmp	.+122    	; 0x12ca <free+0x10c>
    1250:	e9 01       	movw	r28, r18
    1252:	fb 83       	std	Y+3, r31	; 0x03
    1254:	ea 83       	std	Y+2, r30	; 0x02
    1256:	49 91       	ld	r20, Y+
    1258:	59 91       	ld	r21, Y+
    125a:	c4 0f       	add	r28, r20
    125c:	d5 1f       	adc	r29, r21
    125e:	ec 17       	cp	r30, r28
    1260:	fd 07       	cpc	r31, r29
    1262:	61 f4       	brne	.+24     	; 0x127c <free+0xbe>
    1264:	80 81       	ld	r24, Z
    1266:	91 81       	ldd	r25, Z+1	; 0x01
    1268:	84 0f       	add	r24, r20
    126a:	95 1f       	adc	r25, r21
    126c:	02 96       	adiw	r24, 0x02	; 2
    126e:	e9 01       	movw	r28, r18
    1270:	99 83       	std	Y+1, r25	; 0x01
    1272:	88 83       	st	Y, r24
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	9b 83       	std	Y+3, r25	; 0x03
    127a:	8a 83       	std	Y+2, r24	; 0x02
    127c:	e0 e0       	ldi	r30, 0x00	; 0
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	12 96       	adiw	r26, 0x02	; 2
    1282:	8d 91       	ld	r24, X+
    1284:	9c 91       	ld	r25, X
    1286:	13 97       	sbiw	r26, 0x03	; 3
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	19 f0       	breq	.+6      	; 0x1292 <free+0xd4>
    128c:	fd 01       	movw	r30, r26
    128e:	dc 01       	movw	r26, r24
    1290:	f7 cf       	rjmp	.-18     	; 0x1280 <free+0xc2>
    1292:	8d 91       	ld	r24, X+
    1294:	9c 91       	ld	r25, X
    1296:	11 97       	sbiw	r26, 0x01	; 1
    1298:	9d 01       	movw	r18, r26
    129a:	2e 5f       	subi	r18, 0xFE	; 254
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	20 91 65 03 	lds	r18, 0x0365	; 0x800365 <__brkval>
    12a6:	30 91 66 03 	lds	r19, 0x0366	; 0x800366 <__brkval+0x1>
    12aa:	28 17       	cp	r18, r24
    12ac:	39 07       	cpc	r19, r25
    12ae:	69 f4       	brne	.+26     	; 0x12ca <free+0x10c>
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	29 f4       	brne	.+10     	; 0x12be <free+0x100>
    12b4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <__flp+0x1>
    12b8:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <__flp>
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <free+0x104>
    12be:	13 82       	std	Z+3, r1	; 0x03
    12c0:	12 82       	std	Z+2, r1	; 0x02
    12c2:	b0 93 66 03 	sts	0x0366, r27	; 0x800366 <__brkval+0x1>
    12c6:	a0 93 65 03 	sts	0x0365, r26	; 0x800365 <__brkval>
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <sprintf>:
    12d0:	0f 93       	push	r16
    12d2:	1f 93       	push	r17
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	2e 97       	sbiw	r28, 0x0e	; 14
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	0d 89       	ldd	r16, Y+21	; 0x15
    12ea:	1e 89       	ldd	r17, Y+22	; 0x16
    12ec:	86 e0       	ldi	r24, 0x06	; 6
    12ee:	8c 83       	std	Y+4, r24	; 0x04
    12f0:	1a 83       	std	Y+2, r17	; 0x02
    12f2:	09 83       	std	Y+1, r16	; 0x01
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	9f e7       	ldi	r25, 0x7F	; 127
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	ae 01       	movw	r20, r28
    12fe:	47 5e       	subi	r20, 0xE7	; 231
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	6f 89       	ldd	r22, Y+23	; 0x17
    1304:	78 8d       	ldd	r23, Y+24	; 0x18
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	10 d0       	rcall	.+32     	; 0x132c <vfprintf>
    130c:	ef 81       	ldd	r30, Y+7	; 0x07
    130e:	f8 85       	ldd	r31, Y+8	; 0x08
    1310:	e0 0f       	add	r30, r16
    1312:	f1 1f       	adc	r31, r17
    1314:	10 82       	st	Z, r1
    1316:	2e 96       	adiw	r28, 0x0e	; 14
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <vfprintf>:
    132c:	2f 92       	push	r2
    132e:	3f 92       	push	r3
    1330:	4f 92       	push	r4
    1332:	5f 92       	push	r5
    1334:	6f 92       	push	r6
    1336:	7f 92       	push	r7
    1338:	8f 92       	push	r8
    133a:	9f 92       	push	r9
    133c:	af 92       	push	r10
    133e:	bf 92       	push	r11
    1340:	cf 92       	push	r12
    1342:	df 92       	push	r13
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	2b 97       	sbiw	r28, 0x0b	; 11
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	6c 01       	movw	r12, r24
    1362:	7b 01       	movw	r14, r22
    1364:	8a 01       	movw	r16, r20
    1366:	fc 01       	movw	r30, r24
    1368:	17 82       	std	Z+7, r1	; 0x07
    136a:	16 82       	std	Z+6, r1	; 0x06
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	81 ff       	sbrs	r24, 1
    1370:	bf c1       	rjmp	.+894    	; 0x16f0 <vfprintf+0x3c4>
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	3c 01       	movw	r6, r24
    1378:	f6 01       	movw	r30, r12
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	f7 01       	movw	r30, r14
    137e:	93 fd       	sbrc	r25, 3
    1380:	85 91       	lpm	r24, Z+
    1382:	93 ff       	sbrs	r25, 3
    1384:	81 91       	ld	r24, Z+
    1386:	7f 01       	movw	r14, r30
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <vfprintf+0x62>
    138c:	ad c1       	rjmp	.+858    	; 0x16e8 <vfprintf+0x3bc>
    138e:	85 32       	cpi	r24, 0x25	; 37
    1390:	39 f4       	brne	.+14     	; 0x13a0 <vfprintf+0x74>
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	7f 01       	movw	r14, r30
    139c:	85 32       	cpi	r24, 0x25	; 37
    139e:	21 f4       	brne	.+8      	; 0x13a8 <vfprintf+0x7c>
    13a0:	b6 01       	movw	r22, r12
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	d6 d1       	rcall	.+940    	; 0x1752 <fputc>
    13a6:	e8 cf       	rjmp	.-48     	; 0x1378 <vfprintf+0x4c>
    13a8:	91 2c       	mov	r9, r1
    13aa:	21 2c       	mov	r2, r1
    13ac:	31 2c       	mov	r3, r1
    13ae:	ff e1       	ldi	r31, 0x1F	; 31
    13b0:	f3 15       	cp	r31, r3
    13b2:	d8 f0       	brcs	.+54     	; 0x13ea <vfprintf+0xbe>
    13b4:	8b 32       	cpi	r24, 0x2B	; 43
    13b6:	79 f0       	breq	.+30     	; 0x13d6 <vfprintf+0xaa>
    13b8:	38 f4       	brcc	.+14     	; 0x13c8 <vfprintf+0x9c>
    13ba:	80 32       	cpi	r24, 0x20	; 32
    13bc:	79 f0       	breq	.+30     	; 0x13dc <vfprintf+0xb0>
    13be:	83 32       	cpi	r24, 0x23	; 35
    13c0:	a1 f4       	brne	.+40     	; 0x13ea <vfprintf+0xbe>
    13c2:	23 2d       	mov	r18, r3
    13c4:	20 61       	ori	r18, 0x10	; 16
    13c6:	1d c0       	rjmp	.+58     	; 0x1402 <vfprintf+0xd6>
    13c8:	8d 32       	cpi	r24, 0x2D	; 45
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <vfprintf+0xb8>
    13cc:	80 33       	cpi	r24, 0x30	; 48
    13ce:	69 f4       	brne	.+26     	; 0x13ea <vfprintf+0xbe>
    13d0:	23 2d       	mov	r18, r3
    13d2:	21 60       	ori	r18, 0x01	; 1
    13d4:	16 c0       	rjmp	.+44     	; 0x1402 <vfprintf+0xd6>
    13d6:	83 2d       	mov	r24, r3
    13d8:	82 60       	ori	r24, 0x02	; 2
    13da:	38 2e       	mov	r3, r24
    13dc:	e3 2d       	mov	r30, r3
    13de:	e4 60       	ori	r30, 0x04	; 4
    13e0:	3e 2e       	mov	r3, r30
    13e2:	2a c0       	rjmp	.+84     	; 0x1438 <vfprintf+0x10c>
    13e4:	f3 2d       	mov	r31, r3
    13e6:	f8 60       	ori	r31, 0x08	; 8
    13e8:	1d c0       	rjmp	.+58     	; 0x1424 <vfprintf+0xf8>
    13ea:	37 fc       	sbrc	r3, 7
    13ec:	2d c0       	rjmp	.+90     	; 0x1448 <vfprintf+0x11c>
    13ee:	20 ed       	ldi	r18, 0xD0	; 208
    13f0:	28 0f       	add	r18, r24
    13f2:	2a 30       	cpi	r18, 0x0A	; 10
    13f4:	40 f0       	brcs	.+16     	; 0x1406 <vfprintf+0xda>
    13f6:	8e 32       	cpi	r24, 0x2E	; 46
    13f8:	b9 f4       	brne	.+46     	; 0x1428 <vfprintf+0xfc>
    13fa:	36 fc       	sbrc	r3, 6
    13fc:	75 c1       	rjmp	.+746    	; 0x16e8 <vfprintf+0x3bc>
    13fe:	23 2d       	mov	r18, r3
    1400:	20 64       	ori	r18, 0x40	; 64
    1402:	32 2e       	mov	r3, r18
    1404:	19 c0       	rjmp	.+50     	; 0x1438 <vfprintf+0x10c>
    1406:	36 fe       	sbrs	r3, 6
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0xea>
    140a:	8a e0       	ldi	r24, 0x0A	; 10
    140c:	98 9e       	mul	r9, r24
    140e:	20 0d       	add	r18, r0
    1410:	11 24       	eor	r1, r1
    1412:	92 2e       	mov	r9, r18
    1414:	11 c0       	rjmp	.+34     	; 0x1438 <vfprintf+0x10c>
    1416:	ea e0       	ldi	r30, 0x0A	; 10
    1418:	2e 9e       	mul	r2, r30
    141a:	20 0d       	add	r18, r0
    141c:	11 24       	eor	r1, r1
    141e:	22 2e       	mov	r2, r18
    1420:	f3 2d       	mov	r31, r3
    1422:	f0 62       	ori	r31, 0x20	; 32
    1424:	3f 2e       	mov	r3, r31
    1426:	08 c0       	rjmp	.+16     	; 0x1438 <vfprintf+0x10c>
    1428:	8c 36       	cpi	r24, 0x6C	; 108
    142a:	21 f4       	brne	.+8      	; 0x1434 <vfprintf+0x108>
    142c:	83 2d       	mov	r24, r3
    142e:	80 68       	ori	r24, 0x80	; 128
    1430:	38 2e       	mov	r3, r24
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x10c>
    1434:	88 36       	cpi	r24, 0x68	; 104
    1436:	41 f4       	brne	.+16     	; 0x1448 <vfprintf+0x11c>
    1438:	f7 01       	movw	r30, r14
    143a:	93 fd       	sbrc	r25, 3
    143c:	85 91       	lpm	r24, Z+
    143e:	93 ff       	sbrs	r25, 3
    1440:	81 91       	ld	r24, Z+
    1442:	7f 01       	movw	r14, r30
    1444:	81 11       	cpse	r24, r1
    1446:	b3 cf       	rjmp	.-154    	; 0x13ae <vfprintf+0x82>
    1448:	98 2f       	mov	r25, r24
    144a:	9f 7d       	andi	r25, 0xDF	; 223
    144c:	95 54       	subi	r25, 0x45	; 69
    144e:	93 30       	cpi	r25, 0x03	; 3
    1450:	28 f4       	brcc	.+10     	; 0x145c <vfprintf+0x130>
    1452:	0c 5f       	subi	r16, 0xFC	; 252
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	9f e3       	ldi	r25, 0x3F	; 63
    1458:	99 83       	std	Y+1, r25	; 0x01
    145a:	0d c0       	rjmp	.+26     	; 0x1476 <vfprintf+0x14a>
    145c:	83 36       	cpi	r24, 0x63	; 99
    145e:	31 f0       	breq	.+12     	; 0x146c <vfprintf+0x140>
    1460:	83 37       	cpi	r24, 0x73	; 115
    1462:	71 f0       	breq	.+28     	; 0x1480 <vfprintf+0x154>
    1464:	83 35       	cpi	r24, 0x53	; 83
    1466:	09 f0       	breq	.+2      	; 0x146a <vfprintf+0x13e>
    1468:	55 c0       	rjmp	.+170    	; 0x1514 <vfprintf+0x1e8>
    146a:	20 c0       	rjmp	.+64     	; 0x14ac <vfprintf+0x180>
    146c:	f8 01       	movw	r30, r16
    146e:	80 81       	ld	r24, Z
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	0e 5f       	subi	r16, 0xFE	; 254
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	88 24       	eor	r8, r8
    1478:	83 94       	inc	r8
    147a:	91 2c       	mov	r9, r1
    147c:	53 01       	movw	r10, r6
    147e:	12 c0       	rjmp	.+36     	; 0x14a4 <vfprintf+0x178>
    1480:	28 01       	movw	r4, r16
    1482:	f2 e0       	ldi	r31, 0x02	; 2
    1484:	4f 0e       	add	r4, r31
    1486:	51 1c       	adc	r5, r1
    1488:	f8 01       	movw	r30, r16
    148a:	a0 80       	ld	r10, Z
    148c:	b1 80       	ldd	r11, Z+1	; 0x01
    148e:	36 fe       	sbrs	r3, 6
    1490:	03 c0       	rjmp	.+6      	; 0x1498 <vfprintf+0x16c>
    1492:	69 2d       	mov	r22, r9
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x170>
    1498:	6f ef       	ldi	r22, 0xFF	; 255
    149a:	7f ef       	ldi	r23, 0xFF	; 255
    149c:	c5 01       	movw	r24, r10
    149e:	4e d1       	rcall	.+668    	; 0x173c <strnlen>
    14a0:	4c 01       	movw	r8, r24
    14a2:	82 01       	movw	r16, r4
    14a4:	f3 2d       	mov	r31, r3
    14a6:	ff 77       	andi	r31, 0x7F	; 127
    14a8:	3f 2e       	mov	r3, r31
    14aa:	15 c0       	rjmp	.+42     	; 0x14d6 <vfprintf+0x1aa>
    14ac:	28 01       	movw	r4, r16
    14ae:	22 e0       	ldi	r18, 0x02	; 2
    14b0:	42 0e       	add	r4, r18
    14b2:	51 1c       	adc	r5, r1
    14b4:	f8 01       	movw	r30, r16
    14b6:	a0 80       	ld	r10, Z
    14b8:	b1 80       	ldd	r11, Z+1	; 0x01
    14ba:	36 fe       	sbrs	r3, 6
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <vfprintf+0x198>
    14be:	69 2d       	mov	r22, r9
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x19c>
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	c5 01       	movw	r24, r10
    14ca:	2d d1       	rcall	.+602    	; 0x1726 <strnlen_P>
    14cc:	4c 01       	movw	r8, r24
    14ce:	f3 2d       	mov	r31, r3
    14d0:	f0 68       	ori	r31, 0x80	; 128
    14d2:	3f 2e       	mov	r3, r31
    14d4:	82 01       	movw	r16, r4
    14d6:	33 fc       	sbrc	r3, 3
    14d8:	19 c0       	rjmp	.+50     	; 0x150c <vfprintf+0x1e0>
    14da:	82 2d       	mov	r24, r2
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	88 16       	cp	r8, r24
    14e0:	99 06       	cpc	r9, r25
    14e2:	a0 f4       	brcc	.+40     	; 0x150c <vfprintf+0x1e0>
    14e4:	b6 01       	movw	r22, r12
    14e6:	80 e2       	ldi	r24, 0x20	; 32
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	33 d1       	rcall	.+614    	; 0x1752 <fputc>
    14ec:	2a 94       	dec	r2
    14ee:	f5 cf       	rjmp	.-22     	; 0x14da <vfprintf+0x1ae>
    14f0:	f5 01       	movw	r30, r10
    14f2:	37 fc       	sbrc	r3, 7
    14f4:	85 91       	lpm	r24, Z+
    14f6:	37 fe       	sbrs	r3, 7
    14f8:	81 91       	ld	r24, Z+
    14fa:	5f 01       	movw	r10, r30
    14fc:	b6 01       	movw	r22, r12
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	28 d1       	rcall	.+592    	; 0x1752 <fputc>
    1502:	21 10       	cpse	r2, r1
    1504:	2a 94       	dec	r2
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	82 1a       	sub	r8, r18
    150a:	91 08       	sbc	r9, r1
    150c:	81 14       	cp	r8, r1
    150e:	91 04       	cpc	r9, r1
    1510:	79 f7       	brne	.-34     	; 0x14f0 <vfprintf+0x1c4>
    1512:	e1 c0       	rjmp	.+450    	; 0x16d6 <vfprintf+0x3aa>
    1514:	84 36       	cpi	r24, 0x64	; 100
    1516:	11 f0       	breq	.+4      	; 0x151c <vfprintf+0x1f0>
    1518:	89 36       	cpi	r24, 0x69	; 105
    151a:	39 f5       	brne	.+78     	; 0x156a <vfprintf+0x23e>
    151c:	f8 01       	movw	r30, r16
    151e:	37 fe       	sbrs	r3, 7
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <vfprintf+0x204>
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	0c 5f       	subi	r16, 0xFC	; 252
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <vfprintf+0x214>
    1530:	60 81       	ld	r22, Z
    1532:	71 81       	ldd	r23, Z+1	; 0x01
    1534:	07 2e       	mov	r0, r23
    1536:	00 0c       	add	r0, r0
    1538:	88 0b       	sbc	r24, r24
    153a:	99 0b       	sbc	r25, r25
    153c:	0e 5f       	subi	r16, 0xFE	; 254
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	f3 2d       	mov	r31, r3
    1542:	ff 76       	andi	r31, 0x6F	; 111
    1544:	3f 2e       	mov	r3, r31
    1546:	97 ff       	sbrs	r25, 7
    1548:	09 c0       	rjmp	.+18     	; 0x155c <vfprintf+0x230>
    154a:	90 95       	com	r25
    154c:	80 95       	com	r24
    154e:	70 95       	com	r23
    1550:	61 95       	neg	r22
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	f0 68       	ori	r31, 0x80	; 128
    155a:	3f 2e       	mov	r3, r31
    155c:	2a e0       	ldi	r18, 0x0A	; 10
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	a3 01       	movw	r20, r6
    1562:	33 d1       	rcall	.+614    	; 0x17ca <__ultoa_invert>
    1564:	88 2e       	mov	r8, r24
    1566:	86 18       	sub	r8, r6
    1568:	44 c0       	rjmp	.+136    	; 0x15f2 <vfprintf+0x2c6>
    156a:	85 37       	cpi	r24, 0x75	; 117
    156c:	31 f4       	brne	.+12     	; 0x157a <vfprintf+0x24e>
    156e:	23 2d       	mov	r18, r3
    1570:	2f 7e       	andi	r18, 0xEF	; 239
    1572:	b2 2e       	mov	r11, r18
    1574:	2a e0       	ldi	r18, 0x0A	; 10
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	25 c0       	rjmp	.+74     	; 0x15c4 <vfprintf+0x298>
    157a:	93 2d       	mov	r25, r3
    157c:	99 7f       	andi	r25, 0xF9	; 249
    157e:	b9 2e       	mov	r11, r25
    1580:	8f 36       	cpi	r24, 0x6F	; 111
    1582:	c1 f0       	breq	.+48     	; 0x15b4 <vfprintf+0x288>
    1584:	18 f4       	brcc	.+6      	; 0x158c <vfprintf+0x260>
    1586:	88 35       	cpi	r24, 0x58	; 88
    1588:	79 f0       	breq	.+30     	; 0x15a8 <vfprintf+0x27c>
    158a:	ae c0       	rjmp	.+348    	; 0x16e8 <vfprintf+0x3bc>
    158c:	80 37       	cpi	r24, 0x70	; 112
    158e:	19 f0       	breq	.+6      	; 0x1596 <vfprintf+0x26a>
    1590:	88 37       	cpi	r24, 0x78	; 120
    1592:	21 f0       	breq	.+8      	; 0x159c <vfprintf+0x270>
    1594:	a9 c0       	rjmp	.+338    	; 0x16e8 <vfprintf+0x3bc>
    1596:	e9 2f       	mov	r30, r25
    1598:	e0 61       	ori	r30, 0x10	; 16
    159a:	be 2e       	mov	r11, r30
    159c:	b4 fe       	sbrs	r11, 4
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <vfprintf+0x28e>
    15a0:	fb 2d       	mov	r31, r11
    15a2:	f4 60       	ori	r31, 0x04	; 4
    15a4:	bf 2e       	mov	r11, r31
    15a6:	09 c0       	rjmp	.+18     	; 0x15ba <vfprintf+0x28e>
    15a8:	34 fe       	sbrs	r3, 4
    15aa:	0a c0       	rjmp	.+20     	; 0x15c0 <vfprintf+0x294>
    15ac:	29 2f       	mov	r18, r25
    15ae:	26 60       	ori	r18, 0x06	; 6
    15b0:	b2 2e       	mov	r11, r18
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <vfprintf+0x294>
    15b4:	28 e0       	ldi	r18, 0x08	; 8
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <vfprintf+0x298>
    15ba:	20 e1       	ldi	r18, 0x10	; 16
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <vfprintf+0x298>
    15c0:	20 e1       	ldi	r18, 0x10	; 16
    15c2:	32 e0       	ldi	r19, 0x02	; 2
    15c4:	f8 01       	movw	r30, r16
    15c6:	b7 fe       	sbrs	r11, 7
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <vfprintf+0x2ac>
    15ca:	60 81       	ld	r22, Z
    15cc:	71 81       	ldd	r23, Z+1	; 0x01
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	0c 5f       	subi	r16, 0xFC	; 252
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0x2b8>
    15d8:	60 81       	ld	r22, Z
    15da:	71 81       	ldd	r23, Z+1	; 0x01
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 5f       	subi	r16, 0xFE	; 254
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	a3 01       	movw	r20, r6
    15e6:	f1 d0       	rcall	.+482    	; 0x17ca <__ultoa_invert>
    15e8:	88 2e       	mov	r8, r24
    15ea:	86 18       	sub	r8, r6
    15ec:	fb 2d       	mov	r31, r11
    15ee:	ff 77       	andi	r31, 0x7F	; 127
    15f0:	3f 2e       	mov	r3, r31
    15f2:	36 fe       	sbrs	r3, 6
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <vfprintf+0x2e4>
    15f6:	23 2d       	mov	r18, r3
    15f8:	2e 7f       	andi	r18, 0xFE	; 254
    15fa:	a2 2e       	mov	r10, r18
    15fc:	89 14       	cp	r8, r9
    15fe:	58 f4       	brcc	.+22     	; 0x1616 <vfprintf+0x2ea>
    1600:	34 fe       	sbrs	r3, 4
    1602:	0b c0       	rjmp	.+22     	; 0x161a <vfprintf+0x2ee>
    1604:	32 fc       	sbrc	r3, 2
    1606:	09 c0       	rjmp	.+18     	; 0x161a <vfprintf+0x2ee>
    1608:	83 2d       	mov	r24, r3
    160a:	8e 7e       	andi	r24, 0xEE	; 238
    160c:	a8 2e       	mov	r10, r24
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0x2ee>
    1610:	b8 2c       	mov	r11, r8
    1612:	a3 2c       	mov	r10, r3
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x2f0>
    1616:	b8 2c       	mov	r11, r8
    1618:	01 c0       	rjmp	.+2      	; 0x161c <vfprintf+0x2f0>
    161a:	b9 2c       	mov	r11, r9
    161c:	a4 fe       	sbrs	r10, 4
    161e:	0f c0       	rjmp	.+30     	; 0x163e <vfprintf+0x312>
    1620:	fe 01       	movw	r30, r28
    1622:	e8 0d       	add	r30, r8
    1624:	f1 1d       	adc	r31, r1
    1626:	80 81       	ld	r24, Z
    1628:	80 33       	cpi	r24, 0x30	; 48
    162a:	21 f4       	brne	.+8      	; 0x1634 <vfprintf+0x308>
    162c:	9a 2d       	mov	r25, r10
    162e:	99 7e       	andi	r25, 0xE9	; 233
    1630:	a9 2e       	mov	r10, r25
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <vfprintf+0x31a>
    1634:	a2 fe       	sbrs	r10, 2
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfprintf+0x318>
    1638:	b3 94       	inc	r11
    163a:	b3 94       	inc	r11
    163c:	04 c0       	rjmp	.+8      	; 0x1646 <vfprintf+0x31a>
    163e:	8a 2d       	mov	r24, r10
    1640:	86 78       	andi	r24, 0x86	; 134
    1642:	09 f0       	breq	.+2      	; 0x1646 <vfprintf+0x31a>
    1644:	b3 94       	inc	r11
    1646:	a3 fc       	sbrc	r10, 3
    1648:	10 c0       	rjmp	.+32     	; 0x166a <vfprintf+0x33e>
    164a:	a0 fe       	sbrs	r10, 0
    164c:	06 c0       	rjmp	.+12     	; 0x165a <vfprintf+0x32e>
    164e:	b2 14       	cp	r11, r2
    1650:	80 f4       	brcc	.+32     	; 0x1672 <vfprintf+0x346>
    1652:	28 0c       	add	r2, r8
    1654:	92 2c       	mov	r9, r2
    1656:	9b 18       	sub	r9, r11
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <vfprintf+0x348>
    165a:	b2 14       	cp	r11, r2
    165c:	58 f4       	brcc	.+22     	; 0x1674 <vfprintf+0x348>
    165e:	b6 01       	movw	r22, r12
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	76 d0       	rcall	.+236    	; 0x1752 <fputc>
    1666:	b3 94       	inc	r11
    1668:	f8 cf       	rjmp	.-16     	; 0x165a <vfprintf+0x32e>
    166a:	b2 14       	cp	r11, r2
    166c:	18 f4       	brcc	.+6      	; 0x1674 <vfprintf+0x348>
    166e:	2b 18       	sub	r2, r11
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x34a>
    1672:	98 2c       	mov	r9, r8
    1674:	21 2c       	mov	r2, r1
    1676:	a4 fe       	sbrs	r10, 4
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <vfprintf+0x36c>
    167a:	b6 01       	movw	r22, r12
    167c:	80 e3       	ldi	r24, 0x30	; 48
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	68 d0       	rcall	.+208    	; 0x1752 <fputc>
    1682:	a2 fe       	sbrs	r10, 2
    1684:	16 c0       	rjmp	.+44     	; 0x16b2 <vfprintf+0x386>
    1686:	a1 fc       	sbrc	r10, 1
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <vfprintf+0x364>
    168a:	88 e7       	ldi	r24, 0x78	; 120
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <vfprintf+0x368>
    1690:	88 e5       	ldi	r24, 0x58	; 88
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	b6 01       	movw	r22, r12
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <vfprintf+0x384>
    1698:	8a 2d       	mov	r24, r10
    169a:	86 78       	andi	r24, 0x86	; 134
    169c:	51 f0       	breq	.+20     	; 0x16b2 <vfprintf+0x386>
    169e:	a1 fe       	sbrs	r10, 1
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x37a>
    16a2:	8b e2       	ldi	r24, 0x2B	; 43
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <vfprintf+0x37c>
    16a6:	80 e2       	ldi	r24, 0x20	; 32
    16a8:	a7 fc       	sbrc	r10, 7
    16aa:	8d e2       	ldi	r24, 0x2D	; 45
    16ac:	b6 01       	movw	r22, r12
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	50 d0       	rcall	.+160    	; 0x1752 <fputc>
    16b2:	89 14       	cp	r8, r9
    16b4:	30 f4       	brcc	.+12     	; 0x16c2 <vfprintf+0x396>
    16b6:	b6 01       	movw	r22, r12
    16b8:	80 e3       	ldi	r24, 0x30	; 48
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	4a d0       	rcall	.+148    	; 0x1752 <fputc>
    16be:	9a 94       	dec	r9
    16c0:	f8 cf       	rjmp	.-16     	; 0x16b2 <vfprintf+0x386>
    16c2:	8a 94       	dec	r8
    16c4:	f3 01       	movw	r30, r6
    16c6:	e8 0d       	add	r30, r8
    16c8:	f1 1d       	adc	r31, r1
    16ca:	80 81       	ld	r24, Z
    16cc:	b6 01       	movw	r22, r12
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	40 d0       	rcall	.+128    	; 0x1752 <fputc>
    16d2:	81 10       	cpse	r8, r1
    16d4:	f6 cf       	rjmp	.-20     	; 0x16c2 <vfprintf+0x396>
    16d6:	22 20       	and	r2, r2
    16d8:	09 f4       	brne	.+2      	; 0x16dc <vfprintf+0x3b0>
    16da:	4e ce       	rjmp	.-868    	; 0x1378 <vfprintf+0x4c>
    16dc:	b6 01       	movw	r22, r12
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	37 d0       	rcall	.+110    	; 0x1752 <fputc>
    16e4:	2a 94       	dec	r2
    16e6:	f7 cf       	rjmp	.-18     	; 0x16d6 <vfprintf+0x3aa>
    16e8:	f6 01       	movw	r30, r12
    16ea:	86 81       	ldd	r24, Z+6	; 0x06
    16ec:	97 81       	ldd	r25, Z+7	; 0x07
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x3c8>
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	9f ef       	ldi	r25, 0xFF	; 255
    16f4:	2b 96       	adiw	r28, 0x0b	; 11
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	8f 90       	pop	r8
    1718:	7f 90       	pop	r7
    171a:	6f 90       	pop	r6
    171c:	5f 90       	pop	r5
    171e:	4f 90       	pop	r4
    1720:	3f 90       	pop	r3
    1722:	2f 90       	pop	r2
    1724:	08 95       	ret

00001726 <strnlen_P>:
    1726:	fc 01       	movw	r30, r24
    1728:	05 90       	lpm	r0, Z+
    172a:	61 50       	subi	r22, 0x01	; 1
    172c:	70 40       	sbci	r23, 0x00	; 0
    172e:	01 10       	cpse	r0, r1
    1730:	d8 f7       	brcc	.-10     	; 0x1728 <strnlen_P+0x2>
    1732:	80 95       	com	r24
    1734:	90 95       	com	r25
    1736:	8e 0f       	add	r24, r30
    1738:	9f 1f       	adc	r25, r31
    173a:	08 95       	ret

0000173c <strnlen>:
    173c:	fc 01       	movw	r30, r24
    173e:	61 50       	subi	r22, 0x01	; 1
    1740:	70 40       	sbci	r23, 0x00	; 0
    1742:	01 90       	ld	r0, Z+
    1744:	01 10       	cpse	r0, r1
    1746:	d8 f7       	brcc	.-10     	; 0x173e <strnlen+0x2>
    1748:	80 95       	com	r24
    174a:	90 95       	com	r25
    174c:	8e 0f       	add	r24, r30
    174e:	9f 1f       	adc	r25, r31
    1750:	08 95       	ret

00001752 <fputc>:
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	fb 01       	movw	r30, r22
    175c:	23 81       	ldd	r18, Z+3	; 0x03
    175e:	21 fd       	sbrc	r18, 1
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <fputc+0x16>
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	2c c0       	rjmp	.+88     	; 0x17c0 <fputc+0x6e>
    1768:	22 ff       	sbrs	r18, 2
    176a:	16 c0       	rjmp	.+44     	; 0x1798 <fputc+0x46>
    176c:	46 81       	ldd	r20, Z+6	; 0x06
    176e:	57 81       	ldd	r21, Z+7	; 0x07
    1770:	24 81       	ldd	r18, Z+4	; 0x04
    1772:	35 81       	ldd	r19, Z+5	; 0x05
    1774:	42 17       	cp	r20, r18
    1776:	53 07       	cpc	r21, r19
    1778:	44 f4       	brge	.+16     	; 0x178a <fputc+0x38>
    177a:	a0 81       	ld	r26, Z
    177c:	b1 81       	ldd	r27, Z+1	; 0x01
    177e:	9d 01       	movw	r18, r26
    1780:	2f 5f       	subi	r18, 0xFF	; 255
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	31 83       	std	Z+1, r19	; 0x01
    1786:	20 83       	st	Z, r18
    1788:	8c 93       	st	X, r24
    178a:	26 81       	ldd	r18, Z+6	; 0x06
    178c:	37 81       	ldd	r19, Z+7	; 0x07
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	37 83       	std	Z+7, r19	; 0x07
    1794:	26 83       	std	Z+6, r18	; 0x06
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <fputc+0x6e>
    1798:	8b 01       	movw	r16, r22
    179a:	ec 01       	movw	r28, r24
    179c:	fb 01       	movw	r30, r22
    179e:	00 84       	ldd	r0, Z+8	; 0x08
    17a0:	f1 85       	ldd	r31, Z+9	; 0x09
    17a2:	e0 2d       	mov	r30, r0
    17a4:	09 95       	icall
    17a6:	89 2b       	or	r24, r25
    17a8:	e1 f6       	brne	.-72     	; 0x1762 <fputc+0x10>
    17aa:	d8 01       	movw	r26, r16
    17ac:	16 96       	adiw	r26, 0x06	; 6
    17ae:	8d 91       	ld	r24, X+
    17b0:	9c 91       	ld	r25, X
    17b2:	17 97       	sbiw	r26, 0x07	; 7
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	17 96       	adiw	r26, 0x07	; 7
    17b8:	9c 93       	st	X, r25
    17ba:	8e 93       	st	-X, r24
    17bc:	16 97       	sbiw	r26, 0x06	; 6
    17be:	ce 01       	movw	r24, r28
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <__ultoa_invert>:
    17ca:	fa 01       	movw	r30, r20
    17cc:	aa 27       	eor	r26, r26
    17ce:	28 30       	cpi	r18, 0x08	; 8
    17d0:	51 f1       	breq	.+84     	; 0x1826 <__ultoa_invert+0x5c>
    17d2:	20 31       	cpi	r18, 0x10	; 16
    17d4:	81 f1       	breq	.+96     	; 0x1836 <__ultoa_invert+0x6c>
    17d6:	e8 94       	clt
    17d8:	6f 93       	push	r22
    17da:	6e 7f       	andi	r22, 0xFE	; 254
    17dc:	6e 5f       	subi	r22, 0xFE	; 254
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	8f 4f       	sbci	r24, 0xFF	; 255
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	af 4f       	sbci	r26, 0xFF	; 255
    17e6:	b1 e0       	ldi	r27, 0x01	; 1
    17e8:	3e d0       	rcall	.+124    	; 0x1866 <__ultoa_invert+0x9c>
    17ea:	b4 e0       	ldi	r27, 0x04	; 4
    17ec:	3c d0       	rcall	.+120    	; 0x1866 <__ultoa_invert+0x9c>
    17ee:	67 0f       	add	r22, r23
    17f0:	78 1f       	adc	r23, r24
    17f2:	89 1f       	adc	r24, r25
    17f4:	9a 1f       	adc	r25, r26
    17f6:	a1 1d       	adc	r26, r1
    17f8:	68 0f       	add	r22, r24
    17fa:	79 1f       	adc	r23, r25
    17fc:	8a 1f       	adc	r24, r26
    17fe:	91 1d       	adc	r25, r1
    1800:	a1 1d       	adc	r26, r1
    1802:	6a 0f       	add	r22, r26
    1804:	71 1d       	adc	r23, r1
    1806:	81 1d       	adc	r24, r1
    1808:	91 1d       	adc	r25, r1
    180a:	a1 1d       	adc	r26, r1
    180c:	20 d0       	rcall	.+64     	; 0x184e <__ultoa_invert+0x84>
    180e:	09 f4       	brne	.+2      	; 0x1812 <__ultoa_invert+0x48>
    1810:	68 94       	set
    1812:	3f 91       	pop	r19
    1814:	2a e0       	ldi	r18, 0x0A	; 10
    1816:	26 9f       	mul	r18, r22
    1818:	11 24       	eor	r1, r1
    181a:	30 19       	sub	r19, r0
    181c:	30 5d       	subi	r19, 0xD0	; 208
    181e:	31 93       	st	Z+, r19
    1820:	de f6       	brtc	.-74     	; 0x17d8 <__ultoa_invert+0xe>
    1822:	cf 01       	movw	r24, r30
    1824:	08 95       	ret
    1826:	46 2f       	mov	r20, r22
    1828:	47 70       	andi	r20, 0x07	; 7
    182a:	40 5d       	subi	r20, 0xD0	; 208
    182c:	41 93       	st	Z+, r20
    182e:	b3 e0       	ldi	r27, 0x03	; 3
    1830:	0f d0       	rcall	.+30     	; 0x1850 <__ultoa_invert+0x86>
    1832:	c9 f7       	brne	.-14     	; 0x1826 <__ultoa_invert+0x5c>
    1834:	f6 cf       	rjmp	.-20     	; 0x1822 <__ultoa_invert+0x58>
    1836:	46 2f       	mov	r20, r22
    1838:	4f 70       	andi	r20, 0x0F	; 15
    183a:	40 5d       	subi	r20, 0xD0	; 208
    183c:	4a 33       	cpi	r20, 0x3A	; 58
    183e:	18 f0       	brcs	.+6      	; 0x1846 <__ultoa_invert+0x7c>
    1840:	49 5d       	subi	r20, 0xD9	; 217
    1842:	31 fd       	sbrc	r19, 1
    1844:	40 52       	subi	r20, 0x20	; 32
    1846:	41 93       	st	Z+, r20
    1848:	02 d0       	rcall	.+4      	; 0x184e <__ultoa_invert+0x84>
    184a:	a9 f7       	brne	.-22     	; 0x1836 <__ultoa_invert+0x6c>
    184c:	ea cf       	rjmp	.-44     	; 0x1822 <__ultoa_invert+0x58>
    184e:	b4 e0       	ldi	r27, 0x04	; 4
    1850:	a6 95       	lsr	r26
    1852:	97 95       	ror	r25
    1854:	87 95       	ror	r24
    1856:	77 95       	ror	r23
    1858:	67 95       	ror	r22
    185a:	ba 95       	dec	r27
    185c:	c9 f7       	brne	.-14     	; 0x1850 <__ultoa_invert+0x86>
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	61 05       	cpc	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	08 95       	ret
    1866:	9b 01       	movw	r18, r22
    1868:	ac 01       	movw	r20, r24
    186a:	0a 2e       	mov	r0, r26
    186c:	06 94       	lsr	r0
    186e:	57 95       	ror	r21
    1870:	47 95       	ror	r20
    1872:	37 95       	ror	r19
    1874:	27 95       	ror	r18
    1876:	ba 95       	dec	r27
    1878:	c9 f7       	brne	.-14     	; 0x186c <__ultoa_invert+0xa2>
    187a:	62 0f       	add	r22, r18
    187c:	73 1f       	adc	r23, r19
    187e:	84 1f       	adc	r24, r20
    1880:	95 1f       	adc	r25, r21
    1882:	a0 1d       	adc	r26, r0
    1884:	08 95       	ret

00001886 <_exit>:
    1886:	f8 94       	cli

00001888 <__stop_program>:
    1888:	ff cf       	rjmp	.-2      	; 0x1888 <__stop_program>
