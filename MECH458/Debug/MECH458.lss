
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  0000197a  00001a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000197a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800270  00800270  00001b7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000451a  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a51  00000000  00000000  00006436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003114  00000000  00000000  00007e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  0000af9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000913c  00000000  00000000  0000b70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001820  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  00016068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  00016358  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c4       	rjmp	.+2442   	; 0x9c0 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c7       	rjmp	.+3868   	; 0xf62 <__vector_17>
      46:	00 00       	nop
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ea e7       	ldi	r30, 0x7A	; 122
      ac:	f9 e1       	ldi	r31, 0x19	; 25
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a0 37       	cpi	r26, 0x70	; 112
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	22 e0       	ldi	r18, 0x02	; 2
      c0:	a0 e7       	ldi	r26, 0x70	; 112
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a2 3f       	cpi	r26, 0xF2	; 242
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	ef d2       	rcall	.+1502   	; 0x6ae <main>
      d0:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <_exit>

000000d4 <__bad_interrupt>:
      d4:	c4 c3       	rjmp	.+1928   	; 0x85e <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <g_ADCCount>
     120:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <g_ADCCount>
     12c:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 92 02 	sts	0x0292, r19	; 0x800292 <g_ADCCount+0x1>
     13a:	20 93 91 02 	sts	0x0291, r18	; 0x800291 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e3 58       	subi	r30, 0x83	; 131
     14e:	fd 4f       	sbci	r31, 0xFD	; 253
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <g_ADCCount>
     162:	90 91 92 02 	lds	r25, 0x0292	; 0x800292 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2349>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     19a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     1a6:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     1aa:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <STAGE1+0x1>
     1ae:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <STAGE1>
     1b2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2349>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	0e c0       	rjmp	.+28     	; 0x1da <SERVER_Task+0x50>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2350>
     1c2:	88 23       	and	r24, r24
     1c4:	41 f0       	breq	.+16     	; 0x1d6 <SERVER_Task+0x4c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <STAGE2>
     1cc:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     1d0:	59 d2       	rcall	.+1202   	; 0x684 <LL_UpdateStatus>
     1d2:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_WDTimeout>
     1d6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2350>
     1da:	65 99       	sbic	0x0c, 5	; 12
     1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <SERVER_Task+0x6e>
     1de:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2351>
     1e2:	88 23       	and	r24, r24
     1e4:	39 f0       	breq	.+14     	; 0x1f4 <SERVER_Task+0x6a>
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <_timer+0x23>
     1ec:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_WDTimeout>
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	88 b9       	out	0x08, r24	; 8
     1f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2351>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0c c0       	rjmp	.+24     	; 0x214 <SERVER_Task+0x8a>
     1fc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2349>
     200:	81 11       	cpse	r24, r1
     202:	05 c0       	rjmp	.+10     	; 0x20e <SERVER_Task+0x84>
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_timer+0x1a>
     20a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_timer+0x47>
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2349>
     214:	66 9b       	sbis	0x0c, 6	; 12
     216:	20 c0       	rjmp	.+64     	; 0x258 <SERVER_Task+0xce>
     218:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2350>
     21c:	81 11       	cpse	r24, r1
     21e:	19 c0       	rjmp	.+50     	; 0x252 <SERVER_Task+0xc8>
     220:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <STAGE2>
     224:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	49 f4       	brne	.+18     	; 0x23e <SERVER_Task+0xb4>
     22c:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     230:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     234:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <STAGE2+0x1>
     238:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <STAGE2>
     23c:	05 c0       	rjmp	.+10     	; 0x248 <SERVER_Task+0xbe>
     23e:	dc d1       	rcall	.+952    	; 0x5f8 <LL_Next>
     240:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <STAGE2+0x1>
     244:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <STAGE2>
     248:	ea e7       	ldi	r30, 0x7A	; 122
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	80 64       	ori	r24, 0x40	; 64
     250:	80 83       	st	Z, r24
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2350>
     258:	65 9b       	sbis	0x0c, 5	; 12
     25a:	08 c0       	rjmp	.+16     	; 0x26c <SERVER_Task+0xe2>
     25c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2351>
     260:	81 11       	cpse	r24, r1
     262:	01 c0       	rjmp	.+2      	; 0x266 <SERVER_Task+0xdc>
     264:	18 b8       	out	0x08, r1	; 8
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2351>
     26c:	08 95       	ret

0000026e <ADC_Task>:
     26e:	cf 92       	push	r12
     270:	df 92       	push	r13
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	cf 93       	push	r28
     278:	ed e7       	ldi	r30, 0x7D	; 125
     27a:	f2 e0       	ldi	r31, 0x02	; 2
     27c:	a0 81       	ld	r26, Z
     27e:	b1 81       	ldd	r27, Z+1	; 0x01
     280:	60 81       	ld	r22, Z
     282:	71 81       	ldd	r23, Z+1	; 0x01
     284:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <ticks.2359>
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <ticks.2359>
     28e:	c1 2c       	mov	r12, r1
     290:	d1 2c       	mov	r13, r1
     292:	76 01       	movw	r14, r12
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	4f b7       	in	r20, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	fc 01       	movw	r30, r24
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	e3 58       	subi	r30, 0x83	; 131
     2a4:	fd 4f       	sbci	r31, 0xFD	; 253
     2a6:	20 81       	ld	r18, Z
     2a8:	31 81       	ldd	r19, Z+1	; 0x01
     2aa:	c2 0e       	add	r12, r18
     2ac:	d3 1e       	adc	r13, r19
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	20 81       	ld	r18, Z
     2b4:	31 81       	ldd	r19, Z+1	; 0x01
     2b6:	26 17       	cp	r18, r22
     2b8:	37 07       	cpc	r19, r23
     2ba:	38 f4       	brcc	.+14     	; 0x2ca <ADC_Task+0x5c>
     2bc:	fc 01       	movw	r30, r24
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	e3 58       	subi	r30, 0x83	; 131
     2c4:	fd 4f       	sbci	r31, 0xFD	; 253
     2c6:	60 81       	ld	r22, Z
     2c8:	71 81       	ldd	r23, Z+1	; 0x01
     2ca:	fc 01       	movw	r30, r24
     2cc:	ee 0f       	add	r30, r30
     2ce:	ff 1f       	adc	r31, r31
     2d0:	e3 58       	subi	r30, 0x83	; 131
     2d2:	fd 4f       	sbci	r31, 0xFD	; 253
     2d4:	20 81       	ld	r18, Z
     2d6:	31 81       	ldd	r19, Z+1	; 0x01
     2d8:	a2 17       	cp	r26, r18
     2da:	b3 07       	cpc	r27, r19
     2dc:	08 f0       	brcs	.+2      	; 0x2e0 <ADC_Task+0x72>
     2de:	57 c0       	rjmp	.+174    	; 0x38e <ADC_Task+0x120>
     2e0:	fc 01       	movw	r30, r24
     2e2:	ee 0f       	add	r30, r30
     2e4:	ff 1f       	adc	r31, r31
     2e6:	e3 58       	subi	r30, 0x83	; 131
     2e8:	fd 4f       	sbci	r31, 0xFD	; 253
     2ea:	a0 81       	ld	r26, Z
     2ec:	b1 81       	ldd	r27, Z+1	; 0x01
     2ee:	4f c0       	rjmp	.+158    	; 0x38e <ADC_Task+0x120>
     2f0:	8f b7       	in	r24, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	ca 1a       	sub	r12, r26
     2f6:	db 0a       	sbc	r13, r27
     2f8:	e1 08       	sbc	r14, r1
     2fa:	f1 08       	sbc	r15, r1
     2fc:	c6 1a       	sub	r12, r22
     2fe:	d7 0a       	sbc	r13, r23
     300:	e1 08       	sbc	r14, r1
     302:	f1 08       	sbc	r15, r1
     304:	f6 94       	lsr	r15
     306:	e7 94       	ror	r14
     308:	d7 94       	ror	r13
     30a:	c7 94       	ror	r12
     30c:	f6 94       	lsr	r15
     30e:	e7 94       	ror	r14
     310:	d7 94       	ror	r13
     312:	c7 94       	ror	r12
     314:	8f bf       	out	0x3f, r24	; 63
     316:	cf b7       	in	r28, 0x3f	; 63
     318:	f8 94       	cli
     31a:	d7 01       	movw	r26, r14
     31c:	c6 01       	movw	r24, r12
     31e:	0b 97       	sbiw	r24, 0x0b	; 11
     320:	a1 09       	sbc	r26, r1
     322:	b1 09       	sbc	r27, r1
     324:	8d 3d       	cpi	r24, 0xDD	; 221
     326:	93 40       	sbci	r25, 0x03	; 3
     328:	a1 05       	cpc	r26, r1
     32a:	b1 05       	cpc	r27, r1
     32c:	a0 f4       	brcc	.+40     	; 0x356 <ADC_Task+0xe8>
     32e:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <STAGE2>
     332:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     336:	8b d1       	rcall	.+790    	; 0x64e <LL_GetRefl>
     338:	a0 e0       	ldi	r26, 0x00	; 0
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	c8 16       	cp	r12, r24
     33e:	d9 06       	cpc	r13, r25
     340:	ea 06       	cpc	r14, r26
     342:	fb 06       	cpc	r15, r27
     344:	40 f4       	brcc	.+16     	; 0x356 <ADC_Task+0xe8>
     346:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <STAGE2>
     34a:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	11 f0       	breq	.+4      	; 0x356 <ADC_Task+0xe8>
     352:	b6 01       	movw	r22, r12
     354:	87 d1       	rcall	.+782    	; 0x664 <LL_UpdateRefl>
     356:	cf bf       	out	0x3f, r28	; 63
     358:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <g_ADCCount+0x1>
     35c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <g_ADCCount>
     360:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <_timer+0x11>
     364:	66 9b       	sbis	0x0c, 6	; 12
     366:	06 c0       	rjmp	.+12     	; 0x374 <ADC_Task+0x106>
     368:	ea e7       	ldi	r30, 0x7A	; 122
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	80 64       	ori	r24, 0x40	; 64
     370:	80 83       	st	Z, r24
     372:	14 c0       	rjmp	.+40     	; 0x39c <ADC_Task+0x12e>
     374:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <STAGE2>
     378:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     37c:	01 90       	ld	r0, Z+
     37e:	f0 81       	ld	r31, Z
     380:	e0 2d       	mov	r30, r0
     382:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <ticks.2359>
     386:	82 83       	std	Z+2, r24	; 0x02
     388:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <ticks.2359>
     38c:	07 c0       	rjmp	.+14     	; 0x39c <ADC_Task+0x12e>
     38e:	4f bf       	out	0x3f, r20	; 63
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	86 30       	cpi	r24, 0x06	; 6
     394:	91 05       	cpc	r25, r1
     396:	09 f0       	breq	.+2      	; 0x39a <ADC_Task+0x12c>
     398:	7f cf       	rjmp	.-258    	; 0x298 <ADC_Task+0x2a>
     39a:	aa cf       	rjmp	.-172    	; 0x2f0 <ADC_Task+0x82>
     39c:	cf 91       	pop	r28
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <MAG_Task>:
     3a8:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <tick.2381>
     3ac:	8f 5f       	subi	r24, 0xFF	; 255
     3ae:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <tick.2381>
     3b2:	64 99       	sbic	0x0c, 4	; 12
     3b4:	20 c0       	rjmp	.+64     	; 0x3f6 <MAG_Task+0x4e>
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     3bc:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     3c0:	61 d1       	rcall	.+706    	; 0x684 <LL_UpdateStatus>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     3c8:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     3cc:	51 d1       	rcall	.+674    	; 0x670 <LL_UpdateMag>
     3ce:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     3d2:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     3d6:	dc 01       	movw	r26, r24
     3d8:	ed 91       	ld	r30, X+
     3da:	fc 91       	ld	r31, X
     3dc:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <tick.2381>
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	0a d1       	rcall	.+532    	; 0x5f8 <LL_Next>
     3e4:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <STAGE1+0x1>
     3e8:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <STAGE1>
     3ec:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tick.2381>
     3f0:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <_timer+0x1a>
     3f4:	08 95       	ret
     3f6:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <tick.2381>
     3fa:	8d 33       	cpi	r24, 0x3D	; 61
     3fc:	18 f1       	brcs	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     404:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     408:	3d d1       	rcall	.+634    	; 0x684 <LL_UpdateStatus>
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     410:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     414:	2d d1       	rcall	.+602    	; 0x670 <LL_UpdateMag>
     416:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <STAGE2>
     41a:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     41e:	01 90       	ld	r0, Z+
     420:	f0 81       	ld	r31, Z
     422:	e0 2d       	mov	r30, r0
     424:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <tick.2381>
     428:	84 83       	std	Z+4, r24	; 0x04
     42a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     42e:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     432:	e2 d0       	rcall	.+452    	; 0x5f8 <LL_Next>
     434:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <STAGE1+0x1>
     438:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <STAGE1>
     43c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <tick.2381>
     440:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <_timer+0x1a>
     444:	08 95       	ret

00000446 <EXIT_Task>:
     446:	cf 93       	push	r28
     448:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <memory.2387>
     44c:	81 11       	cpse	r24, r1
     44e:	6e c0       	rjmp	.+220    	; 0x52c <EXIT_Task+0xe6>
     450:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <delay.2388>
     454:	8f 5f       	subi	r24, 0xFF	; 255
     456:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <delay.2388>
     45a:	e2 ee       	ldi	r30, 0xE2	; 226
     45c:	f2 e0       	ldi	r31, 0x02	; 2
     45e:	85 81       	ldd	r24, Z+5	; 0x05
     460:	96 81       	ldd	r25, Z+6	; 0x06
     462:	87 81       	ldd	r24, Z+7	; 0x07
     464:	03 c0       	rjmp	.+6      	; 0x46c <EXIT_Task+0x26>
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0b d2       	rcall	.+1046   	; 0x882 <PWM>
     46c:	c0 91 e6 02 	lds	r28, 0x02E6	; 0x8002e6 <stepper+0x4>
     470:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     474:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     478:	e5 d0       	rcall	.+458    	; 0x644 <LL_GetClass>
     47a:	e8 2f       	mov	r30, r24
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	ea 5f       	subi	r30, 0xFA	; 250
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	80 81       	ld	r24, Z
     484:	c8 13       	cpse	r28, r24
     486:	49 c0       	rjmp	.+146    	; 0x51a <EXIT_Task+0xd4>
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	fa d1       	rcall	.+1012   	; 0x882 <PWM>
     48e:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <delay.2388>
     492:	89 32       	cpi	r24, 0x29	; 41
     494:	28 f4       	brcc	.+10     	; 0x4a0 <EXIT_Task+0x5a>
     496:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <memory.2387>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <EXIT_Task+0x5a>
     49e:	40 c0       	rjmp	.+128    	; 0x520 <EXIT_Task+0xda>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <memory.2387>
     4a6:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <delay.2388>
     4aa:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     4ae:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     4b2:	c8 d0       	rcall	.+400    	; 0x644 <LL_GetClass>
     4b4:	c8 2f       	mov	r28, r24
     4b6:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <HEAD>
     4ba:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <HEAD+0x1>
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	93 81       	ldd	r25, Z+3	; 0x03
     4c2:	c0 d0       	rcall	.+384    	; 0x644 <LL_GetClass>
     4c4:	c8 13       	cpse	r28, r24
     4c6:	02 c0       	rjmp	.+4      	; 0x4cc <EXIT_Task+0x86>
     4c8:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <memory.2387>
     4cc:	63 e0       	ldi	r22, 0x03	; 3
     4ce:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     4d2:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     4d6:	d6 d0       	rcall	.+428    	; 0x684 <LL_UpdateStatus>
     4d8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     4dc:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     4e0:	8b d0       	rcall	.+278    	; 0x5f8 <LL_Next>
     4e2:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <HEAD+0x1>
     4e6:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <HEAD>
     4ea:	fc 01       	movw	r30, r24
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	a9 d0       	rcall	.+338    	; 0x644 <LL_GetClass>
     4f2:	e8 2f       	mov	r30, r24
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ea 5f       	subi	r30, 0xFA	; 250
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	c0 81       	ld	r28, Z
     4fc:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     500:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     504:	9f d0       	rcall	.+318    	; 0x644 <LL_GetClass>
     506:	e8 2f       	mov	r30, r24
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	ea 5f       	subi	r30, 0xFA	; 250
     50c:	fe 4f       	sbci	r31, 0xFE	; 254
     50e:	80 81       	ld	r24, Z
     510:	6c 2f       	mov	r22, r28
     512:	41 d2       	rcall	.+1154   	; 0x996 <STEPPER_SetRotation>
     514:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <_timer+0x23>
     518:	03 c0       	rjmp	.+6      	; 0x520 <EXIT_Task+0xda>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	b1 d1       	rcall	.+866    	; 0x882 <PWM>
     520:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     524:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     528:	8d d0       	rcall	.+282    	; 0x644 <LL_GetClass>
     52a:	0a c0       	rjmp	.+20     	; 0x540 <EXIT_Task+0xfa>
     52c:	e2 ee       	ldi	r30, 0xE2	; 226
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	85 81       	ldd	r24, Z+5	; 0x05
     532:	96 81       	ldd	r25, Z+6	; 0x06
     534:	97 81       	ldd	r25, Z+7	; 0x07
     536:	89 1b       	sub	r24, r25
     538:	89 31       	cpi	r24, 0x19	; 25
     53a:	08 f0       	brcs	.+2      	; 0x53e <EXIT_Task+0xf8>
     53c:	97 cf       	rjmp	.-210    	; 0x46c <EXIT_Task+0x26>
     53e:	93 cf       	rjmp	.-218    	; 0x466 <EXIT_Task+0x20>
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <BTN_Task>:
     544:	89 b1       	in	r24, 0x09	; 9
     546:	83 70       	andi	r24, 0x03	; 3
     548:	c9 f0       	breq	.+50     	; 0x57c <BTN_Task+0x38>
     54a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <__data_end>
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <__data_end>
     554:	83 30       	cpi	r24, 0x03	; 3
     556:	90 f0       	brcs	.+36     	; 0x57c <BTN_Task+0x38>
     558:	89 b1       	in	r24, 0x09	; 9
     55a:	83 70       	andi	r24, 0x03	; 3
     55c:	19 f4       	brne	.+6      	; 0x564 <BTN_Task+0x20>
     55e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
     562:	08 95       	ret
     564:	89 b1       	in	r24, 0x09	; 9
     566:	83 70       	andi	r24, 0x03	; 3
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	29 f4       	brne	.+10     	; 0x576 <BTN_Task+0x32>
     56c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <g_PauseRequest>
     570:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
     574:	08 95       	ret
     576:	89 b1       	in	r24, 0x09	; 9
     578:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <__data_end>
     57c:	08 95       	ret

0000057e <WATCHDOG_Task>:
     57e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <g_WDTimeout>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	18 f0       	brcs	.+6      	; 0x58c <WATCHDOG_Task+0xe>
     586:	8b e1       	ldi	r24, 0x1B	; 27
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	5b d3       	rcall	.+1718   	; 0xc42 <SYS_Pause>
     58c:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <g_WDTimeout>
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <g_WDTimeout>
     596:	08 95       	ret

00000598 <D_Blinky>:
     598:	9b b1       	in	r25, 0x0b	; 11
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	89 27       	eor	r24, r25
     59e:	8b b9       	out	0x0b, r24	; 11
     5a0:	08 95       	ret

000005a2 <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
     5a2:	08 95       	ret

000005a4 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	7c 01       	movw	r14, r24
     5b0:	16 2f       	mov	r17, r22
     5b2:	d4 2f       	mov	r29, r20
     5b4:	c2 2f       	mov	r28, r18
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	e1 d5       	rcall	.+3010   	; 0x117e <malloc>
     5bc:	fc 01       	movw	r30, r24
     5be:	f1 82       	std	Z+1, r15	; 0x01
     5c0:	e0 82       	st	Z, r14
     5c2:	13 83       	std	Z+3, r17	; 0x03
     5c4:	d5 83       	std	Z+5, r29	; 0x05
     5c6:	c6 83       	std	Z+6, r28	; 0x06
     5c8:	12 82       	std	Z+2, r1	; 0x02
     5ca:	14 82       	std	Z+4, r1	; 0x04
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	08 95       	ret

000005d8 <LL_ItemListInit>:
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	cd d5       	rcall	.+2970   	; 0x117e <malloc>
     5e4:	fc 01       	movw	r30, r24
     5e6:	d1 83       	std	Z+1, r29	; 0x01
     5e8:	c0 83       	st	Z, r28
     5ea:	15 82       	std	Z+5, r1	; 0x05
     5ec:	14 82       	std	Z+4, r1	; 0x04
     5ee:	13 82       	std	Z+3, r1	; 0x03
     5f0:	12 82       	std	Z+2, r1	; 0x02
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <LL_Next>:
     5f8:	fc 01       	movw	r30, r24
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	93 81       	ldd	r25, Z+3	; 0x03
     5fe:	08 95       	ret

00000600 <LL_AddBack>:
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
     606:	cb 01       	movw	r24, r22
     608:	01 c0       	rjmp	.+2      	; 0x60c <LL_AddBack+0xc>
     60a:	e9 01       	movw	r28, r18
     60c:	2a 81       	ldd	r18, Y+2	; 0x02
     60e:	3b 81       	ldd	r19, Y+3	; 0x03
     610:	21 15       	cp	r18, r1
     612:	31 05       	cpc	r19, r1
     614:	d1 f7       	brne	.-12     	; 0x60a <LL_AddBack+0xa>
     616:	e0 df       	rcall	.-64     	; 0x5d8 <LL_ItemListInit>
     618:	9b 83       	std	Y+3, r25	; 0x03
     61a:	8a 83       	std	Y+2, r24	; 0x02
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <LL_Size>:
     622:	dc 01       	movw	r26, r24
     624:	12 96       	adiw	r26, 0x02	; 2
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	13 97       	sbiw	r26, 0x03	; 3
     62c:	30 97       	sbiw	r30, 0x00	; 0
     62e:	41 f0       	breq	.+16     	; 0x640 <LL_Size+0x1e>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	02 80       	ldd	r0, Z+2	; 0x02
     636:	f3 81       	ldd	r31, Z+3	; 0x03
     638:	e0 2d       	mov	r30, r0
     63a:	30 97       	sbiw	r30, 0x00	; 0
     63c:	d1 f7       	brne	.-12     	; 0x632 <LL_Size+0x10>
     63e:	08 95       	ret
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret

00000644 <LL_GetClass>:
     644:	dc 01       	movw	r26, r24
     646:	ed 91       	ld	r30, X+
     648:	fc 91       	ld	r31, X
     64a:	85 81       	ldd	r24, Z+5	; 0x05
     64c:	08 95       	ret

0000064e <LL_GetRefl>:
     64e:	dc 01       	movw	r26, r24
     650:	ed 91       	ld	r30, X+
     652:	fc 91       	ld	r31, X
     654:	80 81       	ld	r24, Z
     656:	91 81       	ldd	r25, Z+1	; 0x01
     658:	08 95       	ret

0000065a <LL_GetMag>:
     65a:	dc 01       	movw	r26, r24
     65c:	ed 91       	ld	r30, X+
     65e:	fc 91       	ld	r31, X
     660:	83 81       	ldd	r24, Z+3	; 0x03
     662:	08 95       	ret

00000664 <LL_UpdateRefl>:
     664:	dc 01       	movw	r26, r24
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	71 83       	std	Z+1, r23	; 0x01
     66c:	60 83       	st	Z, r22
     66e:	08 95       	ret

00000670 <LL_UpdateMag>:
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	63 83       	std	Z+3, r22	; 0x03
     678:	08 95       	ret

0000067a <LL_UpdateClass>:
     67a:	dc 01       	movw	r26, r24
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	65 83       	std	Z+5, r22	; 0x05
     682:	08 95       	ret

00000684 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     684:	dc 01       	movw	r26, r24
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	66 83       	std	Z+6, r22	; 0x06
     68c:	08 95       	ret

0000068e <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     68e:	dc 01       	movw	r26, r24
     690:	ed 91       	ld	r30, X+
     692:	fc 91       	ld	r31, X
     694:	86 81       	ldd	r24, Z+6	; 0x06
     696:	08 95       	ret

00000698 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     69c:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     69e:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     6a0:	80 ef       	ldi	r24, 0xF0	; 240
     6a2:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     6a4:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     6a6:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	08 95       	ret

000006ae <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     6ae:	5d d2       	rcall	.+1210   	; 0xb6a <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     6b0:	89 b1       	in	r24, 0x09	; 9
     6b2:	83 70       	andi	r24, 0x03	; 3
     6b4:	e9 f7       	brne	.-6      	; 0x6b0 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     6b6:	89 e2       	ldi	r24, 0x29	; 41
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	53 d5       	rcall	.+2726   	; 0x1162 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6bc:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	45 ec       	ldi	r20, 0xC5	; 197
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	61 e0       	ldi	r22, 0x01	; 1
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	d0 d4       	rcall	.+2464   	; 0x1070 <TIMER_Create>
		_timer[0].state = READY;
     6d0:	c7 e9       	ldi	r28, 0x97	; 151
     6d2:	d2 e0       	ldi	r29, 0x02	; 2
     6d4:	12 e0       	ldi	r17, 0x02	; 2
     6d6:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	47 e3       	ldi	r20, 0x37	; 55
     6de:	51 e0       	ldi	r21, 0x01	; 1
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	c3 d4       	rcall	.+2438   	; 0x1070 <TIMER_Create>
		_timer[1].state = BLOCKED;
     6ea:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	44 ed       	ldi	r20, 0xD4	; 212
     6f2:	51 e0       	ldi	r21, 0x01	; 1
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	b9 d4       	rcall	.+2418   	; 0x1070 <TIMER_Create>
		_timer[2].state = BLOCKED;
     6fe:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	43 e2       	ldi	r20, 0x23	; 35
     706:	52 e0       	ldi	r21, 0x02	; 2
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	af d4       	rcall	.+2398   	; 0x1070 <TIMER_Create>
		_timer[3].state = BLOCKED;
     712:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(1, 0, ADD_Task, NULL);		// Item Enter Handling
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	41 ed       	ldi	r20, 0xD1	; 209
     71a:	52 e0       	ldi	r21, 0x02	; 2
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	a5 d4       	rcall	.+2378   	; 0x1070 <TIMER_Create>
		_timer[4].state = BLOCKED;
     726:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	42 ea       	ldi	r20, 0xA2	; 162
     72e:	52 e0       	ldi	r21, 0x02	; 2
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	84 e6       	ldi	r24, 0x64	; 100
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	9b d4       	rcall	.+2358   	; 0x1070 <TIMER_Create>
		_timer[5].state = READY;
     73a:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	4c ec       	ldi	r20, 0xCC	; 204
     742:	52 e0       	ldi	r21, 0x02	; 2
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 ed       	ldi	r24, 0xD0	; 208
     74a:	97 e0       	ldi	r25, 0x07	; 7
     74c:	91 d4       	rcall	.+2338   	; 0x1070 <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL);
     74e:	1e af       	std	Y+62, r17	; 0x3e
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	4f eb       	ldi	r20, 0xBF	; 191
     756:	52 e0       	ldi	r21, 0x02	; 2
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     75e:	93 e1       	ldi	r25, 0x13	; 19
     760:	87 d4       	rcall	.+2318   	; 0x1070 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     762:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <_timer+0x47>
     766:	8c e3       	ldi	r24, 0x3C	; 60
     768:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     76a:	fb d4       	rcall	.+2550   	; 0x1162 <UART_SendString>
     76c:	80 e8       	ldi	r24, 0x80	; 128
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	88 d0       	rcall	.+272    	; 0x882 <PWM>
	};

	// For initial stepper positioning
	int memory = 0;
     772:	78 94       	sei
     774:	e1 2c       	mov	r14, r1
					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     776:	f1 2c       	mov	r15, r1
     778:	cc 24       	eor	r12, r12
     77a:	c3 94       	inc	r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Calibrate("SET\r\n");
     77c:	d1 2c       	mov	r13, r1
     77e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <g_PauseRequest>
     782:	88 23       	and	r24, r24
     784:	19 f0       	breq	.+6      	; 0x78c <main+0xde>
     786:	8e e4       	ldi	r24, 0x4E	; 78
     788:	91 e0       	ldi	r25, 0x01	; 1

		list* temp = HEAD;
     78a:	73 d3       	rcall	.+1766   	; 0xe72 <SYS_Calibrate>
     78c:	c0 91 77 02 	lds	r28, 0x0277	; 0x800277 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     790:	d0 91 78 02 	lds	r29, 0x0278	; 0x800278 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     794:	20 97       	sbiw	r28, 0x00	; 0
     796:	99 f3       	breq	.-26     	; 0x77e <main+0xd0>
     798:	20 97       	sbiw	r28, 0x00	; 0
     79a:	09 f4       	brne	.+2      	; 0x79e <main+0xf0>
     79c:	59 c0       	rjmp	.+178    	; 0x850 <main+0x1a2>
     79e:	ce 01       	movw	r24, r28
     7a0:	51 df       	rcall	.-350    	; 0x644 <LL_GetClass>
     7a2:	84 30       	cpi	r24, 0x04	; 4
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <main+0xfa>
     7a6:	54 c0       	rjmp	.+168    	; 0x850 <main+0x1a2>
     7a8:	ce 01       	movw	r24, r28
     7aa:	71 df       	rcall	.-286    	; 0x68e <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     7ac:	82 30       	cpi	r24, 0x02	; 2
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <main+0x104>
     7b0:	4f c0       	rjmp	.+158    	; 0x850 <main+0x1a2>
     7b2:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     7b4:	4c df       	rcall	.-360    	; 0x64e <LL_GetRefl>
     7b6:	8c 01       	movw	r16, r24
     7b8:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     7ba:	4f df       	rcall	.-354    	; 0x65a <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     7bc:	88 23       	and	r24, r24
     7be:	91 f0       	breq	.+36     	; 0x7e4 <main+0x136>
     7c0:	c8 01       	movw	r24, r16
     7c2:	44 97       	sbiw	r24, 0x14	; 20
     7c4:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     7c6:	91 05       	cpc	r25, r1
     7c8:	20 f4       	brcc	.+8      	; 0x7d2 <main+0x124>
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     7ce:	55 df       	rcall	.-342    	; 0x67a <LL_UpdateClass>
     7d0:	24 c0       	rjmp	.+72     	; 0x81a <main+0x16c>
     7d2:	0c 52       	subi	r16, 0x2C	; 44
     7d4:	11 40       	sbci	r17, 0x01	; 1
     7d6:	0f 35       	cpi	r16, 0x5F	; 95
					{
						LL_UpdateClass(temp, STEEL);
     7d8:	11 40       	sbci	r17, 0x01	; 1
     7da:	f8 f4       	brcc	.+62     	; 0x81a <main+0x16c>
     7dc:	63 e0       	ldi	r22, 0x03	; 3
     7de:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     7e0:	4c df       	rcall	.-360    	; 0x67a <LL_UpdateClass>
     7e2:	1b c0       	rjmp	.+54     	; 0x81a <main+0x16c>
     7e4:	c8 01       	movw	r24, r16
     7e6:	89 58       	subi	r24, 0x89	; 137
     7e8:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     7ea:	0b 97       	sbiw	r24, 0x0b	; 11
     7ec:	20 f4       	brcc	.+8      	; 0x7f6 <main+0x148>
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     7f2:	43 df       	rcall	.-378    	; 0x67a <LL_UpdateClass>
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <main+0x16c>
     7f6:	c8 01       	movw	r24, r16
     7f8:	80 52       	subi	r24, 0x20	; 32
     7fa:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, BLACK);
     7fc:	87 39       	cpi	r24, 0x97	; 151
     7fe:	91 05       	cpc	r25, r1
     800:	20 f4       	brcc	.+8      	; 0x80a <main+0x15c>
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	ce 01       	movw	r24, r28
				}
				else
				{
					// Unknown non-magnetic object might be aluminum
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     806:	39 df       	rcall	.-398    	; 0x67a <LL_UpdateClass>
     808:	08 c0       	rjmp	.+16     	; 0x81a <main+0x16c>
     80a:	04 51       	subi	r16, 0x14	; 20
     80c:	11 09       	sbc	r17, r1
					{
						LL_UpdateClass(temp, ALUMINUM);
     80e:	01 35       	cpi	r16, 0x51	; 81
     810:	11 05       	cpc	r17, r1
     812:	18 f4       	brcc	.+6      	; 0x81a <main+0x16c>
     814:	62 e0       	ldi	r22, 0x02	; 2
					}
				}
				if(memory == 0)
     816:	ce 01       	movw	r24, r28
     818:	30 df       	rcall	.-416    	; 0x67a <LL_UpdateClass>
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     81a:	e1 14       	cp	r14, r1
     81c:	f1 04       	cpc	r15, r1
     81e:	c1 f4       	brne	.+48     	; 0x850 <main+0x1a2>
     820:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     824:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     828:	0d df       	rcall	.-486    	; 0x644 <LL_GetClass>
     82a:	e8 2f       	mov	r30, r24
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	e1 5f       	subi	r30, 0xF1	; 241
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	10 81       	ld	r17, Z
     834:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
     838:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     83c:	03 df       	rcall	.-506    	; 0x644 <LL_GetClass>
     83e:	e8 2f       	mov	r30, r24
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e1 5f       	subi	r30, 0xF1	; 241
     844:	fe 4f       	sbci	r31, 0xFE	; 254
     846:	80 81       	ld	r24, Z
     848:	61 2f       	mov	r22, r17
					memory = 1;
     84a:	a5 d0       	rcall	.+330    	; 0x996 <STEPPER_SetRotation>
     84c:	ec 2c       	mov	r14, r12
				}
			}
			temp = LL_Next(temp);
     84e:	fd 2c       	mov	r15, r13
     850:	ce 01       	movw	r24, r28
     852:	d2 de       	rcall	.-604    	; 0x5f8 <LL_Next>
     854:	ec 01       	movw	r28, r24
		if(g_PauseRequest) SYS_Calibrate("SET\r\n");

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     856:	89 2b       	or	r24, r25
     858:	09 f0       	breq	.+2      	; 0x85c <main+0x1ae>
     85a:	9e cf       	rjmp	.-196    	; 0x798 <main+0xea>
     85c:	90 cf       	rjmp	.-224    	; 0x77e <main+0xd0>

0000085e <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     868:	8a ea       	ldi	r24, 0xAA	; 170
     86a:	88 b9       	out	0x08, r24	; 8
     86c:	fe cf       	rjmp	.-4      	; 0x86a <__vector_default+0xc>

0000086e <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     86e:	84 b5       	in	r24, 0x24	; 36
     870:	83 68       	ori	r24, 0x83	; 131
     872:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     874:	85 b5       	in	r24, 0x25	; 37
     876:	83 60       	ori	r24, 0x03	; 3
     878:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     87a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <BELT_SPEED>
     87e:	87 bd       	out	0x27, r24	; 39
     880:	08 95       	ret

00000882 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     882:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     884:	9f b7       	in	r25, 0x3f	; 63
     886:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     888:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <BELT_SPEED>
     88c:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     88e:	23 2b       	or	r18, r19
     890:	31 f0       	breq	.+12     	; 0x89e <PWM+0x1c>
		{
			g_MotorOn = 1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <g_MotorOn>
			PORTB = ~0x0E;
     898:	81 ef       	ldi	r24, 0xF1	; 241
     89a:	85 b9       	out	0x05, r24	; 5
     89c:	04 c0       	rjmp	.+8      	; 0x8a6 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     89e:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <g_MotorOn>
			PORTB = ~0x0F;
     8a2:	80 ef       	ldi	r24, 0xF0	; 240
     8a4:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     8a6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     8a8:	08 95       	ret

000008aa <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     8aa:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     8ac:	e2 ee       	ldi	r30, 0xE2	; 226
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	10 82       	st	Z, r1
	stepper.direction = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     8b6:	13 82       	std	Z+3, r1	; 0x03
     8b8:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     8ba:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     8bc:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     8be:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     8c0:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     8c2:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	96 83       	std	Z+6, r25	; 0x06
     8ca:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     8cc:	80 e3       	ldi	r24, 0x30	; 48
     8ce:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     8d0:	84 e9       	ldi	r24, 0x94	; 148
     8d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     8d6:	e0 eb       	ldi	r30, 0xB0	; 176
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	82 60       	ori	r24, 0x02	; 2
     8de:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     8e0:	e0 e7       	ldi	r30, 0x70	; 112
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     8ea:	e1 eb       	ldi	r30, 0xB1	; 177
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	87 60       	ori	r24, 0x07	; 7
     8f2:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     8f4:	78 94       	sei
     8f6:	08 95       	ret

000008f8 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	86 1b       	sub	r24, r22
     8fc:	91 09       	sbc	r25, r1
	if (steps >= 0)
     8fe:	52 f0       	brmi	.+20     	; 0x914 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     900:	85 36       	cpi	r24, 0x65	; 101
     902:	91 05       	cpc	r25, r1
     904:	8c f0       	brlt	.+34     	; 0x928 <STEPPER_NumSteps+0x30>
     906:	24 e6       	ldi	r18, 0x64	; 100
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	a9 01       	movw	r20, r18
     90c:	48 1b       	sub	r20, r24
     90e:	59 0b       	sbc	r21, r25
     910:	ca 01       	movw	r24, r20
     912:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     914:	8c 39       	cpi	r24, 0x9C	; 156
     916:	5f ef       	ldi	r21, 0xFF	; 255
     918:	95 07       	cpc	r25, r21
     91a:	34 f4       	brge	.+12     	; 0x928 <STEPPER_NumSteps+0x30>
     91c:	2c e9       	ldi	r18, 0x9C	; 156
     91e:	3f ef       	ldi	r19, 0xFF	; 255
     920:	a9 01       	movw	r20, r18
     922:	48 1b       	sub	r20, r24
     924:	59 0b       	sbc	r21, r25
     926:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     928:	08 95       	ret

0000092a <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     92e:	c2 ee       	ldi	r28, 0xE2	; 226
     930:	d2 e0       	ldi	r29, 0x02	; 2
     932:	6c 81       	ldd	r22, Y+4	; 0x04
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	df df       	rcall	.-66     	; 0x8f8 <STEPPER_NumSteps>
     93a:	9e 83       	std	Y+6, r25	; 0x06
     93c:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     93e:	6a 81       	ldd	r22, Y+2	; 0x02
     940:	7b 81       	ldd	r23, Y+3	; 0x03
     942:	88 85       	ldd	r24, Y+8	; 0x08
     944:	d9 df       	rcall	.-78     	; 0x8f8 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     946:	2d 81       	ldd	r18, Y+5	; 0x05
     948:	3e 81       	ldd	r19, Y+6	; 0x06
     94a:	33 23       	and	r19, r19
     94c:	14 f4       	brge	.+4      	; 0x952 <STEPPER_Rotate+0x28>
     94e:	28 e0       	ldi	r18, 0x08	; 8
     950:	01 c0       	rjmp	.+2      	; 0x954 <STEPPER_Rotate+0x2a>
     952:	24 e0       	ldi	r18, 0x04	; 4
     954:	e2 ee       	ldi	r30, 0xE2	; 226
     956:	f2 e0       	ldi	r31, 0x02	; 2
     958:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     95a:	45 81       	ldd	r20, Z+5	; 0x05
     95c:	56 81       	ldd	r21, Z+6	; 0x06
     95e:	84 9f       	mul	r24, r20
     960:	90 01       	movw	r18, r0
     962:	85 9f       	mul	r24, r21
     964:	30 0d       	add	r19, r0
     966:	94 9f       	mul	r25, r20
     968:	30 0d       	add	r19, r0
     96a:	11 24       	eor	r1, r1
     96c:	83 2f       	mov	r24, r19
     96e:	80 95       	com	r24
     970:	88 1f       	adc	r24, r24
     972:	88 27       	eor	r24, r24
     974:	88 1f       	adc	r24, r24
     976:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     978:	85 81       	ldd	r24, Z+5	; 0x05
     97a:	96 81       	ldd	r25, Z+6	; 0x06
     97c:	99 23       	and	r25, r25
     97e:	1c f4       	brge	.+6      	; 0x986 <STEPPER_Rotate+0x5c>
     980:	91 95       	neg	r25
     982:	81 95       	neg	r24
     984:	91 09       	sbc	r25, r1
     986:	e2 ee       	ldi	r30, 0xE2	; 226
     988:	f2 e0       	ldi	r31, 0x02	; 2
     98a:	96 83       	std	Z+6, r25	; 0x06
     98c:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     98e:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	08 95       	ret

00000996 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
	cli();
     99a:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	c2 ee       	ldi	r28, 0xE2	; 226
     9a0:	d2 e0       	ldi	r29, 0x02	; 2
     9a2:	9b 83       	std	Y+3, r25	; 0x03
     9a4:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     9a6:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     9a8:	c0 df       	rcall	.-128    	; 0x92a <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     9aa:	eb 85       	ldd	r30, Y+11	; 0x0b
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	eb 5e       	subi	r30, 0xEB	; 235
     9b0:	fe 4f       	sbci	r31, 0xFE	; 254
     9b2:	80 81       	ld	r24, Z
     9b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     9b8:	78 94       	sei
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	0b b6       	in	r0, 0x3b	; 59
     9cc:	0f 92       	push	r0
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <__vector_13+0x24>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <__vector_13+0x26>
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     9ea:	86 e3       	ldi	r24, 0x36	; 54
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	9e e2       	ldi	r25, 0x2E	; 46
     9f4:	ad e2       	ldi	r26, 0x2D	; 45
     9f6:	b5 e3       	ldi	r27, 0x35	; 53
     9f8:	89 83       	std	Y+1, r24	; 0x01
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	ab 83       	std	Y+3, r26	; 0x03
     9fe:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     a00:	e2 ee       	ldi	r30, 0xE2	; 226
     a02:	f2 e0       	ldi	r31, 0x02	; 2
     a04:	87 81       	ldd	r24, Z+7	; 0x07
     a06:	25 81       	ldd	r18, Z+5	; 0x05
     a08:	36 81       	ldd	r19, Z+6	; 0x06
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	82 17       	cp	r24, r18
     a0e:	93 07       	cpc	r25, r19
     a10:	0c f0       	brlt	.+2      	; 0xa14 <__vector_13+0x54>
     a12:	5a c0       	rjmp	.+180    	; 0xac8 <__vector_13+0x108>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     a14:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <stepper+0x1>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	51 f4       	brne	.+20     	; 0xa30 <__vector_13+0x70>
     a1c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <stepper>
     a20:	e1 e0       	ldi	r30, 0x01	; 1
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ec 0f       	add	r30, r28
     a26:	fd 1f       	adc	r31, r29
     a28:	e8 0f       	add	r30, r24
     a2a:	f1 1d       	adc	r31, r1
     a2c:	80 81       	ld	r24, Z
     a2e:	0d c0       	rjmp	.+26     	; 0xa4a <__vector_13+0x8a>
     a30:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <stepper>
     a34:	e3 e0       	ldi	r30, 0x03	; 3
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	e8 1b       	sub	r30, r24
     a3a:	f1 09       	sbc	r31, r1
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	8c 0f       	add	r24, r28
     a42:	9d 1f       	adc	r25, r29
     a44:	e8 0f       	add	r30, r24
     a46:	f9 1f       	adc	r31, r25
     a48:	80 81       	ld	r24, Z
     a4a:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     a4c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <stepper>
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	21 f0       	breq	.+8      	; 0xa5c <__vector_13+0x9c>
     a54:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <stepper>
     a58:	8f 5f       	subi	r24, 0xFF	; 255
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <__vector_13+0x9e>
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	e2 ee       	ldi	r30, 0xE2	; 226
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	80 83       	st	Z, r24

		stepper._currentStep++;
     a64:	87 81       	ldd	r24, Z+7	; 0x07
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     a6a:	85 81       	ldd	r24, Z+5	; 0x05
     a6c:	96 81       	ldd	r25, Z+6	; 0x06
     a6e:	27 81       	ldd	r18, Z+7	; 0x07
     a70:	82 1b       	sub	r24, r18
     a72:	91 09       	sbc	r25, r1
     a74:	06 97       	sbiw	r24, 0x06	; 6
     a76:	74 f4       	brge	.+28     	; 0xa94 <__vector_13+0xd4>
     a78:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <stepper+0xb>
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	eb 5e       	subi	r30, 0xEB	; 235
     a80:	fe 4f       	sbci	r31, 0xFE	; 254
     a82:	80 81       	ld	r24, Z
     a84:	84 39       	cpi	r24, 0x94	; 148
     a86:	30 f4       	brcc	.+12     	; 0xa94 <__vector_13+0xd4>
		{
			stepper._accellStep--;
     a88:	e2 ee       	ldi	r30, 0xE2	; 226
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	83 85       	ldd	r24, Z+11	; 0x0b
     a8e:	81 50       	subi	r24, 0x01	; 1
     a90:	83 87       	std	Z+11, r24	; 0x0b
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <__vector_13+0xf6>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     a94:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <stepper+0x7>
     a98:	86 30       	cpi	r24, 0x06	; 6
     a9a:	68 f0       	brcs	.+26     	; 0xab6 <__vector_13+0xf6>
     a9c:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <stepper+0xb>
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	eb 5e       	subi	r30, 0xEB	; 235
     aa4:	fe 4f       	sbci	r31, 0xFE	; 254
     aa6:	80 81       	ld	r24, Z
     aa8:	81 34       	cpi	r24, 0x41	; 65
     aaa:	28 f0       	brcs	.+10     	; 0xab6 <__vector_13+0xf6>
		{
			stepper._accellStep++;
     aac:	e2 ee       	ldi	r30, 0xE2	; 226
     aae:	f2 e0       	ldi	r31, 0x02	; 2
     ab0:	83 85       	ldd	r24, Z+11	; 0x0b
     ab2:	8f 5f       	subi	r24, 0xFF	; 255
     ab4:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     ab6:	e0 91 ed 02 	lds	r30, 0x02ED	; 0x8002ed <stepper+0xb>
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	eb 5e       	subi	r30, 0xEB	; 235
     abe:	fe 4f       	sbci	r31, 0xFE	; 254
     ac0:	80 81       	ld	r24, Z
     ac2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ac6:	29 c0       	rjmp	.+82     	; 0xb1a <__vector_13+0x15a>
	}

	else if (stepper._currentStep == stepper._targetStep)
     ac8:	e2 ee       	ldi	r30, 0xE2	; 226
     aca:	f2 e0       	ldi	r31, 0x02	; 2
     acc:	87 81       	ldd	r24, Z+7	; 0x07
     ace:	25 81       	ldd	r18, Z+5	; 0x05
     ad0:	36 81       	ldd	r19, Z+6	; 0x06
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	82 17       	cp	r24, r18
     ad6:	93 07       	cpc	r25, r19
     ad8:	01 f5       	brne	.+64     	; 0xb1a <__vector_13+0x15a>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     ae0:	81 85       	ldd	r24, Z+9	; 0x09
     ae2:	88 23       	and	r24, r24
     ae4:	19 f0       	breq	.+6      	; 0xaec <__vector_13+0x12c>
     ae6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <stepper+0xb>
     aea:	01 c0       	rjmp	.+2      	; 0xaee <__vector_13+0x12e>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	a2 ee       	ldi	r26, 0xE2	; 226
     af0:	b2 e0       	ldi	r27, 0x02	; 2
     af2:	1b 96       	adiw	r26, 0x0b	; 11
     af4:	8c 93       	st	X, r24
     af6:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     af8:	1b 96       	adiw	r26, 0x0b	; 11
     afa:	ec 91       	ld	r30, X
     afc:	1b 97       	sbiw	r26, 0x0b	; 11
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	eb 5e       	subi	r30, 0xEB	; 235
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	80 81       	ld	r24, Z
     b06:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     b0a:	19 96       	adiw	r26, 0x09	; 9
     b0c:	8c 91       	ld	r24, X
     b0e:	81 11       	cpse	r24, r1
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <__vector_13+0x156>
     b12:	82 b1       	in	r24, 0x02	; 2
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <__vector_13+0x158>
     b16:	82 b1       	in	r24, 0x02	; 2
     b18:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
     b1a:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <stepper+0xa>
     b1e:	81 11       	cpse	r24, r1
     b20:	0f c0       	rjmp	.+30     	; 0xb40 <__vector_13+0x180>
	{
		if ((PINE & 0x08) == 0)
     b22:	63 99       	sbic	0x0c, 3	; 12
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <__vector_13+0x180>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
     b26:	e2 ee       	ldi	r30, 0xE2	; 226
     b28:	f2 e0       	ldi	r31, 0x02	; 2
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     b2e:	10 82       	st	Z, r1
			stepper.direction = 1;
     b30:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     b32:	13 82       	std	Z+3, r1	; 0x03
     b34:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     b36:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     b38:	16 82       	std	Z+6, r1	; 0x06
     b3a:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     b3c:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     b3e:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0b be       	out	0x3b, r0	; 59
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     b70:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     b72:	e1 e6       	ldi	r30, 0x61	; 97
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 e8       	ldi	r24, 0x80	; 128
     b78:	80 83       	st	Z, r24
	CLKPR = 0;
     b7a:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     b7c:	da d2       	rcall	.+1460   	; 0x1132 <UART_Init>
	GPIO_Init();
     b7e:	8c dd       	rcall	.-1256   	; 0x698 <GPIO_Init>
	TIMER_Init();
     b80:	5d d2       	rcall	.+1210   	; 0x103c <TIMER_Init>
	PWM_Init();
     b82:	75 de       	rcall	.-790    	; 0x86e <PWM_Init>
     b84:	a8 da       	rcall	.-2736   	; 0xd6 <ADC_Init>
	ADC_Init();
     b86:	91 de       	rcall	.-734    	; 0x8aa <STEPPER_Init>
     b88:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <g_ADCCount+0x1>
	STEPPER_Init();
     b8c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     b90:	84 e1       	ldi	r24, 0x14	; 20
     b92:	ed e7       	ldi	r30, 0x7D	; 125
     b94:	f2 e0       	ldi	r31, 0x02	; 2
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     b96:	df 01       	movw	r26, r30
     b98:	1d 92       	st	X+, r1
     b9a:	8a 95       	dec	r24
     b9c:	e9 f7       	brne	.-6      	; 0xb98 <SYS_Init+0x2e>
     b9e:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <HEAD+0x1>
     ba2:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <HEAD>

	HEAD = NULL;
     ba6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <TAIL+0x1>
     baa:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <TAIL>
	TAIL = NULL;
     bae:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <STAGE1+0x1>
     bb2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <STAGE1>
	STAGE1 = NULL;
     bb6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <STAGE2+0x1>
     bba:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <STAGE2>
	STAGE2 = NULL;
     bbe:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <FRONT+0x1>
     bc2:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <FRONT>
	FRONT = NULL;
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	89 ee       	ldi	r24, 0xE9	; 233
     bce:	9d ef       	ldi	r25, 0xFD	; 253
     bd0:	e9 dc       	rcall	.-1582   	; 0x5a4 <LL_ItemInit>
     bd2:	02 dd       	rcall	.-1532   	; 0x5d8 <LL_ItemListInit>
     bd4:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     bd8:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <HEAD>
     bdc:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <FRONT+0x1>
     be0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <FRONT>
	FRONT = HEAD;
     be4:	ca ef       	ldi	r28, 0xFA	; 250
     be6:	08 ee       	ldi	r16, 0xE8	; 232
     be8:	1d ef       	ldi	r17, 0xFD	; 253
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     bee:	6c 2f       	mov	r22, r28
     bf0:	c8 01       	movw	r24, r16
     bf2:	d8 dc       	rcall	.-1616   	; 0x5a4 <LL_ItemInit>
     bf4:	bc 01       	movw	r22, r24
     bf6:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     bfa:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     bfe:	00 dd       	rcall	.-1536   	; 0x600 <LL_AddBack>
     c00:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <TAIL+0x1>
     c04:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <TAIL>
     c08:	01 50       	subi	r16, 0x01	; 1
     c0a:	11 09       	sbc	r17, r1
     c0c:	c1 50       	subi	r28, 0x01	; 1
     c0e:	cb 3c       	cpi	r28, 0xCB	; 203
     c10:	61 f7       	brne	.-40     	; 0xbea <SYS_Init+0x80>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     c12:	05 e0       	ldi	r16, 0x05	; 5
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     c1a:	6a ef       	ldi	r22, 0xFA	; 250
     c1c:	88 ee       	ldi	r24, 0xE8	; 232
     c1e:	9d ef       	ldi	r25, 0xFD	; 253
     c20:	c1 dc       	rcall	.-1662   	; 0x5a4 <LL_ItemInit>
     c22:	bc 01       	movw	r22, r24
     c24:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <HEAD>
		LL_AddBack(HEAD,initNode);
     c28:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <HEAD+0x1>
     c2c:	e9 dc       	rcall	.-1582   	; 0x600 <LL_AddBack>
     c2e:	01 50       	subi	r16, 0x01	; 1
     c30:	11 09       	sbc	r17, r1
     c32:	89 f7       	brne	.-30     	; 0xc16 <SYS_Init+0xac>
     c34:	85 e5       	ldi	r24, 0x55	; 85
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     c36:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     c38:	94 d2       	rcall	.+1320   	; 0x1162 <UART_SendString>
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16

} // SYS_Init
     c40:	08 95       	ret

00000c42 <SYS_Pause>:
     c42:	3f 92       	push	r3
     c44:	4f 92       	push	r4
     c46:	5f 92       	push	r5

void SYS_Pause(char str[20])
{
     c48:	6f 92       	push	r6
     c4a:	7f 92       	push	r7
     c4c:	8f 92       	push	r8
     c4e:	9f 92       	push	r9
     c50:	af 92       	push	r10
     c52:	bf 92       	push	r11
     c54:	cf 92       	push	r12
     c56:	df 92       	push	r13
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	ca 5f       	subi	r28, 0xFA	; 250
     c6a:	d1 09       	sbc	r29, r1
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	98 2e       	mov	r9, r24
     c78:	89 2e       	mov	r8, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     c7a:	f8 94       	cli

	// Turn off motor
	PWM(0);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	00 de       	rcall	.-1024   	; 0x882 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     c82:	00 91 79 02 	lds	r16, 0x0279	; 0x800279 <FRONT>
     c86:	10 91 7a 02 	lds	r17, 0x027A	; 0x80027a <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	8b e6       	ldi	r24, 0x6B	; 107
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	7c 01       	movw	r14, r24
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	8f d3       	rcall	.+1822   	; 0x13c0 <sprintf>
	UART_SendString(buffer);
     ca2:	c7 01       	movw	r24, r14
     ca4:	5e d2       	rcall	.+1212   	; 0x1162 <UART_SendString>
     ca6:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     cb4:	f1 2c       	mov	r15, r1
     cb6:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     cb8:	f6 e8       	ldi	r31, 0x86	; 134
     cba:	af 2e       	mov	r10, r31
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	bf 2e       	mov	r11, r31
     cc0:	f0 2d       	mov	r31, r0
     cc2:	6e 01       	movw	r12, r28
     cc4:	97 e9       	ldi	r25, 0x97	; 151
     cc6:	c9 0e       	add	r12, r25
     cc8:	d1 1c       	adc	r13, r1
     cca:	30 c0       	rjmp	.+96     	; 0xd2c <SYS_Pause+0xea>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     ccc:	af ef       	ldi	r26, 0xFF	; 255
	{
		char listbuff[100];
		c++;
     cce:	ea 1a       	sub	r14, r26
     cd0:	fa 0a       	sbc	r15, r26
     cd2:	d8 01       	movw	r26, r16
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
					 ((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	44 80       	ldd	r4, Z+4	; 0x04
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     cda:	32 80       	ldd	r3, Z+2	; 0x02
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
     cdc:	c8 01       	movw	r24, r16
     cde:	d7 dc       	rcall	.-1618   	; 0x68e <LL_GetStatus>
     ce0:	58 2e       	mov	r5, r24
     ce2:	c8 01       	movw	r24, r16
     ce4:	af dc       	rcall	.-1698   	; 0x644 <LL_GetClass>
     ce6:	68 2e       	mov	r6, r24
     ce8:	c8 01       	movw	r24, r16
     cea:	b7 dc       	rcall	.-1682   	; 0x65a <LL_GetMag>
     cec:	78 2e       	mov	r7, r24
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u, adT: %u, mT: %u\r\n",
     cee:	c8 01       	movw	r24, r16
     cf0:	ae dc       	rcall	.-1700   	; 0x64e <LL_GetRefl>
     cf2:	1f 92       	push	r1
     cf4:	4f 92       	push	r4
     cf6:	1f 92       	push	r1
     cf8:	3f 92       	push	r3
     cfa:	1f 92       	push	r1
     cfc:	5f 92       	push	r5
     cfe:	1f 92       	push	r1
     d00:	6f 92       	push	r6
     d02:	1f 92       	push	r1
     d04:	7f 92       	push	r7
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	ff 92       	push	r15
     d0c:	ef 92       	push	r14
     d0e:	bf 92       	push	r11
     d10:	af 92       	push	r10
     d12:	df 92       	push	r13
     d14:	cf 92       	push	r12
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp),
					 ((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
		UART_SendString(listbuff);
     d16:	54 d3       	rcall	.+1704   	; 0x13c0 <sprintf>
     d18:	c6 01       	movw	r24, r12
     d1a:	23 d2       	rcall	.+1094   	; 0x1162 <UART_SendString>
		temp = LL_Next(temp);	
     d1c:	c8 01       	movw	r24, r16
     d1e:	6c dc       	rcall	.-1832   	; 0x5f8 <LL_Next>
     d20:	8c 01       	movw	r16, r24
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     d2c:	c8 01       	movw	r24, r16
     d2e:	8a dc       	rcall	.-1772   	; 0x644 <LL_GetClass>
     d30:	85 30       	cpi	r24, 0x05	; 5
     d32:	61 f6       	brne	.-104    	; 0xccc <SYS_Pause+0x8a>
     d34:	0f 2e       	mov	r0, r31
     d36:	f7 e9       	ldi	r31, 0x97	; 151
     d38:	cf 2e       	mov	r12, r31
     d3a:	f2 e0       	ldi	r31, 0x02	; 2
     d3c:	df 2e       	mov	r13, r31
     d3e:	f0 2d       	mov	r31, r0
     d40:	00 e0       	ldi	r16, 0x00	; 0
     d42:	10 e0       	ldi	r17, 0x00	; 0
     d44:	0f 2e       	mov	r0, r31
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "FROM: %s\r\nTimer %d State: %u\r\n",str, i, _timer[i].state);
     d46:	fb ec       	ldi	r31, 0xCB	; 203
     d48:	af 2e       	mov	r10, r31
     d4a:	f1 e0       	ldi	r31, 0x01	; 1
     d4c:	bf 2e       	mov	r11, r31
     d4e:	f0 2d       	mov	r31, r0
     d50:	7e 01       	movw	r14, r28
     d52:	f7 e9       	ldi	r31, 0x97	; 151
     d54:	ef 0e       	add	r14, r31
     d56:	f1 1c       	adc	r15, r1
     d58:	d6 01       	movw	r26, r12
     d5a:	18 96       	adiw	r26, 0x08	; 8
     d5c:	8c 91       	ld	r24, X
     d5e:	1f 92       	push	r1
     d60:	8f 93       	push	r24
     d62:	1f 93       	push	r17
     d64:	0f 93       	push	r16
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	bf 92       	push	r11
     d6c:	af 92       	push	r10
     d6e:	ff 92       	push	r15
     d70:	ef 92       	push	r14
     d72:	26 d3       	rcall	.+1612   	; 0x13c0 <sprintf>
		UART_SendString(statebuff);
     d74:	c7 01       	movw	r24, r14
     d76:	f5 d1       	rcall	.+1002   	; 0x1162 <UART_SendString>
     d78:	0f 5f       	subi	r16, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	b9 e0       	ldi	r27, 0x09	; 9
     d7e:	cb 0e       	add	r12, r27
     d80:	d1 1c       	adc	r13, r1
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	07 30       	cpi	r16, 0x07	; 7
     d8e:	11 05       	cpc	r17, r1
     d90:	19 f7       	brne	.-58     	; 0xd58 <SYS_Pause+0x116>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     d92:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <STAGE2>
     d96:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     d9a:	59 dc       	rcall	.-1870   	; 0x64e <LL_GetRefl>
     d9c:	48 2e       	mov	r4, r24
     d9e:	39 2e       	mov	r3, r25
     da0:	60 90 df 02 	lds	r6, 0x02DF	; 0x8002df <STAGE2>
     da4:	50 90 e0 02 	lds	r5, 0x02E0	; 0x8002e0 <STAGE2+0x1>
     da8:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <STAGE1>
     dac:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <STAGE1+0x1>
     db0:	54 dc       	rcall	.-1880   	; 0x65a <LL_GetMag>
     db2:	78 2e       	mov	r7, r24
     db4:	90 90 95 02 	lds	r9, 0x0295	; 0x800295 <STAGE1>
     db8:	80 90 96 02 	lds	r8, 0x0296	; 0x800296 <STAGE1+0x1>
     dbc:	00 91 7b 02 	lds	r16, 0x027B	; 0x80027b <TAIL>
     dc0:	10 91 7c 02 	lds	r17, 0x027C	; 0x80027c <TAIL+0x1>
     dc4:	d8 01       	movw	r26, r16
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	bc 90       	ld	r11, X
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	ac 90       	ld	r10, X
     dd0:	d0 90 79 02 	lds	r13, 0x0279	; 0x800279 <FRONT>
     dd4:	c0 90 7a 02 	lds	r12, 0x027A	; 0x80027a <FRONT+0x1>
     dd8:	f0 90 77 02 	lds	r15, 0x0277	; 0x800277 <HEAD>
     ddc:	e0 90 78 02 	lds	r14, 0x0278	; 0x800278 <HEAD+0x1>
     de0:	8f 2d       	mov	r24, r15
     de2:	9e 2d       	mov	r25, r14
     de4:	1e dc       	rcall	.-1988   	; 0x622 <LL_Size>
     de6:	3f 92       	push	r3
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	1f 92       	push	r1
     df0:	7f 92       	push	r7
     df2:	8f 92       	push	r8
     df4:	9f 92       	push	r9
     df6:	af 92       	push	r10
     df8:	bf 92       	push	r11
     dfa:	cf 92       	push	r12
     dfc:	df 92       	push	r13
     dfe:	1f 93       	push	r17
     e00:	0f 93       	push	r16
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	1f 92       	push	r1
     e08:	8f 93       	push	r24
     e0a:	8a ee       	ldi	r24, 0xEA	; 234
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	9f 93       	push	r25
     e10:	8f 93       	push	r24
     e12:	8e 01       	movw	r16, r28
     e14:	0b 59       	subi	r16, 0x9B	; 155
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	1f 93       	push	r17
     e1a:	0f 93       	push	r16
	UART_SendString(anotherbuff);
     e1c:	d1 d2       	rcall	.+1442   	; 0x13c0 <sprintf>
     e1e:	c8 01       	movw	r24, r16
     e20:	a0 d1       	rcall	.+832    	; 0x1162 <UART_SendString>
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     e2c:	89 b1       	in	r24, 0x09	; 9
     e2e:	83 70       	andi	r24, 0x03	; 3
     e30:	e9 f7       	brne	.-6      	; 0xe2c <SYS_Pause+0x1ea>
		{
			UART_SendString("Starting System!\r\n");
     e32:	89 e2       	ldi	r24, 0x29	; 41
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	95 d1       	rcall	.+810    	; 0x1162 <UART_SendString>
     e38:	80 e8       	ldi	r24, 0x80	; 128
			PWM(0x80);
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	22 dd       	rcall	.-1468   	; 0x882 <PWM>
     e3e:	78 94       	sei
     e40:	c6 50       	subi	r28, 0x06	; 6
			sei();
     e42:	df 4f       	sbci	r29, 0xFF	; 255
			return;
		}
	}
} // SYS_Pause
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	df 90       	pop	r13
     e5c:	cf 90       	pop	r12
     e5e:	bf 90       	pop	r11
     e60:	af 90       	pop	r10
     e62:	9f 90       	pop	r9
     e64:	8f 90       	pop	r8
     e66:	7f 90       	pop	r7
     e68:	6f 90       	pop	r6
     e6a:	5f 90       	pop	r5
     e6c:	4f 90       	pop	r4
     e6e:	3f 90       	pop	r3
     e70:	08 95       	ret

00000e72 <SYS_Calibrate>:
     e72:	7f 92       	push	r7
     e74:	8f 92       	push	r8

void SYS_Calibrate(char str[20])
{
     e76:	9f 92       	push	r9
     e78:	af 92       	push	r10
     e7a:	bf 92       	push	r11
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	c4 56       	subi	r28, 0x64	; 100
     e92:	d1 09       	sbc	r29, r1
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	7c 01       	movw	r14, r24
	//
	cli();
     ea0:	f8 94       	cli
	PWM(0);
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	ed dc       	rcall	.-1574   	; 0x882 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     ea8:	00 91 79 02 	lds	r16, 0x0279	; 0x800279 <FRONT>
     eac:	10 91 7a 02 	lds	r17, 0x027A	; 0x80027a <FRONT+0x1>
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
     eb0:	c7 01       	movw	r24, r14
     eb2:	57 d1       	rcall	.+686    	; 0x1162 <UART_SendString>
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     eb4:	e1 2c       	mov	r14, r1
     eb6:	f1 2c       	mov	r15, r1
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     eb8:	0f 2e       	mov	r0, r31
     eba:	f1 e4       	ldi	r31, 0x41	; 65
     ebc:	af 2e       	mov	r10, r31
     ebe:	f2 e0       	ldi	r31, 0x02	; 2
     ec0:	bf 2e       	mov	r11, r31
     ec2:	f0 2d       	mov	r31, r0
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	6c 01       	movw	r12, r24
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     eca:	26 c0       	rjmp	.+76     	; 0xf18 <SYS_Calibrate+0xa6>
	{
		char listbuff[100];
		c++;
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	e9 1a       	sub	r14, r25
     ed0:	f9 0a       	sbc	r15, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
				c, LL_GetRefl(temp), LL_GetMag(temp),
				((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
     ed2:	d8 01       	movw	r26, r16
     ed4:	ed 91       	ld	r30, X+
     ed6:	fc 91       	ld	r31, X
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     ed8:	74 80       	ldd	r7, Z+4	; 0x04
				c, LL_GetRefl(temp), LL_GetMag(temp),
     eda:	82 80       	ldd	r8, Z+2	; 0x02
     edc:	c8 01       	movw	r24, r16
     ede:	bd db       	rcall	.-2182   	; 0x65a <LL_GetMag>
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, adT: %u, mT: %u\r\n",
     ee0:	98 2e       	mov	r9, r24
     ee2:	c8 01       	movw	r24, r16
     ee4:	b4 db       	rcall	.-2200   	; 0x64e <LL_GetRefl>
     ee6:	1f 92       	push	r1
     ee8:	7f 92       	push	r7
     eea:	1f 92       	push	r1
     eec:	8f 92       	push	r8
     eee:	1f 92       	push	r1
     ef0:	9f 92       	push	r9
     ef2:	9f 93       	push	r25
     ef4:	8f 93       	push	r24
     ef6:	ff 92       	push	r15
     ef8:	ef 92       	push	r14
     efa:	bf 92       	push	r11
     efc:	af 92       	push	r10
     efe:	df 92       	push	r13
     f00:	cf 92       	push	r12
				c, LL_GetRefl(temp), LL_GetMag(temp),
				((itemNode*)temp->node)->adTick,((itemNode*)temp->node)->magTick);
		UART_SendString(listbuff);
     f02:	5e d2       	rcall	.+1212   	; 0x13c0 <sprintf>
     f04:	c6 01       	movw	r24, r12
     f06:	2d d1       	rcall	.+602    	; 0x1162 <UART_SendString>
		temp = LL_Next(temp);
     f08:	c8 01       	movw	r24, r16
     f0a:	76 db       	rcall	.-2324   	; 0x5f8 <LL_Next>
     f0c:	8c 01       	movw	r16, r24
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     f18:	c8 01       	movw	r24, r16
     f1a:	b9 db       	rcall	.-2190   	; 0x68e <LL_GetStatus>
     f1c:	81 11       	cpse	r24, r1
     f1e:	d6 cf       	rjmp	.-84     	; 0xecc <SYS_Calibrate+0x5a>
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     f20:	89 b1       	in	r24, 0x09	; 9
     f22:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
     f24:	e9 f7       	brne	.-6      	; 0xf20 <SYS_Calibrate+0xae>
     f26:	89 e2       	ldi	r24, 0x29	; 41
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	1b d1       	rcall	.+566    	; 0x1162 <UART_SendString>
			PWM(0x80);
     f2c:	80 e8       	ldi	r24, 0x80	; 128
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a8 dc       	rcall	.-1712   	; 0x882 <PWM>
     f32:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <g_PauseRequest>
			g_PauseRequest = 0;
     f36:	78 94       	sei
			sei();
     f38:	cc 59       	subi	r28, 0x9C	; 156
			break;
		}
	}
	return;
} // SYS_Calibrate
     f3a:	df 4f       	sbci	r29, 0xFF	; 255
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	7f 90       	pop	r7
     f60:	08 95       	ret

00000f62 <__vector_17>:
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
     f62:	1f 92       	push	r1
     f64:	0f 92       	push	r0
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	0f 92       	push	r0
     f6a:	11 24       	eor	r1, r1
     f6c:	0b b6       	in	r0, 0x3b	; 59
     f6e:	0f 92       	push	r0
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
     f94:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_timer_tick>
     f98:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <_timer_tick+0x1>
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <_timer_tick+0x1>
     fa2:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <_timer_tick>
     fa6:	c7 e9       	ldi	r28, 0x97	; 151
     fa8:	d2 e0       	ldi	r29, 0x02	; 2
     faa:	0f 2e       	mov	r0, r31
     fac:	ff ed       	ldi	r31, 0xDF	; 223
     fae:	ef 2e       	mov	r14, r31
     fb0:	f2 e0       	ldi	r31, 0x02	; 2
     fb2:	ff 2e       	mov	r15, r31
     fb4:	f0 2d       	mov	r31, r0
     fb6:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
     fb8:	ec 81       	ldd	r30, Y+4	; 0x04
     fba:	fd 81       	ldd	r31, Y+5	; 0x05
     fbc:	30 97       	sbiw	r30, 0x00	; 0
     fbe:	09 f1       	breq	.+66     	; 0x1002 <__vector_17+0xa0>
     fc0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <_timer_tick>
     fc4:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <_timer_tick+0x1>
     fc8:	28 81       	ld	r18, Y
     fca:	39 81       	ldd	r19, Y+1	; 0x01
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	c1 f4       	brne	.+48     	; 0x1002 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
     fd2:	88 85       	ldd	r24, Y+8	; 0x08
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	19 f4       	brne	.+6      	; 0xfde <__vector_17+0x7c>
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
     fde:	d8 01       	movw	r26, r16
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	8d 91       	ld	r24, X+
     fe4:	9c 91       	ld	r25, X
     fe6:	13 97       	sbiw	r26, 0x03	; 3
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	41 f0       	breq	.+16     	; 0xffc <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
     fec:	2d 91       	ld	r18, X+
     fee:	3c 91       	ld	r19, X
     ff0:	11 97       	sbiw	r26, 0x01	; 1
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	8d 93       	st	X+, r24
     ff8:	9c 93       	st	X, r25
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
     ffc:	f8 01       	movw	r30, r16
     ffe:	15 82       	std	Z+5, r1	; 0x05
    1000:	14 82       	std	Z+4, r1	; 0x04
    1002:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    1004:	ce 15       	cp	r28, r14
    1006:	df 05       	cpc	r29, r15
    1008:	b1 f6       	brne	.-84     	; 0xfb6 <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	bf 91       	pop	r27
    1014:	af 91       	pop	r26
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	7f 91       	pop	r23
    101c:	6f 91       	pop	r22
    101e:	5f 91       	pop	r21
    1020:	4f 91       	pop	r20
    1022:	3f 91       	pop	r19
    1024:	2f 91       	pop	r18
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	0f 90       	pop	r0
    1030:	0b be       	out	0x3b, r0	; 59
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    103c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1040:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    1044:	88 e4       	ldi	r24, 0x48	; 72
    1046:	98 e0       	ldi	r25, 0x08	; 8
    1048:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    104c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1050:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1054:	89 e0       	ldi	r24, 0x09	; 9
    1056:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1060:	88 e4       	ldi	r24, 0x48	; 72
    1062:	e7 e9       	ldi	r30, 0x97	; 151
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	df 01       	movw	r26, r30
    1068:	1d 92       	st	X+, r1
    106a:	8a 95       	dec	r24
    106c:	e9 f7       	brne	.-6      	; 0x1068 <TIMER_Init+0x2c>
    106e:	08 95       	ret

00001070 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    107a:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <_timer+0x4>
    107e:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <_timer+0x5>
    1082:	67 2b       	or	r22, r23
    1084:	09 f4       	brne	.+2      	; 0x1088 <TIMER_Create+0x18>
    1086:	49 c0       	rjmp	.+146    	; 0x111a <TIMER_Create+0xaa>
    1088:	e7 e9       	ldi	r30, 0x97	; 151
    108a:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    108c:	a1 e0       	ldi	r26, 0x01	; 1
    108e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1090:	c5 85       	ldd	r28, Z+13	; 0x0d
    1092:	d6 85       	ldd	r29, Z+14	; 0x0e
    1094:	cd 2b       	or	r28, r29
    1096:	09 f4       	brne	.+2      	; 0x109a <TIMER_Create+0x2a>
    1098:	42 c0       	rjmp	.+132    	; 0x111e <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	39 96       	adiw	r30, 0x09	; 9
    109e:	a8 30       	cpi	r26, 0x08	; 8
    10a0:	b1 05       	cpc	r27, r1
    10a2:	b1 f7       	brne	.-20     	; 0x1090 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    10aa:	fd 01       	movw	r30, r26
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ea 0f       	add	r30, r26
    10ba:	fb 1f       	adc	r31, r27
    10bc:	e9 56       	subi	r30, 0x69	; 105
    10be:	fd 4f       	sbci	r31, 0xFD	; 253
    10c0:	93 83       	std	Z+3, r25	; 0x03
    10c2:	82 83       	std	Z+2, r24	; 0x02
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    10c6:	fd 01       	movw	r30, r26
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	ea 0f       	add	r30, r26
    10d6:	fb 1f       	adc	r31, r27
    10d8:	e9 56       	subi	r30, 0x69	; 105
    10da:	fd 4f       	sbci	r31, 0xFD	; 253
    10dc:	13 82       	std	Z+3, r1	; 0x03
    10de:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    10e0:	fd 01       	movw	r30, r26
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ea 0f       	add	r30, r26
    10f0:	fb 1f       	adc	r31, r27
    10f2:	e9 56       	subi	r30, 0x69	; 105
    10f4:	fd 4f       	sbci	r31, 0xFD	; 253
    10f6:	55 83       	std	Z+5, r21	; 0x05
    10f8:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    10fa:	37 83       	std	Z+7, r19	; 0x07
    10fc:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    10fe:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <_timer_tick>
    1102:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <_timer_tick+0x1>
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	80 83       	st	Z, r24
			_timer[i].state = READY;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1112:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    1114:	8a 2f       	mov	r24, r26
    1116:	9b 2f       	mov	r25, r27
    1118:	07 c0       	rjmp	.+14     	; 0x1128 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    111e:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1120:	f8 94       	cli
		{
			if (periodic != 0) 
    1122:	01 2b       	or	r16, r17
    1124:	11 f6       	brne	.-124    	; 0x10aa <TIMER_Create+0x3a>
    1126:	cf cf       	rjmp	.-98     	; 0x10c6 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    1132:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    1136:	83 e3       	ldi	r24, 0x33	; 51
    1138:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    113c:	e9 ec       	ldi	r30, 0xC9	; 201
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	88 61       	ori	r24, 0x18	; 24
    1144:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    1146:	ea ec       	ldi	r30, 0xCA	; 202
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	86 60       	ori	r24, 0x06	; 6
    114e:	80 83       	st	Z, r24
    1150:	08 95       	ret

00001152 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    1152:	e8 ec       	ldi	r30, 0xC8	; 200
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	90 81       	ld	r25, Z
    1158:	95 ff       	sbrs	r25, 5
    115a:	fd cf       	rjmp	.-6      	; 0x1156 <UART_SendChar+0x4>
	UDR1 = c;
    115c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1160:	08 95       	ret

00001162 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1168:	88 81       	ld	r24, Y
    116a:	88 23       	and	r24, r24
    116c:	29 f0       	breq	.+10     	; 0x1178 <UART_SendString+0x16>
    116e:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1170:	f0 df       	rcall	.-32     	; 0x1152 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1172:	89 91       	ld	r24, Y+
    1174:	81 11       	cpse	r24, r1
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <malloc>:
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	91 05       	cpc	r25, r1
    118a:	10 f4       	brcc	.+4      	; 0x1190 <malloc+0x12>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <__flp>
    1194:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <__flp+0x1>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	30 97       	sbiw	r30, 0x00	; 0
    11a2:	19 f1       	breq	.+70     	; 0x11ea <malloc+0x6c>
    11a4:	40 81       	ld	r20, Z
    11a6:	51 81       	ldd	r21, Z+1	; 0x01
    11a8:	02 81       	ldd	r16, Z+2	; 0x02
    11aa:	13 81       	ldd	r17, Z+3	; 0x03
    11ac:	48 17       	cp	r20, r24
    11ae:	59 07       	cpc	r21, r25
    11b0:	c8 f0       	brcs	.+50     	; 0x11e4 <malloc+0x66>
    11b2:	84 17       	cp	r24, r20
    11b4:	95 07       	cpc	r25, r21
    11b6:	69 f4       	brne	.+26     	; 0x11d2 <malloc+0x54>
    11b8:	10 97       	sbiw	r26, 0x00	; 0
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <malloc+0x4a>
    11bc:	12 96       	adiw	r26, 0x02	; 2
    11be:	0c 93       	st	X, r16
    11c0:	12 97       	sbiw	r26, 0x02	; 2
    11c2:	13 96       	adiw	r26, 0x03	; 3
    11c4:	1c 93       	st	X, r17
    11c6:	27 c0       	rjmp	.+78     	; 0x1216 <malloc+0x98>
    11c8:	00 93 f0 02 	sts	0x02F0, r16	; 0x8002f0 <__flp>
    11cc:	10 93 f1 02 	sts	0x02F1, r17	; 0x8002f1 <__flp+0x1>
    11d0:	22 c0       	rjmp	.+68     	; 0x1216 <malloc+0x98>
    11d2:	21 15       	cp	r18, r1
    11d4:	31 05       	cpc	r19, r1
    11d6:	19 f0       	breq	.+6      	; 0x11de <malloc+0x60>
    11d8:	42 17       	cp	r20, r18
    11da:	53 07       	cpc	r21, r19
    11dc:	18 f4       	brcc	.+6      	; 0x11e4 <malloc+0x66>
    11de:	9a 01       	movw	r18, r20
    11e0:	bd 01       	movw	r22, r26
    11e2:	ef 01       	movw	r28, r30
    11e4:	df 01       	movw	r26, r30
    11e6:	f8 01       	movw	r30, r16
    11e8:	db cf       	rjmp	.-74     	; 0x11a0 <malloc+0x22>
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	f9 f0       	breq	.+62     	; 0x122e <malloc+0xb0>
    11f0:	28 1b       	sub	r18, r24
    11f2:	39 0b       	sbc	r19, r25
    11f4:	24 30       	cpi	r18, 0x04	; 4
    11f6:	31 05       	cpc	r19, r1
    11f8:	80 f4       	brcc	.+32     	; 0x121a <malloc+0x9c>
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	9b 81       	ldd	r25, Y+3	; 0x03
    11fe:	61 15       	cp	r22, r1
    1200:	71 05       	cpc	r23, r1
    1202:	21 f0       	breq	.+8      	; 0x120c <malloc+0x8e>
    1204:	fb 01       	movw	r30, r22
    1206:	93 83       	std	Z+3, r25	; 0x03
    1208:	82 83       	std	Z+2, r24	; 0x02
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <malloc+0x96>
    120c:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <__flp+0x1>
    1210:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <__flp>
    1214:	fe 01       	movw	r30, r28
    1216:	32 96       	adiw	r30, 0x02	; 2
    1218:	44 c0       	rjmp	.+136    	; 0x12a2 <malloc+0x124>
    121a:	fe 01       	movw	r30, r28
    121c:	e2 0f       	add	r30, r18
    121e:	f3 1f       	adc	r31, r19
    1220:	81 93       	st	Z+, r24
    1222:	91 93       	st	Z+, r25
    1224:	22 50       	subi	r18, 0x02	; 2
    1226:	31 09       	sbc	r19, r1
    1228:	39 83       	std	Y+1, r19	; 0x01
    122a:	28 83       	st	Y, r18
    122c:	3a c0       	rjmp	.+116    	; 0x12a2 <malloc+0x124>
    122e:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    1232:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    1236:	23 2b       	or	r18, r19
    1238:	41 f4       	brne	.+16     	; 0x124a <malloc+0xcc>
    123a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    123e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1242:	30 93 ef 02 	sts	0x02EF, r19	; 0x8002ef <__brkval+0x1>
    1246:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <__brkval>
    124a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    124e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1252:	21 15       	cp	r18, r1
    1254:	31 05       	cpc	r19, r1
    1256:	41 f4       	brne	.+16     	; 0x1268 <malloc+0xea>
    1258:	2d b7       	in	r18, 0x3d	; 61
    125a:	3e b7       	in	r19, 0x3e	; 62
    125c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1260:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1264:	24 1b       	sub	r18, r20
    1266:	35 0b       	sbc	r19, r21
    1268:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__brkval>
    126c:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <__brkval+0x1>
    1270:	e2 17       	cp	r30, r18
    1272:	f3 07       	cpc	r31, r19
    1274:	a0 f4       	brcc	.+40     	; 0x129e <malloc+0x120>
    1276:	2e 1b       	sub	r18, r30
    1278:	3f 0b       	sbc	r19, r31
    127a:	28 17       	cp	r18, r24
    127c:	39 07       	cpc	r19, r25
    127e:	78 f0       	brcs	.+30     	; 0x129e <malloc+0x120>
    1280:	ac 01       	movw	r20, r24
    1282:	4e 5f       	subi	r20, 0xFE	; 254
    1284:	5f 4f       	sbci	r21, 0xFF	; 255
    1286:	24 17       	cp	r18, r20
    1288:	35 07       	cpc	r19, r21
    128a:	48 f0       	brcs	.+18     	; 0x129e <malloc+0x120>
    128c:	4e 0f       	add	r20, r30
    128e:	5f 1f       	adc	r21, r31
    1290:	50 93 ef 02 	sts	0x02EF, r21	; 0x8002ef <__brkval+0x1>
    1294:	40 93 ee 02 	sts	0x02EE, r20	; 0x8002ee <__brkval>
    1298:	81 93       	st	Z+, r24
    129a:	91 93       	st	Z+, r25
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <malloc+0x124>
    129e:	e0 e0       	ldi	r30, 0x00	; 0
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	cf 01       	movw	r24, r30
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <free>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <free+0xa>
    12b6:	81 c0       	rjmp	.+258    	; 0x13ba <free+0x10c>
    12b8:	fc 01       	movw	r30, r24
    12ba:	32 97       	sbiw	r30, 0x02	; 2
    12bc:	13 82       	std	Z+3, r1	; 0x03
    12be:	12 82       	std	Z+2, r1	; 0x02
    12c0:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <__flp>
    12c4:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <__flp+0x1>
    12c8:	10 97       	sbiw	r26, 0x00	; 0
    12ca:	81 f4       	brne	.+32     	; 0x12ec <free+0x3e>
    12cc:	20 81       	ld	r18, Z
    12ce:	31 81       	ldd	r19, Z+1	; 0x01
    12d0:	82 0f       	add	r24, r18
    12d2:	93 1f       	adc	r25, r19
    12d4:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    12d8:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	51 f5       	brne	.+84     	; 0x1336 <free+0x88>
    12e2:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__brkval+0x1>
    12e6:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__brkval>
    12ea:	67 c0       	rjmp	.+206    	; 0x13ba <free+0x10c>
    12ec:	ed 01       	movw	r28, r26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	ce 17       	cp	r28, r30
    12f4:	df 07       	cpc	r29, r31
    12f6:	40 f4       	brcc	.+16     	; 0x1308 <free+0x5a>
    12f8:	4a 81       	ldd	r20, Y+2	; 0x02
    12fa:	5b 81       	ldd	r21, Y+3	; 0x03
    12fc:	9e 01       	movw	r18, r28
    12fe:	41 15       	cp	r20, r1
    1300:	51 05       	cpc	r21, r1
    1302:	f1 f0       	breq	.+60     	; 0x1340 <free+0x92>
    1304:	ea 01       	movw	r28, r20
    1306:	f5 cf       	rjmp	.-22     	; 0x12f2 <free+0x44>
    1308:	d3 83       	std	Z+3, r29	; 0x03
    130a:	c2 83       	std	Z+2, r28	; 0x02
    130c:	40 81       	ld	r20, Z
    130e:	51 81       	ldd	r21, Z+1	; 0x01
    1310:	84 0f       	add	r24, r20
    1312:	95 1f       	adc	r25, r21
    1314:	c8 17       	cp	r28, r24
    1316:	d9 07       	cpc	r29, r25
    1318:	59 f4       	brne	.+22     	; 0x1330 <free+0x82>
    131a:	88 81       	ld	r24, Y
    131c:	99 81       	ldd	r25, Y+1	; 0x01
    131e:	84 0f       	add	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	93 83       	std	Z+3, r25	; 0x03
    132e:	82 83       	std	Z+2, r24	; 0x02
    1330:	21 15       	cp	r18, r1
    1332:	31 05       	cpc	r19, r1
    1334:	29 f4       	brne	.+10     	; 0x1340 <free+0x92>
    1336:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <__flp+0x1>
    133a:	e0 93 f0 02 	sts	0x02F0, r30	; 0x8002f0 <__flp>
    133e:	3d c0       	rjmp	.+122    	; 0x13ba <free+0x10c>
    1340:	e9 01       	movw	r28, r18
    1342:	fb 83       	std	Y+3, r31	; 0x03
    1344:	ea 83       	std	Y+2, r30	; 0x02
    1346:	49 91       	ld	r20, Y+
    1348:	59 91       	ld	r21, Y+
    134a:	c4 0f       	add	r28, r20
    134c:	d5 1f       	adc	r29, r21
    134e:	ec 17       	cp	r30, r28
    1350:	fd 07       	cpc	r31, r29
    1352:	61 f4       	brne	.+24     	; 0x136c <free+0xbe>
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	84 0f       	add	r24, r20
    135a:	95 1f       	adc	r25, r21
    135c:	02 96       	adiw	r24, 0x02	; 2
    135e:	e9 01       	movw	r28, r18
    1360:	99 83       	std	Y+1, r25	; 0x01
    1362:	88 83       	st	Y, r24
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	e0 e0       	ldi	r30, 0x00	; 0
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	8d 91       	ld	r24, X+
    1374:	9c 91       	ld	r25, X
    1376:	13 97       	sbiw	r26, 0x03	; 3
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	19 f0       	breq	.+6      	; 0x1382 <free+0xd4>
    137c:	fd 01       	movw	r30, r26
    137e:	dc 01       	movw	r26, r24
    1380:	f7 cf       	rjmp	.-18     	; 0x1370 <free+0xc2>
    1382:	8d 91       	ld	r24, X+
    1384:	9c 91       	ld	r25, X
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	9d 01       	movw	r18, r26
    138a:	2e 5f       	subi	r18, 0xFE	; 254
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	82 0f       	add	r24, r18
    1390:	93 1f       	adc	r25, r19
    1392:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <__brkval>
    1396:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <__brkval+0x1>
    139a:	28 17       	cp	r18, r24
    139c:	39 07       	cpc	r19, r25
    139e:	69 f4       	brne	.+26     	; 0x13ba <free+0x10c>
    13a0:	30 97       	sbiw	r30, 0x00	; 0
    13a2:	29 f4       	brne	.+10     	; 0x13ae <free+0x100>
    13a4:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <__flp+0x1>
    13a8:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <__flp>
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <free+0x104>
    13ae:	13 82       	std	Z+3, r1	; 0x03
    13b0:	12 82       	std	Z+2, r1	; 0x02
    13b2:	b0 93 ef 02 	sts	0x02EF, r27	; 0x8002ef <__brkval+0x1>
    13b6:	a0 93 ee 02 	sts	0x02EE, r26	; 0x8002ee <__brkval>
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <sprintf>:
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	2e 97       	sbiw	r28, 0x0e	; 14
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	0d 89       	ldd	r16, Y+21	; 0x15
    13da:	1e 89       	ldd	r17, Y+22	; 0x16
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	8c 83       	std	Y+4, r24	; 0x04
    13e0:	1a 83       	std	Y+2, r17	; 0x02
    13e2:	09 83       	std	Y+1, r16	; 0x01
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f e7       	ldi	r25, 0x7F	; 127
    13e8:	9e 83       	std	Y+6, r25	; 0x06
    13ea:	8d 83       	std	Y+5, r24	; 0x05
    13ec:	ae 01       	movw	r20, r28
    13ee:	47 5e       	subi	r20, 0xE7	; 231
    13f0:	5f 4f       	sbci	r21, 0xFF	; 255
    13f2:	6f 89       	ldd	r22, Y+23	; 0x17
    13f4:	78 8d       	ldd	r23, Y+24	; 0x18
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	10 d0       	rcall	.+32     	; 0x141c <vfprintf>
    13fc:	ef 81       	ldd	r30, Y+7	; 0x07
    13fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1400:	e0 0f       	add	r30, r16
    1402:	f1 1f       	adc	r31, r17
    1404:	10 82       	st	Z, r1
    1406:	2e 96       	adiw	r28, 0x0e	; 14
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <vfprintf>:
    141c:	2f 92       	push	r2
    141e:	3f 92       	push	r3
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	2b 97       	sbiw	r28, 0x0b	; 11
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	6c 01       	movw	r12, r24
    1452:	7b 01       	movw	r14, r22
    1454:	8a 01       	movw	r16, r20
    1456:	fc 01       	movw	r30, r24
    1458:	17 82       	std	Z+7, r1	; 0x07
    145a:	16 82       	std	Z+6, r1	; 0x06
    145c:	83 81       	ldd	r24, Z+3	; 0x03
    145e:	81 ff       	sbrs	r24, 1
    1460:	bf c1       	rjmp	.+894    	; 0x17e0 <vfprintf+0x3c4>
    1462:	ce 01       	movw	r24, r28
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	3c 01       	movw	r6, r24
    1468:	f6 01       	movw	r30, r12
    146a:	93 81       	ldd	r25, Z+3	; 0x03
    146c:	f7 01       	movw	r30, r14
    146e:	93 fd       	sbrc	r25, 3
    1470:	85 91       	lpm	r24, Z+
    1472:	93 ff       	sbrs	r25, 3
    1474:	81 91       	ld	r24, Z+
    1476:	7f 01       	movw	r14, r30
    1478:	88 23       	and	r24, r24
    147a:	09 f4       	brne	.+2      	; 0x147e <vfprintf+0x62>
    147c:	ad c1       	rjmp	.+858    	; 0x17d8 <vfprintf+0x3bc>
    147e:	85 32       	cpi	r24, 0x25	; 37
    1480:	39 f4       	brne	.+14     	; 0x1490 <vfprintf+0x74>
    1482:	93 fd       	sbrc	r25, 3
    1484:	85 91       	lpm	r24, Z+
    1486:	93 ff       	sbrs	r25, 3
    1488:	81 91       	ld	r24, Z+
    148a:	7f 01       	movw	r14, r30
    148c:	85 32       	cpi	r24, 0x25	; 37
    148e:	21 f4       	brne	.+8      	; 0x1498 <vfprintf+0x7c>
    1490:	b6 01       	movw	r22, r12
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	d6 d1       	rcall	.+940    	; 0x1842 <fputc>
    1496:	e8 cf       	rjmp	.-48     	; 0x1468 <vfprintf+0x4c>
    1498:	91 2c       	mov	r9, r1
    149a:	21 2c       	mov	r2, r1
    149c:	31 2c       	mov	r3, r1
    149e:	ff e1       	ldi	r31, 0x1F	; 31
    14a0:	f3 15       	cp	r31, r3
    14a2:	d8 f0       	brcs	.+54     	; 0x14da <vfprintf+0xbe>
    14a4:	8b 32       	cpi	r24, 0x2B	; 43
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <vfprintf+0xaa>
    14a8:	38 f4       	brcc	.+14     	; 0x14b8 <vfprintf+0x9c>
    14aa:	80 32       	cpi	r24, 0x20	; 32
    14ac:	79 f0       	breq	.+30     	; 0x14cc <vfprintf+0xb0>
    14ae:	83 32       	cpi	r24, 0x23	; 35
    14b0:	a1 f4       	brne	.+40     	; 0x14da <vfprintf+0xbe>
    14b2:	23 2d       	mov	r18, r3
    14b4:	20 61       	ori	r18, 0x10	; 16
    14b6:	1d c0       	rjmp	.+58     	; 0x14f2 <vfprintf+0xd6>
    14b8:	8d 32       	cpi	r24, 0x2D	; 45
    14ba:	61 f0       	breq	.+24     	; 0x14d4 <vfprintf+0xb8>
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	69 f4       	brne	.+26     	; 0x14da <vfprintf+0xbe>
    14c0:	23 2d       	mov	r18, r3
    14c2:	21 60       	ori	r18, 0x01	; 1
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <vfprintf+0xd6>
    14c6:	83 2d       	mov	r24, r3
    14c8:	82 60       	ori	r24, 0x02	; 2
    14ca:	38 2e       	mov	r3, r24
    14cc:	e3 2d       	mov	r30, r3
    14ce:	e4 60       	ori	r30, 0x04	; 4
    14d0:	3e 2e       	mov	r3, r30
    14d2:	2a c0       	rjmp	.+84     	; 0x1528 <vfprintf+0x10c>
    14d4:	f3 2d       	mov	r31, r3
    14d6:	f8 60       	ori	r31, 0x08	; 8
    14d8:	1d c0       	rjmp	.+58     	; 0x1514 <vfprintf+0xf8>
    14da:	37 fc       	sbrc	r3, 7
    14dc:	2d c0       	rjmp	.+90     	; 0x1538 <vfprintf+0x11c>
    14de:	20 ed       	ldi	r18, 0xD0	; 208
    14e0:	28 0f       	add	r18, r24
    14e2:	2a 30       	cpi	r18, 0x0A	; 10
    14e4:	40 f0       	brcs	.+16     	; 0x14f6 <vfprintf+0xda>
    14e6:	8e 32       	cpi	r24, 0x2E	; 46
    14e8:	b9 f4       	brne	.+46     	; 0x1518 <vfprintf+0xfc>
    14ea:	36 fc       	sbrc	r3, 6
    14ec:	75 c1       	rjmp	.+746    	; 0x17d8 <vfprintf+0x3bc>
    14ee:	23 2d       	mov	r18, r3
    14f0:	20 64       	ori	r18, 0x40	; 64
    14f2:	32 2e       	mov	r3, r18
    14f4:	19 c0       	rjmp	.+50     	; 0x1528 <vfprintf+0x10c>
    14f6:	36 fe       	sbrs	r3, 6
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0xea>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	98 9e       	mul	r9, r24
    14fe:	20 0d       	add	r18, r0
    1500:	11 24       	eor	r1, r1
    1502:	92 2e       	mov	r9, r18
    1504:	11 c0       	rjmp	.+34     	; 0x1528 <vfprintf+0x10c>
    1506:	ea e0       	ldi	r30, 0x0A	; 10
    1508:	2e 9e       	mul	r2, r30
    150a:	20 0d       	add	r18, r0
    150c:	11 24       	eor	r1, r1
    150e:	22 2e       	mov	r2, r18
    1510:	f3 2d       	mov	r31, r3
    1512:	f0 62       	ori	r31, 0x20	; 32
    1514:	3f 2e       	mov	r3, r31
    1516:	08 c0       	rjmp	.+16     	; 0x1528 <vfprintf+0x10c>
    1518:	8c 36       	cpi	r24, 0x6C	; 108
    151a:	21 f4       	brne	.+8      	; 0x1524 <vfprintf+0x108>
    151c:	83 2d       	mov	r24, r3
    151e:	80 68       	ori	r24, 0x80	; 128
    1520:	38 2e       	mov	r3, r24
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <vfprintf+0x10c>
    1524:	88 36       	cpi	r24, 0x68	; 104
    1526:	41 f4       	brne	.+16     	; 0x1538 <vfprintf+0x11c>
    1528:	f7 01       	movw	r30, r14
    152a:	93 fd       	sbrc	r25, 3
    152c:	85 91       	lpm	r24, Z+
    152e:	93 ff       	sbrs	r25, 3
    1530:	81 91       	ld	r24, Z+
    1532:	7f 01       	movw	r14, r30
    1534:	81 11       	cpse	r24, r1
    1536:	b3 cf       	rjmp	.-154    	; 0x149e <vfprintf+0x82>
    1538:	98 2f       	mov	r25, r24
    153a:	9f 7d       	andi	r25, 0xDF	; 223
    153c:	95 54       	subi	r25, 0x45	; 69
    153e:	93 30       	cpi	r25, 0x03	; 3
    1540:	28 f4       	brcc	.+10     	; 0x154c <vfprintf+0x130>
    1542:	0c 5f       	subi	r16, 0xFC	; 252
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	9f e3       	ldi	r25, 0x3F	; 63
    1548:	99 83       	std	Y+1, r25	; 0x01
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x14a>
    154c:	83 36       	cpi	r24, 0x63	; 99
    154e:	31 f0       	breq	.+12     	; 0x155c <vfprintf+0x140>
    1550:	83 37       	cpi	r24, 0x73	; 115
    1552:	71 f0       	breq	.+28     	; 0x1570 <vfprintf+0x154>
    1554:	83 35       	cpi	r24, 0x53	; 83
    1556:	09 f0       	breq	.+2      	; 0x155a <vfprintf+0x13e>
    1558:	55 c0       	rjmp	.+170    	; 0x1604 <vfprintf+0x1e8>
    155a:	20 c0       	rjmp	.+64     	; 0x159c <vfprintf+0x180>
    155c:	f8 01       	movw	r30, r16
    155e:	80 81       	ld	r24, Z
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	0e 5f       	subi	r16, 0xFE	; 254
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	88 24       	eor	r8, r8
    1568:	83 94       	inc	r8
    156a:	91 2c       	mov	r9, r1
    156c:	53 01       	movw	r10, r6
    156e:	12 c0       	rjmp	.+36     	; 0x1594 <vfprintf+0x178>
    1570:	28 01       	movw	r4, r16
    1572:	f2 e0       	ldi	r31, 0x02	; 2
    1574:	4f 0e       	add	r4, r31
    1576:	51 1c       	adc	r5, r1
    1578:	f8 01       	movw	r30, r16
    157a:	a0 80       	ld	r10, Z
    157c:	b1 80       	ldd	r11, Z+1	; 0x01
    157e:	36 fe       	sbrs	r3, 6
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <vfprintf+0x16c>
    1582:	69 2d       	mov	r22, r9
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <vfprintf+0x170>
    1588:	6f ef       	ldi	r22, 0xFF	; 255
    158a:	7f ef       	ldi	r23, 0xFF	; 255
    158c:	c5 01       	movw	r24, r10
    158e:	4e d1       	rcall	.+668    	; 0x182c <strnlen>
    1590:	4c 01       	movw	r8, r24
    1592:	82 01       	movw	r16, r4
    1594:	f3 2d       	mov	r31, r3
    1596:	ff 77       	andi	r31, 0x7F	; 127
    1598:	3f 2e       	mov	r3, r31
    159a:	15 c0       	rjmp	.+42     	; 0x15c6 <vfprintf+0x1aa>
    159c:	28 01       	movw	r4, r16
    159e:	22 e0       	ldi	r18, 0x02	; 2
    15a0:	42 0e       	add	r4, r18
    15a2:	51 1c       	adc	r5, r1
    15a4:	f8 01       	movw	r30, r16
    15a6:	a0 80       	ld	r10, Z
    15a8:	b1 80       	ldd	r11, Z+1	; 0x01
    15aa:	36 fe       	sbrs	r3, 6
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <vfprintf+0x198>
    15ae:	69 2d       	mov	r22, r9
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <vfprintf+0x19c>
    15b4:	6f ef       	ldi	r22, 0xFF	; 255
    15b6:	7f ef       	ldi	r23, 0xFF	; 255
    15b8:	c5 01       	movw	r24, r10
    15ba:	2d d1       	rcall	.+602    	; 0x1816 <strnlen_P>
    15bc:	4c 01       	movw	r8, r24
    15be:	f3 2d       	mov	r31, r3
    15c0:	f0 68       	ori	r31, 0x80	; 128
    15c2:	3f 2e       	mov	r3, r31
    15c4:	82 01       	movw	r16, r4
    15c6:	33 fc       	sbrc	r3, 3
    15c8:	19 c0       	rjmp	.+50     	; 0x15fc <vfprintf+0x1e0>
    15ca:	82 2d       	mov	r24, r2
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	88 16       	cp	r8, r24
    15d0:	99 06       	cpc	r9, r25
    15d2:	a0 f4       	brcc	.+40     	; 0x15fc <vfprintf+0x1e0>
    15d4:	b6 01       	movw	r22, r12
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	33 d1       	rcall	.+614    	; 0x1842 <fputc>
    15dc:	2a 94       	dec	r2
    15de:	f5 cf       	rjmp	.-22     	; 0x15ca <vfprintf+0x1ae>
    15e0:	f5 01       	movw	r30, r10
    15e2:	37 fc       	sbrc	r3, 7
    15e4:	85 91       	lpm	r24, Z+
    15e6:	37 fe       	sbrs	r3, 7
    15e8:	81 91       	ld	r24, Z+
    15ea:	5f 01       	movw	r10, r30
    15ec:	b6 01       	movw	r22, r12
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	28 d1       	rcall	.+592    	; 0x1842 <fputc>
    15f2:	21 10       	cpse	r2, r1
    15f4:	2a 94       	dec	r2
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	82 1a       	sub	r8, r18
    15fa:	91 08       	sbc	r9, r1
    15fc:	81 14       	cp	r8, r1
    15fe:	91 04       	cpc	r9, r1
    1600:	79 f7       	brne	.-34     	; 0x15e0 <vfprintf+0x1c4>
    1602:	e1 c0       	rjmp	.+450    	; 0x17c6 <vfprintf+0x3aa>
    1604:	84 36       	cpi	r24, 0x64	; 100
    1606:	11 f0       	breq	.+4      	; 0x160c <vfprintf+0x1f0>
    1608:	89 36       	cpi	r24, 0x69	; 105
    160a:	39 f5       	brne	.+78     	; 0x165a <vfprintf+0x23e>
    160c:	f8 01       	movw	r30, r16
    160e:	37 fe       	sbrs	r3, 7
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <vfprintf+0x204>
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	0c 5f       	subi	r16, 0xFC	; 252
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	08 c0       	rjmp	.+16     	; 0x1630 <vfprintf+0x214>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	07 2e       	mov	r0, r23
    1626:	00 0c       	add	r0, r0
    1628:	88 0b       	sbc	r24, r24
    162a:	99 0b       	sbc	r25, r25
    162c:	0e 5f       	subi	r16, 0xFE	; 254
    162e:	1f 4f       	sbci	r17, 0xFF	; 255
    1630:	f3 2d       	mov	r31, r3
    1632:	ff 76       	andi	r31, 0x6F	; 111
    1634:	3f 2e       	mov	r3, r31
    1636:	97 ff       	sbrs	r25, 7
    1638:	09 c0       	rjmp	.+18     	; 0x164c <vfprintf+0x230>
    163a:	90 95       	com	r25
    163c:	80 95       	com	r24
    163e:	70 95       	com	r23
    1640:	61 95       	neg	r22
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8f 4f       	sbci	r24, 0xFF	; 255
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	f0 68       	ori	r31, 0x80	; 128
    164a:	3f 2e       	mov	r3, r31
    164c:	2a e0       	ldi	r18, 0x0A	; 10
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	a3 01       	movw	r20, r6
    1652:	33 d1       	rcall	.+614    	; 0x18ba <__ultoa_invert>
    1654:	88 2e       	mov	r8, r24
    1656:	86 18       	sub	r8, r6
    1658:	44 c0       	rjmp	.+136    	; 0x16e2 <vfprintf+0x2c6>
    165a:	85 37       	cpi	r24, 0x75	; 117
    165c:	31 f4       	brne	.+12     	; 0x166a <vfprintf+0x24e>
    165e:	23 2d       	mov	r18, r3
    1660:	2f 7e       	andi	r18, 0xEF	; 239
    1662:	b2 2e       	mov	r11, r18
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	25 c0       	rjmp	.+74     	; 0x16b4 <vfprintf+0x298>
    166a:	93 2d       	mov	r25, r3
    166c:	99 7f       	andi	r25, 0xF9	; 249
    166e:	b9 2e       	mov	r11, r25
    1670:	8f 36       	cpi	r24, 0x6F	; 111
    1672:	c1 f0       	breq	.+48     	; 0x16a4 <vfprintf+0x288>
    1674:	18 f4       	brcc	.+6      	; 0x167c <vfprintf+0x260>
    1676:	88 35       	cpi	r24, 0x58	; 88
    1678:	79 f0       	breq	.+30     	; 0x1698 <vfprintf+0x27c>
    167a:	ae c0       	rjmp	.+348    	; 0x17d8 <vfprintf+0x3bc>
    167c:	80 37       	cpi	r24, 0x70	; 112
    167e:	19 f0       	breq	.+6      	; 0x1686 <vfprintf+0x26a>
    1680:	88 37       	cpi	r24, 0x78	; 120
    1682:	21 f0       	breq	.+8      	; 0x168c <vfprintf+0x270>
    1684:	a9 c0       	rjmp	.+338    	; 0x17d8 <vfprintf+0x3bc>
    1686:	e9 2f       	mov	r30, r25
    1688:	e0 61       	ori	r30, 0x10	; 16
    168a:	be 2e       	mov	r11, r30
    168c:	b4 fe       	sbrs	r11, 4
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <vfprintf+0x28e>
    1690:	fb 2d       	mov	r31, r11
    1692:	f4 60       	ori	r31, 0x04	; 4
    1694:	bf 2e       	mov	r11, r31
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <vfprintf+0x28e>
    1698:	34 fe       	sbrs	r3, 4
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <vfprintf+0x294>
    169c:	29 2f       	mov	r18, r25
    169e:	26 60       	ori	r18, 0x06	; 6
    16a0:	b2 2e       	mov	r11, r18
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x294>
    16a4:	28 e0       	ldi	r18, 0x08	; 8
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <vfprintf+0x298>
    16aa:	20 e1       	ldi	r18, 0x10	; 16
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <vfprintf+0x298>
    16b0:	20 e1       	ldi	r18, 0x10	; 16
    16b2:	32 e0       	ldi	r19, 0x02	; 2
    16b4:	f8 01       	movw	r30, r16
    16b6:	b7 fe       	sbrs	r11, 7
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <vfprintf+0x2ac>
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	0c 5f       	subi	r16, 0xFC	; 252
    16c4:	1f 4f       	sbci	r17, 0xFF	; 255
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0x2b8>
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	a3 01       	movw	r20, r6
    16d6:	f1 d0       	rcall	.+482    	; 0x18ba <__ultoa_invert>
    16d8:	88 2e       	mov	r8, r24
    16da:	86 18       	sub	r8, r6
    16dc:	fb 2d       	mov	r31, r11
    16de:	ff 77       	andi	r31, 0x7F	; 127
    16e0:	3f 2e       	mov	r3, r31
    16e2:	36 fe       	sbrs	r3, 6
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <vfprintf+0x2e4>
    16e6:	23 2d       	mov	r18, r3
    16e8:	2e 7f       	andi	r18, 0xFE	; 254
    16ea:	a2 2e       	mov	r10, r18
    16ec:	89 14       	cp	r8, r9
    16ee:	58 f4       	brcc	.+22     	; 0x1706 <vfprintf+0x2ea>
    16f0:	34 fe       	sbrs	r3, 4
    16f2:	0b c0       	rjmp	.+22     	; 0x170a <vfprintf+0x2ee>
    16f4:	32 fc       	sbrc	r3, 2
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <vfprintf+0x2ee>
    16f8:	83 2d       	mov	r24, r3
    16fa:	8e 7e       	andi	r24, 0xEE	; 238
    16fc:	a8 2e       	mov	r10, r24
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <vfprintf+0x2ee>
    1700:	b8 2c       	mov	r11, r8
    1702:	a3 2c       	mov	r10, r3
    1704:	03 c0       	rjmp	.+6      	; 0x170c <vfprintf+0x2f0>
    1706:	b8 2c       	mov	r11, r8
    1708:	01 c0       	rjmp	.+2      	; 0x170c <vfprintf+0x2f0>
    170a:	b9 2c       	mov	r11, r9
    170c:	a4 fe       	sbrs	r10, 4
    170e:	0f c0       	rjmp	.+30     	; 0x172e <vfprintf+0x312>
    1710:	fe 01       	movw	r30, r28
    1712:	e8 0d       	add	r30, r8
    1714:	f1 1d       	adc	r31, r1
    1716:	80 81       	ld	r24, Z
    1718:	80 33       	cpi	r24, 0x30	; 48
    171a:	21 f4       	brne	.+8      	; 0x1724 <vfprintf+0x308>
    171c:	9a 2d       	mov	r25, r10
    171e:	99 7e       	andi	r25, 0xE9	; 233
    1720:	a9 2e       	mov	r10, r25
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <vfprintf+0x31a>
    1724:	a2 fe       	sbrs	r10, 2
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <vfprintf+0x318>
    1728:	b3 94       	inc	r11
    172a:	b3 94       	inc	r11
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <vfprintf+0x31a>
    172e:	8a 2d       	mov	r24, r10
    1730:	86 78       	andi	r24, 0x86	; 134
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x31a>
    1734:	b3 94       	inc	r11
    1736:	a3 fc       	sbrc	r10, 3
    1738:	10 c0       	rjmp	.+32     	; 0x175a <vfprintf+0x33e>
    173a:	a0 fe       	sbrs	r10, 0
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x32e>
    173e:	b2 14       	cp	r11, r2
    1740:	80 f4       	brcc	.+32     	; 0x1762 <vfprintf+0x346>
    1742:	28 0c       	add	r2, r8
    1744:	92 2c       	mov	r9, r2
    1746:	9b 18       	sub	r9, r11
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <vfprintf+0x348>
    174a:	b2 14       	cp	r11, r2
    174c:	58 f4       	brcc	.+22     	; 0x1764 <vfprintf+0x348>
    174e:	b6 01       	movw	r22, r12
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	76 d0       	rcall	.+236    	; 0x1842 <fputc>
    1756:	b3 94       	inc	r11
    1758:	f8 cf       	rjmp	.-16     	; 0x174a <vfprintf+0x32e>
    175a:	b2 14       	cp	r11, r2
    175c:	18 f4       	brcc	.+6      	; 0x1764 <vfprintf+0x348>
    175e:	2b 18       	sub	r2, r11
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x34a>
    1762:	98 2c       	mov	r9, r8
    1764:	21 2c       	mov	r2, r1
    1766:	a4 fe       	sbrs	r10, 4
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <vfprintf+0x36c>
    176a:	b6 01       	movw	r22, r12
    176c:	80 e3       	ldi	r24, 0x30	; 48
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	68 d0       	rcall	.+208    	; 0x1842 <fputc>
    1772:	a2 fe       	sbrs	r10, 2
    1774:	16 c0       	rjmp	.+44     	; 0x17a2 <vfprintf+0x386>
    1776:	a1 fc       	sbrc	r10, 1
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <vfprintf+0x364>
    177a:	88 e7       	ldi	r24, 0x78	; 120
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <vfprintf+0x368>
    1780:	88 e5       	ldi	r24, 0x58	; 88
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	b6 01       	movw	r22, r12
    1786:	0c c0       	rjmp	.+24     	; 0x17a0 <vfprintf+0x384>
    1788:	8a 2d       	mov	r24, r10
    178a:	86 78       	andi	r24, 0x86	; 134
    178c:	51 f0       	breq	.+20     	; 0x17a2 <vfprintf+0x386>
    178e:	a1 fe       	sbrs	r10, 1
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x37a>
    1792:	8b e2       	ldi	r24, 0x2B	; 43
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <vfprintf+0x37c>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	a7 fc       	sbrc	r10, 7
    179a:	8d e2       	ldi	r24, 0x2D	; 45
    179c:	b6 01       	movw	r22, r12
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	50 d0       	rcall	.+160    	; 0x1842 <fputc>
    17a2:	89 14       	cp	r8, r9
    17a4:	30 f4       	brcc	.+12     	; 0x17b2 <vfprintf+0x396>
    17a6:	b6 01       	movw	r22, r12
    17a8:	80 e3       	ldi	r24, 0x30	; 48
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	4a d0       	rcall	.+148    	; 0x1842 <fputc>
    17ae:	9a 94       	dec	r9
    17b0:	f8 cf       	rjmp	.-16     	; 0x17a2 <vfprintf+0x386>
    17b2:	8a 94       	dec	r8
    17b4:	f3 01       	movw	r30, r6
    17b6:	e8 0d       	add	r30, r8
    17b8:	f1 1d       	adc	r31, r1
    17ba:	80 81       	ld	r24, Z
    17bc:	b6 01       	movw	r22, r12
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	40 d0       	rcall	.+128    	; 0x1842 <fputc>
    17c2:	81 10       	cpse	r8, r1
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <vfprintf+0x396>
    17c6:	22 20       	and	r2, r2
    17c8:	09 f4       	brne	.+2      	; 0x17cc <vfprintf+0x3b0>
    17ca:	4e ce       	rjmp	.-868    	; 0x1468 <vfprintf+0x4c>
    17cc:	b6 01       	movw	r22, r12
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	37 d0       	rcall	.+110    	; 0x1842 <fputc>
    17d4:	2a 94       	dec	r2
    17d6:	f7 cf       	rjmp	.-18     	; 0x17c6 <vfprintf+0x3aa>
    17d8:	f6 01       	movw	r30, r12
    17da:	86 81       	ldd	r24, Z+6	; 0x06
    17dc:	97 81       	ldd	r25, Z+7	; 0x07
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x3c8>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	2b 96       	adiw	r28, 0x0b	; 11
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	9f 90       	pop	r9
    1806:	8f 90       	pop	r8
    1808:	7f 90       	pop	r7
    180a:	6f 90       	pop	r6
    180c:	5f 90       	pop	r5
    180e:	4f 90       	pop	r4
    1810:	3f 90       	pop	r3
    1812:	2f 90       	pop	r2
    1814:	08 95       	ret

00001816 <strnlen_P>:
    1816:	fc 01       	movw	r30, r24
    1818:	05 90       	lpm	r0, Z+
    181a:	61 50       	subi	r22, 0x01	; 1
    181c:	70 40       	sbci	r23, 0x00	; 0
    181e:	01 10       	cpse	r0, r1
    1820:	d8 f7       	brcc	.-10     	; 0x1818 <strnlen_P+0x2>
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	8e 0f       	add	r24, r30
    1828:	9f 1f       	adc	r25, r31
    182a:	08 95       	ret

0000182c <strnlen>:
    182c:	fc 01       	movw	r30, r24
    182e:	61 50       	subi	r22, 0x01	; 1
    1830:	70 40       	sbci	r23, 0x00	; 0
    1832:	01 90       	ld	r0, Z+
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <fputc>:
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	fb 01       	movw	r30, r22
    184c:	23 81       	ldd	r18, Z+3	; 0x03
    184e:	21 fd       	sbrc	r18, 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <fputc+0x16>
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	2c c0       	rjmp	.+88     	; 0x18b0 <fputc+0x6e>
    1858:	22 ff       	sbrs	r18, 2
    185a:	16 c0       	rjmp	.+44     	; 0x1888 <fputc+0x46>
    185c:	46 81       	ldd	r20, Z+6	; 0x06
    185e:	57 81       	ldd	r21, Z+7	; 0x07
    1860:	24 81       	ldd	r18, Z+4	; 0x04
    1862:	35 81       	ldd	r19, Z+5	; 0x05
    1864:	42 17       	cp	r20, r18
    1866:	53 07       	cpc	r21, r19
    1868:	44 f4       	brge	.+16     	; 0x187a <fputc+0x38>
    186a:	a0 81       	ld	r26, Z
    186c:	b1 81       	ldd	r27, Z+1	; 0x01
    186e:	9d 01       	movw	r18, r26
    1870:	2f 5f       	subi	r18, 0xFF	; 255
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	31 83       	std	Z+1, r19	; 0x01
    1876:	20 83       	st	Z, r18
    1878:	8c 93       	st	X, r24
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	2f 5f       	subi	r18, 0xFF	; 255
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	37 83       	std	Z+7, r19	; 0x07
    1884:	26 83       	std	Z+6, r18	; 0x06
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <fputc+0x6e>
    1888:	8b 01       	movw	r16, r22
    188a:	ec 01       	movw	r28, r24
    188c:	fb 01       	movw	r30, r22
    188e:	00 84       	ldd	r0, Z+8	; 0x08
    1890:	f1 85       	ldd	r31, Z+9	; 0x09
    1892:	e0 2d       	mov	r30, r0
    1894:	09 95       	icall
    1896:	89 2b       	or	r24, r25
    1898:	e1 f6       	brne	.-72     	; 0x1852 <fputc+0x10>
    189a:	d8 01       	movw	r26, r16
    189c:	16 96       	adiw	r26, 0x06	; 6
    189e:	8d 91       	ld	r24, X+
    18a0:	9c 91       	ld	r25, X
    18a2:	17 97       	sbiw	r26, 0x07	; 7
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	17 96       	adiw	r26, 0x07	; 7
    18a8:	9c 93       	st	X, r25
    18aa:	8e 93       	st	-X, r24
    18ac:	16 97       	sbiw	r26, 0x06	; 6
    18ae:	ce 01       	movw	r24, r28
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	08 95       	ret

000018ba <__ultoa_invert>:
    18ba:	fa 01       	movw	r30, r20
    18bc:	aa 27       	eor	r26, r26
    18be:	28 30       	cpi	r18, 0x08	; 8
    18c0:	51 f1       	breq	.+84     	; 0x1916 <__ultoa_invert+0x5c>
    18c2:	20 31       	cpi	r18, 0x10	; 16
    18c4:	81 f1       	breq	.+96     	; 0x1926 <__ultoa_invert+0x6c>
    18c6:	e8 94       	clt
    18c8:	6f 93       	push	r22
    18ca:	6e 7f       	andi	r22, 0xFE	; 254
    18cc:	6e 5f       	subi	r22, 0xFE	; 254
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	af 4f       	sbci	r26, 0xFF	; 255
    18d6:	b1 e0       	ldi	r27, 0x01	; 1
    18d8:	3e d0       	rcall	.+124    	; 0x1956 <__ultoa_invert+0x9c>
    18da:	b4 e0       	ldi	r27, 0x04	; 4
    18dc:	3c d0       	rcall	.+120    	; 0x1956 <__ultoa_invert+0x9c>
    18de:	67 0f       	add	r22, r23
    18e0:	78 1f       	adc	r23, r24
    18e2:	89 1f       	adc	r24, r25
    18e4:	9a 1f       	adc	r25, r26
    18e6:	a1 1d       	adc	r26, r1
    18e8:	68 0f       	add	r22, r24
    18ea:	79 1f       	adc	r23, r25
    18ec:	8a 1f       	adc	r24, r26
    18ee:	91 1d       	adc	r25, r1
    18f0:	a1 1d       	adc	r26, r1
    18f2:	6a 0f       	add	r22, r26
    18f4:	71 1d       	adc	r23, r1
    18f6:	81 1d       	adc	r24, r1
    18f8:	91 1d       	adc	r25, r1
    18fa:	a1 1d       	adc	r26, r1
    18fc:	20 d0       	rcall	.+64     	; 0x193e <__ultoa_invert+0x84>
    18fe:	09 f4       	brne	.+2      	; 0x1902 <__ultoa_invert+0x48>
    1900:	68 94       	set
    1902:	3f 91       	pop	r19
    1904:	2a e0       	ldi	r18, 0x0A	; 10
    1906:	26 9f       	mul	r18, r22
    1908:	11 24       	eor	r1, r1
    190a:	30 19       	sub	r19, r0
    190c:	30 5d       	subi	r19, 0xD0	; 208
    190e:	31 93       	st	Z+, r19
    1910:	de f6       	brtc	.-74     	; 0x18c8 <__ultoa_invert+0xe>
    1912:	cf 01       	movw	r24, r30
    1914:	08 95       	ret
    1916:	46 2f       	mov	r20, r22
    1918:	47 70       	andi	r20, 0x07	; 7
    191a:	40 5d       	subi	r20, 0xD0	; 208
    191c:	41 93       	st	Z+, r20
    191e:	b3 e0       	ldi	r27, 0x03	; 3
    1920:	0f d0       	rcall	.+30     	; 0x1940 <__ultoa_invert+0x86>
    1922:	c9 f7       	brne	.-14     	; 0x1916 <__ultoa_invert+0x5c>
    1924:	f6 cf       	rjmp	.-20     	; 0x1912 <__ultoa_invert+0x58>
    1926:	46 2f       	mov	r20, r22
    1928:	4f 70       	andi	r20, 0x0F	; 15
    192a:	40 5d       	subi	r20, 0xD0	; 208
    192c:	4a 33       	cpi	r20, 0x3A	; 58
    192e:	18 f0       	brcs	.+6      	; 0x1936 <__ultoa_invert+0x7c>
    1930:	49 5d       	subi	r20, 0xD9	; 217
    1932:	31 fd       	sbrc	r19, 1
    1934:	40 52       	subi	r20, 0x20	; 32
    1936:	41 93       	st	Z+, r20
    1938:	02 d0       	rcall	.+4      	; 0x193e <__ultoa_invert+0x84>
    193a:	a9 f7       	brne	.-22     	; 0x1926 <__ultoa_invert+0x6c>
    193c:	ea cf       	rjmp	.-44     	; 0x1912 <__ultoa_invert+0x58>
    193e:	b4 e0       	ldi	r27, 0x04	; 4
    1940:	a6 95       	lsr	r26
    1942:	97 95       	ror	r25
    1944:	87 95       	ror	r24
    1946:	77 95       	ror	r23
    1948:	67 95       	ror	r22
    194a:	ba 95       	dec	r27
    194c:	c9 f7       	brne	.-14     	; 0x1940 <__ultoa_invert+0x86>
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	61 05       	cpc	r22, r1
    1952:	71 05       	cpc	r23, r1
    1954:	08 95       	ret
    1956:	9b 01       	movw	r18, r22
    1958:	ac 01       	movw	r20, r24
    195a:	0a 2e       	mov	r0, r26
    195c:	06 94       	lsr	r0
    195e:	57 95       	ror	r21
    1960:	47 95       	ror	r20
    1962:	37 95       	ror	r19
    1964:	27 95       	ror	r18
    1966:	ba 95       	dec	r27
    1968:	c9 f7       	brne	.-14     	; 0x195c <__ultoa_invert+0xa2>
    196a:	62 0f       	add	r22, r18
    196c:	73 1f       	adc	r23, r19
    196e:	84 1f       	adc	r24, r20
    1970:	95 1f       	adc	r25, r21
    1972:	a0 1d       	adc	r26, r0
    1974:	08 95       	ret

00001976 <_exit>:
    1976:	f8 94       	cli

00001978 <__stop_program>:
    1978:	ff cf       	rjmp	.-2      	; 0x1978 <__stop_program>
