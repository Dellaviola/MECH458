
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000332  00800100  00001d2e  00001dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800432  00800432  000020f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005458  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aa5  00000000  00000000  00007910  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000342a  00000000  00000000  000093b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000c7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009254  00000000  00000000  0000d020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a46  00000000  00000000  00016274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00017cba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00017fea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	64 c5       	rjmp	.+2760   	; 0xafe <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e2       	ldi	r30, 0x2E	; 46
      ac:	fd e1       	ldi	r31, 0x1D	; 29
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a2 33       	cpi	r26, 0x32	; 50
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	24 e0       	ldi	r18, 0x04	; 4
      c0:	a2 e3       	ldi	r26, 0x32	; 50
      c2:	b4 e0       	ldi	r27, 0x04	; 4
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	a0 3c       	cpi	r26, 0xC0	; 192
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	a6 d3       	rcall	.+1868   	; 0x81c <main>
      d0:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <_exit>

000000d4 <__bad_interrupt>:
      d4:	52 c4       	rjmp	.+2212   	; 0x97a <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_ADCCount>
     120:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_ADCCount>
     12c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <g_ADCCount+0x1>
     13a:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	e2 5c       	subi	r30, 0xC2	; 194
     14e:	fb 4f       	sbci	r31, 0xFB	; 251
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <g_ADCCount>
     162:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	67 99       	sbic	0x0c, 7	; 12
     190:	16 c0       	rjmp	.+44     	; 0x1be <SERVER_Task+0x34>
     192:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2380>
     196:	88 23       	and	r24, r24
     198:	81 f0       	breq	.+32     	; 0x1ba <SERVER_Task+0x30>
     19a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     19e:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     1a2:	89 2b       	or	r24, r25
     1a4:	41 f4       	brne	.+16     	; 0x1b6 <SERVER_Task+0x2c>
     1a6:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     1aa:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     1ae:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <STAGE1+0x1>
     1b2:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <STAGE1>
     1b6:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_WDTimeout>
     1ba:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <pin7state.2380>
     1be:	66 99       	sbic	0x0c, 6	; 12
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <SERVER_Task+0x54>
     1c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2381>
     1c6:	88 23       	and	r24, r24
     1c8:	41 f0       	breq	.+16     	; 0x1da <SERVER_Task+0x50>
     1ca:	62 e0       	ldi	r22, 0x02	; 2
     1cc:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <STAGE2>
     1d0:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     1d4:	02 d3       	rcall	.+1540   	; 0x7da <LL_UpdateStatus>
     1d6:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_WDTimeout>
     1da:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <pin6state.2381>
     1de:	65 99       	sbic	0x0c, 5	; 12
     1e0:	0b c0       	rjmp	.+22     	; 0x1f8 <SERVER_Task+0x6e>
     1e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2382>
     1e6:	88 23       	and	r24, r24
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <SERVER_Task+0x6a>
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_timer+0x23>
     1f0:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_WDTimeout>
     1f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <pin5state.2382>
     1f8:	67 9b       	sbis	0x0c, 7	; 12
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <SERVER_Task+0x8e>
     1fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <pin7state.2380>
     200:	81 11       	cpse	r24, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <SERVER_Task+0x88>
     204:	ef e5       	ldi	r30, 0x5F	; 95
     206:	f4 e0       	ldi	r31, 0x04	; 4
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	82 8f       	std	Z+26, r24	; 0x1a
     20c:	84 a7       	std	Z+44, r24	; 0x2c
     20e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_timer+0x47>
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <pin7state.2380>
     218:	66 9b       	sbis	0x0c, 6	; 12
     21a:	2a c0       	rjmp	.+84     	; 0x270 <SERVER_Task+0xe6>
     21c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <pin6state.2381>
     220:	81 11       	cpse	r24, r1
     222:	23 c0       	rjmp	.+70     	; 0x26a <SERVER_Task+0xe0>
     224:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <STAGE2>
     228:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     22c:	00 97       	sbiw	r24, 0x00	; 0
     22e:	71 f4       	brne	.+28     	; 0x24c <SERVER_Task+0xc2>
     230:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     234:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     238:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <STAGE2+0x1>
     23c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <STAGE2>
     240:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <g_Timer>
     244:	70 91 57 04 	lds	r23, 0x0457	; 0x800457 <g_Timer+0x1>
     248:	d2 d2       	rcall	.+1444   	; 0x7ee <LL_UpdateTick>
     24a:	0a c0       	rjmp	.+20     	; 0x260 <SERVER_Task+0xd6>
     24c:	80 d2       	rcall	.+1280   	; 0x74e <LL_Next>
     24e:	90 93 a8 04 	sts	0x04A8, r25	; 0x8004a8 <STAGE2+0x1>
     252:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <STAGE2>
     256:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <g_Timer>
     25a:	70 91 57 04 	lds	r23, 0x0457	; 0x800457 <g_Timer+0x1>
     25e:	c7 d2       	rcall	.+1422   	; 0x7ee <LL_UpdateTick>
     260:	ea e7       	ldi	r30, 0x7A	; 122
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	80 64       	ori	r24, 0x40	; 64
     268:	80 83       	st	Z, r24
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <pin6state.2381>
     270:	65 9b       	sbis	0x0c, 5	; 12
     272:	0f c0       	rjmp	.+30     	; 0x292 <SERVER_Task+0x108>
     274:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pin5state.2382>
     278:	81 11       	cpse	r24, r1
     27a:	08 c0       	rjmp	.+16     	; 0x28c <SERVER_Task+0x102>
     27c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     280:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     284:	8a d2       	rcall	.+1300   	; 0x79a <LL_GetClass>
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	09 f4       	brne	.+2      	; 0x28c <SERVER_Task+0x102>
     28a:	df d6       	rcall	.+3518   	; 0x104a <SYS_Rampdown>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pin5state.2382>
     292:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     296:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     29a:	7f d2       	rcall	.+1278   	; 0x79a <LL_GetClass>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	c9 f4       	brne	.+50     	; 0x2d2 <SERVER_Task+0x148>
     2a0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <stepper+0xe>
     2a4:	81 11       	cpse	r24, r1
     2a6:	15 c0       	rjmp	.+42     	; 0x2d2 <SERVER_Task+0x148>
     2a8:	c0 91 56 04 	lds	r28, 0x0456	; 0x800456 <g_Timer>
     2ac:	d0 91 57 04 	lds	r29, 0x0457	; 0x800457 <g_Timer+0x1>
     2b0:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     2b4:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     2b8:	a0 d2       	rcall	.+1344   	; 0x7fa <LL_GetTick>
     2ba:	c8 1b       	sub	r28, r24
     2bc:	d9 0b       	sbc	r29, r25
     2be:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <STAGE2_EXIT_TIME>
     2c2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <STAGE2_EXIT_TIME+0x1>
     2c6:	8c 17       	cp	r24, r28
     2c8:	9d 07       	cpc	r25, r29
     2ca:	18 f4       	brcc	.+6      	; 0x2d2 <SERVER_Task+0x148>
     2cc:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <memory.2383>
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <SERVER_Task+0x150>
     2d2:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <memory.2383>
     2d6:	81 11       	cpse	r24, r1
     2d8:	34 c0       	rjmp	.+104    	; 0x342 <SERVER_Task+0x1b8>
     2da:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     2de:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     2e2:	5b d2       	rcall	.+1206   	; 0x79a <LL_GetClass>
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	69 f1       	breq	.+90     	; 0x342 <SERVER_Task+0x1b8>
     2e8:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <HEAD>
     2ec:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <HEAD+0x1>
     2f0:	82 81       	ldd	r24, Z+2	; 0x02
     2f2:	93 81       	ldd	r25, Z+3	; 0x03
     2f4:	52 d2       	rcall	.+1188   	; 0x79a <LL_GetClass>
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	21 f1       	breq	.+72     	; 0x342 <SERVER_Task+0x1b8>
     2fa:	eb ea       	ldi	r30, 0xAB	; 171
     2fc:	f4 e0       	ldi	r31, 0x04	; 4
     2fe:	84 81       	ldd	r24, Z+4	; 0x04
     300:	22 81       	ldd	r18, Z+2	; 0x02
     302:	33 81       	ldd	r19, Z+3	; 0x03
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	82 17       	cp	r24, r18
     308:	93 07       	cpc	r25, r19
     30a:	d9 f4       	brne	.+54     	; 0x342 <SERVER_Task+0x1b8>
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <memory.2383>
     312:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <HEAD>
     316:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <HEAD+0x1>
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	93 81       	ldd	r25, Z+3	; 0x03
     31e:	3d d2       	rcall	.+1146   	; 0x79a <LL_GetClass>
     320:	e8 2f       	mov	r30, r24
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	e7 5f       	subi	r30, 0xF7	; 247
     326:	fe 4f       	sbci	r31, 0xFE	; 254
     328:	c0 81       	ld	r28, Z
     32a:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     32e:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     332:	33 d2       	rcall	.+1126   	; 0x79a <LL_GetClass>
     334:	e8 2f       	mov	r30, r24
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e7 5f       	subi	r30, 0xF7	; 247
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	80 81       	ld	r24, Z
     33e:	6c 2f       	mov	r22, r28
     340:	be d3       	rcall	.+1916   	; 0xabe <STEPPER_SetRotation>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <ADC_Task>:
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	cf 93       	push	r28
     352:	ee e3       	ldi	r30, 0x3E	; 62
     354:	f4 e0       	ldi	r31, 0x04	; 4
     356:	a0 81       	ld	r26, Z
     358:	b1 81       	ldd	r27, Z+1	; 0x01
     35a:	60 81       	ld	r22, Z
     35c:	71 81       	ldd	r23, Z+1	; 0x01
     35e:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <ticks.2391>
     362:	8f 5f       	subi	r24, 0xFF	; 255
     364:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <ticks.2391>
     368:	c1 2c       	mov	r12, r1
     36a:	d1 2c       	mov	r13, r1
     36c:	76 01       	movw	r14, r12
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	4f b7       	in	r20, 0x3f	; 63
     374:	f8 94       	cli
     376:	fc 01       	movw	r30, r24
     378:	ee 0f       	add	r30, r30
     37a:	ff 1f       	adc	r31, r31
     37c:	e2 5c       	subi	r30, 0xC2	; 194
     37e:	fb 4f       	sbci	r31, 0xFB	; 251
     380:	20 81       	ld	r18, Z
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	c2 0e       	add	r12, r18
     386:	d3 1e       	adc	r13, r19
     388:	e1 1c       	adc	r14, r1
     38a:	f1 1c       	adc	r15, r1
     38c:	20 81       	ld	r18, Z
     38e:	31 81       	ldd	r19, Z+1	; 0x01
     390:	26 17       	cp	r18, r22
     392:	37 07       	cpc	r19, r23
     394:	38 f4       	brcc	.+14     	; 0x3a4 <ADC_Task+0x5c>
     396:	fc 01       	movw	r30, r24
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e2 5c       	subi	r30, 0xC2	; 194
     39e:	fb 4f       	sbci	r31, 0xFB	; 251
     3a0:	60 81       	ld	r22, Z
     3a2:	71 81       	ldd	r23, Z+1	; 0x01
     3a4:	fc 01       	movw	r30, r24
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	e2 5c       	subi	r30, 0xC2	; 194
     3ac:	fb 4f       	sbci	r31, 0xFB	; 251
     3ae:	20 81       	ld	r18, Z
     3b0:	31 81       	ldd	r19, Z+1	; 0x01
     3b2:	a2 17       	cp	r26, r18
     3b4:	b3 07       	cpc	r27, r19
     3b6:	08 f0       	brcs	.+2      	; 0x3ba <ADC_Task+0x72>
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ba:	fc 01       	movw	r30, r24
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	e2 5c       	subi	r30, 0xC2	; 194
     3c2:	fb 4f       	sbci	r31, 0xFB	; 251
     3c4:	a0 81       	ld	r26, Z
     3c6:	b1 81       	ldd	r27, Z+1	; 0x01
     3c8:	45 c0       	rjmp	.+138    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     3ca:	8f b7       	in	r24, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	ca 1a       	sub	r12, r26
     3d0:	db 0a       	sbc	r13, r27
     3d2:	e1 08       	sbc	r14, r1
     3d4:	f1 08       	sbc	r15, r1
     3d6:	c6 1a       	sub	r12, r22
     3d8:	d7 0a       	sbc	r13, r23
     3da:	e1 08       	sbc	r14, r1
     3dc:	f1 08       	sbc	r15, r1
     3de:	f6 94       	lsr	r15
     3e0:	e7 94       	ror	r14
     3e2:	d7 94       	ror	r13
     3e4:	c7 94       	ror	r12
     3e6:	f6 94       	lsr	r15
     3e8:	e7 94       	ror	r14
     3ea:	d7 94       	ror	r13
     3ec:	c7 94       	ror	r12
     3ee:	8f bf       	out	0x3f, r24	; 63
     3f0:	cf b7       	in	r28, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	d7 01       	movw	r26, r14
     3f6:	c6 01       	movw	r24, r12
     3f8:	0b 97       	sbiw	r24, 0x0b	; 11
     3fa:	a1 09       	sbc	r26, r1
     3fc:	b1 09       	sbc	r27, r1
     3fe:	8d 3d       	cpi	r24, 0xDD	; 221
     400:	93 40       	sbci	r25, 0x03	; 3
     402:	a1 05       	cpc	r26, r1
     404:	b1 05       	cpc	r27, r1
     406:	a0 f4       	brcc	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     408:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <STAGE2>
     40c:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     410:	c9 d1       	rcall	.+914    	; 0x7a4 <LL_GetRefl>
     412:	a0 e0       	ldi	r26, 0x00	; 0
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	c8 16       	cp	r12, r24
     418:	d9 06       	cpc	r13, r25
     41a:	ea 06       	cpc	r14, r26
     41c:	fb 06       	cpc	r15, r27
     41e:	40 f4       	brcc	.+16     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     420:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <STAGE2>
     424:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     428:	00 97       	sbiw	r24, 0x00	; 0
     42a:	11 f0       	breq	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	b6 01       	movw	r22, r12
     42e:	c5 d1       	rcall	.+906    	; 0x7ba <LL_UpdateRefl>
     430:	cf bf       	out	0x3f, r28	; 63
     432:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <g_ADCCount+0x1>
     436:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <g_ADCCount>
     43a:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <_timer+0x11>
     43e:	66 9b       	sbis	0x0c, 6	; 12
     440:	06 c0       	rjmp	.+12     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     442:	ea e7       	ldi	r30, 0x7A	; 122
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 64       	ori	r24, 0x40	; 64
     44a:	80 83       	st	Z, r24
     44c:	0a c0       	rjmp	.+20     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     44e:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <ticks.2391>
     452:	07 c0       	rjmp	.+14     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     454:	4f bf       	out	0x3f, r20	; 63
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	86 30       	cpi	r24, 0x06	; 6
     45a:	91 05       	cpc	r25, r1
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	89 cf       	rjmp	.-238    	; 0x372 <ADC_Task+0x2a>
     460:	b4 cf       	rjmp	.-152    	; 0x3ca <ADC_Task+0x82>
     462:	cf 91       	pop	r28
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <MAG_Task>:
     46e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <g_MotorOn>
     472:	88 23       	and	r24, r24
     474:	29 f0       	breq	.+10     	; 0x480 <MAG_Task+0x12>
     476:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <tick.2413>
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <tick.2413>
     480:	64 99       	sbic	0x0c, 4	; 12
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <MAG_Task+0x4a>
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     48a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     48e:	a5 d1       	rcall	.+842    	; 0x7da <LL_UpdateStatus>
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     496:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     49a:	95 d1       	rcall	.+810    	; 0x7c6 <LL_UpdateMag>
     49c:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     4a0:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     4a4:	54 d1       	rcall	.+680    	; 0x74e <LL_Next>
     4a6:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <STAGE1+0x1>
     4aa:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <STAGE1>
     4ae:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <tick.2413>
     4b2:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_timer+0x1a>
     4b6:	08 95       	ret
     4b8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <tick.2413>
     4bc:	83 33       	cpi	r24, 0x33	; 51
     4be:	c8 f0       	brcs	.+50     	; 0x4f2 <MAG_Task+0x84>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     4c6:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     4ca:	87 d1       	rcall	.+782    	; 0x7da <LL_UpdateStatus>
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     4d2:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     4d6:	77 d1       	rcall	.+750    	; 0x7c6 <LL_UpdateMag>
     4d8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     4dc:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     4e0:	36 d1       	rcall	.+620    	; 0x74e <LL_Next>
     4e2:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <STAGE1+0x1>
     4e6:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <STAGE1>
     4ea:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <tick.2413>
     4ee:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <_timer+0x1a>
     4f2:	08 95       	ret

000004f4 <EXIT_Task>:
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	1f 92       	push	r1
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     506:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     50a:	6c d1       	rcall	.+728    	; 0x7e4 <LL_GetStatus>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	18 f4       	brcc	.+6      	; 0x516 <EXIT_Task+0x22>
     510:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_timer+0x23>
     514:	ae c0       	rjmp	.+348    	; 0x672 <EXIT_Task+0x17e>
     516:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <g_Timer>
     51a:	30 91 57 04 	lds	r19, 0x0457	; 0x800457 <g_Timer+0x1>
     51e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <EXIT_DELAY>
     522:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <EXIT_DELAY+0x1>
     526:	28 17       	cp	r18, r24
     528:	39 07       	cpc	r19, r25
     52a:	18 f4       	brcc	.+6      	; 0x532 <EXIT_Task+0x3e>
     52c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_timer+0x23>
     530:	a0 c0       	rjmp	.+320    	; 0x672 <EXIT_Task+0x17e>
     532:	00 91 56 04 	lds	r16, 0x0456	; 0x800456 <g_Timer>
     536:	10 91 57 04 	lds	r17, 0x0457	; 0x800457 <g_Timer+0x1>
     53a:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     53e:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     542:	2b d1       	rcall	.+598    	; 0x79a <LL_GetClass>
     544:	08 1b       	sub	r16, r24
     546:	11 09       	sbc	r17, r1
     548:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <STAGE2_EXIT_TIME>
     54c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <STAGE2_EXIT_TIME+0x1>
     550:	08 17       	cp	r16, r24
     552:	19 07       	cpc	r17, r25
     554:	18 f4       	brcc	.+6      	; 0x55c <EXIT_Task+0x68>
     556:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_timer+0x23>
     55a:	8b c0       	rjmp	.+278    	; 0x672 <EXIT_Task+0x17e>
     55c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     560:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     564:	1a d1       	rcall	.+564    	; 0x79a <LL_GetClass>
     566:	84 30       	cpi	r24, 0x04	; 4
     568:	71 f5       	brne	.+92     	; 0x5c6 <EXIT_Task+0xd2>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <g_UnclassifiedRequest>
     570:	63 e0       	ldi	r22, 0x03	; 3
     572:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     576:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     57a:	2f d1       	rcall	.+606    	; 0x7da <LL_UpdateStatus>
     57c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     580:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     584:	3a d1       	rcall	.+628    	; 0x7fa <LL_GetTick>
     586:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     58a:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     58e:	df d0       	rcall	.+446    	; 0x74e <LL_Next>
     590:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <HEAD+0x1>
     594:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <HEAD>
     598:	fc 01       	movw	r30, r24
     59a:	82 81       	ldd	r24, Z+2	; 0x02
     59c:	93 81       	ldd	r25, Z+3	; 0x03
     59e:	fd d0       	rcall	.+506    	; 0x79a <LL_GetClass>
     5a0:	e8 2f       	mov	r30, r24
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	e7 5f       	subi	r30, 0xF7	; 247
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	10 81       	ld	r17, Z
     5aa:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     5ae:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     5b2:	f3 d0       	rcall	.+486    	; 0x79a <LL_GetClass>
     5b4:	e8 2f       	mov	r30, r24
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	e7 5f       	subi	r30, 0xF7	; 247
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	80 81       	ld	r24, Z
     5be:	61 2f       	mov	r22, r17
     5c0:	7e d2       	rcall	.+1276   	; 0xabe <STEPPER_SetRotation>
     5c2:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_timer+0x23>
     5c6:	eb ea       	ldi	r30, 0xAB	; 171
     5c8:	f4 e0       	ldi	r31, 0x04	; 4
     5ca:	85 81       	ldd	r24, Z+5	; 0x05
     5cc:	96 81       	ldd	r25, Z+6	; 0x06
     5ce:	97 81       	ldd	r25, Z+7	; 0x07
     5d0:	89 1b       	sub	r24, r25
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	99 81       	ldd	r25, Y+1	; 0x01
     5d6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <STEPPER_RANGE>
     5da:	98 17       	cp	r25, r24
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <EXIT_Task+0xec>
     5de:	41 c0       	rjmp	.+130    	; 0x662 <EXIT_Task+0x16e>
     5e0:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <stepper+0xe>
     5e4:	81 11       	cpse	r24, r1
     5e6:	3d c0       	rjmp	.+122    	; 0x662 <EXIT_Task+0x16e>
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	85 30       	cpi	r24, 0x05	; 5
     5ec:	40 f4       	brcc	.+16     	; 0x5fe <EXIT_Task+0x10a>
     5ee:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <stepper+0xa>
     5f2:	81 11       	cpse	r24, r1
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <EXIT_Task+0x10a>
     5f6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <STEPPER_SET>
     5fa:	82 87       	std	Z+10, r24	; 0x0a
     5fc:	15 86       	std	Z+13, r1	; 0x0d
     5fe:	63 e0       	ldi	r22, 0x03	; 3
     600:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     604:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     608:	e8 d0       	rcall	.+464    	; 0x7da <LL_UpdateStatus>
     60a:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     60e:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     612:	f3 d0       	rcall	.+486    	; 0x7fa <LL_GetTick>
     614:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     618:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     61c:	98 d0       	rcall	.+304    	; 0x74e <LL_Next>
     61e:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <HEAD+0x1>
     622:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <HEAD>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	b9 d1       	rcall	.+882    	; 0x99e <PWM>
     62c:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <HEAD>
     630:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <HEAD+0x1>
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	b0 d0       	rcall	.+352    	; 0x79a <LL_GetClass>
     63a:	e8 2f       	mov	r30, r24
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	e7 5f       	subi	r30, 0xF7	; 247
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	10 81       	ld	r17, Z
     644:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     648:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     64c:	a6 d0       	rcall	.+332    	; 0x79a <LL_GetClass>
     64e:	e8 2f       	mov	r30, r24
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	e7 5f       	subi	r30, 0xF7	; 247
     654:	fe 4f       	sbci	r31, 0xFE	; 254
     656:	80 81       	ld	r24, Z
     658:	61 2f       	mov	r22, r17
     65a:	31 d2       	rcall	.+1122   	; 0xabe <STEPPER_SetRotation>
     65c:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <_timer+0x23>
     660:	03 c0       	rjmp	.+6      	; 0x668 <EXIT_Task+0x174>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9b d1       	rcall	.+822    	; 0x99e <PWM>
     668:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     66c:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     670:	94 d0       	rcall	.+296    	; 0x79a <LL_GetClass>
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	08 95       	ret

0000067e <BTN_Task>:
     67e:	89 b1       	in	r24, 0x09	; 9
     680:	83 70       	andi	r24, 0x03	; 3
     682:	c1 f0       	breq	.+48     	; 0x6b4 <BTN_Task+0x36>
     684:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <__data_end>
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <__data_end>
     68e:	8b 30       	cpi	r24, 0x0B	; 11
     690:	98 f0       	brcs	.+38     	; 0x6b8 <BTN_Task+0x3a>
     692:	89 b1       	in	r24, 0x09	; 9
     694:	83 70       	andi	r24, 0x03	; 3
     696:	81 f0       	breq	.+32     	; 0x6b8 <BTN_Task+0x3a>
     698:	89 b1       	in	r24, 0x09	; 9
     69a:	83 70       	andi	r24, 0x03	; 3
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	19 f4       	brne	.+6      	; 0x6a6 <BTN_Task+0x28>
     6a0:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <g_PauseRequest>
     6a4:	08 95       	ret
     6a6:	89 b1       	in	r24, 0x09	; 9
     6a8:	83 70       	andi	r24, 0x03	; 3
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <BTN_Task+0x3a>
     6ae:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <_timer+0x2c>
     6b2:	08 95       	ret
     6b4:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <__data_end>
     6b8:	08 95       	ret

000006ba <WATCHDOG_Task>:
     6ba:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <g_WDTimeout>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	18 f0       	brcs	.+6      	; 0x6c8 <WATCHDOG_Task+0xe>
     6c2:	86 e1       	ldi	r24, 0x16	; 22
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	9b d3       	rcall	.+1846   	; 0xdfe <SYS_Pause>
     6c8:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <g_WDTimeout>
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <g_WDTimeout>
     6d2:	08 95       	ret

000006d4 <D_Blinky>:
     6d4:	9b b1       	in	r25, 0x0b	; 11
     6d6:	80 ea       	ldi	r24, 0xA0	; 160
     6d8:	89 27       	eor	r24, r25
     6da:	8b b9       	out	0x0b, r24	; 11
     6dc:	08 95       	ret

000006de <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     6de:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <g_MotorOn>
     6e2:	88 23       	and	r24, r24
     6e4:	49 f0       	breq	.+18     	; 0x6f8 <ADD_Task+0x1a>
     6e6:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <g_Timer>
     6ea:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <g_Timer+0x1>
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <g_Timer+0x1>
     6f4:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <g_Timer>
     6f8:	08 95       	ret

000006fa <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	7c 01       	movw	r14, r24
     706:	16 2f       	mov	r17, r22
     708:	d4 2f       	mov	r29, r20
     70a:	c2 2f       	mov	r28, r18
     70c:	87 e0       	ldi	r24, 0x07	; 7
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	10 d7       	rcall	.+3616   	; 0x1532 <malloc>
     712:	fc 01       	movw	r30, r24
     714:	f1 82       	std	Z+1, r15	; 0x01
     716:	e0 82       	st	Z, r14
     718:	12 83       	std	Z+2, r17	; 0x02
     71a:	d3 83       	std	Z+3, r29	; 0x03
     71c:	c4 83       	std	Z+4, r28	; 0x04
     71e:	16 82       	std	Z+6, r1	; 0x06
     720:	15 82       	std	Z+5, r1	; 0x05
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	08 95       	ret

0000072e <LL_ItemListInit>:
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
     734:	86 e0       	ldi	r24, 0x06	; 6
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	fc d6       	rcall	.+3576   	; 0x1532 <malloc>
     73a:	fc 01       	movw	r30, r24
     73c:	d1 83       	std	Z+1, r29	; 0x01
     73e:	c0 83       	st	Z, r28
     740:	15 82       	std	Z+5, r1	; 0x05
     742:	14 82       	std	Z+4, r1	; 0x04
     744:	13 82       	std	Z+3, r1	; 0x03
     746:	12 82       	std	Z+2, r1	; 0x02
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <LL_Next>:
     74e:	fc 01       	movw	r30, r24
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	93 81       	ldd	r25, Z+3	; 0x03
     754:	08 95       	ret

00000756 <LL_AddBack>:
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ec 01       	movw	r28, r24
     75c:	cb 01       	movw	r24, r22
     75e:	01 c0       	rjmp	.+2      	; 0x762 <LL_AddBack+0xc>
     760:	e9 01       	movw	r28, r18
     762:	2a 81       	ldd	r18, Y+2	; 0x02
     764:	3b 81       	ldd	r19, Y+3	; 0x03
     766:	21 15       	cp	r18, r1
     768:	31 05       	cpc	r19, r1
     76a:	d1 f7       	brne	.-12     	; 0x760 <LL_AddBack+0xa>
     76c:	e0 df       	rcall	.-64     	; 0x72e <LL_ItemListInit>
     76e:	9b 83       	std	Y+3, r25	; 0x03
     770:	8a 83       	std	Y+2, r24	; 0x02
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <LL_Size>:
     778:	dc 01       	movw	r26, r24
     77a:	12 96       	adiw	r26, 0x02	; 2
     77c:	ed 91       	ld	r30, X+
     77e:	fc 91       	ld	r31, X
     780:	13 97       	sbiw	r26, 0x03	; 3
     782:	30 97       	sbiw	r30, 0x00	; 0
     784:	41 f0       	breq	.+16     	; 0x796 <LL_Size+0x1e>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	02 80       	ldd	r0, Z+2	; 0x02
     78c:	f3 81       	ldd	r31, Z+3	; 0x03
     78e:	e0 2d       	mov	r30, r0
     790:	30 97       	sbiw	r30, 0x00	; 0
     792:	d1 f7       	brne	.-12     	; 0x788 <LL_Size+0x10>
     794:	08 95       	ret
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	08 95       	ret

0000079a <LL_GetClass>:
     79a:	dc 01       	movw	r26, r24
     79c:	ed 91       	ld	r30, X+
     79e:	fc 91       	ld	r31, X
     7a0:	83 81       	ldd	r24, Z+3	; 0x03
     7a2:	08 95       	ret

000007a4 <LL_GetRefl>:
     7a4:	dc 01       	movw	r26, r24
     7a6:	ed 91       	ld	r30, X+
     7a8:	fc 91       	ld	r31, X
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	08 95       	ret

000007b0 <LL_GetMag>:
     7b0:	dc 01       	movw	r26, r24
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	08 95       	ret

000007ba <LL_UpdateRefl>:
     7ba:	dc 01       	movw	r26, r24
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	71 83       	std	Z+1, r23	; 0x01
     7c2:	60 83       	st	Z, r22
     7c4:	08 95       	ret

000007c6 <LL_UpdateMag>:
     7c6:	dc 01       	movw	r26, r24
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	62 83       	std	Z+2, r22	; 0x02
     7ce:	08 95       	ret

000007d0 <LL_UpdateClass>:
     7d0:	dc 01       	movw	r26, r24
     7d2:	ed 91       	ld	r30, X+
     7d4:	fc 91       	ld	r31, X
     7d6:	63 83       	std	Z+3, r22	; 0x03
     7d8:	08 95       	ret

000007da <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     7da:	dc 01       	movw	r26, r24
     7dc:	ed 91       	ld	r30, X+
     7de:	fc 91       	ld	r31, X
     7e0:	64 83       	std	Z+4, r22	; 0x04
     7e2:	08 95       	ret

000007e4 <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     7e4:	dc 01       	movw	r26, r24
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
}
     7ea:	84 81       	ldd	r24, Z+4	; 0x04
     7ec:	08 95       	ret

000007ee <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     7ee:	dc 01       	movw	r26, r24
     7f0:	ed 91       	ld	r30, X+
     7f2:	fc 91       	ld	r31, X
     7f4:	76 83       	std	Z+6, r23	; 0x06
     7f6:	65 83       	std	Z+5, r22	; 0x05
     7f8:	08 95       	ret

000007fa <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     7fa:	dc 01       	movw	r26, r24
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	85 81       	ldd	r24, Z+5	; 0x05
     802:	96 81       	ldd	r25, Z+6	; 0x06
     804:	08 95       	ret

00000806 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     80a:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     80c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     80e:	80 ef       	ldi	r24, 0xF0	; 240
     810:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     812:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     814:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 95       	ret

0000081c <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     81c:	70 d2       	rcall	.+1248   	; 0xcfe <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     81e:	89 b1       	in	r24, 0x09	; 9
     820:	83 70       	andi	r24, 0x03	; 3
     822:	e9 f7       	brne	.-6      	; 0x81e <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     824:	84 e2       	ldi	r24, 0x24	; 36
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	76 d6       	rcall	.+3308   	; 0x1516 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     82a:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	45 ec       	ldi	r20, 0xC5	; 197
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	f3 d5       	rcall	.+3046   	; 0x1424 <TIMER_Create>
		_timer[0].state = READY;
     83e:	cf e5       	ldi	r28, 0x5F	; 95
     840:	d4 e0       	ldi	r29, 0x04	; 4
     842:	12 e0       	ldi	r17, 0x02	; 2
     844:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	44 ea       	ldi	r20, 0xA4	; 164
     84c:	51 e0       	ldi	r21, 0x01	; 1
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	e6 d5       	rcall	.+3020   	; 0x1424 <TIMER_Create>
		_timer[1].state = BLOCKED;
     858:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	47 e3       	ldi	r20, 0x37	; 55
     860:	52 e0       	ldi	r21, 0x02	; 2
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	dc d5       	rcall	.+3000   	; 0x1424 <TIMER_Create>
		_timer[2].state = BLOCKED;
     86c:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	4a e7       	ldi	r20, 0x7A	; 122
     874:	52 e0       	ldi	r21, 0x02	; 2
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	d2 d5       	rcall	.+2980   	; 0x1424 <TIMER_Create>
		_timer[3].state = BLOCKED;
     880:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	4f e6       	ldi	r20, 0x6F	; 111
     888:	53 e0       	ldi	r21, 0x03	; 3
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	c8 d5       	rcall	.+2960   	; 0x1424 <TIMER_Create>
		_timer[4].state = BLOCKED;
     894:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4f e3       	ldi	r20, 0x3F	; 63
     89c:	53 e0       	ldi	r21, 0x03	; 3
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	84 e6       	ldi	r24, 0x64	; 100
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	be d5       	rcall	.+2940   	; 0x1424 <TIMER_Create>
		_timer[5].state = READY;
     8a8:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	4a e6       	ldi	r20, 0x6A	; 106
     8b0:	53 e0       	ldi	r21, 0x03	; 3
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 ed       	ldi	r24, 0xD0	; 208
     8b8:	97 e0       	ldi	r25, 0x07	; 7
     8ba:	b4 d5       	rcall	.+2920   	; 0x1424 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     8bc:	1e af       	std	Y+62, r17	; 0x3e
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4d e5       	ldi	r20, 0x5D	; 93
     8c4:	53 e0       	ldi	r21, 0x03	; 3
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     8cc:	93 e1       	ldi	r25, 0x13	; 19
     8ce:	aa d5       	rcall	.+2900   	; 0x1424 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     8d0:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_timer+0x47>
     8d4:	87 e3       	ldi	r24, 0x37	; 55
		PWM(0x80);
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	1e d6       	rcall	.+3132   	; 0x1516 <UART_SendString>
     8da:	80 e8       	ldi	r24, 0x80	; 128
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     8dc:	90 e0       	ldi	r25, 0x00	; 0
	static volatile uint8_t position[6] = {100, 0, 50, 150, 100, 100};
	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Test("Pause Requested!\r\n");
     8de:	5f d0       	rcall	.+190    	; 0x99e <PWM>
     8e0:	78 94       	sei
     8e2:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <g_PauseRequest>
     8e6:	88 23       	and	r24, r24
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <main+0xd4>
     8ea:	89 e4       	ldi	r24, 0x49	; 73
     8ec:	91 e0       	ldi	r25, 0x01	; 1
		if(g_UnclassifiedRequest) SYS_Unclassified();
     8ee:	13 d4       	rcall	.+2086   	; 0x1116 <SYS_Test>
     8f0:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <g_UnclassifiedRequest>
// 		{
// 			// Item Missing
// 			SYS_Pause("!!!Item Missing!!!\r\n");
// 		}

		list* temp = HEAD;
     8f4:	81 11       	cpse	r24, r1
     8f6:	f9 d4       	rcall	.+2546   	; 0x12ea <SYS_Unclassified>
     8f8:	c0 91 38 04 	lds	r28, 0x0438	; 0x800438 <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     8fc:	d0 91 39 04 	lds	r29, 0x0439	; 0x800439 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     900:	20 97       	sbiw	r28, 0x00	; 0
     902:	79 f3       	breq	.-34     	; 0x8e2 <main+0xc6>
     904:	20 97       	sbiw	r28, 0x00	; 0
     906:	91 f1       	breq	.+100    	; 0x96c <main+0x150>
     908:	ce 01       	movw	r24, r28
     90a:	47 df       	rcall	.-370    	; 0x79a <LL_GetClass>
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	71 f5       	brne	.+92     	; 0x96c <main+0x150>
     910:	ce 01       	movw	r24, r28
			{
	
				reflVal = LL_GetRefl(temp);				
     912:	68 df       	rcall	.-304    	; 0x7e4 <LL_GetStatus>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	51 f5       	brne	.+84     	; 0x96c <main+0x150>
     918:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     91a:	44 df       	rcall	.-376    	; 0x7a4 <LL_GetRefl>
     91c:	8c 01       	movw	r16, r24
     91e:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     920:	47 df       	rcall	.-370    	; 0x7b0 <LL_GetMag>
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     922:	88 23       	and	r24, r24
     924:	91 f0       	breq	.+36     	; 0x94a <main+0x12e>
     926:	c8 01       	movw	r24, r16
     928:	0a 97       	sbiw	r24, 0x0a	; 10
     92a:	83 32       	cpi	r24, 0x23	; 35
					{
						LL_UpdateClass(temp, ALUMINUM);
     92c:	91 40       	sbci	r25, 0x01	; 1
     92e:	20 f4       	brcc	.+8      	; 0x938 <main+0x11c>
     930:	62 e0       	ldi	r22, 0x02	; 2
     932:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     934:	4d df       	rcall	.-358    	; 0x7d0 <LL_UpdateClass>
     936:	1a c0       	rjmp	.+52     	; 0x96c <main+0x150>
     938:	0c 52       	subi	r16, 0x2C	; 44
     93a:	11 40       	sbci	r17, 0x01	; 1
     93c:	05 3f       	cpi	r16, 0xF5	; 245
					{
						LL_UpdateClass(temp, STEEL);
     93e:	11 40       	sbci	r17, 0x01	; 1
     940:	a8 f4       	brcc	.+42     	; 0x96c <main+0x150>
     942:	63 e0       	ldi	r22, 0x03	; 3
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     944:	ce 01       	movw	r24, r28
     946:	44 df       	rcall	.-376    	; 0x7d0 <LL_UpdateClass>
     948:	11 c0       	rjmp	.+34     	; 0x96c <main+0x150>
     94a:	c8 01       	movw	r24, r16
     94c:	89 58       	subi	r24, 0x89	; 137
				{
					LL_UpdateClass(temp, WHITE);
     94e:	93 40       	sbci	r25, 0x03	; 3
     950:	0b 97       	sbiw	r24, 0x0b	; 11
     952:	20 f4       	brcc	.+8      	; 0x95c <main+0x140>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     958:	3b df       	rcall	.-394    	; 0x7d0 <LL_UpdateClass>
     95a:	08 c0       	rjmp	.+16     	; 0x96c <main+0x150>
     95c:	00 52       	subi	r16, 0x20	; 32
     95e:	13 40       	sbci	r17, 0x03	; 3
     960:	0b 3a       	cpi	r16, 0xAB	; 171
				{
					LL_UpdateClass(temp, BLACK);
     962:	11 05       	cpc	r17, r1
     964:	18 f4       	brcc	.+6      	; 0x96c <main+0x150>
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	ce 01       	movw	r24, r28
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
			}
			temp = LL_Next(temp);
     96a:	32 df       	rcall	.-412    	; 0x7d0 <LL_UpdateClass>
     96c:	ce 01       	movw	r24, r28
     96e:	ef de       	rcall	.-546    	; 0x74e <LL_Next>
     970:	ec 01       	movw	r28, r24
// 		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     972:	89 2b       	or	r24, r25
     974:	09 f0       	breq	.+2      	; 0x978 <main+0x15c>
     976:	c6 cf       	rjmp	.-116    	; 0x904 <main+0xe8>
     978:	b4 cf       	rjmp	.-152    	; 0x8e2 <main+0xc6>

0000097a <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     984:	8a ea       	ldi	r24, 0xAA	; 170
     986:	88 b9       	out	0x08, r24	; 8
     988:	fe cf       	rjmp	.-4      	; 0x986 <__vector_default+0xc>

0000098a <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     98a:	84 b5       	in	r24, 0x24	; 36
     98c:	83 68       	ori	r24, 0x83	; 131
     98e:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     990:	85 b5       	in	r24, 0x25	; 37
     992:	83 60       	ori	r24, 0x03	; 3
     994:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     996:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     99a:	87 bd       	out	0x27, r24	; 39
     99c:	08 95       	ret

0000099e <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     99e:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     9a0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9a2:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     9a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <BELT_SPEED>
     9a8:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     9aa:	23 2b       	or	r18, r19
     9ac:	31 f0       	breq	.+12     	; 0x9ba <PWM+0x1c>
		{
			g_MotorOn = 1;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <g_MotorOn>
			PORTB = ~0x0E;
     9b4:	81 ef       	ldi	r24, 0xF1	; 241
     9b6:	85 b9       	out	0x05, r24	; 5
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     9ba:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <g_MotorOn>
			PORTB = ~0x0F;
     9be:	80 ef       	ldi	r24, 0xF0	; 240
     9c0:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9c2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     9c4:	08 95       	ret

000009c6 <STEPPER_Init>:
extern list* HEAD;
//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     9c6:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     9c8:	eb ea       	ldi	r30, 0xAB	; 171
     9ca:	f4 e0       	ldi	r31, 0x04	; 4
     9cc:	10 82       	st	Z, r1
	stepper.direction = 1;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     9d2:	13 82       	std	Z+3, r1	; 0x03
     9d4:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     9d6:	14 82       	std	Z+4, r1	; 0x04
	stepper.same = 0;
     9d8:	12 86       	std	Z+10, r1	; 0x0a
	stepper._currentStep = 0;
     9da:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     9dc:	11 86       	std	Z+9, r1	; 0x09
     9de:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     9e0:	14 86       	std	Z+12, r1	; 0x0c
	stepper._accellStep = 0;
     9e2:	15 86       	std	Z+13, r1	; 0x0d
	stepper._willContinue = 0;
     9e4:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
     9e6:	88 ec       	ldi	r24, 0xC8	; 200
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	96 83       	std	Z+6, r25	; 0x06
     9ec:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     9ee:	80 e3       	ldi	r24, 0x30	; 48
     9f0:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     9f2:	84 e9       	ldi	r24, 0x94	; 148
     9f4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     9f8:	e0 eb       	ldi	r30, 0xB0	; 176
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	82 60       	ori	r24, 0x02	; 2
     a00:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     a02:	e0 e7       	ldi	r30, 0x70	; 112
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	80 81       	ld	r24, Z
     a08:	82 60       	ori	r24, 0x02	; 2
     a0a:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     a0c:	e1 eb       	ldi	r30, 0xB1	; 177
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	87 60       	ori	r24, 0x07	; 7
     a14:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     a16:	78 94       	sei
     a18:	08 95       	ret

00000a1a <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	86 1b       	sub	r24, r22
     a1e:	91 09       	sbc	r25, r1
	if (steps >= 0)
     a20:	52 f0       	brmi	.+20     	; 0xa36 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     a22:	85 36       	cpi	r24, 0x65	; 101
     a24:	91 05       	cpc	r25, r1
     a26:	8c f0       	brlt	.+34     	; 0xa4a <STEPPER_NumSteps+0x30>
     a28:	24 e6       	ldi	r18, 0x64	; 100
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	a9 01       	movw	r20, r18
     a2e:	48 1b       	sub	r20, r24
     a30:	59 0b       	sbc	r21, r25
     a32:	ca 01       	movw	r24, r20
     a34:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     a36:	8c 39       	cpi	r24, 0x9C	; 156
     a38:	5f ef       	ldi	r21, 0xFF	; 255
     a3a:	95 07       	cpc	r25, r21
     a3c:	34 f4       	brge	.+12     	; 0xa4a <STEPPER_NumSteps+0x30>
     a3e:	2c e9       	ldi	r18, 0x9C	; 156
     a40:	3f ef       	ldi	r19, 0xFF	; 255
     a42:	a9 01       	movw	r20, r18
     a44:	48 1b       	sub	r20, r24
     a46:	59 0b       	sbc	r21, r25
     a48:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     a4a:	08 95       	ret

00000a4c <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     a50:	cb ea       	ldi	r28, 0xAB	; 171
     a52:	d4 e0       	ldi	r29, 0x04	; 4
     a54:	6c 81       	ldd	r22, Y+4	; 0x04
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	df df       	rcall	.-66     	; 0xa1a <STEPPER_NumSteps>
     a5c:	9e 83       	std	Y+6, r25	; 0x06
     a5e:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     a60:	6a 81       	ldd	r22, Y+2	; 0x02
     a62:	7b 81       	ldd	r23, Y+3	; 0x03
     a64:	88 85       	ldd	r24, Y+8	; 0x08
     a66:	99 85       	ldd	r25, Y+9	; 0x09
     a68:	d8 df       	rcall	.-80     	; 0xa1a <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     a6a:	2d 81       	ldd	r18, Y+5	; 0x05
     a6c:	3e 81       	ldd	r19, Y+6	; 0x06
     a6e:	33 23       	and	r19, r19
     a70:	14 f4       	brge	.+4      	; 0xa76 <STEPPER_Rotate+0x2a>
     a72:	28 e0       	ldi	r18, 0x08	; 8
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <STEPPER_Rotate+0x2c>
     a76:	24 e0       	ldi	r18, 0x04	; 4
     a78:	eb ea       	ldi	r30, 0xAB	; 171
     a7a:	f4 e0       	ldi	r31, 0x04	; 4
     a7c:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps > 0) ? 1 : 0;
     a7e:	45 81       	ldd	r20, Z+5	; 0x05
     a80:	56 81       	ldd	r21, Z+6	; 0x06
     a82:	84 9f       	mul	r24, r20
     a84:	90 01       	movw	r18, r0
     a86:	85 9f       	mul	r24, r21
     a88:	30 0d       	add	r19, r0
     a8a:	94 9f       	mul	r25, r20
     a8c:	30 0d       	add	r19, r0
     a8e:	11 24       	eor	r1, r1
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	12 16       	cp	r1, r18
     a94:	13 06       	cpc	r1, r19
     a96:	0c f0       	brlt	.+2      	; 0xa9a <STEPPER_Rotate+0x4e>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	eb ea       	ldi	r30, 0xAB	; 171
     a9c:	f4 e0       	ldi	r31, 0x04	; 4
     a9e:	83 87       	std	Z+11, r24	; 0x0b

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     aa0:	85 81       	ldd	r24, Z+5	; 0x05
     aa2:	96 81       	ldd	r25, Z+6	; 0x06
     aa4:	99 23       	and	r25, r25
     aa6:	1c f4       	brge	.+6      	; 0xaae <STEPPER_Rotate+0x62>
     aa8:	91 95       	neg	r25
     aaa:	81 95       	neg	r24
     aac:	91 09       	sbc	r25, r1
     aae:	eb ea       	ldi	r30, 0xAB	; 171
     ab0:	f4 e0       	ldi	r31, 0x04	; 4
     ab2:	96 83       	std	Z+6, r25	; 0x06
     ab4:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     ab6:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
	//Use this function to set the target
	if(stepper.current != stepper.target)
     abe:	eb ea       	ldi	r30, 0xAB	; 171
     ac0:	f4 e0       	ldi	r31, 0x04	; 4
     ac2:	24 81       	ldd	r18, Z+4	; 0x04
     ac4:	42 81       	ldd	r20, Z+2	; 0x02
     ac6:	53 81       	ldd	r21, Z+3	; 0x03
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	24 17       	cp	r18, r20
     acc:	35 07       	cpc	r19, r21
     ace:	29 f0       	breq	.+10     	; 0xada <STEPPER_SetRotation+0x1c>
	{
		stepper.early = 1;
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	96 87       	std	Z+14, r25	; 0x0e
		stepper.earlytarget = target;
     ad4:	87 87       	std	Z+15, r24	; 0x0f
		stepper.earlynext = next;
     ad6:	60 8b       	std	Z+16, r22	; 0x10
     ad8:	08 95       	ret
	}
	else
	{
		stepper.target = target;
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	eb ea       	ldi	r30, 0xAB	; 171
     ae0:	f4 e0       	ldi	r31, 0x04	; 4
     ae2:	33 83       	std	Z+3, r19	; 0x03
     ae4:	22 83       	std	Z+2, r18	; 0x02
		stepper.next = next;
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	71 87       	std	Z+9, r23	; 0x09
     aea:	60 87       	std	Z+8, r22	; 0x08
		if(target == stepper.current) stepper.same = STEPPER_SAME;
     aec:	94 81       	ldd	r25, Z+4	; 0x04
     aee:	89 13       	cpse	r24, r25
     af0:	04 c0       	rjmp	.+8      	; 0xafa <STEPPER_SetRotation+0x3c>
     af2:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <STEPPER_SAME>
     af6:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <stepper+0xa>
		STEPPER_Rotate();
     afa:	a8 cf       	rjmp	.-176    	; 0xa4c <STEPPER_Rotate>
     afc:	08 95       	ret

00000afe <__vector_13>:
	}
}

ISR(TIMER2_COMPA_vect)
{
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	0b b6       	in	r0, 0x3b	; 59
     b0a:	0f 92       	push	r0
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	00 d0       	rcall	.+0      	; 0xb2a <__vector_13+0x2c>
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <__vector_13+0x2e>
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     b30:	86 e3       	ldi	r24, 0x36	; 54
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	9e e2       	ldi	r25, 0x2E	; 46
     b3a:	ad e2       	ldi	r26, 0x2D	; 45
     b3c:	b5 e3       	ldi	r27, 0x35	; 53
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	ab 83       	std	Y+3, r26	; 0x03
     b44:	bc 83       	std	Y+4, r27	; 0x04
		
	if(stepper.same) stepper.same--;
     b46:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <stepper+0xa>
     b4a:	88 23       	and	r24, r24
     b4c:	29 f0       	breq	.+10     	; 0xb58 <__vector_13+0x5a>
     b4e:	eb ea       	ldi	r30, 0xAB	; 171
     b50:	f4 e0       	ldi	r31, 0x04	; 4
     b52:	82 85       	ldd	r24, Z+10	; 0x0a
     b54:	81 50       	subi	r24, 0x01	; 1
     b56:	82 87       	std	Z+10, r24	; 0x0a
		
	if (stepper._currentStep == stepper._targetStep)
     b58:	eb ea       	ldi	r30, 0xAB	; 171
     b5a:	f4 e0       	ldi	r31, 0x04	; 4
     b5c:	87 81       	ldd	r24, Z+7	; 0x07
     b5e:	25 81       	ldd	r18, Z+5	; 0x05
     b60:	36 81       	ldd	r19, Z+6	; 0x06
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	82 17       	cp	r24, r18
     b66:	93 07       	cpc	r25, r19
     b68:	f1 f4       	brne	.+60     	; 0xba6 <__vector_13+0xa8>
	{

		g_ItemInRange = 0;
     b6a:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <g_ItemInRange>
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	84 83       	std	Z+4, r24	; 0x04
		if(stepper.early)
     b74:	86 85       	ldd	r24, Z+14	; 0x0e
     b76:	88 23       	and	r24, r24
     b78:	21 f0       	breq	.+8      	; 0xb82 <__vector_13+0x84>
		{
			stepper.early = 0;
     b7a:	16 86       	std	Z+14, r1	; 0x0e
			STEPPER_SetRotation(stepper.earlytarget, stepper.earlynext);
     b7c:	60 89       	ldd	r22, Z+16	; 0x10
     b7e:	87 85       	ldd	r24, Z+15	; 0x0f
     b80:	9e df       	rcall	.-196    	; 0xabe <STEPPER_SetRotation>
		}
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     b82:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <stepper+0xb>
     b86:	88 23       	and	r24, r24
     b88:	19 f0       	breq	.+6      	; 0xb90 <__vector_13+0x92>
     b8a:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <stepper+0xd>
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <__vector_13+0x94>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	eb ea       	ldi	r30, 0xAB	; 171
     b94:	f4 e0       	ldi	r31, 0x04	; 4
     b96:	85 87       	std	Z+13, r24	; 0x0d
		OCR2A = accell[stepper._accellStep];
     b98:	e5 85       	ldd	r30, Z+13	; 0x0d
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	e0 5f       	subi	r30, 0xF0	; 240
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	80 81       	ld	r24, Z
     ba2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if ((stepper._currentStep < stepper._targetStep) && (stepper.same == 0))
     ba6:	eb ea       	ldi	r30, 0xAB	; 171
     ba8:	f4 e0       	ldi	r31, 0x04	; 4
     baa:	87 81       	ldd	r24, Z+7	; 0x07
     bac:	25 81       	ldd	r18, Z+5	; 0x05
     bae:	36 81       	ldd	r19, Z+6	; 0x06
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	82 17       	cp	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	0c f0       	brlt	.+2      	; 0xbba <__vector_13+0xbc>
     bb8:	60 c0       	rjmp	.+192    	; 0xc7a <__vector_13+0x17c>
     bba:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <stepper+0xa>
     bbe:	81 11       	cpse	r24, r1
     bc0:	5c c0       	rjmp	.+184    	; 0xc7a <__vector_13+0x17c>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     bc2:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <stepper+0x1>
     bc6:	84 30       	cpi	r24, 0x04	; 4
     bc8:	51 f4       	brne	.+20     	; 0xbde <__vector_13+0xe0>
     bca:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <stepper>
     bce:	e1 e0       	ldi	r30, 0x01	; 1
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	ec 0f       	add	r30, r28
     bd4:	fd 1f       	adc	r31, r29
     bd6:	e8 0f       	add	r30, r24
     bd8:	f1 1d       	adc	r31, r1
     bda:	80 81       	ld	r24, Z
     bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <__vector_13+0xfa>
     bde:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <stepper>
     be2:	e3 e0       	ldi	r30, 0x03	; 3
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	e8 1b       	sub	r30, r24
     be8:	f1 09       	sbc	r31, r1
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	8c 0f       	add	r24, r28
     bf0:	9d 1f       	adc	r25, r29
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	80 81       	ld	r24, Z
     bf8:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     bfa:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <stepper>
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	21 f0       	breq	.+8      	; 0xc0a <__vector_13+0x10c>
     c02:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <stepper>
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <__vector_13+0x10e>
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	eb ea       	ldi	r30, 0xAB	; 171
     c0e:	f4 e0       	ldi	r31, 0x04	; 4
     c10:	80 83       	st	Z, r24

		stepper._currentStep++;
     c12:	87 81       	ldd	r24, Z+7	; 0x07
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._willContinue == 0) && (stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     c18:	83 85       	ldd	r24, Z+11	; 0x0b
     c1a:	81 11       	cpse	r24, r1
     c1c:	15 c0       	rjmp	.+42     	; 0xc48 <__vector_13+0x14a>
     c1e:	85 81       	ldd	r24, Z+5	; 0x05
     c20:	96 81       	ldd	r25, Z+6	; 0x06
     c22:	27 81       	ldd	r18, Z+7	; 0x07
     c24:	82 1b       	sub	r24, r18
     c26:	91 09       	sbc	r25, r1
     c28:	06 97       	sbiw	r24, 0x06	; 6
     c2a:	74 f4       	brge	.+28     	; 0xc48 <__vector_13+0x14a>
     c2c:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <stepper+0xd>
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	e0 5f       	subi	r30, 0xF0	; 240
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	80 81       	ld	r24, Z
     c38:	84 39       	cpi	r24, 0x94	; 148
     c3a:	30 f4       	brcc	.+12     	; 0xc48 <__vector_13+0x14a>
		{
			stepper._accellStep--;
     c3c:	eb ea       	ldi	r30, 0xAB	; 171
     c3e:	f4 e0       	ldi	r31, 0x04	; 4
     c40:	85 85       	ldd	r24, Z+13	; 0x0d
     c42:	81 50       	subi	r24, 0x01	; 1
     c44:	85 87       	std	Z+13, r24	; 0x0d
     c46:	11 c0       	rjmp	.+34     	; 0xc6a <__vector_13+0x16c>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     c48:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <stepper+0x7>
     c4c:	86 30       	cpi	r24, 0x06	; 6
     c4e:	68 f0       	brcs	.+26     	; 0xc6a <__vector_13+0x16c>
     c50:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <stepper+0xd>
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	e0 5f       	subi	r30, 0xF0	; 240
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	80 81       	ld	r24, Z
     c5c:	81 34       	cpi	r24, 0x41	; 65
     c5e:	28 f0       	brcs	.+10     	; 0xc6a <__vector_13+0x16c>
		{
			stepper._accellStep++;
     c60:	eb ea       	ldi	r30, 0xAB	; 171
     c62:	f4 e0       	ldi	r31, 0x04	; 4
     c64:	85 85       	ldd	r24, Z+13	; 0x0d
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	85 87       	std	Z+13, r24	; 0x0d
		}
		OCR2A = accell[stepper._accellStep];
     c6a:	e0 91 b8 04 	lds	r30, 0x04B8	; 0x8004b8 <stepper+0xd>
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	e0 5f       	subi	r30, 0xF0	; 240
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	80 81       	ld	r24, Z
     c76:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	}
	if (stepper._isInitiated != 1)
     c7a:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <stepper+0xc>
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	29 f1       	breq	.+74     	; 0xccc <__vector_13+0x1ce>
	{
		if ((PINE & 0x08) == 0)
     c82:	63 99       	sbic	0x0c, 3	; 12
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__vector_13+0x190>
		{			
			stepper._isInitiated = STEPPER_OFFSET;
     c86:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <STEPPER_OFFSET>
     c8a:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <stepper+0xc>
		}
		if (stepper._isInitiated > 1) stepper._isInitiated--;
     c8e:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <stepper+0xc>
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	28 f0       	brcs	.+10     	; 0xca0 <__vector_13+0x1a2>
     c96:	eb ea       	ldi	r30, 0xAB	; 171
     c98:	f4 e0       	ldi	r31, 0x04	; 4
     c9a:	84 85       	ldd	r24, Z+12	; 0x0c
     c9c:	81 50       	subi	r24, 0x01	; 1
     c9e:	84 87       	std	Z+12, r24	; 0x0c
		if (stepper._isInitiated == 1)
     ca0:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <stepper+0xc>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	91 f4       	brne	.+36     	; 0xccc <__vector_13+0x1ce>
		{
			stepper._isInitiated = 1;
     ca8:	eb ea       	ldi	r30, 0xAB	; 171
     caa:	f4 e0       	ldi	r31, 0x04	; 4
     cac:	84 87       	std	Z+12, r24	; 0x0c
			stepper._stepNum = 0;
     cae:	10 82       	st	Z, r1
			stepper.direction = 1;
     cb0:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     cb2:	13 82       	std	Z+3, r1	; 0x03
     cb4:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     cb6:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     cb8:	16 82       	std	Z+6, r1	; 0x06
     cba:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     cbc:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     cbe:	11 86       	std	Z+9, r1	; 0x09
     cc0:	10 86       	std	Z+8, r1	; 0x08
			stepper._willContinue = 0;
     cc2:	13 86       	std	Z+11, r1	; 0x0b
			stepper._accellStep = 0;
     cc4:	15 86       	std	Z+13, r1	; 0x0d
			stepper.early = 0;
     cc6:	16 86       	std	Z+14, r1	; 0x0e
			stepper.earlynext = 0;
     cc8:	10 8a       	std	Z+16, r1	; 0x10
			stepper.earlytarget = 0;
     cca:	17 86       	std	Z+15, r1	; 0x0f
		}
	}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	ff 91       	pop	r31
     cda:	ef 91       	pop	r30
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	0f 90       	pop	r0
     cf2:	0b be       	out	0x3b, r0	; 59
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <SYS_Init>:
			sei();
			break;
		}
	}
	return;
} // SYS_Calibrate
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	f8 94       	cli
     d06:	e1 e6       	ldi	r30, 0x61	; 97
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 e8       	ldi	r24, 0x80	; 128
     d0c:	80 83       	st	Z, r24
     d0e:	10 82       	st	Z, r1
     d10:	ea d3       	rcall	.+2004   	; 0x14e6 <UART_Init>
     d12:	79 dd       	rcall	.-1294   	; 0x806 <GPIO_Init>
     d14:	6d d3       	rcall	.+1754   	; 0x13f0 <TIMER_Init>
     d16:	39 de       	rcall	.-910    	; 0x98a <PWM_Init>
     d18:	de d9       	rcall	.-3140   	; 0xd6 <ADC_Init>
     d1a:	55 de       	rcall	.-854    	; 0x9c6 <STEPPER_Init>
     d1c:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <g_ADCCount+0x1>
     d20:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <g_ADCCount>
     d24:	84 e1       	ldi	r24, 0x14	; 20
     d26:	ee e3       	ldi	r30, 0x3E	; 62
     d28:	f4 e0       	ldi	r31, 0x04	; 4
     d2a:	df 01       	movw	r26, r30
     d2c:	1d 92       	st	X+, r1
     d2e:	8a 95       	dec	r24
     d30:	e9 f7       	brne	.-6      	; 0xd2c <SYS_Init+0x2e>
     d32:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <g_PauseRequest>
     d36:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <g_WDTimeout>
     d3a:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <g_Timer+0x1>
     d3e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <g_Timer>
     d42:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <g_Lock>
     d46:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <g_ItemInRange>
     d4a:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <HEAD+0x1>
     d4e:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <HEAD>
     d52:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <TAIL+0x1>
     d56:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <TAIL>
     d5a:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <STAGE1+0x1>
     d5e:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <STAGE1>
     d62:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <STAGE2+0x1>
     d66:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <STAGE2>
     d6a:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <FRONT+0x1>
     d6e:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <FRONT>
     d72:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <BUFFER+0x1>
     d76:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <BUFFER>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	44 e0       	ldi	r20, 0x04	; 4
     d7e:	6f ef       	ldi	r22, 0xFF	; 255
     d80:	89 ee       	ldi	r24, 0xE9	; 233
     d82:	9d ef       	ldi	r25, 0xFD	; 253
     d84:	ba dc       	rcall	.-1676   	; 0x6fa <LL_ItemInit>
     d86:	d3 dc       	rcall	.-1626   	; 0x72e <LL_ItemListInit>
     d88:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <HEAD+0x1>
     d8c:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <HEAD>
     d90:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <FRONT+0x1>
     d94:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <FRONT>
     d98:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <BUFFER+0x1>
     d9c:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <BUFFER>
     da0:	ca ef       	ldi	r28, 0xFA	; 250
     da2:	08 ee       	ldi	r16, 0xE8	; 232
     da4:	1d ef       	ldi	r17, 0xFD	; 253
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	44 e0       	ldi	r20, 0x04	; 4
     daa:	6c 2f       	mov	r22, r28
     dac:	c8 01       	movw	r24, r16
     dae:	a5 dc       	rcall	.-1718   	; 0x6fa <LL_ItemInit>
     db0:	bc 01       	movw	r22, r24
     db2:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     db6:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     dba:	cd dc       	rcall	.-1638   	; 0x756 <LL_AddBack>
     dbc:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <TAIL+0x1>
     dc0:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <TAIL>
     dc4:	01 50       	subi	r16, 0x01	; 1
     dc6:	11 09       	sbc	r17, r1
     dc8:	c1 50       	subi	r28, 0x01	; 1
     dca:	cb 3c       	cpi	r28, 0xCB	; 203
     dcc:	61 f7       	brne	.-40     	; 0xda6 <SYS_Init+0xa8>
     dce:	05 e0       	ldi	r16, 0x05	; 5
     dd0:	10 e0       	ldi	r17, 0x00	; 0
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	45 e0       	ldi	r20, 0x05	; 5
     dd6:	6a ef       	ldi	r22, 0xFA	; 250
     dd8:	88 ee       	ldi	r24, 0xE8	; 232
     dda:	9d ef       	ldi	r25, 0xFD	; 253
     ddc:	8e dc       	rcall	.-1764   	; 0x6fa <LL_ItemInit>
     dde:	bc 01       	movw	r22, r24
     de0:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     de4:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     de8:	b6 dc       	rcall	.-1684   	; 0x756 <LL_AddBack>
     dea:	01 50       	subi	r16, 0x01	; 1
     dec:	11 09       	sbc	r17, r1
     dee:	89 f7       	brne	.-30     	; 0xdd2 <SYS_Init+0xd4>
     df0:	84 e6       	ldi	r24, 0x64	; 100
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	90 d3       	rcall	.+1824   	; 0x1516 <UART_SendString>
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <SYS_Pause>:
     dfe:	3f 92       	push	r3
     e00:	4f 92       	push	r4
     e02:	5f 92       	push	r5
     e04:	6f 92       	push	r6
     e06:	7f 92       	push	r7
     e08:	8f 92       	push	r8
     e0a:	9f 92       	push	r9
     e0c:	af 92       	push	r10
     e0e:	bf 92       	push	r11
     e10:	cf 92       	push	r12
     e12:	df 92       	push	r13
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	ca 5f       	subi	r28, 0xFA	; 250
     e26:	d1 09       	sbc	r29, r1
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	f8 2e       	mov	r15, r24
     e34:	e9 2e       	mov	r14, r25
     e36:	f8 94       	cli
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	b0 dd       	rcall	.-1184   	; 0x99e <PWM>
     e3e:	00 91 3a 04 	lds	r16, 0x043A	; 0x80043a <FRONT>
     e42:	10 91 3b 04 	lds	r17, 0x043B	; 0x80043b <FRONT+0x1>
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	8a e7       	ldi	r24, 0x7A	; 122
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	9f 93       	push	r25
     e50:	8f 93       	push	r24
     e52:	ce 01       	movw	r24, r28
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	7c 01       	movw	r14, r24
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	8b d4       	rcall	.+2326   	; 0x1774 <sprintf>
     e5e:	c7 01       	movw	r24, r14
     e60:	5a d3       	rcall	.+1716   	; 0x1516 <UART_SendString>
     e62:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <HEAD>
     e66:	90 91 39 04 	lds	r25, 0x0439	; 0x800439 <HEAD+0x1>
     e6a:	c7 dc       	rcall	.-1650   	; 0x7fa <LL_GetTick>
     e6c:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <g_Timer>
     e70:	30 91 57 04 	lds	r19, 0x0457	; 0x800457 <g_Timer+0x1>
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	3f 93       	push	r19
     e7a:	2f 93       	push	r18
     e7c:	85 e9       	ldi	r24, 0x95	; 149
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	9f 93       	push	r25
     e82:	8f 93       	push	r24
     e84:	ff 92       	push	r15
     e86:	ef 92       	push	r14
     e88:	75 d4       	rcall	.+2282   	; 0x1774 <sprintf>
     e8a:	c7 01       	movw	r24, r14
     e8c:	44 d3       	rcall	.+1672   	; 0x1516 <UART_SendString>
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	e1 2c       	mov	r14, r1
     e9a:	f1 2c       	mov	r15, r1
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f4 eb       	ldi	r31, 0xB4	; 180
     ea0:	af 2e       	mov	r10, r31
     ea2:	f1 e0       	ldi	r31, 0x01	; 1
     ea4:	bf 2e       	mov	r11, r31
     ea6:	f0 2d       	mov	r31, r0
     ea8:	6e 01       	movw	r12, r28
     eaa:	f7 e9       	ldi	r31, 0x97	; 151
     eac:	cf 0e       	add	r12, r31
     eae:	d1 1c       	adc	r13, r1
     eb0:	2d c0       	rjmp	.+90     	; 0xf0c <SYS_Pause+0x10e>
     eb2:	8f ef       	ldi	r24, 0xFF	; 255
     eb4:	e8 1a       	sub	r14, r24
     eb6:	f8 0a       	sbc	r15, r24
     eb8:	c8 01       	movw	r24, r16
     eba:	9f dc       	rcall	.-1730   	; 0x7fa <LL_GetTick>
     ebc:	68 2e       	mov	r6, r24
     ebe:	59 2e       	mov	r5, r25
     ec0:	c8 01       	movw	r24, r16
     ec2:	90 dc       	rcall	.-1760   	; 0x7e4 <LL_GetStatus>
     ec4:	78 2e       	mov	r7, r24
     ec6:	c8 01       	movw	r24, r16
     ec8:	68 dc       	rcall	.-1840   	; 0x79a <LL_GetClass>
     eca:	88 2e       	mov	r8, r24
     ecc:	c8 01       	movw	r24, r16
     ece:	70 dc       	rcall	.-1824   	; 0x7b0 <LL_GetMag>
     ed0:	98 2e       	mov	r9, r24
     ed2:	c8 01       	movw	r24, r16
     ed4:	67 dc       	rcall	.-1842   	; 0x7a4 <LL_GetRefl>
     ed6:	5f 92       	push	r5
     ed8:	6f 92       	push	r6
     eda:	1f 92       	push	r1
     edc:	7f 92       	push	r7
     ede:	1f 92       	push	r1
     ee0:	8f 92       	push	r8
     ee2:	1f 92       	push	r1
     ee4:	9f 92       	push	r9
     ee6:	9f 93       	push	r25
     ee8:	8f 93       	push	r24
     eea:	ff 92       	push	r15
     eec:	ef 92       	push	r14
     eee:	bf 92       	push	r11
     ef0:	af 92       	push	r10
     ef2:	df 92       	push	r13
     ef4:	cf 92       	push	r12
     ef6:	3e d4       	rcall	.+2172   	; 0x1774 <sprintf>
     ef8:	c6 01       	movw	r24, r12
     efa:	0d d3       	rcall	.+1562   	; 0x1516 <UART_SendString>
     efc:	c8 01       	movw	r24, r16
     efe:	27 dc       	rcall	.-1970   	; 0x74e <LL_Next>
     f00:	8c 01       	movw	r16, r24
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	c8 01       	movw	r24, r16
     f0e:	45 dc       	rcall	.-1910   	; 0x79a <LL_GetClass>
     f10:	85 30       	cpi	r24, 0x05	; 5
     f12:	79 f6       	brne	.-98     	; 0xeb2 <SYS_Pause+0xb4>
     f14:	0f 2e       	mov	r0, r31
     f16:	ff e5       	ldi	r31, 0x5F	; 95
     f18:	cf 2e       	mov	r12, r31
     f1a:	f4 e0       	ldi	r31, 0x04	; 4
     f1c:	df 2e       	mov	r13, r31
     f1e:	f0 2d       	mov	r31, r0
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	0f 2e       	mov	r0, r31
     f26:	f2 ef       	ldi	r31, 0xF2	; 242
     f28:	af 2e       	mov	r10, r31
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	bf 2e       	mov	r11, r31
     f2e:	f0 2d       	mov	r31, r0
     f30:	7e 01       	movw	r14, r28
     f32:	f7 e9       	ldi	r31, 0x97	; 151
     f34:	ef 0e       	add	r14, r31
     f36:	f1 1c       	adc	r15, r1
     f38:	f6 01       	movw	r30, r12
     f3a:	80 85       	ldd	r24, Z+8	; 0x08
     f3c:	1f 92       	push	r1
     f3e:	8f 93       	push	r24
     f40:	1f 93       	push	r17
     f42:	0f 93       	push	r16
     f44:	bf 92       	push	r11
     f46:	af 92       	push	r10
     f48:	ff 92       	push	r15
     f4a:	ef 92       	push	r14
     f4c:	13 d4       	rcall	.+2086   	; 0x1774 <sprintf>
     f4e:	c7 01       	movw	r24, r14
     f50:	e2 d2       	rcall	.+1476   	; 0x1516 <UART_SendString>
     f52:	0f 5f       	subi	r16, 0xFF	; 255
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	f9 e0       	ldi	r31, 0x09	; 9
     f58:	cf 0e       	add	r12, r31
     f5a:	d1 1c       	adc	r13, r1
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	07 30       	cpi	r16, 0x07	; 7
     f68:	11 05       	cpc	r17, r1
     f6a:	31 f7       	brne	.-52     	; 0xf38 <SYS_Pause+0x13a>
     f6c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <STAGE2>
     f70:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     f74:	17 dc       	rcall	.-2002   	; 0x7a4 <LL_GetRefl>
     f76:	48 2e       	mov	r4, r24
     f78:	39 2e       	mov	r3, r25
     f7a:	60 90 a7 04 	lds	r6, 0x04A7	; 0x8004a7 <STAGE2>
     f7e:	50 90 a8 04 	lds	r5, 0x04A8	; 0x8004a8 <STAGE2+0x1>
     f82:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <STAGE1>
     f86:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <STAGE1+0x1>
     f8a:	12 dc       	rcall	.-2012   	; 0x7b0 <LL_GetMag>
     f8c:	78 2e       	mov	r7, r24
     f8e:	90 90 5d 04 	lds	r9, 0x045D	; 0x80045d <STAGE1>
     f92:	80 90 5e 04 	lds	r8, 0x045E	; 0x80045e <STAGE1+0x1>
     f96:	00 91 3c 04 	lds	r16, 0x043C	; 0x80043c <TAIL>
     f9a:	10 91 3d 04 	lds	r17, 0x043D	; 0x80043d <TAIL+0x1>
     f9e:	f8 01       	movw	r30, r16
     fa0:	b2 80       	ldd	r11, Z+2	; 0x02
     fa2:	a3 80       	ldd	r10, Z+3	; 0x03
     fa4:	d0 90 3a 04 	lds	r13, 0x043A	; 0x80043a <FRONT>
     fa8:	c0 90 3b 04 	lds	r12, 0x043B	; 0x80043b <FRONT+0x1>
     fac:	f0 90 38 04 	lds	r15, 0x0438	; 0x800438 <HEAD>
     fb0:	e0 90 39 04 	lds	r14, 0x0439	; 0x800439 <HEAD+0x1>
     fb4:	8f 2d       	mov	r24, r15
     fb6:	9e 2d       	mov	r25, r14
     fb8:	df db       	rcall	.-2114   	; 0x778 <LL_Size>
     fba:	3f 92       	push	r3
     fbc:	4f 92       	push	r4
     fbe:	5f 92       	push	r5
     fc0:	6f 92       	push	r6
     fc2:	1f 92       	push	r1
     fc4:	7f 92       	push	r7
     fc6:	8f 92       	push	r8
     fc8:	9f 92       	push	r9
     fca:	af 92       	push	r10
     fcc:	bf 92       	push	r11
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	1f 93       	push	r17
     fd4:	0f 93       	push	r16
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	1f 92       	push	r1
     fdc:	8f 93       	push	r24
     fde:	89 e0       	ldi	r24, 0x09	; 9
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	9f 93       	push	r25
     fe4:	8f 93       	push	r24
     fe6:	8e 01       	movw	r16, r28
     fe8:	0b 59       	subi	r16, 0x9B	; 155
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	1f 93       	push	r17
     fee:	0f 93       	push	r16
     ff0:	c1 d3       	rcall	.+1922   	; 0x1774 <sprintf>
     ff2:	c8 01       	movw	r24, r16
     ff4:	90 d2       	rcall	.+1312   	; 0x1516 <UART_SendString>
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	89 b1       	in	r24, 0x09	; 9
    1002:	83 70       	andi	r24, 0x03	; 3
    1004:	e9 f7       	brne	.-6      	; 0x1000 <SYS_Pause+0x202>
    1006:	84 e2       	ldi	r24, 0x24	; 36
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	85 d2       	rcall	.+1290   	; 0x1516 <UART_SendString>
    100c:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <g_PauseRequest>
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	c4 dc       	rcall	.-1656   	; 0x99e <PWM>
    1016:	78 94       	sei
    1018:	c6 50       	subi	r28, 0x06	; 6
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	08 95       	ret

0000104a <SYS_Rampdown>:

void SYS_Rampdown()
{
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	ca 56       	subi	r28, 0x6A	; 106
    105a:	d1 09       	sbc	r29, r1
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1066:	fe 01       	movw	r30, r28
    1068:	31 96       	adiw	r30, 0x01	; 1
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	df 01       	movw	r26, r30
    106e:	1d 92       	st	X+, r1
    1070:	8a 95       	dec	r24
    1072:	e9 f7       	brne	.-6      	; 0x106e <SYS_Rampdown+0x24>
	uint8_t total = 0;
	
	char str[100];
	
	list* temp = FRONT;
    1074:	00 91 3a 04 	lds	r16, 0x043A	; 0x80043a <FRONT>
    1078:	10 91 3b 04 	lds	r17, 0x043B	; 0x80043b <FRONT+0x1>
	
	cli();
    107c:	f8 94       	cli
	PORTD = 0;
    107e:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    1080:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	8b dc       	rcall	.-1770   	; 0x99e <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    1088:	8f e8       	ldi	r24, 0x8F	; 143
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	44 d2       	rcall	.+1160   	; 0x1516 <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    108e:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <SYS_Rampdown+0x66>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    1092:	f3 94       	inc	r15
    1094:	c8 01       	movw	r24, r16
    1096:	81 db       	rcall	.-2302   	; 0x79a <LL_GetClass>
    1098:	e1 e0       	ldi	r30, 0x01	; 1
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	ec 0f       	add	r30, r28
    109e:	fd 1f       	adc	r31, r29
    10a0:	e8 0f       	add	r30, r24
    10a2:	f1 1d       	adc	r31, r1
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    10a8:	80 83       	st	Z, r24
    10aa:	c8 01       	movw	r24, r16
    10ac:	50 db       	rcall	.-2400   	; 0x74e <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    10ae:	8c 01       	movw	r16, r24
    10b0:	c8 01       	movw	r24, r16
    10b2:	98 db       	rcall	.-2256   	; 0x7e4 <LL_GetStatus>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	69 f3       	breq	.-38     	; 0x1092 <SYS_Rampdown+0x48>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	1f 92       	push	r1
    10bc:	8f 93       	push	r24
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	1f 92       	push	r1
    10c2:	8f 93       	push	r24
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	1f 92       	push	r1
    10c8:	8f 93       	push	r24
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	1f 92       	push	r1
    10ce:	8f 93       	push	r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	1f 92       	push	r1
    10d4:	8f 93       	push	r24
    10d6:	1f 92       	push	r1
    10d8:	ff 92       	push	r15
    10da:	84 eb       	ldi	r24, 0xB4	; 180
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	8e 01       	movw	r16, r28
    10e4:	09 5f       	subi	r16, 0xF9	; 249
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	1f 93       	push	r17
    10ea:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    10ec:	43 d3       	rcall	.+1670   	; 0x1774 <sprintf>
    10ee:	c8 01       	movw	r24, r16
    10f0:	12 d2       	rcall	.+1060   	; 0x1516 <UART_SendString>
	//SYS_Calibrate("Get Calibration Stats:");
}
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	c6 59       	subi	r28, 0x96	; 150
    10fe:	df 4f       	sbci	r29, 0xFF	; 255
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	08 95       	ret

00001116 <SYS_Test>:
void SYS_Test(char str[20])
{
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	ce 5c       	subi	r28, 0xCE	; 206
    1132:	d1 09       	sbc	r29, r1
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	7c 01       	movw	r14, r24
	//
	cli();
    1140:	f8 94       	cli
	PWM(0);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	2b dc       	rcall	.-1962   	; 0x99e <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
    1148:	00 91 3a 04 	lds	r16, 0x043A	; 0x80043a <FRONT>
    114c:	10 91 3b 04 	lds	r17, 0x043B	; 0x80043b <FRONT+0x1>
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1150:	fe 01       	movw	r30, r28
    1152:	eb 59       	subi	r30, 0x9B	; 155
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	df 01       	movw	r26, r30
    115a:	1d 92       	st	X+, r1
    115c:	8a 95       	dec	r24
    115e:	e9 f7       	brne	.-6      	; 0x115a <SYS_Test+0x44>
	uint8_t total = 0;

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
    1160:	c7 01       	movw	r24, r14
    1162:	d9 d1       	rcall	.+946    	; 0x1516 <UART_SendString>
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
	
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    1164:	f1 2c       	mov	r15, r1

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <SYS_Test+0x70>
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
    1168:	f3 94       	inc	r15
    116a:	c8 01       	movw	r24, r16
    116c:	16 db       	rcall	.-2516   	; 0x79a <LL_GetClass>
    116e:	e5 e6       	ldi	r30, 0x65	; 101
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	ec 0f       	add	r30, r28
    1174:	fd 1f       	adc	r31, r29
    1176:	e8 0f       	add	r30, r24
    1178:	f1 1d       	adc	r31, r1
    117a:	80 81       	ld	r24, Z
    117c:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    117e:	80 83       	st	Z, r24
    1180:	c8 01       	movw	r24, r16
    1182:	e5 da       	rcall	.-2614   	; 0x74e <LL_Next>

	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
	
	while(LL_GetStatus(temp) == EXPIRED)
    1184:	8c 01       	movw	r16, r24
    1186:	c8 01       	movw	r24, r16
    1188:	2d db       	rcall	.-2470   	; 0x7e4 <LL_GetStatus>
    118a:	83 30       	cpi	r24, 0x03	; 3
	{
		total++;
		sortedStats[LL_GetClass(temp)] += 1;
		temp = LL_Next(temp);
	}
	UART_SendString("\r\nSorted items...\r\n\r\n");
    118c:	69 f3       	breq	.-38     	; 0x1168 <SYS_Test+0x52>
    118e:	83 e1       	ldi	r24, 0x13	; 19
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	c1 d1       	rcall	.+898    	; 0x1516 <UART_SendString>
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    1194:	aa 96       	adiw	r28, 0x2a	; 42
    1196:	8f ad       	ldd	r24, Y+63	; 0x3f
    1198:	aa 97       	sbiw	r28, 0x2a	; 42
    119a:	1f 92       	push	r1
    119c:	8f 93       	push	r24
    119e:	a8 96       	adiw	r28, 0x28	; 40
    11a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    11a2:	a8 97       	sbiw	r28, 0x28	; 40
    11a4:	1f 92       	push	r1
    11a6:	8f 93       	push	r24
    11a8:	a9 96       	adiw	r28, 0x29	; 41
    11aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    11ac:	a9 97       	sbiw	r28, 0x29	; 41
    11ae:	1f 92       	push	r1
    11b0:	8f 93       	push	r24
    11b2:	a6 96       	adiw	r28, 0x26	; 38
    11b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    11b6:	a6 97       	sbiw	r28, 0x26	; 38
    11b8:	1f 92       	push	r1
    11ba:	8f 93       	push	r24
    11bc:	a7 96       	adiw	r28, 0x27	; 39
    11be:	8f ad       	ldd	r24, Y+63	; 0x3f
    11c0:	a7 97       	sbiw	r28, 0x27	; 39
    11c2:	1f 92       	push	r1
    11c4:	8f 93       	push	r24
    11c6:	1f 92       	push	r1
    11c8:	ff 92       	push	r15
    11ca:	84 eb       	ldi	r24, 0xB4	; 180
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	ce 01       	movw	r24, r28
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	7c 01       	movw	r14, r24
    11d8:	9f 93       	push	r25
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
    11da:	8f 93       	push	r24
    11dc:	cb d2       	rcall	.+1430   	; 0x1774 <sprintf>
    11de:	c7 01       	movw	r24, r14
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
    11e0:	9a d1       	rcall	.+820    	; 0x1516 <UART_SendString>
    11e2:	89 e2       	ldi	r24, 0x29	; 41
    11e4:	93 e0       	ldi	r25, 0x03	; 3
    11e6:	97 d1       	rcall	.+814    	; 0x1516 <UART_SendString>
	while (LL_GetStatus(temp) == SORTABLE)
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
    11f2:	e1 2c       	mov	r14, r1
    11f4:	f1 2c       	mov	r15, r1
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    11f6:	0f 2e       	mov	r0, r31
    11f8:	fd e4       	ldi	r31, 0x4D	; 77
    11fa:	af 2e       	mov	r10, r31
    11fc:	f3 e0       	ldi	r31, 0x03	; 3
    11fe:	bf 2e       	mov	r11, r31
    1200:	f0 2d       	mov	r31, r0
    1202:	6e 01       	movw	r12, r28
    1204:	bb e6       	ldi	r27, 0x6B	; 107
    1206:	cb 0e       	add	r12, r27
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    1208:	d1 1c       	adc	r13, r1
	{
		char listbuff[100];
		c++;
    120a:	1d c0       	rjmp	.+58     	; 0x1246 <SYS_Test+0x130>
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    1210:	f8 0a       	sbc	r15, r24
    1212:	c8 01       	movw	r24, r16
    1214:	cd da       	rcall	.-2662   	; 0x7b0 <LL_GetMag>
    1216:	98 2e       	mov	r9, r24
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    1218:	c8 01       	movw	r24, r16
    121a:	c4 da       	rcall	.-2680   	; 0x7a4 <LL_GetRefl>
    121c:	1f 92       	push	r1
    121e:	9f 92       	push	r9
    1220:	9f 93       	push	r25
    1222:	8f 93       	push	r24
    1224:	ff 92       	push	r15
    1226:	ef 92       	push	r14
    1228:	bf 92       	push	r11
    122a:	af 92       	push	r10
    122c:	df 92       	push	r13
    122e:	cf 92       	push	r12
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    1230:	a1 d2       	rcall	.+1346   	; 0x1774 <sprintf>
    1232:	c6 01       	movw	r24, r12
    1234:	70 d1       	rcall	.+736    	; 0x1516 <UART_SendString>
		temp = LL_Next(temp);
    1236:	c8 01       	movw	r24, r16
    1238:	8a da       	rcall	.-2796   	; 0x74e <LL_Next>
    123a:	8c 01       	movw	r16, r24
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
	UART_SendString("\r\nSorted items...\r\n\r\n");
	sprintf(buffer,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
	total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(buffer);
	UART_SendString("\r\n\r\nItems Ready for sorting... \r\n\r\n");
	while (LL_GetStatus(temp) == SORTABLE)
    1246:	c8 01       	movw	r24, r16
    1248:	cd da       	rcall	.-2662   	; 0x7e4 <LL_GetStatus>
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	f9 f2       	breq	.-66     	; 0x120c <SYS_Test+0xf6>
    124e:	86 e7       	ldi	r24, 0x76	; 118
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	61 d1       	rcall	.+706    	; 0x1516 <UART_SendString>
    1254:	0f 2e       	mov	r0, r31
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    1256:	fd e4       	ldi	r31, 0x4D	; 77
    1258:	af 2e       	mov	r10, r31
    125a:	f3 e0       	ldi	r31, 0x03	; 3
    125c:	bf 2e       	mov	r11, r31
    125e:	f0 2d       	mov	r31, r0
    1260:	6e 01       	movw	r12, r28
    1262:	bb e6       	ldi	r27, 0x6B	; 107
    1264:	cb 0e       	add	r12, r27
    1266:	d1 1c       	adc	r13, r1
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    1268:	1d c0       	rjmp	.+58     	; 0x12a4 <SYS_Test+0x18e>
	{
		char listbuff[100];
		c++;
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	e8 1a       	sub	r14, r24
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
		c, LL_GetRefl(temp), LL_GetMag(temp));
    126e:	f8 0a       	sbc	r15, r24
    1270:	c8 01       	movw	r24, r16
    1272:	9e da       	rcall	.-2756   	; 0x7b0 <LL_GetMag>
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item %d: Reflectance: %u, Magnetic: %u\r\n",
    1274:	98 2e       	mov	r9, r24
    1276:	c8 01       	movw	r24, r16
    1278:	95 da       	rcall	.-2774   	; 0x7a4 <LL_GetRefl>
    127a:	1f 92       	push	r1
    127c:	9f 92       	push	r9
    127e:	9f 93       	push	r25
    1280:	8f 93       	push	r24
    1282:	ff 92       	push	r15
    1284:	ef 92       	push	r14
    1286:	bf 92       	push	r11
    1288:	af 92       	push	r10
    128a:	df 92       	push	r13
    128c:	cf 92       	push	r12
    128e:	72 d2       	rcall	.+1252   	; 0x1774 <sprintf>
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
    1290:	c6 01       	movw	r24, r12
    1292:	41 d1       	rcall	.+642    	; 0x1516 <UART_SendString>
		temp = LL_Next(temp);
    1294:	c8 01       	movw	r24, r16
    1296:	5b da       	rcall	.-2890   	; 0x74e <LL_Next>
    1298:	8c 01       	movw	r16, r24
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
		c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	UART_SendString("\r\n\r\nItems ready for scanning...\r\n\r\n");
	while (LL_GetStatus(temp) == INITIALIZED)
    12a4:	c8 01       	movw	r24, r16
    12a6:	9e da       	rcall	.-2756   	; 0x7e4 <LL_GetStatus>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	f9 f2       	breq	.-66     	; 0x126a <SYS_Test+0x154>
    12ac:	89 b1       	in	r24, 0x09	; 9
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    12ae:	83 70       	andi	r24, 0x03	; 3
    12b0:	e9 f7       	brne	.-6      	; 0x12ac <SYS_Test+0x196>
    12b2:	84 e2       	ldi	r24, 0x24	; 36
		{
			UART_SendString("Starting System!\r\n");
    12b4:	91 e0       	ldi	r25, 0x01	; 1
    12b6:	2f d1       	rcall	.+606    	; 0x1516 <UART_SendString>
    12b8:	80 e8       	ldi	r24, 0x80	; 128
    12ba:	90 e0       	ldi	r25, 0x00	; 0
			PWM(0x80);
    12bc:	70 db       	rcall	.-2336   	; 0x99e <PWM>
    12be:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <g_PauseRequest>
    12c2:	78 94       	sei
			g_PauseRequest = 0;
    12c4:	c2 53       	subi	r28, 0x32	; 50
    12c6:	df 4f       	sbci	r29, 0xFF	; 255
			sei();
    12c8:	0f b6       	in	r0, 0x3f	; 63
			break;
		}
	}
	return;
} // SYS_Test
    12ca:	f8 94       	cli
    12cc:	de bf       	out	0x3e, r29	; 62
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	ff 90       	pop	r15
    12dc:	ef 90       	pop	r14
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	bf 90       	pop	r11
    12e4:	af 90       	pop	r10
    12e6:	9f 90       	pop	r9
    12e8:	08 95       	ret

000012ea <SYS_Unclassified>:
    12ea:	8a e9       	ldi	r24, 0x9A	; 154
    12ec:	93 e0       	ldi	r25, 0x03	; 3
    12ee:	13 d1       	rcall	.+550    	; 0x1516 <UART_SendString>
void SYS_Unclassified()
{
	UART_SendString("\r\n\r\n\r\nUNCLASSIFIED ITEM DETECTED\r\n\r\n\r\n");
	UART_SendString("Item statistics:\r\nReflectance: %u, Magnetic: %u\r\n");
    12f0:	81 ec       	ldi	r24, 0xC1	; 193
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	10 d1       	rcall	.+544    	; 0x1516 <UART_SendString>
	UART_SendString("\r\n\r\n\r\nPlease remove item and push both buttons to resume\r\n\r\n\r\n");
    12f6:	83 ef       	ldi	r24, 0xF3	; 243
    12f8:	93 e0       	ldi	r25, 0x03	; 3
    12fa:	0d d1       	rcall	.+538    	; 0x1516 <UART_SendString>
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    12fc:	89 b1       	in	r24, 0x09	; 9
    12fe:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    1300:	e9 f7       	brne	.-6      	; 0x12fc <SYS_Unclassified+0x12>
    1302:	84 e2       	ldi	r24, 0x24	; 36
    1304:	91 e0       	ldi	r25, 0x01	; 1
			PWM(0x80);
    1306:	07 d1       	rcall	.+526    	; 0x1516 <UART_SendString>
    1308:	80 e8       	ldi	r24, 0x80	; 128
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	48 db       	rcall	.-2416   	; 0x99e <PWM>
			g_UnclassifiedRequest = 0;
    130e:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <g_UnclassifiedRequest>
			sei();
    1312:	78 94       	sei
    1314:	08 95       	ret

00001316 <__vector_17>:
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	0b b6       	in	r0, 0x3b	; 59
    1322:	0f 92       	push	r0
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	2f 93       	push	r18
    132e:	3f 93       	push	r19
    1330:	4f 93       	push	r20
    1332:	5f 93       	push	r21
    1334:	6f 93       	push	r22
    1336:	7f 93       	push	r23
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ef 93       	push	r30
    1346:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    1348:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <_timer_tick>
    134c:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <_timer_tick+0x1>
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <_timer_tick+0x1>
    1356:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <_timer_tick>
    135a:	cf e5       	ldi	r28, 0x5F	; 95
    135c:	d4 e0       	ldi	r29, 0x04	; 4
    135e:	0f 2e       	mov	r0, r31
    1360:	f7 ea       	ldi	r31, 0xA7	; 167
    1362:	ef 2e       	mov	r14, r31
    1364:	f4 e0       	ldi	r31, 0x04	; 4
    1366:	ff 2e       	mov	r15, r31
    1368:	f0 2d       	mov	r31, r0
    136a:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    136c:	ec 81       	ldd	r30, Y+4	; 0x04
    136e:	fd 81       	ldd	r31, Y+5	; 0x05
    1370:	30 97       	sbiw	r30, 0x00	; 0
    1372:	09 f1       	breq	.+66     	; 0x13b6 <__vector_17+0xa0>
    1374:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <_timer_tick>
    1378:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <_timer_tick+0x1>
    137c:	28 81       	ld	r18, Y
    137e:	39 81       	ldd	r19, Y+1	; 0x01
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	c1 f4       	brne	.+48     	; 0x13b6 <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    1386:	88 85       	ldd	r24, Y+8	; 0x08
    1388:	82 30       	cpi	r24, 0x02	; 2
    138a:	19 f4       	brne	.+6      	; 0x1392 <__vector_17+0x7c>
    138c:	8e 81       	ldd	r24, Y+6	; 0x06
    138e:	9f 81       	ldd	r25, Y+7	; 0x07
    1390:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1392:	d8 01       	movw	r26, r16
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	8d 91       	ld	r24, X+
    1398:	9c 91       	ld	r25, X
    139a:	13 97       	sbiw	r26, 0x03	; 3
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	41 f0       	breq	.+16     	; 0x13b0 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    13a0:	2d 91       	ld	r18, X+
    13a2:	3c 91       	ld	r19, X
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	8d 93       	st	X+, r24
    13ac:	9c 93       	st	X, r25
    13ae:	03 c0       	rjmp	.+6      	; 0x13b6 <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    13b0:	f8 01       	movw	r30, r16
    13b2:	15 82       	std	Z+5, r1	; 0x05
    13b4:	14 82       	std	Z+4, r1	; 0x04
    13b6:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    13b8:	ce 15       	cp	r28, r14
    13ba:	df 05       	cpc	r29, r15
    13bc:	b1 f6       	brne	.-84     	; 0x136a <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	0f 90       	pop	r0
    13e4:	0b be       	out	0x3b, r0	; 59
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    13f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    13f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    13f8:	88 e4       	ldi	r24, 0x48	; 72
    13fa:	98 e0       	ldi	r25, 0x08	; 8
    13fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1400:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1404:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1414:	88 e4       	ldi	r24, 0x48	; 72
    1416:	ef e5       	ldi	r30, 0x5F	; 95
    1418:	f4 e0       	ldi	r31, 0x04	; 4
    141a:	df 01       	movw	r26, r30
    141c:	1d 92       	st	X+, r1
    141e:	8a 95       	dec	r24
    1420:	e9 f7       	brne	.-6      	; 0x141c <TIMER_Init+0x2c>
    1422:	08 95       	ret

00001424 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    142e:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <_timer+0x4>
    1432:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <_timer+0x5>
    1436:	67 2b       	or	r22, r23
    1438:	09 f4       	brne	.+2      	; 0x143c <TIMER_Create+0x18>
    143a:	49 c0       	rjmp	.+146    	; 0x14ce <TIMER_Create+0xaa>
    143c:	ef e5       	ldi	r30, 0x5F	; 95
    143e:	f4 e0       	ldi	r31, 0x04	; 4
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1440:	a1 e0       	ldi	r26, 0x01	; 1
    1442:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1444:	c5 85       	ldd	r28, Z+13	; 0x0d
    1446:	d6 85       	ldd	r29, Z+14	; 0x0e
    1448:	cd 2b       	or	r28, r29
    144a:	09 f4       	brne	.+2      	; 0x144e <TIMER_Create+0x2a>
    144c:	42 c0       	rjmp	.+132    	; 0x14d2 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	39 96       	adiw	r30, 0x09	; 9
    1452:	a8 30       	cpi	r26, 0x08	; 8
    1454:	b1 05       	cpc	r27, r1
    1456:	b1 f7       	brne	.-20     	; 0x1444 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    145e:	fd 01       	movw	r30, r26
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	ee 0f       	add	r30, r30
    1466:	ff 1f       	adc	r31, r31
    1468:	ee 0f       	add	r30, r30
    146a:	ff 1f       	adc	r31, r31
    146c:	ea 0f       	add	r30, r26
    146e:	fb 1f       	adc	r31, r27
    1470:	e1 5a       	subi	r30, 0xA1	; 161
    1472:	fb 4f       	sbci	r31, 0xFB	; 251
    1474:	93 83       	std	Z+3, r25	; 0x03
    1476:	82 83       	std	Z+2, r24	; 0x02
    1478:	0d c0       	rjmp	.+26     	; 0x1494 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    147a:	fd 01       	movw	r30, r26
    147c:	ee 0f       	add	r30, r30
    147e:	ff 1f       	adc	r31, r31
    1480:	ee 0f       	add	r30, r30
    1482:	ff 1f       	adc	r31, r31
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	ea 0f       	add	r30, r26
    148a:	fb 1f       	adc	r31, r27
    148c:	e1 5a       	subi	r30, 0xA1	; 161
    148e:	fb 4f       	sbci	r31, 0xFB	; 251
    1490:	13 82       	std	Z+3, r1	; 0x03
    1492:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1494:	fd 01       	movw	r30, r26
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	ee 0f       	add	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	ea 0f       	add	r30, r26
    14a4:	fb 1f       	adc	r31, r27
    14a6:	e1 5a       	subi	r30, 0xA1	; 161
    14a8:	fb 4f       	sbci	r31, 0xFB	; 251
    14aa:	55 83       	std	Z+5, r21	; 0x05
    14ac:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    14ae:	37 83       	std	Z+7, r19	; 0x07
    14b0:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    14b2:	20 91 36 04 	lds	r18, 0x0436	; 0x800436 <_timer_tick>
    14b6:	30 91 37 04 	lds	r19, 0x0437	; 0x800437 <_timer_tick+0x1>
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
			_timer[i].state = READY;
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    14c6:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    14c8:	8a 2f       	mov	r24, r26
    14ca:	9b 2f       	mov	r25, r27
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    14ce:	a0 e0       	ldi	r26, 0x00	; 0
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    14d2:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    14d4:	f8 94       	cli
		{
			if (periodic != 0) 
    14d6:	01 2b       	or	r16, r17
    14d8:	11 f6       	brne	.-124    	; 0x145e <TIMER_Create+0x3a>
    14da:	cf cf       	rjmp	.-98     	; 0x147a <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    14e6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    14ea:	83 e3       	ldi	r24, 0x33	; 51
    14ec:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    14f0:	e9 ec       	ldi	r30, 0xC9	; 201
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 61       	ori	r24, 0x18	; 24
    14f8:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    14fa:	ea ec       	ldi	r30, 0xCA	; 202
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	86 60       	ori	r24, 0x06	; 6
    1502:	80 83       	st	Z, r24
    1504:	08 95       	ret

00001506 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    1506:	e8 ec       	ldi	r30, 0xC8	; 200
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	90 81       	ld	r25, Z
    150c:	95 ff       	sbrs	r25, 5
    150e:	fd cf       	rjmp	.-6      	; 0x150a <UART_SendChar+0x4>
	UDR1 = c;
    1510:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1514:	08 95       	ret

00001516 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    151c:	88 81       	ld	r24, Y
    151e:	88 23       	and	r24, r24
    1520:	29 f0       	breq	.+10     	; 0x152c <UART_SendString+0x16>
    1522:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1524:	f0 df       	rcall	.-32     	; 0x1506 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1526:	89 91       	ld	r24, Y+
    1528:	81 11       	cpse	r24, r1
    152a:	fc cf       	rjmp	.-8      	; 0x1524 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <malloc>:
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	91 05       	cpc	r25, r1
    153e:	10 f4       	brcc	.+4      	; 0x1544 <malloc+0x12>
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <__flp>
    1548:	f0 91 bf 04 	lds	r31, 0x04BF	; 0x8004bf <__flp+0x1>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	30 97       	sbiw	r30, 0x00	; 0
    1556:	19 f1       	breq	.+70     	; 0x159e <malloc+0x6c>
    1558:	40 81       	ld	r20, Z
    155a:	51 81       	ldd	r21, Z+1	; 0x01
    155c:	02 81       	ldd	r16, Z+2	; 0x02
    155e:	13 81       	ldd	r17, Z+3	; 0x03
    1560:	48 17       	cp	r20, r24
    1562:	59 07       	cpc	r21, r25
    1564:	c8 f0       	brcs	.+50     	; 0x1598 <malloc+0x66>
    1566:	84 17       	cp	r24, r20
    1568:	95 07       	cpc	r25, r21
    156a:	69 f4       	brne	.+26     	; 0x1586 <malloc+0x54>
    156c:	10 97       	sbiw	r26, 0x00	; 0
    156e:	31 f0       	breq	.+12     	; 0x157c <malloc+0x4a>
    1570:	12 96       	adiw	r26, 0x02	; 2
    1572:	0c 93       	st	X, r16
    1574:	12 97       	sbiw	r26, 0x02	; 2
    1576:	13 96       	adiw	r26, 0x03	; 3
    1578:	1c 93       	st	X, r17
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <malloc+0x98>
    157c:	00 93 be 04 	sts	0x04BE, r16	; 0x8004be <__flp>
    1580:	10 93 bf 04 	sts	0x04BF, r17	; 0x8004bf <__flp+0x1>
    1584:	22 c0       	rjmp	.+68     	; 0x15ca <malloc+0x98>
    1586:	21 15       	cp	r18, r1
    1588:	31 05       	cpc	r19, r1
    158a:	19 f0       	breq	.+6      	; 0x1592 <malloc+0x60>
    158c:	42 17       	cp	r20, r18
    158e:	53 07       	cpc	r21, r19
    1590:	18 f4       	brcc	.+6      	; 0x1598 <malloc+0x66>
    1592:	9a 01       	movw	r18, r20
    1594:	bd 01       	movw	r22, r26
    1596:	ef 01       	movw	r28, r30
    1598:	df 01       	movw	r26, r30
    159a:	f8 01       	movw	r30, r16
    159c:	db cf       	rjmp	.-74     	; 0x1554 <malloc+0x22>
    159e:	21 15       	cp	r18, r1
    15a0:	31 05       	cpc	r19, r1
    15a2:	f9 f0       	breq	.+62     	; 0x15e2 <malloc+0xb0>
    15a4:	28 1b       	sub	r18, r24
    15a6:	39 0b       	sbc	r19, r25
    15a8:	24 30       	cpi	r18, 0x04	; 4
    15aa:	31 05       	cpc	r19, r1
    15ac:	80 f4       	brcc	.+32     	; 0x15ce <malloc+0x9c>
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	61 15       	cp	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <malloc+0x8e>
    15b8:	fb 01       	movw	r30, r22
    15ba:	93 83       	std	Z+3, r25	; 0x03
    15bc:	82 83       	std	Z+2, r24	; 0x02
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <malloc+0x96>
    15c0:	90 93 bf 04 	sts	0x04BF, r25	; 0x8004bf <__flp+0x1>
    15c4:	80 93 be 04 	sts	0x04BE, r24	; 0x8004be <__flp>
    15c8:	fe 01       	movw	r30, r28
    15ca:	32 96       	adiw	r30, 0x02	; 2
    15cc:	44 c0       	rjmp	.+136    	; 0x1656 <malloc+0x124>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	81 93       	st	Z+, r24
    15d6:	91 93       	st	Z+, r25
    15d8:	22 50       	subi	r18, 0x02	; 2
    15da:	31 09       	sbc	r19, r1
    15dc:	39 83       	std	Y+1, r19	; 0x01
    15de:	28 83       	st	Y, r18
    15e0:	3a c0       	rjmp	.+116    	; 0x1656 <malloc+0x124>
    15e2:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <__brkval>
    15e6:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <__brkval+0x1>
    15ea:	23 2b       	or	r18, r19
    15ec:	41 f4       	brne	.+16     	; 0x15fe <malloc+0xcc>
    15ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    15f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    15f6:	30 93 bd 04 	sts	0x04BD, r19	; 0x8004bd <__brkval+0x1>
    15fa:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <__brkval>
    15fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1602:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	41 f4       	brne	.+16     	; 0x161c <malloc+0xea>
    160c:	2d b7       	in	r18, 0x3d	; 61
    160e:	3e b7       	in	r19, 0x3e	; 62
    1610:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1614:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1618:	24 1b       	sub	r18, r20
    161a:	35 0b       	sbc	r19, r21
    161c:	e0 91 bc 04 	lds	r30, 0x04BC	; 0x8004bc <__brkval>
    1620:	f0 91 bd 04 	lds	r31, 0x04BD	; 0x8004bd <__brkval+0x1>
    1624:	e2 17       	cp	r30, r18
    1626:	f3 07       	cpc	r31, r19
    1628:	a0 f4       	brcc	.+40     	; 0x1652 <malloc+0x120>
    162a:	2e 1b       	sub	r18, r30
    162c:	3f 0b       	sbc	r19, r31
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	78 f0       	brcs	.+30     	; 0x1652 <malloc+0x120>
    1634:	ac 01       	movw	r20, r24
    1636:	4e 5f       	subi	r20, 0xFE	; 254
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	24 17       	cp	r18, r20
    163c:	35 07       	cpc	r19, r21
    163e:	48 f0       	brcs	.+18     	; 0x1652 <malloc+0x120>
    1640:	4e 0f       	add	r20, r30
    1642:	5f 1f       	adc	r21, r31
    1644:	50 93 bd 04 	sts	0x04BD, r21	; 0x8004bd <__brkval+0x1>
    1648:	40 93 bc 04 	sts	0x04BC, r20	; 0x8004bc <__brkval>
    164c:	81 93       	st	Z+, r24
    164e:	91 93       	st	Z+, r25
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <malloc+0x124>
    1652:	e0 e0       	ldi	r30, 0x00	; 0
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	cf 01       	movw	r24, r30
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <free>:
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	09 f4       	brne	.+2      	; 0x166c <free+0xa>
    166a:	81 c0       	rjmp	.+258    	; 0x176e <free+0x10c>
    166c:	fc 01       	movw	r30, r24
    166e:	32 97       	sbiw	r30, 0x02	; 2
    1670:	13 82       	std	Z+3, r1	; 0x03
    1672:	12 82       	std	Z+2, r1	; 0x02
    1674:	a0 91 be 04 	lds	r26, 0x04BE	; 0x8004be <__flp>
    1678:	b0 91 bf 04 	lds	r27, 0x04BF	; 0x8004bf <__flp+0x1>
    167c:	10 97       	sbiw	r26, 0x00	; 0
    167e:	81 f4       	brne	.+32     	; 0x16a0 <free+0x3e>
    1680:	20 81       	ld	r18, Z
    1682:	31 81       	ldd	r19, Z+1	; 0x01
    1684:	82 0f       	add	r24, r18
    1686:	93 1f       	adc	r25, r19
    1688:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <__brkval>
    168c:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <__brkval+0x1>
    1690:	28 17       	cp	r18, r24
    1692:	39 07       	cpc	r19, r25
    1694:	51 f5       	brne	.+84     	; 0x16ea <free+0x88>
    1696:	f0 93 bd 04 	sts	0x04BD, r31	; 0x8004bd <__brkval+0x1>
    169a:	e0 93 bc 04 	sts	0x04BC, r30	; 0x8004bc <__brkval>
    169e:	67 c0       	rjmp	.+206    	; 0x176e <free+0x10c>
    16a0:	ed 01       	movw	r28, r26
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	ce 17       	cp	r28, r30
    16a8:	df 07       	cpc	r29, r31
    16aa:	40 f4       	brcc	.+16     	; 0x16bc <free+0x5a>
    16ac:	4a 81       	ldd	r20, Y+2	; 0x02
    16ae:	5b 81       	ldd	r21, Y+3	; 0x03
    16b0:	9e 01       	movw	r18, r28
    16b2:	41 15       	cp	r20, r1
    16b4:	51 05       	cpc	r21, r1
    16b6:	f1 f0       	breq	.+60     	; 0x16f4 <free+0x92>
    16b8:	ea 01       	movw	r28, r20
    16ba:	f5 cf       	rjmp	.-22     	; 0x16a6 <free+0x44>
    16bc:	d3 83       	std	Z+3, r29	; 0x03
    16be:	c2 83       	std	Z+2, r28	; 0x02
    16c0:	40 81       	ld	r20, Z
    16c2:	51 81       	ldd	r21, Z+1	; 0x01
    16c4:	84 0f       	add	r24, r20
    16c6:	95 1f       	adc	r25, r21
    16c8:	c8 17       	cp	r28, r24
    16ca:	d9 07       	cpc	r29, r25
    16cc:	59 f4       	brne	.+22     	; 0x16e4 <free+0x82>
    16ce:	88 81       	ld	r24, Y
    16d0:	99 81       	ldd	r25, Y+1	; 0x01
    16d2:	84 0f       	add	r24, r20
    16d4:	95 1f       	adc	r25, r21
    16d6:	02 96       	adiw	r24, 0x02	; 2
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	9b 81       	ldd	r25, Y+3	; 0x03
    16e0:	93 83       	std	Z+3, r25	; 0x03
    16e2:	82 83       	std	Z+2, r24	; 0x02
    16e4:	21 15       	cp	r18, r1
    16e6:	31 05       	cpc	r19, r1
    16e8:	29 f4       	brne	.+10     	; 0x16f4 <free+0x92>
    16ea:	f0 93 bf 04 	sts	0x04BF, r31	; 0x8004bf <__flp+0x1>
    16ee:	e0 93 be 04 	sts	0x04BE, r30	; 0x8004be <__flp>
    16f2:	3d c0       	rjmp	.+122    	; 0x176e <free+0x10c>
    16f4:	e9 01       	movw	r28, r18
    16f6:	fb 83       	std	Y+3, r31	; 0x03
    16f8:	ea 83       	std	Y+2, r30	; 0x02
    16fa:	49 91       	ld	r20, Y+
    16fc:	59 91       	ld	r21, Y+
    16fe:	c4 0f       	add	r28, r20
    1700:	d5 1f       	adc	r29, r21
    1702:	ec 17       	cp	r30, r28
    1704:	fd 07       	cpc	r31, r29
    1706:	61 f4       	brne	.+24     	; 0x1720 <free+0xbe>
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	84 0f       	add	r24, r20
    170e:	95 1f       	adc	r25, r21
    1710:	02 96       	adiw	r24, 0x02	; 2
    1712:	e9 01       	movw	r28, r18
    1714:	99 83       	std	Y+1, r25	; 0x01
    1716:	88 83       	st	Y, r24
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	93 81       	ldd	r25, Z+3	; 0x03
    171c:	9b 83       	std	Y+3, r25	; 0x03
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	e0 e0       	ldi	r30, 0x00	; 0
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	12 96       	adiw	r26, 0x02	; 2
    1726:	8d 91       	ld	r24, X+
    1728:	9c 91       	ld	r25, X
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	19 f0       	breq	.+6      	; 0x1736 <free+0xd4>
    1730:	fd 01       	movw	r30, r26
    1732:	dc 01       	movw	r26, r24
    1734:	f7 cf       	rjmp	.-18     	; 0x1724 <free+0xc2>
    1736:	8d 91       	ld	r24, X+
    1738:	9c 91       	ld	r25, X
    173a:	11 97       	sbiw	r26, 0x01	; 1
    173c:	9d 01       	movw	r18, r26
    173e:	2e 5f       	subi	r18, 0xFE	; 254
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <__brkval>
    174a:	30 91 bd 04 	lds	r19, 0x04BD	; 0x8004bd <__brkval+0x1>
    174e:	28 17       	cp	r18, r24
    1750:	39 07       	cpc	r19, r25
    1752:	69 f4       	brne	.+26     	; 0x176e <free+0x10c>
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	29 f4       	brne	.+10     	; 0x1762 <free+0x100>
    1758:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <__flp+0x1>
    175c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <__flp>
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <free+0x104>
    1762:	13 82       	std	Z+3, r1	; 0x03
    1764:	12 82       	std	Z+2, r1	; 0x02
    1766:	b0 93 bd 04 	sts	0x04BD, r27	; 0x8004bd <__brkval+0x1>
    176a:	a0 93 bc 04 	sts	0x04BC, r26	; 0x8004bc <__brkval>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <sprintf>:
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	2e 97       	sbiw	r28, 0x0e	; 14
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	0d 89       	ldd	r16, Y+21	; 0x15
    178e:	1e 89       	ldd	r17, Y+22	; 0x16
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	8c 83       	std	Y+4, r24	; 0x04
    1794:	1a 83       	std	Y+2, r17	; 0x02
    1796:	09 83       	std	Y+1, r16	; 0x01
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	9f e7       	ldi	r25, 0x7F	; 127
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	ae 01       	movw	r20, r28
    17a2:	47 5e       	subi	r20, 0xE7	; 231
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	6f 89       	ldd	r22, Y+23	; 0x17
    17a8:	78 8d       	ldd	r23, Y+24	; 0x18
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	10 d0       	rcall	.+32     	; 0x17d0 <vfprintf>
    17b0:	ef 81       	ldd	r30, Y+7	; 0x07
    17b2:	f8 85       	ldd	r31, Y+8	; 0x08
    17b4:	e0 0f       	add	r30, r16
    17b6:	f1 1f       	adc	r31, r17
    17b8:	10 82       	st	Z, r1
    17ba:	2e 96       	adiw	r28, 0x0e	; 14
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <vfprintf>:
    17d0:	2f 92       	push	r2
    17d2:	3f 92       	push	r3
    17d4:	4f 92       	push	r4
    17d6:	5f 92       	push	r5
    17d8:	6f 92       	push	r6
    17da:	7f 92       	push	r7
    17dc:	8f 92       	push	r8
    17de:	9f 92       	push	r9
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2b 97       	sbiw	r28, 0x0b	; 11
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	6c 01       	movw	r12, r24
    1806:	7b 01       	movw	r14, r22
    1808:	8a 01       	movw	r16, r20
    180a:	fc 01       	movw	r30, r24
    180c:	17 82       	std	Z+7, r1	; 0x07
    180e:	16 82       	std	Z+6, r1	; 0x06
    1810:	83 81       	ldd	r24, Z+3	; 0x03
    1812:	81 ff       	sbrs	r24, 1
    1814:	bf c1       	rjmp	.+894    	; 0x1b94 <vfprintf+0x3c4>
    1816:	ce 01       	movw	r24, r28
    1818:	01 96       	adiw	r24, 0x01	; 1
    181a:	3c 01       	movw	r6, r24
    181c:	f6 01       	movw	r30, r12
    181e:	93 81       	ldd	r25, Z+3	; 0x03
    1820:	f7 01       	movw	r30, r14
    1822:	93 fd       	sbrc	r25, 3
    1824:	85 91       	lpm	r24, Z+
    1826:	93 ff       	sbrs	r25, 3
    1828:	81 91       	ld	r24, Z+
    182a:	7f 01       	movw	r14, r30
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <vfprintf+0x62>
    1830:	ad c1       	rjmp	.+858    	; 0x1b8c <vfprintf+0x3bc>
    1832:	85 32       	cpi	r24, 0x25	; 37
    1834:	39 f4       	brne	.+14     	; 0x1844 <vfprintf+0x74>
    1836:	93 fd       	sbrc	r25, 3
    1838:	85 91       	lpm	r24, Z+
    183a:	93 ff       	sbrs	r25, 3
    183c:	81 91       	ld	r24, Z+
    183e:	7f 01       	movw	r14, r30
    1840:	85 32       	cpi	r24, 0x25	; 37
    1842:	21 f4       	brne	.+8      	; 0x184c <vfprintf+0x7c>
    1844:	b6 01       	movw	r22, r12
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	d6 d1       	rcall	.+940    	; 0x1bf6 <fputc>
    184a:	e8 cf       	rjmp	.-48     	; 0x181c <vfprintf+0x4c>
    184c:	91 2c       	mov	r9, r1
    184e:	21 2c       	mov	r2, r1
    1850:	31 2c       	mov	r3, r1
    1852:	ff e1       	ldi	r31, 0x1F	; 31
    1854:	f3 15       	cp	r31, r3
    1856:	d8 f0       	brcs	.+54     	; 0x188e <vfprintf+0xbe>
    1858:	8b 32       	cpi	r24, 0x2B	; 43
    185a:	79 f0       	breq	.+30     	; 0x187a <vfprintf+0xaa>
    185c:	38 f4       	brcc	.+14     	; 0x186c <vfprintf+0x9c>
    185e:	80 32       	cpi	r24, 0x20	; 32
    1860:	79 f0       	breq	.+30     	; 0x1880 <vfprintf+0xb0>
    1862:	83 32       	cpi	r24, 0x23	; 35
    1864:	a1 f4       	brne	.+40     	; 0x188e <vfprintf+0xbe>
    1866:	23 2d       	mov	r18, r3
    1868:	20 61       	ori	r18, 0x10	; 16
    186a:	1d c0       	rjmp	.+58     	; 0x18a6 <vfprintf+0xd6>
    186c:	8d 32       	cpi	r24, 0x2D	; 45
    186e:	61 f0       	breq	.+24     	; 0x1888 <vfprintf+0xb8>
    1870:	80 33       	cpi	r24, 0x30	; 48
    1872:	69 f4       	brne	.+26     	; 0x188e <vfprintf+0xbe>
    1874:	23 2d       	mov	r18, r3
    1876:	21 60       	ori	r18, 0x01	; 1
    1878:	16 c0       	rjmp	.+44     	; 0x18a6 <vfprintf+0xd6>
    187a:	83 2d       	mov	r24, r3
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	38 2e       	mov	r3, r24
    1880:	e3 2d       	mov	r30, r3
    1882:	e4 60       	ori	r30, 0x04	; 4
    1884:	3e 2e       	mov	r3, r30
    1886:	2a c0       	rjmp	.+84     	; 0x18dc <vfprintf+0x10c>
    1888:	f3 2d       	mov	r31, r3
    188a:	f8 60       	ori	r31, 0x08	; 8
    188c:	1d c0       	rjmp	.+58     	; 0x18c8 <vfprintf+0xf8>
    188e:	37 fc       	sbrc	r3, 7
    1890:	2d c0       	rjmp	.+90     	; 0x18ec <vfprintf+0x11c>
    1892:	20 ed       	ldi	r18, 0xD0	; 208
    1894:	28 0f       	add	r18, r24
    1896:	2a 30       	cpi	r18, 0x0A	; 10
    1898:	40 f0       	brcs	.+16     	; 0x18aa <vfprintf+0xda>
    189a:	8e 32       	cpi	r24, 0x2E	; 46
    189c:	b9 f4       	brne	.+46     	; 0x18cc <vfprintf+0xfc>
    189e:	36 fc       	sbrc	r3, 6
    18a0:	75 c1       	rjmp	.+746    	; 0x1b8c <vfprintf+0x3bc>
    18a2:	23 2d       	mov	r18, r3
    18a4:	20 64       	ori	r18, 0x40	; 64
    18a6:	32 2e       	mov	r3, r18
    18a8:	19 c0       	rjmp	.+50     	; 0x18dc <vfprintf+0x10c>
    18aa:	36 fe       	sbrs	r3, 6
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <vfprintf+0xea>
    18ae:	8a e0       	ldi	r24, 0x0A	; 10
    18b0:	98 9e       	mul	r9, r24
    18b2:	20 0d       	add	r18, r0
    18b4:	11 24       	eor	r1, r1
    18b6:	92 2e       	mov	r9, r18
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <vfprintf+0x10c>
    18ba:	ea e0       	ldi	r30, 0x0A	; 10
    18bc:	2e 9e       	mul	r2, r30
    18be:	20 0d       	add	r18, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	22 2e       	mov	r2, r18
    18c4:	f3 2d       	mov	r31, r3
    18c6:	f0 62       	ori	r31, 0x20	; 32
    18c8:	3f 2e       	mov	r3, r31
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <vfprintf+0x10c>
    18cc:	8c 36       	cpi	r24, 0x6C	; 108
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <vfprintf+0x108>
    18d0:	83 2d       	mov	r24, r3
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	38 2e       	mov	r3, r24
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x10c>
    18d8:	88 36       	cpi	r24, 0x68	; 104
    18da:	41 f4       	brne	.+16     	; 0x18ec <vfprintf+0x11c>
    18dc:	f7 01       	movw	r30, r14
    18de:	93 fd       	sbrc	r25, 3
    18e0:	85 91       	lpm	r24, Z+
    18e2:	93 ff       	sbrs	r25, 3
    18e4:	81 91       	ld	r24, Z+
    18e6:	7f 01       	movw	r14, r30
    18e8:	81 11       	cpse	r24, r1
    18ea:	b3 cf       	rjmp	.-154    	; 0x1852 <vfprintf+0x82>
    18ec:	98 2f       	mov	r25, r24
    18ee:	9f 7d       	andi	r25, 0xDF	; 223
    18f0:	95 54       	subi	r25, 0x45	; 69
    18f2:	93 30       	cpi	r25, 0x03	; 3
    18f4:	28 f4       	brcc	.+10     	; 0x1900 <vfprintf+0x130>
    18f6:	0c 5f       	subi	r16, 0xFC	; 252
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	9f e3       	ldi	r25, 0x3F	; 63
    18fc:	99 83       	std	Y+1, r25	; 0x01
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <vfprintf+0x14a>
    1900:	83 36       	cpi	r24, 0x63	; 99
    1902:	31 f0       	breq	.+12     	; 0x1910 <vfprintf+0x140>
    1904:	83 37       	cpi	r24, 0x73	; 115
    1906:	71 f0       	breq	.+28     	; 0x1924 <vfprintf+0x154>
    1908:	83 35       	cpi	r24, 0x53	; 83
    190a:	09 f0       	breq	.+2      	; 0x190e <vfprintf+0x13e>
    190c:	55 c0       	rjmp	.+170    	; 0x19b8 <vfprintf+0x1e8>
    190e:	20 c0       	rjmp	.+64     	; 0x1950 <vfprintf+0x180>
    1910:	f8 01       	movw	r30, r16
    1912:	80 81       	ld	r24, Z
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	0e 5f       	subi	r16, 0xFE	; 254
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	88 24       	eor	r8, r8
    191c:	83 94       	inc	r8
    191e:	91 2c       	mov	r9, r1
    1920:	53 01       	movw	r10, r6
    1922:	12 c0       	rjmp	.+36     	; 0x1948 <vfprintf+0x178>
    1924:	28 01       	movw	r4, r16
    1926:	f2 e0       	ldi	r31, 0x02	; 2
    1928:	4f 0e       	add	r4, r31
    192a:	51 1c       	adc	r5, r1
    192c:	f8 01       	movw	r30, r16
    192e:	a0 80       	ld	r10, Z
    1930:	b1 80       	ldd	r11, Z+1	; 0x01
    1932:	36 fe       	sbrs	r3, 6
    1934:	03 c0       	rjmp	.+6      	; 0x193c <vfprintf+0x16c>
    1936:	69 2d       	mov	r22, r9
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x170>
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	7f ef       	ldi	r23, 0xFF	; 255
    1940:	c5 01       	movw	r24, r10
    1942:	4e d1       	rcall	.+668    	; 0x1be0 <strnlen>
    1944:	4c 01       	movw	r8, r24
    1946:	82 01       	movw	r16, r4
    1948:	f3 2d       	mov	r31, r3
    194a:	ff 77       	andi	r31, 0x7F	; 127
    194c:	3f 2e       	mov	r3, r31
    194e:	15 c0       	rjmp	.+42     	; 0x197a <vfprintf+0x1aa>
    1950:	28 01       	movw	r4, r16
    1952:	22 e0       	ldi	r18, 0x02	; 2
    1954:	42 0e       	add	r4, r18
    1956:	51 1c       	adc	r5, r1
    1958:	f8 01       	movw	r30, r16
    195a:	a0 80       	ld	r10, Z
    195c:	b1 80       	ldd	r11, Z+1	; 0x01
    195e:	36 fe       	sbrs	r3, 6
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <vfprintf+0x198>
    1962:	69 2d       	mov	r22, r9
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x19c>
    1968:	6f ef       	ldi	r22, 0xFF	; 255
    196a:	7f ef       	ldi	r23, 0xFF	; 255
    196c:	c5 01       	movw	r24, r10
    196e:	2d d1       	rcall	.+602    	; 0x1bca <strnlen_P>
    1970:	4c 01       	movw	r8, r24
    1972:	f3 2d       	mov	r31, r3
    1974:	f0 68       	ori	r31, 0x80	; 128
    1976:	3f 2e       	mov	r3, r31
    1978:	82 01       	movw	r16, r4
    197a:	33 fc       	sbrc	r3, 3
    197c:	19 c0       	rjmp	.+50     	; 0x19b0 <vfprintf+0x1e0>
    197e:	82 2d       	mov	r24, r2
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	88 16       	cp	r8, r24
    1984:	99 06       	cpc	r9, r25
    1986:	a0 f4       	brcc	.+40     	; 0x19b0 <vfprintf+0x1e0>
    1988:	b6 01       	movw	r22, r12
    198a:	80 e2       	ldi	r24, 0x20	; 32
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	33 d1       	rcall	.+614    	; 0x1bf6 <fputc>
    1990:	2a 94       	dec	r2
    1992:	f5 cf       	rjmp	.-22     	; 0x197e <vfprintf+0x1ae>
    1994:	f5 01       	movw	r30, r10
    1996:	37 fc       	sbrc	r3, 7
    1998:	85 91       	lpm	r24, Z+
    199a:	37 fe       	sbrs	r3, 7
    199c:	81 91       	ld	r24, Z+
    199e:	5f 01       	movw	r10, r30
    19a0:	b6 01       	movw	r22, r12
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	28 d1       	rcall	.+592    	; 0x1bf6 <fputc>
    19a6:	21 10       	cpse	r2, r1
    19a8:	2a 94       	dec	r2
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	82 1a       	sub	r8, r18
    19ae:	91 08       	sbc	r9, r1
    19b0:	81 14       	cp	r8, r1
    19b2:	91 04       	cpc	r9, r1
    19b4:	79 f7       	brne	.-34     	; 0x1994 <vfprintf+0x1c4>
    19b6:	e1 c0       	rjmp	.+450    	; 0x1b7a <vfprintf+0x3aa>
    19b8:	84 36       	cpi	r24, 0x64	; 100
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <vfprintf+0x1f0>
    19bc:	89 36       	cpi	r24, 0x69	; 105
    19be:	39 f5       	brne	.+78     	; 0x1a0e <vfprintf+0x23e>
    19c0:	f8 01       	movw	r30, r16
    19c2:	37 fe       	sbrs	r3, 7
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <vfprintf+0x204>
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	0c 5f       	subi	r16, 0xFC	; 252
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <vfprintf+0x214>
    19d4:	60 81       	ld	r22, Z
    19d6:	71 81       	ldd	r23, Z+1	; 0x01
    19d8:	07 2e       	mov	r0, r23
    19da:	00 0c       	add	r0, r0
    19dc:	88 0b       	sbc	r24, r24
    19de:	99 0b       	sbc	r25, r25
    19e0:	0e 5f       	subi	r16, 0xFE	; 254
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	f3 2d       	mov	r31, r3
    19e6:	ff 76       	andi	r31, 0x6F	; 111
    19e8:	3f 2e       	mov	r3, r31
    19ea:	97 ff       	sbrs	r25, 7
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <vfprintf+0x230>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	f0 68       	ori	r31, 0x80	; 128
    19fe:	3f 2e       	mov	r3, r31
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	a3 01       	movw	r20, r6
    1a06:	33 d1       	rcall	.+614    	; 0x1c6e <__ultoa_invert>
    1a08:	88 2e       	mov	r8, r24
    1a0a:	86 18       	sub	r8, r6
    1a0c:	44 c0       	rjmp	.+136    	; 0x1a96 <vfprintf+0x2c6>
    1a0e:	85 37       	cpi	r24, 0x75	; 117
    1a10:	31 f4       	brne	.+12     	; 0x1a1e <vfprintf+0x24e>
    1a12:	23 2d       	mov	r18, r3
    1a14:	2f 7e       	andi	r18, 0xEF	; 239
    1a16:	b2 2e       	mov	r11, r18
    1a18:	2a e0       	ldi	r18, 0x0A	; 10
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	25 c0       	rjmp	.+74     	; 0x1a68 <vfprintf+0x298>
    1a1e:	93 2d       	mov	r25, r3
    1a20:	99 7f       	andi	r25, 0xF9	; 249
    1a22:	b9 2e       	mov	r11, r25
    1a24:	8f 36       	cpi	r24, 0x6F	; 111
    1a26:	c1 f0       	breq	.+48     	; 0x1a58 <vfprintf+0x288>
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <vfprintf+0x260>
    1a2a:	88 35       	cpi	r24, 0x58	; 88
    1a2c:	79 f0       	breq	.+30     	; 0x1a4c <vfprintf+0x27c>
    1a2e:	ae c0       	rjmp	.+348    	; 0x1b8c <vfprintf+0x3bc>
    1a30:	80 37       	cpi	r24, 0x70	; 112
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <vfprintf+0x26a>
    1a34:	88 37       	cpi	r24, 0x78	; 120
    1a36:	21 f0       	breq	.+8      	; 0x1a40 <vfprintf+0x270>
    1a38:	a9 c0       	rjmp	.+338    	; 0x1b8c <vfprintf+0x3bc>
    1a3a:	e9 2f       	mov	r30, r25
    1a3c:	e0 61       	ori	r30, 0x10	; 16
    1a3e:	be 2e       	mov	r11, r30
    1a40:	b4 fe       	sbrs	r11, 4
    1a42:	0d c0       	rjmp	.+26     	; 0x1a5e <vfprintf+0x28e>
    1a44:	fb 2d       	mov	r31, r11
    1a46:	f4 60       	ori	r31, 0x04	; 4
    1a48:	bf 2e       	mov	r11, r31
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <vfprintf+0x28e>
    1a4c:	34 fe       	sbrs	r3, 4
    1a4e:	0a c0       	rjmp	.+20     	; 0x1a64 <vfprintf+0x294>
    1a50:	29 2f       	mov	r18, r25
    1a52:	26 60       	ori	r18, 0x06	; 6
    1a54:	b2 2e       	mov	r11, r18
    1a56:	06 c0       	rjmp	.+12     	; 0x1a64 <vfprintf+0x294>
    1a58:	28 e0       	ldi	r18, 0x08	; 8
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <vfprintf+0x298>
    1a5e:	20 e1       	ldi	r18, 0x10	; 16
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <vfprintf+0x298>
    1a64:	20 e1       	ldi	r18, 0x10	; 16
    1a66:	32 e0       	ldi	r19, 0x02	; 2
    1a68:	f8 01       	movw	r30, r16
    1a6a:	b7 fe       	sbrs	r11, 7
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <vfprintf+0x2ac>
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	0c 5f       	subi	r16, 0xFC	; 252
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	06 c0       	rjmp	.+12     	; 0x1a88 <vfprintf+0x2b8>
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 5f       	subi	r16, 0xFE	; 254
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	a3 01       	movw	r20, r6
    1a8a:	f1 d0       	rcall	.+482    	; 0x1c6e <__ultoa_invert>
    1a8c:	88 2e       	mov	r8, r24
    1a8e:	86 18       	sub	r8, r6
    1a90:	fb 2d       	mov	r31, r11
    1a92:	ff 77       	andi	r31, 0x7F	; 127
    1a94:	3f 2e       	mov	r3, r31
    1a96:	36 fe       	sbrs	r3, 6
    1a98:	0d c0       	rjmp	.+26     	; 0x1ab4 <vfprintf+0x2e4>
    1a9a:	23 2d       	mov	r18, r3
    1a9c:	2e 7f       	andi	r18, 0xFE	; 254
    1a9e:	a2 2e       	mov	r10, r18
    1aa0:	89 14       	cp	r8, r9
    1aa2:	58 f4       	brcc	.+22     	; 0x1aba <vfprintf+0x2ea>
    1aa4:	34 fe       	sbrs	r3, 4
    1aa6:	0b c0       	rjmp	.+22     	; 0x1abe <vfprintf+0x2ee>
    1aa8:	32 fc       	sbrc	r3, 2
    1aaa:	09 c0       	rjmp	.+18     	; 0x1abe <vfprintf+0x2ee>
    1aac:	83 2d       	mov	r24, r3
    1aae:	8e 7e       	andi	r24, 0xEE	; 238
    1ab0:	a8 2e       	mov	r10, r24
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <vfprintf+0x2ee>
    1ab4:	b8 2c       	mov	r11, r8
    1ab6:	a3 2c       	mov	r10, r3
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <vfprintf+0x2f0>
    1aba:	b8 2c       	mov	r11, r8
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <vfprintf+0x2f0>
    1abe:	b9 2c       	mov	r11, r9
    1ac0:	a4 fe       	sbrs	r10, 4
    1ac2:	0f c0       	rjmp	.+30     	; 0x1ae2 <vfprintf+0x312>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e8 0d       	add	r30, r8
    1ac8:	f1 1d       	adc	r31, r1
    1aca:	80 81       	ld	r24, Z
    1acc:	80 33       	cpi	r24, 0x30	; 48
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <vfprintf+0x308>
    1ad0:	9a 2d       	mov	r25, r10
    1ad2:	99 7e       	andi	r25, 0xE9	; 233
    1ad4:	a9 2e       	mov	r10, r25
    1ad6:	09 c0       	rjmp	.+18     	; 0x1aea <vfprintf+0x31a>
    1ad8:	a2 fe       	sbrs	r10, 2
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <vfprintf+0x318>
    1adc:	b3 94       	inc	r11
    1ade:	b3 94       	inc	r11
    1ae0:	04 c0       	rjmp	.+8      	; 0x1aea <vfprintf+0x31a>
    1ae2:	8a 2d       	mov	r24, r10
    1ae4:	86 78       	andi	r24, 0x86	; 134
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <vfprintf+0x31a>
    1ae8:	b3 94       	inc	r11
    1aea:	a3 fc       	sbrc	r10, 3
    1aec:	10 c0       	rjmp	.+32     	; 0x1b0e <vfprintf+0x33e>
    1aee:	a0 fe       	sbrs	r10, 0
    1af0:	06 c0       	rjmp	.+12     	; 0x1afe <vfprintf+0x32e>
    1af2:	b2 14       	cp	r11, r2
    1af4:	80 f4       	brcc	.+32     	; 0x1b16 <vfprintf+0x346>
    1af6:	28 0c       	add	r2, r8
    1af8:	92 2c       	mov	r9, r2
    1afa:	9b 18       	sub	r9, r11
    1afc:	0d c0       	rjmp	.+26     	; 0x1b18 <vfprintf+0x348>
    1afe:	b2 14       	cp	r11, r2
    1b00:	58 f4       	brcc	.+22     	; 0x1b18 <vfprintf+0x348>
    1b02:	b6 01       	movw	r22, r12
    1b04:	80 e2       	ldi	r24, 0x20	; 32
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	76 d0       	rcall	.+236    	; 0x1bf6 <fputc>
    1b0a:	b3 94       	inc	r11
    1b0c:	f8 cf       	rjmp	.-16     	; 0x1afe <vfprintf+0x32e>
    1b0e:	b2 14       	cp	r11, r2
    1b10:	18 f4       	brcc	.+6      	; 0x1b18 <vfprintf+0x348>
    1b12:	2b 18       	sub	r2, r11
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <vfprintf+0x34a>
    1b16:	98 2c       	mov	r9, r8
    1b18:	21 2c       	mov	r2, r1
    1b1a:	a4 fe       	sbrs	r10, 4
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <vfprintf+0x36c>
    1b1e:	b6 01       	movw	r22, r12
    1b20:	80 e3       	ldi	r24, 0x30	; 48
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	68 d0       	rcall	.+208    	; 0x1bf6 <fputc>
    1b26:	a2 fe       	sbrs	r10, 2
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <vfprintf+0x386>
    1b2a:	a1 fc       	sbrc	r10, 1
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <vfprintf+0x364>
    1b2e:	88 e7       	ldi	r24, 0x78	; 120
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <vfprintf+0x368>
    1b34:	88 e5       	ldi	r24, 0x58	; 88
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b6 01       	movw	r22, r12
    1b3a:	0c c0       	rjmp	.+24     	; 0x1b54 <vfprintf+0x384>
    1b3c:	8a 2d       	mov	r24, r10
    1b3e:	86 78       	andi	r24, 0x86	; 134
    1b40:	51 f0       	breq	.+20     	; 0x1b56 <vfprintf+0x386>
    1b42:	a1 fe       	sbrs	r10, 1
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <vfprintf+0x37a>
    1b46:	8b e2       	ldi	r24, 0x2B	; 43
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <vfprintf+0x37c>
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	a7 fc       	sbrc	r10, 7
    1b4e:	8d e2       	ldi	r24, 0x2D	; 45
    1b50:	b6 01       	movw	r22, r12
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	50 d0       	rcall	.+160    	; 0x1bf6 <fputc>
    1b56:	89 14       	cp	r8, r9
    1b58:	30 f4       	brcc	.+12     	; 0x1b66 <vfprintf+0x396>
    1b5a:	b6 01       	movw	r22, r12
    1b5c:	80 e3       	ldi	r24, 0x30	; 48
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	4a d0       	rcall	.+148    	; 0x1bf6 <fputc>
    1b62:	9a 94       	dec	r9
    1b64:	f8 cf       	rjmp	.-16     	; 0x1b56 <vfprintf+0x386>
    1b66:	8a 94       	dec	r8
    1b68:	f3 01       	movw	r30, r6
    1b6a:	e8 0d       	add	r30, r8
    1b6c:	f1 1d       	adc	r31, r1
    1b6e:	80 81       	ld	r24, Z
    1b70:	b6 01       	movw	r22, r12
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	40 d0       	rcall	.+128    	; 0x1bf6 <fputc>
    1b76:	81 10       	cpse	r8, r1
    1b78:	f6 cf       	rjmp	.-20     	; 0x1b66 <vfprintf+0x396>
    1b7a:	22 20       	and	r2, r2
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <vfprintf+0x3b0>
    1b7e:	4e ce       	rjmp	.-868    	; 0x181c <vfprintf+0x4c>
    1b80:	b6 01       	movw	r22, r12
    1b82:	80 e2       	ldi	r24, 0x20	; 32
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	37 d0       	rcall	.+110    	; 0x1bf6 <fputc>
    1b88:	2a 94       	dec	r2
    1b8a:	f7 cf       	rjmp	.-18     	; 0x1b7a <vfprintf+0x3aa>
    1b8c:	f6 01       	movw	r30, r12
    1b8e:	86 81       	ldd	r24, Z+6	; 0x06
    1b90:	97 81       	ldd	r25, Z+7	; 0x07
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x3c8>
    1b94:	8f ef       	ldi	r24, 0xFF	; 255
    1b96:	9f ef       	ldi	r25, 0xFF	; 255
    1b98:	2b 96       	adiw	r28, 0x0b	; 11
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	7f 90       	pop	r7
    1bbe:	6f 90       	pop	r6
    1bc0:	5f 90       	pop	r5
    1bc2:	4f 90       	pop	r4
    1bc4:	3f 90       	pop	r3
    1bc6:	2f 90       	pop	r2
    1bc8:	08 95       	ret

00001bca <strnlen_P>:
    1bca:	fc 01       	movw	r30, r24
    1bcc:	05 90       	lpm	r0, Z+
    1bce:	61 50       	subi	r22, 0x01	; 1
    1bd0:	70 40       	sbci	r23, 0x00	; 0
    1bd2:	01 10       	cpse	r0, r1
    1bd4:	d8 f7       	brcc	.-10     	; 0x1bcc <strnlen_P+0x2>
    1bd6:	80 95       	com	r24
    1bd8:	90 95       	com	r25
    1bda:	8e 0f       	add	r24, r30
    1bdc:	9f 1f       	adc	r25, r31
    1bde:	08 95       	ret

00001be0 <strnlen>:
    1be0:	fc 01       	movw	r30, r24
    1be2:	61 50       	subi	r22, 0x01	; 1
    1be4:	70 40       	sbci	r23, 0x00	; 0
    1be6:	01 90       	ld	r0, Z+
    1be8:	01 10       	cpse	r0, r1
    1bea:	d8 f7       	brcc	.-10     	; 0x1be2 <strnlen+0x2>
    1bec:	80 95       	com	r24
    1bee:	90 95       	com	r25
    1bf0:	8e 0f       	add	r24, r30
    1bf2:	9f 1f       	adc	r25, r31
    1bf4:	08 95       	ret

00001bf6 <fputc>:
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	fb 01       	movw	r30, r22
    1c00:	23 81       	ldd	r18, Z+3	; 0x03
    1c02:	21 fd       	sbrc	r18, 1
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <fputc+0x16>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	2c c0       	rjmp	.+88     	; 0x1c64 <fputc+0x6e>
    1c0c:	22 ff       	sbrs	r18, 2
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <fputc+0x46>
    1c10:	46 81       	ldd	r20, Z+6	; 0x06
    1c12:	57 81       	ldd	r21, Z+7	; 0x07
    1c14:	24 81       	ldd	r18, Z+4	; 0x04
    1c16:	35 81       	ldd	r19, Z+5	; 0x05
    1c18:	42 17       	cp	r20, r18
    1c1a:	53 07       	cpc	r21, r19
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <fputc+0x38>
    1c1e:	a0 81       	ld	r26, Z
    1c20:	b1 81       	ldd	r27, Z+1	; 0x01
    1c22:	9d 01       	movw	r18, r26
    1c24:	2f 5f       	subi	r18, 0xFF	; 255
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	31 83       	std	Z+1, r19	; 0x01
    1c2a:	20 83       	st	Z, r18
    1c2c:	8c 93       	st	X, r24
    1c2e:	26 81       	ldd	r18, Z+6	; 0x06
    1c30:	37 81       	ldd	r19, Z+7	; 0x07
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	37 83       	std	Z+7, r19	; 0x07
    1c38:	26 83       	std	Z+6, r18	; 0x06
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <fputc+0x6e>
    1c3c:	8b 01       	movw	r16, r22
    1c3e:	ec 01       	movw	r28, r24
    1c40:	fb 01       	movw	r30, r22
    1c42:	00 84       	ldd	r0, Z+8	; 0x08
    1c44:	f1 85       	ldd	r31, Z+9	; 0x09
    1c46:	e0 2d       	mov	r30, r0
    1c48:	09 95       	icall
    1c4a:	89 2b       	or	r24, r25
    1c4c:	e1 f6       	brne	.-72     	; 0x1c06 <fputc+0x10>
    1c4e:	d8 01       	movw	r26, r16
    1c50:	16 96       	adiw	r26, 0x06	; 6
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	17 97       	sbiw	r26, 0x07	; 7
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	17 96       	adiw	r26, 0x07	; 7
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
    1c60:	16 97       	sbiw	r26, 0x06	; 6
    1c62:	ce 01       	movw	r24, r28
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	08 95       	ret

00001c6e <__ultoa_invert>:
    1c6e:	fa 01       	movw	r30, r20
    1c70:	aa 27       	eor	r26, r26
    1c72:	28 30       	cpi	r18, 0x08	; 8
    1c74:	51 f1       	breq	.+84     	; 0x1cca <__ultoa_invert+0x5c>
    1c76:	20 31       	cpi	r18, 0x10	; 16
    1c78:	81 f1       	breq	.+96     	; 0x1cda <__ultoa_invert+0x6c>
    1c7a:	e8 94       	clt
    1c7c:	6f 93       	push	r22
    1c7e:	6e 7f       	andi	r22, 0xFE	; 254
    1c80:	6e 5f       	subi	r22, 0xFE	; 254
    1c82:	7f 4f       	sbci	r23, 0xFF	; 255
    1c84:	8f 4f       	sbci	r24, 0xFF	; 255
    1c86:	9f 4f       	sbci	r25, 0xFF	; 255
    1c88:	af 4f       	sbci	r26, 0xFF	; 255
    1c8a:	b1 e0       	ldi	r27, 0x01	; 1
    1c8c:	3e d0       	rcall	.+124    	; 0x1d0a <__ultoa_invert+0x9c>
    1c8e:	b4 e0       	ldi	r27, 0x04	; 4
    1c90:	3c d0       	rcall	.+120    	; 0x1d0a <__ultoa_invert+0x9c>
    1c92:	67 0f       	add	r22, r23
    1c94:	78 1f       	adc	r23, r24
    1c96:	89 1f       	adc	r24, r25
    1c98:	9a 1f       	adc	r25, r26
    1c9a:	a1 1d       	adc	r26, r1
    1c9c:	68 0f       	add	r22, r24
    1c9e:	79 1f       	adc	r23, r25
    1ca0:	8a 1f       	adc	r24, r26
    1ca2:	91 1d       	adc	r25, r1
    1ca4:	a1 1d       	adc	r26, r1
    1ca6:	6a 0f       	add	r22, r26
    1ca8:	71 1d       	adc	r23, r1
    1caa:	81 1d       	adc	r24, r1
    1cac:	91 1d       	adc	r25, r1
    1cae:	a1 1d       	adc	r26, r1
    1cb0:	20 d0       	rcall	.+64     	; 0x1cf2 <__ultoa_invert+0x84>
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__ultoa_invert+0x48>
    1cb4:	68 94       	set
    1cb6:	3f 91       	pop	r19
    1cb8:	2a e0       	ldi	r18, 0x0A	; 10
    1cba:	26 9f       	mul	r18, r22
    1cbc:	11 24       	eor	r1, r1
    1cbe:	30 19       	sub	r19, r0
    1cc0:	30 5d       	subi	r19, 0xD0	; 208
    1cc2:	31 93       	st	Z+, r19
    1cc4:	de f6       	brtc	.-74     	; 0x1c7c <__ultoa_invert+0xe>
    1cc6:	cf 01       	movw	r24, r30
    1cc8:	08 95       	ret
    1cca:	46 2f       	mov	r20, r22
    1ccc:	47 70       	andi	r20, 0x07	; 7
    1cce:	40 5d       	subi	r20, 0xD0	; 208
    1cd0:	41 93       	st	Z+, r20
    1cd2:	b3 e0       	ldi	r27, 0x03	; 3
    1cd4:	0f d0       	rcall	.+30     	; 0x1cf4 <__ultoa_invert+0x86>
    1cd6:	c9 f7       	brne	.-14     	; 0x1cca <__ultoa_invert+0x5c>
    1cd8:	f6 cf       	rjmp	.-20     	; 0x1cc6 <__ultoa_invert+0x58>
    1cda:	46 2f       	mov	r20, r22
    1cdc:	4f 70       	andi	r20, 0x0F	; 15
    1cde:	40 5d       	subi	r20, 0xD0	; 208
    1ce0:	4a 33       	cpi	r20, 0x3A	; 58
    1ce2:	18 f0       	brcs	.+6      	; 0x1cea <__ultoa_invert+0x7c>
    1ce4:	49 5d       	subi	r20, 0xD9	; 217
    1ce6:	31 fd       	sbrc	r19, 1
    1ce8:	40 52       	subi	r20, 0x20	; 32
    1cea:	41 93       	st	Z+, r20
    1cec:	02 d0       	rcall	.+4      	; 0x1cf2 <__ultoa_invert+0x84>
    1cee:	a9 f7       	brne	.-22     	; 0x1cda <__ultoa_invert+0x6c>
    1cf0:	ea cf       	rjmp	.-44     	; 0x1cc6 <__ultoa_invert+0x58>
    1cf2:	b4 e0       	ldi	r27, 0x04	; 4
    1cf4:	a6 95       	lsr	r26
    1cf6:	97 95       	ror	r25
    1cf8:	87 95       	ror	r24
    1cfa:	77 95       	ror	r23
    1cfc:	67 95       	ror	r22
    1cfe:	ba 95       	dec	r27
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <__ultoa_invert+0x86>
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	61 05       	cpc	r22, r1
    1d06:	71 05       	cpc	r23, r1
    1d08:	08 95       	ret
    1d0a:	9b 01       	movw	r18, r22
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	0a 2e       	mov	r0, r26
    1d10:	06 94       	lsr	r0
    1d12:	57 95       	ror	r21
    1d14:	47 95       	ror	r20
    1d16:	37 95       	ror	r19
    1d18:	27 95       	ror	r18
    1d1a:	ba 95       	dec	r27
    1d1c:	c9 f7       	brne	.-14     	; 0x1d10 <__ultoa_invert+0xa2>
    1d1e:	62 0f       	add	r22, r18
    1d20:	73 1f       	adc	r23, r19
    1d22:	84 1f       	adc	r24, r20
    1d24:	95 1f       	adc	r25, r21
    1d26:	a0 1d       	adc	r26, r0
    1d28:	08 95       	ret

00001d2a <_exit>:
    1d2a:	f8 94       	cli

00001d2c <__stop_program>:
    1d2c:	ff cf       	rjmp	.-2      	; 0x1d2c <__stop_program>
