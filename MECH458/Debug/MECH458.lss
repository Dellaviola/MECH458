
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000fc0  00001054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  0080021c  0080021c  00001170  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000432a  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a3b  00000000  00000000  0000580a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003051  00000000  00000000  00007245  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  0000a298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009121  00000000  00000000  0000aa08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017ed  00000000  00000000  00013b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  00015316  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004102  00000000  00000000  000155ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	3c c4       	rjmp	.+2168   	; 0x8ae <__vector_13>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	7d c5       	rjmp	.+2810   	; 0xb40 <__vector_17>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	45 c0       	rjmp	.+138    	; 0x100 <__vector_29>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	12 e0       	ldi	r17, 0x02	; 2
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	ff e0       	ldi	r31, 0x0F	; 15
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 31       	cpi	r26, 0x1C	; 28
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	22 e0       	ldi	r18, 0x02	; 2
  c0:	ac e1       	ldi	r26, 0x1C	; 28
  c2:	b2 e0       	ldi	r27, 0x02	; 2
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ad 39       	cpi	r26, 0x9D	; 157
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	83 d2       	rcall	.+1286   	; 0x5d6 <main>
  d0:	75 c7       	rjmp	.+3818   	; 0xfbc <_exit>

000000d2 <__bad_interrupt>:
  d2:	3d c3       	rjmp	.+1658   	; 0x74e <__vector_default>

000000d4 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
  d4:	eb e7       	ldi	r30, 0x7B	; 123
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
  ee:	ac e7       	ldi	r26, 0x7C	; 124
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	8c 91       	ld	r24, X
  f4:	81 64       	ori	r24, 0x41	; 65
  f6:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0b b6       	in	r0, 0x3b	; 59
 10c:	0f 92       	push	r0
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	//
	// Take 10 samples	
	PORTC ^= 0x08;
 11a:	98 b1       	in	r25, 0x08	; 8
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	89 27       	eor	r24, r25
 120:	88 b9       	out	0x08, r24	; 8
	if (g_ADCCount < 6)
 122:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_ADCCount>
 126:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_ADCCount+0x1>
 12a:	06 97       	sbiw	r24, 0x06	; 6
 12c:	20 f5       	brcc	.+72     	; 0x176 <__vector_29+0x76>
	{
			g_ADCResult[g_ADCCount++] = ADC;
 12e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_ADCCount>
 132:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_ADCCount+0x1>
 136:	9c 01       	movw	r18, r24
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <g_ADCCount+0x1>
 140:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <g_ADCCount>
 144:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 148:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	fc 01       	movw	r30, r24
 152:	e8 5d       	subi	r30, 0xD8	; 216
 154:	fd 4f       	sbci	r31, 0xFD	; 253
 156:	31 83       	std	Z+1, r19	; 0x01
 158:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
			if (g_ADCCount == 6) _timer[1].state = READY;
 164:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_ADCCount>
 168:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_ADCCount+0x1>
 16c:	06 97       	sbiw	r24, 0x06	; 6
 16e:	19 f4       	brne	.+6      	; 0x176 <__vector_29+0x76>
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <_timer+0x11>
	}

	// Unblock ADC task
	
	PORTC ^= 0x08;
 176:	98 b1       	in	r25, 0x08	; 8
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	89 27       	eor	r24, r25
 17c:	88 b9       	out	0x08, r24	; 8
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
 198:	67 99       	sbic	0x0c, 7	; 12
 19a:	16 c0       	rjmp	.+44     	; 0x1c8 <SERVER_Task+0x30>
 19c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
 1a0:	88 23       	and	r24, r24
 1a2:	81 f0       	breq	.+32     	; 0x1c4 <SERVER_Task+0x2c>
 1a4:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <STAGE1>
 1a8:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <STAGE1+0x1>
 1ac:	89 2b       	or	r24, r25
 1ae:	41 f4       	brne	.+16     	; 0x1c0 <SERVER_Task+0x28>
 1b0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 1b4:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 1b8:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <STAGE1+0x1>
 1bc:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <STAGE1>
 1c0:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <g_WDTimeout>
 1c4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2347>
 1c8:	66 99       	sbic	0x0c, 6	; 12
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <SERVER_Task+0x50>
 1cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
 1d0:	88 23       	and	r24, r24
 1d2:	41 f0       	breq	.+16     	; 0x1e4 <SERVER_Task+0x4c>
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <STAGE2>
 1da:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <STAGE2+0x1>
 1de:	eb d1       	rcall	.+982    	; 0x5b6 <LL_UpdateStatus>
 1e0:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <g_WDTimeout>
 1e4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2348>
 1e8:	65 99       	sbic	0x0c, 5	; 12
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <SERVER_Task+0x6a>
 1ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2349>
 1f0:	88 23       	and	r24, r24
 1f2:	29 f0       	breq	.+10     	; 0x1fe <SERVER_Task+0x66>
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <_timer+0x23>
 1fa:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <g_WDTimeout>
 1fe:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2349>
 202:	67 9b       	sbis	0x0c, 7	; 12
 204:	0c c0       	rjmp	.+24     	; 0x21e <SERVER_Task+0x86>
 206:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2347>
 20a:	81 11       	cpse	r24, r1
 20c:	05 c0       	rjmp	.+10     	; 0x218 <SERVER_Task+0x80>
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <_timer+0x1a>
 214:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_timer+0x47>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2347>
 21e:	66 9b       	sbis	0x0c, 6	; 12
 220:	20 c0       	rjmp	.+64     	; 0x262 <SERVER_Task+0xca>
 222:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2348>
 226:	81 11       	cpse	r24, r1
 228:	19 c0       	rjmp	.+50     	; 0x25c <SERVER_Task+0xc4>
 22a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <STAGE2>
 22e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <STAGE2+0x1>
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	49 f4       	brne	.+18     	; 0x248 <SERVER_Task+0xb0>
 236:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 23a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 23e:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <STAGE2+0x1>
 242:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <STAGE2>
 246:	05 c0       	rjmp	.+10     	; 0x252 <SERVER_Task+0xba>
 248:	81 d1       	rcall	.+770    	; 0x54c <LL_Next>
 24a:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <STAGE2+0x1>
 24e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <STAGE2>
 252:	ea e7       	ldi	r30, 0x7A	; 122
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	80 83       	st	Z, r24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2348>
 262:	65 9b       	sbis	0x0c, 5	; 12
 264:	03 c0       	rjmp	.+6      	; 0x26c <SERVER_Task+0xd4>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2349>
 26c:	08 95       	ret

0000026e <ADC_Task>:
 26e:	cf 92       	push	r12
 270:	df 92       	push	r13
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	cf 93       	push	r28
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	af ef       	ldi	r26, 0xFF	; 255
 27e:	b3 e0       	ldi	r27, 0x03	; 3
 280:	c1 2c       	mov	r12, r1
 282:	d1 2c       	mov	r13, r1
 284:	76 01       	movw	r14, r12
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	4f b7       	in	r20, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	e8 5d       	subi	r30, 0xD8	; 216
 296:	fd 4f       	sbci	r31, 0xFD	; 253
 298:	20 81       	ld	r18, Z
 29a:	31 81       	ldd	r19, Z+1	; 0x01
 29c:	c2 0e       	add	r12, r18
 29e:	d3 1e       	adc	r13, r19
 2a0:	e1 1c       	adc	r14, r1
 2a2:	f1 1c       	adc	r15, r1
 2a4:	20 81       	ld	r18, Z
 2a6:	31 81       	ldd	r19, Z+1	; 0x01
 2a8:	2a 17       	cp	r18, r26
 2aa:	3b 07       	cpc	r19, r27
 2ac:	38 f4       	brcc	.+14     	; 0x2bc <ADC_Task+0x4e>
 2ae:	fc 01       	movw	r30, r24
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e8 5d       	subi	r30, 0xD8	; 216
 2b6:	fd 4f       	sbci	r31, 0xFD	; 253
 2b8:	a0 81       	ld	r26, Z
 2ba:	b1 81       	ldd	r27, Z+1	; 0x01
 2bc:	fc 01       	movw	r30, r24
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e8 5d       	subi	r30, 0xD8	; 216
 2c4:	fd 4f       	sbci	r31, 0xFD	; 253
 2c6:	20 81       	ld	r18, Z
 2c8:	31 81       	ldd	r19, Z+1	; 0x01
 2ca:	62 17       	cp	r22, r18
 2cc:	73 07       	cpc	r23, r19
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <ADC_Task+0x64>
 2d0:	46 c0       	rjmp	.+140    	; 0x35e <ADC_Task+0xf0>
 2d2:	fc 01       	movw	r30, r24
 2d4:	ee 0f       	add	r30, r30
 2d6:	ff 1f       	adc	r31, r31
 2d8:	e8 5d       	subi	r30, 0xD8	; 216
 2da:	fd 4f       	sbci	r31, 0xFD	; 253
 2dc:	60 81       	ld	r22, Z
 2de:	71 81       	ldd	r23, Z+1	; 0x01
 2e0:	3e c0       	rjmp	.+124    	; 0x35e <ADC_Task+0xf0>
 2e2:	8f b7       	in	r24, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	ca 1a       	sub	r12, r26
 2e8:	db 0a       	sbc	r13, r27
 2ea:	e1 08       	sbc	r14, r1
 2ec:	f1 08       	sbc	r15, r1
 2ee:	c6 1a       	sub	r12, r22
 2f0:	d7 0a       	sbc	r13, r23
 2f2:	e1 08       	sbc	r14, r1
 2f4:	f1 08       	sbc	r15, r1
 2f6:	f6 94       	lsr	r15
 2f8:	e7 94       	ror	r14
 2fa:	d7 94       	ror	r13
 2fc:	c7 94       	ror	r12
 2fe:	f6 94       	lsr	r15
 300:	e7 94       	ror	r14
 302:	d7 94       	ror	r13
 304:	c7 94       	ror	r12
 306:	8f bf       	out	0x3f, r24	; 63
 308:	cf b7       	in	r28, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	d7 01       	movw	r26, r14
 30e:	c6 01       	movw	r24, r12
 310:	0b 97       	sbiw	r24, 0x0b	; 11
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	89 37       	cpi	r24, 0x79	; 121
 318:	93 40       	sbci	r25, 0x03	; 3
 31a:	a1 05       	cpc	r26, r1
 31c:	b1 05       	cpc	r27, r1
 31e:	a0 f4       	brcc	.+40     	; 0x348 <ADC_Task+0xda>
 320:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <STAGE2>
 324:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <STAGE2+0x1>
 328:	2b d1       	rcall	.+598    	; 0x580 <LL_GetRefl>
 32a:	a0 e0       	ldi	r26, 0x00	; 0
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	c8 16       	cp	r12, r24
 330:	d9 06       	cpc	r13, r25
 332:	ea 06       	cpc	r14, r26
 334:	fb 06       	cpc	r15, r27
 336:	40 f4       	brcc	.+16     	; 0x348 <ADC_Task+0xda>
 338:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <STAGE2>
 33c:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <STAGE2+0x1>
 340:	00 97       	sbiw	r24, 0x00	; 0
 342:	11 f0       	breq	.+4      	; 0x348 <ADC_Task+0xda>
 344:	b6 01       	movw	r22, r12
 346:	27 d1       	rcall	.+590    	; 0x596 <LL_UpdateRefl>
 348:	cf bf       	out	0x3f, r28	; 63
 34a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <g_ADCCount+0x1>
 34e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <g_ADCCount>
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	80 83       	st	Z, r24
 35c:	07 c0       	rjmp	.+14     	; 0x36c <ADC_Task+0xfe>
 35e:	4f bf       	out	0x3f, r20	; 63
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	86 30       	cpi	r24, 0x06	; 6
 364:	91 05       	cpc	r25, r1
 366:	09 f0       	breq	.+2      	; 0x36a <ADC_Task+0xfc>
 368:	90 cf       	rjmp	.-224    	; 0x28a <ADC_Task+0x1c>
 36a:	bb cf       	rjmp	.-138    	; 0x2e2 <ADC_Task+0x74>
 36c:	cf 91       	pop	r28
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <MAG_Task>:
 378:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <g_MotorOn>
 37c:	88 23       	and	r24, r24
 37e:	29 f0       	breq	.+10     	; 0x38a <MAG_Task+0x12>
 380:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <tick.2378>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <tick.2378>
 38a:	8c b1       	in	r24, 0x0c	; 12
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <STAGE1>
 392:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <STAGE1+0x1>
 396:	0f d1       	rcall	.+542    	; 0x5b6 <LL_UpdateStatus>
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <STAGE1>
 39e:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <STAGE1+0x1>
 3a2:	ff d0       	rcall	.+510    	; 0x5a2 <LL_UpdateMag>
 3a4:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <STAGE1>
 3a8:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <STAGE1+0x1>
 3ac:	cf d0       	rcall	.+414    	; 0x54c <LL_Next>
 3ae:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <STAGE1+0x1>
 3b2:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <STAGE1>
 3b6:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <tick.2378>
 3ba:	08 95       	ret

000003bc <EXIT_Task>:
 3bc:	cf 93       	push	r28
 3be:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <memory.2384>
 3c2:	81 11       	cpse	r24, r1
 3c4:	66 c0       	rjmp	.+204    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 3c6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <delay.2385>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <delay.2385>
 3d0:	ed e8       	ldi	r30, 0x8D	; 141
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	85 81       	ldd	r24, Z+5	; 0x05
 3d6:	96 81       	ldd	r25, Z+6	; 0x06
 3d8:	87 81       	ldd	r24, Z+7	; 0x07
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <EXIT_Task+0x26>
 3dc:	80 e8       	ldi	r24, 0x80	; 128
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	c7 d1       	rcall	.+910    	; 0x770 <PWM>
 3e2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <stepper+0x4>
 3e6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 3ea:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 3ee:	c3 d0       	rcall	.+390    	; 0x576 <LL_GetClass>
 3f0:	e8 2f       	mov	r30, r24
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	ea 5f       	subi	r30, 0xFA	; 250
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 81       	ld	r24, Z
 3fa:	80 e8       	ldi	r24, 0x80	; 128
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	b8 d1       	rcall	.+880    	; 0x770 <PWM>
 400:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <delay.2385>
 404:	85 31       	cpi	r24, 0x15	; 21
 406:	28 f4       	brcc	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <memory.2384>
 40c:	88 23       	and	r24, r24
 40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	3a c0       	rjmp	.+116    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <memory.2384>
 418:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <delay.2385>
 41c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 420:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 424:	a8 d0       	rcall	.+336    	; 0x576 <LL_GetClass>
 426:	c8 2f       	mov	r28, r24
 428:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <HEAD>
 42c:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <HEAD+0x1>
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	93 81       	ldd	r25, Z+3	; 0x03
 434:	a0 d0       	rcall	.+320    	; 0x576 <LL_GetClass>
 436:	c8 13       	cpse	r28, r24
 438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <memory.2384>
 43e:	63 e0       	ldi	r22, 0x03	; 3
 440:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 444:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 448:	b6 d0       	rcall	.+364    	; 0x5b6 <LL_UpdateStatus>
 44a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 44e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 452:	7c d0       	rcall	.+248    	; 0x54c <LL_Next>
 454:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <HEAD+0x1>
 458:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <HEAD>
 45c:	fc 01       	movw	r30, r24
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	93 81       	ldd	r25, Z+3	; 0x03
 462:	89 d0       	rcall	.+274    	; 0x576 <LL_GetClass>
 464:	e8 2f       	mov	r30, r24
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	ea 5f       	subi	r30, 0xFA	; 250
 46a:	fe 4f       	sbci	r31, 0xFE	; 254
 46c:	c0 81       	ld	r28, Z
 46e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 472:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 476:	7f d0       	rcall	.+254    	; 0x576 <LL_GetClass>
 478:	e8 2f       	mov	r30, r24
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ea 5f       	subi	r30, 0xFA	; 250
 47e:	fe 4f       	sbci	r31, 0xFE	; 254
 480:	80 81       	ld	r24, Z
 482:	6c 2f       	mov	r22, r28
 484:	ff d1       	rcall	.+1022   	; 0x884 <STEPPER_SetRotation>
 486:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 48a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 48e:	73 d0       	rcall	.+230    	; 0x576 <LL_GetClass>
 490:	0a c0       	rjmp	.+20     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 492:	ed e8       	ldi	r30, 0x8D	; 141
 494:	f2 e0       	ldi	r31, 0x02	; 2
 496:	85 81       	ldd	r24, Z+5	; 0x05
 498:	96 81       	ldd	r25, Z+6	; 0x06
 49a:	97 81       	ldd	r25, Z+7	; 0x07
 49c:	89 1b       	sub	r24, r25
 49e:	8f 30       	cpi	r24, 0x0F	; 15
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	9f cf       	rjmp	.-194    	; 0x3e2 <EXIT_Task+0x26>
 4a4:	9b cf       	rjmp	.-202    	; 0x3dc <EXIT_Task+0x20>
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <BTN_Task>:
 4aa:	89 b1       	in	r24, 0x09	; 9
 4ac:	83 70       	andi	r24, 0x03	; 3
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <BTN_Task+0x38>
 4b0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
 4b4:	8f 5f       	subi	r24, 0xFF	; 255
 4b6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	90 f0       	brcs	.+36     	; 0x4e2 <BTN_Task+0x38>
 4be:	89 b1       	in	r24, 0x09	; 9
 4c0:	83 70       	andi	r24, 0x03	; 3
 4c2:	19 f4       	brne	.+6      	; 0x4ca <BTN_Task+0x20>
 4c4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
 4c8:	08 95       	ret
 4ca:	89 b1       	in	r24, 0x09	; 9
 4cc:	83 70       	andi	r24, 0x03	; 3
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	29 f4       	brne	.+10     	; 0x4dc <BTN_Task+0x32>
 4d2:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <g_PauseRequest>
 4d6:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
 4da:	08 95       	ret
 4dc:	89 b1       	in	r24, 0x09	; 9
 4de:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
 4e2:	08 95       	ret

000004e4 <WATCHDOG_Task>:
 4e4:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <g_WDTimeout>
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <g_WDTimeout>
 4ee:	08 95       	ret

000004f0 <D_Blinky>:
 4f0:	9b b1       	in	r25, 0x0b	; 11
 4f2:	80 ea       	ldi	r24, 0xA0	; 160
 4f4:	89 27       	eor	r24, r25
 4f6:	8b b9       	out	0x0b, r24	; 11
 4f8:	08 95       	ret

000004fa <ADD_Task>:
/*-----------------------------------------------------------*/
/* 					Unused Functions						 */


void ADD_Task(void* arg)
{
 4fa:	08 95       	ret

000004fc <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	7c 01       	movw	r14, r24
 508:	16 2f       	mov	r17, r22
 50a:	d4 2f       	mov	r29, r20
 50c:	c2 2f       	mov	r28, r18
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	2c d4       	rcall	.+2136   	; 0xd6c <malloc>
 514:	fc 01       	movw	r30, r24
 516:	f1 82       	std	Z+1, r15	; 0x01
 518:	e0 82       	st	Z, r14
 51a:	12 83       	std	Z+2, r17	; 0x02
 51c:	d3 83       	std	Z+3, r29	; 0x03
 51e:	c4 83       	std	Z+4, r28	; 0x04
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	08 95       	ret

0000052c <LL_ItemListInit>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	ec 01       	movw	r28, r24
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	1a d4       	rcall	.+2100   	; 0xd6c <malloc>
 538:	fc 01       	movw	r30, r24
 53a:	d1 83       	std	Z+1, r29	; 0x01
 53c:	c0 83       	st	Z, r28
 53e:	15 82       	std	Z+5, r1	; 0x05
 540:	14 82       	std	Z+4, r1	; 0x04
 542:	13 82       	std	Z+3, r1	; 0x03
 544:	12 82       	std	Z+2, r1	; 0x02
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <LL_Next>:
 54c:	fc 01       	movw	r30, r24
 54e:	82 81       	ldd	r24, Z+2	; 0x02
 550:	93 81       	ldd	r25, Z+3	; 0x03
 552:	08 95       	ret

00000554 <LL_AddBack>:
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	ec 01       	movw	r28, r24
 55a:	cb 01       	movw	r24, r22
 55c:	01 c0       	rjmp	.+2      	; 0x560 <LL_AddBack+0xc>
 55e:	e9 01       	movw	r28, r18
 560:	2a 81       	ldd	r18, Y+2	; 0x02
 562:	3b 81       	ldd	r19, Y+3	; 0x03
 564:	21 15       	cp	r18, r1
 566:	31 05       	cpc	r19, r1
 568:	d1 f7       	brne	.-12     	; 0x55e <LL_AddBack+0xa>
 56a:	e0 df       	rcall	.-64     	; 0x52c <LL_ItemListInit>
 56c:	9b 83       	std	Y+3, r25	; 0x03
 56e:	8a 83       	std	Y+2, r24	; 0x02
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <LL_GetClass>:
 576:	dc 01       	movw	r26, r24
 578:	ed 91       	ld	r30, X+
 57a:	fc 91       	ld	r31, X
 57c:	83 81       	ldd	r24, Z+3	; 0x03
 57e:	08 95       	ret

00000580 <LL_GetRefl>:
 580:	dc 01       	movw	r26, r24
 582:	ed 91       	ld	r30, X+
 584:	fc 91       	ld	r31, X
 586:	80 81       	ld	r24, Z
 588:	91 81       	ldd	r25, Z+1	; 0x01
 58a:	08 95       	ret

0000058c <LL_GetMag>:
 58c:	dc 01       	movw	r26, r24
 58e:	ed 91       	ld	r30, X+
 590:	fc 91       	ld	r31, X
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	08 95       	ret

00000596 <LL_UpdateRefl>:
 596:	dc 01       	movw	r26, r24
 598:	ed 91       	ld	r30, X+
 59a:	fc 91       	ld	r31, X
 59c:	71 83       	std	Z+1, r23	; 0x01
 59e:	60 83       	st	Z, r22
 5a0:	08 95       	ret

000005a2 <LL_UpdateMag>:
 5a2:	dc 01       	movw	r26, r24
 5a4:	ed 91       	ld	r30, X+
 5a6:	fc 91       	ld	r31, X
 5a8:	62 83       	std	Z+2, r22	; 0x02
 5aa:	08 95       	ret

000005ac <LL_UpdateClass>:
 5ac:	dc 01       	movw	r26, r24
 5ae:	ed 91       	ld	r30, X+
 5b0:	fc 91       	ld	r31, X
 5b2:	63 83       	std	Z+3, r22	; 0x03
 5b4:	08 95       	ret

000005b6 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
 5b6:	dc 01       	movw	r26, r24
 5b8:	ed 91       	ld	r30, X+
 5ba:	fc 91       	ld	r31, X
 5bc:	64 83       	std	Z+4, r22	; 0x04
 5be:	08 95       	ret

000005c0 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
 5c0:	8f ef       	ldi	r24, 0xFF	; 255
 5c2:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
 5c4:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
 5c6:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
 5c8:	80 ef       	ldi	r24, 0xF0	; 240
 5ca:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
 5cc:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
 5ce:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	08 95       	ret

000005d6 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
 5d6:	48 d2       	rcall	.+1168   	; 0xa68 <SYS_Init>
	
	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
 5d8:	89 b1       	in	r24, 0x09	; 9
 5da:	83 70       	andi	r24, 0x03	; 3
 5dc:	e9 f7       	brne	.-6      	; 0x5d8 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
 5de:	8b e1       	ldi	r24, 0x1B	; 27
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	b6 d3       	rcall	.+1900   	; 0xd50 <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5e4:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	4c ec       	ldi	r20, 0xCC	; 204
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	33 d3       	rcall	.+1638   	; 0xc5e <TIMER_Create>
		_timer[0].state = READY;
 5f8:	02 e4       	ldi	r16, 0x42	; 66
 5fa:	12 e0       	ldi	r17, 0x02	; 2
 5fc:	c2 e0       	ldi	r28, 0x02	; 2
 5fe:	f8 01       	movw	r30, r16
 600:	c0 87       	std	Z+8, r28	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	47 e3       	ldi	r20, 0x37	; 55
 608:	51 e0       	ldi	r21, 0x01	; 1
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	25 d3       	rcall	.+1610   	; 0xc5e <TIMER_Create>
		_timer[1].state = READY;
 614:	f8 01       	movw	r30, r16
 616:	c1 8b       	std	Z+17, r28	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
 618:	20 e0       	ldi	r18, 0x00	; 0
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	4c eb       	ldi	r20, 0xBC	; 188
 61e:	51 e0       	ldi	r21, 0x01	; 1
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	1a d3       	rcall	.+1588   	; 0xc5e <TIMER_Create>
		_timer[2].state = READY;
 62a:	f8 01       	movw	r30, r16
 62c:	c2 8f       	std	Z+26, r28	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
 62e:	20 e0       	ldi	r18, 0x00	; 0
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	4e ed       	ldi	r20, 0xDE	; 222
 634:	51 e0       	ldi	r21, 0x01	; 1
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	70 e0       	ldi	r23, 0x00	; 0
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0f d3       	rcall	.+1566   	; 0xc5e <TIMER_Create>
		_timer[3].state = READY;
 640:	f8 01       	movw	r30, r16
 642:	c3 a3       	std	Z+35, r28	; 0x23
		
		TIMER_Create(1, 1, ADD_Task, NULL);		// Item Enter Handling
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	4d e7       	ldi	r20, 0x7D	; 125
 64a:	52 e0       	ldi	r21, 0x02	; 2
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	04 d3       	rcall	.+1544   	; 0xc5e <TIMER_Create>
		_timer[4].state = READY;
 656:	f8 01       	movw	r30, r16
 658:	c4 a7       	std	Z+44, r28	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
 65a:	20 e0       	ldi	r18, 0x00	; 0
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	45 e5       	ldi	r20, 0x55	; 85
 660:	52 e0       	ldi	r21, 0x02	; 2
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	84 e6       	ldi	r24, 0x64	; 100
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	f9 d2       	rcall	.+1522   	; 0xc5e <TIMER_Create>
		_timer[5].state = READY;
 66c:	f8 01       	movw	r30, r16
 66e:	c5 ab       	std	Z+53, r28	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
 670:	20 e0       	ldi	r18, 0x00	; 0
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	48 e7       	ldi	r20, 0x78	; 120
 676:	52 e0       	ldi	r21, 0x02	; 2
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	80 ed       	ldi	r24, 0xD0	; 208
 67e:	97 e0       	ldi	r25, 0x07	; 7
 680:	ee d2       	rcall	.+1500   	; 0xc5e <TIMER_Create>
		_timer[6].state = READY;				//_timer[6]
 682:	f8 01       	movw	r30, r16

		TIMER_Create(9000, 1, WATCHDOG_Task, NULL);
 684:	c6 af       	std	Z+62, r28	; 0x3e
 686:	20 e0       	ldi	r18, 0x00	; 0
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	42 e7       	ldi	r20, 0x72	; 114
 68c:	52 e0       	ldi	r21, 0x02	; 2
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	88 e2       	ldi	r24, 0x28	; 40
		_timer[7].state = READY;
 694:	93 e2       	ldi	r25, 0x23	; 35
 696:	e3 d2       	rcall	.+1478   	; 0xc5e <TIMER_Create>

		UART_SendString("System Ready...\r\n");
 698:	c0 93 89 02 	sts	0x0289, r28	; 0x800289 <_timer+0x47>
 69c:	8e e2       	ldi	r24, 0x2E	; 46
 69e:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
 6a0:	57 d3       	rcall	.+1710   	; 0xd50 <UART_SendString>
 6a2:	80 e8       	ldi	r24, 0x80	; 128
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	64 d0       	rcall	.+200    	; 0x770 <PWM>
		PORTC = 0xFF;
 6a8:	8f ef       	ldi	r24, 0xFF	; 255
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6aa:	88 b9       	out	0x08, r24	; 8
	};

	// For initial stepper positioning
	int memory = 0;
 6ac:	78 94       	sei
			// Unknown non-magnetic object
		}
		if(memory == 0)
		{
			STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
			memory = 1;
 6ae:	e1 2c       	mov	r14, r1
 6b0:	f1 2c       	mov	r15, r1
 6b2:	cc 24       	eor	r12, r12
					 
					 Classifier can classify up to 3 objects per frame at max U;
			
		*/
		
		list* temp = HEAD;
 6b4:	c3 94       	inc	r12
 6b6:	d1 2c       	mov	r13, r1
 6b8:	00 91 22 02 	lds	r16, 0x0222	; 0x800222 <HEAD>
		uint16_t reflVal = LL_GetRefl(temp);
 6bc:	10 91 23 02 	lds	r17, 0x0223	; 0x800223 <HEAD+0x1>
 6c0:	c8 01       	movw	r24, r16
		uint8_t magVal = LL_GetMag(temp);
 6c2:	5e df       	rcall	.-324    	; 0x580 <LL_GetRefl>
 6c4:	ec 01       	movw	r28, r24
 6c6:	c8 01       	movw	r24, r16
		
		PORTC |= 0x08;
 6c8:	61 df       	rcall	.-318    	; 0x58c <LL_GetMag>
		
		if(magVal) //
 6ca:	43 9a       	sbi	0x08, 3	; 8
 6cc:	88 23       	and	r24, r24
		{
			if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
 6ce:	91 f0       	breq	.+36     	; 0x6f4 <main+0x11e>
 6d0:	ce 01       	movw	r24, r28
 6d2:	44 97       	sbiw	r24, 0x14	; 20
 6d4:	81 35       	cpi	r24, 0x51	; 81
			{
				LL_UpdateClass(temp, ALUMINUM);
 6d6:	91 05       	cpc	r25, r1
 6d8:	20 f4       	brcc	.+8      	; 0x6e2 <main+0x10c>
 6da:	62 e0       	ldi	r22, 0x02	; 2
 6dc:	c8 01       	movw	r24, r16
 6de:	66 df       	rcall	.-308    	; 0x5ac <LL_UpdateClass>
			}
			else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
 6e0:	19 c0       	rjmp	.+50     	; 0x714 <main+0x13e>
 6e2:	cb 52       	subi	r28, 0x2B	; 43
 6e4:	d1 40       	sbci	r29, 0x01	; 1
 6e6:	c0 36       	cpi	r28, 0x60	; 96
			{
				LL_UpdateClass(temp, STEEL);
 6e8:	d1 40       	sbci	r29, 0x01	; 1
 6ea:	a0 f4       	brcc	.+40     	; 0x714 <main+0x13e>
 6ec:	63 e0       	ldi	r22, 0x03	; 3
 6ee:	c8 01       	movw	r24, r16
			else
			{
				// Unknown Magnetic Object
			}
		}
		else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
 6f0:	5d df       	rcall	.-326    	; 0x5ac <LL_UpdateClass>
 6f2:	10 c0       	rjmp	.+32     	; 0x714 <main+0x13e>
 6f4:	ce 01       	movw	r24, r28
 6f6:	86 57       	subi	r24, 0x76	; 118
 6f8:	93 40       	sbci	r25, 0x03	; 3
		{
			LL_UpdateClass(temp, BLACK);
 6fa:	8e 97       	sbiw	r24, 0x2e	; 46
 6fc:	20 f4       	brcc	.+8      	; 0x706 <main+0x130>
 6fe:	61 e0       	ldi	r22, 0x01	; 1
 700:	c8 01       	movw	r24, r16
		}
		else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
 702:	54 df       	rcall	.-344    	; 0x5ac <LL_UpdateClass>
 704:	07 c0       	rjmp	.+14     	; 0x714 <main+0x13e>
 706:	cb 53       	subi	r28, 0x3B	; 59
 708:	d3 40       	sbci	r29, 0x03	; 3
		{
			LL_UpdateClass(temp, WHITE);
 70a:	e0 97       	sbiw	r28, 0x30	; 48
 70c:	18 f4       	brcc	.+6      	; 0x714 <main+0x13e>
 70e:	60 e0       	ldi	r22, 0x00	; 0
		}
		else
		{
			// Unknown non-magnetic object
		}
		if(memory == 0)
 710:	c8 01       	movw	r24, r16
 712:	4c df       	rcall	.-360    	; 0x5ac <LL_UpdateClass>
 714:	e1 14       	cp	r14, r1
		{
			STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
 716:	f1 04       	cpc	r15, r1
 718:	c1 f4       	brne	.+48     	; 0x74a <main+0x174>
 71a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 71e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 722:	29 df       	rcall	.-430    	; 0x576 <LL_GetClass>
 724:	e8 2f       	mov	r30, r24
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	e1 5f       	subi	r30, 0xF1	; 241
 72a:	fe 4f       	sbci	r31, 0xFE	; 254
 72c:	c0 81       	ld	r28, Z
 72e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
 732:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 736:	1f df       	rcall	.-450    	; 0x576 <LL_GetClass>
 738:	e8 2f       	mov	r30, r24
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	e1 5f       	subi	r30, 0xF1	; 241
 73e:	fe 4f       	sbci	r31, 0xFE	; 254
 740:	80 81       	ld	r24, Z
 742:	6c 2f       	mov	r22, r28
 744:	9f d0       	rcall	.+318    	; 0x884 <STEPPER_SetRotation>
			memory = 1;
 746:	ec 2c       	mov	r14, r12
 748:	fd 2c       	mov	r15, r13
		}
		PORTC &= 0b11110111;
 74a:	43 98       	cbi	0x08, 3	; 8
		
  	}
 74c:	b5 cf       	rjmp	.-150    	; 0x6b8 <main+0xe2>

0000074e <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
 758:	8a ea       	ldi	r24, 0xAA	; 170
 75a:	88 b9       	out	0x08, r24	; 8
 75c:	fe cf       	rjmp	.-4      	; 0x75a <__vector_default+0xc>

0000075e <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
 75e:	84 b5       	in	r24, 0x24	; 36
 760:	83 68       	ori	r24, 0x83	; 131
 762:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
 764:	85 b5       	in	r24, 0x25	; 37
 766:	83 60       	ori	r24, 0x03	; 3
 768:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = 0x80; // Sets PWM duty cycle = 50%
 76a:	80 e8       	ldi	r24, 0x80	; 128
 76c:	87 bd       	out	0x27, r24	; 39
 76e:	08 95       	ret

00000770 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
 770:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 772:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 774:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
 776:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <BELT_SPEED>
 77a:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
 77c:	23 2b       	or	r18, r19
 77e:	31 f0       	breq	.+12     	; 0x78c <PWM+0x1c>
		{
			g_MotorOn = 1;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <g_MotorOn>
			PORTB = ~0x0E;
 786:	81 ef       	ldi	r24, 0xF1	; 241
 788:	85 b9       	out	0x05, r24	; 5
 78a:	04 c0       	rjmp	.+8      	; 0x794 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
 78c:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <g_MotorOn>
			PORTB = ~0x0F;
 790:	80 ef       	ldi	r24, 0xF0	; 240
 792:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 794:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
 796:	08 95       	ret

00000798 <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
 798:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
 79a:	ed e8       	ldi	r30, 0x8D	; 141
 79c:	f2 e0       	ldi	r31, 0x02	; 2
 79e:	10 82       	st	Z, r1
	stepper.direction = 1;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
 7a4:	13 82       	std	Z+3, r1	; 0x03
 7a6:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
 7a8:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
 7aa:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
 7ac:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
 7ae:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
 7b0:	13 86       	std	Z+11, r1	; 0x0b

	// For calibration
	stepper._targetStep = 200;
 7b2:	88 ec       	ldi	r24, 0xC8	; 200
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	96 83       	std	Z+6, r25	; 0x06
 7b8:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
 7ba:	80 e3       	ldi	r24, 0x30	; 48
 7bc:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
 7be:	84 e9       	ldi	r24, 0x94	; 148
 7c0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
 7c4:	e0 eb       	ldi	r30, 0xB0	; 176
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	82 60       	ori	r24, 0x02	; 2
 7cc:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
 7ce:	e0 e7       	ldi	r30, 0x70	; 112
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	82 60       	ori	r24, 0x02	; 2
 7d6:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
 7d8:	e1 eb       	ldi	r30, 0xB1	; 177
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	87 60       	ori	r24, 0x07	; 7
 7e0:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
 7e2:	78 94       	sei
 7e4:	08 95       	ret

000007e6 <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	86 1b       	sub	r24, r22
 7ea:	91 09       	sbc	r25, r1
	if (steps >= 0)
 7ec:	52 f0       	brmi	.+20     	; 0x802 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
 7ee:	85 36       	cpi	r24, 0x65	; 101
 7f0:	91 05       	cpc	r25, r1
 7f2:	8c f0       	brlt	.+34     	; 0x816 <STEPPER_NumSteps+0x30>
 7f4:	24 e6       	ldi	r18, 0x64	; 100
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	a9 01       	movw	r20, r18
 7fa:	48 1b       	sub	r20, r24
 7fc:	59 0b       	sbc	r21, r25
 7fe:	ca 01       	movw	r24, r20
 800:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
 802:	8c 39       	cpi	r24, 0x9C	; 156
 804:	5f ef       	ldi	r21, 0xFF	; 255
 806:	95 07       	cpc	r25, r21
 808:	34 f4       	brge	.+12     	; 0x816 <STEPPER_NumSteps+0x30>
 80a:	2c e9       	ldi	r18, 0x9C	; 156
 80c:	3f ef       	ldi	r19, 0xFF	; 255
 80e:	a9 01       	movw	r20, r18
 810:	48 1b       	sub	r20, r24
 812:	59 0b       	sbc	r21, r25
 814:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
 816:	08 95       	ret

00000818 <STEPPER_Rotate>:

void STEPPER_Rotate()
{
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
 81c:	cd e8       	ldi	r28, 0x8D	; 141
 81e:	d2 e0       	ldi	r29, 0x02	; 2
 820:	6c 81       	ldd	r22, Y+4	; 0x04
 822:	8a 81       	ldd	r24, Y+2	; 0x02
 824:	9b 81       	ldd	r25, Y+3	; 0x03
 826:	df df       	rcall	.-66     	; 0x7e6 <STEPPER_NumSteps>
 828:	9e 83       	std	Y+6, r25	; 0x06
 82a:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
 82c:	6a 81       	ldd	r22, Y+2	; 0x02
 82e:	7b 81       	ldd	r23, Y+3	; 0x03
 830:	88 85       	ldd	r24, Y+8	; 0x08
 832:	d9 df       	rcall	.-78     	; 0x7e6 <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
 834:	2d 81       	ldd	r18, Y+5	; 0x05
 836:	3e 81       	ldd	r19, Y+6	; 0x06
 838:	33 23       	and	r19, r19
 83a:	14 f4       	brge	.+4      	; 0x840 <STEPPER_Rotate+0x28>
 83c:	28 e0       	ldi	r18, 0x08	; 8
 83e:	01 c0       	rjmp	.+2      	; 0x842 <STEPPER_Rotate+0x2a>
 840:	24 e0       	ldi	r18, 0x04	; 4
 842:	ed e8       	ldi	r30, 0x8D	; 141
 844:	f2 e0       	ldi	r31, 0x02	; 2
 846:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
 848:	45 81       	ldd	r20, Z+5	; 0x05
 84a:	56 81       	ldd	r21, Z+6	; 0x06
 84c:	84 9f       	mul	r24, r20
 84e:	90 01       	movw	r18, r0
 850:	85 9f       	mul	r24, r21
 852:	30 0d       	add	r19, r0
 854:	94 9f       	mul	r25, r20
 856:	30 0d       	add	r19, r0
 858:	11 24       	eor	r1, r1
 85a:	83 2f       	mov	r24, r19
 85c:	80 95       	com	r24
 85e:	88 1f       	adc	r24, r24
 860:	88 27       	eor	r24, r24
 862:	88 1f       	adc	r24, r24
 864:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
 866:	85 81       	ldd	r24, Z+5	; 0x05
 868:	96 81       	ldd	r25, Z+6	; 0x06
 86a:	99 23       	and	r25, r25
 86c:	1c f4       	brge	.+6      	; 0x874 <STEPPER_Rotate+0x5c>
 86e:	91 95       	neg	r25
 870:	81 95       	neg	r24
 872:	91 09       	sbc	r25, r1
 874:	ed e8       	ldi	r30, 0x8D	; 141
 876:	f2 e0       	ldi	r31, 0x02	; 2
 878:	96 83       	std	Z+6, r25	; 0x06
 87a:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
 87c:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
	cli();
 888:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	cd e8       	ldi	r28, 0x8D	; 141
 88e:	d2 e0       	ldi	r29, 0x02	; 2
 890:	9b 83       	std	Y+3, r25	; 0x03
 892:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
 894:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
 896:	c0 df       	rcall	.-128    	; 0x818 <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
 898:	eb 85       	ldd	r30, Y+11	; 0x0b
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	eb 5e       	subi	r30, 0xEB	; 235
 89e:	fe 4f       	sbci	r31, 0xFE	; 254
 8a0:	80 81       	ld	r24, Z
 8a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
 8a6:	78 94       	sei
}
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	08 95       	ret

000008ae <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	0b b6       	in	r0, 0x3b	; 59
 8ba:	0f 92       	push	r0
 8bc:	2f 93       	push	r18
 8be:	3f 93       	push	r19
 8c0:	8f 93       	push	r24
 8c2:	9f 93       	push	r25
 8c4:	af 93       	push	r26
 8c6:	bf 93       	push	r27
 8c8:	ef 93       	push	r30
 8ca:	ff 93       	push	r31
 8cc:	cf 93       	push	r28
 8ce:	df 93       	push	r29
 8d0:	00 d0       	rcall	.+0      	; 0x8d2 <__vector_13+0x24>
 8d2:	00 d0       	rcall	.+0      	; 0x8d4 <__vector_13+0x26>
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
	PORTC ^= 0x01;
 8d8:	98 b1       	in	r25, 0x08	; 8
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	89 27       	eor	r24, r25
 8de:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
 8e0:	86 e3       	ldi	r24, 0x36	; 54
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	a0 e0       	ldi	r26, 0x00	; 0
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	9e e2       	ldi	r25, 0x2E	; 46
 8ea:	ad e2       	ldi	r26, 0x2D	; 45
 8ec:	b5 e3       	ldi	r27, 0x35	; 53
 8ee:	89 83       	std	Y+1, r24	; 0x01
 8f0:	9a 83       	std	Y+2, r25	; 0x02
 8f2:	ab 83       	std	Y+3, r26	; 0x03
 8f4:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
 8f6:	ed e8       	ldi	r30, 0x8D	; 141
 8f8:	f2 e0       	ldi	r31, 0x02	; 2
 8fa:	87 81       	ldd	r24, Z+7	; 0x07
 8fc:	25 81       	ldd	r18, Z+5	; 0x05
 8fe:	36 81       	ldd	r19, Z+6	; 0x06
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	82 17       	cp	r24, r18
 904:	93 07       	cpc	r25, r19
 906:	0c f0       	brlt	.+2      	; 0x90a <__vector_13+0x5c>
 908:	5a c0       	rjmp	.+180    	; 0x9be <__vector_13+0x110>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
 90a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <stepper+0x1>
 90e:	84 30       	cpi	r24, 0x04	; 4
 910:	51 f4       	brne	.+20     	; 0x926 <__vector_13+0x78>
 912:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <stepper>
 916:	e1 e0       	ldi	r30, 0x01	; 1
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	ec 0f       	add	r30, r28
 91c:	fd 1f       	adc	r31, r29
 91e:	e8 0f       	add	r30, r24
 920:	f1 1d       	adc	r31, r1
 922:	80 81       	ld	r24, Z
 924:	0d c0       	rjmp	.+26     	; 0x940 <__vector_13+0x92>
 926:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <stepper>
 92a:	e3 e0       	ldi	r30, 0x03	; 3
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	e8 1b       	sub	r30, r24
 930:	f1 09       	sbc	r31, r1
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	8c 0f       	add	r24, r28
 938:	9d 1f       	adc	r25, r29
 93a:	e8 0f       	add	r30, r24
 93c:	f9 1f       	adc	r31, r25
 93e:	80 81       	ld	r24, Z
 940:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
 942:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <stepper>
 946:	83 30       	cpi	r24, 0x03	; 3
 948:	21 f0       	breq	.+8      	; 0x952 <__vector_13+0xa4>
 94a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <stepper>
 94e:	8f 5f       	subi	r24, 0xFF	; 255
 950:	01 c0       	rjmp	.+2      	; 0x954 <__vector_13+0xa6>
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	ed e8       	ldi	r30, 0x8D	; 141
 956:	f2 e0       	ldi	r31, 0x02	; 2
 958:	80 83       	st	Z, r24

		stepper._currentStep++;
 95a:	87 81       	ldd	r24, Z+7	; 0x07
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	87 83       	std	Z+7, r24	; 0x07

		//Simple acceleration / deceleration block uses crve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
 960:	85 81       	ldd	r24, Z+5	; 0x05
 962:	96 81       	ldd	r25, Z+6	; 0x06
 964:	27 81       	ldd	r18, Z+7	; 0x07
 966:	82 1b       	sub	r24, r18
 968:	91 09       	sbc	r25, r1
 96a:	06 97       	sbiw	r24, 0x06	; 6
 96c:	74 f4       	brge	.+28     	; 0x98a <__vector_13+0xdc>
 96e:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <stepper+0xb>
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	eb 5e       	subi	r30, 0xEB	; 235
 976:	fe 4f       	sbci	r31, 0xFE	; 254
 978:	80 81       	ld	r24, Z
 97a:	84 39       	cpi	r24, 0x94	; 148
 97c:	30 f4       	brcc	.+12     	; 0x98a <__vector_13+0xdc>
		{
			stepper._accellStep--;
 97e:	ed e8       	ldi	r30, 0x8D	; 141
 980:	f2 e0       	ldi	r31, 0x02	; 2
 982:	83 85       	ldd	r24, Z+11	; 0x0b
 984:	81 50       	subi	r24, 0x01	; 1
 986:	83 87       	std	Z+11, r24	; 0x0b
 988:	11 c0       	rjmp	.+34     	; 0x9ac <__vector_13+0xfe>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
 98a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <stepper+0x7>
 98e:	86 30       	cpi	r24, 0x06	; 6
 990:	68 f0       	brcs	.+26     	; 0x9ac <__vector_13+0xfe>
 992:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <stepper+0xb>
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	eb 5e       	subi	r30, 0xEB	; 235
 99a:	fe 4f       	sbci	r31, 0xFE	; 254
 99c:	80 81       	ld	r24, Z
 99e:	81 34       	cpi	r24, 0x41	; 65
 9a0:	28 f0       	brcs	.+10     	; 0x9ac <__vector_13+0xfe>
		{
			stepper._accellStep++;
 9a2:	ed e8       	ldi	r30, 0x8D	; 141
 9a4:	f2 e0       	ldi	r31, 0x02	; 2
 9a6:	83 85       	ldd	r24, Z+11	; 0x0b
 9a8:	8f 5f       	subi	r24, 0xFF	; 255
 9aa:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
 9ac:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <stepper+0xb>
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	eb 5e       	subi	r30, 0xEB	; 235
 9b4:	fe 4f       	sbci	r31, 0xFE	; 254
 9b6:	80 81       	ld	r24, Z
 9b8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 9bc:	29 c0       	rjmp	.+82     	; 0xa10 <__vector_13+0x162>
	}

	else if (stepper._currentStep == stepper._targetStep)
 9be:	ed e8       	ldi	r30, 0x8D	; 141
 9c0:	f2 e0       	ldi	r31, 0x02	; 2
 9c2:	87 81       	ldd	r24, Z+7	; 0x07
 9c4:	25 81       	ldd	r18, Z+5	; 0x05
 9c6:	36 81       	ldd	r19, Z+6	; 0x06
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	82 17       	cp	r24, r18
 9cc:	93 07       	cpc	r25, r19
 9ce:	01 f5       	brne	.+64     	; 0xa10 <__vector_13+0x162>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
 9d0:	82 81       	ldd	r24, Z+2	; 0x02
 9d2:	93 81       	ldd	r25, Z+3	; 0x03
 9d4:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
 9d6:	81 85       	ldd	r24, Z+9	; 0x09
 9d8:	88 23       	and	r24, r24
 9da:	19 f0       	breq	.+6      	; 0x9e2 <__vector_13+0x134>
 9dc:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <stepper+0xb>
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <__vector_13+0x136>
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	ad e8       	ldi	r26, 0x8D	; 141
 9e6:	b2 e0       	ldi	r27, 0x02	; 2
 9e8:	1b 96       	adiw	r26, 0x0b	; 11
 9ea:	8c 93       	st	X, r24
 9ec:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
 9ee:	1b 96       	adiw	r26, 0x0b	; 11
 9f0:	ec 91       	ld	r30, X
 9f2:	1b 97       	sbiw	r26, 0x0b	; 11
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	eb 5e       	subi	r30, 0xEB	; 235
 9f8:	fe 4f       	sbci	r31, 0xFE	; 254
 9fa:	80 81       	ld	r24, Z
 9fc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
 a00:	19 96       	adiw	r26, 0x09	; 9
 a02:	8c 91       	ld	r24, X
 a04:	81 11       	cpse	r24, r1
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <__vector_13+0x15e>
 a08:	82 b1       	in	r24, 0x02	; 2
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <__vector_13+0x160>
 a0c:	82 b1       	in	r24, 0x02	; 2
 a0e:	82 b9       	out	0x02, r24	; 2
	}
	if (stepper._isInitiated == 0)
 a10:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <stepper+0xa>
 a14:	81 11       	cpse	r24, r1
 a16:	0f c0       	rjmp	.+30     	; 0xa36 <__vector_13+0x188>
	{
		if ((PINE & 0x08) == 0)
 a18:	63 99       	sbic	0x0c, 3	; 12
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <__vector_13+0x188>
		{
			//Reset the values when the hall sensor fires for the first time
			stepper._isInitiated = 1;
 a1c:	ed e8       	ldi	r30, 0x8D	; 141
 a1e:	f2 e0       	ldi	r31, 0x02	; 2
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
 a24:	10 82       	st	Z, r1
			stepper.direction = 1;
 a26:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
 a28:	13 82       	std	Z+3, r1	; 0x03
 a2a:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
 a2c:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
 a2e:	16 82       	std	Z+6, r1	; 0x06
 a30:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
 a32:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
 a34:	10 86       	std	Z+8, r1	; 0x08
		}
	}
	PORTC ^=0x01;
 a36:	98 b1       	in	r25, 0x08	; 8
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	89 27       	eor	r24, r25
 a3c:	88 b9       	out	0x08, r24	; 8
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	0f 90       	pop	r0
 a44:	0f 90       	pop	r0
 a46:	df 91       	pop	r29
 a48:	cf 91       	pop	r28
 a4a:	ff 91       	pop	r31
 a4c:	ef 91       	pop	r30
 a4e:	bf 91       	pop	r27
 a50:	af 91       	pop	r26
 a52:	9f 91       	pop	r25
 a54:	8f 91       	pop	r24
 a56:	3f 91       	pop	r19
 a58:	2f 91       	pop	r18
 a5a:	0f 90       	pop	r0
 a5c:	0b be       	out	0x3b, r0	; 59
 a5e:	0f 90       	pop	r0
 a60:	0f be       	out	0x3f, r0	; 63
 a62:	0f 90       	pop	r0
 a64:	1f 90       	pop	r1
 a66:	18 95       	reti

00000a68 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
 a68:	0f 93       	push	r16
 a6a:	1f 93       	push	r17
 a6c:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
 a6e:	f8 94       	cli
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
 a70:	e1 e6       	ldi	r30, 0x61	; 97
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	80 83       	st	Z, r24
	CLKPR = 0;
 a78:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
 a7a:	52 d1       	rcall	.+676    	; 0xd20 <UART_Init>
	GPIO_Init();
 a7c:	a1 dd       	rcall	.-1214   	; 0x5c0 <GPIO_Init>
	TIMER_Init();
 a7e:	d5 d0       	rcall	.+426    	; 0xc2a <TIMER_Init>
	PWM_Init();
 a80:	6e de       	rcall	.-804    	; 0x75e <PWM_Init>
 a82:	28 db       	rcall	.-2480   	; 0xd4 <ADC_Init>
	ADC_Init();
 a84:	89 de       	rcall	.-750    	; 0x798 <STEPPER_Init>
 a86:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <g_ADCCount+0x1>
	STEPPER_Init();
 a8a:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <g_ADCCount>
	// Intiialize Globals
	g_ADCCount = 0;
 a8e:	44 e1       	ldi	r20, 0x14	; 20
 a90:	50 e0       	ldi	r21, 0x00	; 0
 a92:	60 e2       	ldi	r22, 0x20	; 32
	memset(g_ADCResult, 800, sizeof(g_ADCResult));
 a94:	73 e0       	ldi	r23, 0x03	; 3
 a96:	88 e2       	ldi	r24, 0x28	; 40
 a98:	92 e0       	ldi	r25, 0x02	; 2
 a9a:	89 d2       	rcall	.+1298   	; 0xfae <memset>
 a9c:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <HEAD+0x1>
 aa0:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <HEAD>

	HEAD = NULL;
 aa4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <TAIL+0x1>
 aa8:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <TAIL>
	TAIL = NULL;
 aac:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <STAGE1+0x1>
 ab0:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <STAGE1>
	STAGE1 = NULL;
 ab4:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <STAGE2+0x1>
 ab8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <STAGE2>
	STAGE2 = NULL;
 abc:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <FRONT+0x1>
 ac0:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <FRONT>
	FRONT = NULL;
 ac4:	20 e0       	ldi	r18, 0x00	; 0
 ac6:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
 ac8:	6f ef       	ldi	r22, 0xFF	; 255
 aca:	89 ee       	ldi	r24, 0xE9	; 233
 acc:	9d ef       	ldi	r25, 0xFD	; 253
 ace:	16 dd       	rcall	.-1492   	; 0x4fc <LL_ItemInit>
 ad0:	2d dd       	rcall	.-1446   	; 0x52c <LL_ItemListInit>
 ad2:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <HEAD+0x1>
		
	// First Node
	HEAD = LL_ItemListInit(initNode);
 ad6:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <HEAD>
 ada:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <FRONT+0x1>
 ade:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <FRONT>
	FRONT = HEAD;
 ae2:	ca ef       	ldi	r28, 0xFA	; 250
 ae4:	08 ee       	ldi	r16, 0xE8	; 232
 ae6:	1d ef       	ldi	r17, 0xFD	; 253
 ae8:	20 e0       	ldi	r18, 0x00	; 0
 aea:	44 e0       	ldi	r20, 0x04	; 4
 aec:	6c 2f       	mov	r22, r28

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
 aee:	c8 01       	movw	r24, r16
 af0:	05 dd       	rcall	.-1526   	; 0x4fc <LL_ItemInit>
 af2:	bc 01       	movw	r22, r24
 af4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
 af8:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 afc:	2b dd       	rcall	.-1450   	; 0x554 <LL_AddBack>
 afe:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <TAIL+0x1>
 b02:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <TAIL>
 b06:	01 50       	subi	r16, 0x01	; 1
 b08:	11 09       	sbc	r17, r1
 b0a:	c1 50       	subi	r28, 0x01	; 1
 b0c:	cb 3c       	cpi	r28, 0xCB	; 203
 b0e:	61 f7       	brne	.-40     	; 0xae8 <SYS_Init+0x80>
 b10:	05 e0       	ldi	r16, 0x05	; 5
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
 b12:	10 e0       	ldi	r17, 0x00	; 0
 b14:	20 e0       	ldi	r18, 0x00	; 0
 b16:	45 e0       	ldi	r20, 0x05	; 5
 b18:	6a ef       	ldi	r22, 0xFA	; 250
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
 b1a:	88 ee       	ldi	r24, 0xE8	; 232
 b1c:	9d ef       	ldi	r25, 0xFD	; 253
 b1e:	ee dc       	rcall	.-1572   	; 0x4fc <LL_ItemInit>
 b20:	bc 01       	movw	r22, r24
 b22:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <HEAD>
		LL_AddBack(HEAD,initNode);
 b26:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <HEAD+0x1>
 b2a:	14 dd       	rcall	.-1496   	; 0x554 <LL_AddBack>
 b2c:	01 50       	subi	r16, 0x01	; 1
 b2e:	11 09       	sbc	r17, r1
 b30:	89 f7       	brne	.-30     	; 0xb14 <SYS_Init+0xac>
 b32:	81 e4       	ldi	r24, 0x41	; 65
 b34:	91 e0       	ldi	r25, 0x01	; 1
 b36:	0c d1       	rcall	.+536    	; 0xd50 <UART_SendString>
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
 b38:	cf 91       	pop	r28
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	08 95       	ret

00000b40 <__vector_17>:
 b40:	1f 92       	push	r1

} // SYS_Init
 b42:	0f 92       	push	r0
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	0f 92       	push	r0
 b48:	11 24       	eor	r1, r1
/*-----------------------------------------------------------*/

static volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
 b4a:	0b b6       	in	r0, 0x3b	; 59
 b4c:	0f 92       	push	r0
 b4e:	ef 92       	push	r14
 b50:	ff 92       	push	r15
 b52:	0f 93       	push	r16
 b54:	1f 93       	push	r17
 b56:	2f 93       	push	r18
 b58:	3f 93       	push	r19
 b5a:	4f 93       	push	r20
 b5c:	5f 93       	push	r21
 b5e:	6f 93       	push	r22
 b60:	7f 93       	push	r23
 b62:	8f 93       	push	r24
 b64:	9f 93       	push	r25
 b66:	af 93       	push	r26
 b68:	bf 93       	push	r27
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	ef 93       	push	r30
 b70:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
 b72:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_timer_tick>
 b76:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <_timer_tick+0x1>
 b7a:	01 96       	adiw	r24, 0x01	; 1
 b7c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <_timer_tick+0x1>
 b80:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_timer_tick>
	size_t i;
	PORTC ^= 0xFE;
 b84:	98 b1       	in	r25, 0x08	; 8
 b86:	8e ef       	ldi	r24, 0xFE	; 254
 b88:	89 27       	eor	r24, r25
 b8a:	88 b9       	out	0x08, r24	; 8
 b8c:	c2 e4       	ldi	r28, 0x42	; 66
 b8e:	d2 e0       	ldi	r29, 0x02	; 2
 b90:	0f 2e       	mov	r0, r31
 b92:	fa e8       	ldi	r31, 0x8A	; 138
 b94:	ef 2e       	mov	r14, r31
 b96:	f2 e0       	ldi	r31, 0x02	; 2
 b98:	ff 2e       	mov	r15, r31
 b9a:	f0 2d       	mov	r31, r0
 b9c:	8e 01       	movw	r16, r28
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
 b9e:	ec 81       	ldd	r30, Y+4	; 0x04
 ba0:	fd 81       	ldd	r31, Y+5	; 0x05
 ba2:	30 97       	sbiw	r30, 0x00	; 0
 ba4:	09 f1       	breq	.+66     	; 0xbe8 <__vector_17+0xa8>
 ba6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <_timer_tick>
 baa:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <_timer_tick+0x1>
 bae:	28 81       	ld	r18, Y
 bb0:	39 81       	ldd	r19, Y+1	; 0x01
 bb2:	28 17       	cp	r18, r24
 bb4:	39 07       	cpc	r19, r25
 bb6:	c1 f4       	brne	.+48     	; 0xbe8 <__vector_17+0xa8>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
 bb8:	88 85       	ldd	r24, Y+8	; 0x08
 bba:	82 30       	cpi	r24, 0x02	; 2
 bbc:	19 f4       	brne	.+6      	; 0xbc4 <__vector_17+0x84>
 bbe:	8e 81       	ldd	r24, Y+6	; 0x06
 bc0:	9f 81       	ldd	r25, Y+7	; 0x07
 bc2:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
 bc4:	d8 01       	movw	r26, r16
 bc6:	12 96       	adiw	r26, 0x02	; 2
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	13 97       	sbiw	r26, 0x03	; 3
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	41 f0       	breq	.+16     	; 0xbe2 <__vector_17+0xa2>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
 bd2:	2d 91       	ld	r18, X+
 bd4:	3c 91       	ld	r19, X
 bd6:	11 97       	sbiw	r26, 0x01	; 1
 bd8:	82 0f       	add	r24, r18
 bda:	93 1f       	adc	r25, r19
 bdc:	8d 93       	st	X+, r24
 bde:	9c 93       	st	X, r25
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <__vector_17+0xa8>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
 be2:	f8 01       	movw	r30, r16
 be4:	15 82       	std	Z+5, r1	; 0x05
 be6:	14 82       	std	Z+4, r1	; 0x04
 be8:	29 96       	adiw	r28, 0x09	; 9
	*/	
	_timer_tick++;
	size_t i;
	PORTC ^= 0xFE;
	
	for (i = 0; i < MAX_TIMERS; i++) {
 bea:	ce 15       	cp	r28, r14
 bec:	df 05       	cpc	r29, r15
 bee:	b1 f6       	brne	.-84     	; 0xb9c <__vector_17+0x5c>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
	PORTC ^= 0xFE;
 bf0:	98 b1       	in	r25, 0x08	; 8
 bf2:	8e ef       	ldi	r24, 0xFE	; 254
 bf4:	89 27       	eor	r24, r25
 bf6:	88 b9       	out	0x08, r24	; 8
}
 bf8:	ff 91       	pop	r31
 bfa:	ef 91       	pop	r30
 bfc:	df 91       	pop	r29
 bfe:	cf 91       	pop	r28
 c00:	bf 91       	pop	r27
 c02:	af 91       	pop	r26
 c04:	9f 91       	pop	r25
 c06:	8f 91       	pop	r24
 c08:	7f 91       	pop	r23
 c0a:	6f 91       	pop	r22
 c0c:	5f 91       	pop	r21
 c0e:	4f 91       	pop	r20
 c10:	3f 91       	pop	r19
 c12:	2f 91       	pop	r18
 c14:	1f 91       	pop	r17
 c16:	0f 91       	pop	r16
 c18:	ff 90       	pop	r15
 c1a:	ef 90       	pop	r14
 c1c:	0f 90       	pop	r0
 c1e:	0b be       	out	0x3b, r0	; 59
 c20:	0f 90       	pop	r0
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	0f 90       	pop	r0
 c26:	1f 90       	pop	r1
 c28:	18 95       	reti

00000c2a <TIMER_Init>:
	/*! 
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
    TCNT1 = 0x0000;
 c2a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 c2e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
    OCR1A = 0x0848;
 c32:	88 e4       	ldi	r24, 0x48	; 72
 c34:	98 e0       	ldi	r25, 0x08	; 8
 c36:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 c3a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
 c3e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
 c42:	89 e0       	ldi	r24, 0x09	; 9
 c44:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
 c48:	82 e0       	ldi	r24, 0x02	; 2
 c4a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
 c4e:	88 e4       	ldi	r24, 0x48	; 72
 c50:	e2 e4       	ldi	r30, 0x42	; 66
 c52:	f2 e0       	ldi	r31, 0x02	; 2
 c54:	df 01       	movw	r26, r30
 c56:	1d 92       	st	X+, r1
 c58:	8a 95       	dec	r24
 c5a:	e9 f7       	brne	.-6      	; 0xc56 <TIMER_Init+0x2c>
 c5c:	08 95       	ret

00000c5e <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
 c5e:	0f 93       	push	r16
 c60:	1f 93       	push	r17
 c62:	cf 93       	push	r28
 c64:	df 93       	push	r29
 c66:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
 c68:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <_timer+0x4>
 c6c:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <_timer+0x5>
 c70:	67 2b       	or	r22, r23
 c72:	09 f4       	brne	.+2      	; 0xc76 <TIMER_Create+0x18>
 c74:	49 c0       	rjmp	.+146    	; 0xd08 <TIMER_Create+0xaa>
 c76:	e2 e4       	ldi	r30, 0x42	; 66
 c78:	f2 e0       	ldi	r31, 0x02	; 2
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
 c7a:	a1 e0       	ldi	r26, 0x01	; 1
 c7c:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
 c7e:	c5 85       	ldd	r28, Z+13	; 0x0d
 c80:	d6 85       	ldd	r29, Z+14	; 0x0e
 c82:	cd 2b       	or	r28, r29
 c84:	09 f4       	brne	.+2      	; 0xc88 <TIMER_Create+0x2a>
 c86:	42 c0       	rjmp	.+132    	; 0xd0c <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
 c88:	11 96       	adiw	r26, 0x01	; 1
 c8a:	39 96       	adiw	r30, 0x09	; 9
 c8c:	a8 30       	cpi	r26, 0x08	; 8
 c8e:	b1 05       	cpc	r27, r1
 c90:	b1 f7       	brne	.-20     	; 0xc7e <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	3f c0       	rjmp	.+126    	; 0xd16 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
 c98:	fd 01       	movw	r30, r26
 c9a:	ee 0f       	add	r30, r30
 c9c:	ff 1f       	adc	r31, r31
 c9e:	ee 0f       	add	r30, r30
 ca0:	ff 1f       	adc	r31, r31
 ca2:	ee 0f       	add	r30, r30
 ca4:	ff 1f       	adc	r31, r31
 ca6:	ea 0f       	add	r30, r26
 ca8:	fb 1f       	adc	r31, r27
 caa:	ee 5b       	subi	r30, 0xBE	; 190
 cac:	fd 4f       	sbci	r31, 0xFD	; 253
 cae:	93 83       	std	Z+3, r25	; 0x03
 cb0:	82 83       	std	Z+2, r24	; 0x02
 cb2:	0d c0       	rjmp	.+26     	; 0xcce <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
 cb4:	fd 01       	movw	r30, r26
 cb6:	ee 0f       	add	r30, r30
 cb8:	ff 1f       	adc	r31, r31
 cba:	ee 0f       	add	r30, r30
 cbc:	ff 1f       	adc	r31, r31
 cbe:	ee 0f       	add	r30, r30
 cc0:	ff 1f       	adc	r31, r31
 cc2:	ea 0f       	add	r30, r26
 cc4:	fb 1f       	adc	r31, r27
 cc6:	ee 5b       	subi	r30, 0xBE	; 190
 cc8:	fd 4f       	sbci	r31, 0xFD	; 253
 cca:	13 82       	std	Z+3, r1	; 0x03
 ccc:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
 cce:	fd 01       	movw	r30, r26
 cd0:	ee 0f       	add	r30, r30
 cd2:	ff 1f       	adc	r31, r31
 cd4:	ee 0f       	add	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	ea 0f       	add	r30, r26
 cde:	fb 1f       	adc	r31, r27
 ce0:	ee 5b       	subi	r30, 0xBE	; 190
 ce2:	fd 4f       	sbci	r31, 0xFD	; 253
 ce4:	55 83       	std	Z+5, r21	; 0x05
 ce6:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
 ce8:	37 83       	std	Z+7, r19	; 0x07
 cea:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
 cec:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <_timer_tick>
 cf0:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <_timer_tick+0x1>
 cf4:	82 0f       	add	r24, r18
 cf6:	93 1f       	adc	r25, r19
 cf8:	91 83       	std	Z+1, r25	; 0x01
 cfa:	80 83       	st	Z, r24
			_timer[i].state = READY;
 cfc:	82 e0       	ldi	r24, 0x02	; 2
 cfe:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 d00:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
 d02:	8a 2f       	mov	r24, r26
 d04:	9b 2f       	mov	r25, r27
 d06:	07 c0       	rjmp	.+14     	; 0xd16 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
 d08:	a0 e0       	ldi	r26, 0x00	; 0
 d0a:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 d0c:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 d0e:	f8 94       	cli
		{
			if (periodic != 0) 
 d10:	01 2b       	or	r16, r17
 d12:	11 f6       	brne	.-124    	; 0xc98 <TIMER_Create+0x3a>
 d14:	cf cf       	rjmp	.-98     	; 0xcb4 <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
 d16:	df 91       	pop	r29
 d18:	cf 91       	pop	r28
 d1a:	1f 91       	pop	r17
 d1c:	0f 91       	pop	r16
 d1e:	08 95       	ret

00000d20 <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
 d20:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
 d24:	83 e3       	ldi	r24, 0x33	; 51
 d26:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
 d2a:	e9 ec       	ldi	r30, 0xC9	; 201
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	80 81       	ld	r24, Z
 d30:	88 61       	ori	r24, 0x18	; 24
 d32:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 d34:	ea ec       	ldi	r30, 0xCA	; 202
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	80 81       	ld	r24, Z
 d3a:	86 60       	ori	r24, 0x06	; 6
 d3c:	80 83       	st	Z, r24
 d3e:	08 95       	ret

00000d40 <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
 d40:	e8 ec       	ldi	r30, 0xC8	; 200
 d42:	f0 e0       	ldi	r31, 0x00	; 0
 d44:	90 81       	ld	r25, Z
 d46:	95 ff       	sbrs	r25, 5
 d48:	fd cf       	rjmp	.-6      	; 0xd44 <UART_SendChar+0x4>
	UDR1 = c;
 d4a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 d4e:	08 95       	ret

00000d50 <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
 d50:	cf 93       	push	r28
 d52:	df 93       	push	r29
 d54:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
 d56:	88 81       	ld	r24, Y
 d58:	88 23       	and	r24, r24
 d5a:	29 f0       	breq	.+10     	; 0xd66 <UART_SendString+0x16>
 d5c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
 d5e:	f0 df       	rcall	.-32     	; 0xd40 <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
 d60:	89 91       	ld	r24, Y+
 d62:	81 11       	cpse	r24, r1
 d64:	fc cf       	rjmp	.-8      	; 0xd5e <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <malloc>:
 d6c:	0f 93       	push	r16
 d6e:	1f 93       	push	r17
 d70:	cf 93       	push	r28
 d72:	df 93       	push	r29
 d74:	82 30       	cpi	r24, 0x02	; 2
 d76:	91 05       	cpc	r25, r1
 d78:	10 f4       	brcc	.+4      	; 0xd7e <malloc+0x12>
 d7a:	82 e0       	ldi	r24, 0x02	; 2
 d7c:	90 e0       	ldi	r25, 0x00	; 0
 d7e:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <__flp>
 d82:	f0 91 9c 02 	lds	r31, 0x029C	; 0x80029c <__flp+0x1>
 d86:	20 e0       	ldi	r18, 0x00	; 0
 d88:	30 e0       	ldi	r19, 0x00	; 0
 d8a:	a0 e0       	ldi	r26, 0x00	; 0
 d8c:	b0 e0       	ldi	r27, 0x00	; 0
 d8e:	30 97       	sbiw	r30, 0x00	; 0
 d90:	19 f1       	breq	.+70     	; 0xdd8 <malloc+0x6c>
 d92:	40 81       	ld	r20, Z
 d94:	51 81       	ldd	r21, Z+1	; 0x01
 d96:	02 81       	ldd	r16, Z+2	; 0x02
 d98:	13 81       	ldd	r17, Z+3	; 0x03
 d9a:	48 17       	cp	r20, r24
 d9c:	59 07       	cpc	r21, r25
 d9e:	c8 f0       	brcs	.+50     	; 0xdd2 <malloc+0x66>
 da0:	84 17       	cp	r24, r20
 da2:	95 07       	cpc	r25, r21
 da4:	69 f4       	brne	.+26     	; 0xdc0 <malloc+0x54>
 da6:	10 97       	sbiw	r26, 0x00	; 0
 da8:	31 f0       	breq	.+12     	; 0xdb6 <malloc+0x4a>
 daa:	12 96       	adiw	r26, 0x02	; 2
 dac:	0c 93       	st	X, r16
 dae:	12 97       	sbiw	r26, 0x02	; 2
 db0:	13 96       	adiw	r26, 0x03	; 3
 db2:	1c 93       	st	X, r17
 db4:	27 c0       	rjmp	.+78     	; 0xe04 <malloc+0x98>
 db6:	00 93 9b 02 	sts	0x029B, r16	; 0x80029b <__flp>
 dba:	10 93 9c 02 	sts	0x029C, r17	; 0x80029c <__flp+0x1>
 dbe:	22 c0       	rjmp	.+68     	; 0xe04 <malloc+0x98>
 dc0:	21 15       	cp	r18, r1
 dc2:	31 05       	cpc	r19, r1
 dc4:	19 f0       	breq	.+6      	; 0xdcc <malloc+0x60>
 dc6:	42 17       	cp	r20, r18
 dc8:	53 07       	cpc	r21, r19
 dca:	18 f4       	brcc	.+6      	; 0xdd2 <malloc+0x66>
 dcc:	9a 01       	movw	r18, r20
 dce:	bd 01       	movw	r22, r26
 dd0:	ef 01       	movw	r28, r30
 dd2:	df 01       	movw	r26, r30
 dd4:	f8 01       	movw	r30, r16
 dd6:	db cf       	rjmp	.-74     	; 0xd8e <malloc+0x22>
 dd8:	21 15       	cp	r18, r1
 dda:	31 05       	cpc	r19, r1
 ddc:	f9 f0       	breq	.+62     	; 0xe1c <malloc+0xb0>
 dde:	28 1b       	sub	r18, r24
 de0:	39 0b       	sbc	r19, r25
 de2:	24 30       	cpi	r18, 0x04	; 4
 de4:	31 05       	cpc	r19, r1
 de6:	80 f4       	brcc	.+32     	; 0xe08 <malloc+0x9c>
 de8:	8a 81       	ldd	r24, Y+2	; 0x02
 dea:	9b 81       	ldd	r25, Y+3	; 0x03
 dec:	61 15       	cp	r22, r1
 dee:	71 05       	cpc	r23, r1
 df0:	21 f0       	breq	.+8      	; 0xdfa <malloc+0x8e>
 df2:	fb 01       	movw	r30, r22
 df4:	93 83       	std	Z+3, r25	; 0x03
 df6:	82 83       	std	Z+2, r24	; 0x02
 df8:	04 c0       	rjmp	.+8      	; 0xe02 <malloc+0x96>
 dfa:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <__flp+0x1>
 dfe:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <__flp>
 e02:	fe 01       	movw	r30, r28
 e04:	32 96       	adiw	r30, 0x02	; 2
 e06:	44 c0       	rjmp	.+136    	; 0xe90 <malloc+0x124>
 e08:	fe 01       	movw	r30, r28
 e0a:	e2 0f       	add	r30, r18
 e0c:	f3 1f       	adc	r31, r19
 e0e:	81 93       	st	Z+, r24
 e10:	91 93       	st	Z+, r25
 e12:	22 50       	subi	r18, 0x02	; 2
 e14:	31 09       	sbc	r19, r1
 e16:	39 83       	std	Y+1, r19	; 0x01
 e18:	28 83       	st	Y, r18
 e1a:	3a c0       	rjmp	.+116    	; 0xe90 <malloc+0x124>
 e1c:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <__brkval>
 e20:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <__brkval+0x1>
 e24:	23 2b       	or	r18, r19
 e26:	41 f4       	brne	.+16     	; 0xe38 <malloc+0xcc>
 e28:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 e2c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 e30:	30 93 9a 02 	sts	0x029A, r19	; 0x80029a <__brkval+0x1>
 e34:	20 93 99 02 	sts	0x0299, r18	; 0x800299 <__brkval>
 e38:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 e3c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 e40:	21 15       	cp	r18, r1
 e42:	31 05       	cpc	r19, r1
 e44:	41 f4       	brne	.+16     	; 0xe56 <malloc+0xea>
 e46:	2d b7       	in	r18, 0x3d	; 61
 e48:	3e b7       	in	r19, 0x3e	; 62
 e4a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 e4e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 e52:	24 1b       	sub	r18, r20
 e54:	35 0b       	sbc	r19, r21
 e56:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <__brkval>
 e5a:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <__brkval+0x1>
 e5e:	e2 17       	cp	r30, r18
 e60:	f3 07       	cpc	r31, r19
 e62:	a0 f4       	brcc	.+40     	; 0xe8c <malloc+0x120>
 e64:	2e 1b       	sub	r18, r30
 e66:	3f 0b       	sbc	r19, r31
 e68:	28 17       	cp	r18, r24
 e6a:	39 07       	cpc	r19, r25
 e6c:	78 f0       	brcs	.+30     	; 0xe8c <malloc+0x120>
 e6e:	ac 01       	movw	r20, r24
 e70:	4e 5f       	subi	r20, 0xFE	; 254
 e72:	5f 4f       	sbci	r21, 0xFF	; 255
 e74:	24 17       	cp	r18, r20
 e76:	35 07       	cpc	r19, r21
 e78:	48 f0       	brcs	.+18     	; 0xe8c <malloc+0x120>
 e7a:	4e 0f       	add	r20, r30
 e7c:	5f 1f       	adc	r21, r31
 e7e:	50 93 9a 02 	sts	0x029A, r21	; 0x80029a <__brkval+0x1>
 e82:	40 93 99 02 	sts	0x0299, r20	; 0x800299 <__brkval>
 e86:	81 93       	st	Z+, r24
 e88:	91 93       	st	Z+, r25
 e8a:	02 c0       	rjmp	.+4      	; 0xe90 <malloc+0x124>
 e8c:	e0 e0       	ldi	r30, 0x00	; 0
 e8e:	f0 e0       	ldi	r31, 0x00	; 0
 e90:	cf 01       	movw	r24, r30
 e92:	df 91       	pop	r29
 e94:	cf 91       	pop	r28
 e96:	1f 91       	pop	r17
 e98:	0f 91       	pop	r16
 e9a:	08 95       	ret

00000e9c <free>:
 e9c:	cf 93       	push	r28
 e9e:	df 93       	push	r29
 ea0:	00 97       	sbiw	r24, 0x00	; 0
 ea2:	09 f4       	brne	.+2      	; 0xea6 <free+0xa>
 ea4:	81 c0       	rjmp	.+258    	; 0xfa8 <free+0x10c>
 ea6:	fc 01       	movw	r30, r24
 ea8:	32 97       	sbiw	r30, 0x02	; 2
 eaa:	13 82       	std	Z+3, r1	; 0x03
 eac:	12 82       	std	Z+2, r1	; 0x02
 eae:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <__flp>
 eb2:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <__flp+0x1>
 eb6:	10 97       	sbiw	r26, 0x00	; 0
 eb8:	81 f4       	brne	.+32     	; 0xeda <free+0x3e>
 eba:	20 81       	ld	r18, Z
 ebc:	31 81       	ldd	r19, Z+1	; 0x01
 ebe:	82 0f       	add	r24, r18
 ec0:	93 1f       	adc	r25, r19
 ec2:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <__brkval>
 ec6:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <__brkval+0x1>
 eca:	28 17       	cp	r18, r24
 ecc:	39 07       	cpc	r19, r25
 ece:	51 f5       	brne	.+84     	; 0xf24 <free+0x88>
 ed0:	f0 93 9a 02 	sts	0x029A, r31	; 0x80029a <__brkval+0x1>
 ed4:	e0 93 99 02 	sts	0x0299, r30	; 0x800299 <__brkval>
 ed8:	67 c0       	rjmp	.+206    	; 0xfa8 <free+0x10c>
 eda:	ed 01       	movw	r28, r26
 edc:	20 e0       	ldi	r18, 0x00	; 0
 ede:	30 e0       	ldi	r19, 0x00	; 0
 ee0:	ce 17       	cp	r28, r30
 ee2:	df 07       	cpc	r29, r31
 ee4:	40 f4       	brcc	.+16     	; 0xef6 <free+0x5a>
 ee6:	4a 81       	ldd	r20, Y+2	; 0x02
 ee8:	5b 81       	ldd	r21, Y+3	; 0x03
 eea:	9e 01       	movw	r18, r28
 eec:	41 15       	cp	r20, r1
 eee:	51 05       	cpc	r21, r1
 ef0:	f1 f0       	breq	.+60     	; 0xf2e <free+0x92>
 ef2:	ea 01       	movw	r28, r20
 ef4:	f5 cf       	rjmp	.-22     	; 0xee0 <free+0x44>
 ef6:	d3 83       	std	Z+3, r29	; 0x03
 ef8:	c2 83       	std	Z+2, r28	; 0x02
 efa:	40 81       	ld	r20, Z
 efc:	51 81       	ldd	r21, Z+1	; 0x01
 efe:	84 0f       	add	r24, r20
 f00:	95 1f       	adc	r25, r21
 f02:	c8 17       	cp	r28, r24
 f04:	d9 07       	cpc	r29, r25
 f06:	59 f4       	brne	.+22     	; 0xf1e <free+0x82>
 f08:	88 81       	ld	r24, Y
 f0a:	99 81       	ldd	r25, Y+1	; 0x01
 f0c:	84 0f       	add	r24, r20
 f0e:	95 1f       	adc	r25, r21
 f10:	02 96       	adiw	r24, 0x02	; 2
 f12:	91 83       	std	Z+1, r25	; 0x01
 f14:	80 83       	st	Z, r24
 f16:	8a 81       	ldd	r24, Y+2	; 0x02
 f18:	9b 81       	ldd	r25, Y+3	; 0x03
 f1a:	93 83       	std	Z+3, r25	; 0x03
 f1c:	82 83       	std	Z+2, r24	; 0x02
 f1e:	21 15       	cp	r18, r1
 f20:	31 05       	cpc	r19, r1
 f22:	29 f4       	brne	.+10     	; 0xf2e <free+0x92>
 f24:	f0 93 9c 02 	sts	0x029C, r31	; 0x80029c <__flp+0x1>
 f28:	e0 93 9b 02 	sts	0x029B, r30	; 0x80029b <__flp>
 f2c:	3d c0       	rjmp	.+122    	; 0xfa8 <free+0x10c>
 f2e:	e9 01       	movw	r28, r18
 f30:	fb 83       	std	Y+3, r31	; 0x03
 f32:	ea 83       	std	Y+2, r30	; 0x02
 f34:	49 91       	ld	r20, Y+
 f36:	59 91       	ld	r21, Y+
 f38:	c4 0f       	add	r28, r20
 f3a:	d5 1f       	adc	r29, r21
 f3c:	ec 17       	cp	r30, r28
 f3e:	fd 07       	cpc	r31, r29
 f40:	61 f4       	brne	.+24     	; 0xf5a <free+0xbe>
 f42:	80 81       	ld	r24, Z
 f44:	91 81       	ldd	r25, Z+1	; 0x01
 f46:	84 0f       	add	r24, r20
 f48:	95 1f       	adc	r25, r21
 f4a:	02 96       	adiw	r24, 0x02	; 2
 f4c:	e9 01       	movw	r28, r18
 f4e:	99 83       	std	Y+1, r25	; 0x01
 f50:	88 83       	st	Y, r24
 f52:	82 81       	ldd	r24, Z+2	; 0x02
 f54:	93 81       	ldd	r25, Z+3	; 0x03
 f56:	9b 83       	std	Y+3, r25	; 0x03
 f58:	8a 83       	std	Y+2, r24	; 0x02
 f5a:	e0 e0       	ldi	r30, 0x00	; 0
 f5c:	f0 e0       	ldi	r31, 0x00	; 0
 f5e:	12 96       	adiw	r26, 0x02	; 2
 f60:	8d 91       	ld	r24, X+
 f62:	9c 91       	ld	r25, X
 f64:	13 97       	sbiw	r26, 0x03	; 3
 f66:	00 97       	sbiw	r24, 0x00	; 0
 f68:	19 f0       	breq	.+6      	; 0xf70 <free+0xd4>
 f6a:	fd 01       	movw	r30, r26
 f6c:	dc 01       	movw	r26, r24
 f6e:	f7 cf       	rjmp	.-18     	; 0xf5e <free+0xc2>
 f70:	8d 91       	ld	r24, X+
 f72:	9c 91       	ld	r25, X
 f74:	11 97       	sbiw	r26, 0x01	; 1
 f76:	9d 01       	movw	r18, r26
 f78:	2e 5f       	subi	r18, 0xFE	; 254
 f7a:	3f 4f       	sbci	r19, 0xFF	; 255
 f7c:	82 0f       	add	r24, r18
 f7e:	93 1f       	adc	r25, r19
 f80:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <__brkval>
 f84:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <__brkval+0x1>
 f88:	28 17       	cp	r18, r24
 f8a:	39 07       	cpc	r19, r25
 f8c:	69 f4       	brne	.+26     	; 0xfa8 <free+0x10c>
 f8e:	30 97       	sbiw	r30, 0x00	; 0
 f90:	29 f4       	brne	.+10     	; 0xf9c <free+0x100>
 f92:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <__flp+0x1>
 f96:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <__flp>
 f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <free+0x104>
 f9c:	13 82       	std	Z+3, r1	; 0x03
 f9e:	12 82       	std	Z+2, r1	; 0x02
 fa0:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <__brkval+0x1>
 fa4:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <__brkval>
 fa8:	df 91       	pop	r29
 faa:	cf 91       	pop	r28
 fac:	08 95       	ret

00000fae <memset>:
 fae:	dc 01       	movw	r26, r24
 fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <memset+0x6>
 fb2:	6d 93       	st	X+, r22
 fb4:	41 50       	subi	r20, 0x01	; 1
 fb6:	50 40       	sbci	r21, 0x00	; 0
 fb8:	e0 f7       	brcc	.-8      	; 0xfb2 <memset+0x4>
 fba:	08 95       	ret

00000fbc <_exit>:
 fbc:	f8 94       	cli

00000fbe <__stop_program>:
 fbe:	ff cf       	rjmp	.-2      	; 0xfbe <__stop_program>
