
MECH458.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f8  00800100  00001b32  00001bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  008002f8  008002f8  00001dbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048ec  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a78  00000000  00000000  00006a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003299  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  0000b774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009198  00000000  00000000  0000bf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001955  00000000  00000000  000150d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  00016a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000410c  00000000  00000000  00016d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	00 00       	nop
       4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c5       	rjmp	.+2604   	; 0xa62 <__vector_13>
      36:	00 00       	nop
      38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c0       	rjmp	.+150    	; 0xd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_17>
      48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
      66:	00 00       	nop
      68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__vector_29>
      76:	00 00       	nop
      78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c0       	rjmp	.+70     	; 0xd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c0       	rjmp	.+66     	; 0xd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c0       	rjmp	.+62     	; 0xd4 <__bad_interrupt>
	...

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d0 e2       	ldi	r29, 0x20	; 32
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	12 e0       	ldi	r17, 0x02	; 2
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e2 e3       	ldi	r30, 0x32	; 50
      ac:	fb e1       	ldi	r31, 0x1B	; 27
      ae:	00 e0       	ldi	r16, 0x00	; 0
      b0:	0b bf       	out	0x3b, r16	; 59
      b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
      b4:	07 90       	elpm	r0, Z+
      b6:	0d 92       	st	X+, r0
      b8:	a8 3f       	cpi	r26, 0xF8	; 248
      ba:	b1 07       	cpc	r27, r17
      bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
      be:	23 e0       	ldi	r18, 0x03	; 3
      c0:	a8 ef       	ldi	r26, 0xF8	; 248
      c2:	b2 e0       	ldi	r27, 0x02	; 2
      c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
      c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
      c8:	ad 37       	cpi	r26, 0x7D	; 125
      ca:	b2 07       	cpc	r27, r18
      cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
      ce:	1b d3       	rcall	.+1590   	; 0x706 <main>
      d0:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <_exit>

000000d4 <__bad_interrupt>:
      d4:	14 c4       	rjmp	.+2088   	; 0x8fe <__vector_default>

000000d6 <ADC_Init>:

void ADC_Init()
{
	//
	// High Speed, Enable ADC & Interrupts
	ADCSRB |= (1 << ADHSM);			  
      d6:	eb e7       	ldi	r30, 0x7B	; 123
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 68       	ori	r24, 0x80	; 128
      de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);                
      e0:	ea e7       	ldi	r30, 0x7A	; 122
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	80 68       	ori	r24, 0x80	; 128
      e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);                
      ea:	80 81       	ld	r24, Z
      ec:	88 60       	ori	r24, 0x08	; 8
      ee:	80 83       	st	Z, r24

	// Input Pin F1
	ADMUX |=  ((1 << REFS0) | (1 << MUX0)); 
      f0:	ac e7       	ldi	r26, 0x7C	; 124
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	8c 91       	ld	r24, X
      f6:	81 64       	ori	r24, 0x41	; 65
      f8:	8c 93       	st	X, r24

	// Startup conversion (throw away)
	ADCSRA |= _BV(ADSC);
      fa:	80 81       	ld	r24, Z
      fc:	80 64       	ori	r24, 0x40	; 64
      fe:	80 83       	st	Z, r24
     100:	08 95       	ret

00000102 <__vector_29>:
}

/*-----------------------------------------------------------*/

ISR(ADC_vect)
{
     102:	1f 92       	push	r1
     104:	0f 92       	push	r0
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	0b b6       	in	r0, 0x3b	; 59
     10e:	0f 92       	push	r0
     110:	2f 93       	push	r18
     112:	3f 93       	push	r19
     114:	8f 93       	push	r24
     116:	9f 93       	push	r25
     118:	ef 93       	push	r30
     11a:	ff 93       	push	r31
	//
	// Take 6 samples	
	if (g_ADCCount < 6)
     11c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_ADCCount>
     120:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <g_ADCCount+0x1>
     124:	06 97       	sbiw	r24, 0x06	; 6
     126:	d8 f4       	brcc	.+54     	; 0x15e <__vector_29+0x5c>
	{
			g_ADCResult[g_ADCCount++] = ADC;
     128:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_ADCCount>
     12c:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <g_ADCCount+0x1>
     130:	9c 01       	movw	r18, r24
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	3f 4f       	sbci	r19, 0xFF	; 255
     136:	30 93 1a 03 	sts	0x031A, r19	; 0x80031a <g_ADCCount+0x1>
     13a:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <g_ADCCount>
     13e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     142:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	fc 01       	movw	r30, r24
     14c:	eb 5f       	subi	r30, 0xFB	; 251
     14e:	fc 4f       	sbci	r31, 0xFC	; 252
     150:	31 83       	std	Z+1, r19	; 0x01
     152:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);	 
     154:	ea e7       	ldi	r30, 0x7A	; 122
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	80 64       	ori	r24, 0x40	; 64
     15c:	80 83       	st	Z, r24
	}
	if (g_ADCCount == 6) _timer[1].state = READY;
     15e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <g_ADCCount>
     162:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <g_ADCCount+0x1>
     166:	06 97       	sbiw	r24, 0x06	; 6
     168:	19 f4       	brne	.+6      	; 0x170 <__vector_29+0x6e>
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_timer+0x11>
}
     170:	ff 91       	pop	r31
     172:	ef 91       	pop	r30
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	3f 91       	pop	r19
     17a:	2f 91       	pop	r18
     17c:	0f 90       	pop	r0
     17e:	0b be       	out	0x3b, r0	; 59
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <SERVER_Task>:
	//delay_flag = -1;
}
void Say_Hello(void *arg)
{
	(void) arg;
	UART_SendString("Hello!\r\n");
     18a:	67 99       	sbic	0x0c, 7	; 12
     18c:	16 c0       	rjmp	.+44     	; 0x1ba <SERVER_Task+0x30>
     18e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2359>
     192:	88 23       	and	r24, r24
     194:	81 f0       	breq	.+32     	; 0x1b6 <SERVER_Task+0x2c>
     196:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     19a:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     19e:	89 2b       	or	r24, r25
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <SERVER_Task+0x28>
     1a2:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     1a6:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     1aa:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <STAGE1+0x1>
     1ae:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <STAGE1>
     1b2:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <g_WDTimeout>
     1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <pin7state.2359>
     1ba:	66 99       	sbic	0x0c, 6	; 12
     1bc:	16 c0       	rjmp	.+44     	; 0x1ea <SERVER_Task+0x60>
     1be:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2360>
     1c2:	88 23       	and	r24, r24
     1c4:	81 f0       	breq	.+32     	; 0x1e6 <SERVER_Task+0x5c>
     1c6:	62 e0       	ldi	r22, 0x02	; 2
     1c8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     1cc:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     1d0:	79 d2       	rcall	.+1266   	; 0x6c4 <LL_UpdateStatus>
     1d2:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <g_Timer>
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     1dc:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     1e0:	7b d2       	rcall	.+1270   	; 0x6d8 <LL_UpdateTick>
     1e2:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <g_WDTimeout>
     1e6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <pin6state.2360>
     1ea:	65 99       	sbic	0x0c, 5	; 12
     1ec:	0b c0       	rjmp	.+22     	; 0x204 <SERVER_Task+0x7a>
     1ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2361>
     1f2:	88 23       	and	r24, r24
     1f4:	29 f0       	breq	.+10     	; 0x200 <SERVER_Task+0x76>
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <_timer+0x23>
     1fc:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <g_WDTimeout>
     200:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <pin5state.2361>
     204:	67 9b       	sbis	0x0c, 7	; 12
     206:	0c c0       	rjmp	.+24     	; 0x220 <SERVER_Task+0x96>
     208:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pin7state.2359>
     20c:	81 11       	cpse	r24, r1
     20e:	05 c0       	rjmp	.+10     	; 0x21a <SERVER_Task+0x90>
     210:	82 e0       	ldi	r24, 0x02	; 2
     212:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <_timer+0x1a>
     216:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <_timer+0x47>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <pin7state.2359>
     220:	66 9b       	sbis	0x0c, 6	; 12
     222:	20 c0       	rjmp	.+64     	; 0x264 <SERVER_Task+0xda>
     224:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pin6state.2360>
     228:	81 11       	cpse	r24, r1
     22a:	19 c0       	rjmp	.+50     	; 0x25e <SERVER_Task+0xd4>
     22c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     230:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     234:	00 97       	sbiw	r24, 0x00	; 0
     236:	49 f4       	brne	.+18     	; 0x24a <SERVER_Task+0xc0>
     238:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     23c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     240:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <STAGE2+0x1>
     244:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <STAGE2>
     248:	05 c0       	rjmp	.+10     	; 0x254 <SERVER_Task+0xca>
     24a:	f6 d1       	rcall	.+1004   	; 0x638 <LL_Next>
     24c:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <STAGE2+0x1>
     250:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <STAGE2>
     254:	ea e7       	ldi	r30, 0x7A	; 122
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	80 64       	ori	r24, 0x40	; 64
     25c:	80 83       	st	Z, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pin6state.2360>
     264:	65 9b       	sbis	0x0c, 5	; 12
     266:	0f c0       	rjmp	.+30     	; 0x286 <SERVER_Task+0xfc>
     268:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <pin5state.2361>
     26c:	81 11       	cpse	r24, r1
     26e:	08 c0       	rjmp	.+16     	; 0x280 <SERVER_Task+0xf6>
     270:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     274:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     278:	05 d2       	rcall	.+1034   	; 0x684 <LL_GetClass>
     27a:	85 30       	cpi	r24, 0x05	; 5
     27c:	09 f4       	brne	.+2      	; 0x280 <SERVER_Task+0xf6>
     27e:	e6 d6       	rcall	.+3532   	; 0x104c <SYS_Rampdown>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <pin5state.2361>
     286:	08 95       	ret

00000288 <ADC_Task>:
     288:	cf 92       	push	r12
     28a:	df 92       	push	r13
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	cf 93       	push	r28
     292:	e5 e0       	ldi	r30, 0x05	; 5
     294:	f3 e0       	ldi	r31, 0x03	; 3
     296:	a0 81       	ld	r26, Z
     298:	b1 81       	ldd	r27, Z+1	; 0x01
     29a:	60 81       	ld	r22, Z
     29c:	71 81       	ldd	r23, Z+1	; 0x01
     29e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <ticks.2369>
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <ticks.2369>
     2a8:	c1 2c       	mov	r12, r1
     2aa:	d1 2c       	mov	r13, r1
     2ac:	76 01       	movw	r14, r12
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	4f b7       	in	r20, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	fc 01       	movw	r30, r24
     2b8:	ee 0f       	add	r30, r30
     2ba:	ff 1f       	adc	r31, r31
     2bc:	eb 5f       	subi	r30, 0xFB	; 251
     2be:	fc 4f       	sbci	r31, 0xFC	; 252
     2c0:	20 81       	ld	r18, Z
     2c2:	31 81       	ldd	r19, Z+1	; 0x01
     2c4:	c2 0e       	add	r12, r18
     2c6:	d3 1e       	adc	r13, r19
     2c8:	e1 1c       	adc	r14, r1
     2ca:	f1 1c       	adc	r15, r1
     2cc:	20 81       	ld	r18, Z
     2ce:	31 81       	ldd	r19, Z+1	; 0x01
     2d0:	26 17       	cp	r18, r22
     2d2:	37 07       	cpc	r19, r23
     2d4:	38 f4       	brcc	.+14     	; 0x2e4 <ADC_Task+0x5c>
     2d6:	fc 01       	movw	r30, r24
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	eb 5f       	subi	r30, 0xFB	; 251
     2de:	fc 4f       	sbci	r31, 0xFC	; 252
     2e0:	60 81       	ld	r22, Z
     2e2:	71 81       	ldd	r23, Z+1	; 0x01
     2e4:	fc 01       	movw	r30, r24
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	eb 5f       	subi	r30, 0xFB	; 251
     2ec:	fc 4f       	sbci	r31, 0xFC	; 252
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	a2 17       	cp	r26, r18
     2f4:	b3 07       	cpc	r27, r19
     2f6:	08 f0       	brcs	.+2      	; 0x2fa <ADC_Task+0x72>
     2f8:	4d c0       	rjmp	.+154    	; 0x394 <ADC_Task+0x10c>
     2fa:	fc 01       	movw	r30, r24
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	eb 5f       	subi	r30, 0xFB	; 251
     302:	fc 4f       	sbci	r31, 0xFC	; 252
     304:	a0 81       	ld	r26, Z
     306:	b1 81       	ldd	r27, Z+1	; 0x01
     308:	45 c0       	rjmp	.+138    	; 0x394 <ADC_Task+0x10c>
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	ca 1a       	sub	r12, r26
     310:	db 0a       	sbc	r13, r27
     312:	e1 08       	sbc	r14, r1
     314:	f1 08       	sbc	r15, r1
     316:	c6 1a       	sub	r12, r22
     318:	d7 0a       	sbc	r13, r23
     31a:	e1 08       	sbc	r14, r1
     31c:	f1 08       	sbc	r15, r1
     31e:	f6 94       	lsr	r15
     320:	e7 94       	ror	r14
     322:	d7 94       	ror	r13
     324:	c7 94       	ror	r12
     326:	f6 94       	lsr	r15
     328:	e7 94       	ror	r14
     32a:	d7 94       	ror	r13
     32c:	c7 94       	ror	r12
     32e:	8f bf       	out	0x3f, r24	; 63
     330:	cf b7       	in	r28, 0x3f	; 63
     332:	f8 94       	cli
     334:	d7 01       	movw	r26, r14
     336:	c6 01       	movw	r24, r12
     338:	0b 97       	sbiw	r24, 0x0b	; 11
     33a:	a1 09       	sbc	r26, r1
     33c:	b1 09       	sbc	r27, r1
     33e:	8d 3d       	cpi	r24, 0xDD	; 221
     340:	93 40       	sbci	r25, 0x03	; 3
     342:	a1 05       	cpc	r26, r1
     344:	b1 05       	cpc	r27, r1
     346:	a0 f4       	brcc	.+40     	; 0x370 <ADC_Task+0xe8>
     348:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     34c:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     350:	9e d1       	rcall	.+828    	; 0x68e <LL_GetRefl>
     352:	a0 e0       	ldi	r26, 0x00	; 0
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	c8 16       	cp	r12, r24
     358:	d9 06       	cpc	r13, r25
     35a:	ea 06       	cpc	r14, r26
     35c:	fb 06       	cpc	r15, r27
     35e:	40 f4       	brcc	.+16     	; 0x370 <ADC_Task+0xe8>
     360:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     364:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     368:	00 97       	sbiw	r24, 0x00	; 0
     36a:	11 f0       	breq	.+4      	; 0x370 <ADC_Task+0xe8>
     36c:	b6 01       	movw	r22, r12
     36e:	9a d1       	rcall	.+820    	; 0x6a4 <LL_UpdateRefl>
     370:	cf bf       	out	0x3f, r28	; 63
     372:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <g_ADCCount+0x1>
     376:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <g_ADCCount>
     37a:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <_timer+0x11>
     37e:	66 9b       	sbis	0x0c, 6	; 12
     380:	06 c0       	rjmp	.+12     	; 0x38e <ADC_Task+0x106>
     382:	ea e7       	ldi	r30, 0x7A	; 122
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 83       	st	Z, r24
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <ADC_Task+0x11a>
     38e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <ticks.2369>
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <ADC_Task+0x11a>
     394:	4f bf       	out	0x3f, r20	; 63
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	91 05       	cpc	r25, r1
     39c:	09 f0       	breq	.+2      	; 0x3a0 <ADC_Task+0x118>
     39e:	89 cf       	rjmp	.-238    	; 0x2b2 <ADC_Task+0x2a>
     3a0:	b4 cf       	rjmp	.-152    	; 0x30a <ADC_Task+0x82>
     3a2:	cf 91       	pop	r28
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	df 90       	pop	r13
     3aa:	cf 90       	pop	r12
     3ac:	08 95       	ret

000003ae <MAG_Task>:
     3ae:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_MotorOn>
     3b2:	88 23       	and	r24, r24
     3b4:	29 f0       	breq	.+10     	; 0x3c0 <MAG_Task+0x12>
     3b6:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <tick.2391>
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <tick.2391>
     3c0:	64 99       	sbic	0x0c, 4	; 12
     3c2:	1a c0       	rjmp	.+52     	; 0x3f8 <MAG_Task+0x4a>
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     3ca:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     3ce:	7a d1       	rcall	.+756    	; 0x6c4 <LL_UpdateStatus>
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     3d6:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     3da:	6a d1       	rcall	.+724    	; 0x6b0 <LL_UpdateMag>
     3dc:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     3e0:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     3e4:	29 d1       	rcall	.+594    	; 0x638 <LL_Next>
     3e6:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <STAGE1+0x1>
     3ea:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <STAGE1>
     3ee:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <tick.2391>
     3f2:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <_timer+0x1a>
     3f6:	08 95       	ret
     3f8:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <tick.2391>
     3fc:	8d 33       	cpi	r24, 0x3D	; 61
     3fe:	c8 f0       	brcs	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     406:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     40a:	5c d1       	rcall	.+696    	; 0x6c4 <LL_UpdateStatus>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     412:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     416:	4c d1       	rcall	.+664    	; 0x6b0 <LL_UpdateMag>
     418:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     41c:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     420:	0b d1       	rcall	.+534    	; 0x638 <LL_Next>
     422:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <STAGE1+0x1>
     426:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <STAGE1>
     42a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <tick.2391>
     42e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <_timer+0x1a>
     432:	08 95       	ret

00000434 <EXIT_Task>:
     434:	cf 93       	push	r28
     436:	c0 91 1e 03 	lds	r28, 0x031E	; 0x80031e <g_MotorTicks>
     43a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     43e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     442:	50 d1       	rcall	.+672    	; 0x6e4 <LL_GetTick>
     444:	2c 2f       	mov	r18, r28
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	28 1b       	sub	r18, r24
     44a:	39 0b       	sbc	r19, r25
     44c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <STAGE2_DELAY_COUNT>
     450:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <STAGE2_DELAY_COUNT+0x1>
     454:	28 17       	cp	r18, r24
     456:	39 07       	cpc	r19, r25
     458:	18 f4       	brcc	.+6      	; 0x460 <EXIT_Task+0x2c>
     45a:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_timer+0x23>
     45e:	89 c0       	rjmp	.+274    	; 0x572 <EXIT_Task+0x13e>
     460:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     464:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     468:	0d d1       	rcall	.+538    	; 0x684 <LL_GetClass>
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	31 f4       	brne	.+12     	; 0x47a <EXIT_Task+0x46>
     46e:	8b e1       	ldi	r24, 0x1B	; 27
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	78 d4       	rcall	.+2288   	; 0xd64 <SYS_Pause>
     474:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_timer+0x23>
     478:	7c c0       	rjmp	.+248    	; 0x572 <EXIT_Task+0x13e>
     47a:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <memory.2397>
     47e:	81 11       	cpse	r24, r1
     480:	6e c0       	rjmp	.+220    	; 0x55e <EXIT_Task+0x12a>
     482:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <delay.2398>
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <delay.2398>
     48c:	ed e6       	ldi	r30, 0x6D	; 109
     48e:	f3 e0       	ldi	r31, 0x03	; 3
     490:	85 81       	ldd	r24, Z+5	; 0x05
     492:	96 81       	ldd	r25, Z+6	; 0x06
     494:	87 81       	ldd	r24, Z+7	; 0x07
     496:	03 c0       	rjmp	.+6      	; 0x49e <EXIT_Task+0x6a>
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	42 d2       	rcall	.+1156   	; 0x922 <PWM>
     49e:	c0 91 71 03 	lds	r28, 0x0371	; 0x800371 <stepper+0x4>
     4a2:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     4a6:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     4aa:	ec d0       	rcall	.+472    	; 0x684 <LL_GetClass>
     4ac:	e8 2f       	mov	r30, r24
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	ea 5f       	subi	r30, 0xFA	; 250
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	80 81       	ld	r24, Z
     4b6:	c8 13       	cpse	r28, r24
     4b8:	49 c0       	rjmp	.+146    	; 0x54c <EXIT_Task+0x118>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	31 d2       	rcall	.+1122   	; 0x922 <PWM>
     4c0:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <delay.2398>
     4c4:	89 32       	cpi	r24, 0x29	; 41
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <EXIT_Task+0x9e>
     4c8:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <memory.2397>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <EXIT_Task+0x9e>
     4d0:	40 c0       	rjmp	.+128    	; 0x552 <EXIT_Task+0x11e>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <memory.2397>
     4d8:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <delay.2398>
     4dc:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     4e0:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     4e4:	cf d0       	rcall	.+414    	; 0x684 <LL_GetClass>
     4e6:	c8 2f       	mov	r28, r24
     4e8:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <HEAD>
     4ec:	f0 91 00 03 	lds	r31, 0x0300	; 0x800300 <HEAD+0x1>
     4f0:	82 81       	ldd	r24, Z+2	; 0x02
     4f2:	93 81       	ldd	r25, Z+3	; 0x03
     4f4:	c7 d0       	rcall	.+398    	; 0x684 <LL_GetClass>
     4f6:	c8 13       	cpse	r28, r24
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <EXIT_Task+0xca>
     4fa:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <memory.2397>
     4fe:	63 e0       	ldi	r22, 0x03	; 3
     500:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     504:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     508:	dd d0       	rcall	.+442    	; 0x6c4 <LL_UpdateStatus>
     50a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     50e:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     512:	92 d0       	rcall	.+292    	; 0x638 <LL_Next>
     514:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <HEAD+0x1>
     518:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <HEAD>
     51c:	fc 01       	movw	r30, r24
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	b0 d0       	rcall	.+352    	; 0x684 <LL_GetClass>
     524:	e8 2f       	mov	r30, r24
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	ea 5f       	subi	r30, 0xFA	; 250
     52a:	fe 4f       	sbci	r31, 0xFE	; 254
     52c:	c0 81       	ld	r28, Z
     52e:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     532:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     536:	a6 d0       	rcall	.+332    	; 0x684 <LL_GetClass>
     538:	e8 2f       	mov	r30, r24
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ea 5f       	subi	r30, 0xFA	; 250
     53e:	fe 4f       	sbci	r31, 0xFE	; 254
     540:	80 81       	ld	r24, Z
     542:	6c 2f       	mov	r22, r28
     544:	79 d2       	rcall	.+1266   	; 0xa38 <STEPPER_SetRotation>
     546:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <_timer+0x23>
     54a:	03 c0       	rjmp	.+6      	; 0x552 <EXIT_Task+0x11e>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	e8 d1       	rcall	.+976    	; 0x922 <PWM>
     552:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     556:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     55a:	94 d0       	rcall	.+296    	; 0x684 <LL_GetClass>
     55c:	0a c0       	rjmp	.+20     	; 0x572 <EXIT_Task+0x13e>
     55e:	ed e6       	ldi	r30, 0x6D	; 109
     560:	f3 e0       	ldi	r31, 0x03	; 3
     562:	85 81       	ldd	r24, Z+5	; 0x05
     564:	96 81       	ldd	r25, Z+6	; 0x06
     566:	97 81       	ldd	r25, Z+7	; 0x07
     568:	89 1b       	sub	r24, r25
     56a:	89 31       	cpi	r24, 0x19	; 25
     56c:	08 f0       	brcs	.+2      	; 0x570 <EXIT_Task+0x13c>
     56e:	97 cf       	rjmp	.-210    	; 0x49e <EXIT_Task+0x6a>
     570:	93 cf       	rjmp	.-218    	; 0x498 <EXIT_Task+0x64>
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <BTN_Task>:
     576:	89 b1       	in	r24, 0x09	; 9
     578:	83 70       	andi	r24, 0x03	; 3
     57a:	b9 f0       	breq	.+46     	; 0x5aa <BTN_Task+0x34>
     57c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <__data_end>
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <__data_end>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	90 f0       	brcs	.+36     	; 0x5ae <BTN_Task+0x38>
     58a:	89 b1       	in	r24, 0x09	; 9
     58c:	83 70       	andi	r24, 0x03	; 3
     58e:	79 f0       	breq	.+30     	; 0x5ae <BTN_Task+0x38>
     590:	89 b1       	in	r24, 0x09	; 9
     592:	83 70       	andi	r24, 0x03	; 3
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	19 f4       	brne	.+6      	; 0x59e <BTN_Task+0x28>
     598:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <g_PauseRequest>
     59c:	08 95       	ret
     59e:	89 b1       	in	r24, 0x09	; 9
     5a0:	83 70       	andi	r24, 0x03	; 3
     5a2:	82 30       	cpi	r24, 0x02	; 2
     5a4:	21 f4       	brne	.+8      	; 0x5ae <BTN_Task+0x38>
     5a6:	52 c5       	rjmp	.+2724   	; 0x104c <SYS_Rampdown>
     5a8:	08 95       	ret
     5aa:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <__data_end>
     5ae:	08 95       	ret

000005b0 <WATCHDOG_Task>:
     5b0:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <g_WDTimeout>
     5b4:	82 30       	cpi	r24, 0x02	; 2
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <WATCHDOG_Task+0xa>
     5b8:	49 d5       	rcall	.+2706   	; 0x104c <SYS_Rampdown>
     5ba:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <g_WDTimeout>
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <g_WDTimeout>
     5c4:	08 95       	ret

000005c6 <D_Blinky>:
     5c6:	9b b1       	in	r25, 0x0b	; 11
     5c8:	80 ea       	ldi	r24, 0xA0	; 160
     5ca:	89 27       	eor	r24, r25
     5cc:	8b b9       	out	0x0b, r24	; 11
     5ce:	08 95       	ret

000005d0 <ADD_Task>:
	/*! 
	* \brief 	Initialize a new item to the list
	*			Functionality moved to compile time
	* \param	Unused
	*/	
	if(g_MotorOn) g_Timer++;
     5d0:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_MotorOn>
     5d4:	88 23       	and	r24, r24
     5d6:	29 f0       	breq	.+10     	; 0x5e2 <ADD_Task+0x12>
     5d8:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <g_Timer>
     5dc:	8f 5f       	subi	r24, 0xFF	; 255
     5de:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <g_Timer>
     5e2:	08 95       	ret

000005e4 <LL_ItemInit>:
	return;
}
void LL_UpdatePeriodic(list* ref, uint8_t newPeriodic)
{
	//
	((timerNode*)ref->node)->periodic = newPeriodic;
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	1f 93       	push	r17
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	7c 01       	movw	r14, r24
     5f0:	16 2f       	mov	r17, r22
     5f2:	d4 2f       	mov	r29, r20
     5f4:	c2 2f       	mov	r28, r18
     5f6:	87 e0       	ldi	r24, 0x07	; 7
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	9d d6       	rcall	.+3386   	; 0x1336 <malloc>
     5fc:	fc 01       	movw	r30, r24
     5fe:	f1 82       	std	Z+1, r15	; 0x01
     600:	e0 82       	st	Z, r14
     602:	12 83       	std	Z+2, r17	; 0x02
     604:	d3 83       	std	Z+3, r29	; 0x03
     606:	c4 83       	std	Z+4, r28	; 0x04
     608:	16 82       	std	Z+6, r1	; 0x06
     60a:	15 82       	std	Z+5, r1	; 0x05
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	08 95       	ret

00000618 <LL_ItemListInit>:
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	ec 01       	movw	r28, r24
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	89 d6       	rcall	.+3346   	; 0x1336 <malloc>
     624:	fc 01       	movw	r30, r24
     626:	d1 83       	std	Z+1, r29	; 0x01
     628:	c0 83       	st	Z, r28
     62a:	15 82       	std	Z+5, r1	; 0x05
     62c:	14 82       	std	Z+4, r1	; 0x04
     62e:	13 82       	std	Z+3, r1	; 0x03
     630:	12 82       	std	Z+2, r1	; 0x02
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <LL_Next>:
     638:	fc 01       	movw	r30, r24
     63a:	82 81       	ldd	r24, Z+2	; 0x02
     63c:	93 81       	ldd	r25, Z+3	; 0x03
     63e:	08 95       	ret

00000640 <LL_AddBack>:
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	cb 01       	movw	r24, r22
     648:	01 c0       	rjmp	.+2      	; 0x64c <LL_AddBack+0xc>
     64a:	e9 01       	movw	r28, r18
     64c:	2a 81       	ldd	r18, Y+2	; 0x02
     64e:	3b 81       	ldd	r19, Y+3	; 0x03
     650:	21 15       	cp	r18, r1
     652:	31 05       	cpc	r19, r1
     654:	d1 f7       	brne	.-12     	; 0x64a <LL_AddBack+0xa>
     656:	e0 df       	rcall	.-64     	; 0x618 <LL_ItemListInit>
     658:	9b 83       	std	Y+3, r25	; 0x03
     65a:	8a 83       	std	Y+2, r24	; 0x02
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <LL_Size>:
     662:	dc 01       	movw	r26, r24
     664:	12 96       	adiw	r26, 0x02	; 2
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	13 97       	sbiw	r26, 0x03	; 3
     66c:	30 97       	sbiw	r30, 0x00	; 0
     66e:	41 f0       	breq	.+16     	; 0x680 <LL_Size+0x1e>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	8f 5f       	subi	r24, 0xFF	; 255
     674:	02 80       	ldd	r0, Z+2	; 0x02
     676:	f3 81       	ldd	r31, Z+3	; 0x03
     678:	e0 2d       	mov	r30, r0
     67a:	30 97       	sbiw	r30, 0x00	; 0
     67c:	d1 f7       	brne	.-12     	; 0x672 <LL_Size+0x10>
     67e:	08 95       	ret
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	08 95       	ret

00000684 <LL_GetClass>:
     684:	dc 01       	movw	r26, r24
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	83 81       	ldd	r24, Z+3	; 0x03
     68c:	08 95       	ret

0000068e <LL_GetRefl>:
     68e:	dc 01       	movw	r26, r24
     690:	ed 91       	ld	r30, X+
     692:	fc 91       	ld	r31, X
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	08 95       	ret

0000069a <LL_GetMag>:
     69a:	dc 01       	movw	r26, r24
     69c:	ed 91       	ld	r30, X+
     69e:	fc 91       	ld	r31, X
     6a0:	82 81       	ldd	r24, Z+2	; 0x02
     6a2:	08 95       	ret

000006a4 <LL_UpdateRefl>:
     6a4:	dc 01       	movw	r26, r24
     6a6:	ed 91       	ld	r30, X+
     6a8:	fc 91       	ld	r31, X
     6aa:	71 83       	std	Z+1, r23	; 0x01
     6ac:	60 83       	st	Z, r22
     6ae:	08 95       	ret

000006b0 <LL_UpdateMag>:
     6b0:	dc 01       	movw	r26, r24
     6b2:	ed 91       	ld	r30, X+
     6b4:	fc 91       	ld	r31, X
     6b6:	62 83       	std	Z+2, r22	; 0x02
     6b8:	08 95       	ret

000006ba <LL_UpdateClass>:
     6ba:	dc 01       	movw	r26, r24
     6bc:	ed 91       	ld	r30, X+
     6be:	fc 91       	ld	r31, X
     6c0:	63 83       	std	Z+3, r22	; 0x03
     6c2:	08 95       	ret

000006c4 <LL_UpdateStatus>:
	return;
}
void LL_UpdateStatus(list* ref, estatus newStatus)
{
	//
	((itemNode*)ref->node)->status = newStatus;
     6c4:	dc 01       	movw	r26, r24
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	64 83       	std	Z+4, r22	; 0x04
     6cc:	08 95       	ret

000006ce <LL_GetStatus>:
}

estatus LL_GetStatus(list* ref)
{
	//
	return ((itemNode*)ref->node)->status;
     6ce:	dc 01       	movw	r26, r24
     6d0:	ed 91       	ld	r30, X+
     6d2:	fc 91       	ld	r31, X
}
     6d4:	84 81       	ldd	r24, Z+4	; 0x04
     6d6:	08 95       	ret

000006d8 <LL_UpdateTick>:

void LL_UpdateTick(list* ref, uint16_t newTick)
{
	//
	((itemNode*)ref->node)->lastTick = newTick;
     6d8:	dc 01       	movw	r26, r24
     6da:	ed 91       	ld	r30, X+
     6dc:	fc 91       	ld	r31, X
     6de:	76 83       	std	Z+6, r23	; 0x06
     6e0:	65 83       	std	Z+5, r22	; 0x05
     6e2:	08 95       	ret

000006e4 <LL_GetTick>:
}

uint16_t LL_GetTick(list* ref)
{
	//
	return ((itemNode*)ref->node)->lastTick;
     6e4:	dc 01       	movw	r26, r24
     6e6:	ed 91       	ld	r30, X+
     6e8:	fc 91       	ld	r31, X
     6ea:	85 81       	ldd	r24, Z+5	; 0x05
     6ec:	96 81       	ldd	r25, Z+6	; 0x06
     6ee:	08 95       	ret

000006f0 <GPIO_Init>:
/*-----------------------------------------------------------*/

int GPIO_Init(void)
{

    DDRA = 0xFF;  // Sets all pins on Port A to output
     6f0:	8f ef       	ldi	r24, 0xFF	; 255
     6f2:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;  // Sets all pins on Port B to output for PWM [7]
     6f4:	84 b9       	out	0x04, r24	; 4
    DDRC = 0xFF;  // Sets all pins on port C to output for LEDS
     6f6:	87 b9       	out	0x07, r24	; 7
    DDRD = 0xF0;  // Sets all pins on port D to input for buttons
     6f8:	80 ef       	ldi	r24, 0xF0	; 240
     6fa:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0x00;
     6fc:	1d b8       	out	0x0d, r1	; 13
    DDRF = 0x00;  // Sets all pins on Port F to input for ADC
     6fe:	10 ba       	out	0x10, r1	; 16
// 			| (1 << ISC51));				// 03 Falling
// 			
// 	EIMSK |= ((1 << INT7) | (1 << INT6) | (1 << INT5));

    return 0;
} // GPIO_Init
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	08 95       	ret

00000706 <main>:
	CALIBRATE();
	return 0;
#endif
	
	// Initialize the system
	SYS_Init();
     706:	b7 d2       	rcall	.+1390   	; 0xc76 <SYS_Init>

	// Wait for start signal
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
     708:	89 b1       	in	r24, 0x09	; 9
     70a:	83 70       	andi	r24, 0x03	; 3
     70c:	e9 f7       	brne	.-6      	; 0x708 <main+0x2>
		{
			UART_SendString("Starting System!\r\n");
     70e:	8f e3       	ldi	r24, 0x3F	; 63
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	03 d6       	rcall	.+3078   	; 0x131a <UART_SendString>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     714:	f8 94       	cli
	}
	
	// Start tasks and enable interrupts
	ATOMIC_BLOCK(ATOMIC_FORCEON)
	{
		TIMER_Create(1, 1, SERVER_Task, NULL);		// Optical Handling
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	45 ec       	ldi	r20, 0xC5	; 197
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	80 d5       	rcall	.+2816   	; 0x1228 <TIMER_Create>
		_timer[0].state = READY;
     728:	c2 e2       	ldi	r28, 0x22	; 34
     72a:	d3 e0       	ldi	r29, 0x03	; 3
     72c:	12 e0       	ldi	r17, 0x02	; 2
     72e:	18 87       	std	Y+8, r17	; 0x08
		
		TIMER_Create(1, 1, ADC_Task, NULL);			// ADC Handler
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	44 e4       	ldi	r20, 0x44	; 68
     736:	51 e0       	ldi	r21, 0x01	; 1
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	73 d5       	rcall	.+2790   	; 0x1228 <TIMER_Create>
		_timer[1].state = BLOCKED;
     742:	19 8a       	std	Y+17, r1	; 0x11
		
		TIMER_Create(1, 1, MAG_Task, NULL);			// Magnetic Sensor Handler
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	47 ed       	ldi	r20, 0xD7	; 215
     74a:	51 e0       	ldi	r21, 0x01	; 1
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	69 d5       	rcall	.+2770   	; 0x1228 <TIMER_Create>
		_timer[2].state = BLOCKED;
     756:	1a 8e       	std	Y+26, r1	; 0x1a
		
		TIMER_Create(1, 1, EXIT_Task, NULL);		// Item Exit Handling
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	4a e1       	ldi	r20, 0x1A	; 26
     75e:	52 e0       	ldi	r21, 0x02	; 2
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	70 e0       	ldi	r23, 0x00	; 0
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	5f d5       	rcall	.+2750   	; 0x1228 <TIMER_Create>
		_timer[3].state = BLOCKED;
     76a:	1b a2       	std	Y+35, r1	; 0x23
		
		TIMER_Create(2, 1, ADD_Task, NULL);		// Item Enter Handling
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	48 ee       	ldi	r20, 0xE8	; 232
     772:	52 e0       	ldi	r21, 0x02	; 2
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	55 d5       	rcall	.+2730   	; 0x1228 <TIMER_Create>
		_timer[4].state = BLOCKED;
     77e:	1c a6       	std	Y+44, r1	; 0x2c
		
		TIMER_Create(100, 1, BTN_Task, NULL);		// Button Handling
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	4b eb       	ldi	r20, 0xBB	; 187
     786:	52 e0       	ldi	r21, 0x02	; 2
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	84 e6       	ldi	r24, 0x64	; 100
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	4b d5       	rcall	.+2710   	; 0x1228 <TIMER_Create>
		_timer[5].state = READY;
     792:	1d ab       	std	Y+53, r17	; 0x35
		
		TIMER_Create(2000, 1, D_Blinky, NULL);		// Blinky Leds
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	43 ee       	ldi	r20, 0xE3	; 227
     79a:	52 e0       	ldi	r21, 0x02	; 2
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 ed       	ldi	r24, 0xD0	; 208
     7a2:	97 e0       	ldi	r25, 0x07	; 7
     7a4:	41 d5       	rcall	.+2690   	; 0x1228 <TIMER_Create>
		_timer[6].state = READY;					

		TIMER_Create(5000, 1, WATCHDOG_Task, NULL); // For Rampdown or system stalls
     7a6:	1e af       	std	Y+62, r17	; 0x3e
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	48 ed       	ldi	r20, 0xD8	; 216
     7ae:	52 e0       	ldi	r21, 0x02	; 2
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	88 e8       	ldi	r24, 0x88	; 136
		_timer[7].state = BLOCKED;
     7b6:	93 e1       	ldi	r25, 0x13	; 19
     7b8:	37 d5       	rcall	.+2670   	; 0x1228 <TIMER_Create>

		UART_SendString("System Ready...\r\n");
     7ba:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <_timer+0x47>
     7be:	82 e5       	ldi	r24, 0x52	; 82
     7c0:	91 e0       	ldi	r25, 0x01	; 1
		PWM(0x80);
     7c2:	ab d5       	rcall	.+2902   	; 0x131a <UART_SendString>
     7c4:	80 e8       	ldi	r24, 0x80	; 128
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	ac d0       	rcall	.+344    	; 0x922 <PWM>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     7ca:	78 94       	sei
	};

	// For initial stepper positioning
	int memory = 0;
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
				BELT_SPEED = 200;
				PWM(1);
			}
			else 
			{
				BELT_SPEED = 100;
     7d0:	0f 2e       	mov	r0, r31
     7d2:	f4 e6       	ldi	r31, 0x64	; 100
     7d4:	af 2e       	mov	r10, r31
     7d6:	f0 2d       	mov	r31, r0
				PWM(1);
     7d8:	cc 24       	eor	r12, r12
     7da:	c3 94       	inc	r12
     7dc:	d1 2c       	mov	r13, r1
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
		if(g_MotorOn)
		{
			if((g_MotorTicks - LL_GetTick(HEAD)) < STAGE2_DELAY_COUNT)
			{
				BELT_SPEED = 200;
     7de:	0f 2e       	mov	r0, r31
     7e0:	f8 ec       	ldi	r31, 0xC8	; 200
     7e2:	bf 2e       	mov	r11, r31
// 					}
				}
				if(memory == 0)
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
					memory = 1;
     7e4:	f0 2d       	mov	r31, r0
     7e6:	8c 2c       	mov	r8, r12

	// Put IDLE operations in infinite loop
	while (1)
	{	
		// Check for pause request	
		if(g_PauseRequest) SYS_Pause(__FUNCTION__);
     7e8:	9d 2c       	mov	r9, r13
     7ea:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <g_PauseRequest>
     7ee:	88 23       	and	r24, r24
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <main+0xf2>
     7f2:	84 e6       	ldi	r24, 0x64	; 100
     7f4:	91 e0       	ldi	r25, 0x01	; 1
		if(g_MotorOn)
     7f6:	b6 d2       	rcall	.+1388   	; 0xd64 <SYS_Pause>
     7f8:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <g_MotorOn>
     7fc:	88 23       	and	r24, r24
		{
			if((g_MotorTicks - LL_GetTick(HEAD)) < STAGE2_DELAY_COUNT)
     7fe:	c9 f0       	breq	.+50     	; 0x832 <main+0x12c>
     800:	c0 91 1e 03 	lds	r28, 0x031E	; 0x80031e <g_MotorTicks>
     804:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     808:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     80c:	6b df       	rcall	.-298    	; 0x6e4 <LL_GetTick>
     80e:	2c 2f       	mov	r18, r28
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	28 1b       	sub	r18, r24
     814:	39 0b       	sbc	r19, r25
     816:	20 3d       	cpi	r18, 0xD0	; 208
			{
				BELT_SPEED = 200;
     818:	37 40       	sbci	r19, 0x07	; 7
     81a:	30 f4       	brcc	.+12     	; 0x828 <main+0x122>
				PWM(1);
     81c:	b0 92 21 03 	sts	0x0321, r11	; 0x800321 <BELT_SPEED>
     820:	8c 2d       	mov	r24, r12
     822:	9d 2d       	mov	r25, r13
     824:	7e d0       	rcall	.+252    	; 0x922 <PWM>
			}
			else 
			{
				BELT_SPEED = 100;
     826:	05 c0       	rjmp	.+10     	; 0x832 <main+0x12c>
				PWM(1);
     828:	a0 92 21 03 	sts	0x0321, r10	; 0x800321 <BELT_SPEED>
     82c:	8c 2d       	mov	r24, r12
			}
		}

		list* temp = HEAD;
     82e:	9d 2d       	mov	r25, r13
     830:	78 d0       	rcall	.+240    	; 0x922 <PWM>
     832:	c0 91 ff 02 	lds	r28, 0x02FF	; 0x8002ff <HEAD>
		uint16_t reflVal; 
		
		while(temp)
     836:	d0 91 00 03 	lds	r29, 0x0300	; 0x800300 <HEAD+0x1>
		{
			// Classify any sortable nodes
			if(temp && (LL_GetClass(temp) == UNCLASSIFIED) && (LL_GetStatus(temp) == SORTABLE))
     83a:	20 97       	sbiw	r28, 0x00	; 0
     83c:	b1 f2       	breq	.-84     	; 0x7ea <main+0xe4>
     83e:	20 97       	sbiw	r28, 0x00	; 0
     840:	09 f4       	brne	.+2      	; 0x844 <main+0x13e>
     842:	56 c0       	rjmp	.+172    	; 0x8f0 <main+0x1ea>
     844:	ce 01       	movw	r24, r28
     846:	1e df       	rcall	.-452    	; 0x684 <LL_GetClass>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f0       	breq	.+2      	; 0x84e <main+0x148>
     84c:	51 c0       	rjmp	.+162    	; 0x8f0 <main+0x1ea>
     84e:	ce 01       	movw	r24, r28
     850:	3e df       	rcall	.-388    	; 0x6ce <LL_GetStatus>
			{
	
				reflVal = LL_GetRefl(temp);				
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	09 f0       	breq	.+2      	; 0x858 <main+0x152>
     856:	4c c0       	rjmp	.+152    	; 0x8f0 <main+0x1ea>
     858:	ce 01       	movw	r24, r28
				uint8_t magVal = LL_GetMag(temp);
     85a:	19 df       	rcall	.-462    	; 0x68e <LL_GetRefl>
     85c:	7c 01       	movw	r14, r24
     85e:	ce 01       	movw	r24, r28
				
				if(magVal) // 
     860:	1c df       	rcall	.-456    	; 0x69a <LL_GetMag>
     862:	88 23       	and	r24, r24
				{
					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
     864:	b1 f0       	breq	.+44     	; 0x892 <main+0x18c>
     866:	c7 01       	movw	r24, r14
     868:	44 97       	sbiw	r24, 0x14	; 20
     86a:	81 35       	cpi	r24, 0x51	; 81
					{
						LL_UpdateClass(temp, ALUMINUM);
     86c:	91 05       	cpc	r25, r1
     86e:	20 f4       	brcc	.+8      	; 0x878 <main+0x172>
     870:	62 e0       	ldi	r22, 0x02	; 2
     872:	ce 01       	movw	r24, r28
					}
					else if ((reflVal >= STEEL_BOUNDARY_LOW) && (reflVal <= STEEL_BOUNDARY_HIGH))
     874:	22 df       	rcall	.-444    	; 0x6ba <LL_UpdateClass>
     876:	21 c0       	rjmp	.+66     	; 0x8ba <main+0x1b4>
     878:	8c e2       	ldi	r24, 0x2C	; 44
     87a:	e8 1a       	sub	r14, r24
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	f8 0a       	sbc	r15, r24
     880:	8f e5       	ldi	r24, 0x5F	; 95
     882:	e8 16       	cp	r14, r24
     884:	81 e0       	ldi	r24, 0x01	; 1
					{
						LL_UpdateClass(temp, STEEL);
     886:	f8 06       	cpc	r15, r24
     888:	c0 f4       	brcc	.+48     	; 0x8ba <main+0x1b4>
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	ce 01       	movw	r24, r28
					else
					{
						// Unknown Magnetic Object
					}
				}
				else if((reflVal >= WHITE_BOUNDARY_LOW) && (reflVal <= WHITE_BOUNDARY_HIGH))
     88e:	15 df       	rcall	.-470    	; 0x6ba <LL_UpdateClass>
     890:	14 c0       	rjmp	.+40     	; 0x8ba <main+0x1b4>
     892:	c7 01       	movw	r24, r14
     894:	89 58       	subi	r24, 0x89	; 137
     896:	93 40       	sbci	r25, 0x03	; 3
				{
					LL_UpdateClass(temp, WHITE);
     898:	0b 97       	sbiw	r24, 0x0b	; 11
     89a:	20 f4       	brcc	.+8      	; 0x8a4 <main+0x19e>
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	ce 01       	movw	r24, r28
				}
				else if((reflVal >= BLACK_BOUNDARY_LOW) && (reflVal <= BLACK_BOUNDARY_HIGH))
     8a0:	0c df       	rcall	.-488    	; 0x6ba <LL_UpdateClass>
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <main+0x1b4>
     8a4:	80 e2       	ldi	r24, 0x20	; 32
     8a6:	e8 1a       	sub	r14, r24
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	f8 0a       	sbc	r15, r24
     8ac:	87 e9       	ldi	r24, 0x97	; 151
				{
					LL_UpdateClass(temp, BLACK);
     8ae:	e8 16       	cp	r14, r24
     8b0:	f1 04       	cpc	r15, r1
     8b2:	18 f4       	brcc	.+6      	; 0x8ba <main+0x1b4>
     8b4:	61 e0       	ldi	r22, 0x01	; 1
// 					if((reflVal >= ALUMINUM_BOUNDARY_LOW) && (reflVal <= ALUMINUM_BOUNDARY_HIGH))
// 					{
// 						LL_UpdateClass(temp, ALUMINUM);
// 					}
				}
				if(memory == 0)
     8b6:	ce 01       	movw	r24, r28
     8b8:	00 df       	rcall	.-512    	; 0x6ba <LL_UpdateClass>
				{
					STEPPER_SetRotation(position[LL_GetClass(HEAD)],position[LL_GetClass(HEAD)]);
     8ba:	01 15       	cp	r16, r1
     8bc:	11 05       	cpc	r17, r1
     8be:	c1 f4       	brne	.+48     	; 0x8f0 <main+0x1ea>
     8c0:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     8c4:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     8c8:	dd de       	rcall	.-582    	; 0x684 <LL_GetClass>
     8ca:	e8 2f       	mov	r30, r24
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	e1 5f       	subi	r30, 0xF1	; 241
     8d0:	fe 4f       	sbci	r31, 0xFE	; 254
     8d2:	10 81       	ld	r17, Z
     8d4:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
     8d8:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     8dc:	d3 de       	rcall	.-602    	; 0x684 <LL_GetClass>
     8de:	e8 2f       	mov	r30, r24
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	e1 5f       	subi	r30, 0xF1	; 241
     8e4:	fe 4f       	sbci	r31, 0xFE	; 254
     8e6:	80 81       	ld	r24, Z
     8e8:	61 2f       	mov	r22, r17
					memory = 1;
     8ea:	a6 d0       	rcall	.+332    	; 0xa38 <STEPPER_SetRotation>
     8ec:	08 2d       	mov	r16, r8
				}
			}
			temp = LL_Next(temp);
     8ee:	19 2d       	mov	r17, r9
     8f0:	ce 01       	movw	r24, r28
     8f2:	a2 de       	rcall	.-700    	; 0x638 <LL_Next>
     8f4:	ec 01       	movw	r28, r24
		}

		list* temp = HEAD;
		uint16_t reflVal; 
		
		while(temp)
     8f6:	89 2b       	or	r24, r25
     8f8:	09 f0       	breq	.+2      	; 0x8fc <main+0x1f6>
     8fa:	a1 cf       	rjmp	.-190    	; 0x83e <main+0x138>
     8fc:	76 cf       	rjmp	.-276    	; 0x7ea <main+0xe4>

000008fe <__vector_default>:
	return 0;
}

// Catch bad isrs
ISR(BADISR_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
	while(1)
	{
		PORTC = 0xAA;
     908:	8a ea       	ldi	r24, 0xAA	; 170
     90a:	88 b9       	out	0x08, r24	; 8
     90c:	fe cf       	rjmp	.-4      	; 0x90a <__vector_default+0xc>

0000090e <PWM_Init>:
/*-----------------------------------------------------------*/

void PWM_Init()
{
    // Set Waveform Generation Mode to 3 - Fast PWM with TOP = MAX, and OCRA = Compare value
    TCCR0A |= 0x83; // TCCR0A7:6 -> COM0A = 0b10	(inverted mode)
     90e:	84 b5       	in	r24, 0x24	; 36
     910:	83 68       	ori	r24, 0x83	; 131
     912:	84 bd       	out	0x24, r24	; 36
                    // TCCR0A1:0 -> WGM1:0 = 11		(Fast PWM)
    // Set Clock Source
    TCCR0B |= 0x03; // CS2:0 = 0b010 (prescaler = 8 for f_PWM = 488 Hz)
     914:	85 b5       	in	r24, 0x25	; 37
     916:	83 60       	ori	r24, 0x03	; 3
     918:	85 bd       	out	0x25, r24	; 37
    // Set value we want timer to reset at (MAX)
    OCR0A = BELT_SPEED; // Sets PWM duty cycle = 50%
     91a:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BELT_SPEED>
     91e:	87 bd       	out	0x27, r24	; 39
     920:	08 95       	ret

00000922 <PWM>:
} // PWM_Init

void PWM(const int dutyCycle)
{
     922:	9c 01       	movw	r18, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     924:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     926:	f8 94       	cli
	{
		OCR0A = BELT_SPEED;
     928:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <BELT_SPEED>
     92c:	87 bd       	out	0x27, r24	; 39
		if (dutyCycle) 
     92e:	23 2b       	or	r18, r19
     930:	31 f0       	breq	.+12     	; 0x93e <PWM+0x1c>
		{
			g_MotorOn = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <g_MotorOn>
			PORTB = ~0x0E;
     938:	81 ef       	ldi	r24, 0xF1	; 241
     93a:	85 b9       	out	0x05, r24	; 5
     93c:	04 c0       	rjmp	.+8      	; 0x946 <PWM+0x24>
		}
		else 
		{
			g_MotorOn = 0;
     93e:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <g_MotorOn>
			PORTB = ~0x0F;
     942:	80 ef       	ldi	r24, 0xF0	; 240
     944:	85 b9       	out	0x05, r24	; 5
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     946:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
     948:	08 95       	ret

0000094a <STEPPER_Init>:

//TODO; Write spin down

void STEPPER_Init()
{
	cli();
     94a:	f8 94       	cli
	// Initialize Stepper Parameters
	stepper._stepNum = 0;
     94c:	ed e6       	ldi	r30, 0x6D	; 109
     94e:	f3 e0       	ldi	r31, 0x03	; 3
     950:	10 82       	st	Z, r1
	stepper.direction = 1;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	81 83       	std	Z+1, r24	; 0x01
	stepper.target = 0;
     956:	13 82       	std	Z+3, r1	; 0x03
     958:	12 82       	std	Z+2, r1	; 0x02
	stepper.current = 0;
     95a:	14 82       	std	Z+4, r1	; 0x04
	stepper._currentStep = 0;
     95c:	17 82       	std	Z+7, r1	; 0x07
	stepper.next = 0;
     95e:	10 86       	std	Z+8, r1	; 0x08
	stepper._isInitiated = 0;
     960:	12 86       	std	Z+10, r1	; 0x0a
	stepper._accellStep = 0;
     962:	13 86       	std	Z+11, r1	; 0x0b
	stepper._willContinue = 1;
     964:	81 87       	std	Z+9, r24	; 0x09

	// For calibration
	stepper._targetStep = 200;
     966:	88 ec       	ldi	r24, 0xC8	; 200
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	96 83       	std	Z+6, r25	; 0x06
     96c:	85 83       	std	Z+5, r24	; 0x05

	PORTA = 0x30;
     96e:	80 e3       	ldi	r24, 0x30	; 48
     970:	82 b9       	out	0x02, r24	; 2

	//Initial delay of 20ms
	OCR2A = 0x94;
     972:	84 e9       	ldi	r24, 0x94	; 148
     974:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// Set to CTC Mode
	TCCR2A |= (1 << WGM21);
     978:	e0 eb       	ldi	r30, 0xB0	; 176
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	82 60       	ori	r24, 0x02	; 2
     980:	80 83       	st	Z, r24
	//Set interrupt on compare match
	TIMSK2 |= (1 << OCIE2A);
     982:	e0 e7       	ldi	r30, 0x70	; 112
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	82 60       	ori	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
	// set prescaler to 1024 and starts PWM
	TCCR2B |= ((1 << CS22) | (1 << CS21) | (1 << CS20));
     98c:	e1 eb       	ldi	r30, 0xB1	; 177
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	87 60       	ori	r24, 0x07	; 7
     994:	80 83       	st	Z, r24
	// set prescaler to 256 and starts PWM
	//TCCR2B |= ((1 << CS22) | (1 << CS21));

	// Enable Interrupts to calibrate
	sei();
     996:	78 94       	sei
     998:	08 95       	ret

0000099a <STEPPER_NumSteps>:
} // STEPPER_Init

int STEPPER_NumSteps(uint8_t target, uint8_t current)
{
	int steps = (target - current);
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	86 1b       	sub	r24, r22
     99e:	91 09       	sbc	r25, r1
	if (steps >= 0)
     9a0:	52 f0       	brmi	.+20     	; 0x9b6 <STEPPER_NumSteps+0x1c>
	{
		//if there are a positive number of steps > 180; subtract 180 and rotate the other way
		steps = (steps > TURN_180) ? (-1) * (steps - TURN_180) : (steps);
     9a2:	85 36       	cpi	r24, 0x65	; 101
     9a4:	91 05       	cpc	r25, r1
     9a6:	8c f0       	brlt	.+34     	; 0x9ca <STEPPER_NumSteps+0x30>
     9a8:	24 e6       	ldi	r18, 0x64	; 100
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	a9 01       	movw	r20, r18
     9ae:	48 1b       	sub	r20, r24
     9b0:	59 0b       	sbc	r21, r25
     9b2:	ca 01       	movw	r24, r20
     9b4:	08 95       	ret
	}
	else
	{
		//if there are a negative number of steps < 180; add 180 and rotate the other way
		steps = (steps < (-1 * TURN_180)) ? (-1) * (steps + TURN_180) : (steps);
     9b6:	8c 39       	cpi	r24, 0x9C	; 156
     9b8:	5f ef       	ldi	r21, 0xFF	; 255
     9ba:	95 07       	cpc	r25, r21
     9bc:	34 f4       	brge	.+12     	; 0x9ca <STEPPER_NumSteps+0x30>
     9be:	2c e9       	ldi	r18, 0x9C	; 156
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	a9 01       	movw	r20, r18
     9c4:	48 1b       	sub	r20, r24
     9c6:	59 0b       	sbc	r21, r25
     9c8:	ca 01       	movw	r24, r20
	}
	return steps;
} // STEPPER_NumSteps
     9ca:	08 95       	ret

000009cc <STEPPER_Rotate>:

void STEPPER_Rotate()
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
	//Steps and direction to position
	stepper._targetStep = STEPPER_NumSteps(stepper.target, stepper.current);
     9d0:	cd e6       	ldi	r28, 0x6D	; 109
     9d2:	d3 e0       	ldi	r29, 0x03	; 3
     9d4:	6c 81       	ldd	r22, Y+4	; 0x04
     9d6:	8a 81       	ldd	r24, Y+2	; 0x02
     9d8:	9b 81       	ldd	r25, Y+3	; 0x03
     9da:	df df       	rcall	.-66     	; 0x99a <STEPPER_NumSteps>
     9dc:	9e 83       	std	Y+6, r25	; 0x06
     9de:	8d 83       	std	Y+5, r24	; 0x05
	//Steps and direction to next position
	int nextSteps = STEPPER_NumSteps(stepper.next, stepper.target);
     9e0:	6a 81       	ldd	r22, Y+2	; 0x02
     9e2:	7b 81       	ldd	r23, Y+3	; 0x03
     9e4:	88 85       	ldd	r24, Y+8	; 0x08
     9e6:	d9 df       	rcall	.-78     	; 0x99a <STEPPER_NumSteps>
	//Determine rotation direction
	stepper.direction = (stepper._targetStep >= 0) ? CW : CCW;
     9e8:	2d 81       	ldd	r18, Y+5	; 0x05
     9ea:	3e 81       	ldd	r19, Y+6	; 0x06
     9ec:	33 23       	and	r19, r19
     9ee:	14 f4       	brge	.+4      	; 0x9f4 <STEPPER_Rotate+0x28>
     9f0:	28 e0       	ldi	r18, 0x08	; 8
     9f2:	01 c0       	rjmp	.+2      	; 0x9f6 <STEPPER_Rotate+0x2a>
     9f4:	24 e0       	ldi	r18, 0x04	; 4
     9f6:	ed e6       	ldi	r30, 0x6D	; 109
     9f8:	f3 e0       	ldi	r31, 0x03	; 3
     9fa:	21 83       	std	Z+1, r18	; 0x01
	//Determine if the Next target will require a stop or not
	stepper._willContinue = (stepper._targetStep * nextSteps >= 0) ? 1 : 0;
     9fc:	45 81       	ldd	r20, Z+5	; 0x05
     9fe:	56 81       	ldd	r21, Z+6	; 0x06
     a00:	84 9f       	mul	r24, r20
     a02:	90 01       	movw	r18, r0
     a04:	85 9f       	mul	r24, r21
     a06:	30 0d       	add	r19, r0
     a08:	94 9f       	mul	r25, r20
     a0a:	30 0d       	add	r19, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	83 2f       	mov	r24, r19
     a10:	80 95       	com	r24
     a12:	88 1f       	adc	r24, r24
     a14:	88 27       	eor	r24, r24
     a16:	88 1f       	adc	r24, r24
     a18:	81 87       	std	Z+9, r24	; 0x09

	//stepper can not take -ve numbers of steps
	stepper._targetStep = abs(stepper._targetStep);
     a1a:	85 81       	ldd	r24, Z+5	; 0x05
     a1c:	96 81       	ldd	r25, Z+6	; 0x06
     a1e:	99 23       	and	r25, r25
     a20:	1c f4       	brge	.+6      	; 0xa28 <STEPPER_Rotate+0x5c>
     a22:	91 95       	neg	r25
     a24:	81 95       	neg	r24
     a26:	91 09       	sbc	r25, r1
     a28:	ed e6       	ldi	r30, 0x6D	; 109
     a2a:	f3 e0       	ldi	r31, 0x03	; 3
     a2c:	96 83       	std	Z+6, r25	; 0x06
     a2e:	85 83       	std	Z+5, r24	; 0x05
	stepper._currentStep = 0;
     a30:	17 82       	std	Z+7, r1	; 0x07
} // STEPPER_Rotate
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <STEPPER_SetRotation>:

void STEPPER_SetRotation(uint8_t target, uint8_t next)
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	cli();
     a3c:	f8 94       	cli
	//Use this function to set the target positions
	stepper.target = target;
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	cd e6       	ldi	r28, 0x6D	; 109
     a42:	d3 e0       	ldi	r29, 0x03	; 3
     a44:	9b 83       	std	Y+3, r25	; 0x03
     a46:	8a 83       	std	Y+2, r24	; 0x02
	stepper.next = next;
     a48:	68 87       	std	Y+8, r22	; 0x08
	STEPPER_Rotate();
     a4a:	c0 df       	rcall	.-128    	; 0x9cc <STEPPER_Rotate>
	OCR2A = accell[stepper._accellStep];
     a4c:	eb 85       	ldd	r30, Y+11	; 0x0b
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	eb 5e       	subi	r30, 0xEB	; 235
     a52:	fe 4f       	sbci	r31, 0xFE	; 254
     a54:	80 81       	ld	r24, Z
     a56:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	sei();
     a5a:	78 94       	sei
}
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	08 95       	ret

00000a62 <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	0b b6       	in	r0, 0x3b	; 59
     a6e:	0f 92       	push	r0
     a70:	2f 93       	push	r18
     a72:	3f 93       	push	r19
     a74:	4f 93       	push	r20
     a76:	5f 93       	push	r21
     a78:	6f 93       	push	r22
     a7a:	7f 93       	push	r23
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <__vector_13+0x2c>
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <__vector_13+0x2e>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t step[4] = {0x36, 0x2E, 0x2D, 0x35};
     a94:	86 e3       	ldi	r24, 0x36	; 54
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	9e e2       	ldi	r25, 0x2E	; 46
     a9e:	ad e2       	ldi	r26, 0x2D	; 45
     aa0:	b5 e3       	ldi	r27, 0x35	; 53
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	9a 83       	std	Y+2, r25	; 0x02
     aa6:	ab 83       	std	Y+3, r26	; 0x03
     aa8:	bc 83       	std	Y+4, r27	; 0x04

	if (stepper._currentStep < stepper._targetStep)
     aaa:	ed e6       	ldi	r30, 0x6D	; 109
     aac:	f3 e0       	ldi	r31, 0x03	; 3
     aae:	87 81       	ldd	r24, Z+7	; 0x07
     ab0:	25 81       	ldd	r18, Z+5	; 0x05
     ab2:	36 81       	ldd	r19, Z+6	; 0x06
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	82 17       	cp	r24, r18
     ab8:	93 07       	cpc	r25, r19
     aba:	0c f0       	brlt	.+2      	; 0xabe <__vector_13+0x5c>
     abc:	5a c0       	rjmp	.+180    	; 0xb72 <__vector_13+0x110>
	{
		//if your not at the target fire the motor
		PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     abe:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <stepper+0x1>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	51 f4       	brne	.+20     	; 0xada <__vector_13+0x78>
     ac6:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <stepper>
     aca:	e1 e0       	ldi	r30, 0x01	; 1
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	ec 0f       	add	r30, r28
     ad0:	fd 1f       	adc	r31, r29
     ad2:	e8 0f       	add	r30, r24
     ad4:	f1 1d       	adc	r31, r1
     ad6:	80 81       	ld	r24, Z
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__vector_13+0x92>
     ada:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <stepper>
     ade:	e3 e0       	ldi	r30, 0x03	; 3
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	e8 1b       	sub	r30, r24
     ae4:	f1 09       	sbc	r31, r1
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	6c 0f       	add	r22, r28
     aec:	7d 1f       	adc	r23, r29
     aee:	e6 0f       	add	r30, r22
     af0:	f7 1f       	adc	r31, r23
     af2:	80 81       	ld	r24, Z
     af4:	82 b9       	out	0x02, r24	; 2
		stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     af6:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <stepper>
     afa:	83 30       	cpi	r24, 0x03	; 3
     afc:	21 f0       	breq	.+8      	; 0xb06 <__vector_13+0xa4>
     afe:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <stepper>
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	01 c0       	rjmp	.+2      	; 0xb08 <__vector_13+0xa6>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	ed e6       	ldi	r30, 0x6D	; 109
     b0a:	f3 e0       	ldi	r31, 0x03	; 3
     b0c:	80 83       	st	Z, r24

		stepper._currentStep++;
     b0e:	87 81       	ldd	r24, Z+7	; 0x07
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	87 83       	std	Z+7, r24	; 0x07
		//Simple acceleration / deceleration block uses curve defined in accel
		if (((stepper._targetStep - stepper._currentStep) <= 5) && (accell[stepper._accellStep] < 0x94))
     b14:	85 81       	ldd	r24, Z+5	; 0x05
     b16:	96 81       	ldd	r25, Z+6	; 0x06
     b18:	27 81       	ldd	r18, Z+7	; 0x07
     b1a:	82 1b       	sub	r24, r18
     b1c:	91 09       	sbc	r25, r1
     b1e:	06 97       	sbiw	r24, 0x06	; 6
     b20:	74 f4       	brge	.+28     	; 0xb3e <__vector_13+0xdc>
     b22:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <stepper+0xb>
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	eb 5e       	subi	r30, 0xEB	; 235
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	84 39       	cpi	r24, 0x94	; 148
     b30:	30 f4       	brcc	.+12     	; 0xb3e <__vector_13+0xdc>
		{
			stepper._accellStep--;
     b32:	ed e6       	ldi	r30, 0x6D	; 109
     b34:	f3 e0       	ldi	r31, 0x03	; 3
     b36:	83 85       	ldd	r24, Z+11	; 0x0b
     b38:	81 50       	subi	r24, 0x01	; 1
     b3a:	83 87       	std	Z+11, r24	; 0x0b
     b3c:	11 c0       	rjmp	.+34     	; 0xb60 <__vector_13+0xfe>
		}
		else if ((stepper._currentStep > 5) && (accell[stepper._accellStep] > 0x40))
     b3e:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <stepper+0x7>
     b42:	86 30       	cpi	r24, 0x06	; 6
     b44:	68 f0       	brcs	.+26     	; 0xb60 <__vector_13+0xfe>
     b46:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <stepper+0xb>
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	eb 5e       	subi	r30, 0xEB	; 235
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	80 81       	ld	r24, Z
     b52:	81 34       	cpi	r24, 0x41	; 65
     b54:	28 f0       	brcs	.+10     	; 0xb60 <__vector_13+0xfe>
		{
			stepper._accellStep++;
     b56:	ed e6       	ldi	r30, 0x6D	; 109
     b58:	f3 e0       	ldi	r31, 0x03	; 3
     b5a:	83 85       	ldd	r24, Z+11	; 0x0b
     b5c:	8f 5f       	subi	r24, 0xFF	; 255
     b5e:	83 87       	std	Z+11, r24	; 0x0b
		}
		OCR2A = accell[stepper._accellStep];
     b60:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <stepper+0xb>
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	eb 5e       	subi	r30, 0xEB	; 235
     b68:	fe 4f       	sbci	r31, 0xFE	; 254
     b6a:	80 81       	ld	r24, Z
     b6c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     b70:	29 c0       	rjmp	.+82     	; 0xbc4 <__vector_13+0x162>
	}
	else if (stepper._currentStep == stepper._targetStep)
     b72:	ed e6       	ldi	r30, 0x6D	; 109
     b74:	f3 e0       	ldi	r31, 0x03	; 3
     b76:	87 81       	ldd	r24, Z+7	; 0x07
     b78:	25 81       	ldd	r18, Z+5	; 0x05
     b7a:	36 81       	ldd	r19, Z+6	; 0x06
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	82 17       	cp	r24, r18
     b80:	93 07       	cpc	r25, r19
     b82:	01 f5       	brne	.+64     	; 0xbc4 <__vector_13+0x162>
	{
		//if you are at the target, don't rotate any farther and adjust the current position
		stepper.current = stepper.target;
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	84 83       	std	Z+4, r24	; 0x04
		//if the direction is changing reset the delay
		stepper._accellStep = (stepper._willContinue) ? stepper._accellStep : 0;
     b8a:	81 85       	ldd	r24, Z+9	; 0x09
     b8c:	88 23       	and	r24, r24
     b8e:	19 f0       	breq	.+6      	; 0xb96 <__vector_13+0x134>
     b90:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <stepper+0xb>
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <__vector_13+0x136>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	ad e6       	ldi	r26, 0x6D	; 109
     b9a:	b3 e0       	ldi	r27, 0x03	; 3
     b9c:	1b 96       	adiw	r26, 0x0b	; 11
     b9e:	8c 93       	st	X, r24
     ba0:	1b 97       	sbiw	r26, 0x0b	; 11
		OCR2A = accell[stepper._accellStep];
     ba2:	1b 96       	adiw	r26, 0x0b	; 11
     ba4:	ec 91       	ld	r30, X
     ba6:	1b 97       	sbiw	r26, 0x0b	; 11
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	eb 5e       	subi	r30, 0xEB	; 235
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	80 81       	ld	r24, Z
     bb0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		PORTA = (!stepper._willContinue) ? PORTA : PORTA;
     bb4:	19 96       	adiw	r26, 0x09	; 9
     bb6:	8c 91       	ld	r24, X
     bb8:	81 11       	cpse	r24, r1
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <__vector_13+0x15e>
     bbc:	82 b1       	in	r24, 0x02	; 2
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <__vector_13+0x160>
     bc0:	82 b1       	in	r24, 0x02	; 2
     bc2:	82 b9       	out	0x02, r24	; 2

	}
	if (stepper._isInitiated == 0)
     bc4:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <stepper+0xa>
     bc8:	81 11       	cpse	r24, r1
     bca:	3c c0       	rjmp	.+120    	; 0xc44 <__vector_13+0x1e2>
	{
		if ((PINE & 0x08) == 0)
     bcc:	63 99       	sbic	0x0c, 3	; 12
     bce:	3a c0       	rjmp	.+116    	; 0xc44 <__vector_13+0x1e2>
     bd0:	25 e0       	ldi	r18, 0x05	; 5
     bd2:	30 e0       	ldi	r19, 0x00	; 0
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
			{
				PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     bd4:	ed e6       	ldi	r30, 0x6D	; 109
     bd6:	f3 e0       	ldi	r31, 0x03	; 3
     bd8:	43 e0       	ldi	r20, 0x03	; 3
     bda:	50 e0       	ldi	r21, 0x00	; 0
				stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     bdc:	90 e0       	ldi	r25, 0x00	; 0
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
			{
				PORTA = (stepper.direction == CW) ? (step[stepper._stepNum]) : (step[3 - stepper._stepNum]);
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	84 30       	cpi	r24, 0x04	; 4
     be2:	49 f4       	brne	.+18     	; 0xbf6 <__vector_13+0x194>
     be4:	80 81       	ld	r24, Z
     be6:	a1 e0       	ldi	r26, 0x01	; 1
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ac 0f       	add	r26, r28
     bec:	bd 1f       	adc	r27, r29
     bee:	a8 0f       	add	r26, r24
     bf0:	b1 1d       	adc	r27, r1
     bf2:	8c 91       	ld	r24, X
     bf4:	0b c0       	rjmp	.+22     	; 0xc0c <__vector_13+0x1aa>
     bf6:	80 81       	ld	r24, Z
     bf8:	da 01       	movw	r26, r20
     bfa:	a8 1b       	sub	r26, r24
     bfc:	b1 09       	sbc	r27, r1
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	6c 0f       	add	r22, r28
     c04:	7d 1f       	adc	r23, r29
     c06:	a6 0f       	add	r26, r22
     c08:	b7 1f       	adc	r27, r23
     c0a:	8c 91       	ld	r24, X
     c0c:	82 b9       	out	0x02, r24	; 2
				stepper._stepNum = (stepper._stepNum == 3) ? 0 : (stepper._stepNum + 1);
     c0e:	80 81       	ld	r24, Z
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	19 f0       	breq	.+6      	; 0xc1a <__vector_13+0x1b8>
     c14:	80 81       	ld	r24, Z
     c16:	8f 5f       	subi	r24, 0xFF	; 255
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__vector_13+0x1ba>
     c1a:	89 2f       	mov	r24, r25
     c1c:	80 83       	st	Z, r24

				stepper._currentStep++;
     c1e:	87 81       	ldd	r24, Z+7	; 0x07
     c20:	8f 5f       	subi	r24, 0xFF	; 255
     c22:	87 83       	std	Z+7, r24	; 0x07
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	31 09       	sbc	r19, r1
	{
		if ((PINE & 0x08) == 0)
		{
			//Reset the values when the hall sensor fires for the first time
			
			for (int i = 0; i < 5; i++)
     c28:	d1 f6       	brne	.-76     	; 0xbde <__vector_13+0x17c>

				stepper._currentStep++;
			}
			
			
			stepper._isInitiated = 1;
     c2a:	ed e6       	ldi	r30, 0x6D	; 109
     c2c:	f3 e0       	ldi	r31, 0x03	; 3
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	82 87       	std	Z+10, r24	; 0x0a
			stepper._stepNum = 0;
     c32:	10 82       	st	Z, r1
			stepper.direction = 1;
     c34:	81 83       	std	Z+1, r24	; 0x01
			stepper.target = 0;
     c36:	13 82       	std	Z+3, r1	; 0x03
     c38:	12 82       	std	Z+2, r1	; 0x02
			stepper.current = 0;
     c3a:	14 82       	std	Z+4, r1	; 0x04
			stepper._targetStep = 0;
     c3c:	16 82       	std	Z+6, r1	; 0x06
     c3e:	15 82       	std	Z+5, r1	; 0x05
			stepper._currentStep = 0;
     c40:	17 82       	std	Z+7, r1	; 0x07
			stepper.next = 0;
     c42:	10 86       	std	Z+8, r1	; 0x08
		}
	}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <SYS_Init>:
#include "sys.h"

/*-----------------------------------------------------------*/

void SYS_Init()
{
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
	// 
	/*! 
	* \brief 	Initializes the system
	*/
	
	cli();
     c7c:	f8 94       	cli
	
	// Change system to 8Mhz
	CLKPR = (1<<CLKPCE);
     c7e:	e1 e6       	ldi	r30, 0x61	; 97
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	80 83       	st	Z, r24
	CLKPR = 0;
     c86:	10 82       	st	Z, r1
	
	// Initialize Middleware
	UART_Init();
     c88:	30 d3       	rcall	.+1632   	; 0x12ea <UART_Init>
	GPIO_Init();
     c8a:	32 dd       	rcall	.-1436   	; 0x6f0 <GPIO_Init>
	TIMER_Init();
     c8c:	b3 d2       	rcall	.+1382   	; 0x11f4 <TIMER_Init>
	PWM_Init();
     c8e:	3f de       	rcall	.-898    	; 0x90e <PWM_Init>
     c90:	22 da       	rcall	.-3004   	; 0xd6 <ADC_Init>
	ADC_Init();
     c92:	5b de       	rcall	.-842    	; 0x94a <STEPPER_Init>
     c94:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <g_ADCCount+0x1>
	STEPPER_Init();
     c98:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <g_ADCCount>
	
	// Intiialize Globals
	g_ADCCount = 0;
     c9c:	84 e1       	ldi	r24, 0x14	; 20
     c9e:	e5 e0       	ldi	r30, 0x05	; 5
     ca0:	f3 e0       	ldi	r31, 0x03	; 3
	memset(g_ADCResult, 0, sizeof(g_ADCResult));
     ca2:	df 01       	movw	r26, r30
     ca4:	1d 92       	st	X+, r1
     ca6:	8a 95       	dec	r24
     ca8:	e9 f7       	brne	.-6      	; 0xca4 <SYS_Init+0x2e>
     caa:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <g_PauseRequest>
     cae:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <g_WDTimeout>
	g_PauseRequest = 0;
     cb2:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <g_Timer>
	g_WDTimeout = 0;
     cb6:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <g_MotorTicks>
	g_Timer = 0;
     cba:	88 ec       	ldi	r24, 0xC8	; 200
	g_MotorTicks = 0;
     cbc:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <BELT_SPEED>
	BELT_SPEED = 200;
     cc0:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <HEAD+0x1>
     cc4:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <HEAD>

	HEAD = NULL;
     cc8:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <TAIL+0x1>
     ccc:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <TAIL>
	TAIL = NULL;
     cd0:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <STAGE1+0x1>
     cd4:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <STAGE1>
	STAGE1 = NULL;
     cd8:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <STAGE2+0x1>
     cdc:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <STAGE2>
	STAGE2 = NULL;
     ce0:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <FRONT+0x1>
     ce4:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <FRONT>
	FRONT = NULL;
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	44 e0       	ldi	r20, 0x04	; 4

	// Initialize Item List
	itemNode* initNode = NULL;
	initNode = LL_ItemInit(65001,255, UNCLASSIFIED, UNINITIALIZED);
     cec:	6f ef       	ldi	r22, 0xFF	; 255
     cee:	89 ee       	ldi	r24, 0xE9	; 233
     cf0:	9d ef       	ldi	r25, 0xFD	; 253
     cf2:	78 dc       	rcall	.-1808   	; 0x5e4 <LL_ItemInit>
     cf4:	91 dc       	rcall	.-1758   	; 0x618 <LL_ItemListInit>
     cf6:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <HEAD+0x1>
	
	// First Node
	HEAD = LL_ItemListInit(initNode);
     cfa:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <HEAD>
     cfe:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <FRONT+0x1>
     d02:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <FRONT>
	FRONT = HEAD;
     d06:	ca ef       	ldi	r28, 0xFA	; 250
     d08:	08 ee       	ldi	r16, 0xE8	; 232
     d0a:	1d ef       	ldi	r17, 0xFD	; 253
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	44 e0       	ldi	r20, 0x04	; 4

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
     d10:	6c 2f       	mov	r22, r28
     d12:	c8 01       	movw	r24, r16
     d14:	67 dc       	rcall	.-1842   	; 0x5e4 <LL_ItemInit>
     d16:	bc 01       	movw	r22, r24
     d18:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
		TAIL = LL_AddBack(HEAD, initNode);
     d1c:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     d20:	8f dc       	rcall	.-1762   	; 0x640 <LL_AddBack>
     d22:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <TAIL+0x1>
     d26:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <TAIL>
     d2a:	01 50       	subi	r16, 0x01	; 1
     d2c:	11 09       	sbc	r17, r1
     d2e:	c1 50       	subi	r28, 0x01	; 1
     d30:	cb 3c       	cpi	r28, 0xCB	; 203
     d32:	61 f7       	brne	.-40     	; 0xd0c <SYS_Init+0x96>
	// First Node
	HEAD = LL_ItemListInit(initNode);
	FRONT = HEAD;

	// 48 total nodes for trial run
	for(int i = 0; i < 47; i++)
     d34:	05 e0       	ldi	r16, 0x05	; 5
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	45 e0       	ldi	r20, 0x05	; 5
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
     d3c:	6a ef       	ldi	r22, 0xFA	; 250
     d3e:	88 ee       	ldi	r24, 0xE8	; 232
     d40:	9d ef       	ldi	r25, 0xFD	; 253
     d42:	50 dc       	rcall	.-1888   	; 0x5e4 <LL_ItemInit>
     d44:	bc 01       	movw	r22, r24
     d46:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <HEAD>
		LL_AddBack(HEAD,initNode);
     d4a:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <HEAD+0x1>
     d4e:	78 dc       	rcall	.-1808   	; 0x640 <LL_AddBack>
     d50:	01 50       	subi	r16, 0x01	; 1
     d52:	11 09       	sbc	r17, r1
     d54:	89 f7       	brne	.-30     	; 0xd38 <SYS_Init+0xc2>
     d56:	8b e6       	ldi	r24, 0x6B	; 107
	{
		initNode = LL_ItemInit(65000 - i,250 - i, UNCLASSIFIED, UNINITIALIZED);
		TAIL = LL_AddBack(HEAD, initNode);
	}
	// 5 node buffer for robustness
	for(int j = 0; j < 5; j++)
     d58:	91 e0       	ldi	r25, 0x01	; 1
	{
		initNode = LL_ItemInit(65000,250, END_OF_LIST, UNINITIALIZED);
		LL_AddBack(HEAD,initNode);
	}

	UART_SendString("System Initialized...");
     d5a:	df d2       	rcall	.+1470   	; 0x131a <UART_SendString>
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16

} // SYS_Init
     d62:	08 95       	ret

00000d64 <SYS_Pause>:
     d64:	3f 92       	push	r3
     d66:	4f 92       	push	r4
     d68:	5f 92       	push	r5

void SYS_Pause(const char str[20])
{
     d6a:	6f 92       	push	r6
     d6c:	7f 92       	push	r7
     d6e:	8f 92       	push	r8
     d70:	9f 92       	push	r9
     d72:	af 92       	push	r10
     d74:	bf 92       	push	r11
     d76:	cf 92       	push	r12
     d78:	df 92       	push	r13
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	ca 5f       	subi	r28, 0xFA	; 250
     d8c:	d1 09       	sbc	r29, r1
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	f8 2e       	mov	r15, r24
     d9a:	e9 2e       	mov	r14, r25
	/*! 
	* \brief 	Pause the system and assert dump
	*/

	// Turn off interrupts
	cli();
     d9c:	f8 94       	cli

	// Turn off motor
	PWM(0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	bf dd       	rcall	.-1154   	; 0x922 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     da4:	00 91 01 03 	lds	r16, 0x0301	; 0x800301 <FRONT>
     da8:	10 91 02 03 	lds	r17, 0x0302	; 0x800302 <FRONT+0x1>
	int c = 0;

	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	81 e8       	ldi	r24, 0x81	; 129
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	7c 01       	movw	r14, r24
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	da d3       	rcall	.+1972   	; 0x1578 <sprintf>
	UART_SendString(buffer);
     dc4:	c7 01       	movw	r24, r14
     dc6:	a9 d2       	rcall	.+1362   	; 0x131a <UART_SendString>
     dc8:	0f 90       	pop	r0

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	e1 2c       	mov	r14, r1
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     dd6:	f1 2c       	mov	r15, r1
     dd8:	0f 2e       	mov	r0, r31
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
     dda:	fc e9       	ldi	r31, 0x9C	; 156
     ddc:	af 2e       	mov	r10, r31
     dde:	f1 e0       	ldi	r31, 0x01	; 1
     de0:	bf 2e       	mov	r11, r31
     de2:	f0 2d       	mov	r31, r0
     de4:	6e 01       	movw	r12, r28
     de6:	97 e9       	ldi	r25, 0x97	; 151
     de8:	c9 0e       	add	r12, r25
     dea:	d1 1c       	adc	r13, r1
     dec:	27 c0       	rjmp	.+78     	; 0xe3c <SYS_Pause+0xd8>
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     dee:	ef ef       	ldi	r30, 0xFF	; 255
	{
		char listbuff[100];
		c++;
     df0:	ee 1a       	sub	r14, r30
     df2:	fe 0a       	sbc	r15, r30
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
     df4:	c8 01       	movw	r24, r16
     df6:	6b dc       	rcall	.-1834   	; 0x6ce <LL_GetStatus>
     df8:	78 2e       	mov	r7, r24
     dfa:	c8 01       	movw	r24, r16
     dfc:	43 dc       	rcall	.-1914   	; 0x684 <LL_GetClass>
     dfe:	88 2e       	mov	r8, r24
     e00:	c8 01       	movw	r24, r16
     e02:	4b dc       	rcall	.-1898   	; 0x69a <LL_GetMag>
     e04:	98 2e       	mov	r9, r24
	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u, Class %u, Status: %u\r\n",
     e06:	c8 01       	movw	r24, r16
     e08:	42 dc       	rcall	.-1916   	; 0x68e <LL_GetRefl>
     e0a:	1f 92       	push	r1
     e0c:	7f 92       	push	r7
     e0e:	1f 92       	push	r1
     e10:	8f 92       	push	r8
     e12:	1f 92       	push	r1
     e14:	9f 92       	push	r9
     e16:	9f 93       	push	r25
     e18:	8f 93       	push	r24
     e1a:	ff 92       	push	r15
     e1c:	ef 92       	push	r14
     e1e:	bf 92       	push	r11
     e20:	af 92       	push	r10
     e22:	df 92       	push	r13
     e24:	cf 92       	push	r12
					 c, LL_GetRefl(temp), LL_GetMag(temp), LL_GetClass(temp), LL_GetStatus(temp));
		UART_SendString(listbuff);
     e26:	a8 d3       	rcall	.+1872   	; 0x1578 <sprintf>
     e28:	c6 01       	movw	r24, r12
     e2a:	77 d2       	rcall	.+1262   	; 0x131a <UART_SendString>
		temp = LL_Next(temp);	
     e2c:	c8 01       	movw	r24, r16
     e2e:	04 dc       	rcall	.-2040   	; 0x638 <LL_Next>
     e30:	8c 01       	movw	r16, r24
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
	// Print Pause message
	sprintf(buffer,"System Pause Message: %s\r\n", str);
	UART_SendString(buffer);

	// Print List Information
	while (LL_GetClass(temp) != END_OF_LIST)
     e3c:	c8 01       	movw	r24, r16
     e3e:	22 dc       	rcall	.-1980   	; 0x684 <LL_GetClass>
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	a9 f6       	brne	.-86     	; 0xdee <SYS_Pause+0x8a>
     e44:	0f 2e       	mov	r0, r31
     e46:	f2 e2       	ldi	r31, 0x22	; 34
     e48:	cf 2e       	mov	r12, r31
     e4a:	f3 e0       	ldi	r31, 0x03	; 3
     e4c:	df 2e       	mov	r13, r31
     e4e:	f0 2d       	mov	r31, r0
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	0f 2e       	mov	r0, r31
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
	{
		char statebuff[10];
		sprintf(statebuff, "\r\nTimer %d State: %u\r\n",i, _timer[i].state);
     e56:	f0 ed       	ldi	r31, 0xD0	; 208
     e58:	af 2e       	mov	r10, r31
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	bf 2e       	mov	r11, r31
     e5e:	f0 2d       	mov	r31, r0
     e60:	7e 01       	movw	r14, r28
     e62:	97 e9       	ldi	r25, 0x97	; 151
     e64:	e9 0e       	add	r14, r25
     e66:	f1 1c       	adc	r15, r1
     e68:	f6 01       	movw	r30, r12
     e6a:	80 85       	ldd	r24, Z+8	; 0x08
     e6c:	1f 92       	push	r1
     e6e:	8f 93       	push	r24
     e70:	1f 93       	push	r17
     e72:	0f 93       	push	r16
     e74:	bf 92       	push	r11
     e76:	af 92       	push	r10
     e78:	ff 92       	push	r15
     e7a:	ef 92       	push	r14
     e7c:	7d d3       	rcall	.+1786   	; 0x1578 <sprintf>
		UART_SendString(statebuff);
     e7e:	c7 01       	movw	r24, r14
     e80:	4c d2       	rcall	.+1176   	; 0x131a <UART_SendString>
     e82:	0f 5f       	subi	r16, 0xFF	; 255
		UART_SendString(listbuff);
		temp = LL_Next(temp);	
	}
	
	// Print Task Information
	for(int i = 0; i < 7; i++)
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	f9 e0       	ldi	r31, 0x09	; 9
     e88:	cf 0e       	add	r12, r31
     e8a:	d1 1c       	adc	r13, r1
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	07 30       	cpi	r16, 0x07	; 7
     e98:	11 05       	cpc	r17, r1
     e9a:	31 f7       	brne	.-52     	; 0xe68 <SYS_Pause+0x104>
		UART_SendString(statebuff);
	}

	// Print Current List Pointers
	char anotherbuff[50];
	sprintf(anotherbuff,"%u\r\nHEAD: %x, TAIL: %x, FRONT: %x, END: %x, STAGE1: %x, Mag: %u STAGE2: %x, Refl: %u\r\n", LL_Size(HEAD), HEAD, TAIL, FRONT, TAIL->next, STAGE1, LL_GetMag(STAGE1), STAGE2, LL_GetRefl(STAGE2));
     e9c:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <STAGE2>
     ea0:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <STAGE2+0x1>
     ea4:	f4 db       	rcall	.-2072   	; 0x68e <LL_GetRefl>
     ea6:	48 2e       	mov	r4, r24
     ea8:	39 2e       	mov	r3, r25
     eaa:	60 90 6a 03 	lds	r6, 0x036A	; 0x80036a <STAGE2>
     eae:	50 90 6b 03 	lds	r5, 0x036B	; 0x80036b <STAGE2+0x1>
     eb2:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <STAGE1>
     eb6:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <STAGE1+0x1>
     eba:	ef db       	rcall	.-2082   	; 0x69a <LL_GetMag>
     ebc:	78 2e       	mov	r7, r24
     ebe:	90 90 1f 03 	lds	r9, 0x031F	; 0x80031f <STAGE1>
     ec2:	80 90 20 03 	lds	r8, 0x0320	; 0x800320 <STAGE1+0x1>
     ec6:	00 91 03 03 	lds	r16, 0x0303	; 0x800303 <TAIL>
     eca:	10 91 04 03 	lds	r17, 0x0304	; 0x800304 <TAIL+0x1>
     ece:	f8 01       	movw	r30, r16
     ed0:	b2 80       	ldd	r11, Z+2	; 0x02
     ed2:	a3 80       	ldd	r10, Z+3	; 0x03
     ed4:	d0 90 01 03 	lds	r13, 0x0301	; 0x800301 <FRONT>
     ed8:	c0 90 02 03 	lds	r12, 0x0302	; 0x800302 <FRONT+0x1>
     edc:	f0 90 ff 02 	lds	r15, 0x02FF	; 0x8002ff <HEAD>
     ee0:	e0 90 00 03 	lds	r14, 0x0300	; 0x800300 <HEAD+0x1>
     ee4:	8f 2d       	mov	r24, r15
     ee6:	9e 2d       	mov	r25, r14
     ee8:	bc db       	rcall	.-2184   	; 0x662 <LL_Size>
     eea:	3f 92       	push	r3
     eec:	4f 92       	push	r4
     eee:	5f 92       	push	r5
     ef0:	6f 92       	push	r6
     ef2:	1f 92       	push	r1
     ef4:	7f 92       	push	r7
     ef6:	8f 92       	push	r8
     ef8:	9f 92       	push	r9
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	1f 93       	push	r17
     f04:	0f 93       	push	r16
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	1f 92       	push	r1
     f0c:	8f 93       	push	r24
     f0e:	87 ee       	ldi	r24, 0xE7	; 231
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	8e 01       	movw	r16, r28
     f18:	0b 59       	subi	r16, 0x9B	; 155
     f1a:	1f 4f       	sbci	r17, 0xFF	; 255
     f1c:	1f 93       	push	r17
     f1e:	0f 93       	push	r16
	UART_SendString(anotherbuff);
     f20:	2b d3       	rcall	.+1622   	; 0x1578 <sprintf>
     f22:	c8 01       	movw	r24, r16
     f24:	fa d1       	rcall	.+1012   	; 0x131a <UART_SendString>
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61

	// Wait
	while(1)
	{
		// Both Buttons
		if((PIND & 0x03) == 0x00) 
     f30:	89 b1       	in	r24, 0x09	; 9
     f32:	83 70       	andi	r24, 0x03	; 3
     f34:	e9 f7       	brne	.-6      	; 0xf30 <SYS_Pause+0x1cc>
		{
			UART_SendString("Starting System!\r\n");
     f36:	8f e3       	ldi	r24, 0x3F	; 63
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	ef d1       	rcall	.+990    	; 0x131a <UART_SendString>
     f3c:	80 e8       	ldi	r24, 0x80	; 128
			PWM(0x80);
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	f0 dc       	rcall	.-1568   	; 0x922 <PWM>
     f42:	78 94       	sei
     f44:	c6 50       	subi	r28, 0x06	; 6
			sei();
     f46:	df 4f       	sbci	r29, 0xFF	; 255
			return;
		}
	}
} // SYS_Pause
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	7f 90       	pop	r7
     f6c:	6f 90       	pop	r6
     f6e:	5f 90       	pop	r5
     f70:	4f 90       	pop	r4
     f72:	3f 90       	pop	r3
     f74:	08 95       	ret

00000f76 <SYS_Calibrate>:
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10

void SYS_Calibrate(char str[20])
{
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	c4 56       	subi	r28, 0x64	; 100
     f92:	d1 09       	sbc	r29, r1
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	7c 01       	movw	r14, r24
	//
	cli();
     fa0:	f8 94       	cli
	PWM(0);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	bd dc       	rcall	.-1670   	; 0x922 <PWM>
	extern list* HEAD;
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
     fa8:	00 91 01 03 	lds	r16, 0x0301	; 0x800301 <FRONT>
     fac:	10 91 02 03 	lds	r17, 0x0302	; 0x800302 <FRONT+0x1>
	int c = 0;
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);
     fb0:	c7 01       	movw	r24, r14
     fb2:	b3 d1       	rcall	.+870    	; 0x131a <UART_SendString>
	extern list* STAGE1;
	extern list* STAGE2;
	extern list* TAIL;
	extern list* FRONT;
	list* temp = FRONT;
	int c = 0;
     fb4:	e1 2c       	mov	r14, r1
     fb6:	f1 2c       	mov	r15, r1
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
     fb8:	0f 2e       	mov	r0, r31
     fba:	fe e3       	ldi	r31, 0x3E	; 62
     fbc:	af 2e       	mov	r10, r31
     fbe:	f2 e0       	ldi	r31, 0x02	; 2
     fc0:	bf 2e       	mov	r11, r31
     fc2:	f0 2d       	mov	r31, r0
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	6c 01       	movw	r12, r24
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
     fca:	1d c0       	rjmp	.+58     	; 0x1006 <SYS_Calibrate+0x90>
	{
		char listbuff[100];
		c++;
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	e9 1a       	sub	r14, r25
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
				c, LL_GetRefl(temp), LL_GetMag(temp));
     fd0:	f9 0a       	sbc	r15, r25
     fd2:	c8 01       	movw	r24, r16
     fd4:	62 db       	rcall	.-2364   	; 0x69a <LL_GetMag>
	
	while (LL_GetStatus(temp) != UNINITIALIZED)
	{
		char listbuff[100];
		c++;
		sprintf(listbuff, "Item: %d, Refl: %u, Mag: %u\r\n",
     fd6:	98 2e       	mov	r9, r24
     fd8:	c8 01       	movw	r24, r16
     fda:	59 db       	rcall	.-2382   	; 0x68e <LL_GetRefl>
     fdc:	1f 92       	push	r1
     fde:	9f 92       	push	r9
     fe0:	9f 93       	push	r25
     fe2:	8f 93       	push	r24
     fe4:	ff 92       	push	r15
     fe6:	ef 92       	push	r14
     fe8:	bf 92       	push	r11
     fea:	af 92       	push	r10
     fec:	df 92       	push	r13
     fee:	cf 92       	push	r12
				c, LL_GetRefl(temp), LL_GetMag(temp));
		UART_SendString(listbuff);
     ff0:	c3 d2       	rcall	.+1414   	; 0x1578 <sprintf>
     ff2:	c6 01       	movw	r24, r12
     ff4:	92 d1       	rcall	.+804    	; 0x131a <UART_SendString>
		temp = LL_Next(temp);
     ff6:	c8 01       	movw	r24, r16
     ff8:	1f db       	rcall	.-2498   	; 0x638 <LL_Next>
     ffa:	8c 01       	movw	r16, r24
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
	//while (temp->prev) temp = LL_Prev(temp);
	
	UART_SendString(str);

	
	while (LL_GetStatus(temp) != UNINITIALIZED)
    1006:	c8 01       	movw	r24, r16
    1008:	62 db       	rcall	.-2364   	; 0x6ce <LL_GetStatus>
    100a:	81 11       	cpse	r24, r1
    100c:	df cf       	rjmp	.-66     	; 0xfcc <SYS_Calibrate+0x56>
		UART_SendString(listbuff);
		temp = LL_Next(temp);
	}
	while(1)
	{
		if((PIND & 0x03) == 0x00) // Both Buttons
    100e:	89 b1       	in	r24, 0x09	; 9
    1010:	83 70       	andi	r24, 0x03	; 3
		{
			UART_SendString("Starting System!\r\n");
    1012:	e9 f7       	brne	.-6      	; 0x100e <SYS_Calibrate+0x98>
    1014:	8f e3       	ldi	r24, 0x3F	; 63
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	80 d1       	rcall	.+768    	; 0x131a <UART_SendString>
			PWM(0x80);
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	81 dc       	rcall	.-1790   	; 0x922 <PWM>
    1020:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <g_PauseRequest>
			g_PauseRequest = 0;
    1024:	78 94       	sei
			sei();
    1026:	cc 59       	subi	r28, 0x9C	; 156
			break;
		}
	}
	return;
} // SYS_Calibrate
    1028:	df 4f       	sbci	r29, 0xFF	; 255
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	bf 90       	pop	r11
    1046:	af 90       	pop	r10
    1048:	9f 90       	pop	r9
    104a:	08 95       	ret

0000104c <SYS_Rampdown>:
    104c:	ff 92       	push	r15

void SYS_Rampdown()
{
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	e8 97       	sbiw	r28, 0x38	; 56
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
    1066:	fe 01       	movw	r30, r28
    1068:	31 96       	adiw	r30, 0x01	; 1
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	df 01       	movw	r26, r30
    106e:	1d 92       	st	X+, r1
    1070:	8a 95       	dec	r24
    1072:	e9 f7       	brne	.-6      	; 0x106e <SYS_Rampdown+0x22>
	uint8_t total = 0;
	
	char str[50];
	
	list* temp = FRONT;
    1074:	00 91 01 03 	lds	r16, 0x0301	; 0x800301 <FRONT>
    1078:	10 91 02 03 	lds	r17, 0x0302	; 0x800302 <FRONT+0x1>
	
	cli();
    107c:	f8 94       	cli
	PORTD = 0;
    107e:	1b b8       	out	0x0b, r1	; 11
	PORTC = 0;
    1080:	18 b8       	out	0x08, r1	; 8
	PWM(0);
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	4d dc       	rcall	.-1894   	; 0x922 <PWM>
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
    1088:	8c e5       	ldi	r24, 0x5C	; 92
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	46 d1       	rcall	.+652    	; 0x131a <UART_SendString>

void SYS_Rampdown()
{
	//
	uint8_t sortedStats[6] = {0,0,0,0,0,0};
	uint8_t total = 0;
    108e:	f1 2c       	mov	r15, r1
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <SYS_Rampdown+0x64>
	{	
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
    1092:	f3 94       	inc	r15
    1094:	c8 01       	movw	r24, r16
    1096:	f6 da       	rcall	.-2580   	; 0x684 <LL_GetClass>
    1098:	e1 e0       	ldi	r30, 0x01	; 1
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	ec 0f       	add	r30, r28
    109e:	fd 1f       	adc	r31, r29
    10a0:	e8 0f       	add	r30, r24
    10a2:	f1 1d       	adc	r31, r1
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
		temp = LL_Next(temp);
    10a8:	80 83       	st	Z, r24
    10aa:	c8 01       	movw	r24, r16
    10ac:	c5 da       	rcall	.-2678   	; 0x638 <LL_Next>
	PWM(0);
	
	
	UART_SendString("\r\n\r\n\r\n\r\n\r\n\r\nSystem Ramping Down...\r\n");
	
	while(LL_GetStatus(temp) == EXPIRED)
    10ae:	8c 01       	movw	r16, r24
    10b0:	c8 01       	movw	r24, r16
    10b2:	0d db       	rcall	.-2534   	; 0x6ce <LL_GetStatus>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	69 f3       	breq	.-38     	; 0x1092 <SYS_Rampdown+0x46>
		total++;
		sortedStats[LL_GetClass(temp)] += 1; 
		temp = LL_Next(temp);
	}
	
	sprintf(str,"%u Items Sorted!\r\n\r\nBlack: %u/12\tWhite: %u/12\tSteel: %u/12\tAluminum: %u/12\tUnknown Items: %u\r\n",
    10b8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ba:	1f 92       	push	r1
    10bc:	8f 93       	push	r24
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	1f 92       	push	r1
    10c2:	8f 93       	push	r24
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	1f 92       	push	r1
    10c8:	8f 93       	push	r24
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	1f 92       	push	r1
    10ce:	8f 93       	push	r24
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	1f 92       	push	r1
    10d4:	8f 93       	push	r24
    10d6:	1f 92       	push	r1
    10d8:	ff 92       	push	r15
    10da:	81 e8       	ldi	r24, 0x81	; 129
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	8e 01       	movw	r16, r28
    10e4:	09 5f       	subi	r16, 0xF9	; 249
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	1f 93       	push	r17
    10ea:	0f 93       	push	r16
				total, sortedStats[1], sortedStats[0], sortedStats[3], sortedStats[2], sortedStats[4]);
	UART_SendString(str);
    10ec:	45 d2       	rcall	.+1162   	; 0x1578 <sprintf>
    10ee:	c8 01       	movw	r24, r16
    10f0:	14 d1       	rcall	.+552    	; 0x131a <UART_SendString>
	SYS_Calibrate("Get Calibration Stats:");
    10f2:	80 ee       	ldi	r24, 0xE0	; 224
    10f4:	92 e0       	ldi	r25, 0x02	; 2
    10f6:	3f df       	rcall	.-386    	; 0xf76 <SYS_Calibrate>
    10f8:	0f b6       	in	r0, 0x3f	; 63
}
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	e8 96       	adiw	r28, 0x38	; 56
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	08 95       	ret

0000111a <__vector_17>:
    111a:	1f 92       	push	r1
/*-----------------------------------------------------------*/

volatile uint16_t _timer_tick = 0;

ISR (TIMER1_COMPA_vect)    // Timer1 ISR
{
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	0b b6       	in	r0, 0x3b	; 59
    1126:	0f 92       	push	r0
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	* \brief 	This is the system scheduler
	*			Clock Driven scheduling was used to implement this project
	*			The clock operates on 444 us frame size
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
    114c:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_timer_tick>
    1150:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <_timer_tick+0x1>
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <_timer_tick+0x1>
    115a:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <_timer_tick>
    115e:	c2 e2       	ldi	r28, 0x22	; 34
    1160:	d3 e0       	ldi	r29, 0x03	; 3
    1162:	0f 2e       	mov	r0, r31
    1164:	fa e6       	ldi	r31, 0x6A	; 106
    1166:	ef 2e       	mov	r14, r31
    1168:	f3 e0       	ldi	r31, 0x03	; 3
    116a:	ff 2e       	mov	r15, r31
    116c:	f0 2d       	mov	r31, r0
    116e:	8e 01       	movw	r16, r28
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
		
		// If the timer is enabled and expired
		if ((_timer[i].callback != NULL) && (_timer[i].expiry == _timer_tick)) {
    1170:	ec 81       	ldd	r30, Y+4	; 0x04
    1172:	fd 81       	ldd	r31, Y+5	; 0x05
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	09 f1       	breq	.+66     	; 0x11ba <__vector_17+0xa0>
    1178:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <_timer_tick>
    117c:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <_timer_tick+0x1>
    1180:	28 81       	ld	r18, Y
    1182:	39 81       	ldd	r19, Y+1	; 0x01
    1184:	28 17       	cp	r18, r24
    1186:	39 07       	cpc	r19, r25
    1188:	c1 f4       	brne	.+48     	; 0x11ba <__vector_17+0xa0>

			// If the timer is not blocked invoke the callback
			if (_timer[i].state == READY) _timer[i].callback(_timer[i].arg);
    118a:	88 85       	ldd	r24, Y+8	; 0x08
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	19 f4       	brne	.+6      	; 0x1196 <__vector_17+0x7c>
    1190:	8e 81       	ldd	r24, Y+6	; 0x06
    1192:	9f 81       	ldd	r25, Y+7	; 0x07
    1194:	09 95       	icall
			
			if (_timer[i].periodic > 0) {
    1196:	d8 01       	movw	r26, r16
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	8d 91       	ld	r24, X+
    119c:	9c 91       	ld	r25, X
    119e:	13 97       	sbiw	r26, 0x03	; 3
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	41 f0       	breq	.+16     	; 0x11b4 <__vector_17+0x9a>
				
				// Recalculate expiry
				_timer[i].expiry += _timer[i].periodic;
    11a4:	2d 91       	ld	r18, X+
    11a6:	3c 91       	ld	r19, X
    11a8:	11 97       	sbiw	r26, 0x01	; 1
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	8d 93       	st	X+, r24
    11b0:	9c 93       	st	X, r25
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <__vector_17+0xa0>
				} else {
				// Disable Timer
				_timer[i].callback = NULL;
    11b4:	f8 01       	movw	r30, r16
    11b6:	15 82       	std	Z+5, r1	; 0x05
    11b8:	14 82       	std	Z+4, r1	; 0x04
    11ba:	29 96       	adiw	r28, 0x09	; 9
	*			Worst case utilization is around 350 / 444 us
	*/	
	_timer_tick++;
	size_t i;
	
	for (i = 0; i < MAX_TIMERS; i++) {
    11bc:	ce 15       	cp	r28, r14
    11be:	df 05       	cpc	r29, r15
    11c0:	b1 f6       	brne	.-84     	; 0x116e <__vector_17+0x54>
				// Disable Timer
				_timer[i].callback = NULL;
			}
		}
	}
}
    11c2:	ff 91       	pop	r31
    11c4:	ef 91       	pop	r30
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	bf 91       	pop	r27
    11cc:	af 91       	pop	r26
    11ce:	9f 91       	pop	r25
    11d0:	8f 91       	pop	r24
    11d2:	7f 91       	pop	r23
    11d4:	6f 91       	pop	r22
    11d6:	5f 91       	pop	r21
    11d8:	4f 91       	pop	r20
    11da:	3f 91       	pop	r19
    11dc:	2f 91       	pop	r18
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <TIMER_Init>:
	* \brief 	Initializes Timer1 (Scheduler)
	*
	* \return 	NULL
	*/	
	
    TCNT1 = 0x0000;
    11f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    11f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	
	// 12C0 == 600us, 960 = 300 us, 0x0DE0 = 444us, 0x06F0 = 222us, 0x0A68 = 333us, 0x0898 = 275 us, 0x848 = 265us
	
	// At 6/2 adc
	OCR1A = 0x0848;
    11fc:	88 e4       	ldi	r24, 0x48	; 72
    11fe:	98 e0       	ldi	r25, 0x08	; 8
    1200:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1204:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Timer mode with no prescaling and CTC mode (reset counter on compare mode)   
    TCCR1A = 0x00;
    1208:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = (1<<CS10) | (1<<WGM12);
    120c:	89 e0       	ldi	r24, 0x09	; 9
    120e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	// Enable timer1 output compare interrupt  
    TIMSK1 = (1 << OCIE1A) ;   
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	// Allocate scheduler array
	memset(_timer, 0, sizeof(_timer));
    1218:	88 e4       	ldi	r24, 0x48	; 72
    121a:	e2 e2       	ldi	r30, 0x22	; 34
    121c:	f3 e0       	ldi	r31, 0x03	; 3
    121e:	df 01       	movw	r26, r30
    1220:	1d 92       	st	X+, r1
    1222:	8a 95       	dec	r24
    1224:	e9 f7       	brne	.-6      	; 0x1220 <TIMER_Init+0x2c>
    1226:	08 95       	ret

00001228 <TIMER_Create>:

	return;
} // TIMER_Init

int TIMER_Create(uint16_t timeout, int periodic, void (*callback)(void *), void *arg)
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	8b 01       	movw	r16, r22
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
	{
		if (_timer[i].callback == NULL) break;
    1232:	60 91 26 03 	lds	r22, 0x0326	; 0x800326 <_timer+0x4>
    1236:	70 91 27 03 	lds	r23, 0x0327	; 0x800327 <_timer+0x5>
    123a:	67 2b       	or	r22, r23
    123c:	09 f4       	brne	.+2      	; 0x1240 <TIMER_Create+0x18>
    123e:	49 c0       	rjmp	.+146    	; 0x12d2 <TIMER_Create+0xaa>
    1240:	e2 e2       	ldi	r30, 0x22	; 34
    1242:	f3 e0       	ldi	r31, 0x03	; 3
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1244:	a1 e0       	ldi	r26, 0x01	; 1
    1246:	b0 e0       	ldi	r27, 0x00	; 0
	{
		if (_timer[i].callback == NULL) break;
    1248:	c5 85       	ldd	r28, Z+13	; 0x0d
    124a:	d6 85       	ldd	r29, Z+14	; 0x0e
    124c:	cd 2b       	or	r28, r29
    124e:	09 f4       	brne	.+2      	; 0x1252 <TIMER_Create+0x2a>
    1250:	42 c0       	rjmp	.+132    	; 0x12d6 <TIMER_Create+0xae>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    1252:	11 96       	adiw	r26, 0x01	; 1
    1254:	39 96       	adiw	r30, 0x09	; 9
    1256:	a8 30       	cpi	r26, 0x08	; 8
    1258:	b1 05       	cpc	r27, r1
    125a:	b1 f7       	brne	.-20     	; 0x1248 <TIMER_Create+0x20>
		}
		
	handle = i;	
	return handle;
	}
    return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	3f c0       	rjmp	.+126    	; 0x12e0 <TIMER_Create+0xb8>
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			if (periodic != 0) 
			{
				_timer[i].periodic = timeout;
    1262:	fd 01       	movw	r30, r26
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	ea 0f       	add	r30, r26
    1272:	fb 1f       	adc	r31, r27
    1274:	ee 5d       	subi	r30, 0xDE	; 222
    1276:	fc 4f       	sbci	r31, 0xFC	; 252
    1278:	93 83       	std	Z+3, r25	; 0x03
    127a:	82 83       	std	Z+2, r24	; 0x02
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <TIMER_Create+0x70>
			} 
			else 
			{
				_timer[i].periodic = 0;
    127e:	fd 01       	movw	r30, r26
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	ea 0f       	add	r30, r26
    128e:	fb 1f       	adc	r31, r27
    1290:	ee 5d       	subi	r30, 0xDE	; 222
    1292:	fc 4f       	sbci	r31, 0xFC	; 252
    1294:	13 82       	std	Z+3, r1	; 0x03
    1296:	12 82       	std	Z+2, r1	; 0x02
			}
			
			_timer[i].callback = callback;
    1298:	fd 01       	movw	r30, r26
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ee 0f       	add	r30, r30
    12a0:	ff 1f       	adc	r31, r31
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	ea 0f       	add	r30, r26
    12a8:	fb 1f       	adc	r31, r27
    12aa:	ee 5d       	subi	r30, 0xDE	; 222
    12ac:	fc 4f       	sbci	r31, 0xFC	; 252
    12ae:	55 83       	std	Z+5, r21	; 0x05
    12b0:	44 83       	std	Z+4, r20	; 0x04
			_timer[i].arg = arg;
    12b2:	37 83       	std	Z+7, r19	; 0x07
    12b4:	26 83       	std	Z+6, r18	; 0x06
			_timer[i].expiry = timeout + _timer_tick;
    12b6:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <_timer_tick>
    12ba:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <_timer_tick+0x1>
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	91 83       	std	Z+1, r25	; 0x01
    12c4:	80 83       	st	Z, r24
			_timer[i].state = READY;
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	80 87       	std	Z+8, r24	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ca:	7f bf       	out	0x3f, r23	; 63
			
		}
		
	handle = i;	
	return handle;
    12cc:	8a 2f       	mov	r24, r26
    12ce:	9b 2f       	mov	r25, r27
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <TIMER_Create+0xb8>
	* \return	0 on fail, _timer handle on success
	*/	
	int handle = -1;
	size_t i;
	
	for(i = 0; i < MAX_TIMERS; i++)
    12d2:	a0 e0       	ldi	r26, 0x00	; 0
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
		if (_timer[i].callback == NULL) break;
	}
	
	if (i < MAX_TIMERS)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    12d6:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    12d8:	f8 94       	cli
		{
			if (periodic != 0) 
    12da:	01 2b       	or	r16, r17
    12dc:	11 f6       	brne	.-124    	; 0x1262 <TIMER_Create+0x3a>
    12de:	cf cf       	rjmp	.-98     	; 0x127e <TIMER_Create+0x56>
		
	handle = i;	
	return handle;
	}
    return 0;
} // TIMER_Create
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <UART_Init>:
	/*! 
	* \brief 	Initializes UART
	*/	

	// BAUD 9600
	UBRR1H = (uint8_t)((((uint32_t)FOSC)/((uint32_t)9600*16)-1)>>8);
    12ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (uint8_t)(((uint32_t)FOSC)/((uint32_t)9600*16)-1) & 0x0ff;
    12ee:	83 e3       	ldi	r24, 0x33	; 51
    12f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	// Enable Transmit Receive
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
    12f4:	e9 ec       	ldi	r30, 0xC9	; 201
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	88 61       	ori	r24, 0x18	; 24
    12fc:	80 83       	st	Z, r24
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
    12fe:	ea ec       	ldi	r30, 0xCA	; 202
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	86 60       	ori	r24, 0x06	; 6
    1306:	80 83       	st	Z, r24
    1308:	08 95       	ret

0000130a <UART_SendChar>:
	*		
	* \param	a character
	*/	

	// Wait while UART is busy
	while ((UCSR1A & (1 << UDRE1)) == 0) {;}
    130a:	e8 ec       	ldi	r30, 0xC8	; 200
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	90 81       	ld	r25, Z
    1310:	95 ff       	sbrs	r25, 5
    1312:	fd cf       	rjmp	.-6      	; 0x130e <UART_SendChar+0x4>
	UDR1 = c;
    1314:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1318:	08 95       	ret

0000131a <UART_SendString>:
	
}

void UART_SendString(const char* str)
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    1320:	88 81       	ld	r24, Y
    1322:	88 23       	and	r24, r24
    1324:	29 f0       	breq	.+10     	; 0x1330 <UART_SendString+0x16>
    1326:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(str[counter]);
    1328:	f0 df       	rcall	.-32     	; 0x130a <UART_SendChar>
	* \param	a string
	*/

	// Send all char except \0
	uint16_t counter = 0;
	while(str[counter] != '\0')
    132a:	89 91       	ld	r24, Y+
    132c:	81 11       	cpse	r24, r1
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <UART_SendString+0xe>
	{
		UART_SendChar(str[counter]);
		counter++;
	}
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <malloc>:
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	82 30       	cpi	r24, 0x02	; 2
    1340:	91 05       	cpc	r25, r1
    1342:	10 f4       	brcc	.+4      	; 0x1348 <malloc+0x12>
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <__flp>
    134c:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <__flp+0x1>
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	19 f1       	breq	.+70     	; 0x13a2 <malloc+0x6c>
    135c:	40 81       	ld	r20, Z
    135e:	51 81       	ldd	r21, Z+1	; 0x01
    1360:	02 81       	ldd	r16, Z+2	; 0x02
    1362:	13 81       	ldd	r17, Z+3	; 0x03
    1364:	48 17       	cp	r20, r24
    1366:	59 07       	cpc	r21, r25
    1368:	c8 f0       	brcs	.+50     	; 0x139c <malloc+0x66>
    136a:	84 17       	cp	r24, r20
    136c:	95 07       	cpc	r25, r21
    136e:	69 f4       	brne	.+26     	; 0x138a <malloc+0x54>
    1370:	10 97       	sbiw	r26, 0x00	; 0
    1372:	31 f0       	breq	.+12     	; 0x1380 <malloc+0x4a>
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	0c 93       	st	X, r16
    1378:	12 97       	sbiw	r26, 0x02	; 2
    137a:	13 96       	adiw	r26, 0x03	; 3
    137c:	1c 93       	st	X, r17
    137e:	27 c0       	rjmp	.+78     	; 0x13ce <malloc+0x98>
    1380:	00 93 7b 03 	sts	0x037B, r16	; 0x80037b <__flp>
    1384:	10 93 7c 03 	sts	0x037C, r17	; 0x80037c <__flp+0x1>
    1388:	22 c0       	rjmp	.+68     	; 0x13ce <malloc+0x98>
    138a:	21 15       	cp	r18, r1
    138c:	31 05       	cpc	r19, r1
    138e:	19 f0       	breq	.+6      	; 0x1396 <malloc+0x60>
    1390:	42 17       	cp	r20, r18
    1392:	53 07       	cpc	r21, r19
    1394:	18 f4       	brcc	.+6      	; 0x139c <malloc+0x66>
    1396:	9a 01       	movw	r18, r20
    1398:	bd 01       	movw	r22, r26
    139a:	ef 01       	movw	r28, r30
    139c:	df 01       	movw	r26, r30
    139e:	f8 01       	movw	r30, r16
    13a0:	db cf       	rjmp	.-74     	; 0x1358 <malloc+0x22>
    13a2:	21 15       	cp	r18, r1
    13a4:	31 05       	cpc	r19, r1
    13a6:	f9 f0       	breq	.+62     	; 0x13e6 <malloc+0xb0>
    13a8:	28 1b       	sub	r18, r24
    13aa:	39 0b       	sbc	r19, r25
    13ac:	24 30       	cpi	r18, 0x04	; 4
    13ae:	31 05       	cpc	r19, r1
    13b0:	80 f4       	brcc	.+32     	; 0x13d2 <malloc+0x9c>
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	61 15       	cp	r22, r1
    13b8:	71 05       	cpc	r23, r1
    13ba:	21 f0       	breq	.+8      	; 0x13c4 <malloc+0x8e>
    13bc:	fb 01       	movw	r30, r22
    13be:	93 83       	std	Z+3, r25	; 0x03
    13c0:	82 83       	std	Z+2, r24	; 0x02
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <malloc+0x96>
    13c4:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <__flp+0x1>
    13c8:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <__flp>
    13cc:	fe 01       	movw	r30, r28
    13ce:	32 96       	adiw	r30, 0x02	; 2
    13d0:	44 c0       	rjmp	.+136    	; 0x145a <malloc+0x124>
    13d2:	fe 01       	movw	r30, r28
    13d4:	e2 0f       	add	r30, r18
    13d6:	f3 1f       	adc	r31, r19
    13d8:	81 93       	st	Z+, r24
    13da:	91 93       	st	Z+, r25
    13dc:	22 50       	subi	r18, 0x02	; 2
    13de:	31 09       	sbc	r19, r1
    13e0:	39 83       	std	Y+1, r19	; 0x01
    13e2:	28 83       	st	Y, r18
    13e4:	3a c0       	rjmp	.+116    	; 0x145a <malloc+0x124>
    13e6:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <__brkval>
    13ea:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <__brkval+0x1>
    13ee:	23 2b       	or	r18, r19
    13f0:	41 f4       	brne	.+16     	; 0x1402 <malloc+0xcc>
    13f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13fa:	30 93 7a 03 	sts	0x037A, r19	; 0x80037a <__brkval+0x1>
    13fe:	20 93 79 03 	sts	0x0379, r18	; 0x800379 <__brkval>
    1402:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1406:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    140a:	21 15       	cp	r18, r1
    140c:	31 05       	cpc	r19, r1
    140e:	41 f4       	brne	.+16     	; 0x1420 <malloc+0xea>
    1410:	2d b7       	in	r18, 0x3d	; 61
    1412:	3e b7       	in	r19, 0x3e	; 62
    1414:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1418:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    141c:	24 1b       	sub	r18, r20
    141e:	35 0b       	sbc	r19, r21
    1420:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <__brkval>
    1424:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <__brkval+0x1>
    1428:	e2 17       	cp	r30, r18
    142a:	f3 07       	cpc	r31, r19
    142c:	a0 f4       	brcc	.+40     	; 0x1456 <malloc+0x120>
    142e:	2e 1b       	sub	r18, r30
    1430:	3f 0b       	sbc	r19, r31
    1432:	28 17       	cp	r18, r24
    1434:	39 07       	cpc	r19, r25
    1436:	78 f0       	brcs	.+30     	; 0x1456 <malloc+0x120>
    1438:	ac 01       	movw	r20, r24
    143a:	4e 5f       	subi	r20, 0xFE	; 254
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	24 17       	cp	r18, r20
    1440:	35 07       	cpc	r19, r21
    1442:	48 f0       	brcs	.+18     	; 0x1456 <malloc+0x120>
    1444:	4e 0f       	add	r20, r30
    1446:	5f 1f       	adc	r21, r31
    1448:	50 93 7a 03 	sts	0x037A, r21	; 0x80037a <__brkval+0x1>
    144c:	40 93 79 03 	sts	0x0379, r20	; 0x800379 <__brkval>
    1450:	81 93       	st	Z+, r24
    1452:	91 93       	st	Z+, r25
    1454:	02 c0       	rjmp	.+4      	; 0x145a <malloc+0x124>
    1456:	e0 e0       	ldi	r30, 0x00	; 0
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	cf 01       	movw	r24, r30
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	08 95       	ret

00001466 <free>:
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	09 f4       	brne	.+2      	; 0x1470 <free+0xa>
    146e:	81 c0       	rjmp	.+258    	; 0x1572 <free+0x10c>
    1470:	fc 01       	movw	r30, r24
    1472:	32 97       	sbiw	r30, 0x02	; 2
    1474:	13 82       	std	Z+3, r1	; 0x03
    1476:	12 82       	std	Z+2, r1	; 0x02
    1478:	a0 91 7b 03 	lds	r26, 0x037B	; 0x80037b <__flp>
    147c:	b0 91 7c 03 	lds	r27, 0x037C	; 0x80037c <__flp+0x1>
    1480:	10 97       	sbiw	r26, 0x00	; 0
    1482:	81 f4       	brne	.+32     	; 0x14a4 <free+0x3e>
    1484:	20 81       	ld	r18, Z
    1486:	31 81       	ldd	r19, Z+1	; 0x01
    1488:	82 0f       	add	r24, r18
    148a:	93 1f       	adc	r25, r19
    148c:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <__brkval>
    1490:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <__brkval+0x1>
    1494:	28 17       	cp	r18, r24
    1496:	39 07       	cpc	r19, r25
    1498:	51 f5       	brne	.+84     	; 0x14ee <free+0x88>
    149a:	f0 93 7a 03 	sts	0x037A, r31	; 0x80037a <__brkval+0x1>
    149e:	e0 93 79 03 	sts	0x0379, r30	; 0x800379 <__brkval>
    14a2:	67 c0       	rjmp	.+206    	; 0x1572 <free+0x10c>
    14a4:	ed 01       	movw	r28, r26
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ce 17       	cp	r28, r30
    14ac:	df 07       	cpc	r29, r31
    14ae:	40 f4       	brcc	.+16     	; 0x14c0 <free+0x5a>
    14b0:	4a 81       	ldd	r20, Y+2	; 0x02
    14b2:	5b 81       	ldd	r21, Y+3	; 0x03
    14b4:	9e 01       	movw	r18, r28
    14b6:	41 15       	cp	r20, r1
    14b8:	51 05       	cpc	r21, r1
    14ba:	f1 f0       	breq	.+60     	; 0x14f8 <free+0x92>
    14bc:	ea 01       	movw	r28, r20
    14be:	f5 cf       	rjmp	.-22     	; 0x14aa <free+0x44>
    14c0:	d3 83       	std	Z+3, r29	; 0x03
    14c2:	c2 83       	std	Z+2, r28	; 0x02
    14c4:	40 81       	ld	r20, Z
    14c6:	51 81       	ldd	r21, Z+1	; 0x01
    14c8:	84 0f       	add	r24, r20
    14ca:	95 1f       	adc	r25, r21
    14cc:	c8 17       	cp	r28, r24
    14ce:	d9 07       	cpc	r29, r25
    14d0:	59 f4       	brne	.+22     	; 0x14e8 <free+0x82>
    14d2:	88 81       	ld	r24, Y
    14d4:	99 81       	ldd	r25, Y+1	; 0x01
    14d6:	84 0f       	add	r24, r20
    14d8:	95 1f       	adc	r25, r21
    14da:	02 96       	adiw	r24, 0x02	; 2
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	80 83       	st	Z, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	93 83       	std	Z+3, r25	; 0x03
    14e6:	82 83       	std	Z+2, r24	; 0x02
    14e8:	21 15       	cp	r18, r1
    14ea:	31 05       	cpc	r19, r1
    14ec:	29 f4       	brne	.+10     	; 0x14f8 <free+0x92>
    14ee:	f0 93 7c 03 	sts	0x037C, r31	; 0x80037c <__flp+0x1>
    14f2:	e0 93 7b 03 	sts	0x037B, r30	; 0x80037b <__flp>
    14f6:	3d c0       	rjmp	.+122    	; 0x1572 <free+0x10c>
    14f8:	e9 01       	movw	r28, r18
    14fa:	fb 83       	std	Y+3, r31	; 0x03
    14fc:	ea 83       	std	Y+2, r30	; 0x02
    14fe:	49 91       	ld	r20, Y+
    1500:	59 91       	ld	r21, Y+
    1502:	c4 0f       	add	r28, r20
    1504:	d5 1f       	adc	r29, r21
    1506:	ec 17       	cp	r30, r28
    1508:	fd 07       	cpc	r31, r29
    150a:	61 f4       	brne	.+24     	; 0x1524 <free+0xbe>
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	84 0f       	add	r24, r20
    1512:	95 1f       	adc	r25, r21
    1514:	02 96       	adiw	r24, 0x02	; 2
    1516:	e9 01       	movw	r28, r18
    1518:	99 83       	std	Y+1, r25	; 0x01
    151a:	88 83       	st	Y, r24
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	e0 e0       	ldi	r30, 0x00	; 0
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	13 97       	sbiw	r26, 0x03	; 3
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	19 f0       	breq	.+6      	; 0x153a <free+0xd4>
    1534:	fd 01       	movw	r30, r26
    1536:	dc 01       	movw	r26, r24
    1538:	f7 cf       	rjmp	.-18     	; 0x1528 <free+0xc2>
    153a:	8d 91       	ld	r24, X+
    153c:	9c 91       	ld	r25, X
    153e:	11 97       	sbiw	r26, 0x01	; 1
    1540:	9d 01       	movw	r18, r26
    1542:	2e 5f       	subi	r18, 0xFE	; 254
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	82 0f       	add	r24, r18
    1548:	93 1f       	adc	r25, r19
    154a:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <__brkval>
    154e:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <__brkval+0x1>
    1552:	28 17       	cp	r18, r24
    1554:	39 07       	cpc	r19, r25
    1556:	69 f4       	brne	.+26     	; 0x1572 <free+0x10c>
    1558:	30 97       	sbiw	r30, 0x00	; 0
    155a:	29 f4       	brne	.+10     	; 0x1566 <free+0x100>
    155c:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <__flp+0x1>
    1560:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <__flp>
    1564:	02 c0       	rjmp	.+4      	; 0x156a <free+0x104>
    1566:	13 82       	std	Z+3, r1	; 0x03
    1568:	12 82       	std	Z+2, r1	; 0x02
    156a:	b0 93 7a 03 	sts	0x037A, r27	; 0x80037a <__brkval+0x1>
    156e:	a0 93 79 03 	sts	0x0379, r26	; 0x800379 <__brkval>
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <sprintf>:
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	2e 97       	sbiw	r28, 0x0e	; 14
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	0d 89       	ldd	r16, Y+21	; 0x15
    1592:	1e 89       	ldd	r17, Y+22	; 0x16
    1594:	86 e0       	ldi	r24, 0x06	; 6
    1596:	8c 83       	std	Y+4, r24	; 0x04
    1598:	1a 83       	std	Y+2, r17	; 0x02
    159a:	09 83       	std	Y+1, r16	; 0x01
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f e7       	ldi	r25, 0x7F	; 127
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	ae 01       	movw	r20, r28
    15a6:	47 5e       	subi	r20, 0xE7	; 231
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	6f 89       	ldd	r22, Y+23	; 0x17
    15ac:	78 8d       	ldd	r23, Y+24	; 0x18
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	10 d0       	rcall	.+32     	; 0x15d4 <vfprintf>
    15b4:	ef 81       	ldd	r30, Y+7	; 0x07
    15b6:	f8 85       	ldd	r31, Y+8	; 0x08
    15b8:	e0 0f       	add	r30, r16
    15ba:	f1 1f       	adc	r31, r17
    15bc:	10 82       	st	Z, r1
    15be:	2e 96       	adiw	r28, 0x0e	; 14
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <vfprintf>:
    15d4:	2f 92       	push	r2
    15d6:	3f 92       	push	r3
    15d8:	4f 92       	push	r4
    15da:	5f 92       	push	r5
    15dc:	6f 92       	push	r6
    15de:	7f 92       	push	r7
    15e0:	8f 92       	push	r8
    15e2:	9f 92       	push	r9
    15e4:	af 92       	push	r10
    15e6:	bf 92       	push	r11
    15e8:	cf 92       	push	r12
    15ea:	df 92       	push	r13
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	2b 97       	sbiw	r28, 0x0b	; 11
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	6c 01       	movw	r12, r24
    160a:	7b 01       	movw	r14, r22
    160c:	8a 01       	movw	r16, r20
    160e:	fc 01       	movw	r30, r24
    1610:	17 82       	std	Z+7, r1	; 0x07
    1612:	16 82       	std	Z+6, r1	; 0x06
    1614:	83 81       	ldd	r24, Z+3	; 0x03
    1616:	81 ff       	sbrs	r24, 1
    1618:	bf c1       	rjmp	.+894    	; 0x1998 <vfprintf+0x3c4>
    161a:	ce 01       	movw	r24, r28
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	3c 01       	movw	r6, r24
    1620:	f6 01       	movw	r30, r12
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	f7 01       	movw	r30, r14
    1626:	93 fd       	sbrc	r25, 3
    1628:	85 91       	lpm	r24, Z+
    162a:	93 ff       	sbrs	r25, 3
    162c:	81 91       	ld	r24, Z+
    162e:	7f 01       	movw	r14, r30
    1630:	88 23       	and	r24, r24
    1632:	09 f4       	brne	.+2      	; 0x1636 <vfprintf+0x62>
    1634:	ad c1       	rjmp	.+858    	; 0x1990 <vfprintf+0x3bc>
    1636:	85 32       	cpi	r24, 0x25	; 37
    1638:	39 f4       	brne	.+14     	; 0x1648 <vfprintf+0x74>
    163a:	93 fd       	sbrc	r25, 3
    163c:	85 91       	lpm	r24, Z+
    163e:	93 ff       	sbrs	r25, 3
    1640:	81 91       	ld	r24, Z+
    1642:	7f 01       	movw	r14, r30
    1644:	85 32       	cpi	r24, 0x25	; 37
    1646:	21 f4       	brne	.+8      	; 0x1650 <vfprintf+0x7c>
    1648:	b6 01       	movw	r22, r12
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	d6 d1       	rcall	.+940    	; 0x19fa <fputc>
    164e:	e8 cf       	rjmp	.-48     	; 0x1620 <vfprintf+0x4c>
    1650:	91 2c       	mov	r9, r1
    1652:	21 2c       	mov	r2, r1
    1654:	31 2c       	mov	r3, r1
    1656:	ff e1       	ldi	r31, 0x1F	; 31
    1658:	f3 15       	cp	r31, r3
    165a:	d8 f0       	brcs	.+54     	; 0x1692 <vfprintf+0xbe>
    165c:	8b 32       	cpi	r24, 0x2B	; 43
    165e:	79 f0       	breq	.+30     	; 0x167e <vfprintf+0xaa>
    1660:	38 f4       	brcc	.+14     	; 0x1670 <vfprintf+0x9c>
    1662:	80 32       	cpi	r24, 0x20	; 32
    1664:	79 f0       	breq	.+30     	; 0x1684 <vfprintf+0xb0>
    1666:	83 32       	cpi	r24, 0x23	; 35
    1668:	a1 f4       	brne	.+40     	; 0x1692 <vfprintf+0xbe>
    166a:	23 2d       	mov	r18, r3
    166c:	20 61       	ori	r18, 0x10	; 16
    166e:	1d c0       	rjmp	.+58     	; 0x16aa <vfprintf+0xd6>
    1670:	8d 32       	cpi	r24, 0x2D	; 45
    1672:	61 f0       	breq	.+24     	; 0x168c <vfprintf+0xb8>
    1674:	80 33       	cpi	r24, 0x30	; 48
    1676:	69 f4       	brne	.+26     	; 0x1692 <vfprintf+0xbe>
    1678:	23 2d       	mov	r18, r3
    167a:	21 60       	ori	r18, 0x01	; 1
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <vfprintf+0xd6>
    167e:	83 2d       	mov	r24, r3
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	38 2e       	mov	r3, r24
    1684:	e3 2d       	mov	r30, r3
    1686:	e4 60       	ori	r30, 0x04	; 4
    1688:	3e 2e       	mov	r3, r30
    168a:	2a c0       	rjmp	.+84     	; 0x16e0 <vfprintf+0x10c>
    168c:	f3 2d       	mov	r31, r3
    168e:	f8 60       	ori	r31, 0x08	; 8
    1690:	1d c0       	rjmp	.+58     	; 0x16cc <vfprintf+0xf8>
    1692:	37 fc       	sbrc	r3, 7
    1694:	2d c0       	rjmp	.+90     	; 0x16f0 <vfprintf+0x11c>
    1696:	20 ed       	ldi	r18, 0xD0	; 208
    1698:	28 0f       	add	r18, r24
    169a:	2a 30       	cpi	r18, 0x0A	; 10
    169c:	40 f0       	brcs	.+16     	; 0x16ae <vfprintf+0xda>
    169e:	8e 32       	cpi	r24, 0x2E	; 46
    16a0:	b9 f4       	brne	.+46     	; 0x16d0 <vfprintf+0xfc>
    16a2:	36 fc       	sbrc	r3, 6
    16a4:	75 c1       	rjmp	.+746    	; 0x1990 <vfprintf+0x3bc>
    16a6:	23 2d       	mov	r18, r3
    16a8:	20 64       	ori	r18, 0x40	; 64
    16aa:	32 2e       	mov	r3, r18
    16ac:	19 c0       	rjmp	.+50     	; 0x16e0 <vfprintf+0x10c>
    16ae:	36 fe       	sbrs	r3, 6
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <vfprintf+0xea>
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	98 9e       	mul	r9, r24
    16b6:	20 0d       	add	r18, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	92 2e       	mov	r9, r18
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <vfprintf+0x10c>
    16be:	ea e0       	ldi	r30, 0x0A	; 10
    16c0:	2e 9e       	mul	r2, r30
    16c2:	20 0d       	add	r18, r0
    16c4:	11 24       	eor	r1, r1
    16c6:	22 2e       	mov	r2, r18
    16c8:	f3 2d       	mov	r31, r3
    16ca:	f0 62       	ori	r31, 0x20	; 32
    16cc:	3f 2e       	mov	r3, r31
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <vfprintf+0x10c>
    16d0:	8c 36       	cpi	r24, 0x6C	; 108
    16d2:	21 f4       	brne	.+8      	; 0x16dc <vfprintf+0x108>
    16d4:	83 2d       	mov	r24, r3
    16d6:	80 68       	ori	r24, 0x80	; 128
    16d8:	38 2e       	mov	r3, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <vfprintf+0x10c>
    16dc:	88 36       	cpi	r24, 0x68	; 104
    16de:	41 f4       	brne	.+16     	; 0x16f0 <vfprintf+0x11c>
    16e0:	f7 01       	movw	r30, r14
    16e2:	93 fd       	sbrc	r25, 3
    16e4:	85 91       	lpm	r24, Z+
    16e6:	93 ff       	sbrs	r25, 3
    16e8:	81 91       	ld	r24, Z+
    16ea:	7f 01       	movw	r14, r30
    16ec:	81 11       	cpse	r24, r1
    16ee:	b3 cf       	rjmp	.-154    	; 0x1656 <vfprintf+0x82>
    16f0:	98 2f       	mov	r25, r24
    16f2:	9f 7d       	andi	r25, 0xDF	; 223
    16f4:	95 54       	subi	r25, 0x45	; 69
    16f6:	93 30       	cpi	r25, 0x03	; 3
    16f8:	28 f4       	brcc	.+10     	; 0x1704 <vfprintf+0x130>
    16fa:	0c 5f       	subi	r16, 0xFC	; 252
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	9f e3       	ldi	r25, 0x3F	; 63
    1700:	99 83       	std	Y+1, r25	; 0x01
    1702:	0d c0       	rjmp	.+26     	; 0x171e <vfprintf+0x14a>
    1704:	83 36       	cpi	r24, 0x63	; 99
    1706:	31 f0       	breq	.+12     	; 0x1714 <vfprintf+0x140>
    1708:	83 37       	cpi	r24, 0x73	; 115
    170a:	71 f0       	breq	.+28     	; 0x1728 <vfprintf+0x154>
    170c:	83 35       	cpi	r24, 0x53	; 83
    170e:	09 f0       	breq	.+2      	; 0x1712 <vfprintf+0x13e>
    1710:	55 c0       	rjmp	.+170    	; 0x17bc <vfprintf+0x1e8>
    1712:	20 c0       	rjmp	.+64     	; 0x1754 <vfprintf+0x180>
    1714:	f8 01       	movw	r30, r16
    1716:	80 81       	ld	r24, Z
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	0e 5f       	subi	r16, 0xFE	; 254
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	88 24       	eor	r8, r8
    1720:	83 94       	inc	r8
    1722:	91 2c       	mov	r9, r1
    1724:	53 01       	movw	r10, r6
    1726:	12 c0       	rjmp	.+36     	; 0x174c <vfprintf+0x178>
    1728:	28 01       	movw	r4, r16
    172a:	f2 e0       	ldi	r31, 0x02	; 2
    172c:	4f 0e       	add	r4, r31
    172e:	51 1c       	adc	r5, r1
    1730:	f8 01       	movw	r30, r16
    1732:	a0 80       	ld	r10, Z
    1734:	b1 80       	ldd	r11, Z+1	; 0x01
    1736:	36 fe       	sbrs	r3, 6
    1738:	03 c0       	rjmp	.+6      	; 0x1740 <vfprintf+0x16c>
    173a:	69 2d       	mov	r22, r9
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x170>
    1740:	6f ef       	ldi	r22, 0xFF	; 255
    1742:	7f ef       	ldi	r23, 0xFF	; 255
    1744:	c5 01       	movw	r24, r10
    1746:	4e d1       	rcall	.+668    	; 0x19e4 <strnlen>
    1748:	4c 01       	movw	r8, r24
    174a:	82 01       	movw	r16, r4
    174c:	f3 2d       	mov	r31, r3
    174e:	ff 77       	andi	r31, 0x7F	; 127
    1750:	3f 2e       	mov	r3, r31
    1752:	15 c0       	rjmp	.+42     	; 0x177e <vfprintf+0x1aa>
    1754:	28 01       	movw	r4, r16
    1756:	22 e0       	ldi	r18, 0x02	; 2
    1758:	42 0e       	add	r4, r18
    175a:	51 1c       	adc	r5, r1
    175c:	f8 01       	movw	r30, r16
    175e:	a0 80       	ld	r10, Z
    1760:	b1 80       	ldd	r11, Z+1	; 0x01
    1762:	36 fe       	sbrs	r3, 6
    1764:	03 c0       	rjmp	.+6      	; 0x176c <vfprintf+0x198>
    1766:	69 2d       	mov	r22, r9
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vfprintf+0x19c>
    176c:	6f ef       	ldi	r22, 0xFF	; 255
    176e:	7f ef       	ldi	r23, 0xFF	; 255
    1770:	c5 01       	movw	r24, r10
    1772:	2d d1       	rcall	.+602    	; 0x19ce <strnlen_P>
    1774:	4c 01       	movw	r8, r24
    1776:	f3 2d       	mov	r31, r3
    1778:	f0 68       	ori	r31, 0x80	; 128
    177a:	3f 2e       	mov	r3, r31
    177c:	82 01       	movw	r16, r4
    177e:	33 fc       	sbrc	r3, 3
    1780:	19 c0       	rjmp	.+50     	; 0x17b4 <vfprintf+0x1e0>
    1782:	82 2d       	mov	r24, r2
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	88 16       	cp	r8, r24
    1788:	99 06       	cpc	r9, r25
    178a:	a0 f4       	brcc	.+40     	; 0x17b4 <vfprintf+0x1e0>
    178c:	b6 01       	movw	r22, r12
    178e:	80 e2       	ldi	r24, 0x20	; 32
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	33 d1       	rcall	.+614    	; 0x19fa <fputc>
    1794:	2a 94       	dec	r2
    1796:	f5 cf       	rjmp	.-22     	; 0x1782 <vfprintf+0x1ae>
    1798:	f5 01       	movw	r30, r10
    179a:	37 fc       	sbrc	r3, 7
    179c:	85 91       	lpm	r24, Z+
    179e:	37 fe       	sbrs	r3, 7
    17a0:	81 91       	ld	r24, Z+
    17a2:	5f 01       	movw	r10, r30
    17a4:	b6 01       	movw	r22, r12
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	28 d1       	rcall	.+592    	; 0x19fa <fputc>
    17aa:	21 10       	cpse	r2, r1
    17ac:	2a 94       	dec	r2
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	82 1a       	sub	r8, r18
    17b2:	91 08       	sbc	r9, r1
    17b4:	81 14       	cp	r8, r1
    17b6:	91 04       	cpc	r9, r1
    17b8:	79 f7       	brne	.-34     	; 0x1798 <vfprintf+0x1c4>
    17ba:	e1 c0       	rjmp	.+450    	; 0x197e <vfprintf+0x3aa>
    17bc:	84 36       	cpi	r24, 0x64	; 100
    17be:	11 f0       	breq	.+4      	; 0x17c4 <vfprintf+0x1f0>
    17c0:	89 36       	cpi	r24, 0x69	; 105
    17c2:	39 f5       	brne	.+78     	; 0x1812 <vfprintf+0x23e>
    17c4:	f8 01       	movw	r30, r16
    17c6:	37 fe       	sbrs	r3, 7
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <vfprintf+0x204>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	0c 5f       	subi	r16, 0xFC	; 252
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <vfprintf+0x214>
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	07 2e       	mov	r0, r23
    17de:	00 0c       	add	r0, r0
    17e0:	88 0b       	sbc	r24, r24
    17e2:	99 0b       	sbc	r25, r25
    17e4:	0e 5f       	subi	r16, 0xFE	; 254
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	f3 2d       	mov	r31, r3
    17ea:	ff 76       	andi	r31, 0x6F	; 111
    17ec:	3f 2e       	mov	r3, r31
    17ee:	97 ff       	sbrs	r25, 7
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <vfprintf+0x230>
    17f2:	90 95       	com	r25
    17f4:	80 95       	com	r24
    17f6:	70 95       	com	r23
    17f8:	61 95       	neg	r22
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	f0 68       	ori	r31, 0x80	; 128
    1802:	3f 2e       	mov	r3, r31
    1804:	2a e0       	ldi	r18, 0x0A	; 10
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	a3 01       	movw	r20, r6
    180a:	33 d1       	rcall	.+614    	; 0x1a72 <__ultoa_invert>
    180c:	88 2e       	mov	r8, r24
    180e:	86 18       	sub	r8, r6
    1810:	44 c0       	rjmp	.+136    	; 0x189a <vfprintf+0x2c6>
    1812:	85 37       	cpi	r24, 0x75	; 117
    1814:	31 f4       	brne	.+12     	; 0x1822 <vfprintf+0x24e>
    1816:	23 2d       	mov	r18, r3
    1818:	2f 7e       	andi	r18, 0xEF	; 239
    181a:	b2 2e       	mov	r11, r18
    181c:	2a e0       	ldi	r18, 0x0A	; 10
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	25 c0       	rjmp	.+74     	; 0x186c <vfprintf+0x298>
    1822:	93 2d       	mov	r25, r3
    1824:	99 7f       	andi	r25, 0xF9	; 249
    1826:	b9 2e       	mov	r11, r25
    1828:	8f 36       	cpi	r24, 0x6F	; 111
    182a:	c1 f0       	breq	.+48     	; 0x185c <vfprintf+0x288>
    182c:	18 f4       	brcc	.+6      	; 0x1834 <vfprintf+0x260>
    182e:	88 35       	cpi	r24, 0x58	; 88
    1830:	79 f0       	breq	.+30     	; 0x1850 <vfprintf+0x27c>
    1832:	ae c0       	rjmp	.+348    	; 0x1990 <vfprintf+0x3bc>
    1834:	80 37       	cpi	r24, 0x70	; 112
    1836:	19 f0       	breq	.+6      	; 0x183e <vfprintf+0x26a>
    1838:	88 37       	cpi	r24, 0x78	; 120
    183a:	21 f0       	breq	.+8      	; 0x1844 <vfprintf+0x270>
    183c:	a9 c0       	rjmp	.+338    	; 0x1990 <vfprintf+0x3bc>
    183e:	e9 2f       	mov	r30, r25
    1840:	e0 61       	ori	r30, 0x10	; 16
    1842:	be 2e       	mov	r11, r30
    1844:	b4 fe       	sbrs	r11, 4
    1846:	0d c0       	rjmp	.+26     	; 0x1862 <vfprintf+0x28e>
    1848:	fb 2d       	mov	r31, r11
    184a:	f4 60       	ori	r31, 0x04	; 4
    184c:	bf 2e       	mov	r11, r31
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <vfprintf+0x28e>
    1850:	34 fe       	sbrs	r3, 4
    1852:	0a c0       	rjmp	.+20     	; 0x1868 <vfprintf+0x294>
    1854:	29 2f       	mov	r18, r25
    1856:	26 60       	ori	r18, 0x06	; 6
    1858:	b2 2e       	mov	r11, r18
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x294>
    185c:	28 e0       	ldi	r18, 0x08	; 8
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	05 c0       	rjmp	.+10     	; 0x186c <vfprintf+0x298>
    1862:	20 e1       	ldi	r18, 0x10	; 16
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	02 c0       	rjmp	.+4      	; 0x186c <vfprintf+0x298>
    1868:	20 e1       	ldi	r18, 0x10	; 16
    186a:	32 e0       	ldi	r19, 0x02	; 2
    186c:	f8 01       	movw	r30, r16
    186e:	b7 fe       	sbrs	r11, 7
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <vfprintf+0x2ac>
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0c 5f       	subi	r16, 0xFC	; 252
    187c:	1f 4f       	sbci	r17, 0xFF	; 255
    187e:	06 c0       	rjmp	.+12     	; 0x188c <vfprintf+0x2b8>
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 5f       	subi	r16, 0xFE	; 254
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	a3 01       	movw	r20, r6
    188e:	f1 d0       	rcall	.+482    	; 0x1a72 <__ultoa_invert>
    1890:	88 2e       	mov	r8, r24
    1892:	86 18       	sub	r8, r6
    1894:	fb 2d       	mov	r31, r11
    1896:	ff 77       	andi	r31, 0x7F	; 127
    1898:	3f 2e       	mov	r3, r31
    189a:	36 fe       	sbrs	r3, 6
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x2e4>
    189e:	23 2d       	mov	r18, r3
    18a0:	2e 7f       	andi	r18, 0xFE	; 254
    18a2:	a2 2e       	mov	r10, r18
    18a4:	89 14       	cp	r8, r9
    18a6:	58 f4       	brcc	.+22     	; 0x18be <vfprintf+0x2ea>
    18a8:	34 fe       	sbrs	r3, 4
    18aa:	0b c0       	rjmp	.+22     	; 0x18c2 <vfprintf+0x2ee>
    18ac:	32 fc       	sbrc	r3, 2
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <vfprintf+0x2ee>
    18b0:	83 2d       	mov	r24, r3
    18b2:	8e 7e       	andi	r24, 0xEE	; 238
    18b4:	a8 2e       	mov	r10, r24
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <vfprintf+0x2ee>
    18b8:	b8 2c       	mov	r11, r8
    18ba:	a3 2c       	mov	r10, r3
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <vfprintf+0x2f0>
    18be:	b8 2c       	mov	r11, r8
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <vfprintf+0x2f0>
    18c2:	b9 2c       	mov	r11, r9
    18c4:	a4 fe       	sbrs	r10, 4
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <vfprintf+0x312>
    18c8:	fe 01       	movw	r30, r28
    18ca:	e8 0d       	add	r30, r8
    18cc:	f1 1d       	adc	r31, r1
    18ce:	80 81       	ld	r24, Z
    18d0:	80 33       	cpi	r24, 0x30	; 48
    18d2:	21 f4       	brne	.+8      	; 0x18dc <vfprintf+0x308>
    18d4:	9a 2d       	mov	r25, r10
    18d6:	99 7e       	andi	r25, 0xE9	; 233
    18d8:	a9 2e       	mov	r10, r25
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <vfprintf+0x31a>
    18dc:	a2 fe       	sbrs	r10, 2
    18de:	06 c0       	rjmp	.+12     	; 0x18ec <vfprintf+0x318>
    18e0:	b3 94       	inc	r11
    18e2:	b3 94       	inc	r11
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <vfprintf+0x31a>
    18e6:	8a 2d       	mov	r24, r10
    18e8:	86 78       	andi	r24, 0x86	; 134
    18ea:	09 f0       	breq	.+2      	; 0x18ee <vfprintf+0x31a>
    18ec:	b3 94       	inc	r11
    18ee:	a3 fc       	sbrc	r10, 3
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <vfprintf+0x33e>
    18f2:	a0 fe       	sbrs	r10, 0
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x32e>
    18f6:	b2 14       	cp	r11, r2
    18f8:	80 f4       	brcc	.+32     	; 0x191a <vfprintf+0x346>
    18fa:	28 0c       	add	r2, r8
    18fc:	92 2c       	mov	r9, r2
    18fe:	9b 18       	sub	r9, r11
    1900:	0d c0       	rjmp	.+26     	; 0x191c <vfprintf+0x348>
    1902:	b2 14       	cp	r11, r2
    1904:	58 f4       	brcc	.+22     	; 0x191c <vfprintf+0x348>
    1906:	b6 01       	movw	r22, r12
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	76 d0       	rcall	.+236    	; 0x19fa <fputc>
    190e:	b3 94       	inc	r11
    1910:	f8 cf       	rjmp	.-16     	; 0x1902 <vfprintf+0x32e>
    1912:	b2 14       	cp	r11, r2
    1914:	18 f4       	brcc	.+6      	; 0x191c <vfprintf+0x348>
    1916:	2b 18       	sub	r2, r11
    1918:	02 c0       	rjmp	.+4      	; 0x191e <vfprintf+0x34a>
    191a:	98 2c       	mov	r9, r8
    191c:	21 2c       	mov	r2, r1
    191e:	a4 fe       	sbrs	r10, 4
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <vfprintf+0x36c>
    1922:	b6 01       	movw	r22, r12
    1924:	80 e3       	ldi	r24, 0x30	; 48
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	68 d0       	rcall	.+208    	; 0x19fa <fputc>
    192a:	a2 fe       	sbrs	r10, 2
    192c:	16 c0       	rjmp	.+44     	; 0x195a <vfprintf+0x386>
    192e:	a1 fc       	sbrc	r10, 1
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <vfprintf+0x364>
    1932:	88 e7       	ldi	r24, 0x78	; 120
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x368>
    1938:	88 e5       	ldi	r24, 0x58	; 88
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b6 01       	movw	r22, r12
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <vfprintf+0x384>
    1940:	8a 2d       	mov	r24, r10
    1942:	86 78       	andi	r24, 0x86	; 134
    1944:	51 f0       	breq	.+20     	; 0x195a <vfprintf+0x386>
    1946:	a1 fe       	sbrs	r10, 1
    1948:	02 c0       	rjmp	.+4      	; 0x194e <vfprintf+0x37a>
    194a:	8b e2       	ldi	r24, 0x2B	; 43
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vfprintf+0x37c>
    194e:	80 e2       	ldi	r24, 0x20	; 32
    1950:	a7 fc       	sbrc	r10, 7
    1952:	8d e2       	ldi	r24, 0x2D	; 45
    1954:	b6 01       	movw	r22, r12
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	50 d0       	rcall	.+160    	; 0x19fa <fputc>
    195a:	89 14       	cp	r8, r9
    195c:	30 f4       	brcc	.+12     	; 0x196a <vfprintf+0x396>
    195e:	b6 01       	movw	r22, r12
    1960:	80 e3       	ldi	r24, 0x30	; 48
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	4a d0       	rcall	.+148    	; 0x19fa <fputc>
    1966:	9a 94       	dec	r9
    1968:	f8 cf       	rjmp	.-16     	; 0x195a <vfprintf+0x386>
    196a:	8a 94       	dec	r8
    196c:	f3 01       	movw	r30, r6
    196e:	e8 0d       	add	r30, r8
    1970:	f1 1d       	adc	r31, r1
    1972:	80 81       	ld	r24, Z
    1974:	b6 01       	movw	r22, r12
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	40 d0       	rcall	.+128    	; 0x19fa <fputc>
    197a:	81 10       	cpse	r8, r1
    197c:	f6 cf       	rjmp	.-20     	; 0x196a <vfprintf+0x396>
    197e:	22 20       	and	r2, r2
    1980:	09 f4       	brne	.+2      	; 0x1984 <vfprintf+0x3b0>
    1982:	4e ce       	rjmp	.-868    	; 0x1620 <vfprintf+0x4c>
    1984:	b6 01       	movw	r22, r12
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	37 d0       	rcall	.+110    	; 0x19fa <fputc>
    198c:	2a 94       	dec	r2
    198e:	f7 cf       	rjmp	.-18     	; 0x197e <vfprintf+0x3aa>
    1990:	f6 01       	movw	r30, r12
    1992:	86 81       	ldd	r24, Z+6	; 0x06
    1994:	97 81       	ldd	r25, Z+7	; 0x07
    1996:	02 c0       	rjmp	.+4      	; 0x199c <vfprintf+0x3c8>
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	9f ef       	ldi	r25, 0xFF	; 255
    199c:	2b 96       	adiw	r28, 0x0b	; 11
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	ff 90       	pop	r15
    19b2:	ef 90       	pop	r14
    19b4:	df 90       	pop	r13
    19b6:	cf 90       	pop	r12
    19b8:	bf 90       	pop	r11
    19ba:	af 90       	pop	r10
    19bc:	9f 90       	pop	r9
    19be:	8f 90       	pop	r8
    19c0:	7f 90       	pop	r7
    19c2:	6f 90       	pop	r6
    19c4:	5f 90       	pop	r5
    19c6:	4f 90       	pop	r4
    19c8:	3f 90       	pop	r3
    19ca:	2f 90       	pop	r2
    19cc:	08 95       	ret

000019ce <strnlen_P>:
    19ce:	fc 01       	movw	r30, r24
    19d0:	05 90       	lpm	r0, Z+
    19d2:	61 50       	subi	r22, 0x01	; 1
    19d4:	70 40       	sbci	r23, 0x00	; 0
    19d6:	01 10       	cpse	r0, r1
    19d8:	d8 f7       	brcc	.-10     	; 0x19d0 <strnlen_P+0x2>
    19da:	80 95       	com	r24
    19dc:	90 95       	com	r25
    19de:	8e 0f       	add	r24, r30
    19e0:	9f 1f       	adc	r25, r31
    19e2:	08 95       	ret

000019e4 <strnlen>:
    19e4:	fc 01       	movw	r30, r24
    19e6:	61 50       	subi	r22, 0x01	; 1
    19e8:	70 40       	sbci	r23, 0x00	; 0
    19ea:	01 90       	ld	r0, Z+
    19ec:	01 10       	cpse	r0, r1
    19ee:	d8 f7       	brcc	.-10     	; 0x19e6 <strnlen+0x2>
    19f0:	80 95       	com	r24
    19f2:	90 95       	com	r25
    19f4:	8e 0f       	add	r24, r30
    19f6:	9f 1f       	adc	r25, r31
    19f8:	08 95       	ret

000019fa <fputc>:
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	fb 01       	movw	r30, r22
    1a04:	23 81       	ldd	r18, Z+3	; 0x03
    1a06:	21 fd       	sbrc	r18, 1
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <fputc+0x16>
    1a0a:	8f ef       	ldi	r24, 0xFF	; 255
    1a0c:	9f ef       	ldi	r25, 0xFF	; 255
    1a0e:	2c c0       	rjmp	.+88     	; 0x1a68 <fputc+0x6e>
    1a10:	22 ff       	sbrs	r18, 2
    1a12:	16 c0       	rjmp	.+44     	; 0x1a40 <fputc+0x46>
    1a14:	46 81       	ldd	r20, Z+6	; 0x06
    1a16:	57 81       	ldd	r21, Z+7	; 0x07
    1a18:	24 81       	ldd	r18, Z+4	; 0x04
    1a1a:	35 81       	ldd	r19, Z+5	; 0x05
    1a1c:	42 17       	cp	r20, r18
    1a1e:	53 07       	cpc	r21, r19
    1a20:	44 f4       	brge	.+16     	; 0x1a32 <fputc+0x38>
    1a22:	a0 81       	ld	r26, Z
    1a24:	b1 81       	ldd	r27, Z+1	; 0x01
    1a26:	9d 01       	movw	r18, r26
    1a28:	2f 5f       	subi	r18, 0xFF	; 255
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	31 83       	std	Z+1, r19	; 0x01
    1a2e:	20 83       	st	Z, r18
    1a30:	8c 93       	st	X, r24
    1a32:	26 81       	ldd	r18, Z+6	; 0x06
    1a34:	37 81       	ldd	r19, Z+7	; 0x07
    1a36:	2f 5f       	subi	r18, 0xFF	; 255
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	37 83       	std	Z+7, r19	; 0x07
    1a3c:	26 83       	std	Z+6, r18	; 0x06
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <fputc+0x6e>
    1a40:	8b 01       	movw	r16, r22
    1a42:	ec 01       	movw	r28, r24
    1a44:	fb 01       	movw	r30, r22
    1a46:	00 84       	ldd	r0, Z+8	; 0x08
    1a48:	f1 85       	ldd	r31, Z+9	; 0x09
    1a4a:	e0 2d       	mov	r30, r0
    1a4c:	09 95       	icall
    1a4e:	89 2b       	or	r24, r25
    1a50:	e1 f6       	brne	.-72     	; 0x1a0a <fputc+0x10>
    1a52:	d8 01       	movw	r26, r16
    1a54:	16 96       	adiw	r26, 0x06	; 6
    1a56:	8d 91       	ld	r24, X+
    1a58:	9c 91       	ld	r25, X
    1a5a:	17 97       	sbiw	r26, 0x07	; 7
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	17 96       	adiw	r26, 0x07	; 7
    1a60:	9c 93       	st	X, r25
    1a62:	8e 93       	st	-X, r24
    1a64:	16 97       	sbiw	r26, 0x06	; 6
    1a66:	ce 01       	movw	r24, r28
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret

00001a72 <__ultoa_invert>:
    1a72:	fa 01       	movw	r30, r20
    1a74:	aa 27       	eor	r26, r26
    1a76:	28 30       	cpi	r18, 0x08	; 8
    1a78:	51 f1       	breq	.+84     	; 0x1ace <__ultoa_invert+0x5c>
    1a7a:	20 31       	cpi	r18, 0x10	; 16
    1a7c:	81 f1       	breq	.+96     	; 0x1ade <__ultoa_invert+0x6c>
    1a7e:	e8 94       	clt
    1a80:	6f 93       	push	r22
    1a82:	6e 7f       	andi	r22, 0xFE	; 254
    1a84:	6e 5f       	subi	r22, 0xFE	; 254
    1a86:	7f 4f       	sbci	r23, 0xFF	; 255
    1a88:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8c:	af 4f       	sbci	r26, 0xFF	; 255
    1a8e:	b1 e0       	ldi	r27, 0x01	; 1
    1a90:	3e d0       	rcall	.+124    	; 0x1b0e <__ultoa_invert+0x9c>
    1a92:	b4 e0       	ldi	r27, 0x04	; 4
    1a94:	3c d0       	rcall	.+120    	; 0x1b0e <__ultoa_invert+0x9c>
    1a96:	67 0f       	add	r22, r23
    1a98:	78 1f       	adc	r23, r24
    1a9a:	89 1f       	adc	r24, r25
    1a9c:	9a 1f       	adc	r25, r26
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	68 0f       	add	r22, r24
    1aa2:	79 1f       	adc	r23, r25
    1aa4:	8a 1f       	adc	r24, r26
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	6a 0f       	add	r22, r26
    1aac:	71 1d       	adc	r23, r1
    1aae:	81 1d       	adc	r24, r1
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	20 d0       	rcall	.+64     	; 0x1af6 <__ultoa_invert+0x84>
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <__ultoa_invert+0x48>
    1ab8:	68 94       	set
    1aba:	3f 91       	pop	r19
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	26 9f       	mul	r18, r22
    1ac0:	11 24       	eor	r1, r1
    1ac2:	30 19       	sub	r19, r0
    1ac4:	30 5d       	subi	r19, 0xD0	; 208
    1ac6:	31 93       	st	Z+, r19
    1ac8:	de f6       	brtc	.-74     	; 0x1a80 <__ultoa_invert+0xe>
    1aca:	cf 01       	movw	r24, r30
    1acc:	08 95       	ret
    1ace:	46 2f       	mov	r20, r22
    1ad0:	47 70       	andi	r20, 0x07	; 7
    1ad2:	40 5d       	subi	r20, 0xD0	; 208
    1ad4:	41 93       	st	Z+, r20
    1ad6:	b3 e0       	ldi	r27, 0x03	; 3
    1ad8:	0f d0       	rcall	.+30     	; 0x1af8 <__ultoa_invert+0x86>
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__ultoa_invert+0x5c>
    1adc:	f6 cf       	rjmp	.-20     	; 0x1aca <__ultoa_invert+0x58>
    1ade:	46 2f       	mov	r20, r22
    1ae0:	4f 70       	andi	r20, 0x0F	; 15
    1ae2:	40 5d       	subi	r20, 0xD0	; 208
    1ae4:	4a 33       	cpi	r20, 0x3A	; 58
    1ae6:	18 f0       	brcs	.+6      	; 0x1aee <__ultoa_invert+0x7c>
    1ae8:	49 5d       	subi	r20, 0xD9	; 217
    1aea:	31 fd       	sbrc	r19, 1
    1aec:	40 52       	subi	r20, 0x20	; 32
    1aee:	41 93       	st	Z+, r20
    1af0:	02 d0       	rcall	.+4      	; 0x1af6 <__ultoa_invert+0x84>
    1af2:	a9 f7       	brne	.-22     	; 0x1ade <__ultoa_invert+0x6c>
    1af4:	ea cf       	rjmp	.-44     	; 0x1aca <__ultoa_invert+0x58>
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	a6 95       	lsr	r26
    1afa:	97 95       	ror	r25
    1afc:	87 95       	ror	r24
    1afe:	77 95       	ror	r23
    1b00:	67 95       	ror	r22
    1b02:	ba 95       	dec	r27
    1b04:	c9 f7       	brne	.-14     	; 0x1af8 <__ultoa_invert+0x86>
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	61 05       	cpc	r22, r1
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	08 95       	ret
    1b0e:	9b 01       	movw	r18, r22
    1b10:	ac 01       	movw	r20, r24
    1b12:	0a 2e       	mov	r0, r26
    1b14:	06 94       	lsr	r0
    1b16:	57 95       	ror	r21
    1b18:	47 95       	ror	r20
    1b1a:	37 95       	ror	r19
    1b1c:	27 95       	ror	r18
    1b1e:	ba 95       	dec	r27
    1b20:	c9 f7       	brne	.-14     	; 0x1b14 <__ultoa_invert+0xa2>
    1b22:	62 0f       	add	r22, r18
    1b24:	73 1f       	adc	r23, r19
    1b26:	84 1f       	adc	r24, r20
    1b28:	95 1f       	adc	r25, r21
    1b2a:	a0 1d       	adc	r26, r0
    1b2c:	08 95       	ret

00001b2e <_exit>:
    1b2e:	f8 94       	cli

00001b30 <__stop_program>:
    1b30:	ff cf       	rjmp	.-2      	; 0x1b30 <__stop_program>
